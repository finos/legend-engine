// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::openapi::tostring::*;
import meta::external::format::openapi::metamodel::*;
import meta::json::*;
import meta::pure::service::*;

function meta::external::format::openapi::tostring::openApiJSONResult(o:OpenApi[1]):JSONResult<OpenApi|1>[1]
{
  ^JSONResult<OpenApi|1>
  (
    value=$o,
    max=1000,
    config = config(false,false,true,true),
    extraSerializers = [
      {p:Reference[1],s:JSONState[1]|newJSONObject([newJSONKeyValue('$ref',^JSONString(value='#/components/schemas/'+$p.ref))])},
      {p:Schema[1],s:JSONState[1]|$p->processOpenApiSchema(false,$s)}
    ]
  );
}

function <<access.private>> meta::external::format::openapi::tostring::processOpenApiSchema(p:Schema[1], full:Boolean[1], s:JSONState[1]):JSONElement[1]
{
  $p->anyToJSON($s,100000,defaultConfig());
}