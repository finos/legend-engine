{
  "_type" : "simple",
  "authDependent" : false,
  "globalImplementationSupport" : {
    "_type" : "java",
    "classes" : [ {
      "byteCode" : "yv66vgAAADcAEgcADwcAEAcAEQEAB2dldE5hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACmdldFBlcnNvbnMBABIoKUxqYXZhL3V0aWwvTGlzdDsBAAlTaWduYXR1cmUBACsoKUxqYXZhL3V0aWwvTGlzdDxMX3B1cmUvYXBwL3Rlc3QvUGVyc29uOz47AQAIZ2V0RmlybXMBACkoKUxqYXZhL3V0aWwvTGlzdDxMX3B1cmUvYXBwL3Rlc3QvRmlybTs+OwEAHWdldEFsbG95U3RvcmVPYmplY3RSZWZlcmVuY2UkAQAKU291cmNlRmlsZQEADEFkZHJlc3MuamF2YQEAFl9wdXJlL2FwcC90ZXN0L0FkZHJlc3MBABBqYXZhL2xhbmcvT2JqZWN0AQBIb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvc2hhcmVkL0lSZWZlcmVuY2VkT2JqZWN0BgEAAQACAAEAAwAAAAQEAQAEAAUAAAQBAAYABwABAAgAAAACAAkEAQAKAAcAAQAIAAAAAgALBAEADAAFAAAAAQANAAAAAgAO",
      "name" : "Address",
      "package" : "_pure.app.test",
      "source" : "package _pure.app.test;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Address extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    String getName();\n    List<Person> getPersons();\n    List<Firm> getFirms();\n    String getAlloyStoreObjectReference$();\n}"
    }, {
      "byteCode" : "yv66vgAAADcAEgcADwcAEAcAEQEAB2dldE5hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEADGdldEVtcGxveWVlcwEAEigpTGphdmEvdXRpbC9MaXN0OwEACVNpZ25hdHVyZQEAKygpTGphdmEvdXRpbC9MaXN0PExfcHVyZS9hcHAvdGVzdC9QZXJzb247PjsBAApnZXRBZGRyZXNzAQAaKClMX3B1cmUvYXBwL3Rlc3QvQWRkcmVzczsBAB1nZXRBbGxveVN0b3JlT2JqZWN0UmVmZXJlbmNlJAEAClNvdXJjZUZpbGUBAAlGaXJtLmphdmEBABNfcHVyZS9hcHAvdGVzdC9GaXJtAQAQamF2YS9sYW5nL09iamVjdAEASG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL3N0b3JlL3NoYXJlZC9JUmVmZXJlbmNlZE9iamVjdAYBAAEAAgABAAMAAAAEBAEABAAFAAAEAQAGAAcAAQAIAAAAAgAJBAEACgALAAAEAQAMAAUAAAABAA0AAAACAA4=",
      "name" : "Firm",
      "package" : "_pure.app.test",
      "source" : "package _pure.app.test;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Firm extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    String getName();\n    List<Person> getEmployees();\n    Address getAddress();\n    String getAlloyStoreObjectReference$();\n}"
    }, {
      "byteCode" : "yv66vgAAADcADgcACgcACwcADAcADQEADmdldEFkZHJlc3NOYW1lAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAB1nZXRBbGxveVN0b3JlT2JqZWN0UmVmZXJlbmNlJAEAClNvdXJjZUZpbGUBABdGaXJtX01hcF90ZXN0X0Zpcm0uamF2YQEAIV9wdXJlL2FwcC90ZXN0L0Zpcm1fTWFwX3Rlc3RfRmlybQEAEGphdmEvbGFuZy9PYmplY3QBABNfcHVyZS9hcHAvdGVzdC9GaXJtAQBIb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvc2hhcmVkL0lSZWZlcmVuY2VkT2JqZWN0BgEAAQACAAIAAwAEAAAAAgQBAAUABgAABAEABwAGAAAAAQAIAAAAAgAJ",
      "name" : "Firm_Map_test_Firm",
      "package" : "_pure.app.test",
      "source" : "package _pure.app.test;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Firm_Map_test_Firm extends Firm, org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    String getAddressName();\n    String getAlloyStoreObjectReference$();\n}"
    }, {
      "byteCode" : "yv66vgAAADcAEAcADQcADgcADwEAC2dldEZ1bGxOYW1lAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAdnZXRGaXJtAQAXKClMX3B1cmUvYXBwL3Rlc3QvRmlybTsBAApnZXRBZGRyZXNzAQAaKClMX3B1cmUvYXBwL3Rlc3QvQWRkcmVzczsBAB1nZXRBbGxveVN0b3JlT2JqZWN0UmVmZXJlbmNlJAEAClNvdXJjZUZpbGUBAAtQZXJzb24uamF2YQEAFV9wdXJlL2FwcC90ZXN0L1BlcnNvbgEAEGphdmEvbGFuZy9PYmplY3QBAEhvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9zdG9yZS9zaGFyZWQvSVJlZmVyZW5jZWRPYmplY3QGAQABAAIAAQADAAAABAQBAAQABQAABAEABgAHAAAEAQAIAAkAAAQBAAoABQAAAAEACwAAAAIADA==",
      "name" : "Person",
      "package" : "_pure.app.test",
      "source" : "package _pure.app.test;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Person extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    String getFullName();\n    Firm getFirm();\n    Address getAddress();\n    String getAlloyStoreObjectReference$();\n}"
    }, {
      "byteCode" : "yv66vgAAADcADwcACwcADAcADQcADgEAC2dldEZpcm1OYW1lAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAA5nZXRBZGRyZXNzTmFtZQEAHWdldEFsbG95U3RvcmVPYmplY3RSZWZlcmVuY2UkAQAKU291cmNlRmlsZQEAG1BlcnNvbl9NYXBfdGVzdF9QZXJzb24uamF2YQEAJV9wdXJlL2FwcC90ZXN0L1BlcnNvbl9NYXBfdGVzdF9QZXJzb24BABBqYXZhL2xhbmcvT2JqZWN0AQAVX3B1cmUvYXBwL3Rlc3QvUGVyc29uAQBIb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvc2hhcmVkL0lSZWZlcmVuY2VkT2JqZWN0BgEAAQACAAIAAwAEAAAAAwQBAAUABgAABAEABwAGAAAEAQAIAAYAAAABAAkAAAACAAo=",
      "name" : "Person_Map_test_Person",
      "package" : "_pure.app.test",
      "source" : "package _pure.app.test;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Person_Map_test_Person extends Person, org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    String getFirmName();\n    String getAddressName();\n    String getAlloyStoreObjectReference$();\n}"
    }, {
      "byteCode" : "yv66vgAAADcAGAoABQARBwASCgACABMHABQHABUHABYBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAKc2VyaWFsaXplcgEA6ihMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvcGxhdGZvcm0vSVNlcmlhbGl6YXRpb25Xcml0ZXI7TG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL3N0b3JlL3NoYXJlZC9JRXhlY3V0aW9uTm9kZUNvbnRleHQ7KUxvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9zdG9yZS9wbGF0Zm9ybS9JR3JhcGhTZXJpYWxpemVyOwEACVNpZ25hdHVyZQEA7ShMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvcGxhdGZvcm0vSVNlcmlhbGl6YXRpb25Xcml0ZXI7TG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL3N0b3JlL3NoYXJlZC9JRXhlY3V0aW9uTm9kZUNvbnRleHQ7KUxvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9zdG9yZS9wbGF0Zm9ybS9JR3JhcGhTZXJpYWxpemVyPCo+OwEAClNvdXJjZUZpbGUBAA5TZXJpYWxpemUuamF2YQwABwAIAQAaX3B1cmUvcGxhbi9yb290L1NlcmlhbGl6ZXIMAAcAFwEAGV9wdXJlL3BsYW4vcm9vdC9TZXJpYWxpemUBABBqYXZhL2xhbmcvT2JqZWN0AQBvb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvcGxhdGZvcm0vSVBsYXRmb3JtUHVyZUV4cHJlc3Npb25FeGVjdXRpb25Ob2RlU2VyaWFsaXplU3BlY2lmaWNzAQCgKExvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9zdG9yZS9wbGF0Zm9ybS9JU2VyaWFsaXphdGlvbldyaXRlcjtMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvc2hhcmVkL0lFeGVjdXRpb25Ob2RlQ29udGV4dDspVgAhAAQABQABAAYAAAACAAEABwAIAAEACQAAAB0AAQABAAAABSq3AAGxAAAAAQAKAAAABgABAAAACAABAAsADAACAAkAAAAiAAQAAwAAAAq7AAJZKyy3AAOwAAAAAQAKAAAABgABAAAADQANAAAAAgAOAAEADwAAAAIAEA==",
      "name" : "Serialize",
      "package" : "_pure.plan.root",
      "source" : "package _pure.plan.root;\n\nimport org.finos.legend.engine.plan.dependencies.store.platform.IGraphSerializer;\nimport org.finos.legend.engine.plan.dependencies.store.platform.IPlatformPureExpressionExecutionNodeSerializeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.platform.ISerializationWriter;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\n\npublic class Serialize implements IPlatformPureExpressionExecutionNodeSerializeSpecifics\n{\n    public IGraphSerializer<?> serializer(ISerializationWriter writer,\n                                          IExecutionNodeContext context)\n    {\n        return new Serializer(writer, context);\n    }\n}"
    }, {
      "byteCode" : "yv66vgAAADcAggoAHgA1CQAdADYJAB0ANwcAOAgAOQsABAA6CwA7ADwLADsAPQgAPgsAGwA/CwA7AEAIAEELABsAQhIAAABICwA7AEkIAEoLABsASxIAAQBICwA7AE4IAE8IAFALAFEAUgsAUQBLEgACAEgIAFQLAFUAUgcAVgoAHQBXBwBYBwBZBwBaAQAGd3JpdGVyAQBPTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL3N0b3JlL3BsYXRmb3JtL0lTZXJpYWxpemF0aW9uV3JpdGVyOwEAB2NvbnRleHQBAE5Mb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvc2hhcmVkL0lFeGVjdXRpb25Ob2RlQ29udGV4dDsBAAY8aW5pdD4BAKAoTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL3N0b3JlL3BsYXRmb3JtL0lTZXJpYWxpemF0aW9uV3JpdGVyO0xvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9zdG9yZS9zaGFyZWQvSUV4ZWN1dGlvbk5vZGVDb250ZXh0OylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACXNlcmlhbGl6ZQEAGihMX3B1cmUvYXBwL3Rlc3QvUGVyc29uOylWAQANU3RhY2tNYXBUYWJsZQEADndyaXRlRmlybV9maXJtAQAYKExfcHVyZS9hcHAvdGVzdC9GaXJtOylWAQAZd3JpdGVBZGRyZXNzX2Zpcm1fYWRkcmVzcwEAGyhMX3B1cmUvYXBwL3Rlc3QvQWRkcmVzczspVgEAFHdyaXRlQWRkcmVzc19hZGRyZXNzAQAVKExqYXZhL2xhbmcvT2JqZWN0OylWAQAJU2lnbmF0dXJlAQB2TGphdmEvbGFuZy9PYmplY3Q7TG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL3N0b3JlL3BsYXRmb3JtL0lHcmFwaFNlcmlhbGl6ZXI8TF9wdXJlL2FwcC90ZXN0L1BlcnNvbjs+OwEAClNvdXJjZUZpbGUBAA9TZXJpYWxpemVyLmphdmEMACQAWwwAIAAhDAAiACMBAEhvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9zdG9yZS9zaGFyZWQvSVJlZmVyZW5jZWRPYmplY3QBAAx0ZXN0OjpQZXJzb24MAFwAXQcAXgwAXwBgDABfAGEBAAhmdWxsTmFtZQwAYgBdDABjAGABAARmaXJtDABkAGUBABBCb290c3RyYXBNZXRob2RzDwYAZhAAMA8FAGcQACwMAGgAaQwAagBrAQAHYWRkcmVzcwwAbABtDwUAbhAALgwAbwBbAQAKdGVzdDo6RmlybQEABG5hbWUHAHAMAHEAXQ8FAHIBAA10ZXN0OjpBZGRyZXNzBwBzAQAVX3B1cmUvYXBwL3Rlc3QvUGVyc29uDAAoACkBABpfcHVyZS9wbGFuL3Jvb3QvU2VyaWFsaXplcgEAEGphdmEvbGFuZy9PYmplY3QBAElvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9zdG9yZS9wbGF0Zm9ybS9JR3JhcGhTZXJpYWxpemVyAQADKClWAQAdZ2V0QWxsb3lTdG9yZU9iamVjdFJlZmVyZW5jZSQBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEATW9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL3N0b3JlL3BsYXRmb3JtL0lTZXJpYWxpemF0aW9uV3JpdGVyAQALc3RhcnRPYmplY3QBACcoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7KVYBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAAtnZXRGdWxsTmFtZQEAE3dyaXRlU3RyaW5nUHJvcGVydHkBAAdnZXRGaXJtAQAXKClMX3B1cmUvYXBwL3Rlc3QvRmlybTsKAHQAdQoAHQB2AQAGYWNjZXB0AQA7KExfcHVyZS9wbGFuL3Jvb3QvU2VyaWFsaXplcjspTGphdmEvdXRpbC9mdW5jdGlvbi9Db25zdW1lcjsBABR3cml0ZUNvbXBsZXhQcm9wZXJ0eQEARChMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL09iamVjdDtMamF2YS91dGlsL2Z1bmN0aW9uL0NvbnN1bWVyOylWAQAKZ2V0QWRkcmVzcwEAGigpTF9wdXJlL2FwcC90ZXN0L0FkZHJlc3M7CgAdAHcBAAllbmRPYmplY3QBABNfcHVyZS9hcHAvdGVzdC9GaXJtAQAHZ2V0TmFtZQoAHQB4AQAWX3B1cmUvYXBwL3Rlc3QvQWRkcmVzcwcAeQwAegB+DAArACwMAC8ALgwALQAuAQAiamF2YS9sYW5nL2ludm9rZS9MYW1iZGFNZXRhZmFjdG9yeQEAC21ldGFmYWN0b3J5BwCAAQAGTG9va3VwAQAMSW5uZXJDbGFzc2VzAQDMKExqYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZXMkTG9va3VwO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvaW52b2tlL01ldGhvZFR5cGU7TGphdmEvbGFuZy9pbnZva2UvTWV0aG9kVHlwZTtMamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGU7TGphdmEvbGFuZy9pbnZva2UvTWV0aG9kVHlwZTspTGphdmEvbGFuZy9pbnZva2UvQ2FsbFNpdGU7BwCBAQAlamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGVzJExvb2t1cAEAHmphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlcwAhAB0AHgABAB8AAgACACAAIQAAAAIAIgAjAAAABgAAACQAJQABACYAAAAzAAIAAwAAAA8qtwABKiu1AAIqLLUAA7EAAAABACcAAAASAAQAAAARAAQAEgAJABMADgAUAAEAKAApAAEAJgAAAMUABAACAAAAbyvBAASZABcqtAACEgUruQAGAQC5AAcDAKcADiq0AAISBbkACAIAKrQAAhIJK7kACgEAuQALAwAqtAACEgwruQANAQAqugAOAAC5AA8EACq0AAISECu5ABEBACq6ABIAALkADwQAKrQAArkAEwEAsQAAAAIAJwAAADoADgAAABgABwAaAA4AHAATABsAGwAgACYAIgA3ACMAPgAlAEkAJABOACcAVQApAGAAKABlACsAbgAsACoAAAAEAAIbCgABACsALAABACYAAABtAAQAAgAAAD0qtAACEhS5AAgCACq0AAISFSu5ABYBALkACwMAKrQAAhIQK7kAFwEAKroAGAAAuQAPBAAqtAACuQATAQCxAAAAAQAnAAAAHgAHAAAAMAALADEAHAAyACMANAAuADMAMwA2ADwANwABAC0ALgABACYAAABKAAMAAgAAACYqtAACEhm5AAgCACq0AAISFSu5ABoBALkACwMAKrQAArkAEwEAsQAAAAEAJwAAABIABAAAADsACwA8ABwAPQAlAD4AAQAvAC4AAQAmAAAASgADAAIAAAAmKrQAAhIZuQAIAgAqtAACEhUruQAaAQC5AAsDACq0AAK5ABMBALEAAAABACcAAAASAAQAAABCAAsAQwAcAEQAJQBFEEEAKAAwAAEAJgAAACEAAgACAAAACSorwAAbtgAcsQAAAAEAJwAAAAYAAQAAAAsABAAxAAAAAgAyADMAAAACADQAfQAAAAoAAQB7AH8AfAAZAEMAAAAgAAMARAADAEUARgBHAEQAAwBFAEwATQBEAAMARQBTAE0=",
      "name" : "Serializer",
      "package" : "_pure.plan.root",
      "source" : "package _pure.plan.root;\n\nimport _pure.app.test.Address;\nimport _pure.app.test.Firm;\nimport _pure.app.test.Person;\nimport org.finos.legend.engine.plan.dependencies.store.platform.IGraphSerializer;\nimport org.finos.legend.engine.plan.dependencies.store.platform.ISerializationWriter;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\npublic class Serializer implements IGraphSerializer<Person>\n{\n    private ISerializationWriter writer;\n    private IExecutionNodeContext context;\n\n    Serializer(ISerializationWriter writer, IExecutionNodeContext context)\n    {\n        this.writer = writer;\n        this.context = context;\n    }\n\n    public void serialize(Person value)\n    {\n        if (value instanceof IReferencedObject)\n        {\n            this.writer\n                .startObject(\"test::Person\",\n                             ((IReferencedObject) value).getAlloyStoreObjectReference$());\n        }\n        else\n        {\n            this.writer.startObject(\"test::Person\");\n        }\n        this.writer.writeStringProperty(\"fullName\", value.getFullName());\n        this.writer\n            .writeComplexProperty(\"firm\",\n                                  value.getFirm(),\n                                  this::writeFirm_firm);\n        this.writer\n            .writeComplexProperty(\"address\",\n                                  value.getAddress(),\n                                  this::writeAddress_address);\n        this.writer.endObject();\n    }\n\n    public void writeFirm_firm(Firm value)\n    {\n        this.writer.startObject(\"test::Firm\");\n        this.writer.writeStringProperty(\"name\", value.getName());\n        this.writer\n            .writeComplexProperty(\"address\",\n                                  value.getAddress(),\n                                  this::writeAddress_firm_address);\n        this.writer.endObject();\n    }\n\n    public void writeAddress_firm_address(Address value)\n    {\n        this.writer.startObject(\"test::Address\");\n        this.writer.writeStringProperty(\"name\", value.getName());\n        this.writer.endObject();\n    }\n\n    public void writeAddress_address(Address value)\n    {\n        this.writer.startObject(\"test::Address\");\n        this.writer.writeStringProperty(\"name\", value.getName());\n        this.writer.endObject();\n    }\n}"
    }, {
      "byteCode" : "yv66vgAAADcARgoAEgA0BwA1CgACADQJABEANgoAAgA3CgACADgKAAIAOQoAAgA6CgACADsKAAIAPAoAAgA9CgACAD4KAAIAPwoAAgBACgACAEEKAAIAQgcAQwcARAcARQEACXNwZWNpZmljcwEAQ0xfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQwL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL1NwZWNpZmljczsBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAHcHJlcGFyZQEAOyhMamF2YS9zcWwvUmVzdWx0U2V0O0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nOylWAQARbmV4dEdyYXBoSW5zdGFuY2UBAE4oKUxvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZ3JhcGhGZXRjaC9JR3JhcGhJbnN0YW5jZTsBAAlTaWduYXR1cmUBAJsoKUxvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZ3JhcGhGZXRjaC9JR3JhcGhJbnN0YW5jZTwrTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL3N0b3JlL3NoYXJlZC9JUmVmZXJlbmNlZE9iamVjdDs+OwEAEXByaW1hcnlLZXlHZXR0ZXJzAQASKClMamF2YS91dGlsL0xpc3Q7AQAuKClMamF2YS91dGlsL0xpc3Q8TGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDs+OwEACW1hcHBpbmdJZAEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQATc291cmNlSW5zdGFuY2VTZXRJZAEAE3RhcmdldEluc3RhbmNlU2V0SWQBABBhZGRDaGlsZFRvUGFyZW50AQB1KExqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvT2JqZWN0O0xvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9zdG9yZS9zaGFyZWQvSUV4ZWN1dGlvbk5vZGVDb250ZXh0OylWAQAVcGFyZW50Q3Jvc3NLZXlDb2x1bW5zAQAiKExqYXZhL3V0aWwvTGlzdDspTGphdmEvdXRpbC9MaXN0OwEASihMamF2YS91dGlsL0xpc3Q8TGphdmEvbGFuZy9TdHJpbmc7PjspTGphdmEvdXRpbC9MaXN0PExqYXZhL2xhbmcvU3RyaW5nOz47AQAVcGFyZW50Q3Jvc3NLZXlHZXR0ZXJzAQAUc3VwcG9ydHNDcm9zc0NhY2hpbmcBAAMoKVoBABd0YXJnZXRQcm9wZXJ0aWVzT3JkZXJlZAEAJigpTGphdmEvdXRpbC9MaXN0PExqYXZhL2xhbmcvU3RyaW5nOz47AQAucGFyZW50Q3Jvc3NLZXlHZXR0ZXJzT3JkZXJlZEJ5VGFyZ2V0UHJvcGVydGllcwEAClNvdXJjZUZpbGUBAAxFeGVjdXRlLmphdmEMABYAFwEAQV9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDAvZ2xvYmFsQ2hpbGQwL2xvY2FsR3JhcGgvU3BlY2lmaWNzDAAUABUMABoAGwwAHAAdDAAgACEMACMAJAwAJQAkDAAmACQMACcAKAwAKQAqDAAsACEMAC0ALgwALwAhDAAxACEBAD9fcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQwL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL0V4ZWN1dGUBABBqYXZhL2xhbmcvT2JqZWN0AQCIb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvcmVsYXRpb25hbC9ncmFwaEZldGNoL0lSZWxhdGlvbmFsQ3Jvc3NSb290UXVlcnlUZW1wVGFibGVHcmFwaEZldGNoRXhlY3V0aW9uTm9kZVNwZWNpZmljcwAhABEAEgABABMAAQACABQAFQAAAA0AAQAWABcAAQAYAAAAMAADAAEAAAAQKrcAASq7AAJZtwADtQAEsQAAAAEAGQAAAA4AAwAAABMABAAUAA8AFQABABoAGwABABgAAAAnAAQABAAAAAsqtAAEKywttgAFsQAAAAEAGQAAAAoAAgAAABkACgAaAAEAHAAdAAIAGAAAACAAAQABAAAACCq0AAS2AAawAAAAAQAZAAAABgABAAAAHgAeAAAAAgAfAAEAIAAhAAIAGAAAACAAAQABAAAACCq0AAS2AAewAAAAAQAZAAAABgABAAAAIwAeAAAAAgAiAAEAIwAkAAEAGAAAACAAAQABAAAACCq0AAS2AAiwAAAAAQAZAAAABgABAAAAKAABACUAJAABABgAAAAgAAEAAQAAAAgqtAAEtgAJsAAAAAEAGQAAAAYAAQAAAC0AAQAmACQAAQAYAAAAIAABAAEAAAAIKrQABLYACrAAAAABABkAAAAGAAEAAAAyAAEAJwAoAAEAGAAAACcABAAEAAAACyq0AAQrLC22AAuxAAAAAQAZAAAACgACAAAAOQAKADoAAQApACoAAgAYAAAAIQACAAIAAAAJKrQABCu2AAywAAAAAQAZAAAABgABAAAAPgAeAAAAAgArAAEALAAhAAIAGAAAACAAAQABAAAACCq0AAS2AA2wAAAAAQAZAAAABgABAAAAQwAeAAAAAgAiAAEALQAuAAEAGAAAACAAAQABAAAACCq0AAS2AA6sAAAAAQAZAAAABgABAAAASAABAC8AIQACABgAAAAgAAEAAQAAAAgqtAAEtgAPsAAAAAEAGQAAAAYAAQAAAE0AHgAAAAIAMAABADEAIQACABgAAAAgAAEAAQAAAAgqtAAEtgAQsAAAAAEAGQAAAAYAAQAAAFIAHgAAAAIAIgABADIAAAACADM=",
      "name" : "Execute",
      "package" : "_pure.plan.root.n1.globalChild0.globalChild0.localGraph",
      "source" : "package _pure.plan.root.n1.globalChild0.globalChild0.localGraph;\n\nimport java.lang.reflect.Method;\nimport java.sql.ResultSet;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.eclipse.collections.api.tuple.Pair;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.relational.graphFetch.IRelationalCrossRootQueryTempTableGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\npublic class Execute implements IRelationalCrossRootQueryTempTableGraphFetchExecutionNodeSpecifics\n{\n    private Specifics specifics;\n\n    public Execute()\n    {\n        this.specifics = new Specifics();\n    }\n\n    public void prepare(ResultSet resultSet, String databaseTimeZone, String databaseConnection)\n    {\n        this.specifics.prepare(resultSet, databaseTimeZone, databaseConnection);\n    }\n\n    public IGraphInstance<? extends IReferencedObject> nextGraphInstance()\n    {\n        return this.specifics.nextGraphInstance();\n    }\n\n    public List<Method> primaryKeyGetters()\n    {\n        return this.specifics.primaryKeyGetters();\n    }\n\n    public String mappingId()\n    {\n        return this.specifics.mappingId();\n    }\n\n    public String sourceInstanceSetId()\n    {\n        return this.specifics.sourceInstanceSetId();\n    }\n\n    public String targetInstanceSetId()\n    {\n        return this.specifics.targetInstanceSetId();\n    }\n\n    public void addChildToParent(Object parent,\n                                 Object child,\n                                 IExecutionNodeContext executionNodeContext)\n    {\n        this.specifics.addChildToParent(parent, child, executionNodeContext);\n    }\n\n    public List<String> parentCrossKeyColumns(List<String> queryResultColumns)\n    {\n        return this.specifics.parentCrossKeyColumns(queryResultColumns);\n    }\n\n    public List<Method> parentCrossKeyGetters()\n    {\n        return this.specifics.parentCrossKeyGetters();\n    }\n\n    public boolean supportsCrossCaching()\n    {\n        return this.specifics.supportsCrossCaching();\n    }\n\n    public List<String> targetPropertiesOrdered()\n    {\n        return this.specifics.targetPropertiesOrdered();\n    }\n\n    public List<Method> parentCrossKeyGettersOrderedByTargetProperties()\n    {\n        return this.specifics.parentCrossKeyGettersOrderedByTargetProperties();\n    }\n}"
    }, {
      "byteCode" : "",
      "name" : "GraphFetch_Node3_Address_Impl",
      "package" : "_pure.plan.root.n1.globalChild0.globalChild0.localGraph",
      "source" : "package _pure.plan.root.n1.globalChild0.globalChild0.localGraph;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport java.io.IOException;\n\npublic class GraphFetch_Node3_Address_Impl implements _pure.app.test.Address, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.test.Address>, java.io.Serializable\n{\n    private String name;\n    private List<_pure.app.test.Person> persons;\n    private List<_pure.app.test.Firm> firms;\n    private Object pk$_0;\n    private static final ObjectMapper objectMapper$ = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL).registerModule(new SimpleModule().addSerializer(PureDate.class, new JsonSerializer<PureDate>() { @Override public void serialize(PureDate value, JsonGenerator gen, SerializerProvider serializers) throws IOException { gen.writeRawValue(\"\\\"\" + value.toString() + \"\\\"\"); } }));\n    private String setId$;\n    public static String databaseConnection$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 311759858L;\n\n    public String getName()\n    {\n        return this.name;\n    }\n\n    public void setName(String name)\n    {\n        this.name = name;\n    }\n\n    public void addName(String object)\n    {\n        if ((Object) this.name != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'name' of multiplicity with bound 1\");\n        }\n        this.name = object;\n    }\n\n    public List<_pure.app.test.Person> getPersons()\n    {\n        return this.persons == null ? Collections.<_pure.app.test.Person>emptyList() : this.persons;\n    }\n\n    public void setPersons(List<_pure.app.test.Person> persons)\n    {\n        this.persons = persons;\n    }\n\n    public void addPersons(_pure.app.test.Person object)\n    {\n        if (this.persons == null)\n        {\n            this.persons = new ArrayList<_pure.app.test.Person>();\n        }\n        this.persons.add(object);\n    }\n\n    public List<_pure.app.test.Firm> getFirms()\n    {\n        return this.firms == null ? Collections.<_pure.app.test.Firm>emptyList() : this.firms;\n    }\n\n    public void setFirms(List<_pure.app.test.Firm> firms)\n    {\n        this.firms = firms;\n    }\n\n    public void addFirms(_pure.app.test.Firm object)\n    {\n        if (this.firms == null)\n        {\n            this.firms = new ArrayList<_pure.app.test.Firm>();\n        }\n        this.firms.add(object);\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.test.Address withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Address> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Address> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Address> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Address> toChecked(Object source,\n                                                                                                                   boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Address>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.test.Address getValue() { return GraphFetch_Node3_Address_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n            if (this.getFirms() != null)\n            {\n                for (int i = 0; i < this.getFirms().size(); i++)\n                {\n                    final int index = i;\n                    result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.test.Firm>) this.getFirms()\n                                                                                                                                       .get(i))\n                                                                                                                                       .allConstraints(context)\n                                                                                                                                       .stream()\n                                                                                                                                       .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                            org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"firms\", index)))\n                                                                                                                                       .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect x) -> x != null)\n                                                                                                                                       .collect(Collectors.toList()));\n                }\n            }\n            if (this.getPersons() != null)\n            {\n                for (int i = 0; i < this.getPersons().size(); i++)\n                {\n                    final int index = i;\n                    result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.test.Person>) this.getPersons()\n                                                                                                                                         .get(i))\n                                                                                                                                         .allConstraints(context)\n                                                                                                                                         .stream()\n                                                                                                                                         .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                              org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"persons\", index)))\n                                                                                                                                         .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect x) -> x != null)\n                                                                                                                                         .collect(Collectors.toList()));\n                }\n            }\n        }\n        return result;\n    }\n\n    public Object getPk$_0()\n    {\n        return this.pk$_0;\n    }\n\n    public void setPk$_0(Object pk$_0)\n    {\n        this.pk$_0 = pk$_0;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId)\n    {\n        this.setId$ = setId;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        if (this.alloyStoreObjectReference$ == null)\n        {\n            try\n            {\n                StringBuilder referenceBuilder = new StringBuilder();\n                referenceBuilder.append(\"001:\");\n                referenceBuilder.append(\"010:\");\n\n                referenceBuilder.append(\"0000000010:\");\n                referenceBuilder.append(\"Relational:\");\n\n                referenceBuilder.append(\"0000000009:\");\n                referenceBuilder.append(\"test::Map:\");\n\n                referenceBuilder.append(\"0000000012:\");\n                referenceBuilder.append(\"test_Address:\");\n\n                String setId = this.getSetId$();\n                referenceBuilder.append(String.format(\"%010d\", setId.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(setId);\n                referenceBuilder.append(\":\");\n\n                String databaseConnectionString = _pure.plan.root.n1.globalChild0.globalChild0.localGraph.GraphFetch_Node3_Address_Impl.databaseConnection$;\n                referenceBuilder.append(String.format(\"%010d\", databaseConnectionString.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(databaseConnectionString);\n                referenceBuilder.append(\":\");\n\n                Map<String, Object> pkMap = new HashMap<>();\n\n                pkMap.put(\"pk$_0\", this.getPk$_0());\n                String pkMapString = objectMapper$.writeValueAsString(pkMap);\n                referenceBuilder.append(String.format(\"%010d\", pkMapString.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(pkMapString);\n\n                this.alloyStoreObjectReference$ = \"ASOR:\" + org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(referenceBuilder.toString().getBytes());\n            }\n            catch (Exception e)\n            {\n               throw new RuntimeException(e);\n            }\n        }\n\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String reference)\n    {\n        this.alloyStoreObjectReference$ = reference;\n    }\n\n    private static long getClassSize$()\n    {\n        return 156L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node3_Address_Impl.getClassSize$();\n        if (this.name != null)\n        {\n            size = size + this.name.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        if (this.persons != null)\n        {\n            for (_pure.app.test.Person i: this.persons)\n            {\n                if (i != null)\n                {\n                    size = size + 20L;\n                }\n            }\n        }\n        if (this.firms != null)\n        {\n            for (_pure.app.test.Firm i: this.firms)\n            {\n                if (i != null)\n                {\n                    size = size + 20L;\n                }\n            }\n        }\n        return size;\n    }\n}"
    }, {
      "byteCode" : "",
      "name" : "Specifics",
      "package" : "_pure.plan.root.n1.globalChild0.globalChild0.localGraph",
      "source" : "package _pure.plan.root.n1.globalChild0.globalChild0.localGraph;\n\nimport java.lang.reflect.Method;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.Types;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.eclipse.collections.api.tuple.Pair;\nimport org.eclipse.collections.impl.tuple.Tuples;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IConstantResult;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\n\nclass Specifics\n{\n    private static final List<Integer> STRING_TYPES = Arrays.asList(Types.CHAR, Types.VARCHAR, Types.LONGVARCHAR, Types.NCHAR, Types.NVARCHAR, Types.LONGNVARCHAR, Types.OTHER, Types.NULL);\n    private static final List<Integer> INT_TYPES = Arrays.asList(Types.TINYINT, Types.SMALLINT, Types.INTEGER, Types.BIGINT, Types.NULL);\n    private static final List<Integer> FLOAT_TYPES = Arrays.asList(Types.REAL, Types.FLOAT, Types.DOUBLE, Types.DECIMAL, Types.NUMERIC, Types.NULL);\n    private static final List<Integer> DECIMAL_TYPES = Arrays.asList(Types.DECIMAL, Types.NUMERIC, Types.NULL);\n    private static final List<Integer> BOOL_TYPES = Arrays.asList(Types.BIT, Types.BOOLEAN, Types.NULL);\n    private static final List<Integer> STRICT_DATE_TYPES = Arrays.asList(Types.DATE, Types.NULL);\n    private static final List<Integer> DATE_TIME_TYPES = Arrays.asList(Types.TIMESTAMP, Types.NULL);\n    private ResultSet resultSet;\n    private String databaseTimeZone;\n    private String databaseConnection;\n    private List<Integer> columnTypes;\n    private List<List<Integer>> propertyIndices;\n    private List<List<Supplier<Object>>> propertyGetters;\n    private Calendar calendar;\n    private Method parentPropertyAdder;\n    private Method parentEdgePointPropertyAdder;\n\n    private Object getAlloyNativeValueFromResultSet(ResultSet resultSet,\n                                                    int columnIndex,\n                                                    int columnType)\n    {\n        try\n        {\n            Object result = null;\n            switch (columnType)\n            {\n                case Types.DATE:\n                {\n                    java.sql.Date date = resultSet.getDate(columnIndex);\n                    if (date != null)\n                    {\n                        result = PureDate.fromSQLDate(date);\n                    }\n                    break;\n                }\n                case Types.TIMESTAMP:\n                {\n                    java.sql.Timestamp timestamp = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (timestamp != null)\n                    {\n                        result = PureDate.fromSQLTimestamp(timestamp);\n                    }\n                    break;\n                }\n                case Types.TINYINT:\n                case Types.SMALLINT:\n                case Types.INTEGER:\n                case Types.BIGINT:\n                {\n                    long num = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Long.valueOf(num);\n                    }\n                    break;\n                }\n                case Types.REAL:\n                case Types.FLOAT:\n                case Types.DOUBLE:\n                {\n                    double num = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Double.valueOf(num);\n                    }\n                    break;\n                }\n                case Types.DECIMAL:\n                case Types.NUMERIC:\n                {\n                    result = resultSet.getBigDecimal(columnIndex);\n                    break;\n                }\n                case Types.CHAR:\n                case Types.VARCHAR:\n                case Types.LONGVARCHAR:\n                case Types.NCHAR:\n                case Types.NVARCHAR:\n                case Types.LONGNVARCHAR:\n                case Types.OTHER:\n                {\n                    result = resultSet.getString(columnIndex);\n                    break;\n                }\n                case Types.BIT:\n                case Types.BOOLEAN:\n                {\n                    boolean bool = resultSet.getBoolean(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Boolean.valueOf(bool);\n                    }\n                }\n                case Types.BINARY:\n                case Types.VARBINARY:\n                case Types.LONGVARBINARY:\n                {\n                    byte[] bytes = resultSet.getBytes(columnIndex);\n                    if (bytes != null)\n                    {\n                        result = this.encodeHex(bytes);\n                    }\n                    break;\n                }\n                case Types.NULL:\n                {\n                    // do nothing: value is already assigned to null\n                    break;\n                }\n                default:\n                {\n                    result = resultSet.getObject(columnIndex);\n                }\n            }\n            return result;}\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private String encodeHex(byte[] data)\n    {\n        final char[] DIGITS_LOWER = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n        final int l = data.length;\n        final char[] out = new char[l << 1];\n        for (int i = 0, j = 0; i < l; i++)\n        {\n            out[j++] = DIGITS_LOWER[(0xF0 & data[i]) >>> 4];\n            out[j++] = DIGITS_LOWER[0x0F & data[i]];\n        }\n        return new String(out);\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForStringProperty(ResultSet resultSet,\n                                                                         int columnIndex,\n                                                                         int columnType,\n                                                                         String propertyName)\n    {\n        if (STRING_TYPES.contains(columnType))\n        {\n           return () -> {\n                try\n                {\n                    return resultSet.getString(columnIndex);\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        else\n        {\n            throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type String from SQL column of type '\" + columnType + \"'.\");\n        }\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForIntegerProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Long res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Long.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Integer from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForFloatProperty(ResultSet resultSet,\n                                                                        int columnIndex,\n                                                                        int columnType,\n                                                                        String propertyName)\n    {\n        if (FLOAT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Double res = null;\n                    double r = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Double.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Double res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Double.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Float from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDecimalProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (DECIMAL_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    return resultSet.getBigDecimal(columnIndex);\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (FLOAT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    java.math.BigDecimal res = null;\n                    double r = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = java.math.BigDecimal.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    java.math.BigDecimal res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = java.math.BigDecimal.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Decimal from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForBooleanProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (BOOL_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    boolean r = resultSet.getBoolean(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r == 1);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Boolean from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForStrictDateProperty(ResultSet resultSet,\n                                                                             int columnIndex,\n                                                                             int columnType,\n                                                                             String propertyName)\n    {\n        if (STRICT_DATE_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Date r = resultSet.getDate(columnIndex);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLDate(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException)\n                        {\n                            res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type StrictDate from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDateTimeProperty(ResultSet resultSet,\n                                                                           int columnIndex,\n                                                                           int columnType,\n                                                                           String propertyName)\n    {\n        if (DATE_TIME_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLTimestamp(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException)\n                        {\n                            res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type DateTime from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDateProperty(ResultSet resultSet,\n                                                                       int columnIndex,\n                                                                       int columnType,\n                                                                       String propertyName)\n    {\n        if (STRICT_DATE_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Date r = resultSet.getDate(columnIndex);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLDate(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (DATE_TIME_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLTimestamp(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException1)\n                        {\n                            try\n                            {\n                                res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\n                            }\n                            catch (java.time.format.DateTimeParseException dateTimeParseException2)\n                            {\n                                res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\n                            }\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Date from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    void prepare(ResultSet resultSet, String databaseTimeZone, String databaseConnection)\n    {\n        try\n        {\n            this.resultSet = resultSet;\n            this.databaseTimeZone = databaseTimeZone;\n            this.databaseConnection = databaseConnection;\n            this.calendar = new GregorianCalendar(TimeZone.getTimeZone(this.databaseTimeZone));\n            ResultSetMetaData resultSetMetaData = this.resultSet.getMetaData();\n            int columnCount = resultSetMetaData.getColumnCount();\n            this.columnTypes = new ArrayList<Integer>();\n            List<String> columnNames = new ArrayList<String>();\n            for (int i = 1; i <= columnCount; i++)\n            {\n                String columnLabel = resultSetMetaData.getColumnLabel(i);\n                columnNames.add(columnLabel.startsWith(\"\\\"\") && columnLabel\n                                           .endsWith(\"\\\"\")\n                                           ? columnLabel.substring(1, columnLabel.length() - 1)\n                                                        .toUpperCase()\n                                           : columnLabel.toUpperCase());\n                this.columnTypes.add(resultSetMetaData.getColumnType(i));\n            }\n            this.propertyIndices = new ArrayList<List<Integer>>();\n            List<Integer> index_0 = new ArrayList<Integer>();\n            index_0.add(columnNames.indexOf(\"NAME\") + 1);\n            index_0.add(columnNames.indexOf(\"PK_0\") + 1);\n            this.propertyIndices.add(index_0);\n            GraphFetch_Node3_Address_Impl.databaseConnection$ = databaseConnection;\n            this.propertyGetters = new ArrayList<List<Supplier<Object>>>();\n            int propertyIndex;\n            Supplier<Object> propertyGetter = null;\n            List<Supplier<Object>> propertyGetter_0 = new ArrayList<Supplier<Object>>();\n            propertyIndex = this.propertyIndices.get(0).get(0);\n            propertyGetter = this.getResultSetPropertyGetterForStringProperty(this.resultSet,\n                                                                              propertyIndex,\n                                                                              resultSetMetaData.getColumnType(propertyIndex),\n                                                                              \"name\");\n            propertyGetter_0.add(propertyGetter);\n            this.propertyGetters.add(propertyGetter_0);\n        }\n        catch (RuntimeException e)\n        {\n            throw e;\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    IGraphInstance<? extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject> nextGraphInstance()\n    {\n        try\n        {\n            final GraphFetch_Node3_Address_Impl object = new GraphFetch_Node3_Address_Impl();\n            object.setSetId$(\"test_Address\");\n            int pkColIndex;\n            int propertyIndex;\n            pkColIndex = this.propertyIndices.get(0).get(1);\n            Object pk$_0 = this.getAlloyNativeValueFromResultSet(resultSet,\n                                                                 pkColIndex,\n                                                                 this.columnTypes.get(pkColIndex - 1));\n            object.setPk$_0(pk$_0);\n            propertyIndex = this.propertyIndices.get(0).get(0);\n            {\n                String res = (String) this.propertyGetters.get(0).get(0).get();\n                if (res == null)\n                {\n                    throw new RuntimeException(\"Error reading in property 'name'. Property of multiplicity [1] can not be null\");\n                }\n                object.setName(res);\n            }\n            return new IGraphInstance<GraphFetch_Node3_Address_Impl>()\n            {\n                public GraphFetch_Node3_Address_Impl getValue()\n                {\n                    return object;\n                }\n                public long instanceSize()\n                {\n                    return object.getInstanceSize$();\n                }\n            };\n        }\n        catch (RuntimeException e)\n        {\n            throw e;\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    List<Method> primaryKeyGetters()\n    {\n        try\n        {\n            return Arrays.asList(GraphFetch_Node3_Address_Impl.class.getMethod(\"getPk$_0\"));\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String mappingId()\n    {\n        return \"test::Map\";\n    }\n\n    public String sourceInstanceSetId()\n    {\n        return \"test_Firm\";\n    }\n\n    public String targetInstanceSetId()\n    {\n        return \"test_Address\";\n    }\n\n    void addChildToParent(Object parent, Object child, IExecutionNodeContext executionNodeContext)\n    {\n        try\n        {\n            if (this.parentPropertyAdder == null)\n            {\n                this.parentPropertyAdder = parent\n                    .getClass()\n                    .getMethod(\"addAddress\", _pure.app.test.Address.class);\n            }\n            this.parentPropertyAdder.invoke(parent, child);\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    List<String> parentCrossKeyColumns(List<String> queryResultColumns)\n    {\n        return queryResultColumns.stream()\n                                 .filter((String x) -> x.toUpperCase()\n                                                        .startsWith(\"PARENT_CROSS_KEY_\"))\n                                 .collect(Collectors.toList());\n    }\n\n    List<Method> parentCrossKeyGetters()\n    {\n        try\n        {\n            return Arrays.asList(_pure.app.test.Firm_Map_test_Firm.class\n                                                                  .getMethod(\"getAddressName\"));\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    boolean supportsCrossCaching()\n    {\n        return true;\n    }\n\n    List<String> targetPropertiesOrdered()\n    {\n        return Arrays.asList(\"name\");\n    }\n\n    List<Method> parentCrossKeyGettersOrderedByTargetProperties()\n    {\n        try\n        {\n            return Arrays.asList(_pure.app.test.Firm_Map_test_Firm.class\n                                                                  .getMethod(\"getAddressName\"));\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n}"
    }, {
      "byteCode" : "yv66vgAAADcARgoAEgA0BwA1CgACADQJABEANgoAAgA3CgACADgKAAIAOQoAAgA6CgACADsKAAIAPAoAAgA9CgACAD4KAAIAPwoAAgBACgACAEEKAAIAQgcAQwcARAcARQEACXNwZWNpZmljcwEANkxfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQwL2xvY2FsR3JhcGgvU3BlY2lmaWNzOwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAAdwcmVwYXJlAQA7KExqYXZhL3NxbC9SZXN1bHRTZXQ7TGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7KVYBABFuZXh0R3JhcGhJbnN0YW5jZQEATigpTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9ncmFwaEZldGNoL0lHcmFwaEluc3RhbmNlOwEACVNpZ25hdHVyZQEAmygpTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9ncmFwaEZldGNoL0lHcmFwaEluc3RhbmNlPCtMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvc2hhcmVkL0lSZWZlcmVuY2VkT2JqZWN0Oz47AQARcHJpbWFyeUtleUdldHRlcnMBABIoKUxqYXZhL3V0aWwvTGlzdDsBAC4oKUxqYXZhL3V0aWwvTGlzdDxMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOz47AQAJbWFwcGluZ0lkAQAUKClMamF2YS9sYW5nL1N0cmluZzsBABNzb3VyY2VJbnN0YW5jZVNldElkAQATdGFyZ2V0SW5zdGFuY2VTZXRJZAEAEGFkZENoaWxkVG9QYXJlbnQBAHUoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7TG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL3N0b3JlL3NoYXJlZC9JRXhlY3V0aW9uTm9kZUNvbnRleHQ7KVYBABVwYXJlbnRDcm9zc0tleUNvbHVtbnMBACIoTGphdmEvdXRpbC9MaXN0OylMamF2YS91dGlsL0xpc3Q7AQBKKExqYXZhL3V0aWwvTGlzdDxMamF2YS9sYW5nL1N0cmluZzs+OylMamF2YS91dGlsL0xpc3Q8TGphdmEvbGFuZy9TdHJpbmc7PjsBABVwYXJlbnRDcm9zc0tleUdldHRlcnMBABRzdXBwb3J0c0Nyb3NzQ2FjaGluZwEAAygpWgEAF3RhcmdldFByb3BlcnRpZXNPcmRlcmVkAQAmKClMamF2YS91dGlsL0xpc3Q8TGphdmEvbGFuZy9TdHJpbmc7PjsBAC5wYXJlbnRDcm9zc0tleUdldHRlcnNPcmRlcmVkQnlUYXJnZXRQcm9wZXJ0aWVzAQAKU291cmNlRmlsZQEADEV4ZWN1dGUuamF2YQwAFgAXAQA0X3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL1NwZWNpZmljcwwAFAAVDAAaABsMABwAHQwAIAAhDAAjACQMACUAJAwAJgAkDAAnACgMACkAKgwALAAhDAAtAC4MAC8AIQwAMQAhAQAyX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL0V4ZWN1dGUBABBqYXZhL2xhbmcvT2JqZWN0AQCIb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvcmVsYXRpb25hbC9ncmFwaEZldGNoL0lSZWxhdGlvbmFsQ3Jvc3NSb290UXVlcnlUZW1wVGFibGVHcmFwaEZldGNoRXhlY3V0aW9uTm9kZVNwZWNpZmljcwAhABEAEgABABMAAQACABQAFQAAAA0AAQAWABcAAQAYAAAAMAADAAEAAAAQKrcAASq7AAJZtwADtQAEsQAAAAEAGQAAAA4AAwAAABMABAAUAA8AFQABABoAGwABABgAAAAnAAQABAAAAAsqtAAEKywttgAFsQAAAAEAGQAAAAoAAgAAABkACgAaAAEAHAAdAAIAGAAAACAAAQABAAAACCq0AAS2AAawAAAAAQAZAAAABgABAAAAHgAeAAAAAgAfAAEAIAAhAAIAGAAAACAAAQABAAAACCq0AAS2AAewAAAAAQAZAAAABgABAAAAIwAeAAAAAgAiAAEAIwAkAAEAGAAAACAAAQABAAAACCq0AAS2AAiwAAAAAQAZAAAABgABAAAAKAABACUAJAABABgAAAAgAAEAAQAAAAgqtAAEtgAJsAAAAAEAGQAAAAYAAQAAAC0AAQAmACQAAQAYAAAAIAABAAEAAAAIKrQABLYACrAAAAABABkAAAAGAAEAAAAyAAEAJwAoAAEAGAAAACcABAAEAAAACyq0AAQrLC22AAuxAAAAAQAZAAAACgACAAAAOQAKADoAAQApACoAAgAYAAAAIQACAAIAAAAJKrQABCu2AAywAAAAAQAZAAAABgABAAAAPgAeAAAAAgArAAEALAAhAAIAGAAAACAAAQABAAAACCq0AAS2AA2wAAAAAQAZAAAABgABAAAAQwAeAAAAAgAiAAEALQAuAAEAGAAAACAAAQABAAAACCq0AAS2AA6sAAAAAQAZAAAABgABAAAASAABAC8AIQACABgAAAAgAAEAAQAAAAgqtAAEtgAPsAAAAAEAGQAAAAYAAQAAAE0AHgAAAAIAMAABADEAIQACABgAAAAgAAEAAQAAAAgqtAAEtgAQsAAAAAEAGQAAAAYAAQAAAFIAHgAAAAIAIgABADIAAAACADM=",
      "name" : "Execute",
      "package" : "_pure.plan.root.n1.globalChild0.localGraph",
      "source" : "package _pure.plan.root.n1.globalChild0.localGraph;\n\nimport java.lang.reflect.Method;\nimport java.sql.ResultSet;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.eclipse.collections.api.tuple.Pair;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.relational.graphFetch.IRelationalCrossRootQueryTempTableGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\npublic class Execute implements IRelationalCrossRootQueryTempTableGraphFetchExecutionNodeSpecifics\n{\n    private Specifics specifics;\n\n    public Execute()\n    {\n        this.specifics = new Specifics();\n    }\n\n    public void prepare(ResultSet resultSet, String databaseTimeZone, String databaseConnection)\n    {\n        this.specifics.prepare(resultSet, databaseTimeZone, databaseConnection);\n    }\n\n    public IGraphInstance<? extends IReferencedObject> nextGraphInstance()\n    {\n        return this.specifics.nextGraphInstance();\n    }\n\n    public List<Method> primaryKeyGetters()\n    {\n        return this.specifics.primaryKeyGetters();\n    }\n\n    public String mappingId()\n    {\n        return this.specifics.mappingId();\n    }\n\n    public String sourceInstanceSetId()\n    {\n        return this.specifics.sourceInstanceSetId();\n    }\n\n    public String targetInstanceSetId()\n    {\n        return this.specifics.targetInstanceSetId();\n    }\n\n    public void addChildToParent(Object parent,\n                                 Object child,\n                                 IExecutionNodeContext executionNodeContext)\n    {\n        this.specifics.addChildToParent(parent, child, executionNodeContext);\n    }\n\n    public List<String> parentCrossKeyColumns(List<String> queryResultColumns)\n    {\n        return this.specifics.parentCrossKeyColumns(queryResultColumns);\n    }\n\n    public List<Method> parentCrossKeyGetters()\n    {\n        return this.specifics.parentCrossKeyGetters();\n    }\n\n    public boolean supportsCrossCaching()\n    {\n        return this.specifics.supportsCrossCaching();\n    }\n\n    public List<String> targetPropertiesOrdered()\n    {\n        return this.specifics.targetPropertiesOrdered();\n    }\n\n    public List<Method> parentCrossKeyGettersOrderedByTargetProperties()\n    {\n        return this.specifics.parentCrossKeyGettersOrderedByTargetProperties();\n    }\n}"
    }, {
      "byteCode" : "",
      "name" : "GraphFetch_Node2_Firm_Map_test_Firm_Impl",
      "package" : "_pure.plan.root.n1.globalChild0.localGraph",
      "source" : "package _pure.plan.root.n1.globalChild0.localGraph;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport java.io.IOException;\n\npublic class GraphFetch_Node2_Firm_Map_test_Firm_Impl implements _pure.app.test.Firm_Map_test_Firm, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.test.Firm_Map_test_Firm>, java.io.Serializable\n{\n    private String addressName;\n    private String name;\n    private List<_pure.app.test.Person> employees;\n    private _pure.app.test.Address address;\n    private Object pk$_0;\n    private static final ObjectMapper objectMapper$ = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL).registerModule(new SimpleModule().addSerializer(PureDate.class, new JsonSerializer<PureDate>() { @Override public void serialize(PureDate value, JsonGenerator gen, SerializerProvider serializers) throws IOException { gen.writeRawValue(\"\\\"\" + value.toString() + \"\\\"\"); } }));\n    private String setId$;\n    public static String databaseConnection$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 1207541065L;\n\n    public String getAddressName()\n    {\n        return this.addressName;\n    }\n\n    public void setAddressName(String addressName)\n    {\n        this.addressName = addressName;\n    }\n\n    public void addAddressName(String object)\n    {\n        if ((Object) this.addressName != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'addressName' of multiplicity with bound 1\");\n        }\n        this.addressName = object;\n    }\n\n    public String getName()\n    {\n        return this.name;\n    }\n\n    public void setName(String name)\n    {\n        this.name = name;\n    }\n\n    public void addName(String object)\n    {\n        if ((Object) this.name != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'name' of multiplicity with bound 1\");\n        }\n        this.name = object;\n    }\n\n    public List<_pure.app.test.Person> getEmployees()\n    {\n        return this.employees == null\n                   ? Collections.<_pure.app.test.Person>emptyList()\n                   : this.employees;\n    }\n\n    public void setEmployees(List<_pure.app.test.Person> employees)\n    {\n        this.employees = employees;\n    }\n\n    public void addEmployees(_pure.app.test.Person object)\n    {\n        if (this.employees == null)\n        {\n            this.employees = new ArrayList<_pure.app.test.Person>();\n        }\n        this.employees.add(object);\n    }\n\n    public _pure.app.test.Address getAddress()\n    {\n        return this.address;\n    }\n\n    public void setAddress(_pure.app.test.Address address)\n    {\n        this.address = address;\n    }\n\n    public void addAddress(_pure.app.test.Address object)\n    {\n        if ((Object) this.address != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'address' of multiplicity with bound 1\");\n        }\n        this.address = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.test.Firm_Map_test_Firm withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Firm_Map_test_Firm> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Firm_Map_test_Firm> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Firm_Map_test_Firm> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Firm_Map_test_Firm> toChecked(Object source,\n                                                                                                                              boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Firm_Map_test_Firm>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.test.Firm_Map_test_Firm getValue() { return GraphFetch_Node2_Firm_Map_test_Firm_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n        }\n        return result;\n    }\n\n    public Object getPk$_0()\n    {\n        return this.pk$_0;\n    }\n\n    public void setPk$_0(Object pk$_0)\n    {\n        this.pk$_0 = pk$_0;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId)\n    {\n        this.setId$ = setId;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        if (this.alloyStoreObjectReference$ == null)\n        {\n            try\n            {\n                StringBuilder referenceBuilder = new StringBuilder();\n                referenceBuilder.append(\"001:\");\n                referenceBuilder.append(\"010:\");\n\n                referenceBuilder.append(\"0000000010:\");\n                referenceBuilder.append(\"Relational:\");\n\n                referenceBuilder.append(\"0000000009:\");\n                referenceBuilder.append(\"test::Map:\");\n\n                referenceBuilder.append(\"0000000009:\");\n                referenceBuilder.append(\"test_Firm:\");\n\n                String setId = this.getSetId$();\n                referenceBuilder.append(String.format(\"%010d\", setId.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(setId);\n                referenceBuilder.append(\":\");\n\n                String databaseConnectionString = _pure.plan.root.n1.globalChild0.localGraph.GraphFetch_Node2_Firm_Map_test_Firm_Impl.databaseConnection$;\n                referenceBuilder.append(String.format(\"%010d\", databaseConnectionString.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(databaseConnectionString);\n                referenceBuilder.append(\":\");\n\n                Map<String, Object> pkMap = new HashMap<>();\n\n                pkMap.put(\"pk$_0\", this.getPk$_0());\n                String pkMapString = objectMapper$.writeValueAsString(pkMap);\n                referenceBuilder.append(String.format(\"%010d\", pkMapString.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(pkMapString);\n\n                this.alloyStoreObjectReference$ = \"ASOR:\" + org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(referenceBuilder.toString().getBytes());\n            }\n            catch (Exception e)\n            {\n               throw new RuntimeException(e);\n            }\n        }\n\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String reference)\n    {\n        this.alloyStoreObjectReference$ = reference;\n    }\n\n    private static long getClassSize$()\n    {\n        return 180L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node2_Firm_Map_test_Firm_Impl.getClassSize$();\n        if (this.addressName != null)\n        {\n            size = size + this.addressName.length();\n        }\n        if (this.name != null)\n        {\n            size = size + this.name.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        if (this.employees != null)\n        {\n            for (_pure.app.test.Person i: this.employees)\n            {\n                if (i != null)\n                {\n                    size = size + 20L;\n                }\n            }\n        }\n        return size;\n    }\n}"
    }, {
      "byteCode" : "",
      "name" : "Specifics",
      "package" : "_pure.plan.root.n1.globalChild0.localGraph",
      "source" : "package _pure.plan.root.n1.globalChild0.localGraph;\n\nimport java.lang.reflect.Method;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.Types;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.eclipse.collections.api.tuple.Pair;\nimport org.eclipse.collections.impl.tuple.Tuples;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IConstantResult;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\n\nclass Specifics\n{\n    private static final List<Integer> STRING_TYPES = Arrays.asList(Types.CHAR, Types.VARCHAR, Types.LONGVARCHAR, Types.NCHAR, Types.NVARCHAR, Types.LONGNVARCHAR, Types.OTHER, Types.NULL);\n    private static final List<Integer> INT_TYPES = Arrays.asList(Types.TINYINT, Types.SMALLINT, Types.INTEGER, Types.BIGINT, Types.NULL);\n    private static final List<Integer> FLOAT_TYPES = Arrays.asList(Types.REAL, Types.FLOAT, Types.DOUBLE, Types.DECIMAL, Types.NUMERIC, Types.NULL);\n    private static final List<Integer> DECIMAL_TYPES = Arrays.asList(Types.DECIMAL, Types.NUMERIC, Types.NULL);\n    private static final List<Integer> BOOL_TYPES = Arrays.asList(Types.BIT, Types.BOOLEAN, Types.NULL);\n    private static final List<Integer> STRICT_DATE_TYPES = Arrays.asList(Types.DATE, Types.NULL);\n    private static final List<Integer> DATE_TIME_TYPES = Arrays.asList(Types.TIMESTAMP, Types.NULL);\n    private ResultSet resultSet;\n    private String databaseTimeZone;\n    private String databaseConnection;\n    private List<Integer> columnTypes;\n    private List<List<Integer>> propertyIndices;\n    private List<List<Supplier<Object>>> propertyGetters;\n    private Calendar calendar;\n    private Method parentPropertyAdder;\n    private Method parentEdgePointPropertyAdder;\n\n    private Object getAlloyNativeValueFromResultSet(ResultSet resultSet,\n                                                    int columnIndex,\n                                                    int columnType)\n    {\n        try\n        {\n            Object result = null;\n            switch (columnType)\n            {\n                case Types.DATE:\n                {\n                    java.sql.Date date = resultSet.getDate(columnIndex);\n                    if (date != null)\n                    {\n                        result = PureDate.fromSQLDate(date);\n                    }\n                    break;\n                }\n                case Types.TIMESTAMP:\n                {\n                    java.sql.Timestamp timestamp = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (timestamp != null)\n                    {\n                        result = PureDate.fromSQLTimestamp(timestamp);\n                    }\n                    break;\n                }\n                case Types.TINYINT:\n                case Types.SMALLINT:\n                case Types.INTEGER:\n                case Types.BIGINT:\n                {\n                    long num = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Long.valueOf(num);\n                    }\n                    break;\n                }\n                case Types.REAL:\n                case Types.FLOAT:\n                case Types.DOUBLE:\n                {\n                    double num = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Double.valueOf(num);\n                    }\n                    break;\n                }\n                case Types.DECIMAL:\n                case Types.NUMERIC:\n                {\n                    result = resultSet.getBigDecimal(columnIndex);\n                    break;\n                }\n                case Types.CHAR:\n                case Types.VARCHAR:\n                case Types.LONGVARCHAR:\n                case Types.NCHAR:\n                case Types.NVARCHAR:\n                case Types.LONGNVARCHAR:\n                case Types.OTHER:\n                {\n                    result = resultSet.getString(columnIndex);\n                    break;\n                }\n                case Types.BIT:\n                case Types.BOOLEAN:\n                {\n                    boolean bool = resultSet.getBoolean(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Boolean.valueOf(bool);\n                    }\n                }\n                case Types.BINARY:\n                case Types.VARBINARY:\n                case Types.LONGVARBINARY:\n                {\n                    byte[] bytes = resultSet.getBytes(columnIndex);\n                    if (bytes != null)\n                    {\n                        result = this.encodeHex(bytes);\n                    }\n                    break;\n                }\n                case Types.NULL:\n                {\n                    // do nothing: value is already assigned to null\n                    break;\n                }\n                default:\n                {\n                    result = resultSet.getObject(columnIndex);\n                }\n            }\n            return result;}\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private String encodeHex(byte[] data)\n    {\n        final char[] DIGITS_LOWER = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n        final int l = data.length;\n        final char[] out = new char[l << 1];\n        for (int i = 0, j = 0; i < l; i++)\n        {\n            out[j++] = DIGITS_LOWER[(0xF0 & data[i]) >>> 4];\n            out[j++] = DIGITS_LOWER[0x0F & data[i]];\n        }\n        return new String(out);\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForStringProperty(ResultSet resultSet,\n                                                                         int columnIndex,\n                                                                         int columnType,\n                                                                         String propertyName)\n    {\n        if (STRING_TYPES.contains(columnType))\n        {\n           return () -> {\n                try\n                {\n                    return resultSet.getString(columnIndex);\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        else\n        {\n            throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type String from SQL column of type '\" + columnType + \"'.\");\n        }\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForIntegerProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Long res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Long.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Integer from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForFloatProperty(ResultSet resultSet,\n                                                                        int columnIndex,\n                                                                        int columnType,\n                                                                        String propertyName)\n    {\n        if (FLOAT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Double res = null;\n                    double r = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Double.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Double res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Double.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Float from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDecimalProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (DECIMAL_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    return resultSet.getBigDecimal(columnIndex);\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (FLOAT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    java.math.BigDecimal res = null;\n                    double r = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = java.math.BigDecimal.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    java.math.BigDecimal res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = java.math.BigDecimal.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Decimal from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForBooleanProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (BOOL_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    boolean r = resultSet.getBoolean(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r == 1);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Boolean from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForStrictDateProperty(ResultSet resultSet,\n                                                                             int columnIndex,\n                                                                             int columnType,\n                                                                             String propertyName)\n    {\n        if (STRICT_DATE_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Date r = resultSet.getDate(columnIndex);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLDate(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException)\n                        {\n                            res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type StrictDate from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDateTimeProperty(ResultSet resultSet,\n                                                                           int columnIndex,\n                                                                           int columnType,\n                                                                           String propertyName)\n    {\n        if (DATE_TIME_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLTimestamp(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException)\n                        {\n                            res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type DateTime from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDateProperty(ResultSet resultSet,\n                                                                       int columnIndex,\n                                                                       int columnType,\n                                                                       String propertyName)\n    {\n        if (STRICT_DATE_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Date r = resultSet.getDate(columnIndex);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLDate(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (DATE_TIME_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLTimestamp(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException1)\n                        {\n                            try\n                            {\n                                res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\n                            }\n                            catch (java.time.format.DateTimeParseException dateTimeParseException2)\n                            {\n                                res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\n                            }\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Date from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    void prepare(ResultSet resultSet, String databaseTimeZone, String databaseConnection)\n    {\n        try\n        {\n            this.resultSet = resultSet;\n            this.databaseTimeZone = databaseTimeZone;\n            this.databaseConnection = databaseConnection;\n            this.calendar = new GregorianCalendar(TimeZone.getTimeZone(this.databaseTimeZone));\n            ResultSetMetaData resultSetMetaData = this.resultSet.getMetaData();\n            int columnCount = resultSetMetaData.getColumnCount();\n            this.columnTypes = new ArrayList<Integer>();\n            List<String> columnNames = new ArrayList<String>();\n            for (int i = 1; i <= columnCount; i++)\n            {\n                String columnLabel = resultSetMetaData.getColumnLabel(i);\n                columnNames.add(columnLabel.startsWith(\"\\\"\") && columnLabel\n                                           .endsWith(\"\\\"\")\n                                           ? columnLabel.substring(1, columnLabel.length() - 1)\n                                                        .toUpperCase()\n                                           : columnLabel.toUpperCase());\n                this.columnTypes.add(resultSetMetaData.getColumnType(i));\n            }\n            this.propertyIndices = new ArrayList<List<Integer>>();\n            List<Integer> index_0 = new ArrayList<Integer>();\n            index_0.add(columnNames.indexOf(\"ADDRESSNAME\") + 1);\n            index_0.add(columnNames.indexOf(\"NAME\") + 1);\n            index_0.add(columnNames.indexOf(\"PK_0\") + 1);\n            this.propertyIndices.add(index_0);\n            GraphFetch_Node2_Firm_Map_test_Firm_Impl.databaseConnection$ = databaseConnection;\n            this.propertyGetters = new ArrayList<List<Supplier<Object>>>();\n            int propertyIndex;\n            Supplier<Object> propertyGetter = null;\n            List<Supplier<Object>> propertyGetter_0 = new ArrayList<Supplier<Object>>();\n            propertyIndex = this.propertyIndices.get(0).get(0);\n            propertyGetter = this.getResultSetPropertyGetterForStringProperty(this.resultSet,\n                                                                              propertyIndex,\n                                                                              resultSetMetaData.getColumnType(propertyIndex),\n                                                                              \"addressName\");\n            propertyGetter_0.add(propertyGetter);\n            propertyIndex = this.propertyIndices.get(0).get(1);\n            propertyGetter = this.getResultSetPropertyGetterForStringProperty(this.resultSet,\n                                                                              propertyIndex,\n                                                                              resultSetMetaData.getColumnType(propertyIndex),\n                                                                              \"name\");\n            propertyGetter_0.add(propertyGetter);\n            this.propertyGetters.add(propertyGetter_0);\n        }\n        catch (RuntimeException e)\n        {\n            throw e;\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    IGraphInstance<? extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject> nextGraphInstance()\n    {\n        try\n        {\n            final GraphFetch_Node2_Firm_Map_test_Firm_Impl object = new GraphFetch_Node2_Firm_Map_test_Firm_Impl();\n            object.setSetId$(\"test_Firm\");\n            int pkColIndex;\n            int propertyIndex;\n            pkColIndex = this.propertyIndices.get(0).get(2);\n            Object pk$_0 = this.getAlloyNativeValueFromResultSet(resultSet,\n                                                                 pkColIndex,\n                                                                 this.columnTypes.get(pkColIndex - 1));\n            object.setPk$_0(pk$_0);\n            propertyIndex = this.propertyIndices.get(0).get(0);\n            {\n                String res = (String) this.propertyGetters.get(0).get(0).get();\n                object.setAddressName(res);\n            }\n            propertyIndex = this.propertyIndices.get(0).get(1);\n            {\n                String res = (String) this.propertyGetters.get(0).get(1).get();\n                if (res == null)\n                {\n                    throw new RuntimeException(\"Error reading in property 'name'. Property of multiplicity [1] can not be null\");\n                }\n                object.setName(res);\n            }\n            return new IGraphInstance<GraphFetch_Node2_Firm_Map_test_Firm_Impl>()\n            {\n                public GraphFetch_Node2_Firm_Map_test_Firm_Impl getValue()\n                {\n                    return object;\n                }\n                public long instanceSize()\n                {\n                    return object.getInstanceSize$();\n                }\n            };\n        }\n        catch (RuntimeException e)\n        {\n            throw e;\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    List<Method> primaryKeyGetters()\n    {\n        try\n        {\n            return Arrays.asList(GraphFetch_Node2_Firm_Map_test_Firm_Impl.class\n                                                                         .getMethod(\"getPk$_0\"));\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String mappingId()\n    {\n        return \"test::Map\";\n    }\n\n    public String sourceInstanceSetId()\n    {\n        return \"test_Person\";\n    }\n\n    public String targetInstanceSetId()\n    {\n        return \"test_Firm\";\n    }\n\n    void addChildToParent(Object parent, Object child, IExecutionNodeContext executionNodeContext)\n    {\n        try\n        {\n            if (this.parentPropertyAdder == null)\n            {\n                this.parentPropertyAdder = parent\n                    .getClass()\n                    .getMethod(\"addFirm\", _pure.app.test.Firm.class);\n            }\n            this.parentPropertyAdder.invoke(parent, child);\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    List<String> parentCrossKeyColumns(List<String> queryResultColumns)\n    {\n        return queryResultColumns.stream()\n                                 .filter((String x) -> x.toUpperCase()\n                                                        .startsWith(\"PARENT_CROSS_KEY_\"))\n                                 .collect(Collectors.toList());\n    }\n\n    List<Method> parentCrossKeyGetters()\n    {\n        try\n        {\n            return Arrays.asList(_pure.app.test.Person_Map_test_Person.class\n                                                                      .getMethod(\"getFirmName\"));\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    boolean supportsCrossCaching()\n    {\n        return true;\n    }\n\n    List<String> targetPropertiesOrdered()\n    {\n        return Arrays.asList(\"name\");\n    }\n\n    List<Method> parentCrossKeyGettersOrderedByTargetProperties()\n    {\n        try\n        {\n            return Arrays.asList(_pure.app.test.Person_Map_test_Person.class\n                                                                      .getMethod(\"getFirmName\"));\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n}"
    }, {
      "byteCode" : "yv66vgAAADcARgoAEgA0BwA1CgACADQJABEANgoAAgA3CgACADgKAAIAOQoAAgA6CgACADsKAAIAPAoAAgA9CgACAD4KAAIAPwoAAgBACgACAEEKAAIAQgcAQwcARAcARQEACXNwZWNpZmljcwEANkxfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQxL2xvY2FsR3JhcGgvU3BlY2lmaWNzOwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAAdwcmVwYXJlAQA7KExqYXZhL3NxbC9SZXN1bHRTZXQ7TGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7KVYBABFuZXh0R3JhcGhJbnN0YW5jZQEATigpTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9ncmFwaEZldGNoL0lHcmFwaEluc3RhbmNlOwEACVNpZ25hdHVyZQEAmygpTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9ncmFwaEZldGNoL0lHcmFwaEluc3RhbmNlPCtMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvc2hhcmVkL0lSZWZlcmVuY2VkT2JqZWN0Oz47AQARcHJpbWFyeUtleUdldHRlcnMBABIoKUxqYXZhL3V0aWwvTGlzdDsBAC4oKUxqYXZhL3V0aWwvTGlzdDxMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOz47AQAJbWFwcGluZ0lkAQAUKClMamF2YS9sYW5nL1N0cmluZzsBABNzb3VyY2VJbnN0YW5jZVNldElkAQATdGFyZ2V0SW5zdGFuY2VTZXRJZAEAEGFkZENoaWxkVG9QYXJlbnQBAHUoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7TG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL3N0b3JlL3NoYXJlZC9JRXhlY3V0aW9uTm9kZUNvbnRleHQ7KVYBABVwYXJlbnRDcm9zc0tleUNvbHVtbnMBACIoTGphdmEvdXRpbC9MaXN0OylMamF2YS91dGlsL0xpc3Q7AQBKKExqYXZhL3V0aWwvTGlzdDxMamF2YS9sYW5nL1N0cmluZzs+OylMamF2YS91dGlsL0xpc3Q8TGphdmEvbGFuZy9TdHJpbmc7PjsBABVwYXJlbnRDcm9zc0tleUdldHRlcnMBABRzdXBwb3J0c0Nyb3NzQ2FjaGluZwEAAygpWgEAF3RhcmdldFByb3BlcnRpZXNPcmRlcmVkAQAmKClMamF2YS91dGlsL0xpc3Q8TGphdmEvbGFuZy9TdHJpbmc7PjsBAC5wYXJlbnRDcm9zc0tleUdldHRlcnNPcmRlcmVkQnlUYXJnZXRQcm9wZXJ0aWVzAQAKU291cmNlRmlsZQEADEV4ZWN1dGUuamF2YQwAFgAXAQA0X3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMS9sb2NhbEdyYXBoL1NwZWNpZmljcwwAFAAVDAAaABsMABwAHQwAIAAhDAAjACQMACUAJAwAJgAkDAAnACgMACkAKgwALAAhDAAtAC4MAC8AIQwAMQAhAQAyX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMS9sb2NhbEdyYXBoL0V4ZWN1dGUBABBqYXZhL2xhbmcvT2JqZWN0AQCIb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvcmVsYXRpb25hbC9ncmFwaEZldGNoL0lSZWxhdGlvbmFsQ3Jvc3NSb290UXVlcnlUZW1wVGFibGVHcmFwaEZldGNoRXhlY3V0aW9uTm9kZVNwZWNpZmljcwAhABEAEgABABMAAQACABQAFQAAAA0AAQAWABcAAQAYAAAAMAADAAEAAAAQKrcAASq7AAJZtwADtQAEsQAAAAEAGQAAAA4AAwAAABMABAAUAA8AFQABABoAGwABABgAAAAnAAQABAAAAAsqtAAEKywttgAFsQAAAAEAGQAAAAoAAgAAABkACgAaAAEAHAAdAAIAGAAAACAAAQABAAAACCq0AAS2AAawAAAAAQAZAAAABgABAAAAHgAeAAAAAgAfAAEAIAAhAAIAGAAAACAAAQABAAAACCq0AAS2AAewAAAAAQAZAAAABgABAAAAIwAeAAAAAgAiAAEAIwAkAAEAGAAAACAAAQABAAAACCq0AAS2AAiwAAAAAQAZAAAABgABAAAAKAABACUAJAABABgAAAAgAAEAAQAAAAgqtAAEtgAJsAAAAAEAGQAAAAYAAQAAAC0AAQAmACQAAQAYAAAAIAABAAEAAAAIKrQABLYACrAAAAABABkAAAAGAAEAAAAyAAEAJwAoAAEAGAAAACcABAAEAAAACyq0AAQrLC22AAuxAAAAAQAZAAAACgACAAAAOQAKADoAAQApACoAAgAYAAAAIQACAAIAAAAJKrQABCu2AAywAAAAAQAZAAAABgABAAAAPgAeAAAAAgArAAEALAAhAAIAGAAAACAAAQABAAAACCq0AAS2AA2wAAAAAQAZAAAABgABAAAAQwAeAAAAAgAiAAEALQAuAAEAGAAAACAAAQABAAAACCq0AAS2AA6sAAAAAQAZAAAABgABAAAASAABAC8AIQACABgAAAAgAAEAAQAAAAgqtAAEtgAPsAAAAAEAGQAAAAYAAQAAAE0AHgAAAAIAMAABADEAIQACABgAAAAgAAEAAQAAAAgqtAAEtgAQsAAAAAEAGQAAAAYAAQAAAFIAHgAAAAIAIgABADIAAAACADM=",
      "name" : "Execute",
      "package" : "_pure.plan.root.n1.globalChild1.localGraph",
      "source" : "package _pure.plan.root.n1.globalChild1.localGraph;\n\nimport java.lang.reflect.Method;\nimport java.sql.ResultSet;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.eclipse.collections.api.tuple.Pair;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.relational.graphFetch.IRelationalCrossRootQueryTempTableGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\npublic class Execute implements IRelationalCrossRootQueryTempTableGraphFetchExecutionNodeSpecifics\n{\n    private Specifics specifics;\n\n    public Execute()\n    {\n        this.specifics = new Specifics();\n    }\n\n    public void prepare(ResultSet resultSet, String databaseTimeZone, String databaseConnection)\n    {\n        this.specifics.prepare(resultSet, databaseTimeZone, databaseConnection);\n    }\n\n    public IGraphInstance<? extends IReferencedObject> nextGraphInstance()\n    {\n        return this.specifics.nextGraphInstance();\n    }\n\n    public List<Method> primaryKeyGetters()\n    {\n        return this.specifics.primaryKeyGetters();\n    }\n\n    public String mappingId()\n    {\n        return this.specifics.mappingId();\n    }\n\n    public String sourceInstanceSetId()\n    {\n        return this.specifics.sourceInstanceSetId();\n    }\n\n    public String targetInstanceSetId()\n    {\n        return this.specifics.targetInstanceSetId();\n    }\n\n    public void addChildToParent(Object parent,\n                                 Object child,\n                                 IExecutionNodeContext executionNodeContext)\n    {\n        this.specifics.addChildToParent(parent, child, executionNodeContext);\n    }\n\n    public List<String> parentCrossKeyColumns(List<String> queryResultColumns)\n    {\n        return this.specifics.parentCrossKeyColumns(queryResultColumns);\n    }\n\n    public List<Method> parentCrossKeyGetters()\n    {\n        return this.specifics.parentCrossKeyGetters();\n    }\n\n    public boolean supportsCrossCaching()\n    {\n        return this.specifics.supportsCrossCaching();\n    }\n\n    public List<String> targetPropertiesOrdered()\n    {\n        return this.specifics.targetPropertiesOrdered();\n    }\n\n    public List<Method> parentCrossKeyGettersOrderedByTargetProperties()\n    {\n        return this.specifics.parentCrossKeyGettersOrderedByTargetProperties();\n    }\n}"
    }, {
      "byteCode" : "yv66vgAAADcBoQoAOwC/CQBpAMAHAMEIAMIKAAMAwwkAaQDECgDFAMYHAMcKAAgAvwsAjQDICQBpAMkHAMoKAAwAvwoAaQDLCgBpAMwLAI0AzQsAjQDOEgAAANQLANUA1ggA1woA2ADZCwDVANoHANsKAGkA3AcA3QoAGQDeCQAMAN8LAOAA4QsA4ADICgBpAOILAI0A4wsAjQDkBwDlCwAhAMsSAAEA6BIAAgDsCwDVAO0KANgA7gcA7wsAjQDwCgBpAPESAAMA6AkAaQDzCQBpAPQJAGkA9QcA9goALgC/CAD3CgAuAPgIAPkIAPoIAPsIAPwIAP0IAP4IAP8KAGkBAAgBAQcBAgoAFwEDCgEEAQUKABcBBggBBwkAaQEIBwEJCgBBAL8IAHUKAGkBCgsBCwEMCQBpAQ0KAF4BDgoALgEPCgAXARAKAREBEhIABAEVBwEWBwEXCgBNARgFAAAAAAAAAJwKAGkBGQsAjQEaCwC0ARsLALQBHAcBHQUAAAAAAAAAFAcBHgoAaQEfCABvCgEgASEKASIBIwgAcwcBJAoAXgC/CQElASYKAF4BJwcBKAoAYgC/BwEpBwEqCgBlAL8KAGIBKwoAXgEsBwEtBwEuBwEvAQAMSW5uZXJDbGFzc2VzAQAEbmFtZQEAEkxqYXZhL2xhbmcvU3RyaW5nOwEAB3BlcnNvbnMBABBMamF2YS91dGlsL0xpc3Q7AQAJU2lnbmF0dXJlAQApTGphdmEvdXRpbC9MaXN0PExfcHVyZS9hcHAvdGVzdC9QZXJzb247PjsBAAVmaXJtcwEAJ0xqYXZhL3V0aWwvTGlzdDxMX3B1cmUvYXBwL3Rlc3QvRmlybTs+OwEABXBrJF8wAQASTGphdmEvbGFuZy9PYmplY3Q7AQANb2JqZWN0TWFwcGVyJAEALUxjb20vZmFzdGVyeG1sL2phY2tzb24vZGF0YWJpbmQvT2JqZWN0TWFwcGVyOwEABnNldElkJAEAE2RhdGFiYXNlQ29ubmVjdGlvbiQBABphbGxveVN0b3JlT2JqZWN0UmVmZXJlbmNlJAEAEHNlcmlhbFZlcnNpb25VSUQBAAFKAQANQ29uc3RhbnRWYWx1ZQUAAAAACXNpAwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAAdnZXROYW1lAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAdzZXROYW1lAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAHYWRkTmFtZQEADVN0YWNrTWFwVGFibGUBAApnZXRQZXJzb25zAQASKClMamF2YS91dGlsL0xpc3Q7BwEwAQArKClMamF2YS91dGlsL0xpc3Q8TF9wdXJlL2FwcC90ZXN0L1BlcnNvbjs+OwEACnNldFBlcnNvbnMBABMoTGphdmEvdXRpbC9MaXN0OylWAQAsKExqYXZhL3V0aWwvTGlzdDxMX3B1cmUvYXBwL3Rlc3QvUGVyc29uOz47KVYBAAphZGRQZXJzb25zAQAaKExfcHVyZS9hcHAvdGVzdC9QZXJzb247KVYBAAhnZXRGaXJtcwEAKSgpTGphdmEvdXRpbC9MaXN0PExfcHVyZS9hcHAvdGVzdC9GaXJtOz47AQAIc2V0RmlybXMBACooTGphdmEvdXRpbC9MaXN0PExfcHVyZS9hcHAvdGVzdC9GaXJtOz47KVYBAAhhZGRGaXJtcwEAGChMX3B1cmUvYXBwL3Rlc3QvRmlybTspVgEADmFsbENvbnN0cmFpbnRzAQBaKClMamF2YS91dGlsL0xpc3Q8TG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JRGVmZWN0Oz47AQAWd2l0aENvbnN0cmFpbnRzQXBwbGllZAEAGigpTF9wdXJlL2FwcC90ZXN0L0FkZHJlc3M7AQAJdG9DaGVja2VkAQBJKClMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0lDaGVja2VkOwEAYygpTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JQ2hlY2tlZDxMX3B1cmUvYXBwL3Rlc3QvQWRkcmVzczs+OwEASihaKUxvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0YVF1YWxpdHkvSUNoZWNrZWQ7AQBkKFopTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JQ2hlY2tlZDxMX3B1cmUvYXBwL3Rlc3QvQWRkcmVzczs+OwEAWyhMamF2YS9sYW5nL09iamVjdDspTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JQ2hlY2tlZDsBAHUoTGphdmEvbGFuZy9PYmplY3Q7KUxvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0YVF1YWxpdHkvSUNoZWNrZWQ8TF9wdXJlL2FwcC90ZXN0L0FkZHJlc3M7PjsBAFwoTGphdmEvbGFuZy9PYmplY3Q7WilMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0lDaGVja2VkOwEAdihMamF2YS9sYW5nL09iamVjdDtaKUxvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0YVF1YWxpdHkvSUNoZWNrZWQ8TF9wdXJlL2FwcC90ZXN0L0FkZHJlc3M7PjsBAF0oTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9HcmFwaENvbnRleHQ7KUxqYXZhL3V0aWwvTGlzdDsBAKUoTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9HcmFwaENvbnRleHQ7KUxqYXZhL3V0aWwvTGlzdDxMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0lEZWZlY3Q7PjsBAAhnZXRQayRfMAEAFCgpTGphdmEvbGFuZy9PYmplY3Q7AQAIc2V0UGskXzABABUoTGphdmEvbGFuZy9PYmplY3Q7KVYBAAlnZXRTZXRJZCQBAAlzZXRTZXRJZCQBAB1nZXRBbGxveVN0b3JlT2JqZWN0UmVmZXJlbmNlJAEAHXNldEFsbG95U3RvcmVPYmplY3RSZWZlcmVuY2UkAQANZ2V0Q2xhc3NTaXplJAEAAygpSgEAEGdldEluc3RhbmNlU2l6ZSQHATEBABdsYW1iZGEkYWxsQ29uc3RyYWludHMkMgEAjyhJTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JRGVmZWN0OylMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0lEZWZlY3Q7AQAXbGFtYmRhJGFsbENvbnN0cmFpbnRzJDEBAEkoTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JRGVmZWN0OylaAQAXbGFtYmRhJGFsbENvbnN0cmFpbnRzJDABAAg8Y2xpbml0PgEApExqYXZhL2xhbmcvT2JqZWN0O0xfcHVyZS9hcHAvdGVzdC9BZGRyZXNzO0xvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0YVF1YWxpdHkvQ29uc3RyYWluZWQ8TF9wdXJlL2FwcC90ZXN0L0FkZHJlc3M7PjtMamF2YS9pby9TZXJpYWxpemFibGU7AQAKU291cmNlRmlsZQEAIkdyYXBoRmV0Y2hfTm9kZTdfQWRkcmVzc19JbXBsLmphdmEBAAtOZXN0TWVtYmVycwwAgQCCDABtAG4BAB9qYXZhL2xhbmcvSWxsZWdhbFN0YXRlRXhjZXB0aW9uAQBHRm91bmQgbXVsdGlwbGUgb2JqZWN0cyBmb3IgcHJvcGVydHkgJ25hbWUnIG9mIG11bHRpcGxpY2l0eSB3aXRoIGJvdW5kIDEMAIEAiAwAbwBwBwEyDAEzAIwBABNqYXZhL3V0aWwvQXJyYXlMaXN0DAE0ATUMAHMAcAEASW9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9HcmFwaENvbnRleHQMAJoApwwAmgCMDAE2ATcMATgBOQEAEEJvb3RzdHJhcE1ldGhvZHMPBgE6EAE7DwkBPBABPQwBPgE/BwFADAFBAUIBAAEKBwFDDAFEAUUMAUYBRwEAEGphdmEvbGFuZy9TdHJpbmcMAJ4ApQEASl9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDEvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGU3X0FkZHJlc3NfSW1wbCQyDACBAUgMAUkBSgcBSwwBTAE1DACUAIwMAU0BTgwBTwFQAQBIb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0NvbnN0cmFpbmVkDwYBURABUgwBPgFTEAE1DwYBVBAAuAwBVQFWDAFXAVgMAVkBWgEAFGphdmEvdXRpbC9Db2xsZWN0aW9uDAFbAVwMAIsAjA8GAV0MAHUAdgwAeQBuDAB7AG4BABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEABDAwMToMAV4BXwEABDAxMDoBAAswMDAwMDAwMDEwOgEAC1JlbGF0aW9uYWw6AQALMDAwMDAwMDAwOToBAAp0ZXN0OjpNYXA6AQALMDAwMDAwMDAxMjoBAA10ZXN0X0FkZHJlc3M6DACtAIYBAAUlMDEwZAEAEGphdmEvbGFuZy9PYmplY3QMAWABTgcBYQwBYgFjDAFkAWUBAAE6DAB6AG4BABFqYXZhL3V0aWwvSGFzaE1hcAwAqQCqBwFmDAFnAWgMAHcAeAwBaQFqDAFrAIYMAWwBbQcBbgwBbwFwDwYBcQgBcgwBcwF0AQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAGmphdmEvbGFuZy9SdW50aW1lRXhjZXB0aW9uDACBAXUMALEAsgwBdgF3DAF4ATcMAXkAqgEAFV9wdXJlL2FwcC90ZXN0L1BlcnNvbgEAE19wdXJlL2FwcC90ZXN0L0Zpcm0MAJwAnQcBegwBewF8BwF9DAF+AX8BACtjb20vZmFzdGVyeG1sL2phY2tzb24vZGF0YWJpbmQvT2JqZWN0TWFwcGVyBwGBDAGDAYQMAYUBhgEAMmNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9kYXRhYmluZC9tb2R1bGUvU2ltcGxlTW9kdWxlAQA+b3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGUvUHVyZURhdGUBAEpfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQxL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlN19BZGRyZXNzX0ltcGwkMQwBhwGIDAGJAYoBAEhfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQxL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlN19BZGRyZXNzX0ltcGwBABZfcHVyZS9hcHAvdGVzdC9BZGRyZXNzAQAUamF2YS9pby9TZXJpYWxpemFibGUBAA5qYXZhL3V0aWwvTGlzdAEAEmphdmEvdXRpbC9JdGVyYXRvcgEAFWphdmEvdXRpbC9Db2xsZWN0aW9ucwEACWVtcHR5TGlzdAEAA2FkZAEAFShMamF2YS9sYW5nL09iamVjdDspWgEAB2lzRW1wdHkBAAMoKVoBAAZzdHJlYW0BABsoKUxqYXZhL3V0aWwvc3RyZWFtL1N0cmVhbTsKAYsBjAEAJihMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7CwGNAY4BAFooTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JRGVmZWN0OylMamF2YS9sYW5nL1N0cmluZzsBAAVhcHBseQEAHygpTGphdmEvdXRpbC9mdW5jdGlvbi9GdW5jdGlvbjsBABdqYXZhL3V0aWwvc3RyZWFtL1N0cmVhbQEAA21hcAEAOChMamF2YS91dGlsL2Z1bmN0aW9uL0Z1bmN0aW9uOylMamF2YS91dGlsL3N0cmVhbS9TdHJlYW07AQAbamF2YS91dGlsL3N0cmVhbS9Db2xsZWN0b3JzAQAHam9pbmluZwEANihMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspTGphdmEvdXRpbC9zdHJlYW0vQ29sbGVjdG9yOwEAB2NvbGxlY3QBADAoTGphdmEvdXRpbC9zdHJlYW0vQ29sbGVjdG9yOylMamF2YS9sYW5nL09iamVjdDsBAG8oTF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDEvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGU3X0FkZHJlc3NfSW1wbDtMamF2YS91dGlsL0xpc3Q7TGphdmEvbGFuZy9PYmplY3Q7KVYBAAd2aXNpdGVkAQAPTGphdmEvdXRpbC9TZXQ7AQANamF2YS91dGlsL1NldAEACGNvbnRhaW5zAQAEc2l6ZQEAAygpSQEAA2dldAEAFShJKUxqYXZhL2xhbmcvT2JqZWN0OwoAaQGPAQCOKExvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0YVF1YWxpdHkvSURlZmVjdDspTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JRGVmZWN0OwEAIChJKUxqYXZhL3V0aWwvZnVuY3Rpb24vRnVuY3Rpb247CgBpAZABAAR0ZXN0AQAgKClMamF2YS91dGlsL2Z1bmN0aW9uL1ByZWRpY2F0ZTsBAAZmaWx0ZXIBADkoTGphdmEvdXRpbC9mdW5jdGlvbi9QcmVkaWNhdGU7KUxqYXZhL3V0aWwvc3RyZWFtL1N0cmVhbTsBAAZ0b0xpc3QBAB4oKUxqYXZhL3V0aWwvc3RyZWFtL0NvbGxlY3RvcjsBAAZhZGRBbGwBABkoTGphdmEvdXRpbC9Db2xsZWN0aW9uOylaCgBpAZEBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAZsZW5ndGgBABFqYXZhL2xhbmcvSW50ZWdlcgEAB3ZhbHVlT2YBABYoSSlMamF2YS9sYW5nL0ludGVnZXI7AQAGZm9ybWF0AQA5KExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9TdHJpbmc7AQANamF2YS91dGlsL01hcAEAA3B1dAEAOChMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQASd3JpdGVWYWx1ZUFzU3RyaW5nAQAmKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL1N0cmluZzsBAAh0b1N0cmluZwEACGdldEJ5dGVzAQAEKClbQgEAJm9yZy9hcGFjaGUvY29tbW9ucy9jb2RlYy9iaW5hcnkvQmFzZTY0AQAZZW5jb2RlQmFzZTY0VVJMU2FmZVN0cmluZwEAFihbQilMamF2YS9sYW5nL1N0cmluZzsKAZIBkwEABkFTT1I6AQEAF21ha2VDb25jYXRXaXRoQ29uc3RhbnRzAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBABgoTGphdmEvbGFuZy9UaHJvd2FibGU7KVYBAAhpdGVyYXRvcgEAFigpTGphdmEvdXRpbC9JdGVyYXRvcjsBAAdoYXNOZXh0AQAEbmV4dAEAUm9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9CYXNpY1JlbGF0aXZlUGF0aE5vZGUBABNuZXdSZWxhdGl2ZVBhdGhOb2RlAQBkKExqYXZhL2xhbmcvU3RyaW5nO0opTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9SZWxhdGl2ZVBhdGhOb2RlOwEASG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9CYXNpY0RlZmVjdAEACnByZWZpeFBhdGgBAN0oTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JRGVmZWN0O0xvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0YVF1YWxpdHkvUmVsYXRpdmVQYXRoTm9kZTspTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JRGVmZWN0OwcBlAEANGNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9hbm5vdGF0aW9uL0pzb25JbmNsdWRlJEluY2x1ZGUBAAdJbmNsdWRlAQAITk9OX05VTEwBADZMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2Fubm90YXRpb24vSnNvbkluY2x1ZGUkSW5jbHVkZTsBABlzZXRTZXJpYWxpemF0aW9uSW5jbHVzaW9uAQBlKExjb20vZmFzdGVyeG1sL2phY2tzb24vYW5ub3RhdGlvbi9Kc29uSW5jbHVkZSRJbmNsdWRlOylMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2RhdGFiaW5kL09iamVjdE1hcHBlcjsBAA1hZGRTZXJpYWxpemVyAQB2KExqYXZhL2xhbmcvQ2xhc3M7TGNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9kYXRhYmluZC9Kc29uU2VyaWFsaXplcjspTGNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9kYXRhYmluZC9tb2R1bGUvU2ltcGxlTW9kdWxlOwEADnJlZ2lzdGVyTW9kdWxlAQBWKExjb20vZmFzdGVyeG1sL2phY2tzb24vZGF0YWJpbmQvTW9kdWxlOylMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2RhdGFiaW5kL09iamVjdE1hcHBlcjsHAZUMAZYBmQcBmgwBmwCGDAC5ALYMALcAuAwAtQC2BwGcDAFzAZ0BACxjb20vZmFzdGVyeG1sL2phY2tzb24vYW5ub3RhdGlvbi9Kc29uSW5jbHVkZQEAImphdmEvbGFuZy9pbnZva2UvTGFtYmRhTWV0YWZhY3RvcnkBAAttZXRhZmFjdG9yeQcBnwEABkxvb2t1cAEAzChMamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGVzJExvb2t1cDtMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL2ludm9rZS9NZXRob2RUeXBlO0xqYXZhL2xhbmcvaW52b2tlL01ldGhvZFR5cGU7TGphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlO0xqYXZhL2xhbmcvaW52b2tlL01ldGhvZFR5cGU7KUxqYXZhL2xhbmcvaW52b2tlL0NhbGxTaXRlOwEARG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JRGVmZWN0AQAKZ2V0TWVzc2FnZQEAJGphdmEvbGFuZy9pbnZva2UvU3RyaW5nQ29uY2F0RmFjdG9yeQEAmChMamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGVzJExvb2t1cDtMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL2ludm9rZS9NZXRob2RUeXBlO0xqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9pbnZva2UvQ2FsbFNpdGU7BwGgAQAlamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGVzJExvb2t1cAEAHmphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlcwAhAGkAOwADAGoAIQBrAAkAAgBtAG4AAAACAG8AcAABAHEAAAACAHIAAgBzAHAAAQBxAAAAAgB0AAIAdQB2AAAAGgB3AHgAAAACAHkAbgAAAAkAegBuAAAAAgB7AG4AAAAaAHwAfQABAH4AAAACAH8AHgABAIEAggABAIMAAAAdAAEAAQAAAAUqtwABsQAAAAEAhAAAAAYAAQAAABMAAQCFAIYAAQCDAAAAHQABAAEAAAAFKrQAArAAAAABAIQAAAAGAAEAAAAhAAEAhwCIAAEAgwAAACIAAgACAAAABiortQACsQAAAAEAhAAAAAoAAgAAACYABQAnAAEAiQCIAAEAgwAAAEQAAwACAAAAFyq0AALGAA27AANZEgS3AAW/Kiu1AAKxAAAAAgCEAAAAEgAEAAAAKwAHAC0AEQAvABYAMACKAAAAAwABEQABAIsAjAACAIMAAAA3AAEAAQAAABIqtAAGxwAJuAAHpwAHKrQABrAAAAACAIQAAAAGAAEAAAA0AIoAAAAHAAINQwcAjQBxAAAAAgCOAAEAjwCQAAIAgwAAACIAAgACAAAABiortQAGsQAAAAEAhAAAAAoAAgAAADkABQA6AHEAAAACAJEAAQCSAJMAAQCDAAAASwADAAIAAAAeKrQABscADiq7AAhZtwAJtQAGKrQABiu5AAoCAFexAAAAAgCEAAAAEgAEAAAAPgAHAEAAEgBCAB0AQwCKAAAAAwABEgABAJQAjAACAIMAAAA3AAEAAQAAABIqtAALxwAJuAAHpwAHKrQAC7AAAAACAIQAAAAGAAEAAABHAIoAAAAHAAINQwcAjQBxAAAAAgCVAAEAlgCQAAIAgwAAACIAAgACAAAABiortQALsQAAAAEAhAAAAAoAAgAAAEwABQBNAHEAAAACAJcAAQCYAJkAAQCDAAAASwADAAIAAAAeKrQAC8cADiq7AAhZtwAJtQALKrQACyu5AAoCAFexAAAAAgCEAAAAEgAEAAAAUQAHAFMAEgBVAB0AVgCKAAAAAwABEgABAJoAjAACAIMAAAAkAAMAAQAAAAwquwAMWbcADbYADrAAAAABAIQAAAAGAAEAAABaAHEAAAACAJsAAQCcAJ0AAQCDAAAAZwAEAAIAAAA1KrYAD0wruQAQAQCaACi7AANZK7kAEQEAugASAAC5ABMCABIUuAAVuQAWAgDAABe3AAW/KrAAAAACAIQAAAASAAQAAABfAAUAYAAOAGIAMwBkAIoAAAAIAAH8ADMHAI0AAQCeAJ8AAgCDAAAAHwADAAEAAAAHKgEEtgAYsAAAAAEAhAAAAAYAAQAAAGkAcQAAAAIAoAABAJ4AoQACAIMAAAAfAAMAAgAAAAcqARu2ABiwAAAAAQCEAAAABgABAAAAbgBxAAAAAgCiAAEAngCjAAIAgwAAAB8AAwACAAAAByorBLYAGLAAAAABAIQAAAAGAAEAAABzAHEAAAACAKQAAQCeAKUAAgCDAAAAQwAFAAQAAAAaHJkACiq2AA+nAAa4AAdOuwAZWSotK7cAGrAAAAACAIQAAAAKAAIAAAB5AA8AegCKAAAABwACC0IHAI0AcQAAAAIApgABAJoApwACAIMAAAF9AAMABQAAAOC7AAhZtwAJTSu0ABsquQAcAgCaAMwrtAAbKrkAHQIAVyq2AB7GAFsDPh0qtgAeuQAfAQCiAEwdNgQsKrYAHh25ACACAMAAISu5ACICALkAEQEAFQS6ACMAALkAEwIAugAkAAC5ACUCALgAJrkAFgIAwAAnuQAoAgBXhAMBp/+tKrYAKcYAWwM+HSq2ACm5AB8BAKIATB02BCwqtgApHbkAIAIAwAAhK7kAIgIAuQARAQAVBLoAKgAAuQATAgC6ACQAALkAJQIAuAAmuQAWAgDAACe5ACgCAFeEAwGn/60ssAAAAAIAhAAAAHIAHAAAAIMACACEABUAhgAgAIcAJwCJADYAiwA5AIwAPwCNAEgAjgBNAI8AWQCQAGMAkgBoAJMAcwCMAHkAiQB/AJYAhgCYAJUAmgCYAJsAngCcAKcAnQCsAJ4AuACfAMIAoQDHAKIA0gCbANgAmADeAKYAigAAABMABP0AKQcAjQH6AFX8AAgB+gBVAHEAAAACAKgAAQCpAKoAAQCDAAAAHQABAAEAAAAFKrQAK7AAAAABAIQAAAAGAAEAAACrAAEAqwCsAAEAgwAAACIAAgACAAAABiortQArsQAAAAEAhAAAAAoAAgAAALAABQCxAAEArQCGAAEAgwAAAB0AAQABAAAABSq0ACywAAAAAQCEAAAABgABAAAAtQABAK4AiAABAIMAAAAiAAIAAgAAAAYqK7UALLEAAAABAIQAAAAKAAIAAAC6AAUAuwABAK8AhgABAIMAAAG8AAYABgAAARUqtAAtxwEMuwAuWbcAL0wrEjC2ADFXKxIytgAxVysSM7YAMVcrEjS2ADFXKxI1tgAxVysSNrYAMVcrEje2ADFXKxI4tgAxVyq2ADlNKxI6BL0AO1kDLLYAPLgAPVO4AD62ADFXKxI/tgAxVysstgAxVysSP7YAMVeyAEBOKxI6BL0AO1kDLbYAPLgAPVO4AD62ADFXKxI/tgAxVysttgAxVysSP7YAMVe7AEFZtwBCOgQZBBJDKrYARLkARQMAV7IARhkEtgBHOgUrEjoEvQA7WQMZBbYAPLgAPVO4AD62ADFXKxI/tgAxVysZBbYAMVcqK7YASLYASbgASroASwAAtQAtpwANTLsATVkrtwBOvyq0AC2wAAEABwEDAQYATAACAIQAAAB+AB8AAAC/AAcAwwAPAMQAFgDFAB0AxwAkAMgAKwDKADIAywA5AM0AQADOAEcA0ABMANEAZADSAGsA0wBxANQAeADWAHwA1wCUANgAmwDZAKEA2gCoANwAsQDeAL8A3wDJAOAA4gDhAOkA4gDwAOQBAwDpAQYA5gEHAOgBEADsAIoAAAAJAAL3AQYHAEwJAAEAsACIAAEAgwAAACIAAgACAAAABiortQAtsQAAAAEAhAAAAAoAAgAAAPEABQDyAAoAsQCyAAEAgwAAABwAAgAAAAAABBQAT60AAAABAIQAAAAGAAEAAAD2AAEAswCyAAEAgwAAASAABAAFAAAAorgAUUAqtAACxgAOHyq0AAK2ADyFYUAqtAAsxgAOHyq0ACy2ADyFYUAqtAAtxgAOHyq0AC22ADyFYUAqtAAGxgAvKrQABrkAUgEATi25AFMBAJkAHC25AFQBAMAAVToEGQTGAAkfFABWYUCn/+EqtAALxgAvKrQAC7kAUgEATi25AFMBAJkAHC25AFQBAMAAWDoEGQTGAAkfFABWYUCn/+EfrQAAAAIAhAAAAEoAEgAAAPsABAD8AAsA/gAWAQAAHQECACgBBAAvAQYAOgEIAEEBCgBfAQwAZAEOAGoBEABtARIAdAEUAJIBFgCXARgAnQEaAKABHACKAAAAHAAJ/AAWBBER/AAQBwC0HvoAAvwAEAcAtB76AAIQQQCcAKoAAQCDAAAAHQABAAEAAAAFKrYAWbAAAAABAIQAAAAGAAEAAAATEAoAtQC2AAEAgwAAACwABAACAAAADCsSWhqFuABbuABcsAAAAAEAhAAAAA4AAwAAAJ8ABQCgAAgAnxAKALcAuAABAIMAAAAtAAEAAQAAAAoqxgAHBKcABAOsAAAAAgCEAAAABgABAAAAkgCKAAAABQACCEABEAoAuQC2AAEAgwAAACwABAACAAAADCsSXRqFuABbuABcsAAAAAEAhAAAAA4AAwAAAJAABQCRAAgAkAAIALoAggABAIMAAAA/AAUAAAAAACe7AF5ZtwBfsgBgtgBhuwBiWbcAYxJkuwBlWbcAZrYAZ7YAaLMARrEAAAABAIQAAAAGAAEAAAAZAAUAcQAAAAIAuwC8AAAAAgC9AL4AAAAGAAIAGQBlAGwAAAAiAAQAGQAAAAAAAABlAAAAAAAAASUBgAGCQBkBlwGeAZgAGQDPAAAAMAAFANAAAwDRANIA0wDQAAMA0QDmAOcA0AADAOkA6gDrANAAAwDRAPIA5wETAAEBFA==",
      "name" : "GraphFetch_Node7_Address_Impl",
      "package" : "_pure.plan.root.n1.globalChild1.localGraph",
      "source" : "package _pure.plan.root.n1.globalChild1.localGraph;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport java.io.IOException;\n\npublic class GraphFetch_Node7_Address_Impl implements _pure.app.test.Address, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.test.Address>, java.io.Serializable\n{\n    private String name;\n    private List<_pure.app.test.Person> persons;\n    private List<_pure.app.test.Firm> firms;\n    private Object pk$_0;\n    private static final ObjectMapper objectMapper$ = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL).registerModule(new SimpleModule().addSerializer(PureDate.class, new JsonSerializer<PureDate>() { @Override public void serialize(PureDate value, JsonGenerator gen, SerializerProvider serializers) throws IOException { gen.writeRawValue(\"\\\"\" + value.toString() + \"\\\"\"); } }));\n    private String setId$;\n    public static String databaseConnection$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 158558467L;\n\n    public String getName()\n    {\n        return this.name;\n    }\n\n    public void setName(String name)\n    {\n        this.name = name;\n    }\n\n    public void addName(String object)\n    {\n        if ((Object) this.name != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'name' of multiplicity with bound 1\");\n        }\n        this.name = object;\n    }\n\n    public List<_pure.app.test.Person> getPersons()\n    {\n        return this.persons == null ? Collections.<_pure.app.test.Person>emptyList() : this.persons;\n    }\n\n    public void setPersons(List<_pure.app.test.Person> persons)\n    {\n        this.persons = persons;\n    }\n\n    public void addPersons(_pure.app.test.Person object)\n    {\n        if (this.persons == null)\n        {\n            this.persons = new ArrayList<_pure.app.test.Person>();\n        }\n        this.persons.add(object);\n    }\n\n    public List<_pure.app.test.Firm> getFirms()\n    {\n        return this.firms == null ? Collections.<_pure.app.test.Firm>emptyList() : this.firms;\n    }\n\n    public void setFirms(List<_pure.app.test.Firm> firms)\n    {\n        this.firms = firms;\n    }\n\n    public void addFirms(_pure.app.test.Firm object)\n    {\n        if (this.firms == null)\n        {\n            this.firms = new ArrayList<_pure.app.test.Firm>();\n        }\n        this.firms.add(object);\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.test.Address withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Address> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Address> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Address> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Address> toChecked(Object source,\n                                                                                                                   boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Address>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.test.Address getValue() { return GraphFetch_Node7_Address_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n            if (this.getFirms() != null)\n            {\n                for (int i = 0; i < this.getFirms().size(); i++)\n                {\n                    final int index = i;\n                    result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.test.Firm>) this.getFirms()\n                                                                                                                                       .get(i))\n                                                                                                                                       .allConstraints(context)\n                                                                                                                                       .stream()\n                                                                                                                                       .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                            org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"firms\", index)))\n                                                                                                                                       .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect x) -> x != null)\n                                                                                                                                       .collect(Collectors.toList()));\n                }\n            }\n            if (this.getPersons() != null)\n            {\n                for (int i = 0; i < this.getPersons().size(); i++)\n                {\n                    final int index = i;\n                    result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.test.Person>) this.getPersons()\n                                                                                                                                         .get(i))\n                                                                                                                                         .allConstraints(context)\n                                                                                                                                         .stream()\n                                                                                                                                         .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                              org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"persons\", index)))\n                                                                                                                                         .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect x) -> x != null)\n                                                                                                                                         .collect(Collectors.toList()));\n                }\n            }\n        }\n        return result;\n    }\n\n    public Object getPk$_0()\n    {\n        return this.pk$_0;\n    }\n\n    public void setPk$_0(Object pk$_0)\n    {\n        this.pk$_0 = pk$_0;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId)\n    {\n        this.setId$ = setId;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        if (this.alloyStoreObjectReference$ == null)\n        {\n            try\n            {\n                StringBuilder referenceBuilder = new StringBuilder();\n                referenceBuilder.append(\"001:\");\n                referenceBuilder.append(\"010:\");\n\n                referenceBuilder.append(\"0000000010:\");\n                referenceBuilder.append(\"Relational:\");\n\n                referenceBuilder.append(\"0000000009:\");\n                referenceBuilder.append(\"test::Map:\");\n\n                referenceBuilder.append(\"0000000012:\");\n                referenceBuilder.append(\"test_Address:\");\n\n                String setId = this.getSetId$();\n                referenceBuilder.append(String.format(\"%010d\", setId.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(setId);\n                referenceBuilder.append(\":\");\n\n                String databaseConnectionString = _pure.plan.root.n1.globalChild1.localGraph.GraphFetch_Node7_Address_Impl.databaseConnection$;\n                referenceBuilder.append(String.format(\"%010d\", databaseConnectionString.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(databaseConnectionString);\n                referenceBuilder.append(\":\");\n\n                Map<String, Object> pkMap = new HashMap<>();\n\n                pkMap.put(\"pk$_0\", this.getPk$_0());\n                String pkMapString = objectMapper$.writeValueAsString(pkMap);\n                referenceBuilder.append(String.format(\"%010d\", pkMapString.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(pkMapString);\n\n                this.alloyStoreObjectReference$ = \"ASOR:\" + org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(referenceBuilder.toString().getBytes());\n            }\n            catch (Exception e)\n            {\n               throw new RuntimeException(e);\n            }\n        }\n\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String reference)\n    {\n        this.alloyStoreObjectReference$ = reference;\n    }\n\n    private static long getClassSize$()\n    {\n        return 156L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node7_Address_Impl.getClassSize$();\n        if (this.name != null)\n        {\n            size = size + this.name.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        if (this.persons != null)\n        {\n            for (_pure.app.test.Person i: this.persons)\n            {\n                if (i != null)\n                {\n                    size = size + 20L;\n                }\n            }\n        }\n        if (this.firms != null)\n        {\n            for (_pure.app.test.Firm i: this.firms)\n            {\n                if (i != null)\n                {\n                    size = size + 20L;\n                }\n            }\n        }\n        return size;\n    }\n}"
    }, {
      "byteCode" : "",
      "name" : "Specifics",
      "package" : "_pure.plan.root.n1.globalChild1.localGraph",
      "source" : "package _pure.plan.root.n1.globalChild1.localGraph;\n\nimport java.lang.reflect.Method;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.Types;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.eclipse.collections.api.tuple.Pair;\nimport org.eclipse.collections.impl.tuple.Tuples;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IConstantResult;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\n\nclass Specifics\n{\n    private static final List<Integer> STRING_TYPES = Arrays.asList(Types.CHAR, Types.VARCHAR, Types.LONGVARCHAR, Types.NCHAR, Types.NVARCHAR, Types.LONGNVARCHAR, Types.OTHER, Types.NULL);\n    private static final List<Integer> INT_TYPES = Arrays.asList(Types.TINYINT, Types.SMALLINT, Types.INTEGER, Types.BIGINT, Types.NULL);\n    private static final List<Integer> FLOAT_TYPES = Arrays.asList(Types.REAL, Types.FLOAT, Types.DOUBLE, Types.DECIMAL, Types.NUMERIC, Types.NULL);\n    private static final List<Integer> DECIMAL_TYPES = Arrays.asList(Types.DECIMAL, Types.NUMERIC, Types.NULL);\n    private static final List<Integer> BOOL_TYPES = Arrays.asList(Types.BIT, Types.BOOLEAN, Types.NULL);\n    private static final List<Integer> STRICT_DATE_TYPES = Arrays.asList(Types.DATE, Types.NULL);\n    private static final List<Integer> DATE_TIME_TYPES = Arrays.asList(Types.TIMESTAMP, Types.NULL);\n    private ResultSet resultSet;\n    private String databaseTimeZone;\n    private String databaseConnection;\n    private List<Integer> columnTypes;\n    private List<List<Integer>> propertyIndices;\n    private List<List<Supplier<Object>>> propertyGetters;\n    private Calendar calendar;\n    private Method parentPropertyAdder;\n    private Method parentEdgePointPropertyAdder;\n\n    private Object getAlloyNativeValueFromResultSet(ResultSet resultSet,\n                                                    int columnIndex,\n                                                    int columnType)\n    {\n        try\n        {\n            Object result = null;\n            switch (columnType)\n            {\n                case Types.DATE:\n                {\n                    java.sql.Date date = resultSet.getDate(columnIndex);\n                    if (date != null)\n                    {\n                        result = PureDate.fromSQLDate(date);\n                    }\n                    break;\n                }\n                case Types.TIMESTAMP:\n                {\n                    java.sql.Timestamp timestamp = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (timestamp != null)\n                    {\n                        result = PureDate.fromSQLTimestamp(timestamp);\n                    }\n                    break;\n                }\n                case Types.TINYINT:\n                case Types.SMALLINT:\n                case Types.INTEGER:\n                case Types.BIGINT:\n                {\n                    long num = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Long.valueOf(num);\n                    }\n                    break;\n                }\n                case Types.REAL:\n                case Types.FLOAT:\n                case Types.DOUBLE:\n                {\n                    double num = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Double.valueOf(num);\n                    }\n                    break;\n                }\n                case Types.DECIMAL:\n                case Types.NUMERIC:\n                {\n                    result = resultSet.getBigDecimal(columnIndex);\n                    break;\n                }\n                case Types.CHAR:\n                case Types.VARCHAR:\n                case Types.LONGVARCHAR:\n                case Types.NCHAR:\n                case Types.NVARCHAR:\n                case Types.LONGNVARCHAR:\n                case Types.OTHER:\n                {\n                    result = resultSet.getString(columnIndex);\n                    break;\n                }\n                case Types.BIT:\n                case Types.BOOLEAN:\n                {\n                    boolean bool = resultSet.getBoolean(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Boolean.valueOf(bool);\n                    }\n                }\n                case Types.BINARY:\n                case Types.VARBINARY:\n                case Types.LONGVARBINARY:\n                {\n                    byte[] bytes = resultSet.getBytes(columnIndex);\n                    if (bytes != null)\n                    {\n                        result = this.encodeHex(bytes);\n                    }\n                    break;\n                }\n                case Types.NULL:\n                {\n                    // do nothing: value is already assigned to null\n                    break;\n                }\n                default:\n                {\n                    result = resultSet.getObject(columnIndex);\n                }\n            }\n            return result;}\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private String encodeHex(byte[] data)\n    {\n        final char[] DIGITS_LOWER = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n        final int l = data.length;\n        final char[] out = new char[l << 1];\n        for (int i = 0, j = 0; i < l; i++)\n        {\n            out[j++] = DIGITS_LOWER[(0xF0 & data[i]) >>> 4];\n            out[j++] = DIGITS_LOWER[0x0F & data[i]];\n        }\n        return new String(out);\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForStringProperty(ResultSet resultSet,\n                                                                         int columnIndex,\n                                                                         int columnType,\n                                                                         String propertyName)\n    {\n        if (STRING_TYPES.contains(columnType))\n        {\n           return () -> {\n                try\n                {\n                    return resultSet.getString(columnIndex);\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        else\n        {\n            throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type String from SQL column of type '\" + columnType + \"'.\");\n        }\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForIntegerProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Long res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Long.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Integer from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForFloatProperty(ResultSet resultSet,\n                                                                        int columnIndex,\n                                                                        int columnType,\n                                                                        String propertyName)\n    {\n        if (FLOAT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Double res = null;\n                    double r = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Double.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Double res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Double.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Float from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDecimalProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (DECIMAL_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    return resultSet.getBigDecimal(columnIndex);\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (FLOAT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    java.math.BigDecimal res = null;\n                    double r = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = java.math.BigDecimal.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    java.math.BigDecimal res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = java.math.BigDecimal.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Decimal from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForBooleanProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (BOOL_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    boolean r = resultSet.getBoolean(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r == 1);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Boolean from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForStrictDateProperty(ResultSet resultSet,\n                                                                             int columnIndex,\n                                                                             int columnType,\n                                                                             String propertyName)\n    {\n        if (STRICT_DATE_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Date r = resultSet.getDate(columnIndex);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLDate(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException)\n                        {\n                            res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type StrictDate from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDateTimeProperty(ResultSet resultSet,\n                                                                           int columnIndex,\n                                                                           int columnType,\n                                                                           String propertyName)\n    {\n        if (DATE_TIME_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLTimestamp(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException)\n                        {\n                            res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type DateTime from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDateProperty(ResultSet resultSet,\n                                                                       int columnIndex,\n                                                                       int columnType,\n                                                                       String propertyName)\n    {\n        if (STRICT_DATE_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Date r = resultSet.getDate(columnIndex);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLDate(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (DATE_TIME_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLTimestamp(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException1)\n                        {\n                            try\n                            {\n                                res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\n                            }\n                            catch (java.time.format.DateTimeParseException dateTimeParseException2)\n                            {\n                                res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\n                            }\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Date from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    void prepare(ResultSet resultSet, String databaseTimeZone, String databaseConnection)\n    {\n        try\n        {\n            this.resultSet = resultSet;\n            this.databaseTimeZone = databaseTimeZone;\n            this.databaseConnection = databaseConnection;\n            this.calendar = new GregorianCalendar(TimeZone.getTimeZone(this.databaseTimeZone));\n            ResultSetMetaData resultSetMetaData = this.resultSet.getMetaData();\n            int columnCount = resultSetMetaData.getColumnCount();\n            this.columnTypes = new ArrayList<Integer>();\n            List<String> columnNames = new ArrayList<String>();\n            for (int i = 1; i <= columnCount; i++)\n            {\n                String columnLabel = resultSetMetaData.getColumnLabel(i);\n                columnNames.add(columnLabel.startsWith(\"\\\"\") && columnLabel\n                                           .endsWith(\"\\\"\")\n                                           ? columnLabel.substring(1, columnLabel.length() - 1)\n                                                        .toUpperCase()\n                                           : columnLabel.toUpperCase());\n                this.columnTypes.add(resultSetMetaData.getColumnType(i));\n            }\n            this.propertyIndices = new ArrayList<List<Integer>>();\n            List<Integer> index_0 = new ArrayList<Integer>();\n            index_0.add(columnNames.indexOf(\"NAME\") + 1);\n            index_0.add(columnNames.indexOf(\"PK_0\") + 1);\n            this.propertyIndices.add(index_0);\n            GraphFetch_Node7_Address_Impl.databaseConnection$ = databaseConnection;\n            this.propertyGetters = new ArrayList<List<Supplier<Object>>>();\n            int propertyIndex;\n            Supplier<Object> propertyGetter = null;\n            List<Supplier<Object>> propertyGetter_0 = new ArrayList<Supplier<Object>>();\n            propertyIndex = this.propertyIndices.get(0).get(0);\n            propertyGetter = this.getResultSetPropertyGetterForStringProperty(this.resultSet,\n                                                                              propertyIndex,\n                                                                              resultSetMetaData.getColumnType(propertyIndex),\n                                                                              \"name\");\n            propertyGetter_0.add(propertyGetter);\n            this.propertyGetters.add(propertyGetter_0);\n        }\n        catch (RuntimeException e)\n        {\n            throw e;\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    IGraphInstance<? extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject> nextGraphInstance()\n    {\n        try\n        {\n            final GraphFetch_Node7_Address_Impl object = new GraphFetch_Node7_Address_Impl();\n            object.setSetId$(\"test_Address\");\n            int pkColIndex;\n            int propertyIndex;\n            pkColIndex = this.propertyIndices.get(0).get(1);\n            Object pk$_0 = this.getAlloyNativeValueFromResultSet(resultSet,\n                                                                 pkColIndex,\n                                                                 this.columnTypes.get(pkColIndex - 1));\n            object.setPk$_0(pk$_0);\n            propertyIndex = this.propertyIndices.get(0).get(0);\n            {\n                String res = (String) this.propertyGetters.get(0).get(0).get();\n                if (res == null)\n                {\n                    throw new RuntimeException(\"Error reading in property 'name'. Property of multiplicity [1] can not be null\");\n                }\n                object.setName(res);\n            }\n            return new IGraphInstance<GraphFetch_Node7_Address_Impl>()\n            {\n                public GraphFetch_Node7_Address_Impl getValue()\n                {\n                    return object;\n                }\n                public long instanceSize()\n                {\n                    return object.getInstanceSize$();\n                }\n            };\n        }\n        catch (RuntimeException e)\n        {\n            throw e;\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    List<Method> primaryKeyGetters()\n    {\n        try\n        {\n            return Arrays.asList(GraphFetch_Node7_Address_Impl.class.getMethod(\"getPk$_0\"));\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String mappingId()\n    {\n        return \"test::Map\";\n    }\n\n    public String sourceInstanceSetId()\n    {\n        return \"test_Person\";\n    }\n\n    public String targetInstanceSetId()\n    {\n        return \"test_Address\";\n    }\n\n    void addChildToParent(Object parent, Object child, IExecutionNodeContext executionNodeContext)\n    {\n        try\n        {\n            if (this.parentPropertyAdder == null)\n            {\n                this.parentPropertyAdder = parent\n                    .getClass()\n                    .getMethod(\"addAddress\", _pure.app.test.Address.class);\n            }\n            this.parentPropertyAdder.invoke(parent, child);\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    List<String> parentCrossKeyColumns(List<String> queryResultColumns)\n    {\n        return queryResultColumns.stream()\n                                 .filter((String x) -> x.toUpperCase()\n                                                        .startsWith(\"PARENT_CROSS_KEY_\"))\n                                 .collect(Collectors.toList());\n    }\n\n    List<Method> parentCrossKeyGetters()\n    {\n        try\n        {\n            return Arrays.asList(_pure.app.test.Person_Map_test_Person.class\n                                                                      .getMethod(\"getAddressName\"));\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    boolean supportsCrossCaching()\n    {\n        return true;\n    }\n\n    List<String> targetPropertiesOrdered()\n    {\n        return Arrays.asList(\"name\");\n    }\n\n    List<Method> parentCrossKeyGettersOrderedByTargetProperties()\n    {\n        try\n        {\n            return Arrays.asList(_pure.app.test.Person_Map_test_Person.class\n                                                                      .getMethod(\"getAddressName\"));\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n}"
    }, {
      "byteCode" : "yv66vgAAADcAMAoACwAlBwAmCgACACUJAAoAJwoAAgAoCgACACkKAAIAKgoAAgArCgACACwHAC0HAC4HAC8BAAlzcGVjaWZpY3MBAClMX3B1cmUvcGxhbi9yb290L24xL2xvY2FsR3JhcGgvU3BlY2lmaWNzOwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAAdwcmVwYXJlAQA7KExqYXZhL3NxbC9SZXN1bHRTZXQ7TGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7KVYBABFuZXh0R3JhcGhJbnN0YW5jZQEATigpTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9ncmFwaEZldGNoL0lHcmFwaEluc3RhbmNlOwEACVNpZ25hdHVyZQEAmygpTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9ncmFwaEZldGNoL0lHcmFwaEluc3RhbmNlPCtMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvc2hhcmVkL0lSZWZlcmVuY2VkT2JqZWN0Oz47AQARcHJpbWFyeUtleUdldHRlcnMBABIoKUxqYXZhL3V0aWwvTGlzdDsBAC4oKUxqYXZhL3V0aWwvTGlzdDxMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOz47AQAdYWxsSW5zdGFuY2VTZXRJbXBsZW1lbnRhdGlvbnMBAGIoKUxqYXZhL3V0aWwvTGlzdDxMb3JnL2VjbGlwc2UvY29sbGVjdGlvbnMvYXBpL3R1cGxlL1BhaXI8TGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7Pjs+OwEAEXByaW1hcnlLZXlDb2x1bW5zAQATKEkpTGphdmEvdXRpbC9MaXN0OwEAJyhJKUxqYXZhL3V0aWwvTGlzdDxMamF2YS9sYW5nL1N0cmluZzs+OwEAD3N1cHBvcnRzQ2FjaGluZwEAAygpWgEAClNvdXJjZUZpbGUBAAxFeGVjdXRlLmphdmEMAA8AEAEAJ19wdXJlL3BsYW4vcm9vdC9uMS9sb2NhbEdyYXBoL1NwZWNpZmljcwwADQAODAATABQMABUAFgwAGQAaDAAcABoMAB4AHwEAJV9wdXJlL3BsYW4vcm9vdC9uMS9sb2NhbEdyYXBoL0V4ZWN1dGUBABBqYXZhL2xhbmcvT2JqZWN0AQCDb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvc3RvcmUvcmVsYXRpb25hbC9ncmFwaEZldGNoL0lSZWxhdGlvbmFsUm9vdFF1ZXJ5VGVtcFRhYmxlR3JhcGhGZXRjaEV4ZWN1dGlvbk5vZGVTcGVjaWZpY3MAIQAKAAsAAQAMAAEAAgANAA4AAAAHAAEADwAQAAEAEQAAADAAAwABAAAAECq3AAEquwACWbcAA7UABLEAAAABABIAAAAOAAMAAAATAAQAFAAPABUAAQATABQAAQARAAAAJwAEAAQAAAALKrQABCssLbYABbEAAAABABIAAAAKAAIAAAAZAAoAGgABABUAFgACABEAAAAgAAEAAQAAAAgqtAAEtgAGsAAAAAEAEgAAAAYAAQAAAB4AFwAAAAIAGAABABkAGgACABEAAAAgAAEAAQAAAAgqtAAEtgAHsAAAAAEAEgAAAAYAAQAAACMAFwAAAAIAGwABABwAGgACABEAAAAgAAEAAQAAAAgqtAAEtgAIsAAAAAEAEgAAAAYAAQAAACgAFwAAAAIAHQABAB4AHwACABEAAAAhAAIAAgAAAAkqtAAEG7YACbAAAAABABIAAAAGAAEAAAAtABcAAAACACAAAQAhACIAAQARAAAAGgABAAEAAAACBKwAAAABABIAAAAGAAEAAAAyAAEAIwAAAAIAJA==",
      "name" : "Execute",
      "package" : "_pure.plan.root.n1.localGraph",
      "source" : "package _pure.plan.root.n1.localGraph;\n\nimport java.lang.reflect.Method;\nimport java.sql.ResultSet;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.eclipse.collections.api.tuple.Pair;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.relational.graphFetch.IRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\npublic class Execute implements IRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics\n{\n    private Specifics specifics;\n\n    public Execute()\n    {\n        this.specifics = new Specifics();\n    }\n\n    public void prepare(ResultSet resultSet, String databaseTimeZone, String databaseConnection)\n    {\n        this.specifics.prepare(resultSet, databaseTimeZone, databaseConnection);\n    }\n\n    public IGraphInstance<? extends IReferencedObject> nextGraphInstance()\n    {\n        return this.specifics.nextGraphInstance();\n    }\n\n    public List<Method> primaryKeyGetters()\n    {\n        return this.specifics.primaryKeyGetters();\n    }\n\n    public List<Pair<String, String>> allInstanceSetImplementations()\n    {\n        return this.specifics.allInstanceSetImplementations();\n    }\n\n    public List<String> primaryKeyColumns(int setIndex)\n    {\n        return this.specifics.primaryKeyColumns(setIndex);\n    }\n\n    public boolean supportsCaching()\n    {\n        return true;\n    }\n}"
    }, {
      "byteCode" : "",
      "name" : "GraphFetch_Node0_Person_Map_test_Person_Impl",
      "package" : "_pure.plan.root.n1.localGraph",
      "source" : "package _pure.plan.root.n1.localGraph;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport java.io.IOException;\n\npublic class GraphFetch_Node0_Person_Map_test_Person_Impl implements _pure.app.test.Person_Map_test_Person, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.test.Person_Map_test_Person>, java.io.Serializable\n{\n    private String firmName;\n    private String addressName;\n    private String fullName;\n    private _pure.app.test.Firm firm;\n    private _pure.app.test.Address address;\n    private Object pk$_0;\n    private static final ObjectMapper objectMapper$ = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL).registerModule(new SimpleModule().addSerializer(PureDate.class, new JsonSerializer<PureDate>() { @Override public void serialize(PureDate value, JsonGenerator gen, SerializerProvider serializers) throws IOException { gen.writeRawValue(\"\\\"\" + value.toString() + \"\\\"\"); } }));\n    private String setId$;\n    public static String databaseConnection$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 702858519L;\n\n    public String getFirmName()\n    {\n        return this.firmName;\n    }\n\n    public void setFirmName(String firmName)\n    {\n        this.firmName = firmName;\n    }\n\n    public void addFirmName(String object)\n    {\n        if ((Object) this.firmName != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'firmName' of multiplicity with bound 1\");\n        }\n        this.firmName = object;\n    }\n\n    public String getAddressName()\n    {\n        return this.addressName;\n    }\n\n    public void setAddressName(String addressName)\n    {\n        this.addressName = addressName;\n    }\n\n    public void addAddressName(String object)\n    {\n        if ((Object) this.addressName != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'addressName' of multiplicity with bound 1\");\n        }\n        this.addressName = object;\n    }\n\n    public String getFullName()\n    {\n        return this.fullName;\n    }\n\n    public void setFullName(String fullName)\n    {\n        this.fullName = fullName;\n    }\n\n    public void addFullName(String object)\n    {\n        if ((Object) this.fullName != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'fullName' of multiplicity with bound 1\");\n        }\n        this.fullName = object;\n    }\n\n    public _pure.app.test.Firm getFirm()\n    {\n        return this.firm;\n    }\n\n    public void setFirm(_pure.app.test.Firm firm)\n    {\n        this.firm = firm;\n    }\n\n    public void addFirm(_pure.app.test.Firm object)\n    {\n        if ((Object) this.firm != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'firm' of multiplicity with bound 1\");\n        }\n        this.firm = object;\n    }\n\n    public _pure.app.test.Address getAddress()\n    {\n        return this.address;\n    }\n\n    public void setAddress(_pure.app.test.Address address)\n    {\n        this.address = address;\n    }\n\n    public void addAddress(_pure.app.test.Address object)\n    {\n        if ((Object) this.address != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'address' of multiplicity with bound 1\");\n        }\n        this.address = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.test.Person_Map_test_Person withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Person_Map_test_Person> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Person_Map_test_Person> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Person_Map_test_Person> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Person_Map_test_Person> toChecked(Object source,\n                                                                                                                                  boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.test.Person_Map_test_Person>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.test.Person_Map_test_Person getValue() { return GraphFetch_Node0_Person_Map_test_Person_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n        }\n        return result;\n    }\n\n    public Object getPk$_0()\n    {\n        return this.pk$_0;\n    }\n\n    public void setPk$_0(Object pk$_0)\n    {\n        this.pk$_0 = pk$_0;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId)\n    {\n        this.setId$ = setId;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        if (this.alloyStoreObjectReference$ == null)\n        {\n            try\n            {\n                StringBuilder referenceBuilder = new StringBuilder();\n                referenceBuilder.append(\"001:\");\n                referenceBuilder.append(\"010:\");\n\n                referenceBuilder.append(\"0000000010:\");\n                referenceBuilder.append(\"Relational:\");\n\n                referenceBuilder.append(\"0000000009:\");\n                referenceBuilder.append(\"test::Map:\");\n\n                referenceBuilder.append(\"0000000011:\");\n                referenceBuilder.append(\"test_Person:\");\n\n                String setId = this.getSetId$();\n                referenceBuilder.append(String.format(\"%010d\", setId.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(setId);\n                referenceBuilder.append(\":\");\n\n                String databaseConnectionString = _pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Map_test_Person_Impl.databaseConnection$;\n                referenceBuilder.append(String.format(\"%010d\", databaseConnectionString.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(databaseConnectionString);\n                referenceBuilder.append(\":\");\n\n                Map<String, Object> pkMap = new HashMap<>();\n\n                pkMap.put(\"pk$_0\", this.getPk$_0());\n                String pkMapString = objectMapper$.writeValueAsString(pkMap);\n                referenceBuilder.append(String.format(\"%010d\", pkMapString.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(pkMapString);\n\n                this.alloyStoreObjectReference$ = \"ASOR:\" + org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(referenceBuilder.toString().getBytes());\n            }\n            catch (Exception e)\n            {\n               throw new RuntimeException(e);\n            }\n        }\n\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String reference)\n    {\n        this.alloyStoreObjectReference$ = reference;\n    }\n\n    private static long getClassSize$()\n    {\n        return 204L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node0_Person_Map_test_Person_Impl.getClassSize$();\n        if (this.firmName != null)\n        {\n            size = size + this.firmName.length();\n        }\n        if (this.addressName != null)\n        {\n            size = size + this.addressName.length();\n        }\n        if (this.fullName != null)\n        {\n            size = size + this.fullName.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        return size;\n    }\n}"
    }, {
      "byteCode" : "",
      "name" : "Specifics",
      "package" : "_pure.plan.root.n1.localGraph",
      "source" : "package _pure.plan.root.n1.localGraph;\n\nimport java.lang.reflect.Method;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.Types;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.eclipse.collections.api.tuple.Pair;\nimport org.eclipse.collections.impl.tuple.Tuples;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IConstantResult;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\n\nclass Specifics\n{\n    private static final List<Integer> STRING_TYPES = Arrays.asList(Types.CHAR, Types.VARCHAR, Types.LONGVARCHAR, Types.NCHAR, Types.NVARCHAR, Types.LONGNVARCHAR, Types.OTHER, Types.NULL);\n    private static final List<Integer> INT_TYPES = Arrays.asList(Types.TINYINT, Types.SMALLINT, Types.INTEGER, Types.BIGINT, Types.NULL);\n    private static final List<Integer> FLOAT_TYPES = Arrays.asList(Types.REAL, Types.FLOAT, Types.DOUBLE, Types.DECIMAL, Types.NUMERIC, Types.NULL);\n    private static final List<Integer> DECIMAL_TYPES = Arrays.asList(Types.DECIMAL, Types.NUMERIC, Types.NULL);\n    private static final List<Integer> BOOL_TYPES = Arrays.asList(Types.BIT, Types.BOOLEAN, Types.NULL);\n    private static final List<Integer> STRICT_DATE_TYPES = Arrays.asList(Types.DATE, Types.NULL);\n    private static final List<Integer> DATE_TIME_TYPES = Arrays.asList(Types.TIMESTAMP, Types.NULL);\n    private ResultSet resultSet;\n    private String databaseTimeZone;\n    private String databaseConnection;\n    private List<Integer> columnTypes;\n    private List<List<Integer>> propertyIndices;\n    private List<List<Supplier<Object>>> propertyGetters;\n    private Calendar calendar;\n    private Method parentPropertyAdder;\n    private Method parentEdgePointPropertyAdder;\n\n    private Object getAlloyNativeValueFromResultSet(ResultSet resultSet,\n                                                    int columnIndex,\n                                                    int columnType)\n    {\n        try\n        {\n            Object result = null;\n            switch (columnType)\n            {\n                case Types.DATE:\n                {\n                    java.sql.Date date = resultSet.getDate(columnIndex);\n                    if (date != null)\n                    {\n                        result = PureDate.fromSQLDate(date);\n                    }\n                    break;\n                }\n                case Types.TIMESTAMP:\n                {\n                    java.sql.Timestamp timestamp = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (timestamp != null)\n                    {\n                        result = PureDate.fromSQLTimestamp(timestamp);\n                    }\n                    break;\n                }\n                case Types.TINYINT:\n                case Types.SMALLINT:\n                case Types.INTEGER:\n                case Types.BIGINT:\n                {\n                    long num = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Long.valueOf(num);\n                    }\n                    break;\n                }\n                case Types.REAL:\n                case Types.FLOAT:\n                case Types.DOUBLE:\n                {\n                    double num = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Double.valueOf(num);\n                    }\n                    break;\n                }\n                case Types.DECIMAL:\n                case Types.NUMERIC:\n                {\n                    result = resultSet.getBigDecimal(columnIndex);\n                    break;\n                }\n                case Types.CHAR:\n                case Types.VARCHAR:\n                case Types.LONGVARCHAR:\n                case Types.NCHAR:\n                case Types.NVARCHAR:\n                case Types.LONGNVARCHAR:\n                case Types.OTHER:\n                {\n                    result = resultSet.getString(columnIndex);\n                    break;\n                }\n                case Types.BIT:\n                case Types.BOOLEAN:\n                {\n                    boolean bool = resultSet.getBoolean(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Boolean.valueOf(bool);\n                    }\n                }\n                case Types.BINARY:\n                case Types.VARBINARY:\n                case Types.LONGVARBINARY:\n                {\n                    byte[] bytes = resultSet.getBytes(columnIndex);\n                    if (bytes != null)\n                    {\n                        result = this.encodeHex(bytes);\n                    }\n                    break;\n                }\n                case Types.NULL:\n                {\n                    // do nothing: value is already assigned to null\n                    break;\n                }\n                default:\n                {\n                    result = resultSet.getObject(columnIndex);\n                }\n            }\n            return result;}\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private String encodeHex(byte[] data)\n    {\n        final char[] DIGITS_LOWER = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n        final int l = data.length;\n        final char[] out = new char[l << 1];\n        for (int i = 0, j = 0; i < l; i++)\n        {\n            out[j++] = DIGITS_LOWER[(0xF0 & data[i]) >>> 4];\n            out[j++] = DIGITS_LOWER[0x0F & data[i]];\n        }\n        return new String(out);\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForStringProperty(ResultSet resultSet,\n                                                                         int columnIndex,\n                                                                         int columnType,\n                                                                         String propertyName)\n    {\n        if (STRING_TYPES.contains(columnType))\n        {\n           return () -> {\n                try\n                {\n                    return resultSet.getString(columnIndex);\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        else\n        {\n            throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type String from SQL column of type '\" + columnType + \"'.\");\n        }\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForIntegerProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Long res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Long.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Integer from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForFloatProperty(ResultSet resultSet,\n                                                                        int columnIndex,\n                                                                        int columnType,\n                                                                        String propertyName)\n    {\n        if (FLOAT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Double res = null;\n                    double r = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Double.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Double res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Double.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Float from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDecimalProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (DECIMAL_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    return resultSet.getBigDecimal(columnIndex);\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (FLOAT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    java.math.BigDecimal res = null;\n                    double r = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = java.math.BigDecimal.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    java.math.BigDecimal res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = java.math.BigDecimal.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Decimal from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForBooleanProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (BOOL_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    boolean r = resultSet.getBoolean(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r == 1);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Boolean from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForStrictDateProperty(ResultSet resultSet,\n                                                                             int columnIndex,\n                                                                             int columnType,\n                                                                             String propertyName)\n    {\n        if (STRICT_DATE_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Date r = resultSet.getDate(columnIndex);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLDate(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException)\n                        {\n                            res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type StrictDate from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDateTimeProperty(ResultSet resultSet,\n                                                                           int columnIndex,\n                                                                           int columnType,\n                                                                           String propertyName)\n    {\n        if (DATE_TIME_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLTimestamp(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException)\n                        {\n                            res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type DateTime from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDateProperty(ResultSet resultSet,\n                                                                       int columnIndex,\n                                                                       int columnType,\n                                                                       String propertyName)\n    {\n        if (STRICT_DATE_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Date r = resultSet.getDate(columnIndex);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLDate(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (DATE_TIME_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLTimestamp(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException1)\n                        {\n                            try\n                            {\n                                res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\n                            }\n                            catch (java.time.format.DateTimeParseException dateTimeParseException2)\n                            {\n                                res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\n                            }\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Date from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    void prepare(ResultSet resultSet, String databaseTimeZone, String databaseConnection)\n    {\n        try\n        {\n            this.resultSet = resultSet;\n            this.databaseTimeZone = databaseTimeZone;\n            this.databaseConnection = databaseConnection;\n            this.calendar = new GregorianCalendar(TimeZone.getTimeZone(this.databaseTimeZone));\n            ResultSetMetaData resultSetMetaData = this.resultSet.getMetaData();\n            int columnCount = resultSetMetaData.getColumnCount();\n            this.columnTypes = new ArrayList<Integer>();\n            List<String> columnNames = new ArrayList<String>();\n            for (int i = 1; i <= columnCount; i++)\n            {\n                String columnLabel = resultSetMetaData.getColumnLabel(i);\n                columnNames.add(columnLabel.startsWith(\"\\\"\") && columnLabel\n                                           .endsWith(\"\\\"\")\n                                           ? columnLabel.substring(1, columnLabel.length() - 1)\n                                                        .toUpperCase()\n                                           : columnLabel.toUpperCase());\n                this.columnTypes.add(resultSetMetaData.getColumnType(i));\n            }\n            this.propertyIndices = new ArrayList<List<Integer>>();\n            List<Integer> index_0 = new ArrayList<Integer>();\n            index_0.add(columnNames.indexOf(\"FIRMNAME\") + 1);\n            index_0.add(columnNames.indexOf(\"ADDRESSNAME\") + 1);\n            index_0.add(columnNames.indexOf(\"FULLNAME\") + 1);\n            index_0.add(columnNames.indexOf(\"PK_0\") + 1);\n            this.propertyIndices.add(index_0);\n            GraphFetch_Node0_Person_Map_test_Person_Impl.databaseConnection$ = databaseConnection;\n            this.propertyGetters = new ArrayList<List<Supplier<Object>>>();\n            int propertyIndex;\n            Supplier<Object> propertyGetter = null;\n            List<Supplier<Object>> propertyGetter_0 = new ArrayList<Supplier<Object>>();\n            propertyIndex = this.propertyIndices.get(0).get(0);\n            propertyGetter = this.getResultSetPropertyGetterForStringProperty(this.resultSet,\n                                                                              propertyIndex,\n                                                                              resultSetMetaData.getColumnType(propertyIndex),\n                                                                              \"firmName\");\n            propertyGetter_0.add(propertyGetter);\n            propertyIndex = this.propertyIndices.get(0).get(1);\n            propertyGetter = this.getResultSetPropertyGetterForStringProperty(this.resultSet,\n                                                                              propertyIndex,\n                                                                              resultSetMetaData.getColumnType(propertyIndex),\n                                                                              \"addressName\");\n            propertyGetter_0.add(propertyGetter);\n            propertyIndex = this.propertyIndices.get(0).get(2);\n            propertyGetter = this.getResultSetPropertyGetterForStringProperty(this.resultSet,\n                                                                              propertyIndex,\n                                                                              resultSetMetaData.getColumnType(propertyIndex),\n                                                                              \"fullName\");\n            propertyGetter_0.add(propertyGetter);\n            this.propertyGetters.add(propertyGetter_0);\n        }\n        catch (RuntimeException e)\n        {\n            throw e;\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    IGraphInstance<? extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject> nextGraphInstance()\n    {\n        try\n        {\n            final GraphFetch_Node0_Person_Map_test_Person_Impl object = new GraphFetch_Node0_Person_Map_test_Person_Impl();\n            object.setSetId$(\"test_Person\");\n            int pkColIndex;\n            int propertyIndex;\n            pkColIndex = this.propertyIndices.get(0).get(3);\n            Object pk$_0 = this.getAlloyNativeValueFromResultSet(resultSet,\n                                                                 pkColIndex,\n                                                                 this.columnTypes.get(pkColIndex - 1));\n            object.setPk$_0(pk$_0);\n            propertyIndex = this.propertyIndices.get(0).get(0);\n            {\n                String res = (String) this.propertyGetters.get(0).get(0).get();\n                object.setFirmName(res);\n            }\n            propertyIndex = this.propertyIndices.get(0).get(1);\n            {\n                String res = (String) this.propertyGetters.get(0).get(1).get();\n                object.setAddressName(res);\n            }\n            propertyIndex = this.propertyIndices.get(0).get(2);\n            {\n                String res = (String) this.propertyGetters.get(0).get(2).get();\n                if (res == null)\n                {\n                    throw new RuntimeException(\"Error reading in property 'fullName'. Property of multiplicity [1] can not be null\");\n                }\n                object.setFullName(res);\n            }\n            return new IGraphInstance<GraphFetch_Node0_Person_Map_test_Person_Impl>()\n            {\n                public GraphFetch_Node0_Person_Map_test_Person_Impl getValue()\n                {\n                    return object;\n                }\n                public long instanceSize()\n                {\n                    return object.getInstanceSize$();\n                }\n            };\n        }\n        catch (RuntimeException e)\n        {\n            throw e;\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    List<Method> primaryKeyGetters()\n    {\n        try\n        {\n            return Arrays.asList(GraphFetch_Node0_Person_Map_test_Person_Impl.class\n                                                                             .getMethod(\"getPk$_0\"));\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    List<Pair<String, String>> allInstanceSetImplementations()\n    {\n        return Arrays.asList(Tuples.pair(\"test::Map\", \"test_Person\"));\n    }\n\n    List<String> primaryKeyColumns(int setIndex)\n    {\n        if (setIndex == 0)\n        {\n            return Arrays.asList(\"pk_0\");\n        }\n        return null;\n    }\n}"
    }, {
      "byteCode" : "yv66vgAAADcALgkABgAeCQAGAB8KAAcAIAoAIQAiCgAGACMHACQHACYHACcBAAp2YWwkb2JqZWN0AQBKTF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDEvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGU3X0FkZHJlc3NfSW1wbDsBAAZ0aGlzJDABADZMX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMS9sb2NhbEdyYXBoL1NwZWNpZmljczsBAAY8aW5pdD4BAIMoTF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDEvbG9jYWxHcmFwaC9TcGVjaWZpY3M7TF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDEvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGU3X0FkZHJlc3NfSW1wbDspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAAhnZXRWYWx1ZQEATCgpTF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDEvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGU3X0FkZHJlc3NfSW1wbDsBAAxpbnN0YW5jZVNpemUBAAMoKUoBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwEACVNpZ25hdHVyZQEAqkxqYXZhL2xhbmcvT2JqZWN0O0xvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZ3JhcGhGZXRjaC9JR3JhcGhJbnN0YW5jZTxMX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMS9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTdfQWRkcmVzc19JbXBsOz47AQAKU291cmNlRmlsZQEADlNwZWNpZmljcy5qYXZhAQAPRW5jbG9zaW5nTWV0aG9kBwAoDAApACoBAAhOZXN0SG9zdAwACwAMDAAJAAoMAA0AKwcALAwALQAUDAARABIBADZfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQxL2xvY2FsR3JhcGgvU3BlY2lmaWNzJDEBAAxJbm5lckNsYXNzZXMBABBqYXZhL2xhbmcvT2JqZWN0AQBKb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2dyYXBoRmV0Y2gvSUdyYXBoSW5zdGFuY2UBADRfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQxL2xvY2FsR3JhcGgvU3BlY2lmaWNzAQARbmV4dEdyYXBoSW5zdGFuY2UBAE4oKUxvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZ3JhcGhGZXRjaC9JR3JhcGhJbnN0YW5jZTsBAAMoKVYBAEhfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQxL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlN19BZGRyZXNzX0ltcGwBABBnZXRJbnN0YW5jZVNpemUkACAABgAHAAEACAACEBAACQAKAAAQEAALAAwAAAAEAAAADQAOAAEADwAAACcAAgADAAAADyortQABKiy1AAIqtwADsQAAAAEAEAAAAAYAAQAAAngAAQARABIAAQAPAAAAHQABAAEAAAAFKrQAArAAAAABABAAAAAGAAEAAAJ7AAEAEwAUAAEADwAAACAAAgABAAAACCq0AAK2AAStAAAAAQAQAAAABgABAAACfxBBABEAFQABAA8AAAAdAAEAAQAAAAUqtgAFsAAAAAEAEAAAAAYAAQAAAngABQAWAAAAAgAXABgAAAACABkAGgAAAAQAGwAcAB0AAAACABsAJQAAAAoAAQAGAAAAAAAA",
      "name" : "Specifics$1",
      "package" : "_pure.plan.root.n1.globalChild1.localGraph",
      "source" : "<<GENERATED>>"
    }, {
      "byteCode" : "yv66vgAAADcALgkABgAeCQAGAB8KAAcAIAoAIQAiCgAGACMHACQHACYHACcBAAp2YWwkb2JqZWN0AQBMTF9wdXJlL3BsYW4vcm9vdC9uMS9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTBfUGVyc29uX01hcF90ZXN0X1BlcnNvbl9JbXBsOwEABnRoaXMkMAEAKUxfcHVyZS9wbGFuL3Jvb3QvbjEvbG9jYWxHcmFwaC9TcGVjaWZpY3M7AQAGPGluaXQ+AQB4KExfcHVyZS9wbGFuL3Jvb3QvbjEvbG9jYWxHcmFwaC9TcGVjaWZpY3M7TF9wdXJlL3BsYW4vcm9vdC9uMS9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTBfUGVyc29uX01hcF90ZXN0X1BlcnNvbl9JbXBsOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACGdldFZhbHVlAQBOKClMX3B1cmUvcGxhbi9yb290L24xL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlMF9QZXJzb25fTWFwX3Rlc3RfUGVyc29uX0ltcGw7AQAMaW5zdGFuY2VTaXplAQADKClKAQAUKClMamF2YS9sYW5nL09iamVjdDsBAAlTaWduYXR1cmUBAKxMamF2YS9sYW5nL09iamVjdDtMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2dyYXBoRmV0Y2gvSUdyYXBoSW5zdGFuY2U8TF9wdXJlL3BsYW4vcm9vdC9uMS9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTBfUGVyc29uX01hcF90ZXN0X1BlcnNvbl9JbXBsOz47AQAKU291cmNlRmlsZQEADlNwZWNpZmljcy5qYXZhAQAPRW5jbG9zaW5nTWV0aG9kBwAoDAApACoBAAhOZXN0SG9zdAwACwAMDAAJAAoMAA0AKwcALAwALQAUDAARABIBAClfcHVyZS9wbGFuL3Jvb3QvbjEvbG9jYWxHcmFwaC9TcGVjaWZpY3MkMQEADElubmVyQ2xhc3NlcwEAEGphdmEvbGFuZy9PYmplY3QBAEpvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZ3JhcGhGZXRjaC9JR3JhcGhJbnN0YW5jZQEAJ19wdXJlL3BsYW4vcm9vdC9uMS9sb2NhbEdyYXBoL1NwZWNpZmljcwEAEW5leHRHcmFwaEluc3RhbmNlAQBOKClMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2dyYXBoRmV0Y2gvSUdyYXBoSW5zdGFuY2U7AQADKClWAQBKX3B1cmUvcGxhbi9yb290L24xL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlMF9QZXJzb25fTWFwX3Rlc3RfUGVyc29uX0ltcGwBABBnZXRJbnN0YW5jZVNpemUkACAABgAHAAEACAACEBAACQAKAAAQEAALAAwAAAAEAAAADQAOAAEADwAAACcAAgADAAAADyortQABKiy1AAIqtwADsQAAAAEAEAAAAAYAAQAAApAAAQARABIAAQAPAAAAHQABAAEAAAAFKrQAArAAAAABABAAAAAGAAEAAAKTAAEAEwAUAAEADwAAACAAAgABAAAACCq0AAK2AAStAAAAAQAQAAAABgABAAAClxBBABEAFQABAA8AAAAdAAEAAQAAAAUqtgAFsAAAAAEAEAAAAAYAAQAAApAABQAWAAAAAgAXABgAAAACABkAGgAAAAQAGwAcAB0AAAACABsAJQAAAAoAAQAGAAAAAAAA",
      "name" : "Specifics$1",
      "package" : "_pure.plan.root.n1.localGraph",
      "source" : "<<GENERATED>>"
    }, {
      "byteCode" : "yv66vgAAADcALgkABgAeCQAGAB8KAAcAIAoAIQAiCgAGACMHACQHACYHACcBAAp2YWwkb2JqZWN0AQBVTF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDAvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGUyX0Zpcm1fTWFwX3Rlc3RfRmlybV9JbXBsOwEABnRoaXMkMAEANkxfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQwL2xvY2FsR3JhcGgvU3BlY2lmaWNzOwEABjxpbml0PgEAjihMX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL1NwZWNpZmljcztMX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTJfRmlybV9NYXBfdGVzdF9GaXJtX0ltcGw7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAIZ2V0VmFsdWUBAFcoKUxfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQwL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlMl9GaXJtX01hcF90ZXN0X0Zpcm1fSW1wbDsBAAxpbnN0YW5jZVNpemUBAAMoKUoBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwEACVNpZ25hdHVyZQEAtUxqYXZhL2xhbmcvT2JqZWN0O0xvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZ3JhcGhGZXRjaC9JR3JhcGhJbnN0YW5jZTxMX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTJfRmlybV9NYXBfdGVzdF9GaXJtX0ltcGw7PjsBAApTb3VyY2VGaWxlAQAOU3BlY2lmaWNzLmphdmEBAA9FbmNsb3NpbmdNZXRob2QHACgMACkAKgEACE5lc3RIb3N0DAALAAwMAAkACgwADQArBwAsDAAtABQMABEAEgEANl9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDAvbG9jYWxHcmFwaC9TcGVjaWZpY3MkMQEADElubmVyQ2xhc3NlcwEAEGphdmEvbGFuZy9PYmplY3QBAEpvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZ3JhcGhGZXRjaC9JR3JhcGhJbnN0YW5jZQEANF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDAvbG9jYWxHcmFwaC9TcGVjaWZpY3MBABFuZXh0R3JhcGhJbnN0YW5jZQEATigpTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9ncmFwaEZldGNoL0lHcmFwaEluc3RhbmNlOwEAAygpVgEAU19wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDAvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGUyX0Zpcm1fTWFwX3Rlc3RfRmlybV9JbXBsAQAQZ2V0SW5zdGFuY2VTaXplJAAgAAYABwABAAgAAhAQAAkACgAAEBAACwAMAAAABAAAAA0ADgABAA8AAAAnAAIAAwAAAA8qK7UAASostQACKrcAA7EAAAABABAAAAAGAAEAAAKEAAEAEQASAAEADwAAAB0AAQABAAAABSq0AAKwAAAAAQAQAAAABgABAAAChwABABMAFAABAA8AAAAgAAIAAQAAAAgqtAACtgAErQAAAAEAEAAAAAYAAQAAAosQQQARABUAAQAPAAAAHQABAAEAAAAFKrYABbAAAAABABAAAAAGAAEAAAKEAAUAFgAAAAIAFwAYAAAAAgAZABoAAAAEABsAHAAdAAAAAgAbACUAAAAKAAEABgAAAAAAAA==",
      "name" : "Specifics$1",
      "package" : "_pure.plan.root.n1.globalChild0.localGraph",
      "source" : "<<GENERATED>>"
    }, {
      "byteCode" : "yv66vgAAADcALgkABgAeCQAGAB8KAAcAIAoAIQAiCgAGACMHACQHACYHACcBAAp2YWwkb2JqZWN0AQBXTF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDAvZ2xvYmFsQ2hpbGQwL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlM19BZGRyZXNzX0ltcGw7AQAGdGhpcyQwAQBDTF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDAvZ2xvYmFsQ2hpbGQwL2xvY2FsR3JhcGgvU3BlY2lmaWNzOwEABjxpbml0PgEAnShMX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMC9nbG9iYWxDaGlsZDAvbG9jYWxHcmFwaC9TcGVjaWZpY3M7TF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDAvZ2xvYmFsQ2hpbGQwL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlM19BZGRyZXNzX0ltcGw7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAIZ2V0VmFsdWUBAFkoKUxfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQwL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTNfQWRkcmVzc19JbXBsOwEADGluc3RhbmNlU2l6ZQEAAygpSgEAFCgpTGphdmEvbGFuZy9PYmplY3Q7AQAJU2lnbmF0dXJlAQC3TGphdmEvbGFuZy9PYmplY3Q7TG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9ncmFwaEZldGNoL0lHcmFwaEluc3RhbmNlPExfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQwL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTNfQWRkcmVzc19JbXBsOz47AQAKU291cmNlRmlsZQEADlNwZWNpZmljcy5qYXZhAQAPRW5jbG9zaW5nTWV0aG9kBwAoDAApACoBAAhOZXN0SG9zdAwACwAMDAAJAAoMAA0AKwcALAwALQAUDAARABIBAENfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQwL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL1NwZWNpZmljcyQxAQAMSW5uZXJDbGFzc2VzAQAQamF2YS9sYW5nL09iamVjdAEASm9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9ncmFwaEZldGNoL0lHcmFwaEluc3RhbmNlAQBBX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMC9nbG9iYWxDaGlsZDAvbG9jYWxHcmFwaC9TcGVjaWZpY3MBABFuZXh0R3JhcGhJbnN0YW5jZQEATigpTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9ncmFwaEZldGNoL0lHcmFwaEluc3RhbmNlOwEAAygpVgEAVV9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDAvZ2xvYmFsQ2hpbGQwL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlM19BZGRyZXNzX0ltcGwBABBnZXRJbnN0YW5jZVNpemUkACAABgAHAAEACAACEBAACQAKAAAQEAALAAwAAAAEAAAADQAOAAEADwAAACcAAgADAAAADyortQABKiy1AAIqtwADsQAAAAEAEAAAAAYAAQAAAngAAQARABIAAQAPAAAAHQABAAEAAAAFKrQAArAAAAABABAAAAAGAAEAAAJ7AAEAEwAUAAEADwAAACAAAgABAAAACCq0AAK2AAStAAAAAQAQAAAABgABAAACfxBBABEAFQABAA8AAAAdAAEAAQAAAAUqtgAFsAAAAAEAEAAAAAYAAQAAAngABQAWAAAAAgAXABgAAAACABkAGgAAAAQAGwAcAB0AAAACABsAJQAAAAoAAQAGAAAAAAAA",
      "name" : "Specifics$1",
      "package" : "_pure.plan.root.n1.globalChild0.globalChild0.localGraph",
      "source" : "<<GENERATED>>"
    }, {
      "byteCode" : "yv66vgAAADcAOgoACAAZCgAFABoSAAAAHgoAHwAgBwAhCgAHACIHACMHACUBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAJc2VyaWFsaXplAQCgKExvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0ZS9QdXJlRGF0ZTtMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2NvcmUvSnNvbkdlbmVyYXRvcjtMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2RhdGFiaW5kL1NlcmlhbGl6ZXJQcm92aWRlcjspVgEACkV4Y2VwdGlvbnMHACYBAHIoTGphdmEvbGFuZy9PYmplY3Q7TGNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9jb3JlL0pzb25HZW5lcmF0b3I7TGNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9kYXRhYmluZC9TZXJpYWxpemVyUHJvdmlkZXI7KVYBAAlTaWduYXR1cmUBAHFMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2RhdGFiaW5kL0pzb25TZXJpYWxpemVyPExvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0ZS9QdXJlRGF0ZTs+OwEAClNvdXJjZUZpbGUBACJHcmFwaEZldGNoX05vZGU3X0FkZHJlc3NfSW1wbC5qYXZhAQAPRW5jbG9zaW5nTWV0aG9kBwAnAQAITmVzdEhvc3QMAAkACgwAKAApAQAQQm9vdHN0cmFwTWV0aG9kcw8GACoIACsMACwALQcALgwALwAwAQA+b3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGUvUHVyZURhdGUMAA0ADgEASl9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDEvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGU3X0FkZHJlc3NfSW1wbCQxAQAMSW5uZXJDbGFzc2VzAQAtY29tL2Zhc3RlcnhtbC9qYWNrc29uL2RhdGFiaW5kL0pzb25TZXJpYWxpemVyAQATamF2YS9pby9JT0V4Y2VwdGlvbgEASF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDEvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGU3X0FkZHJlc3NfSW1wbAEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsKADEAMgEAAyIBIgEAF21ha2VDb25jYXRXaXRoQ29uc3RhbnRzAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAChjb20vZmFzdGVyeG1sL2phY2tzb24vY29yZS9Kc29uR2VuZXJhdG9yAQANd3JpdGVSYXdWYWx1ZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgcAMwwALAA2AQAkamF2YS9sYW5nL2ludm9rZS9TdHJpbmdDb25jYXRGYWN0b3J5BwA4AQAGTG9va3VwAQCYKExqYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZXMkTG9va3VwO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvaW52b2tlL01ldGhvZFR5cGU7TGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL2ludm9rZS9DYWxsU2l0ZTsHADkBACVqYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZXMkTG9va3VwAQAeamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGVzACAABwAIAAAAAAADAAAACQAKAAEACwAAAB0AAQABAAAABSq3AAGxAAAAAQAMAAAABgABAAAAGQABAA0ADgACAAsAAAAmAAIABAAAAA4sK7YAAroAAwAAtgAEsQAAAAEADAAAAAYAAQAAABkADwAAAAQAAQAQEEEADQARAAIACwAAACMABAAEAAAACyorwAAFLC22AAaxAAAAAQAMAAAABgABAAAAGQAPAAAABAABABAABgASAAAAAgATABQAAAACABUAFgAAAAQAFwAAABgAAAACABcAJAAAABIAAgAHAAAAAAAAADQANwA1ABkAGwAAAAgAAQAcAAEAHQ==",
      "name" : "GraphFetch_Node7_Address_Impl$1",
      "package" : "_pure.plan.root.n1.globalChild1.localGraph",
      "source" : "<<GENERATED>>"
    }, {
      "byteCode" : "yv66vgAAADcALwkABgAiCQAGACMJAAYAJAoABwAlCgAGACYHACcHACkHACoBAAt2YWwkZGVmZWN0cwEAEExqYXZhL3V0aWwvTGlzdDsBAAp2YWwkc291cmNlAQASTGphdmEvbGFuZy9PYmplY3Q7AQAGdGhpcyQwAQBXTF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDAvZ2xvYmFsQ2hpbGQwL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlM19BZGRyZXNzX0ltcGw7AQAGPGluaXQ+AQB8KExfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQwL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTNfQWRkcmVzc19JbXBsO0xqYXZhL3V0aWwvTGlzdDtMamF2YS9sYW5nL09iamVjdDspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApnZXREZWZlY3RzAQASKClMamF2YS91dGlsL0xpc3Q7AQAJU2lnbmF0dXJlAQBaKClMamF2YS91dGlsL0xpc3Q8TG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JRGVmZWN0Oz47AQAJZ2V0U291cmNlAQAUKClMamF2YS9sYW5nL09iamVjdDsBAAhnZXRWYWx1ZQEAGigpTF9wdXJlL2FwcC90ZXN0L0FkZHJlc3M7AQBzTGphdmEvbGFuZy9PYmplY3Q7TG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JQ2hlY2tlZDxMX3B1cmUvYXBwL3Rlc3QvQWRkcmVzczs+OwEAClNvdXJjZUZpbGUBACJHcmFwaEZldGNoX05vZGUzX0FkZHJlc3NfSW1wbC5qYXZhAQAPRW5jbG9zaW5nTWV0aG9kBwArDAAsAC0BAAhOZXN0SG9zdAwADQAODAAJAAoMAAsADAwADwAuDAAZABoBAFdfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQwL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTNfQWRkcmVzc19JbXBsJDIBAAxJbm5lckNsYXNzZXMBABBqYXZhL2xhbmcvT2JqZWN0AQBFb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0lDaGVja2VkAQBVX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMC9nbG9iYWxDaGlsZDAvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGUzX0FkZHJlc3NfSW1wbAEACXRvQ2hlY2tlZAEAXChMamF2YS9sYW5nL09iamVjdDtaKUxvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0YVF1YWxpdHkvSUNoZWNrZWQ7AQADKClWACAABgAHAAEACAADEBAACQAKAAAQEAALAAwAABAQAA0ADgAAAAUAAAAPABAAAQARAAAALAACAAQAAAAUKiu1AAEqLLUAAiottQADKrcABLEAAAABABIAAAAGAAEAAAB6AAEAEwAUAAIAEQAAAB0AAQABAAAABSq0AAKwAAAAAQASAAAABgABAAAAewAVAAAAAgAWAAEAFwAYAAEAEQAAAB0AAQABAAAABSq0AAOwAAAAAQASAAAABgABAAAAfAABABkAGgABABEAAAAdAAEAAQAAAAUqtAABsAAAAAEAEgAAAAYAAQAAAH0QQQAZABgAAQARAAAAHQABAAEAAAAFKrYABbAAAAABABIAAAAGAAEAAAB6AAUAFQAAAAIAGwAcAAAAAgAdAB4AAAAEAB8AIAAhAAAAAgAfACgAAAAKAAEABgAAAAAAAA==",
      "name" : "GraphFetch_Node3_Address_Impl$2",
      "package" : "_pure.plan.root.n1.globalChild0.globalChild0.localGraph",
      "source" : "<<GENERATED>>"
    }, {
      "byteCode" : "yv66vgAAADcAOgoACAAZCgAFABoSAAAAHgoAHwAgBwAhCgAHACIHACMHACUBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAJc2VyaWFsaXplAQCgKExvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0ZS9QdXJlRGF0ZTtMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2NvcmUvSnNvbkdlbmVyYXRvcjtMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2RhdGFiaW5kL1NlcmlhbGl6ZXJQcm92aWRlcjspVgEACkV4Y2VwdGlvbnMHACYBAHIoTGphdmEvbGFuZy9PYmplY3Q7TGNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9jb3JlL0pzb25HZW5lcmF0b3I7TGNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9kYXRhYmluZC9TZXJpYWxpemVyUHJvdmlkZXI7KVYBAAlTaWduYXR1cmUBAHFMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2RhdGFiaW5kL0pzb25TZXJpYWxpemVyPExvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0ZS9QdXJlRGF0ZTs+OwEAClNvdXJjZUZpbGUBACJHcmFwaEZldGNoX05vZGUzX0FkZHJlc3NfSW1wbC5qYXZhAQAPRW5jbG9zaW5nTWV0aG9kBwAnAQAITmVzdEhvc3QMAAkACgwAKAApAQAQQm9vdHN0cmFwTWV0aG9kcw8GACoIACsMACwALQcALgwALwAwAQA+b3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGUvUHVyZURhdGUMAA0ADgEAV19wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDAvZ2xvYmFsQ2hpbGQwL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlM19BZGRyZXNzX0ltcGwkMQEADElubmVyQ2xhc3NlcwEALWNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9kYXRhYmluZC9Kc29uU2VyaWFsaXplcgEAE2phdmEvaW8vSU9FeGNlcHRpb24BAFVfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQwL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTNfQWRkcmVzc19JbXBsAQAIdG9TdHJpbmcBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwoAMQAyAQADIgEiAQAXbWFrZUNvbmNhdFdpdGhDb25zdGFudHMBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEAKGNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9jb3JlL0pzb25HZW5lcmF0b3IBAA13cml0ZVJhd1ZhbHVlAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWBwAzDAAsADYBACRqYXZhL2xhbmcvaW52b2tlL1N0cmluZ0NvbmNhdEZhY3RvcnkHADgBAAZMb29rdXABAJgoTGphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlcyRMb29rdXA7TGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9pbnZva2UvTWV0aG9kVHlwZTtMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvaW52b2tlL0NhbGxTaXRlOwcAOQEAJWphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlcyRMb29rdXABAB5qYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZXMAIAAHAAgAAAAAAAMAAAAJAAoAAQALAAAAHQABAAEAAAAFKrcAAbEAAAABAAwAAAAGAAEAAAAZAAEADQAOAAIACwAAACYAAgAEAAAADiwrtgACugADAAC2AASxAAAAAQAMAAAABgABAAAAGQAPAAAABAABABAQQQANABEAAgALAAAAIwAEAAQAAAALKivAAAUsLbYABrEAAAABAAwAAAAGAAEAAAAZAA8AAAAEAAEAEAAGABIAAAACABMAFAAAAAIAFQAWAAAABAAXAAAAGAAAAAIAFwAkAAAAEgACAAcAAAAAAAAANAA3ADUAGQAbAAAACAABABwAAQAd",
      "name" : "GraphFetch_Node3_Address_Impl$1",
      "package" : "_pure.plan.root.n1.globalChild0.globalChild0.localGraph",
      "source" : "<<GENERATED>>"
    }, {
      "byteCode" : "yv66vgAAADcALwkABgAiCQAGACMJAAYAJAoABwAlCgAGACYHACcHACkHACoBAAt2YWwkZGVmZWN0cwEAEExqYXZhL3V0aWwvTGlzdDsBAAp2YWwkc291cmNlAQASTGphdmEvbGFuZy9PYmplY3Q7AQAGdGhpcyQwAQBKTF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDEvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGU3X0FkZHJlc3NfSW1wbDsBAAY8aW5pdD4BAG8oTF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDEvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGU3X0FkZHJlc3NfSW1wbDtMamF2YS91dGlsL0xpc3Q7TGphdmEvbGFuZy9PYmplY3Q7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAKZ2V0RGVmZWN0cwEAEigpTGphdmEvdXRpbC9MaXN0OwEACVNpZ25hdHVyZQEAWigpTGphdmEvdXRpbC9MaXN0PExvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0YVF1YWxpdHkvSURlZmVjdDs+OwEACWdldFNvdXJjZQEAFCgpTGphdmEvbGFuZy9PYmplY3Q7AQAIZ2V0VmFsdWUBABooKUxfcHVyZS9hcHAvdGVzdC9BZGRyZXNzOwEAc0xqYXZhL2xhbmcvT2JqZWN0O0xvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0YVF1YWxpdHkvSUNoZWNrZWQ8TF9wdXJlL2FwcC90ZXN0L0FkZHJlc3M7PjsBAApTb3VyY2VGaWxlAQAiR3JhcGhGZXRjaF9Ob2RlN19BZGRyZXNzX0ltcGwuamF2YQEAD0VuY2xvc2luZ01ldGhvZAcAKwwALAAtAQAITmVzdEhvc3QMAA0ADgwACQAKDAALAAwMAA8ALgwAGQAaAQBKX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMS9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTdfQWRkcmVzc19JbXBsJDIBAAxJbm5lckNsYXNzZXMBABBqYXZhL2xhbmcvT2JqZWN0AQBFb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0lDaGVja2VkAQBIX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMS9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTdfQWRkcmVzc19JbXBsAQAJdG9DaGVja2VkAQBcKExqYXZhL2xhbmcvT2JqZWN0O1opTG9yZy9maW5vcy9sZWdlbmQvZW5naW5lL3BsYW4vZGVwZW5kZW5jaWVzL2RvbWFpbi9kYXRhUXVhbGl0eS9JQ2hlY2tlZDsBAAMoKVYAIAAGAAcAAQAIAAMQEAAJAAoAABAQAAsADAAAEBAADQAOAAAABQAAAA8AEAABABEAAAAsAAIABAAAABQqK7UAASostQACKi21AAMqtwAEsQAAAAEAEgAAAAYAAQAAAHoAAQATABQAAgARAAAAHQABAAEAAAAFKrQAArAAAAABABIAAAAGAAEAAAB7ABUAAAACABYAAQAXABgAAQARAAAAHQABAAEAAAAFKrQAA7AAAAABABIAAAAGAAEAAAB8AAEAGQAaAAEAEQAAAB0AAQABAAAABSq0AAGwAAAAAQASAAAABgABAAAAfRBBABkAGAABABEAAAAdAAEAAQAAAAUqtgAFsAAAAAEAEgAAAAYAAQAAAHoABQAVAAAAAgAbABwAAAACAB0AHgAAAAQAHwAgACEAAAACAB8AKAAAAAoAAQAGAAAAAAAA",
      "name" : "GraphFetch_Node7_Address_Impl$2",
      "package" : "_pure.plan.root.n1.globalChild1.localGraph",
      "source" : "<<GENERATED>>"
    }, {
      "byteCode" : "yv66vgAAADcALwkABgAiCQAGACMJAAYAJAoABwAlCgAGACYHACcHACkHACoBAAt2YWwkZGVmZWN0cwEAEExqYXZhL3V0aWwvTGlzdDsBAAp2YWwkc291cmNlAQASTGphdmEvbGFuZy9PYmplY3Q7AQAGdGhpcyQwAQBMTF9wdXJlL3BsYW4vcm9vdC9uMS9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTBfUGVyc29uX01hcF90ZXN0X1BlcnNvbl9JbXBsOwEABjxpbml0PgEAcShMX3B1cmUvcGxhbi9yb290L24xL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlMF9QZXJzb25fTWFwX3Rlc3RfUGVyc29uX0ltcGw7TGphdmEvdXRpbC9MaXN0O0xqYXZhL2xhbmcvT2JqZWN0OylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACmdldERlZmVjdHMBABIoKUxqYXZhL3V0aWwvTGlzdDsBAAlTaWduYXR1cmUBAFooKUxqYXZhL3V0aWwvTGlzdDxMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0lEZWZlY3Q7PjsBAAlnZXRTb3VyY2UBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwEACGdldFZhbHVlAQApKClMX3B1cmUvYXBwL3Rlc3QvUGVyc29uX01hcF90ZXN0X1BlcnNvbjsBAIJMamF2YS9sYW5nL09iamVjdDtMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0lDaGVja2VkPExfcHVyZS9hcHAvdGVzdC9QZXJzb25fTWFwX3Rlc3RfUGVyc29uOz47AQAKU291cmNlRmlsZQEAMUdyYXBoRmV0Y2hfTm9kZTBfUGVyc29uX01hcF90ZXN0X1BlcnNvbl9JbXBsLmphdmEBAA9FbmNsb3NpbmdNZXRob2QHACsMACwALQEACE5lc3RIb3N0DAANAA4MAAkACgwACwAMDAAPAC4MABkAGgEATF9wdXJlL3BsYW4vcm9vdC9uMS9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTBfUGVyc29uX01hcF90ZXN0X1BlcnNvbl9JbXBsJDIBAAxJbm5lckNsYXNzZXMBABBqYXZhL2xhbmcvT2JqZWN0AQBFb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0lDaGVja2VkAQBKX3B1cmUvcGxhbi9yb290L24xL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlMF9QZXJzb25fTWFwX3Rlc3RfUGVyc29uX0ltcGwBAAl0b0NoZWNrZWQBAFwoTGphdmEvbGFuZy9PYmplY3Q7WilMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0lDaGVja2VkOwEAAygpVgAgAAYABwABAAgAAxAQAAkACgAAEBAACwAMAAAQEAANAA4AAAAFAAAADwAQAAEAEQAAACwAAgAEAAAAFCortQABKiy1AAIqLbUAAyq3AASxAAAAAQASAAAABgABAAAAogABABMAFAACABEAAAAdAAEAAQAAAAUqtAACsAAAAAEAEgAAAAYAAQAAAKMAFQAAAAIAFgABABcAGAABABEAAAAdAAEAAQAAAAUqtAADsAAAAAEAEgAAAAYAAQAAAKQAAQAZABoAAQARAAAAHQABAAEAAAAFKrQAAbAAAAABABIAAAAGAAEAAAClEEEAGQAYAAEAEQAAAB0AAQABAAAABSq2AAWwAAAAAQASAAAABgABAAAAogAFABUAAAACABsAHAAAAAIAHQAeAAAABAAfACAAIQAAAAIAHwAoAAAACgABAAYAAAAAAAA=",
      "name" : "GraphFetch_Node0_Person_Map_test_Person_Impl$2",
      "package" : "_pure.plan.root.n1.localGraph",
      "source" : "<<GENERATED>>"
    }, {
      "byteCode" : "yv66vgAAADcAOgoACAAZCgAFABoSAAAAHgoAHwAgBwAhCgAHACIHACMHACUBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAJc2VyaWFsaXplAQCgKExvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0ZS9QdXJlRGF0ZTtMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2NvcmUvSnNvbkdlbmVyYXRvcjtMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2RhdGFiaW5kL1NlcmlhbGl6ZXJQcm92aWRlcjspVgEACkV4Y2VwdGlvbnMHACYBAHIoTGphdmEvbGFuZy9PYmplY3Q7TGNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9jb3JlL0pzb25HZW5lcmF0b3I7TGNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9kYXRhYmluZC9TZXJpYWxpemVyUHJvdmlkZXI7KVYBAAlTaWduYXR1cmUBAHFMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2RhdGFiaW5kL0pzb25TZXJpYWxpemVyPExvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0ZS9QdXJlRGF0ZTs+OwEAClNvdXJjZUZpbGUBADFHcmFwaEZldGNoX05vZGUwX1BlcnNvbl9NYXBfdGVzdF9QZXJzb25fSW1wbC5qYXZhAQAPRW5jbG9zaW5nTWV0aG9kBwAnAQAITmVzdEhvc3QMAAkACgwAKAApAQAQQm9vdHN0cmFwTWV0aG9kcw8GACoIACsMACwALQcALgwALwAwAQA+b3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGUvUHVyZURhdGUMAA0ADgEATF9wdXJlL3BsYW4vcm9vdC9uMS9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTBfUGVyc29uX01hcF90ZXN0X1BlcnNvbl9JbXBsJDEBAAxJbm5lckNsYXNzZXMBAC1jb20vZmFzdGVyeG1sL2phY2tzb24vZGF0YWJpbmQvSnNvblNlcmlhbGl6ZXIBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQBKX3B1cmUvcGxhbi9yb290L24xL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlMF9QZXJzb25fTWFwX3Rlc3RfUGVyc29uX0ltcGwBAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7CgAxADIBAAMiASIBABdtYWtlQ29uY2F0V2l0aENvbnN0YW50cwEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAoY29tL2Zhc3RlcnhtbC9qYWNrc29uL2NvcmUvSnNvbkdlbmVyYXRvcgEADXdyaXRlUmF3VmFsdWUBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYHADMMACwANgEAJGphdmEvbGFuZy9pbnZva2UvU3RyaW5nQ29uY2F0RmFjdG9yeQcAOAEABkxvb2t1cAEAmChMamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGVzJExvb2t1cDtMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL2ludm9rZS9NZXRob2RUeXBlO0xqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9pbnZva2UvQ2FsbFNpdGU7BwA5AQAlamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGVzJExvb2t1cAEAHmphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlcwAgAAcACAAAAAAAAwAAAAkACgABAAsAAAAdAAEAAQAAAAUqtwABsQAAAAEADAAAAAYAAQAAABsAAQANAA4AAgALAAAAJgACAAQAAAAOLCu2AAK6AAMAALYABLEAAAABAAwAAAAGAAEAAAAbAA8AAAAEAAEAEBBBAA0AEQACAAsAAAAjAAQABAAAAAsqK8AABSwttgAGsQAAAAEADAAAAAYAAQAAABsADwAAAAQAAQAQAAYAEgAAAAIAEwAUAAAAAgAVABYAAAAEABcAAAAYAAAAAgAXACQAAAASAAIABwAAAAAAAAA0ADcANQAZABsAAAAIAAEAHAABAB0=",
      "name" : "GraphFetch_Node0_Person_Map_test_Person_Impl$1",
      "package" : "_pure.plan.root.n1.localGraph",
      "source" : "<<GENERATED>>"
    }, {
      "byteCode" : "yv66vgAAADcAOgoACAAZCgAFABoSAAAAHgoAHwAgBwAhCgAHACIHACMHACUBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAJc2VyaWFsaXplAQCgKExvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0ZS9QdXJlRGF0ZTtMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2NvcmUvSnNvbkdlbmVyYXRvcjtMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2RhdGFiaW5kL1NlcmlhbGl6ZXJQcm92aWRlcjspVgEACkV4Y2VwdGlvbnMHACYBAHIoTGphdmEvbGFuZy9PYmplY3Q7TGNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9jb3JlL0pzb25HZW5lcmF0b3I7TGNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9kYXRhYmluZC9TZXJpYWxpemVyUHJvdmlkZXI7KVYBAAlTaWduYXR1cmUBAHFMY29tL2Zhc3RlcnhtbC9qYWNrc29uL2RhdGFiaW5kL0pzb25TZXJpYWxpemVyPExvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0ZS9QdXJlRGF0ZTs+OwEAClNvdXJjZUZpbGUBAC1HcmFwaEZldGNoX05vZGUyX0Zpcm1fTWFwX3Rlc3RfRmlybV9JbXBsLmphdmEBAA9FbmNsb3NpbmdNZXRob2QHACcBAAhOZXN0SG9zdAwACQAKDAAoACkBABBCb290c3RyYXBNZXRob2RzDwYAKggAKwwALAAtBwAuDAAvADABAD5vcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0ZS9QdXJlRGF0ZQwADQAOAQBVX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTJfRmlybV9NYXBfdGVzdF9GaXJtX0ltcGwkMQEADElubmVyQ2xhc3NlcwEALWNvbS9mYXN0ZXJ4bWwvamFja3Nvbi9kYXRhYmluZC9Kc29uU2VyaWFsaXplcgEAE2phdmEvaW8vSU9FeGNlcHRpb24BAFNfcHVyZS9wbGFuL3Jvb3QvbjEvZ2xvYmFsQ2hpbGQwL2xvY2FsR3JhcGgvR3JhcGhGZXRjaF9Ob2RlMl9GaXJtX01hcF90ZXN0X0Zpcm1fSW1wbAEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsKADEAMgEAAyIBIgEAF21ha2VDb25jYXRXaXRoQ29uc3RhbnRzAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAChjb20vZmFzdGVyeG1sL2phY2tzb24vY29yZS9Kc29uR2VuZXJhdG9yAQANd3JpdGVSYXdWYWx1ZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgcAMwwALAA2AQAkamF2YS9sYW5nL2ludm9rZS9TdHJpbmdDb25jYXRGYWN0b3J5BwA4AQAGTG9va3VwAQCYKExqYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZXMkTG9va3VwO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvaW52b2tlL01ldGhvZFR5cGU7TGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL2ludm9rZS9DYWxsU2l0ZTsHADkBACVqYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZXMkTG9va3VwAQAeamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGVzACAABwAIAAAAAAADAAAACQAKAAEACwAAAB0AAQABAAAABSq3AAGxAAAAAQAMAAAABgABAAAAGgABAA0ADgACAAsAAAAmAAIABAAAAA4sK7YAAroAAwAAtgAEsQAAAAEADAAAAAYAAQAAABoADwAAAAQAAQAQEEEADQARAAIACwAAACMABAAEAAAACyorwAAFLC22AAaxAAAAAQAMAAAABgABAAAAGgAPAAAABAABABAABgASAAAAAgATABQAAAACABUAFgAAAAQAFwAAABgAAAACABcAJAAAABIAAgAHAAAAAAAAADQANwA1ABkAGwAAAAgAAQAcAAEAHQ==",
      "name" : "GraphFetch_Node2_Firm_Map_test_Firm_Impl$1",
      "package" : "_pure.plan.root.n1.globalChild0.localGraph",
      "source" : "<<GENERATED>>"
    }, {
      "byteCode" : "yv66vgAAADcALwkABgAiCQAGACMJAAYAJAoABwAlCgAGACYHACcHACkHACoBAAt2YWwkZGVmZWN0cwEAEExqYXZhL3V0aWwvTGlzdDsBAAp2YWwkc291cmNlAQASTGphdmEvbGFuZy9PYmplY3Q7AQAGdGhpcyQwAQBVTF9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDAvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGUyX0Zpcm1fTWFwX3Rlc3RfRmlybV9JbXBsOwEABjxpbml0PgEAeihMX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTJfRmlybV9NYXBfdGVzdF9GaXJtX0ltcGw7TGphdmEvdXRpbC9MaXN0O0xqYXZhL2xhbmcvT2JqZWN0OylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACmdldERlZmVjdHMBABIoKUxqYXZhL3V0aWwvTGlzdDsBAAlTaWduYXR1cmUBAFooKUxqYXZhL3V0aWwvTGlzdDxMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0lEZWZlY3Q7PjsBAAlnZXRTb3VyY2UBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwEACGdldFZhbHVlAQAlKClMX3B1cmUvYXBwL3Rlc3QvRmlybV9NYXBfdGVzdF9GaXJtOwEAfkxqYXZhL2xhbmcvT2JqZWN0O0xvcmcvZmlub3MvbGVnZW5kL2VuZ2luZS9wbGFuL2RlcGVuZGVuY2llcy9kb21haW4vZGF0YVF1YWxpdHkvSUNoZWNrZWQ8TF9wdXJlL2FwcC90ZXN0L0Zpcm1fTWFwX3Rlc3RfRmlybTs+OwEAClNvdXJjZUZpbGUBAC1HcmFwaEZldGNoX05vZGUyX0Zpcm1fTWFwX3Rlc3RfRmlybV9JbXBsLmphdmEBAA9FbmNsb3NpbmdNZXRob2QHACsMACwALQEACE5lc3RIb3N0DAANAA4MAAkACgwACwAMDAAPAC4MABkAGgEAVV9wdXJlL3BsYW4vcm9vdC9uMS9nbG9iYWxDaGlsZDAvbG9jYWxHcmFwaC9HcmFwaEZldGNoX05vZGUyX0Zpcm1fTWFwX3Rlc3RfRmlybV9JbXBsJDIBAAxJbm5lckNsYXNzZXMBABBqYXZhL2xhbmcvT2JqZWN0AQBFb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0lDaGVja2VkAQBTX3B1cmUvcGxhbi9yb290L24xL2dsb2JhbENoaWxkMC9sb2NhbEdyYXBoL0dyYXBoRmV0Y2hfTm9kZTJfRmlybV9NYXBfdGVzdF9GaXJtX0ltcGwBAAl0b0NoZWNrZWQBAFwoTGphdmEvbGFuZy9PYmplY3Q7WilMb3JnL2Zpbm9zL2xlZ2VuZC9lbmdpbmUvcGxhbi9kZXBlbmRlbmNpZXMvZG9tYWluL2RhdGFRdWFsaXR5L0lDaGVja2VkOwEAAygpVgAgAAYABwABAAgAAxAQAAkACgAAEBAACwAMAAAQEAANAA4AAAAFAAAADwAQAAEAEQAAACwAAgAEAAAAFCortQABKiy1AAIqLbUAAyq3AASxAAAAAQASAAAABgABAAAAkAABABMAFAACABEAAAAdAAEAAQAAAAUqtAACsAAAAAEAEgAAAAYAAQAAAJEAFQAAAAIAFgABABcAGAABABEAAAAdAAEAAQAAAAUqtAADsAAAAAEAEgAAAAYAAQAAAJIAAQAZABoAAQARAAAAHQABAAEAAAAFKrQAAbAAAAABABIAAAAGAAEAAACTEEEAGQAYAAEAEQAAAB0AAQABAAAABSq2AAWwAAAAAQASAAAABgABAAAAkAAFABUAAAACABsAHAAAAAIAHQAeAAAABAAfACAAIQAAAAIAHwAoAAAACgABAAYAAAAAAAA=",
      "name" : "GraphFetch_Node2_Firm_Map_test_Firm_Impl$2",
      "package" : "_pure.plan.root.n1.globalChild0.localGraph",
      "source" : "<<GENERATED>>"
    } ]
  },
  "rootExecutionNode" : {
    "_type" : "platform",
    "authDependent" : false,
    "executionNodes" : [ {
      "_type" : "storeMappingGlobalGraphFetchExecutionNode",
      "authDependent" : false,
      "checked" : false,
      "children" : [ {
        "_type" : "storeMappingGlobalGraphFetchExecutionNode",
        "authDependent" : false,
        "children" : [ {
          "_type" : "storeMappingGlobalGraphFetchExecutionNode",
          "authDependent" : false,
          "dependencyIndices" : [ 6 ],
          "executionNodes" : [ ],
          "graphFetchTree" : {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "address",
            "subTrees" : [ {
              "_type" : "propertyGraphFetchTree",
              "_type" : "propertyGraphFetchTree",
              "parameters" : [ ],
              "property" : "name",
              "subTrees" : [ ]
            } ]
          },
          "localGraphFetchExecutionNode" : {
            "_type" : "relationalCrossRootQueryTempTableGraphFetch",
            "authDependent" : false,
            "columns" : [ {
              "dataType" : "VARCHAR(100)",
              "label" : "pk_0"
            } ],
            "executionNodes" : [ {
              "_type" : "sql",
              "authDependent" : false,
              "connection" : {
                "_type" : "RelationalDatabaseConnection",
                "authenticationStrategy" : {
                  "_type" : "h2Default"
                },
                "datasourceSpecification" : {
                  "_type" : "h2Local",
                  "testDataSetupCsv" : "default\naddressTable\nname\nA1\nA2\nA3\nA4\nA5\n---",
                  "testDataSetupSqls" : [ "Drop schema if exists default cascade;", "Create Schema default;", "Drop table if exists addressTable;", "Create Table addressTable(name VARCHAR(100) NOT NULL, PRIMARY KEY(name));", "insert into addressTable (name) values ('A1');", "insert into addressTable (name) values ('A2');", "insert into addressTable (name) values ('A3');", "insert into addressTable (name) values ('A4');", "insert into addressTable (name) values ('A5');" ]
                },
                "element" : "test::DB3",
                "postProcessorWithParameter" : [ ],
                "postProcessors" : [ ],
                "type" : "H2"
              },
              "executionNodes" : [ ],
              "resultColumns" : [ {
                "dataType" : "BIT",
                "label" : "\"cross_join_op$\""
              }, {
                "dataType" : "VARCHAR(100)",
                "label" : "\"pk_0\""
              }, {
                "dataType" : "VARCHAR(100)",
                "label" : "\"name\""
              }, {
                "dataType" : "VARCHAR(4000)",
                "label" : "\"parent_cross_key_0\""
              } ],
              "resultType" : {
                "_type" : "dataType",
                "dataType" : "meta::pure::metamodel::type::Any"
              },
              "sqlQuery" : "select distinct \"cross_temp_table_node_2_0\".addressName = \"root\".name as \"cross_join_op$\", \"root\".name as \"pk_0\", \"root\".name as \"name\", \"cross_temp_table_node_2_0\".addressName as \"parent_cross_key_0\" from (select * from (${cross_temp_table_node_2}) as \"root\") as \"cross_temp_table_node_2_0\" inner join addressTable as \"root\" on (1 = 1) where \"cross_temp_table_node_2_0\".addressName = \"root\".name"
            } ],
            "graphFetchTree" : {
              "_type" : "propertyGraphFetchTree",
              "_type" : "propertyGraphFetchTree",
              "parameters" : [ ],
              "property" : "address",
              "subTrees" : [ {
                "_type" : "propertyGraphFetchTree",
                "_type" : "propertyGraphFetchTree",
                "parameters" : [ ],
                "property" : "name",
                "subTrees" : [ ]
              } ]
            },
            "implementation" : {
              "_type" : "java",
              "executionClassFullName" : "_pure.plan.root.n1.globalChild0.globalChild0.localGraph.Execute"
            },
            "nodeIndex" : 3,
            "parentIndex" : 2,
            "parentTempTableColumns" : [ {
              "dataType" : "VARCHAR(4000)",
              "label" : "addressName"
            } ],
            "parentTempTableName" : "cross_temp_table_node_2",
            "resultType" : {
              "_type" : "partialClass",
              "class" : "test::Address",
              "propertiesWithParameters" : [ {
                "property" : "name"
              } ],
              "setImplementations" : [ {
                "class" : "test::Address",
                "id" : "test_Address",
                "mapping" : "test::Map",
                "propertyMappings" : [ {
                  "enumMapping" : { },
                  "property" : "name",
                  "type" : "String"
                } ]
              } ]
            },
            "tempTableName" : "temp_table_node_3"
          },
          "localTreeIndices" : [ 3, 4 ],
          "parentIndex" : 2,
          "resultType" : {
            "_type" : "partialClass",
            "class" : "test::Address",
            "propertiesWithParameters" : [ {
              "property" : "name"
            } ],
            "setImplementations" : [ {
              "class" : "test::Address",
              "id" : "test_Address",
              "mapping" : "test::Map",
              "propertyMappings" : [ {
                "enumMapping" : { },
                "property" : "name",
                "type" : "String"
              } ]
            } ]
          },
          "store" : "test::DB3",
          "xStorePropertyFetchDetails" : {
            "propertyPath" : "root.firm.address",
            "sourceMappingId" : "test::Map",
            "sourceSetId" : "test_Firm",
            "subTree" : "{@(test_Address->)@ [ / name]}",
            "supportsCaching" : true,
            "targetMappingId" : "test::Map",
            "targetPropertiesOrdered" : [ "name" ],
            "targetSetId" : "test_Address"
          },
          "xStorePropertyMapping" : {
            "_type" : "xStorePropertyMapping",
            "crossExpression" : {
              "_type" : "lambda",
              "body" : [ {
                "_type" : "func",
                "fControl" : "equal_Any_MANY__Any_MANY__Boolean_1_",
                "function" : "equal",
                "parameters" : [ {
                  "_type" : "property",
                  "parameters" : [ {
                    "_type" : "var",
                    "name" : "this"
                  } ],
                  "property" : "addressName"
                }, {
                  "_type" : "property",
                  "parameters" : [ {
                    "_type" : "var",
                    "name" : "that"
                  } ],
                  "property" : "name"
                } ]
              } ],
              "parameters" : [ {
                "_type" : "var",
                "name" : "this"
              }, {
                "_type" : "var",
                "class" : "test::Address",
                "multiplicity" : {
                  "lowerBound" : 1,
                  "upperBound" : 1
                },
                "name" : "that"
              } ]
            },
            "property" : {
              "class" : "test::Firm",
              "property" : "address"
            },
            "source" : "test_Firm",
            "target" : "test_Address"
          }
        } ],
        "dependencyIndices" : [ 9 ],
        "executionNodes" : [ ],
        "graphFetchTree" : {
          "_type" : "propertyGraphFetchTree",
          "_type" : "propertyGraphFetchTree",
          "parameters" : [ ],
          "property" : "firm",
          "subTrees" : [ {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "address",
            "subTrees" : [ {
              "_type" : "propertyGraphFetchTree",
              "_type" : "propertyGraphFetchTree",
              "parameters" : [ ],
              "property" : "name",
              "subTrees" : [ ]
            } ]
          }, {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "name",
            "subTrees" : [ ]
          }, {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "addressName",
            "subTrees" : [ ]
          } ]
        },
        "localGraphFetchExecutionNode" : {
          "_type" : "relationalCrossRootQueryTempTableGraphFetch",
          "authDependent" : false,
          "columns" : [ {
            "dataType" : "VARCHAR(100)",
            "label" : "pk_0"
          } ],
          "executionNodes" : [ {
            "_type" : "sql",
            "authDependent" : false,
            "connection" : {
              "_type" : "RelationalDatabaseConnection",
              "authenticationStrategy" : {
                "_type" : "h2Default"
              },
              "datasourceSpecification" : {
                "_type" : "h2Local",
                "testDataSetupCsv" : "default\nfirmTable\nname,addressName\nF1,A4\nF2,A3\nF3,A3\nF4,null\n---",
                "testDataSetupSqls" : [ "Drop schema if exists default cascade;", "Create Schema default;", "Drop table if exists firmTable;", "Create Table firmTable(name VARCHAR(100) NOT NULL,addressName VARCHAR(100) NULL, PRIMARY KEY(name));", "insert into firmTable (name,addressName) values ('F1','A4');", "insert into firmTable (name,addressName) values ('F2','A3');", "insert into firmTable (name,addressName) values ('F3','A3');", "insert into firmTable (name,addressName) values ('F4','null');" ]
              },
              "element" : "test::DB2",
              "postProcessorWithParameter" : [ ],
              "postProcessors" : [ ],
              "type" : "H2"
            },
            "executionNodes" : [ ],
            "resultColumns" : [ {
              "dataType" : "BIT",
              "label" : "\"cross_join_op$\""
            }, {
              "dataType" : "VARCHAR(100)",
              "label" : "\"pk_0\""
            }, {
              "dataType" : "VARCHAR(100)",
              "label" : "\"addressName\""
            }, {
              "dataType" : "VARCHAR(100)",
              "label" : "\"name\""
            }, {
              "dataType" : "VARCHAR(4000)",
              "label" : "\"parent_cross_key_0\""
            } ],
            "resultType" : {
              "_type" : "dataType",
              "dataType" : "meta::pure::metamodel::type::Any"
            },
            "sqlQuery" : "select distinct \"cross_temp_table_node_0_0\".firmName = \"root\".name as \"cross_join_op$\", \"root\".name as \"pk_0\", \"root\".addressName as \"addressName\", \"root\".name as \"name\", \"cross_temp_table_node_0_0\".firmName as \"parent_cross_key_0\" from (select * from (${cross_temp_table_node_0}) as \"root\") as \"cross_temp_table_node_0_0\" inner join firmTable as \"root\" on (1 = 1) where \"cross_temp_table_node_0_0\".firmName = \"root\".name"
          } ],
          "graphFetchTree" : {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "firm",
            "subTrees" : [ {
              "_type" : "propertyGraphFetchTree",
              "_type" : "propertyGraphFetchTree",
              "parameters" : [ ],
              "property" : "name",
              "subTrees" : [ ]
            }, {
              "_type" : "propertyGraphFetchTree",
              "_type" : "propertyGraphFetchTree",
              "parameters" : [ ],
              "property" : "addressName",
              "subTrees" : [ ]
            } ]
          },
          "implementation" : {
            "_type" : "java",
            "executionClassFullName" : "_pure.plan.root.n1.globalChild0.localGraph.Execute"
          },
          "nodeIndex" : 2,
          "parentIndex" : 0,
          "parentTempTableColumns" : [ {
            "dataType" : "VARCHAR(4000)",
            "label" : "firmName"
          } ],
          "parentTempTableName" : "cross_temp_table_node_0",
          "resultType" : {
            "_type" : "partialClass",
            "class" : "test::Firm",
            "propertiesWithParameters" : [ {
              "property" : "name"
            }, {
              "property" : "addressName"
            } ],
            "setImplementations" : [ {
              "class" : "test::Firm",
              "id" : "test_Firm",
              "mapping" : "test::Map",
              "propertyMappings" : [ {
                "enumMapping" : { },
                "property" : "name",
                "type" : "String"
              } ]
            } ]
          },
          "tempTableName" : "temp_table_node_2"
        },
        "localTreeIndices" : [ 2, 5, 6 ],
        "parentIndex" : 0,
        "resultType" : {
          "_type" : "partialClass",
          "class" : "test::Firm",
          "propertiesWithParameters" : [ {
            "property" : "name"
          }, {
            "property" : "addressName"
          } ],
          "setImplementations" : [ {
            "class" : "test::Firm",
            "id" : "test_Firm",
            "mapping" : "test::Map",
            "propertyMappings" : [ {
              "enumMapping" : { },
              "property" : "name",
              "type" : "String"
            } ]
          } ]
        },
        "store" : "test::DB2",
        "xStorePropertyFetchDetails" : {
          "propertyPath" : "root.firm",
          "sourceMappingId" : "test::Map",
          "sourceSetId" : "test_Person",
          "subTree" : "{{test::DB3> @(test_Firm->test_Address)@ [test_Address / address] {@(test_Address->)@ [ / name]}},@(test_Firm->)@ [ / name],@(test_Firm->)@ [ / addressName]}",
          "supportsCaching" : true,
          "targetMappingId" : "test::Map",
          "targetPropertiesOrdered" : [ "name" ],
          "targetSetId" : "test_Firm"
        },
        "xStorePropertyMapping" : {
          "_type" : "xStorePropertyMapping",
          "crossExpression" : {
            "_type" : "lambda",
            "body" : [ {
              "_type" : "func",
              "fControl" : "equal_Any_MANY__Any_MANY__Boolean_1_",
              "function" : "equal",
              "parameters" : [ {
                "_type" : "property",
                "parameters" : [ {
                  "_type" : "var",
                  "name" : "this"
                } ],
                "property" : "firmName"
              }, {
                "_type" : "property",
                "parameters" : [ {
                  "_type" : "var",
                  "name" : "that"
                } ],
                "property" : "name"
              } ]
            } ],
            "parameters" : [ {
              "_type" : "var",
              "name" : "this"
            }, {
              "_type" : "var",
              "class" : "Firm_Map_test_Firm",
              "multiplicity" : {
                "lowerBound" : 1,
                "upperBound" : 1
              },
              "name" : "that"
            } ]
          },
          "property" : {
            "class" : "test::Person",
            "property" : "firm"
          },
          "source" : "test_Person",
          "target" : "test_Firm"
        }
      }, {
        "_type" : "storeMappingGlobalGraphFetchExecutionNode",
        "authDependent" : false,
        "dependencyIndices" : [ 10 ],
        "executionNodes" : [ ],
        "graphFetchTree" : {
          "_type" : "propertyGraphFetchTree",
          "_type" : "propertyGraphFetchTree",
          "parameters" : [ ],
          "property" : "address",
          "subTrees" : [ {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "name",
            "subTrees" : [ ]
          } ]
        },
        "localGraphFetchExecutionNode" : {
          "_type" : "relationalCrossRootQueryTempTableGraphFetch",
          "authDependent" : false,
          "columns" : [ {
            "dataType" : "VARCHAR(100)",
            "label" : "pk_0"
          } ],
          "executionNodes" : [ {
            "_type" : "sql",
            "authDependent" : false,
            "connection" : {
              "_type" : "RelationalDatabaseConnection",
              "authenticationStrategy" : {
                "_type" : "h2Default"
              },
              "datasourceSpecification" : {
                "_type" : "h2Local",
                "testDataSetupCsv" : "default\naddressTable\nname\nA1\nA2\nA3\nA4\nA5\n---",
                "testDataSetupSqls" : [ "Drop schema if exists default cascade;", "Create Schema default;", "Drop table if exists addressTable;", "Create Table addressTable(name VARCHAR(100) NOT NULL, PRIMARY KEY(name));", "insert into addressTable (name) values ('A1');", "insert into addressTable (name) values ('A2');", "insert into addressTable (name) values ('A3');", "insert into addressTable (name) values ('A4');", "insert into addressTable (name) values ('A5');" ]
              },
              "element" : "test::DB3",
              "postProcessorWithParameter" : [ ],
              "postProcessors" : [ ],
              "type" : "H2"
            },
            "executionNodes" : [ ],
            "resultColumns" : [ {
              "dataType" : "BIT",
              "label" : "\"cross_join_op$\""
            }, {
              "dataType" : "VARCHAR(100)",
              "label" : "\"pk_0\""
            }, {
              "dataType" : "VARCHAR(100)",
              "label" : "\"name\""
            }, {
              "dataType" : "VARCHAR(4000)",
              "label" : "\"parent_cross_key_0\""
            } ],
            "resultType" : {
              "_type" : "dataType",
              "dataType" : "meta::pure::metamodel::type::Any"
            },
            "sqlQuery" : "select distinct \"cross_temp_table_node_0_0\".addressName = \"root\".name as \"cross_join_op$\", \"root\".name as \"pk_0\", \"root\".name as \"name\", \"cross_temp_table_node_0_0\".addressName as \"parent_cross_key_0\" from (select * from (${cross_temp_table_node_0}) as \"root\") as \"cross_temp_table_node_0_0\" inner join addressTable as \"root\" on (1 = 1) where \"cross_temp_table_node_0_0\".addressName = \"root\".name"
          } ],
          "graphFetchTree" : {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "address",
            "subTrees" : [ {
              "_type" : "propertyGraphFetchTree",
              "_type" : "propertyGraphFetchTree",
              "parameters" : [ ],
              "property" : "name",
              "subTrees" : [ ]
            } ]
          },
          "implementation" : {
            "_type" : "java",
            "executionClassFullName" : "_pure.plan.root.n1.globalChild1.localGraph.Execute"
          },
          "nodeIndex" : 7,
          "parentIndex" : 0,
          "parentTempTableColumns" : [ {
            "dataType" : "VARCHAR(4000)",
            "label" : "addressName"
          } ],
          "parentTempTableName" : "cross_temp_table_node_0",
          "resultType" : {
            "_type" : "partialClass",
            "class" : "test::Address",
            "propertiesWithParameters" : [ {
              "property" : "name"
            } ],
            "setImplementations" : [ {
              "class" : "test::Address",
              "id" : "test_Address",
              "mapping" : "test::Map",
              "propertyMappings" : [ {
                "enumMapping" : { },
                "property" : "name",
                "type" : "String"
              } ]
            } ]
          },
          "tempTableName" : "temp_table_node_7"
        },
        "localTreeIndices" : [ 7, 8 ],
        "parentIndex" : 0,
        "resultType" : {
          "_type" : "partialClass",
          "class" : "test::Address",
          "propertiesWithParameters" : [ {
            "property" : "name"
          } ],
          "setImplementations" : [ {
            "class" : "test::Address",
            "id" : "test_Address",
            "mapping" : "test::Map",
            "propertyMappings" : [ {
              "enumMapping" : { },
              "property" : "name",
              "type" : "String"
            } ]
          } ]
        },
        "store" : "test::DB3",
        "xStorePropertyFetchDetails" : {
          "propertyPath" : "root.address",
          "sourceMappingId" : "test::Map",
          "sourceSetId" : "test_Person",
          "subTree" : "{@(test_Address->)@ [ / name]}",
          "supportsCaching" : true,
          "targetMappingId" : "test::Map",
          "targetPropertiesOrdered" : [ "name" ],
          "targetSetId" : "test_Address"
        },
        "xStorePropertyMapping" : {
          "_type" : "xStorePropertyMapping",
          "crossExpression" : {
            "_type" : "lambda",
            "body" : [ {
              "_type" : "func",
              "fControl" : "equal_Any_MANY__Any_MANY__Boolean_1_",
              "function" : "equal",
              "parameters" : [ {
                "_type" : "property",
                "parameters" : [ {
                  "_type" : "var",
                  "name" : "this"
                } ],
                "property" : "addressName"
              }, {
                "_type" : "property",
                "parameters" : [ {
                  "_type" : "var",
                  "name" : "that"
                } ],
                "property" : "name"
              } ]
            } ],
            "parameters" : [ {
              "_type" : "var",
              "name" : "this"
            }, {
              "_type" : "var",
              "class" : "test::Address",
              "multiplicity" : {
                "lowerBound" : 1,
                "upperBound" : 1
              },
              "name" : "that"
            } ]
          },
          "property" : {
            "class" : "test::Person",
            "property" : "address"
          },
          "source" : "test_Person",
          "target" : "test_Address"
        }
      } ],
      "enableConstraints" : true,
      "executionNodes" : [ ],
      "graphFetchTree" : {
        "_type" : "rootGraphFetchTree",
        "_type" : "rootGraphFetchTree",
        "class" : "test::Person",
        "subTrees" : [ {
          "_type" : "propertyGraphFetchTree",
          "_type" : "propertyGraphFetchTree",
          "parameters" : [ ],
          "property" : "fullName",
          "subTrees" : [ ]
        }, {
          "_type" : "propertyGraphFetchTree",
          "_type" : "propertyGraphFetchTree",
          "parameters" : [ ],
          "property" : "firm",
          "subTrees" : [ {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "address",
            "subTrees" : [ {
              "_type" : "propertyGraphFetchTree",
              "_type" : "propertyGraphFetchTree",
              "parameters" : [ ],
              "property" : "name",
              "subTrees" : [ ]
            } ]
          }, {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "name",
            "subTrees" : [ ]
          }, {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "addressName",
            "subTrees" : [ ]
          } ]
        }, {
          "_type" : "propertyGraphFetchTree",
          "_type" : "propertyGraphFetchTree",
          "parameters" : [ ],
          "property" : "address",
          "subTrees" : [ {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "name",
            "subTrees" : [ ]
          } ]
        }, {
          "_type" : "propertyGraphFetchTree",
          "_type" : "propertyGraphFetchTree",
          "parameters" : [ ],
          "property" : "firmName",
          "subTrees" : [ ]
        }, {
          "_type" : "propertyGraphFetchTree",
          "_type" : "propertyGraphFetchTree",
          "parameters" : [ ],
          "property" : "addressName",
          "subTrees" : [ ]
        } ]
      },
      "localGraphFetchExecutionNode" : {
        "_type" : "relationalRootQueryTempTableGraphFetch",
        "authDependent" : false,
        "batchSize" : 1,
        "checked" : false,
        "columns" : [ {
          "dataType" : "VARCHAR(100)",
          "label" : "pk_0"
        } ],
        "executionNodes" : [ {
          "_type" : "sql",
          "authDependent" : false,
          "connection" : {
            "_type" : "RelationalDatabaseConnection",
            "authenticationStrategy" : {
              "_type" : "h2Default"
            },
            "datasourceSpecification" : {
              "_type" : "h2Local",
              "testDataSetupCsv" : "default\npersonTable\nfullName,firmName,addressName\nP1,F1,A1\nP2,F2,A2\nP3,,\nP4,,A3\nP5,F1,A1\n---",
              "testDataSetupSqls" : [ "Drop schema if exists default cascade;", "Create Schema default;", "Drop table if exists personTable;", "Create Table personTable(fullName VARCHAR(100) NOT NULL,firmName VARCHAR(100) NULL,addressName VARCHAR(100) NULL, PRIMARY KEY(fullName));", "insert into personTable (fullName,firmName,addressName) values ('P1','F1','A1');", "insert into personTable (fullName,firmName,addressName) values ('P2','F2','A2');", "insert into personTable (fullName,firmName,addressName) values ('P3',null,null);", "insert into personTable (fullName,firmName,addressName) values ('P4',null,'A3');", "insert into personTable (fullName,firmName,addressName) values ('P5','F1','A1');" ]
            },
            "element" : "test::DB1",
            "postProcessorWithParameter" : [ ],
            "postProcessors" : [ ],
            "type" : "H2"
          },
          "executionNodes" : [ ],
          "resultColumns" : [ {
            "dataType" : "VARCHAR(100)",
            "label" : "\"pk_0\""
          }, {
            "dataType" : "VARCHAR(100)",
            "label" : "\"firmName\""
          }, {
            "dataType" : "VARCHAR(100)",
            "label" : "\"addressName\""
          }, {
            "dataType" : "VARCHAR(100)",
            "label" : "\"fullName\""
          } ],
          "resultType" : {
            "_type" : "dataType",
            "dataType" : "meta::pure::metamodel::type::Any"
          },
          "sqlQuery" : "select \"root\".fullName as \"pk_0\", \"root\".firmName as \"firmName\", \"root\".addressName as \"addressName\", \"root\".fullName as \"fullName\" from personTable as \"root\""
        } ],
        "graphFetchTree" : {
          "_type" : "rootGraphFetchTree",
          "_type" : "rootGraphFetchTree",
          "class" : "test::Person",
          "subTrees" : [ {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "fullName",
            "subTrees" : [ ]
          }, {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "firmName",
            "subTrees" : [ ]
          }, {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "addressName",
            "subTrees" : [ ]
          } ]
        },
        "implementation" : {
          "_type" : "java",
          "executionClassFullName" : "_pure.plan.root.n1.localGraph.Execute"
        },
        "nodeIndex" : 0,
        "resultType" : {
          "_type" : "partialClass",
          "class" : "test::Person",
          "propertiesWithParameters" : [ {
            "property" : "fullName"
          }, {
            "property" : "firmName"
          }, {
            "property" : "addressName"
          } ],
          "setImplementations" : [ {
            "class" : "test::Person",
            "id" : "test_Person",
            "mapping" : "test::Map",
            "propertyMappings" : [ {
              "enumMapping" : { },
              "property" : "fullName",
              "type" : "String"
            } ]
          } ]
        },
        "tempTableName" : "temp_table_node_0"
      },
      "localTreeIndices" : [ 0, 1, 9, 10 ],
      "resultSizeRange" : {
        "lowerBound" : 0
      },
      "resultType" : {
        "_type" : "partialClass",
        "class" : "test::Person",
        "propertiesWithParameters" : [ {
          "property" : "fullName"
        }, {
          "property" : "firm"
        }, {
          "property" : "address"
        }, {
          "property" : "firmName"
        }, {
          "property" : "addressName"
        } ],
        "setImplementations" : [ {
          "class" : "test::Person",
          "id" : "test_Person",
          "mapping" : "test::Map",
          "propertyMappings" : [ {
            "enumMapping" : { },
            "property" : "fullName",
            "type" : "String"
          } ]
        } ]
      },
      "store" : "test::DB1"
    } ],
    "implementation" : {
      "_type" : "java",
      "executionClassFullName" : "_pure.plan.root.Serialize"
    },
    "pure" : {
      "_type" : "func",
      "fControl" : "serialize_T_MANY__RootGraphFetchTree_1__String_1_",
      "function" : "serialize",
      "parameters" : [ {
        "_type" : "collection",
        "multiplicity" : {
          "lowerBound" : 0
        },
        "values" : [ ]
      }, {
        "_type" : "classInstance",
        "type" : "rootGraphFetchTree",
        "value" : {
          "_type" : "rootGraphFetchTree",
          "class" : "test::Person",
          "subTrees" : [ {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "fullName",
            "subTrees" : [ ]
          }, {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "firm",
            "subTrees" : [ {
              "_type" : "propertyGraphFetchTree",
              "_type" : "propertyGraphFetchTree",
              "parameters" : [ ],
              "property" : "name",
              "subTrees" : [ ]
            }, {
              "_type" : "propertyGraphFetchTree",
              "_type" : "propertyGraphFetchTree",
              "parameters" : [ ],
              "property" : "address",
              "subTrees" : [ {
                "_type" : "propertyGraphFetchTree",
                "_type" : "propertyGraphFetchTree",
                "parameters" : [ ],
                "property" : "name",
                "subTrees" : [ ]
              } ]
            } ]
          }, {
            "_type" : "propertyGraphFetchTree",
            "_type" : "propertyGraphFetchTree",
            "parameters" : [ ],
            "property" : "address",
            "subTrees" : [ {
              "_type" : "propertyGraphFetchTree",
              "_type" : "propertyGraphFetchTree",
              "parameters" : [ ],
              "property" : "name",
              "subTrees" : [ ]
            } ]
          } ]
        }
      } ]
    },
    "resultType" : {
      "_type" : "dataType",
      "dataType" : "String"
    }
  },
  "serializer" : {
    "name" : "pure",
    "version" : "vX_X_X"
  },
  "templateFunctions" : [ "<#function renderCollection collection separator prefix suffix replacementMap defaultValue><#if collection?size == 0><#return defaultValue></#if><#assign newCollection = collection><#list replacementMap as oldValue, newValue>   <#assign newCollection = collection?map(ele -> ele?replace(oldValue, newValue))></#list><#return prefix + newCollection?join(suffix + separator + prefix) + suffix></#function>", "<#function collectionSize collection> <#return collection?size?c> </#function>", "<#function optionalVarPlaceHolderOperationSelector optionalParameter trueClause falseClause><#if optionalParameter?has_content || optionalParameter?is_string><#return trueClause><#else><#return falseClause></#if></#function>", "<#function varPlaceHolderToString optionalParameter prefix suffix replacementMap defaultValue><#if optionalParameter?is_enumerable && !optionalParameter?has_content><#return defaultValue><#else><#assign newParam = optionalParameter><#list replacementMap as oldValue, newValue>   <#assign newParam = newParam?replace(oldValue, newValue)></#list><#return prefix + newParam + suffix></#if></#function>", "<#function equalEnumOperationSelector enumVal inDyna equalDyna><#assign enumList = enumVal?split(\",\")><#if enumList?size = 1><#return equalDyna><#else><#return inDyna></#if></#function>" ]
}