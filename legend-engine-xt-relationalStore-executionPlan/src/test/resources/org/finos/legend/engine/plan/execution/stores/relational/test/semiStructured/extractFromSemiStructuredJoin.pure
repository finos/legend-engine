// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class join::model::Person
{
  firstName: String[1];
  lastName: String[1];
  firm: join::model::Firm[1];
}

Class join::model::Firm
{
  ID: Integer[1];
  legalName: String[1];
  otherNames: String[1];
}

###Relational
Database join::store::H2DB
(
  Schema PERSON_SCHEMA
  (
    Table PERSON_TABLE
    (
      ID INTEGER PRIMARY KEY,
      FIRSTNAME VARCHAR(100),
      LASTNAME VARCHAR(100),
      FIRM VARCHAR(1000)
    )
  )
  Schema FIRM_SCHEMA
  (
    Table FIRM_TABLE
    (
      FIRM_DETAILS VARCHAR(1000) PRIMARY KEY
    )
  )
  Join FirmPerson(extractFromSemiStructured(PERSON_SCHEMA.PERSON_TABLE.FIRM, 'ID', 'INTEGER') = extractFromSemiStructured(FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'ID', 'INTEGER'))
)

Database join::store::SnowflakeDB
(
  Schema PERSON_SCHEMA
  (
    Table PERSON_TABLE
    (
      ID INTEGER PRIMARY KEY,
      FIRSTNAME VARCHAR(100),
      LASTNAME VARCHAR(100),
      FIRM SEMISTRUCTURED
    )
  )
  Schema FIRM_SCHEMA
  (
    Table FIRM_TABLE
    (
      FIRM_DETAILS SEMISTRUCTURED PRIMARY KEY
    )
  )
  Join FirmPerson(extractFromSemiStructured(PERSON_SCHEMA.PERSON_TABLE.FIRM, 'ID', 'INTEGER') = extractFromSemiStructured(FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'ID', 'INTEGER'))
)

Database join::store::MemSQLDB
(
  Schema PERSON_SCHEMA
  (
    Table PERSON_TABLE
    (
      ID INTEGER PRIMARY KEY,
      FIRSTNAME VARCHAR(100),
      LASTNAME VARCHAR(100),
      FIRM JSON
    )
  )
  Schema FIRM_SCHEMA
  (
    Table FIRM_TABLE
    (
      FIRM_DETAILS JSON PRIMARY KEY
    )
  )
  Join FirmPerson(extractFromSemiStructured(PERSON_SCHEMA.PERSON_TABLE.FIRM, 'ID', 'INTEGER') = extractFromSemiStructured(FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'ID', 'INTEGER'))
)

###ExternalFormat
Binding join::store::FirmBinding
{
  contentType: 'application/json';
  modelIncludes: [
    join::model::Firm
  ];
}

###Mapping
Mapping join::mapping::SnowflakeMapping
(
  *join::model::Person: Relational
  {
    ~primaryKey
    (
      [join::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE.ID
    )
    ~mainTable [join::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE
    firstName: [join::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE.FIRSTNAME,
    lastName: [join::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE.LASTNAME,
    firm: Binding join::store::FirmBinding : [join::store::SnowflakeDB]@FirmPerson | [join::store::SnowflakeDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS
  }
)

Mapping join::mapping::MemSQLMapping
(
  *join::model::Person: Relational
  {
    ~primaryKey
    (
      [join::store::MemSQLDB]PERSON_SCHEMA.PERSON_TABLE.ID
    )
    ~mainTable [join::store::MemSQLDB]PERSON_SCHEMA.PERSON_TABLE
    firstName: [join::store::MemSQLDB]PERSON_SCHEMA.PERSON_TABLE.FIRSTNAME,
    lastName: [join::store::MemSQLDB]PERSON_SCHEMA.PERSON_TABLE.LASTNAME,
    firm: Binding join::store::FirmBinding : [join::store::MemSQLDB]@FirmPerson | [join::store::MemSQLDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS
  }
)

Mapping join::mapping::H2Mapping
(
  *join::model::Person: Relational
  {
    ~primaryKey
    (
      [join::store::H2DB]PERSON_SCHEMA.PERSON_TABLE.ID
    )
    ~mainTable [join::store::H2DB]PERSON_SCHEMA.PERSON_TABLE
    firstName: [join::store::H2DB]PERSON_SCHEMA.PERSON_TABLE.FIRSTNAME,
    lastName: [join::store::H2DB]PERSON_SCHEMA.PERSON_TABLE.LASTNAME,
    firm: Binding join::store::FirmBinding : [join::store::H2DB]@FirmPerson | [join::store::H2DB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS

  }
)

###Runtime
Runtime join::runtime::SnowflakeRuntime
{
    mappings :
    [
        join::mapping::SnowflakeMapping
    ];
    connections :
    [
        join::store::SnowflakeDB :
        [
            connection_1 : #{
                RelationalDatabaseConnection {
                    store: join::store::SnowflakeDB;
                    type: Snowflake;
                    specification: Snowflake
                    {
                        name: 'dbName';
                        account: 'account';
                        warehouse: 'warehouse';
                        region: 'region';
                    };
                    auth: DefaultH2;
                }
            }#
        ]
    ];
}
Runtime join::runtime::MemSQLRuntime
{
    mappings :
    [
        join::mapping::MemSQLMapping
    ];
    connections :
    [
        join::store::MemSQLDB :
        [
            connection_1 : #{
                RelationalDatabaseConnection {
                    store: join::store::MemSQLDB;
                    type: MemSQL;
                    specification: LocalH2{};
                    auth: DefaultH2;
                }
            }#
        ]
    ];
}


Runtime join::runtime::H2Runtime
{
  mappings:
  [
    join::mapping::H2Mapping
  ];
  connections:
  [
    join::store::H2DB:
    [
      connection_1:
      #{
        RelationalDatabaseConnection
        {
          store: join::store::H2DB;
          type: H2;
          quoteIdentifiers: false;
          specification: LocalH2
          {
            testDataSetupSqls: [
                'DROP SCHEMA IF EXISTS PERSON_SCHEMA CASCADE;',
                'CREATE SCHEMA PERSON_SCHEMA;',
                'CREATE TABLE PERSON_SCHEMA.PERSON_TABLE(ID INT PRIMARY KEY, FIRSTNAME VARCHAR(100), LASTNAME VARCHAR(100), FIRM VARCHAR(100));',
                'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM) VALUES (1,\'Peter\',\'Smith\',\'{"ID": 1}\');',
                'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM) VALUES (2,\'John\',\'Johnson\',\'{"ID": 1}\');',
                'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM) VALUES (3,\'John\',\'Hill\',\'{"ID": 1}\');',
                'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM) VALUES (4,\'Anthony\',\'Allen\',\'{"ID": 1}\');',
                'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM) VALUES (5,\'Fabrice\',\'Roberts\',\'{"ID": 2}\');',
                'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM) VALUES (6,\'Oliver\',\'Hill\',\'{"ID": 3}\');',
                'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM) VALUES (7,\'David\',\'Harris\',\'{"ID": 3}\');',
                'DROP SCHEMA IF EXISTS FIRM_SCHEMA CASCADE;',
                'CREATE SCHEMA FIRM_SCHEMA;',
                'CREATE TABLE FIRM_SCHEMA.FIRM_TABLE(FIRM_DETAILS VARCHAR(1000) PRIMARY KEY);',
                'INSERT INTO FIRM_SCHEMA.FIRM_TABLE(FIRM_DETAILS) VALUES(\'{"ID": 1, "legalName": "Firm X", "employeeCount": 4, "mnc": true, "dates": {"estDate": "2010-03-04", "lastUpdate": "2022-01-16T01:00:00"}, "entity": {"entityType":"O"}, "otherNames": ["O1", "O2"], "address": {"name": "A1", "street": "S1", "lines": [{"details": "D1"}, {"details": "D2"}, {"details": "D3"}]}}\');',
                'INSERT INTO FIRM_SCHEMA.FIRM_TABLE(FIRM_DETAILS) VALUES(\'{"ID": 2, "legalName": "Firm A", "employeeCount": 1, "mnc": false, "dates": {"estDate": "2012-11-13", "lastUpdate": "2022-02-14T03:00:00"}, "entity": {"entityType":"O"}, "otherNames": ["O3", "O4"], "address": {"name": "A2", "lines": [{"details": "D4"}, {"details": "D5"}]}}\' );',
                'INSERT INTO FIRM_SCHEMA.FIRM_TABLE(FIRM_DETAILS) VALUES(\'{"ID": 3, "legalName": "Firm B", "employeeCount": 2, "mnc": true, "dates": {"estDate": "2017-7-7", "lastUpdate": "2022-9-01T06:00:00"}, "entity": {"entityType":"C"}, "otherNames": ["O5", "O6"], "address": {"name": "A3", "lines": [{"details": "D5"},{"details": "D6"}]}}\');'
              ];
          };
          auth: DefaultH2;
        }
      }#
    ]
  ];
}

###Pure
function join::testJoinOnSemiStructuredProperty():TabularDataSet[1]
{
    join::model::Person.all()->project(
      [
        x|$x.firstName,
        x|$x.lastName,
        x|$x.firm.legalName
      ],
      [
        'First Name',
        'Last Name',
        'Firm/Legal Name'
      ]
    );
}