// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class parseJson::model::Firm
{
  legalName: String[1];
}

Class parseJson::model::Person
{
  firstName: String[1];
  lastName: String[1];
  firm: parseJson::model::Firm[0..1];
  manager: parseJson::model::Person[0..1];
  managerFirm: parseJson::model::Firm[0..1];
  managerManagerFirm: parseJson::model::Firm[0..1];
  managerManagerFirmDup1: parseJson::model::Firm[0..1];
  managerManagerFirmDup2: parseJson::model::Firm[0..1];
}

###Relational
Database parseJson::store::SnowflakeDB
(
  Schema PERSON_SCHEMA
  (
    Table PERSON_TABLE_VARCHAR
    (
      ID INTEGER PRIMARY KEY,
      FIRSTNAME VARCHAR(100),
      LASTNAME VARCHAR(100),
      FIRM_DETAILS VARCHAR(1000),
      MANAGERID INTEGER
    )
  )

  Join manager1(PERSON_SCHEMA.PERSON_TABLE_VARCHAR.MANAGERID = {target}.ID)
  Join manager2(PERSON_SCHEMA.PERSON_TABLE_VARCHAR.MANAGERID = {target}.ID)
)


###ExternalFormat
Binding parseJson::store::FirmBinding
{
  contentType: 'application/json';
  modelIncludes: [
    parseJson::model::Firm
  ];
}

###Mapping
Mapping parseJson::mapping::SnowflakeMapping
(
  parseJson::model::Person: Relational
  {
    ~primaryKey
    (
      [parseJson::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE_VARCHAR.ID
    )
    ~mainTable [parseJson::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE_VARCHAR
    firstName: [parseJson::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE_VARCHAR.FIRSTNAME,
    lastName: [parseJson::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE_VARCHAR.LASTNAME,
    firm: Binding parseJson::store::FirmBinding : parseJson([parseJson::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE_VARCHAR.FIRM_DETAILS),
    managerFirm: Binding parseJson::store::FirmBinding : [parseJson::store::SnowflakeDB]@manager1 | parseJson([parseJson::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE_VARCHAR.FIRM_DETAILS),
    managerManagerFirm: Binding parseJson::store::FirmBinding : [parseJson::store::SnowflakeDB]@manager1 > [parseJson::store::SnowflakeDB]@manager1 | parseJson([parseJson::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE_VARCHAR.FIRM_DETAILS),
    managerManagerFirmDup1: Binding parseJson::store::FirmBinding : [parseJson::store::SnowflakeDB]@manager1 > [parseJson::store::SnowflakeDB]@manager2 | parseJson([parseJson::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE_VARCHAR.FIRM_DETAILS),
    managerManagerFirmDup2: Binding parseJson::store::FirmBinding : [parseJson::store::SnowflakeDB]@manager2 > [parseJson::store::SnowflakeDB]@manager2 | parseJson([parseJson::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE_VARCHAR.FIRM_DETAILS),
    manager[parseJson_model_Person]: [parseJson::store::SnowflakeDB]@manager1
  }
)

###Runtime
Runtime parseJson::runtime::SnowflakeRuntime
{
    mappings :
    [
        parseJson::mapping::SnowflakeMapping
    ];
    connections :
    [
        parseJson::store::SnowflakeDB :
        [
            connection_1 : #{
                RelationalDatabaseConnection {
                    store: parseJson::store::SnowflakeDB;
                    type: Snowflake;
                    specification: Snowflake
                    {
                        name: 'dbName';
                        account: 'account';
                        warehouse: 'warehouse';
                        region: 'region';
                    };
                    auth: Test;
                }
            }#
        ]
    ];
}

###Runtime
Runtime parseJson::runtime::H2Runtime
{
    mappings :
    [
        parseJson::mapping::SnowflakeMapping
    ];
    connections :
    [
        parseJson::store::SnowflakeDB :
        [
            connection_1 : #{
                RelationalDatabaseConnection {
                    store: parseJson::store::SnowflakeDB;
                    type: H2;
                    specification: LocalH2{
                        testDataSetupSqls: [
                            'DROP SCHEMA IF EXISTS PERSON_SCHEMA CASCADE;',
                            'CREATE SCHEMA PERSON_SCHEMA;',
                            'CREATE TABLE PERSON_SCHEMA.PERSON_TABLE_VARCHAR(ID INT PRIMARY KEY, FIRSTNAME VARCHAR(100), LASTNAME VARCHAR(100), FIRM_DETAILS VARCHAR(1000), MANAGERID INT);',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE_VARCHAR(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (1,\'Peter\',\'Smith\',\'{"legalName": "Firm X", "address": {"name": "A1", "lines": [{"lineno": 1, "street": "s1"}, {"lineno": 2, "city": "c1"}, {"lineno": 3, "state": "s1"}]}}\',2);',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE_VARCHAR(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (2,\'John\',\'Johnson\',\'{"legalName": "Firm X", "address": {"name": "A1", "lines": [{"lineno": 1, "street": "s1"}, {"lineno": 2, "city": "c1"}, {"lineno": 3, "state": "s1"}]}}\',4);',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE_VARCHAR(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (3,\'John\',\'Hill\',\'{"legalName": "Firm X", "address": {"name": "A1", "lines": [{"lineno": 1, "street": "s1"}, {"lineno": 2, "city": "c1"}, {"lineno": 3, "state": "s1"}]}}\',2);',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE_VARCHAR(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (4,\'Anthony\',\'Allen\',\'{"legalName": "Firm X", "address": {"name": "A1", "lines": [{"lineno": 1, "street": "s1"}, {"lineno": 2, "city": "c1"}, {"lineno": 3, "state": "s1"}]}}\',null)',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE_VARCHAR(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (5,\'Fabrice\',\'Roberts\',\'{"legalName": "Firm A", "address": {"name": "A2", "lines": [{"lineno": 1, "street": "s2"}, {"lineno": 2, "city": "c2"}]}}\',null)',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE_VARCHAR(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (6,\'Oliver\',\'Hill\',\'{"legalName": "Firm B", "address": {"name": "A3", "lines": [{"lineno": 1, "street": "s3"}]}}\',7)',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE_VARCHAR(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (7,\'David\',\'Harris\',\'{"legalName": "Firm B", "address": {"name": "A3", "lines": [{"lineno": 1, "street": "s3"}]}}\',null)',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE_VARCHAR(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (8,\'UNKNOWN\',\'UNKNOWN\',null,null)'
                        ];
                    };
                    auth: Test;
                }
            }#
        ]
    ];
}

###Pure
function parseJson::parseJsonInMapping(): TabularDataSet[1]
{
    parseJson::model::Person.all()
        ->project([
            col(x | $x.firstName, 'First Name'),
            col(x | $x.firm.legalName, 'Firm Name'),
            col(x | $x.managerFirm.legalName, 'Manager Firm Legal Name'),
            col(x | $x.managerManagerFirm.legalName, 'Manager Manager Firm Legal Name'),
            col(x | $x.managerManagerFirmDup1.legalName, 'Manager Manager Firm Legal Name Dup1'),
            col(x | $x.managerManagerFirmDup2.legalName, 'Manager Manager Firm Legal Name Dup2')
        ])
}

