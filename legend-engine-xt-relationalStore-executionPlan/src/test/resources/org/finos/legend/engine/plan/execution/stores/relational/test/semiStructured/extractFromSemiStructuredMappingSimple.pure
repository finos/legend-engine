// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class simple::model::Firm
{
  ID: Integer[1];
  legalName: String[1];
  employeeCount: Integer[1];
  mnc: Boolean[1];
  estDate: StrictDate[1];
  lastUpdate: DateTime[1];
  entityType: simple::model::EntityType[1];
  secondLineOfAddress: String[0..1];
}

Enum simple::model::EntityType
{
  Organization,
  Company
}

###Relational
Database simple::store::H2DB
(
  Schema FIRM_SCHEMA
  (
    Table FIRM_TABLE
    (
      ID INTEGER PRIMARY KEY,
      FIRM_DETAILS VARCHAR(1000)
    )
  )
)

Database simple::store::SnowflakeDB
(
  Schema FIRM_SCHEMA
  (
    Table FIRM_TABLE
    (
      ID INTEGER PRIMARY KEY,
      FIRM_DETAILS SEMISTRUCTURED
    )
  )
)

Database simple::store::MemSQLDB
(
  Schema FIRM_SCHEMA
  (
    Table FIRM_TABLE
    (
      ID INTEGER PRIMARY KEY,
      FIRM_DETAILS JSON
    )
  )
)

###Mapping
Mapping simple::mapping::SnowflakeMapping
(
  *simple::model::Firm: Relational
  {
    ~primaryKey
    (
      [simple::store::SnowflakeDB]FIRM_SCHEMA.FIRM_TABLE.ID
    )
    ~mainTable [simple::store::SnowflakeDB]FIRM_SCHEMA.FIRM_TABLE
    ID: [simple::store::SnowflakeDB]FIRM_SCHEMA.FIRM_TABLE.ID,
    legalName: extractFromSemiStructured([simple::store::SnowflakeDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'legalName', 'VARCHAR'),
    employeeCount: extractFromSemiStructured([simple::store::SnowflakeDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'employeeCount', 'INTEGER'),
    mnc: extractFromSemiStructured([simple::store::SnowflakeDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'mnc', 'BOOLEAN'),
    estDate: extractFromSemiStructured([simple::store::SnowflakeDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'dates.estDate', 'DATE'),
    lastUpdate: extractFromSemiStructured([simple::store::SnowflakeDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, '["dates"]["last Update"]', 'TIMESTAMP'),
    entityType: EnumerationMapping simple_model_EntityType: extractFromSemiStructured([simple::store::SnowflakeDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'entity.entityType', 'VARCHAR'),
    secondLineOfAddress: extractFromSemiStructured([simple::store::SnowflakeDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'address.lines[1]["details"]', 'VARCHAR')
  }

  simple::model::EntityType: EnumerationMapping
  {
    Organization: ['O'],
    Company: ['P']
  }
)

Mapping simple::mapping::MemSQLMapping
(
  *simple::model::Firm: Relational
  {
    ~primaryKey
    (
      [simple::store::MemSQLDB]FIRM_SCHEMA.FIRM_TABLE.ID
    )
    ~mainTable [simple::store::MemSQLDB]FIRM_SCHEMA.FIRM_TABLE
    ID: [simple::store::MemSQLDB]FIRM_SCHEMA.FIRM_TABLE.ID,
    legalName: extractFromSemiStructured([simple::store::MemSQLDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'legalName', 'VARCHAR'),
    employeeCount: extractFromSemiStructured([simple::store::MemSQLDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'employeeCount', 'INTEGER'),
    mnc: extractFromSemiStructured([simple::store::MemSQLDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'mnc', 'BOOLEAN'),
    estDate: extractFromSemiStructured([simple::store::MemSQLDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'dates.estDate', 'DATE'),
    lastUpdate: extractFromSemiStructured([simple::store::MemSQLDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, '["dates"]["last Update"]', 'TIMESTAMP'),
    entityType: EnumerationMapping simple_model_EntityType: extractFromSemiStructured([simple::store::MemSQLDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'entity.entityType', 'VARCHAR'),
    secondLineOfAddress: extractFromSemiStructured([simple::store::MemSQLDB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'address.lines[1]["details"]', 'VARCHAR')
  }

  simple::model::EntityType: EnumerationMapping
  {
    Organization: ['O'],
    Company: ['P']
  }
)

Mapping simple::mapping::H2Mapping
(
  *simple::model::Firm: Relational
  {
    ~primaryKey
    (
      [simple::store::H2DB]FIRM_SCHEMA.FIRM_TABLE.ID
    )
    ~mainTable [simple::store::H2DB]FIRM_SCHEMA.FIRM_TABLE
    ID: [simple::store::H2DB]FIRM_SCHEMA.FIRM_TABLE.ID,
    legalName: extractFromSemiStructured([simple::store::H2DB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'legalName', 'VARCHAR'),
    employeeCount: extractFromSemiStructured([simple::store::H2DB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'employeeCount', 'INTEGER'),
    mnc: extractFromSemiStructured([simple::store::H2DB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'mnc', 'BOOLEAN'),
    estDate: extractFromSemiStructured([simple::store::H2DB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'dates.estDate', 'DATE'),
    lastUpdate: extractFromSemiStructured([simple::store::H2DB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, '["dates"]["last Update"]', 'TIMESTAMP'),
    entityType: EnumerationMapping simple_model_EntityType: extractFromSemiStructured([simple::store::H2DB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'entity.entityType', 'VARCHAR'),
    secondLineOfAddress: extractFromSemiStructured([simple::store::H2DB]FIRM_SCHEMA.FIRM_TABLE.FIRM_DETAILS, 'address.lines[1]["details"]', 'VARCHAR')
  }

  simple::model::EntityType: EnumerationMapping
  {
    Organization: ['O'],
    Company: ['C']
  }
)

###Runtime
Runtime simple::runtime::SnowflakeRuntime
{
    mappings :
    [
        simple::mapping::SnowflakeMapping
    ];
    connections :
    [
        simple::store::SnowflakeDB :
        [
            connection_1 : #{
                RelationalDatabaseConnection {
                    store: simple::store::SnowflakeDB;
                    type: Snowflake;
                    specification: Snowflake
                    {
                        name: 'dbName';
                        account: 'account';
                        warehouse: 'warehouse';
                        region: 'region';
                    };
                    auth: DefaultH2;
                }
            }#
        ]
    ];
}

Runtime simple::runtime::MemSQLRuntime
{
    mappings :
    [
        simple::mapping::MemSQLMapping
    ];
    connections :
    [
        simple::store::MemSQLDB :
        [
            connection_1 : #{
                RelationalDatabaseConnection {
                    store: simple::store::MemSQLDB;
                    type: MemSQL;
                    specification: LocalH2{};
                    auth: DefaultH2;
                }
            }#
        ]
    ];
}

Runtime simple::runtime::H2Runtime
{
  mappings:
  [
    simple::mapping::H2Mapping
  ];
  connections:
  [
    simple::store::H2DB:
    [
      connection_1:
      #{
        RelationalDatabaseConnection
        {
          store: simple::store::H2DB;
          type: H2;
          quoteIdentifiers: false;
          specification: LocalH2
          {
            testDataSetupSqls: [
              'DROP SCHEMA IF EXISTS FIRM_SCHEMA CASCADE;',
              'CREATE SCHEMA FIRM_SCHEMA;',
              'CREATE TABLE FIRM_SCHEMA.FIRM_TABLE(ID INT PRIMARY KEY, FIRM_DETAILS VARCHAR(1000));',
              'INSERT INTO FIRM_SCHEMA.FIRM_TABLE(ID, FIRM_DETAILS) VALUES(1, \'{"legalName": "Firm X", "employeeCount": 4, "mnc": true, "dates": {"estDate": "2010-03-04", "last Update": "2022-01-16T01:00:00"}, "entity": {"entityType":"O"}, "otherNames": ["O1", "O2"], "address": {"name": "A1", "street": "S1", "lines": [{"details": "D1"}, {"details": "D2"}, {"details": "D3"}]}}\');',
              'INSERT INTO FIRM_SCHEMA.FIRM_TABLE(ID, FIRM_DETAILS) VALUES(2, \'{"legalName": "Firm A", "employeeCount": 1, "mnc": false, "dates": {"estDate": "2012-11-13", "last Update": "2022-02-14T03:00:00"}, "entity": {"entityType":"O"}, "otherNames": ["O3", "O4"], "address": {"name": "A2", "lines": [{"details": "D4"}, {"details": "D5"}]}}\' );',
              'INSERT INTO FIRM_SCHEMA.FIRM_TABLE(ID, FIRM_DETAILS) VALUES(3, \'{"legalName": "Firm B", "employeeCount": 2, "mnc": true, "dates": {"estDate": "2017-7-7", "last Update": "2022-9-01T06:00:00"}, "entity": {"entityType":"C"}, "otherNames": ["O5", "O6"], "address": {"name": "A3", "lines": [{"details": "D5"},{"details": "D6"}]}}\');'
              ];
          };
          auth: DefaultH2;
        }
      }#
    ]
  ];
}

###Pure
function simple::dotAndBracketNotationAccess():TabularDataSet[1]
{
    simple::model::Firm.all()->project([x|$x.ID, x|$x.estDate, x|$x.lastUpdate, x|$x.secondLineOfAddress], ['Id', 'Dot Only', 'Bracket Only', 'Dot & Bracket']);
}

function simple::arrayElementNoFlattenAccess():TabularDataSet[1]
{
    simple::model::Firm.all()->project([x|$x.ID, x|$x.secondLineOfAddress], ['Id', 'Second Line of Address']);
}

function simple::extractEnumProperty():TabularDataSet[1]
{
    simple::model::Firm.all()->project([x|$x.ID, x|$x.entityType], ['Id', 'Entity Type']);
}

function simple::allDataTypesAccess():TabularDataSet[1]
{
    simple::model::Firm.all()->project([x|$x.ID, x|$x.legalName, x|$x.estDate, x|$x.mnc, x|$x.employeeCount, x|$x.lastUpdate], ['Id', 'Legal Name', 'Est Date', 'Mnc', 'Employee Count', 'Last Update']);
}
