// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class simple::model::Address
{
  name: String[1];
  lines: simple::model::AddressLine[*];
  street: String[0..1];
}

Class simple::model::AddressLine
{
  details: String[1];
}

Class simple::model::Person
{
  firstName: String[1];
  lastName: String[1];
  firm: simple::model::Firm[1];
  manager: simple::model::Person[0..1];
}

Class simple::model::Firm
{
  legalName: String[1];
  address: simple::model::Address[1];
  employeeCount: Integer[1];
  mnc: Boolean[1];
  estDate: StrictDate[1];
  lastUpdate: DateTime[1];
  otherNames: String[*];
  entityType: simple::model::EntityType[1];
}

Enum simple::model::EntityType
{
  Organization,
  Company
}


###Relational
Database simple::store::SnowflakeDB
(
  Schema PERSON_SCHEMA
  (
    Table PERSON_TABLE
    (
      ID INTEGER PRIMARY KEY,
      FIRSTNAME VARCHAR(100),
      LASTNAME VARCHAR(100),
      FIRM_DETAILS SEMISTRUCTURED,
      MANAGERID INTEGER
    )
  )

  Join manager(PERSON_SCHEMA.PERSON_TABLE.MANAGERID = {target}.ID)
)

Database simple::store::H2DB
(
  Schema PERSON_SCHEMA
  (
    Table PERSON_TABLE
    (
      ID INTEGER PRIMARY KEY,
      FIRSTNAME VARCHAR(100),
      LASTNAME VARCHAR(100),
      FIRM_DETAILS VARCHAR(1000),
      MANAGERID INTEGER
    )
  )

  Join manager(PERSON_SCHEMA.PERSON_TABLE.MANAGERID = {target}.ID)
)

Database simple::store::MemSQLDB
(
  Schema PERSON_SCHEMA
  (
    Table PERSON_TABLE
    (
      ID INTEGER PRIMARY KEY,
      FIRSTNAME VARCHAR(100),
      LASTNAME VARCHAR(100),
      FIRM_DETAILS JSON,
      MANAGERID INTEGER
    )
  )

  Join manager(PERSON_SCHEMA.PERSON_TABLE.MANAGERID = {target}.ID)
)


###ExternalFormat
Binding simple::store::FirmBinding
{
  contentType: 'application/json';
  modelIncludes: [
    simple::model::Firm,
    simple::model::Address,
    simple::model::AddressLine
  ];
}

###Mapping
Mapping simple::mapping::SnowflakeMapping
(
  simple::model::Person: Relational
  {
    ~primaryKey
    (
      [simple::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE.ID
    )
    ~mainTable [simple::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE
    firstName: [simple::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE.FIRSTNAME,
    lastName: [simple::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE.LASTNAME,
    firm: Binding simple::store::FirmBinding : [simple::store::SnowflakeDB]PERSON_SCHEMA.PERSON_TABLE.FIRM_DETAILS,
    manager[simple_model_Person]: [simple::store::SnowflakeDB]@manager
  }
)

Mapping simple::mapping::MemSQLMapping
(
  simple::model::Person: Relational
  {
    ~primaryKey
    (
      [simple::store::MemSQLDB]PERSON_SCHEMA.PERSON_TABLE.ID
    )
    ~mainTable [simple::store::MemSQLDB]PERSON_SCHEMA.PERSON_TABLE
    firstName: [simple::store::MemSQLDB]PERSON_SCHEMA.PERSON_TABLE.FIRSTNAME,
    lastName: [simple::store::MemSQLDB]PERSON_SCHEMA.PERSON_TABLE.LASTNAME,
    firm: Binding simple::store::FirmBinding : [simple::store::MemSQLDB]PERSON_SCHEMA.PERSON_TABLE.FIRM_DETAILS,
    manager[simple_model_Person]: [simple::store::MemSQLDB]@manager
  }
)

Mapping simple::mapping::H2Mapping
(
  simple::model::Person: Relational
  {
    ~primaryKey
    (
      [simple::store::H2DB]PERSON_SCHEMA.PERSON_TABLE.ID
    )
    ~mainTable [simple::store::H2DB]PERSON_SCHEMA.PERSON_TABLE
    firstName: [simple::store::H2DB]PERSON_SCHEMA.PERSON_TABLE.FIRSTNAME,
    lastName: [simple::store::H2DB]PERSON_SCHEMA.PERSON_TABLE.LASTNAME,
    firm: Binding simple::store::FirmBinding : [simple::store::H2DB]PERSON_SCHEMA.PERSON_TABLE.FIRM_DETAILS,
    manager[simple_model_Person]: [simple::store::H2DB]@manager
  }
)

###Runtime
Runtime simple::runtime::SnowflakeRuntime
{
    mappings :
    [
        simple::mapping::SnowflakeMapping
    ];
    connections :
    [
        simple::store::SnowflakeDB :
        [
            connection_1 : #{
                RelationalDatabaseConnection {
                    store: simple::store::SnowflakeDB;
                    type: Snowflake;
                    specification: Snowflake
                    {
                        name: 'dbName';
                        account: 'account';
                        warehouse: 'warehouse';
                        region: 'region';
                    };
                    auth: Test;
                }
            }#
        ]
    ];
}

Runtime simple::runtime::MemSQLRuntime
{
    mappings :
    [
        simple::mapping::MemSQLMapping
    ];
    connections :
    [
        simple::store::MemSQLDB :
        [
            connection_1 : #{
                RelationalDatabaseConnection {
                    store: simple::store::MemSQLDB;
                    type: MemSQL;
                    specification: LocalH2{};
                    auth: Test;
                }
            }#
        ]
    ];
}

Runtime simple::runtime::H2Runtime
{
    mappings :
    [
        simple::mapping::H2Mapping
    ];
    connections :
    [
        simple::store::H2DB :
        [
            connection_1 : #{
                RelationalDatabaseConnection {
                    store: simple::store::H2DB;
                    type: H2;
                    specification: LocalH2{
                        testDataSetupSqls: [
                            'DROP SCHEMA IF EXISTS PERSON_SCHEMA CASCADE;',
                            'CREATE SCHEMA PERSON_SCHEMA;',
                            'CREATE TABLE PERSON_SCHEMA.PERSON_TABLE(ID INT PRIMARY KEY, FIRSTNAME VARCHAR(100), LASTNAME VARCHAR(100), FIRM_DETAILS VARCHAR(1000), MANAGERID INT);',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (1,\'Peter\',\'Smith\',\'{"legalName": "Firm X", "employeeCount": 4, "mnc": true, "estDate": "2010-03-04", "lastUpdate": "2022-01-16T01:00:00", "entityType":"Organization", "otherNames": ["O1", "O2"], "address": {"name": "A1", "street": "S1", "lines": [{"details": "D1"}, {"details": "D2"}, {"details": "D3"}]}}\',2);',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (2,\'John\',\'Johnson\',\'{"legalName": "Firm X", "employeeCount": 4, "mnc": true, "estDate": "2010-03-04", "lastUpdate": "2022-01-16T01:00:00", "entityType":"Organization", "otherNames": ["O1", "O2"], "address": {"name": "A1", "street": "S1", "lines": [{"details": "D1"}, {"details": "D2"}, {"details": "D3"}]}}\',4);',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (3,\'John\',\'Hill\',\'{"legalName": "Firm X", "employeeCount": 4, "mnc": true, "estDate": "2010-03-04", "lastUpdate": "2022-01-16T01:00:00", "entityType":"Organization", "otherNames": ["O1", "O2"], "address": {"name": "A1", "street": "S1", "lines": [{"details": "D1"}, {"details": "D2"}, {"details": "D3"}]}}\',2);',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (4,\'Anthony\',\'Allen\',\'{"legalName": "Firm X", "employeeCount": 4, "mnc": true, "estDate": "2010-03-04", "lastUpdate": "2022-01-16T01:00:00", "entityType":"Organization", "otherNames": ["O1", "O2"], "address": {"name": "A1", "street": "S1", "lines": [{"details": "D1"}, {"details": "D2"}, {"details": "D3"}]}}\',null)',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (5,\'Fabrice\',\'Roberts\',\'{"legalName": "Firm A", "employeeCount": 1, "mnc": false, "estDate": "2012-11-13", "lastUpdate": "2022-02-14T03:00:00", "otherNames": ["O3", "O4"], "address": {"name": "A2", "lines": [{"details": "D4"}, {"details": "D5"}]}}\',null)',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (6,\'Oliver\',\'Hill\',\'{"legalName": "Firm B", "employeeCount": 2, "mnc": true, "estDate": "2017-7-7", "lastUpdate": "2022-9-01T06:00:00", "entityType":"Company", "otherNames": ["O5", "O6"], "address": {"name": "A3", "street": "S2", "lines": [{"details": "D5"},{"details": "D6"}]}}\',7)',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (7,\'David\',\'Harris\',\'{"legalName": "Firm B", "employeeCount": 2, "mnc": true, "estDate": "2017-7-7", "lastUpdate": "2022-9-01T06:00:00", "entityType":"Company", "otherNames": ["O5", "O6"], "address": {"name": "A3", "lines": [{"details": "D5"},{"details": "D6"}]}}\',null)'
                        ];
                    };
                    auth: Test;
                }
            }#
        ]
    ];
}

###Pure
function simple::singleSemiStructuredPropertyAccess(): TabularDataSet[1]
{
    simple::model::Person.all()->project([
        col(x | $x.firm.legalName, 'Firm Legal Name')
    ])
}

function simple::combinedPrimitiveAndSemiStructuredPropertyAccessParallel(): TabularDataSet[1]
{
    simple::model::Person.all()->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Legal Name')
    ])
}

function simple::combinedPrimitiveAndSemiStructuredPropertyAccess(): TabularDataSet[1]
{
    simple::model::Person.all()->project([
        col(x | $x.firstName + ' : ' + $x.firm.legalName, 'Out Col')
    ])
}

function simple::combinedComplexAndSemiStructuredPropertyAccessParallel(): TabularDataSet[1]
{
    simple::model::Person.all()->project([
        col(x | $x.manager.firstName, 'Manager First Name'),
        col(x | $x.firm.legalName, 'Firm Legal Name')
    ])
}

function simple::combinedComplexAndSemiStructuredPropertyAccess(): TabularDataSet[1]
{
    simple::model::Person.all()->project([
        col(x | if($x.manager.firstName->isEmpty(),|'NULL',|$x.manager.firstName->toOne()) + ' : ' + $x.firm.legalName, 'Out Col')
    ])
}

function simple::nestedSemiStructuredPropertyAccess(): TabularDataSet[1]
{
    simple::model::Person.all()->project([
        col(x | $x.firm.address.name, 'Firm Address Name')
    ])
}

function simple::multipleSemiStructuredPropertyAccess(): TabularDataSet[1]
{
    simple::model::Person.all()->project([
        col(x | $x.firm.legalName, 'Firm Legal Name'),
        col(x | $x.firm.address.name, 'Firm Address Name')
    ])
}

function simple::multipleSemiStructuredPropertyAccessCombined(): TabularDataSet[1]
{
    simple::model::Person.all()->project([
        col(x | $x.firm.legalName + $x.firm.address.name, 'Firm Legal Name And Address Name')
    ])
}

function simple::filterWithSemiStructuredProperty(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->filter(x | $x.firm.legalName == 'Firm X')
        ->project([
            col(x | $x.firstName, 'First Name')
        ])
}

function simple::groupByWithSemiStructuredProperty(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->groupBy(
            [
                x | $x.firm.address.name
            ],
            [
                agg(x | $x.firstName, y | $y->joinStrings(';'))
            ],
            [
                'Address',
                'Names'
            ]
        )
}

function simple::sortByWithSemiStructuredProperty(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->sortBy(#/simple::model::Person/firm/legalName!legalName#)
        ->project([
            col(x | $x.firstName, 'First Name')
        ])
}

function simple::isEmptyCheckOnSemiStructuredPrimitivePropertyAccess(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->project([
            col(x | $x.firstName, 'First Name'),
            col(x | if($x.firm.address.street->isEmpty(),|'NULL',|$x.firm.address.street->toOne()), 'First Address Street')
        ])
}

function simple::isEmptyCheckOnSemiStructuredPropertyAccessAfterAt(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->project([
            col(x | $x.firstName, 'First Name'),
            col(x | if($x.firm.address.lines->at(2).details->isEmpty(),|'NULL',|$x.firm.address.lines->at(2).details->toOne()), 'First Address Line')
        ])
}

function simple::semiStructuredDifferentDataTypePropertyAccess(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->project([
            col(x | $x.firstName, 'First Name'),
            col(x | $x.firm.legalName, 'Firm Legal Name'),
            col(x | $x.firm.employeeCount, 'Firm Employee Count'),
            col(x | $x.firm.mnc, 'Firm MNC'),
            col(x | $x.firm.estDate, 'Firm Est Date'),
            col(x | $x.firm.lastUpdate, 'Firm Last Update'),
            col(x | $x.firm.address.street, 'Firm Address Street'),
            col(x | $x.firm.entityType, 'Firm Entity Type')
        ])
}

function simple::semiStructuredArrayElementAccessPrimitive(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->project([
            col(x | $x.firstName, 'First Name'),
            col(x | $x.firm.otherNames->at(0), 'Firm Other Name 0'),
            col(x | $x.firm.otherNames->at(1), 'Firm Other Name 1')
        ])
}

function simple::semiStructuredArrayElementAccessComplex(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->project([
            col(x | $x.firstName, 'First Name'),
            col(x | $x.firm.address.lines->at(0).details, 'Firm Address Line 0'),
            col(x | $x.firm.address.lines->at(1).details, 'Firm Address Line 1'),
            col(x | $x.firm.address.lines->at(2).details, 'Firm Address Line 2'),
            col(x | $x.firm.address.lines->at(3).details, 'Firm Address Line 3')
        ])
}

function simple::semiStructuredPropertyAccessAtNestedProperty(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name'),
        col(x | $x.manager.firm.legalName, 'Manager Firm Name'),
        col(x | $x.manager.manager.firm.legalName, 'Manager Manager Firm Name'),
        col(x | $x.manager.manager.manager.firm.legalName, 'Manager Manager Manager Firm Name')
    ])
}

function simple::filterWithSemiStructuredPropertyAccessAtNestedProperty(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->filter(x | $x.manager.manager.firm.legalName == 'Firm X')
        ->project([
            col(x | $x.firstName, 'First Name')
        ])
}

function simple::ifElseLogicOnEnumProperties(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->project([
            col(x | if($x.firstName == 'John', |$x.firm.entityType, |$x.firm.entityType), 'Enum Return')
        ])
}

function simple::filterOnEnumPropertyWithEnumConst(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->filter(x | $x.firm.entityType == simple::model::EntityType.Organization)
        ->project([
            col(x | $x.firstName, 'First Name')
        ])
}

function simple::filterOnEnumPropertyWithStringConst(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->filter(x | $x.firm.entityType == 'Organization')
        ->project([
            col(x | $x.firstName, 'First Name')
        ])
}

function simple::groupByOnEnumProperty(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->groupBy(
            [
                x | $x.firm.entityType
            ],
            [
                agg(x | $x.firstName, y | $y->joinStrings(';'))
            ],
            [
                'Address',
                'Names'
            ]
        )
}

function simple::sortByOnEnumProperty(): TabularDataSet[1]
{
    simple::model::Person.all()
        ->sortBy(#/simple::model::Person/firm/entityType!entityType#)
        ->project([
            col(x | $x.firstName, 'First Name')
        ])
}
