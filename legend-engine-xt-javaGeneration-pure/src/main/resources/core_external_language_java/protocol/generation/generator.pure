// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::factory::*;
import meta::external::language::java::transform::*;
import meta::protocols::generation::java::*;

Class meta::protocols::generation::java::JavaProtocolGenerator
{
  {doc.doc = 'Creates the Java Convention to use during generation'} 
  configureConventions: Function<{Package[1], String[1], JavaProtocolGenerator[1]->Conventions[1]}>[1];

  {doc.doc = 'Creates an enum entry on an Enum class'} 
  generateEnumEntry: Function<{Enum[1], Conventions[1], JavaProtocolGenerator[1]->EnumerationEntry[1]}>[1];

  {doc.doc = 'After the Enum have been generated, provide an extenion point to further configure it, like adding annotations to the class'} 
  postProcessEnum: Function<{meta::pure::metamodel::type::Enumeration<Any>[1], meta::external::language::java::metamodel::Enumeration[1], Conventions[1], JavaProtocolGenerator[1]->meta::external::language::java::metamodel::Class[*]}>[1];

  {doc.doc = 'Creates a field for a Java class'} 
  generateClassField: Function<{Property<Nil, Any | *>[1], Conventions[1], JavaProtocolGenerator[1]->Field[1]}>[1];

  {doc.doc = 'Creates methods associated with the property/field, like getters and setters'} 
  generateClassFieldMethods: Function<{Property<Nil, Any | *>[1], Field[1], Conventions[1], JavaProtocolGenerator[1]->Function<{meta::external::language::java::metamodel::Class[1]->Method[*]}>[1]}>[1];

  {doc.doc = 'After the class have been generated, provide an extenion point to further configure it, like adding annotations to the class.  It also can generate other auxiliary classes'} 
  postProcessClass: Function<{meta::pure::metamodel::type::Class<Any>[1], meta::external::language::java::metamodel::Class[1], Conventions[1], JavaProtocolGenerator[1]->meta::external::language::java::metamodel::Class[*]}>[1];

  {doc.doc = 'After all the classes are fully configured for generation, extension point to configure project-wide classes, like any utility'} 
  finalizeProject: Function<{Project[1], Conventions[1], JavaProtocolGenerator[1]->Project[1]}>[1];
}

function meta::protocols::generation::java::basicGeneratorForProtocolWithJacksonAnnotationsAndVisitorClasses(): JavaProtocolGenerator[1]
{
  ^JavaProtocolGenerator(
    configureConventions = defaultConfigureConventions_Package_1__String_1__JavaProtocolGenerator_1__Conventions_1_,

    generateEnumEntry = defaultGenerateEnumEntry_Enum_1__Conventions_1__JavaProtocolGenerator_1__EnumerationEntry_1_,
    postProcessEnum = defaultPostProcessEnum_Enumeration_1__Enumeration_1__Conventions_1__JavaProtocolGenerator_1__Enumeration_1_,

    generateClassField = defaultGenerateClassField_Property_1__Conventions_1__JavaProtocolGenerator_1__Field_1_,
    generateClassFieldMethods = defaultGenerateClassFieldMethods_Property_1__Field_1__Conventions_1__JavaProtocolGenerator_1__Function_1_,

    postProcessClass = jacksonPostProcessClass_Class_1__Class_1__Conventions_1__JavaProtocolGenerator_1__Class_MANY_,

    finalizeProject = defaultFinalizeProject_Project_1__Conventions_1__JavaProtocolGenerator_1__Project_1_
  );
}

function meta::protocols::generation::java::defaultFinalizeProject(p: Project[1], c: Conventions[1], ge: JavaProtocolGenerator[1]): Project[1]
{
  $p;
}

function meta::protocols::generation::java::defaultConfigureConventions(purePackage: Package[1], javaPackage: String[1], ge: JavaProtocolGenerator[1]): Conventions[1]
{
  let basePackageStr = $purePackage->elementToPath('.');

  let library = newConventionsLibrary()
                ->usesInteger(javaLong(), javaLongBoxed(), {i:Integer[1] | j_long($i)})
                ->usesFloat(javaDouble(), javaDoubleBoxed(), {f:Float[1] | j_double($f)})
                ->usesBoolean(javaBoolean(), javaBooleanBoxed(), {b:Boolean[1] | j_boolean($b)})
                ->usesNumber(javaNumber(), javaNumber(), {n:Number[1] |  ^Literal(literal=$n->toString(), type=javaNumber())})
                ->usesString(javaString(), javaString(), {s:String[1]| j_string($s)})
                ->usesDecimal(javaBigDecimal(), javaBigDecimal(), {d:Decimal[1]| j_bigDecimal($d)});

  newConventions([], [])  
  ->registerLibrary($library)
  ->setBasePackageName($javaPackage)
  ->setTypeAndPackageNameStrategy(
      {t,c|
        let x = $t->cast(@PackageableElement);
        let packageStr = $x.package->toOne()->elementToPath('.');
        let package = $c.basePackageName + if ($packageStr->startsWith($basePackageStr),
                                                  | if ($packageStr->length() == $basePackageStr->length(), |'', |'.' + $packageStr->substring($basePackageStr->length()+1)),
                                                  | '.' + $packageStr;
                                           );
        pair(
          $package->sanitizeIdentifier(),
          $x.name->toOne()->sanitizeIdentifier()->toUpperFirstCharacter()->toOne()
        );}
  );
}

function meta::protocols::generation::java::defaultGenerateEnumEntry(e: Enum[1], c: Conventions[1], ge: JavaProtocolGenerator[1]): EnumerationEntry[1]
{
  $c->identifier($e.name)->javaEnumEntry();
}

function meta::protocols::generation::java::defaultPostProcessEnum(e: meta::pure::metamodel::type::Enumeration<Any>[1], javaE: meta::external::language::java::metamodel::Enumeration[1], c: Conventions[1], ge: JavaProtocolGenerator[1]): meta::external::language::java::metamodel::Enumeration[1]
{
  $javaE;
}

function meta::protocols::generation::java::defaultGenerateClassField(p: Property<Nil, Any | *>[1], c: Conventions[1], ge: JavaProtocolGenerator[1]): Field[1]
{
  let javaType = pureTypeToJavaType($c, $p);
  let javaName = $p.name->toOne()->sanitizeJavaKeywords();
  let field = if ($javaType->isJavaList(),
    |javaField('public', $javaType, $javaName, j_emptyList($javaType)),
    |if($p.defaultValue->isEmpty(),
      |javaField('public', $javaType, $javaName), 
      |
        let defaultValue = $p.defaultValue.functionDefinition->toOne()->cast(@Function<{->Any[1]}>)->eval();
        let defaultValueJava = $c->meta::external::language::java::transform::typeConversion($p->functionReturnType().rawType->toOne()).literalCoder->eval($defaultValue);
        javaField('public', $javaType, $javaName, $defaultValueJava);
    )
  );
}

function meta::protocols::generation::java::defaultGenerateClassFieldMethods(p: Property<Nil, Any | *>[1], f: Field[1], c: Conventions[1], ge: JavaProtocolGenerator[1]): Function<{meta::external::language::java::metamodel::Class[1]->Method[*]}>[1]
{
  cls: meta::external::language::java::metamodel::Class[1] | []
}

function meta::protocols::generation::java::defaultPostProcessClass(c: meta::pure::metamodel::type::Class<Any>[1], cls: meta::external::language::java::metamodel::Class[1], conventions: Conventions[1], ge: JavaProtocolGenerator[1]): meta::external::language::java::metamodel::Class[1]
{
  // todo fix protocols that expect these to be abstract but dont define as abstract
  let rawType = $c.generalizations.general.rawType;
  let isTopClass = $rawType->size() == 1 && $rawType == Any && $c.specializations->isNotEmpty();

  let superType = $c.generalizations.general;
  assert($superType->size() <= 1, |'More than one super type is not currently supported in this flow ['+$superType.rawType.name->joinStrings(',')+']');  
  let withExtend = if ($superType.rawType == Any, |$cls, |$cls->jextends(pureTypeToJavaType($conventions, $superType->toOne(), PureOne)));  
  if ($c->hasStereotype('abstract', typemodifiers) || $isTopClass, |$withExtend->addModifiers('abstract'), |$withExtend);
}

function meta::protocols::generation::java::jacksonPostProcessClass(c: meta::pure::metamodel::type::Class<Any>[1], cls: meta::external::language::java::metamodel::Class[1], conventions: Conventions[1], ge: JavaProtocolGenerator[1]): meta::external::language::java::metamodel::Class[*]
{
  let base = defaultPostProcessClass($c, $cls, $conventions, $ge);

  let rawType = $c.generalizations.general.rawType;
  let isTopClass = $rawType->size() == 1 && $rawType == Any && $c.specializations->isNotEmpty();
  let children = $c->findChildren($conventions)->sortBy(x | $x.name->toOne());

  let withJackson = if ($isTopClass,
    | $base->annotate(^meta::external::language::java::metamodel::annotations::json::JsonTypeInfo(
                    use = ^meta::external::language::java::metamodel::annotations::json::EnumValue(value='JsonTypeInfo.Id.NAME'),
                    property = '_type'
                )
            )
            ->annotate(^meta::external::language::java::metamodel::annotations::json::JsonSubTypes(
                          subTypes=[
                                $children->map(c|
                                  let javaType = pureTypeToJavaType($conventions, $c, PureOne);
                                  ^meta::external::language::java::metamodel::annotations::json::JsonSubType(
                                      value=$javaType->cast(@meta::external::language::java::metamodel::Class)->meta::external::language::java::serialization::qualifiedClassName(),
                                      name=$c.name->meta::pure::functions::string::toLowerFirstCharacter()->toOne());
                                )
                              ]
                           )
                     );,
    | $base
  );

  let withVisitor = visitorPostProcessClass($c, $withJackson, $conventions, $ge);
}

function meta::protocols::generation::java::visitorPostProcessClass(c: meta::pure::metamodel::type::Class<Any>[1], cls: meta::external::language::java::metamodel::Class[1], conventions: Conventions[1], ge: JavaProtocolGenerator[1]): meta::external::language::java::metamodel::Class[*]
{
  let rawType = $c.generalizations.general.rawType;
  let isTopClass = $rawType->size() == 1 && $rawType == Any && $c.specializations->isNotEmpty();
  let children = $c->findChildren()->sortBy(x | $x.name->toOne());

  let typeParam = javaTypeVar('T');

  let visitorClass = if ($isTopClass && $children->size() != 0,
    |
      $c->buildVisitorClass($typeParam, $conventions)
        ->addMethods(
          $children->sortBy(a|$a.name->toOne())
                   ->map(c| javaMethod($typeParam, 'visit', j_parameter(pureTypeToJavaType($conventions, $c, PureOne), 'val'))
        )
      );,
    |
      []
  );

  $cls->addMethods(buildAccept($c, $conventions))->concatenate($visitorClass);
}

function <<access.private>> meta::protocols::generation::java::buildVisitorClass(topClass: meta::pure::metamodel::type::Class<Any>[1], typeVariable:TypeVariable[1], conventions:Conventions[1]):meta::external::language::java::metamodel::Class[1]
{
  javaClass(['public', 'interface'], $typeVariable, $conventions.typeAndPackageNameStrategy->toOne()->eval($topClass, $conventions).first->javaPackage(), $topClass.name->toOne()+'Visitor')
}


function <<access.private>> meta::protocols::generation::java::buildAccept(c: meta::pure::metamodel::type::Class<Any>[1], conventions: Conventions[1]): Function<{meta::external::language::java::metamodel::Class[1]->Method[0..1]}>[1]
{
  let topParent = $c->findTopParent($conventions);
  if (($topParent == $c && $c.specializations->isEmpty()),
    |{cls: meta::external::language::java::metamodel::Class[1] | []},
    |{cls: meta::external::language::java::metamodel::Class[1] |
      // todo fix generations that don't define classes as abstract?
      let isAbstract = $topParent == $c || $cls.modifiers->exists(m | $m == Modifier.Abstract);
      let typeParam = javaTypeVar('T');
      let boundType = javaParameterizedType(buildVisitorClass($topParent, $typeParam, $conventions), $typeParam);
      let visitor   = j_parameter($boundType, 'visitor');
      if ($isAbstract,
        | javaMethod(['public', 'abstract'], $typeParam, $typeParam, 'accept', $visitor),
        | javaMethod(['public'], $typeParam, $typeParam, 'accept', $visitor, j_return(j_invoke($visitor, 'visit', [j_this($cls)], $typeParam)))
      );
    }
  );
}

function <<access.private>> meta::protocols::generation::java::findTopParent(c:meta::pure::metamodel::type::Class<Any>[1], conventions: Conventions[1]):meta::pure::metamodel::type::Class<Any>[1]
{
  let parent = $c.generalizations.general.rawType;
  if ($parent->size() != 1 || $parent == Any || $conventions->isProvidedType($parent->toOne()), |$c, |$parent->toOne()->cast(@meta::pure::metamodel::type::Class<Any>)->findTopParent($conventions));
}

function <<access.private>> meta::protocols::generation::java::findChildren(p:meta::pure::metamodel::type::Class<Any>[1], conventions: Conventions[1]):meta::pure::metamodel::type::Class<Any>[*]
{
  let children = $p.specializations.specific->cast(@meta::pure::metamodel::type::Class<Any>);
  $children->concatenate($children->map(c|$c->findChildren($conventions)));
}

