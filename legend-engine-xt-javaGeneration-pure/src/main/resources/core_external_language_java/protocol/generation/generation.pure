// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// --------------- Metamodel To Protocol Translation Generation ---------------------
###Pure
import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::transform::*;
import meta::protocols::generation::java::*;
import meta::protocols::generation::java::translation::*;
import meta::pure::executionPlan::engine::java::*;

function meta::protocols::generation::java::translation::generateMetamodelToProtocolTranslation(purePackage:String[1], javaPackage:String[1], elementsToBeExcluded:String[*], customConventionConfigFuncs:String[*]):Project[1]
{
  let pack = $purePackage->pathToElement()->cast(@Package);
  let basePackageStr = $pack->elementToPath('.');
  let conventions = defaultConfigureConventions($pack, $javaPackage, basicGeneratorForProtocolWithJacksonAnnotationsAndVisitorClasses());
  let taxonomies = $pack->findTaxonomies();
  let package = javaPackage($javaPackage);

  let translatorClass = javaClass(['public'], $package, 'MetamodelToProtocolTranslator');
  newProject()->addClass(
    $translatorClass->addMethods(generateMetamodelToProtocolTranslationMethods($pack, $translatorClass, $taxonomies, $conventions, $elementsToBeExcluded)->sortBy({a|$a.returnType->cast(@meta::external::language::java::metamodel::Class).simpleName}))
  );
}

function <<access.private>> meta::protocols::generation::java::translation::generateMetamodelToProtocolTranslationMethods(
                                      elem:PackageableElement[1],
                                      translatorClass:meta::external::language::java::metamodel::Class[1],
                                      taxonomies: Taxonomy[*],
                                      conventions: Conventions[1],
                                      elementsToBeExcluded:String[*]
                            ):Method[*]
{
  $elem->match(
    [
      p: Package[1] | $p.children->filter(c | !$c->elementToPath()->in($elementsToBeExcluded))->map(c|generateMetamodelToProtocolTranslationMethods($c, $translatorClass, $taxonomies,$conventions, $elementsToBeExcluded)),
      c: meta::pure::metamodel::type::Class<Any>[1] | meta::protocols::generation::java::translation::generateMetamodelToProtocolTranslationForClass($c, $translatorClass, $taxonomies, $conventions),
      s: Any[1] | []
    ]
  )
}

function <<access.private>> meta::protocols::generation::java::translation::generateMetamodelToProtocolTranslationForClass(
                                      c:meta::pure::metamodel::type::Class<Any>[1],
                                      translatorClass:meta::external::language::java::metamodel::Class[1],
                                      taxonomies: Taxonomy[*],
                                      conventions: Conventions[1]
                            ):Method[1]
{
  let returnType          = pureTypeToJavaType($conventions, $c, PureOne);

  let parameter           = j_parameter(generatedMetamodelJavaClass($c), $c.name->toOne()->toLower()->sanitizeJavaKeywords());

  let nullCheckStatement  = j_if(j_eq($parameter, j_null()), j_return(j_null()));

  let resVariable         = j_variable($returnType, 'res');
  let resObjectCreation   = $resVariable->j_declare(j_new($returnType, []));
  let propertyAssignments = $c->hierarchicalProperties()
                              ->map(p | let propReturnType      = pureTypeToJavaType($conventions, $p);
                                        let propertyAccess      = j_field($resVariable, $p.name->toOne()->sanitizeJavaKeywords(), $propReturnType);
                                        let metamodelPropAccess = j_invoke($parameter, '_'+$p.name->toOne(), [], javaObject());

                                        let expression          = if($p.multiplicity->isToMany(),
                                                                    |
                                                                      if($p->shouldTranslateReturn(),
                                                                        | if($p.genericType.rawType->toOne()->instanceOf(meta::pure::metamodel::type::Enumeration),
                                                                            | let metamodelEnum   = javaClass('public', javaPackage('org.finos.legend.pure.m3.coreinstance.meta.pure.metamodel.type'), 'Enum');
                                                                              let xParam          = j_parameter($metamodelEnum, 'x');
                                                                              let translateLambda = j_lambda($xParam, j_invoke($propReturnType, 'valueOf', $xParam->j_invoke('_name', [], javaString()), $propReturnType));
                                                                              j_invoke($metamodelPropAccess, 'collect', $translateLambda, javaObject())->j_invoke('toList', [], javaObject())->j_cast($propReturnType);,
                                                                            | let xParam          = j_parameter(generatedMetamodelJavaClass($p.genericType.rawType->toOne()->cast(@PackageableElement)), 'x');
                                                                              let translateLambda = j_lambda($xParam, j_invoke(j_this($translatorClass), 'translate', $xParam, javaObject()));
                                                                              j_invoke($metamodelPropAccess, 'collect', $translateLambda, javaObject())->j_invoke('toList', [], javaObject())->j_cast($propReturnType);
                                                                          ),
                                                                        | j_invoke($metamodelPropAccess, 'toList', [], javaObject())->j_cast($propReturnType)
                                                                      ),
                                                                    |
                                                                      if($p->shouldTranslateReturn(),
                                                                        | if($p.genericType.rawType->toOne()->instanceOf(meta::pure::metamodel::type::Enumeration),
                                                                            | j_invoke($propReturnType, 'valueOf', $metamodelPropAccess->j_invoke('_name', [], javaString()), $propReturnType),
                                                                            | j_invoke(j_this($translatorClass), 'translate', $metamodelPropAccess, $propReturnType)
                                                                          ),
                                                                        | $metamodelPropAccess
                                                                      )
                                                                  );
                                        j_assign($propertyAccess, $expression);
                                    );

  let returnStatement     = j_return($resVariable);

  let methodBody          = if ($c.specializations->size() > 0,
                                | let taxonomy            = $c->findTaxonomy($taxonomies)->toOne();
                                  let checkAndMethodCalls = $taxonomy.children
                                                                      ->filter(cl | $c->findAllSpecializations()->contains($cl))
                                                                      ->sortBy(a|$a.name->toOne())
                                                                      ->map(cl| let subType    = generatedMetamodelJavaClass($cl);
                                                                                let check      = j_instanceof($parameter, $subType);
                                                                                let methodCall = j_invoke(j_this($translatorClass), 'translate', $parameter->j_cast($subType), $returnType)->j_return();
                                                                                pair($check, $methodCall);
                                                                        );
                                  let exceptionThrow      = j_throw(j_new(javaIllegalStateException(), j_string('Unknown data type')));
                                  j_if(list($checkAndMethodCalls), $exceptionThrow);,
                                | [$nullCheckStatement, $resObjectCreation]->concatenate($propertyAssignments)->concatenate($returnStatement)
                              );

  javaMethod('public', $returnType, 'translate', $parameter, $methodBody);
}

// --------------- Protocol To Metamodel Translation Generation ---------------------
###Pure
import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::transform::*;
import meta::protocols::generation::java::*;
import meta::protocols::generation::java::translation::*;
import meta::pure::executionPlan::engine::java::*;

function meta::protocols::generation::java::translation::generateProtocolToMetamodelTranslation(purePackage:String[1], javaPackage:String[1], elementsToBeExcluded:String[*], customConventionConfigFuncs:String[*]):Project[1]
{
  let pack = $purePackage->pathToElement()->cast(@Package);
  let basePackageStr = $pack->elementToPath('.');
  let conventions = defaultConfigureConventions($pack, $javaPackage, basicGeneratorForProtocolWithJacksonAnnotationsAndVisitorClasses());
  let taxonomies = $pack->findTaxonomies();
  let package = javaPackage($javaPackage);

  let translatorClass = javaClass(['public'], $package, 'ProtocolToMetamodelTranslator');
  newProject()->addClass(
    $translatorClass->addMethods(generateProtocolToMetamodelTranslationMethods($pack, $translatorClass, $taxonomies, $conventions, $elementsToBeExcluded)->sortBy({a|$a.returnType->cast(@meta::external::language::java::metamodel::Class).simpleName}))
  );
}

function <<access.private>> meta::protocols::generation::java::translation::generateProtocolToMetamodelTranslationMethods(
                                      elem:PackageableElement[1],
                                      translatorClass:meta::external::language::java::metamodel::Class[1],
                                      taxonomies: Taxonomy[*],
                                      conventions: Conventions[1],
                                      elementsToBeExcluded:String[*]
                            ):Method[*]
{
  $elem->match(
    [
      p: Package[1] | $p.children->filter(c | !$c->elementToPath()->in($elementsToBeExcluded))->map(c|generateProtocolToMetamodelTranslationMethods($c, $translatorClass, $taxonomies,$conventions, $elementsToBeExcluded)),
      c: meta::pure::metamodel::type::Class<Any>[1] | meta::protocols::generation::java::translation::generateProtocolToMetamodelTranslationForClass($c, $translatorClass, $taxonomies, $conventions),
      e: meta::pure::metamodel::type::Enumeration<Any>[1] | meta::protocols::generation::java::translation::generateProtocolToMetamodelTranslationForEnumeration($e, $translatorClass, $taxonomies, $conventions),
      s: Any[1] | []
    ]
  )
}

function <<access.private>> meta::protocols::generation::java::translation::generateProtocolToMetamodelTranslationForClass(
                                      c:meta::pure::metamodel::type::Class<Any>[1],
                                      translatorClass:meta::external::language::java::metamodel::Class[1],
                                      taxonomies: Taxonomy[*],
                                      conventions: Conventions[1]
                            ):Method[1]
{
  let returnType = javaClass('public', javaPackage('org.finos.legend.pure.generated'), 'Root_'+$c.package->toOne()->elementToPath('_')+'_'+$c.name->toOne());

  let parameters = [
      j_parameter(pureTypeToJavaType($conventions, $c, PureOne), $c.name->toOne()->toLower()->sanitizeJavaKeywords()),
      j_parameter(javaClass('public', javaPackage('org.finos.legend.engine.language.pure.compiler.toPureGraph'), 'PureModel'), 'pureModel')
  ];


  let returnInstance = j_return
  (
    j_conditional(
            j_eq($parameters->at(0), j_null()),
            j_null(),
                $c->hierarchicalProperties()->fold(
                  {a,b | if(!$a->meta::protocols::generation::java::translation::shouldTranslateReturn(),
                            |let propertyAccess = j_field($parameters->at(0), $a.name->toOne()->sanitizeJavaKeywords(), javaObject());
                            let processedPropertyAccess = if($a.multiplicity->isToMany(),
                                                              |let listsClass = javaClass('public', javaPackage('org.eclipse.collections.impl.factory'), 'Lists');
                                                              j_invoke(j_field($listsClass, 'mutable', javaObject()), 'withAll', $propertyAccess, javaObject());,
                                                              |$propertyAccess
                                                          );
                            j_invoke($b, '_'+$a.name->toOne(), $processedPropertyAccess, $returnType);,
                            |if($a.multiplicity->isToMany(),
                                |let xParam = j_parameter(pureTypeToJavaType($conventions, $a.genericType.rawType->toOne(), PureOne), 'x');
                                j_invoke($b, '_'+$a.name->toOne(), j_invoke(javaClass('public', javaPackage('org.eclipse.collections.impl.utility'), 'ListIterate'), 'collect', [checkNullToEmptyList($xParam.type, j_field($parameters->at(0), $a.name->toOne()->sanitizeJavaKeywords(), javaList($xParam.type))), j_lambda($xParam, j_invoke(j_this($translatorClass),'translate',[$xParam, $parameters->at(1)], javaObject()))], javaObject()), $returnType);,
                                |j_invoke($b, '_'+$a.name->toOne(), j_invoke(j_this($translatorClass), 'translate', [j_field($parameters->at(0), $a.name->toOne()->sanitizeJavaKeywords(), javaObject()), $parameters->at(1)], javaObject()), $returnType)
                            )
                        )
                  },
                  j_new(javaClass('public', javaPackage('org.finos.legend.pure.generated'), 'Root_'+$c.package->toOne()->elementToPath('_')+'_'+$c.name->toOne()+'_Impl'),
                                            [
                                              j_string(''),
                                              j_null(),
                                              j_invoke($parameters->at(1), 'getType', [j_string($c->elementToPath())], javaClass('public', javaPackage('org.finos.legend.pure.m4.coreinstance'), 'CoreInstance'))
                                            ]
                                 )
                )
          )
  );

  let buildInstanceOrRoute = if ($c.specializations->size() > 0,
    | let taxonomy = $c->findTaxonomy($taxonomies)->toOne();
      let visitorMethods = $taxonomy.children
          ->sortBy(a|$a.name->toOne())
          ->map(cl|
                  let param = j_parameter(pureTypeToJavaType($conventions, $cl, PureOne), 'val');
                  j_method(
                    ['public'],
                    $returnType,
                    'visit',
                    $param,
                    if ($cl == $c,
                      |$returnInstance,
                      |if ($cl->_subTypeOf($c),
                        |j_return(j_invoke(j_this($translatorClass),'translate',[$param, $parameters->at(1)], javaObject())),
                        |j_return(j_null())
                      )
                    )
                  );
            );
      let visitorClass = meta::protocols::generation::java::buildVisitorClass($taxonomy.topClass, javaTypeVar('T'), $conventions);
      let boundVisitor = javaParameterizedType($visitorClass, $returnType);
      j_return(
          j_conditional(
            j_eq($parameters->at(0), j_null()),
            j_null(),
            j_invoke($parameters->at(0), 'accept', j_newAnon($boundVisitor, [], $visitorMethods->cast(@Code)), javaObject())
          )
      );,
    | $returnInstance
  );

  javaMethod('public', $returnType, 'translate', $parameters, $buildInstanceOrRoute);
}

function <<access.private>> meta::protocols::generation::java::translation::generateProtocolToMetamodelTranslationForEnumeration(
                                      e:meta::pure::metamodel::type::Enumeration<Any>[1],
                                      translatorClass:meta::external::language::java::metamodel::Class[1],
                                      taxonomies: Taxonomy[*],
                                      conventions: Conventions[1]
                            ):Method[1]
{
  let returnType = javaClass('public', javaPackage('org.finos.legend.pure.m3.coreinstance.meta.pure.metamodel.type'), 'Enum');

  let parameters = [
      j_parameter(pureTypeToJavaType($conventions, $e, PureOne), $e->enumName()->toOne()->toLower()->sanitizeJavaKeywords()),
      j_parameter(javaClass('public', javaPackage('org.finos.legend.engine.language.pure.compiler.toPureGraph'), 'PureModel'), 'pureModel')
  ];

  javaMethod('public', $returnType, 'translate', $parameters,
             j_return(
                j_conditional(j_eq($parameters->at(0), j_null()),
                              j_null(),
                              j_invoke($parameters->at(1), 'getEnumValue', [j_string($e->elementToPath()), j_invoke($parameters->at(0), 'name', [], javaString())], $returnType)
                )
             )
  );
}

// --------------- Protocol Classes ---------------------

###Pure
import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::transform::*;
import meta::protocols::generation::java::*;
import meta::protocols::generation::java::translation::*;
import meta::pure::executionPlan::engine::java::*;

function meta::protocols::generation::java::generateProtocolClasses(purePackage:String[1], javaPackage:String[1], elementsToBeExcluded:String[*], javaProtocolGeneratorName:String[0..1]):Project[1]
{
  let pack = $purePackage->pathToElement()->cast(@Package);

  let javaProtocolGenerator = $javaProtocolGeneratorName->map(e | $e->pathToElement()->cast(@Function<{->JavaProtocolGenerator[1]}>))->defaultIfEmpty(meta::protocols::generation::java::basicGeneratorForProtocolWithJacksonAnnotationsAndVisitorClasses__JavaProtocolGenerator_1_)->toOne()->eval();

  let conventions = $javaProtocolGenerator.configureConventions->eval($pack, $javaPackage, $javaProtocolGenerator);
  let package = javaPackage($javaPackage);

  let context = ^Context(conventions=$conventions,
                         rootPackage=$package,
                         generator=$javaProtocolGenerator);

  let javaClasses = $pack->map(c|generateProtocolClasses($c, $elementsToBeExcluded, $context));

  let project = newProject()->addClasses($javaClasses);
  $javaProtocolGenerator.finalizeProject->eval($project, $conventions, $context.generator);
}

Class meta::protocols::generation::java::Context
{
  rootPackage: meta::external::language::java::metamodel::Package[1];
  conventions: Conventions[1];
  generator: JavaProtocolGenerator[1];
}

function <<access.private>> meta::protocols::generation::java::generateProtocolClasses(
                                      elem:PackageableElement[1],
                                      elementsToBeExcluded:String[*],
                                      context : Context[1]
                            ):meta::external::language::java::metamodel::Class[*]
{
  $elem->filter(c|!$c->elementToPath()->in($elementsToBeExcluded))->match(
    [
      p: Package[1]                                       | $p.children->map(c|generateProtocolClasses($c, $elementsToBeExcluded, $context)),
      c: meta::pure::metamodel::type::Class<Any>[1]       | meta::protocols::generation::java::generateClass($c, $context),
      e: meta::pure::metamodel::type::Enumeration<Any>[1] | meta::protocols::generation::java::generateEnumeration($e, $context),
      s: Any[0..1]                                        | []
    ]
  )
}

function <<access.private>> meta::protocols::generation::java::generateEnumeration(enum:meta::pure::metamodel::type::Enumeration<Any>[1], context : Context[1]):meta::external::language::java::metamodel::Class[*]
{
  let typeAndPackages = $context.conventions.typeAndPackageNameStrategy->toOne()->eval($enum, $context.conventions);
  let enumClass = javaEnum('public', $typeAndPackages.first->javaPackage(), $typeAndPackages.second)
    ->addEntries($enum->cast(@meta::pure::metamodel::type::Enumeration<Any>)->enumValues()
          ->map(e|
            $context.generator.generateEnumEntry->eval($e->cast(@Enum), $context.conventions, $context.generator)
          )
    );

  $context.generator.postProcessEnum->eval($enum, $enumClass, $context.conventions, $context.generator);
}

function <<access.private>> meta::protocols::generation::java::generateClass(c:meta::pure::metamodel::type::Class<Any>[1], context : Context[1]):meta::external::language::java::metamodel::Class[*]
{
  let typeAndPackages = $context.conventions.typeAndPackageNameStrategy->toOne()->eval($c, $context.conventions);
  let baseCls = javaClass('public', $c.typeParameters.name->map(t | $t->javaTypeVar()), $typeAndPackages.first->javaPackage(), $typeAndPackages.second);
  let clsWithPropAndMethods = $c.properties->fold(
                                {p, cls|
                                  let field = $context.generator.generateClassField->eval($p, $context.conventions, $context.generator);
                                  $cls->addField($field)
                                      ->addMethods($context.generator.generateClassFieldMethods->eval($p, $field, $context.conventions, $context.generator));

                                }, $baseCls);

  $context.generator.postProcessClass->eval($c, $clsWithPropAndMethods, $context.conventions, $context.generator);
}


// --------------- Helper Functions ---------------------

###Pure
import meta::external::language::java::factory::*;
import meta::external::language::java::metamodel::*;
import meta::protocols::generation::java::translation::*;
import meta::protocols::generation::java::*;

Class meta::protocols::generation::java::translation::Taxonomy
{
  topClass : meta::pure::metamodel::type::Class<Any>[1];
  children : meta::pure::metamodel::type::Class<Any>[*];
}

function meta::protocols::generation::java::translation::findTaxonomies(p:Package[1]):Taxonomy[*]
{
  let topClasses = collectClasses($p)->filter(c|
      let rawType = $c.generalizations.general.rawType;
      $rawType->size() == 1 && $rawType == Any && $c.specializations->isNotEmpty();
    );
  $topClasses->map(tc|
    ^Taxonomy(
      topClass = $tc,
      children = $tc->findChildren()
    )
  );
}

function <<access.private>> meta::protocols::generation::java::translation::collectClasses(p:Package[1]):meta::pure::metamodel::type::Class<Any>[*]
{
  $p.children->map(
    child | $child->match([
        c : meta::pure::metamodel::type::Class<Any>[1]|$c,
        p : Package[1]|$p->collectClasses(),
        d : Any[1]|[]
      ])
  );
}

function meta::protocols::generation::java::translation::findTaxonomy(c:meta::pure::metamodel::type::Class<Any>[1], src:Taxonomy[*]):Taxonomy[0..1]
{
  $src->filter(t|$t.topClass == $c || $t.children->contains($c))->first();
}

function meta::protocols::generation::java::findChildren(p:meta::pure::metamodel::type::Class<Any>[1]):meta::pure::metamodel::type::Class<Any>[*]
{
  let children = $p.specializations.specific->cast(@meta::pure::metamodel::type::Class<Any>);
  $children->concatenate($children->map(c|$c->findChildren()));
}

function <<access.private>> meta::protocols::generation::java::translation::shouldTranslateReturn(property : AbstractProperty<Any>[1]) : Boolean[1]
{
   $property.genericType.rawType->match([
      pt:meta::pure::metamodel::type::PrimitiveType[1]    | false,
      et:meta::pure::metamodel::type::Enumeration<Any>[1] | true,
      a:meta::pure::metamodel::type::Class<Any>[1]        | !$a->isAnyClass(),
      any:Any[0]                                          | false
   ]);
}

function <<access.private>> meta::protocols::generation::java::translation::checkNullToEmptyList(t:meta::external::language::java::metamodel::Type[1], val:Code[1]):Code[1]
{
  j_conditional(j_eq($val, j_null()), j_emptyList(javaList($t)), $val)
}

function <<access.private>> meta::protocols::generation::java::translation::generatedMetamodelJavaClass(p:PackageableElement[1]):meta::external::language::java::metamodel::Type[1]
{
  javaClass('public', javaPackage('org.finos.legend.pure.generated'), 'Root_'+$p.package->toOne()->elementToPath('_')+'_'+$p.name->toOne())
}