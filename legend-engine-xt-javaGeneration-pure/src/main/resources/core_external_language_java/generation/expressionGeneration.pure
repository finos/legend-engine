// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::transform::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::convention::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::runtime::*;
import meta::pure::router::metamodel::*;

function meta::external::language::java::transform::generateJavaMethodBody(vses:ValueSpecification[*], conventions: Conventions[1]):Code[1]
{
   generateJavaMethodBody($vses, $conventions, noDebug());
}

function meta::external::language::java::transform::generateJavaMethodBody(vses:ValueSpecification[*], conventions: Conventions[1], debug: DebugContext[1]):Code[1]
{
   assert($vses->isNotEmpty(), 'Method body must have at least one expression');
   $vses->statementsForBlock($conventions, $debug)->j_block();
}

function <<access.private>> meta::external::language::java::transform::statementsForBlock(vses:ValueSpecification[*], conventions: Conventions[1], debug: DebugContext[1]):Code[*]
{
   let generated = $vses->toIndexed()
      			->map(z| print(if($debug.debug,|$debug.space+'statementsForBlock - processing expression '+$z.first->toString()+'\n',|''));
               			let x = $z.second;
               			$x->generateJavaInternal($conventions, $debug););
   $generated->match([
         {c0: Code[0] | []},
         {cs: Code[*] | 
            let toLast = $cs->init();
            let last   = $cs->last()->toOne();

            if($last->isAssignment(),
               | $toLast->add($last)->add($last->variableAssigned()->j_return()),
               |
            if($last->isDeclaration(),
               | $toLast->add($last)->add($last->variableDeclared()->j_return()),
               | $toLast->add($last->j_return())
            ));
         }
      ])
      ->toStatements();
}

function meta::external::language::java::transform::generateJava(vs:ValueSpecification[1], conventions: Conventions[1]):Code[1]
{
   generateJava($vs, $conventions, noDebug());
}

function meta::external::language::java::transform::generateJava(vs:ValueSpecification[1], conventions: Conventions[1], debug: meta::pure::tools::DebugContext[1]):Code[1]
{
   let expr = $vs->generateJavaInternal($conventions, $debug);
   
   if($expr->isAssignment() || $expr->isDeclarationWithAssignment(),
      | $expr->expressionAssigned(),
      | $expr
   );
}

function meta::external::language::java::transform::generateJavaInternal(vs:ValueSpecification[1], conventions: Conventions[1], debug: meta::pure::tools::DebugContext[1]):Code[1]
{
   let result = $vs->match([
      {f:FunctionExpression[1]                  | $f->processFunctionExpression($conventions, $debug)},
      {i:InstanceValue[1]                       | $i->processInstanceValue($conventions, $debug)},
      {v:VariableExpression[1]                  | $v->processVariableExpression($conventions, $debug)},
      {ervs:ExtendedRoutedValueSpecification[1] | $ervs.value->generateJava($conventions, $debug)},
      {frvs:FunctionRoutedValueSpecification[1] | $frvs.value->generateJava($conventions, $debug)}
   ]);
   $result;
}

function meta::external::language::java::transform::hackedUnitType(v: ValueSpecification[1], conventions: Conventions[1]): meta::external::language::java::metamodel::Type[1]
{
   let gtrt    = $v->type()->toOne();
   $conventions->pureTypeToJavaType($gtrt, PureOne);
}

function meta::external::language::java::transform::getUnitConversionFunctionVariableName(func:FunctionDefinition<Any>[1], conventions: Conventions[1], debug:DebugContext[1]): String[1]
{
   let v = $func.classifierGenericType.typeArguments.rawType->cast(@meta::pure::metamodel::type::FunctionType).parameters->toOne();
   let varName  = if($v.name == 'this', |$v.name, |$conventions->identifier($v.name));
}

function <<access.private>> meta::external::language::java::transform::processVariableExpression(v: VariableExpression[1], conventions: Conventions[1], debug: meta::pure::tools::DebugContext[1]):Code[1]
{
   print(if($debug.debug,|$debug.space+'VariableExpression: \''+($v.name)+'\'\n',|''));
   let varName = if($v.name == 'this', |$v.name, |$conventions->identifier($v.name));
   
   if($conventions->isProvidedVariable($varName), 
      | $conventions->getProvidedVariable($varName),
      {|
         let type = $conventions->pureTypeToJavaType($v.genericType, $v.multiplicity);
         j_variable($type, $varName)->debugAndReturn($debug);
      }
   );
}

function <<access.private>> meta::external::language::java::transform::processVariableExpressionAsParameter(v: VariableExpression[1], conventions: Conventions[1], debug: meta::pure::tools::DebugContext[1]):Code[1]
{
   print(if($debug.debug,|$debug.space+'processVariableExpressionAsParameter: \''+($v.name)+'\'\n',|''));
   let c        = $v.genericType.rawType->toOne();   
   let javaType = $conventions->pureTypeToJavaType($c, $v.multiplicity)->toBoxed();
   let varName  = if($v.name == 'this', |$v.name, |$conventions->identifier($v.name));
   j_parameter($javaType, $varName);
}

function meta::external::language::java::transform::processLambda(l:LambdaFunction<Any>[1], conventions: Conventions[1], debug: meta::pure::tools::DebugContext[1]):Code[1]
{
    let parameters = $l.classifierGenericType.typeArguments.rawType->cast(@meta::pure::metamodel::type::FunctionType).parameters->map(p|$p->processVariableExpressionAsParameter($conventions, $debug->indent()));
    let expression = $l.expressionSequence->evaluateAndDeactivate()->statementsForBlock($conventions->addProvidedVariables($parameters), $debug)->j_block();
    j_lambda($parameters, $expression, javaFunctionType($parameters.type, $expression.type));
}
function <<access.private>> meta::external::language::java::transform::processInstanceValue(i: InstanceValue[1], conventions: Conventions[1], debug: meta::pure::tools::DebugContext[1]):Code[1]
{
   print(if($debug.debug,|$debug.space+'InstanceValue: '+$i.values->size()->toString()+' values\n',|''));
   let values = $i.values->map({v|
      $v->match([
         {s:String[1]      | $conventions->stringLiteral($s);}, 
         {i:Integer[1]     | $conventions->integerLiteral($i);},
         {f:Float[1]       | $conventions->floatLiteral($f);},
         {d:Decimal[1]     | $conventions->decimalLiteral($d);},
         {sd:StrictDate[1] | $conventions->strictDateLiteral($sd);},
         {dt:DateTime[1]   | $conventions->dateTimeLiteral($dt);},
         {d:Date[1]        | $conventions->dateLiteral($d);},
         {b:Boolean[1]     | $conventions->booleanLiteral($b);},
         {l:LambdaFunction<Any>[1] | $l->processLambda($conventions, $debug)},
         {e:Enum[1] | 
            let enumeration = $e->type()->cast(@meta::pure::metamodel::type::Enumeration<Any>);
            let javaType    = $conventions->pureTypeToJavaType($enumeration, PureOne);
            $javaType->j_invoke('getEnumFromPureName', j_string($e.name), $javaType);
         },
         {v:ValueSpecification[1] |
            generateJava($v, $conventions, $debug);
         },
         {t:meta::pure::metamodel::type::Type[1] |
            j_null($conventions->pureTypeToJavaType($t, PureOne));
         },
         {a:Any[1] | 
            fail('Unhandled value type: ' + $v->type()->elementToPath());
            j_null();
         }
      ]);
   });

   let type  = $conventions->pureTypeToJavaType($i.genericType, $i.multiplicity);
   
   let converted = if($i.genericType.rawType->toOne()->instanceOf(Unit),
                      {|
                         let unitImpl = $conventions->implClassName($i.genericType.rawType->toOne()->cast(@Unit));
                         $values->map(v| $unitImpl->j_new($v)); 
                      },
                      | $values
                   );
   
   let result = $converted->match([
      {c0:Code[0] | if($type->isJavaList(), |j_emptyList($type), |j_null($type))},                                             
      {c :Code[1] | 
         // TODO Simplify this once lambdas handled better above
         if($c.type->instanceOf(meta::external::language::java::metamodel::FunctionType), |$c, |$c->j_cast($type));
      },                                             
      {cs:Code[*] | 
         // If the types in the list differ to $type that the list iS being cast to, then we need to explicitly type the asList() function
         // otherwise Java generics falls over when trying to type unify the cast type and the type of the list returning by asList()
         // For example this is requried to type lists such as [1,2.0] where the list should be cast as Number but the elements of the list are subtypes of Number
         let types         = $values.type->removeDuplicates();
         let typeArguments = if($types->size() == 1, 
                                | [], 
                                | if($type->isJavaList(), | $type->elementTypeOfJavaList(), | $type)
                             );        
         j_invoke(javaArrays(), $typeArguments, 'asList', $cs, $type)->j_cast($type);
   }                                             
   ]);
   $result->debugAndReturn($debug);
}

function <<access.private>> meta::external::language::java::transform::processFunctionExpression(fe: FunctionExpression[1], conventions: Conventions[1], debug: meta::pure::tools::DebugContext[1]):Code[1]
{
   let params = $fe.parametersValues->evaluateAndDeactivate();
   let result = $fe.func->match([
      {p:Property<Nil,Any|*>[1] | 
         print(if($debug.debug,|$debug.space+'Property: \''+($fe.func.name->toOne())+'\'\n',|''));
         let src  = $params->at(0)->generateJava($conventions, $debug->indent());         
         $src->j_invoke($conventions->getterName($p), [], $conventions->pureTypeToJavaType($p));
      },
      {q:QualifiedProperty<Any>[1] |
         print(if($debug.debug,|$debug.space+'QualifiedProperty: \''+($fe.func.name->toOne())+'\'\n',|''));
         let src  = $params->at(0)->generateJava($conventions, $debug->indent());
         let args = $params->tail()->map(p| $p->generateJava($conventions, $debug->indent()));
         $src->j_invoke($conventions->getterName($q), $args, $conventions->pureTypeToJavaType($q));
      },
      {z:Any[1] | 
         print(if($debug.debug,|$debug.space+'func: \''+($fe.func.name->toOne())+'\'\n',|''));
         assert(!$conventions->isProhibitedFunction($fe.func), |$fe.func.name->toOne()+' is prohibited!');
         let toEval = $conventions->getFunctionCoder($fe.func);
         assert($toEval->isNotEmpty() || $fe.func->instanceOf(ConcreteFunctionDefinition), 
                {|
                   let f = $fe.func->toOne();
                   let p = if($f->instanceOf(PackageableElement), |$f->cast(@PackageableElement).package, |[]);
                   if($p->isEmpty(), |'', |$p->toOne()->elementToPath()+'::')+$f.name->toOne()+' is not supported yet!';
                });
         if($toEval->isNotEmpty(),
            |$toEval->toOne()->eval($fe->cast(@FunctionExpression), $conventions, $debug),
            |$fe->processConcreteFunctionExpression($conventions, $debug)
         );
      }
   ]);

   $result->debugAndReturn($debug);
}

function <<access.private>> meta::external::language::java::transform::processConcreteFunctionExpression(fe: FunctionExpression[1], conventions: Conventions[1], debug: meta::pure::tools::DebugContext[1]):Code[1]
{
   print(if($debug.debug,|$debug.space+'processConcreteFunctionExpression '+$fe.func->elementToPath()+'\n',|''));

   let signature = $conventions->functionSignature($fe.func->cast(@ConcreteFunctionDefinition<Any>));
   let args      = $fe.parametersValues->evaluateAndDeactivate()->map(p| $p->generateJava($conventions, $debug->indent()));
   let argTypes  = $signature.method.parameters.type;
   assertEquals($args->size(), $argTypes->size());
   let castArgs  = range($args->size())->map(
      {i|
         let arg     = $args->at($i);
         let argType = $argTypes->at($i);
         
         if($argType->isJavaList(), |$arg->j_listOf($argType), |$arg)->j_cast($argType);
      }
   );

   if(!($conventions.visitedFunctions->contains($fe)),
      |let newCon = ^$conventions(visitedFunctions += $fe->cast(@FunctionExpression));
      let name = $fe.func->elementToPath();
      let dependency = newDependency(
        $name,
        {state|
        print(if($debug.debug,|$debug.space+'Implementation of: \''+$fe.func->elementToPath()+'\'\n',|''));
        
        let implBody    = $fe.func->cast(@ConcreteFunctionDefinition<Any>).expressionSequence->evaluateAndDeactivate()->generateJavaMethodBody($newCon, $debug->indent());
        let classesUsed = $signature.method->typesUsed()->concatenate($implBody->typesUsed())->typesToClasses();
        let withImports = javaClass('public', $signature.class)
                ->usingKnownPackages($conventions->knownPackages())
                ->imports($conventions->standardImports());
        let impl             = $withImports->addMethod(javaMethod(['public', 'static'], $signature.method.returnType, $signature.method.name, $signature.method.parameters, $implBody));
        let dependencies     = $implBody->dependencies()->removeDuplicates();
        let withDependencies = $dependencies->resolveProjects($state);
        let project          = mergeProjects(newProject()->addClass($impl)->concatenate($withDependencies->getProjects($dependencies))->toOneMany());
        $withDependencies->addDependencyProject($name, $project);
        }
      );
      
      j_invoke($signature.class, $signature.method.name, $castArgs, $signature.method.returnType)->dependsOn($dependency);,
      
      |j_invoke($signature.class, $signature.method.name, $castArgs, $signature.method.returnType);
   );
}

function <<access.private>> meta::external::language::java::transform::debugAndReturn(c:Code[1], debug:DebugContext[1]):Code[1]
{
   print(if($debug.debug,
            |$debug.space+'>> ('+ $c.type->typeToString() + ')  '+ $c->codeToString() + ' [' + $c->dependencies().name->makeString(', ') + ']' + if($c->isDeprecated(), |' :-(', |'') + '\n',
            |''
         )
   );
   $c;
}
