// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::legend::service::metamodel::*;

import meta::external::function::description::openapi::metamodel::*;
import meta::external::function::description::openapi::transformation::fromPure::*;
import meta::external::function::description::openapi::transformation::fromPure::tests::*;

import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::*;

Class meta::external::function::description::openapi::transformation::fromPure::tests::Person
{
  firstName : String[1];
  lastName  : String[1];
  age: Integer[1];
}

function <<meta::external::function::description::openapi::profiles::ServiceSpecGeneration.OpenAPI>> {doc.doc = 'Legend openapi test simple service'} meta::external::function::description::openapi::transformation::fromPure::tests::simpleServiceWithGraphFetch():Service[1]
{
  let tree = #{Person{firstName,lastName}}#;
  let func = {|Person.all()->graphFetchChecked($tree)->serialize($tree)};
  ^Service
  (
    pattern = '/service/testOpenApi',
    owners = ['dummy'],
    documentation = 'dummy description',
    autoActivateUpdates = true,
    execution = ^PureSingleExecution
                (
                  func = $func,
                  mapping = personMapping,
                  runtime = []
                ),
    test = ^SingleExecutionTest
            (
            data = 'default\n'+
                    'personTable\n'+
                    'id,firstName,lastName,age\n'+
                    '1,A,Z,23\n'+
                    '\n\n\n',
            asserts = [
                        ^meta::legend::service::metamodel::TestContainer(
                            parametersValues = [],
                            assert = {res:Result<Any|*>[1]|$res.values->cast(@TabularDataSet).rows->map(r|$r.getString('firstName'))->sort() == ['A', 'B', 'C', 'D', 'E']}
                        )
                      ]
            )
  );
}

function <<meta::external::function::description::openapi::profiles::ServiceSpecGeneration.OpenAPI>> {doc.doc = 'Legend openapi test simple service'} meta::external::function::description::openapi::transformation::fromPure::tests::simpleService():Service[1]
{
  ^Service
  (
    pattern = '/service/testOpenApi',
    owners = ['dummy'],
    documentation = 'dummy description',
    autoActivateUpdates = true,
    execution = ^PureSingleExecution
                (
                  func = {|Person.all()->project(col(p|$p.firstName, 'firstName'))},
                  mapping = personMapping,
                  runtime = []
                ),
    test = ^SingleExecutionTest
            (
            data = 'default\n'+
                    'personTable\n'+
                    'id,firstName,lastName,age\n'+
                    '1,A,Z,23\n'+
                    '\n\n\n',
            asserts = [
                        ^meta::legend::service::metamodel::TestContainer(
                            parametersValues = [],
                            assert = {res:Result<Any|*>[1]|$res.values->cast(@TabularDataSet).rows->map(r|$r.getString('firstName'))->sort() == ['A', 'B', 'C', 'D', 'E']}
                        )
                      ]
            )
  );
}


function <<test.Test>> meta::external::function::description::openapi::transformation::fromPure::tests::testServiceShouldReturnCorrectOpenapiString():Boolean[1]
{
  let openapi = simpleService()->serviceToOpenApi(^Server(url='test'));
  let expected = readFile('/core_external_format_openapi/transformation/fromPure/tests/resources/testOpenApiSpec.txt')->toOne();
  assertJsonStringsEqual($expected, $openapi);
}

function <<test.Test>> meta::external::function::description::openapi::transformation::fromPure::tests::testGraphFetchServiceShouldReturnCorrectOpenapiString():Boolean[1]
{
  let openapi = simpleServiceWithGraphFetch()->serviceToOpenApi(^Server(url='test'));
  let expected = readFile('/core_external_format_openapi/transformation/fromPure/tests/resources/testGraphFetchOpenApiSpec.txt')->toOne();
  assertJsonStringsEqual($expected, $openapi);
}



###Mapping
import meta::external::function::description::openapi::transformation::fromPure::tests::*;

Mapping meta::external::function::description::openapi::transformation::fromPure::tests::personMapping
(
  Person : Pure
  {
    ~src Person
    firstName : $src.firstName;
    lastName: $src.lastName;
  }
)

