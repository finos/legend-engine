// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::legend::service::metamodel::*;

import meta::external::format::openapi::metamodel::*;
import meta::external::format::openapi::transformation::fromPure::*;
import meta::external::format::openapi::transformation::fromPure::tests::*;

import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::*;

Class meta::external::format::openapi::transformation::fromPure::tests::Person
{
  firstName : String[1];
  lastName  : String[1];
  age: Integer[1];
}

function <<meta::external::format::openapi::profiles::ServiceSpecGeneration.OpenAPI>> {doc.doc = 'Legend openapi test simple service'} meta::external::format::openapi::transformation::fromPure::tests::simpleServiceWithGraphFetch():Service[1]
{
  let tree = #{Person{firstName,lastName}}#;
  let func = {|Person.all()->graphFetchChecked($tree)->serialize($tree)};
  ^Service
  (
    pattern = '/service/testOpenApi',
    owners = ['dummy'],
    documentation = 'dummy description',
    autoActivateUpdates = true,
    execution = ^PureSingleExecution
                (
                  func = $func,
                  mapping = personMapping,
                  runtime = []
                ),
    test = ^SingleExecutionTest
            (
            data = 'default\n'+
                    'personTable\n'+
                    'id,firstName,lastName,age\n'+
                    '1,A,Z,23\n'+
                    '\n\n\n',
            asserts = [
                        ^meta::legend::service::metamodel::TestContainer(
                            parametersValues = [],
                            assert = {res:Result<Any|*>[1]|$res.values->cast(@TabularDataSet).rows->map(r|$r.getString('firstName'))->sort() == ['A', 'B', 'C', 'D', 'E']}
                        )
                      ]
            )
  );
}

function <<meta::external::format::openapi::profiles::ServiceSpecGeneration.OpenAPI>> {doc.doc = 'Legend openapi test simple service'} meta::external::format::openapi::transformation::fromPure::tests::simpleService():Service[1]
{
  ^Service
  (
    pattern = '/service/testOpenApi',
    owners = ['dummy'],
    documentation = 'dummy description',
    autoActivateUpdates = true,
    execution = ^PureSingleExecution
                (
                  func = {|Person.all()->project(col(p|$p.firstName, 'firstName'))},
                  mapping = personMapping,
                  runtime = []
                ),
    test = ^SingleExecutionTest
            (
            data = 'default\n'+
                    'personTable\n'+
                    'id,firstName,lastName,age\n'+
                    '1,A,Z,23\n'+
                    '\n\n\n',
            asserts = [
                        ^meta::legend::service::metamodel::TestContainer(
                            parametersValues = [],
                            assert = {res:Result<Any|*>[1]|$res.values->cast(@TabularDataSet).rows->map(r|$r.getString('firstName'))->sort() == ['A', 'B', 'C', 'D', 'E']}
                        )
                      ]
            )
  );
}

function <<meta::external::format::openapi::profiles::ServiceSpecGeneration.OpenAPI>> {doc.doc = 'Legend openapi test simple service with params'} meta::external::format::openapi::transformation::fromPure::tests::simpleServiceWithParams():Service[1]
{
   ^Service
      (
         pattern = '/service/testOpenApi/{firstName}',
         owners = ['dummy'],
         documentation = 'dummy description',
         autoActivateUpdates = true,
         execution = ^PureSingleExecution
                     (
                        func = {firstName:String[1], age:Integer[1]|Person.all()->filter(p | and($p.age > $age, $p.firstName == $firstName))->project([col(p|$p.firstName, 'First Name'), col(p|$p.age, 'Age')])},
                        mapping = personMapping,
                        runtime = []
                     ),
         test = ^SingleExecutionTest
                 (
                  data = 'default\n'+
                         'personTable\n'+
                         'id,firstName,lastName,age\n'+
                         '1,A,Z,24\n'+
                         '2,C,Z,23\n'+
                         '3,D,Z,23\n'+
                         '4,B,Z,20\n'+
                         '5,A,Y,28\n'+
                         '\n\n\n',
                  asserts = [
                              ^meta::legend::service::metamodel::TestContainer(
                                 parametersValues = ['A', 20],
                                 assert = {res:Result<Any|*>[1]|$res.values->cast(@TabularDataSet).rows->map(r|$r.getString('firstName'))->sort() == ['A']}
                              )
                            ]
                 )
      );
}

function <<meta::external::format::openapi::profiles::ServiceSpecGeneration.OpenAPI>> {doc.doc = 'Legend openapi test simple service without column specification'} meta::external::format::openapi::transformation::fromPure::tests::testServiceWithoutColumnSpecification():Service[1]
{
  ^Service
  (
    pattern = '/service/test',
    owners = [ 'anonymous','testuser'],
    documentation =  '',
    autoActivateUpdates= true,
    execution = ^PureSingleExecution
                (
                  func = firstName:String[1]|meta::external::format::openapi::transformation::fromPure::tests::Person.all()->filter(p |$p.firstName == $firstName)->project([x|$x.firstName, x|$x.age ],['First Name', 'Age']),
                  mapping =  personMapping,
                  runtime = []
                )
  )
}

function <<test.Test>> meta::external::format::openapi::transformation::fromPure::tests::testServiceWithoutColumnSpecificationOpenapiString():Boolean[1]
{
  let openapi = testServiceWithoutColumnSpecification()->serviceToOpenApi(^Server(url='test'));
  let expected = readFile('/core_external_format_openapi/transformation/fromPure/tests/resources/testOpenApiSpecWithoutColumnSpec.txt')->toOne();
  assertJsonStringsEqual($expected, $openapi);
}

function <<test.Test>> meta::external::format::openapi::transformation::fromPure::tests::testServiceShouldReturnCorrectOpenapiString():Boolean[1] 
{
  let openapi = simpleService()->serviceToOpenApi(^Server(url='test'));
  let expected = readFile('/core_external_format_openapi/transformation/fromPure/tests/resources/testOpenApiSpec.txt')->toOne();
  assertJsonStringsEqual($expected, $openapi);
}

function <<test.Test>> meta::external::format::openapi::transformation::fromPure::tests::testGraphFetchServiceShouldReturnCorrectOpenapiString():Boolean[1] 
{
  let openapi = simpleServiceWithGraphFetch()->serviceToOpenApi(^Server(url='test'));
  let expected = readFile('/core_external_format_openapi/transformation/fromPure/tests/resources/testGraphFetchOpenApiSpec.txt')->toOne();
  assertJsonStringsEqual($expected, $openapi);
}

function <<test.Test>> meta::external::format::openapi::transformation::fromPure::tests::testServiceWithParamShouldReturnCorrectOpenapiString():Boolean[1]
{
  let openapi = simpleServiceWithParams()->serviceToOpenApi(^Server(url='test'));
  let expected = readFile('/core_external_format_openapi/transformation/fromPure/tests/resources/testOpenApiSpecWithServiceParams.txt')->toOne();
  assertJsonStringsEqual($expected, $openapi);
}

###Mapping
import meta::external::format::openapi::transformation::fromPure::tests::*;

Mapping meta::external::format::openapi::transformation::fromPure::tests::personMapping
(
  Person : Pure
  {
    ~src Person
    firstName : $src.firstName;
    lastName: $src.lastName;
  }
)

