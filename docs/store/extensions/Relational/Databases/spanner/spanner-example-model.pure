###Service
Service foo::service::firmService
{
  pattern: '/api/firm1Persons';
  documentation: '';
  autoActivateUpdates: true;
  execution: Single
  {
    query: |foo::domain::Firm.all()->project([p|$p.employees.name, p|$p.employees.firmId, p|$p.legalName], ['Name', 'FirmId', 'FirmName']);
    mapping: foo::mapping::firmperson;
    runtime: foo::runtime::spanner;
  }
  testSuites:
  [
    testSuite_1:
    {
      data:
      [
      ]
      tests:
      [
        test_1:
        {
          asserts:
          [
            assertion_1:
              EqualToJson
              #{
                expected:
                  ExternalFormat
                  #{
                    contentType: 'application/json';
                    data: '';
                  }#;
              }#
          ]
        }
      ]
    }
  ]
  test: Single
  {
    data: '';
    asserts:
    [
    ];
  }
}

Service foo::service::personService
{
  pattern: '/api/persons';
  documentation: '';
  autoActivateUpdates: true;
  execution: Single
  {
    query: |foo::domain::Person.all()->project([x|$x.name, x|$x.firmId], ['Name', 'FirmId']);
    mapping: foo::mapping::firmperson;
    runtime: foo::runtime::spanner;
  }
  testSuites:
  [
    testSuite_1:
    {
      data:
      [
      ]
      tests:
      [
        test_1:
        {
          asserts:
          [
            assertion_1:
              EqualToJson
              #{
                expected:
                  ExternalFormat
                  #{
                    contentType: 'application/json';
                    data: '';
                  }#;
              }#
          ]
        }
      ]
    }
  ]
  test: Single
  {
    data: '';
    asserts:
    [
    ];
  }
}

Service foo::service::customerService
{
  pattern: '/api/customers';
  documentation: '';
  autoActivateUpdates: true;
  execution: Single
  {
    query: |foo::domain::Customer.all()->project([x|$x.id, x|$x.name], ['Id', 'Name']);
    mapping: foo::mapping::customer;
    runtime: foo::runtime::spanner;
  }
  testSuites:
  [
    testSuite_1:
    {
      data:
      [
      ]
      tests:
      [
        test_1:
        {
          asserts:
          [
            assertion_1:
              EqualToJson
              #{
                expected:
                  ExternalFormat
                  #{
                    contentType: 'application/json';
                    data: '';
                  }#;
              }#
          ]
        }
      ]
    }
  ]
  test: Single
  {
    data: '';
    asserts:
    [
    ];
  }
}


###Relational
Database foo::databaseType::spanner
(
  Table CUSTOMER
  (
    ID VARCHAR(25) PRIMARY KEY,
    NAME VARCHAR(200)
  )
  Table PERSON
  (
    NAME VARCHAR(200) PRIMARY KEY,
    FIRMID INTEGER
  )
  Table FIRM
  (
    ID INTEGER PRIMARY KEY,
    LEGALNAME VARCHAR(200) PRIMARY KEY
  )

  Join Firm_Person(PERSON.FIRMID = FIRM.ID)
)


###Pure
Class foo::domain::Customer
{
  id: String[1];
  name: String[1];
}

Class foo::domain::Firm
{
  id: Integer[1];
  legalName: String[1];
  employees: foo::domain::Person[*];
}

Class foo::domain::Person
{
  name: String[1];
  firmId: Integer[1];
}


###Mapping
Mapping foo::mapping::firmperson
(
  foo::domain::Person: Relational
  {
    ~primaryKey
    (
      [foo::databaseType::spanner]PERSON.NAME
    )
    ~mainTable [foo::databaseType::spanner]PERSON
    name: [foo::databaseType::spanner]PERSON.NAME,
    firmId: [foo::databaseType::spanner]PERSON.FIRMID
  }
  foo::domain::Firm: Relational
  {
    ~primaryKey
    (
      [foo::databaseType::spanner]FIRM.ID
    )
    ~mainTable [foo::databaseType::spanner]FIRM
    id: [foo::databaseType::spanner]FIRM.ID,
    legalName: [foo::databaseType::spanner]FIRM.LEGALNAME,
    employees[foo_domain_Person]: [foo::databaseType::spanner]@Firm_Person
  }
)

Mapping foo::mapping::customer
(
  foo::domain::Customer: Relational
  {
    ~primaryKey
    (
      [foo::databaseType::spanner]CUSTOMER.ID
    )
    ~mainTable [foo::databaseType::spanner]CUSTOMER
    id: [foo::databaseType::spanner]CUSTOMER.ID,
    name: [foo::databaseType::spanner]CUSTOMER.NAME
  }
)


###Connection
RelationalDatabaseConnection foo::connection::spanner
{
  store: foo::databaseType::spanner;
  type: Spanner;
  specification: Spanner
  {
    projectId: 'legend-integration-testing';
    instanceId: 'test-instance';
    databaseId: 'test-db';
  };
  auth: GCPApplicationDefaultCredentials;
}


###Runtime
Runtime foo::runtime::spanner
{
  mappings:
  [
    foo::mapping::customer
  ];
  connections:
  [
    foo::databaseType::spanner:
    [
      connection: foo::connection::spanner
    ]
  ];
}

Runtime foo::runtime::firmperson
{
  mappings:
  [
    foo::mapping::firmperson
  ];
  connections:
  [
    foo::databaseType::spanner:
    [
      connection: foo::connection::spanner
    ]
  ];
}
