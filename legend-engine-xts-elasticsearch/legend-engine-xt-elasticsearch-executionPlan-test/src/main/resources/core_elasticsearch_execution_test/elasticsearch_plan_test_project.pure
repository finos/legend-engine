// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::*;
import meta::external::store::elasticsearch::executionTest::testCase::*;
import meta::external::store::elasticsearch::executionTest::testCase::tds::*;
import meta::external::store::elasticsearch::executionTest::test::*;
import meta::external::store::elasticsearch::executionTest::utils::*;

// function 
//   <<paramTest.Test>>
//   {doc.doc = 'Test projection on Elasticsearch with pure constant expressions'} 
// meta::external::store::elasticsearch::executionTest::testCase::tds::project::misc::testProjectExpressionConstant(config:TestConfig[1]):Boolean[1]
// {
//   $config->testTdsExpression(x|$x->project([col(x: TDSRow[1] | 'Hello World!', 'Bucket')]));
// }

// function 
//   <<paramTest.Test>>
//   {doc.doc = 'Test projection on Elasticsearch with pure constant expressions'} 
// meta::external::store::elasticsearch::executionTest::testCase::tds::project::misc::testProjectExpressionConstantWithVariable(config:TestConfig[1]):Boolean[1]
// {
//   let val = 12345;
//   $config->testTdsExpression(x|$x->project([col(x: TDSRow[1] | $val, 'Bucket')]));
// }

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure if expressions'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::misc::testProjectExpressionIf(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x|$x->extend([col(x: TDSRow[1] | if($x.getDate('ReleaseDate') >= %1990-01-01, |'90s and newer', |'Older than 90s'), 'Bucket')]));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure if expressions'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::misc::testProjectExpressionIfWithVariables(config:TestConfig[1]):Boolean[1]
{
  let var = %1990-01-01;
  $config->testTdsExpression(x|$x->extend([col(x: TDSRow[1] | if($x.getDate('ReleaseDate') >= $var, |'90s and newer', |'Older than 90s'), 'Bucket')]));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure nested if expressions'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::misc::testProjectExpressionNestedIf(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x|$x->extend([col(x: TDSRow[1] | 
          if($x.getDate('ReleaseDate') < %1990-01-01, 
            |'Oldest', 
            |if($x.getDate('ReleaseDate') < %2000-01-01, 
              |'Older',
              |if($x.getDate('ReleaseDate') < %2010-01-01, 
                |'Newer',
                |'Newest'))), 'Bucket')]));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure nested if expressions'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::misc::testProjectExpressionNestedIfWithVariables(config:TestConfig[1]):Boolean[1]
{
  let var1 = %1990-01-01;
  let var2 = %2000-01-01;
  let var3 = %2010-01-01;
  
  $config->testTdsExpression(x|$x->extend([col(x: TDSRow[1] | 
          if($x.getDate('ReleaseDate') < $var1, 
            |'Oldest', 
            |if($x.getDate('ReleaseDate') < $var2, 
              |'Older',
              |if($x.getDate('ReleaseDate') < $var3, 
                |'Newer',
                |'Newest'))), 'Bucket')]));
}