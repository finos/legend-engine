// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::*;
import meta::external::store::elasticsearch::executionTest::testCase::*;
import meta::external::store::elasticsearch::executionTest::testCase::tds::*;
import meta::external::store::elasticsearch::executionTest::test::*;
import meta::external::store::elasticsearch::executionTest::utils::*;

function 
  <<paramTest.Test>>
  {doc.doc = 'Test restrict on Elasticsearch Text property mapping'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::restrict::text::testRestrictText(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x|$x->restrict('Description'));
}


function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch Text property mapping'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::text::testProjectText(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x|$x->project(col(x: TDSRow[1] | $x.getNullableString('Description'), 'Description')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure isEmpty expression on text'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::text::testIsEmpty(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getNullableString('Description')->isEmpty(), 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure isNotEmpty expression on text'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::text::testIsNotEmpty(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getNullableString('Description')->isNotEmpty(), 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure == expression on text'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::text::testEqualValue(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getNullableString('Description') == 'A security guard\'s dreams come true when he is selected to be transformed into a cybernetic police officer.', 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure != expression on text'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::text::testNotEqualValue(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getNullableString('Description') != 'A security guard\'s dreams come true when he is selected to be transformed into a cybernetic police officer.', 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure == expression on text'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::text::testEqualValueWithVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 'A security guard\'s dreams come true when he is selected to be transformed into a cybernetic police officer.';
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getNullableString('Description') == $var, 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure != expression on text'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::text::testNotEqualValueWithVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 'A security guard\'s dreams come true when he is selected to be transformed into a cybernetic police officer.';
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getNullableString('Description') != $var, 'expression')));
}