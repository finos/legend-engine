// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::*;
import meta::external::store::elasticsearch::executionTest::testCase::*;
import meta::external::store::elasticsearch::executionTest::testCase::tds::*;
import meta::external::store::elasticsearch::executionTest::test::*;
import meta::external::store::elasticsearch::executionTest::utils::*;

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch Float property mapping'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testProjectFloat(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x|$x->project([col(x: TDSRow[1] | $x.getFloat('Revenue'), 'rev')]));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure == expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testEqualValueProject(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getFloat('Revenue') == 233.5, 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure != expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testNotEqualValueProject(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getFloat('Revenue') != 233.5, 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure > expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testGreaterThanfloat(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getFloat('Revenue') > 266.5, 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure > expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testGreaterThanReversedfloat(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | 266.5 > $x.getFloat('Revenue'), 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure >= expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testGreaterThanEqualfloat(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getFloat('Revenue') >= 266.5, 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure >= expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testGreaterThanEqualReversedfloat(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | 266.5 >= $x.getFloat('Revenue'), 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure < expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testLessThanfloat(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getFloat('Revenue') < 266.5, 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure < expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testLessThanReversedfloat(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | 266.5 < $x.getFloat('Revenue'), 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure <= expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testLessThanEqualfloat(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getFloat('Revenue') <= 266.5, 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure <= expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testLessThanEqualReversedfloat(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | 266.5 <= $x.getFloat('Revenue'), 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure == expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testEqualValueFilterWithVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 233.5;
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getFloat('Revenue') == $var, 'expression')));
}


function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure != expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testNotEqualValueFilterWithVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 233.5;
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getFloat('Revenue') != $var, 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure > expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testGreaterThanfloatWithVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 266.5;
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getFloat('Revenue') > $var, 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure > expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testGreaterThanReversedfloatWithVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 266.5;
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $var > $x.getFloat('Revenue'), 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure >= expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testGreaterThanEqualfloatWithVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 266.5;
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getFloat('Revenue') >= $var, 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure >= expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testGreaterThanEqualReversedfloatWithVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 266.5;
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $var >= $x.getFloat('Revenue'), 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure < expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testLessThanfloatWithVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 266.5;
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getFloat('Revenue') < $var, 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure < expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testLessThanReversedfloatWithVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 266.5;
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $var < $x.getFloat('Revenue'), 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure <= expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testLessThanEqualfloatWithVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 266.5;
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $x.getFloat('Revenue') <= $var, 'expression')));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test projection on Elasticsearch with pure <= expression on float'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::project::float::testLessThanEqualReversedfloatWithVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 266.5;
  $config->testTdsExpression(x | $x->extend(col(x: TDSRow[1] | $var <= $x.getFloat('Revenue'), 'expression')));
}
