// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::*;
import meta::external::store::elasticsearch::executionTest::testCase::*;
import meta::external::store::elasticsearch::executionTest::testCase::tds::*;
import meta::external::store::elasticsearch::executionTest::test::*;
import meta::external::store::elasticsearch::executionTest::utils::*;

function 
  <<paramTest.Test>>
  {doc.doc = 'Test limit on Elasticsearch'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::misc::testLimit(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->sort('_id')->limit(3));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test take on Elasticsearch'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::misc::testTake(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->sort('_id')->take(3));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test drop on Elasticsearch'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::misc::testDrop(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->sort('_id')->drop(3));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test drop and limit together on Elasticsearch'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::misc::testDropAndLimit(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->sort('_id')->drop(3)->limit(3));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test limit and drop together on Elasticsearch'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::misc::testLimitAndDrop(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->sort('_id')->limit(4)->drop(3));
  $config->testTdsExpressionReturnsEmpty(x | $x->sort('_id')->limit(3)->drop(3));
}

function
  <<paramTest.Test>>
  {doc.doc = 'Test slice on Elasticsearch'}
meta::external::store::elasticsearch::executionTest::testCase::tds::misc::testSlice(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x | $x->sort('_id')->slice(0, 1));
  $config->testTdsExpression(x | $x->sort('_id')->slice(3, 4));
}

function
  <<paramTest.Test>>
  {doc.doc = 'Test limit on Elasticsearch with variable'}
meta::external::store::elasticsearch::executionTest::testCase::tds::misc::testLimit_PureOneVariable(config:TestConfig[1]):Boolean[1]
{
  let val = 3;
  $config->testTdsExpression(x | $x->sort('_id')->limit($val));
}

function
  <<paramTest.Test>>
  {doc.doc = 'Test take on Elasticsearch with variable'}
meta::external::store::elasticsearch::executionTest::testCase::tds::misc::testTake_PureOneVariable(config:TestConfig[1]):Boolean[1]
{
  let val = 3;
  $config->testTdsExpression(x | $x->sort('_id')->take($val));
}

function
  <<paramTest.Test>>
  {doc.doc = 'Test drop on Elasticsearch with variable'}
meta::external::store::elasticsearch::executionTest::testCase::tds::misc::testDrop_PureOneVariable(config:TestConfig[1]):Boolean[1]
{
  let val = 3;
  $config->testTdsExpression(x | $x->sort('_id')->drop($val));
}

function
  <<paramTest.Test>>
  {doc.doc = 'Test drop and limit together on Elasticsearch with variable'}
meta::external::store::elasticsearch::executionTest::testCase::tds::misc::testDropAndLimit_PureOneVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 3;

  $config->testTdsExpression(x | $x->sort('_id')->drop($var)->limit($var));

  $config->testTdsExpression(x | $x->sort('_id')->drop(3)->limit($var));

  $config->testTdsExpression(x | $x->sort('_id')->drop($var)->limit(3));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test limit and drop together on Elasticsearch with variable'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::misc::testLimitAndDrop_PureOneVariable(config:TestConfig[1]):Boolean[1]
{
  let var = 4;
  let var2 = 3;

  $config->testTdsExpression(x | $x->sort('_id')->limit($var)->drop($var2));
  $config->testTdsExpressionReturnsEmpty(x | $x->sort('_id')->limit($var2)->drop($var2));

  $config->testTdsExpression(x | $x->sort('_id')->limit(4)->drop($var2));
  $config->testTdsExpressionReturnsEmpty(x | $x->sort('_id')->limit(3)->drop($var2));

  $config->testTdsExpression(x | $x->sort('_id')->limit($var)->drop(3));
  $config->testTdsExpressionReturnsEmpty(x | $x->sort('_id')->limit($var2)->drop(3));    
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test slice on Elasticsearch with variable'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::misc::testSlice_PureOneVariable(config:TestConfig[1]):Boolean[1]
{
  let var0 = 0;
  let var1 = 1;

  let var3 = 3;
  let var4 = 4;

  $config->testTdsExpression(x | $x->sort('_id')->slice($var0, $var1));
  $config->testTdsExpression(x | $x->sort('_id')->slice(0, $var1));
  $config->testTdsExpression(x | $x->sort('_id')->slice($var0, 1));

  $config->testTdsExpression(x | $x->sort('_id')->slice($var3, $var4));
  $config->testTdsExpression(x | $x->sort('_id')->slice(3, $var4));
  $config->testTdsExpression(x | $x->sort('_id')->slice($var3, 4));
}