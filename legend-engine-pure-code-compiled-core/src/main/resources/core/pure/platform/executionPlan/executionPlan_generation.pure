// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::*;
import meta::pure::extension::*;
import meta::pure::graphFetch::*;
import meta::pure::metamodel::function::*;
import meta::pure::platform::executionPlan::generation::*;
import meta::pure::router::clustering::*;
import meta::pure::router::metamodel::*;
import meta::pure::router::metamodel::clustering::*;
import meta::pure::router::platform::metamodel::clustering::*;
import meta::pure::runtime::*;

Class meta::pure::platform::executionPlan::generation::PlatformPlanGenerationState
{
   inScopeVars     : Map<String, List<Any>>[1];
   exeCtx          : ExecutionContext[1];
}

Class meta::pure::platform::executionPlan::generation::PureFunctionToProcessFunctionPair extends Pair<Function<Any>, Function<{FunctionExpression[1], PlatformPlanGenerationState[1], Extension[*], DebugContext[1] -> ExecutionNode[1]}>>
{
}

function meta::pure::platform::executionPlan::generation::processValueSpecification(vs:ValueSpecification[1], state:PlatformPlanGenerationState[1], extensions : Extension[*], debug:DebugContext[1]):ExecutionNode[0..1]
{
   $vs->match([
      f:SimpleFunctionExpression[1]         | $f->getFunctionProcessor($extensions)->eval($f, $state, $extensions, $debug), 
      c:ClusteredValueSpecification[1]      | $c->plan($state.inScopeVars, $state.exeCtx, $extensions, $debug),
      e:ExtendedRoutedValueSpecification[1] | $e.value->processValueSpecification($state, $extensions, $debug),
      i:InstanceValue[1]                    | [],
      v:ValueSpecification[1]               | []
   ]);
}

function <<access.private>> meta::pure::platform::executionPlan::generation::defaultFunctionProcessor(fe:FunctionExpression[1], state:PlatformPlanGenerationState[1], extensions : Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let children = $fe.parametersValues->evaluateAndDeactivate()->map(v|$v->recursivelyFetchClusteredValueSpecification(false))->map(v|$v->processValueSpecification($state, $extensions, $debug));
   let funcParams = $fe->findVariableExpressionsInValueSpecification()->removeDuplicatesBy(v | $v.name);
   let varInputs = $funcParams->filter(x| $state.inScopeVars->get($x.name->toOne())->isNotEmpty())->map(v | ^VariableInput(name = $v.name->toOne(), type = $v.genericType->cast(@GenericType).rawType->toOne(), multiplicity = $v.multiplicity->toOne()));

   ^PureExpressionPlatformExecutionNode
   (
      expression = $fe,
      resultType = ^ResultType(type=$fe.genericType.rawType->toOne()),
      requiredVariableInputs = $varInputs,
      resultSizeRange = $fe.multiplicity,
      executionNodes = $children,
      fromCluster = generatePlatformClusterForFunction($fe, $state.inScopeVars)
   );
}

function <<access.private>> meta::pure::platform::executionPlan::generation::serializeFunctionProcessor(fe:FunctionExpression[1], state:PlatformPlanGenerationState[1], extensions : Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let params     = $fe.parametersValues->evaluateAndDeactivate();
   let collection = $params->at(0);   
   let children   = $collection->processValueSpecification($state, $extensions, $debug);

   // Curtail the expression so that only the serialize part that is represented by the node is held
   let substitute = ^InstanceValue(values=[], genericType=$collection.genericType, multiplicity=ZeroMany);
   
   ^PureExpressionPlatformExecutionNode
   (
      expression = ^$fe(parametersValues=$substitute->concatenate($params->tail())),
      resultType = ^ResultType(type=$fe.genericType.rawType->toOne()),
      executionNodes = $children,
      fromCluster = generatePlatformClusterForFunction($fe, $state.inScopeVars)
   );
}

function <<access.private>> meta::pure::platform::executionPlan::generation::unionFunctionProcessor(fe:FunctionExpression[1], state:PlatformPlanGenerationState[1], extensions : Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let children = $fe.parametersValues->evaluateAndDeactivate()->map(v | $v->processValueSpecification($state, $extensions, $debug));
   
   let nestedNodesFromChildUnion = $children->filter(ch | $ch->instanceOf(PlatformUnionExecutionNode));
   let updatedChildren = $children->filter(ch | !$ch->in($nestedNodesFromChildUnion))->concatenate($children->filter(ch | $ch->in($nestedNodesFromChildUnion)).executionNodes);
   
   ^PlatformUnionExecutionNode
   (
      resultType = ^ResultType(type=$fe.genericType.rawType->toOne()),
      isChildrenExecutionParallelizable = true,
      executionNodes = $updatedChildren,
      fromCluster = generatePlatformClusterForFunction($fe, $state.inScopeVars)
   );
}

function <<access.private>> meta::pure::platform::executionPlan::generation::letFunctionProcessor(fe:FunctionExpression[1], state:PlatformPlanGenerationState[1], extensions : Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let subPlan   = $fe.parametersValues->at(1)->match(
                      [
                        i:InstanceValue[1]      | ^ConstantExecutionNode
                                                  (
                                                      resultType = ^ResultType(type = $i.genericType.rawType->toOne()),
                                                      resultSizeRange = $i.multiplicity,
                                                      values = $i.values->toOne()
                                                  );,
                        v:ValueSpecification[1] | $v->processValueSpecification($state, $extensions, $debug)->toOne()
                      ]
                    );

   ^AllocationExecutionNode
   (
     varName         = $fe.parametersValues->at(0)->cast(@InstanceValue).values->toOne()->cast(@String),
     resultType      = $subPlan.resultType,
     resultSizeRange = $subPlan.resultSizeRange,
     executionNodes  = $subPlan
   );
}

function <<access.private>> meta::pure::platform::executionPlan::generation::generatePlatformClusterForFunction(fe:FunctionExpression[1], inScopeVars : Map<String, List<Any>>[1]):PlatformClusteredValueSpecification[1]
{
   ^PlatformClusteredValueSpecification(
      val = $fe,
      executable=true, 
      multiplicity = $fe.multiplicity, 
      genericType  = $fe.genericType, 
      openVars = $inScopeVars
   );
}

function <<access.private>> meta::pure::platform::executionPlan::generation::getFunctionProcessor(f:SimpleFunctionExpression[1], extensions:meta::pure::extension::Extension[*]):meta::pure::metamodel::function::Function<{FunctionExpression[1], PlatformPlanGenerationState[1], Extension[*], DebugContext[1] -> ExecutionNode[1]}>[1]
{
   let specificProcessorsForFunctions = 
      newMap([
        ^PureFunctionToProcessFunctionPair(first = meta::pure::functions::collection::concatenate_T_MANY__T_MANY__T_MANY_, second = unionFunctionProcessor_FunctionExpression_1__PlatformPlanGenerationState_1__Extension_MANY__DebugContext_1__ExecutionNode_1_),
        ^PureFunctionToProcessFunctionPair(first = meta::pure::functions::lang::letFunction_String_1__T_m__T_m_, second = letFunctionProcessor_FunctionExpression_1__PlatformPlanGenerationState_1__Extension_MANY__DebugContext_1__ExecutionNode_1_),
        ^PureFunctionToProcessFunctionPair(first = meta::pure::graphFetch::execution::serialize_T_MANY__RootGraphFetchTree_1__String_1_, second = serializeFunctionProcessor_FunctionExpression_1__PlatformPlanGenerationState_1__Extension_MANY__DebugContext_1__ExecutionNode_1_),
        ^PureFunctionToProcessFunctionPair(first = meta::pure::graphFetch::execution::serialize_Checked_MANY__RootGraphFetchTree_1__String_1_, second = serializeFunctionProcessor_FunctionExpression_1__PlatformPlanGenerationState_1__Extension_MANY__DebugContext_1__ExecutionNode_1_),
        ^PureFunctionToProcessFunctionPair(first = meta::pure::graphFetch::execution::serialize_T_MANY__RootGraphFetchTree_1__AlloySerializationConfig_1__String_1_, second = serializeFunctionProcessor_FunctionExpression_1__PlatformPlanGenerationState_1__Extension_MANY__DebugContext_1__ExecutionNode_1_),
        ^PureFunctionToProcessFunctionPair(first = meta::pure::graphFetch::execution::serialize_Checked_MANY__RootGraphFetchTree_1__AlloySerializationConfig_1__String_1_, second = serializeFunctionProcessor_FunctionExpression_1__PlatformPlanGenerationState_1__Extension_MANY__DebugContext_1__ExecutionNode_1_),
        ^PureFunctionToProcessFunctionPair(first = meta::pure::functions::collection::union_T_MANY__T_MANY__T_MANY_, second = unionFunctionProcessor_FunctionExpression_1__PlatformPlanGenerationState_1__Extension_MANY__DebugContext_1__ExecutionNode_1_)         
      ]);
   
   if($specificProcessorsForFunctions->get($f.func)->isNotEmpty(),
      |$specificProcessorsForFunctions->get($f.func)->toOne(),
      |defaultFunctionProcessor_FunctionExpression_1__PlatformPlanGenerationState_1__Extension_MANY__DebugContext_1__ExecutionNode_1_
   );
}
