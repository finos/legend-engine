// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::mapping::aggregationAware::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::metamodel::serialization::grammar::*;
import meta::pure::metamodel::treepath::*;
import meta::pure::extension::*;
import meta::pure::router::printer::*;
import meta::pure::runtime::*;
import meta::pure::router::clustering::*;
import meta::pure::router::metamodel::clustering::*;

function meta::pure::executionPlan::toString::planToStringWithoutFormatting(e:ExecutionPlan[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
   $e->planToString($extensions)->replace('\n', '')->replace(' ', '');
}

function meta::pure::executionPlan::toString::planToString(e:ExecutionPlan[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
   $e.rootExecutionNode->planNodeToString('', $extensions);
}

function meta::pure::executionPlan::toString::planToString(e:ExecutionPlan[1], showImplementation:Boolean[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
   $e.rootExecutionNode->planNodeToString('', $extensions) + if($showImplementation, |$e.globalImplementationSupport->printImplementation('globalImplementationSupport', '', $extensions), |'');
}

function <<access.public>> meta::pure::executionPlan::toString::planNodeToString(e:ExecutionNode[1], space:String[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
   let root = $e->match(
      $extensions.executionPlanExtensions().printPlanNodeToString->map(x|$x->eval($space, $extensions))->concatenate(
      [
         p:PureExpressionPlatformExecutionNode[1]|'PureExp\n'+$space+'('+header($p, $space, $extensions)+'\n'+$space+'  expression = '+$p.expression->asString(^Pref(useClusterIndex=true, clusterIndex=extractClusters($p.executionNodes, $extensions)))+$e->childrenToString($space+'  ', $extensions)+'\n'+$p.implementation->printImplementation('implementation', $space+'  ', $extensions)+$space+')\n',
         p:PlatformUnionExecutionNode[1]|'PlatformUnion\n'+$space+'('+header($p, $space, $extensions)+$space+'  isChildrenExecutionParallelizable = '+$p.isChildrenExecutionParallelizable->orElse(false)->toString()+'\n'+'\n'+$e->childrenToString($space+'  ', $extensions)+'\n'+$p.implementation->printImplementation('implementation', $space+'  ', $extensions)+$space+')\n',
         p:PlatformMergeExecutionNode[1]|'PlatformMerge\n'+$space+'('+header($p, $space, $extensions)+'\n'+$e->childrenToString($space+'  ', $extensions)+'\n'+$p.implementation->printImplementation('implementation', $space+'  ', $extensions)+$space+')\n',
         p:SequenceExecutionNode[1]|'Sequence\n'+$space+'('+header($p, $space, $extensions)+$e->childrenToString($space+'  ', $extensions)+'\n'+$space+')\n',
         f:FreeMarkerConditionalExecutionNode[1]|'FreeMarkerConditionalExecutionNode\n'+$space+'('+header($f, $space, $extensions)+'\n' + $space + '  condition = ' +  $f.freeMarkerBooleanExpression + '\n' + $space + '  trueBlock = \n' + $space + '  (\n' + $f.trueBlock->planNodeToString($space+'    ', $extensions)+ $space + '  )\n' + if($f.falseBlock->isEmpty(),|'',| $space + '  falseBlock = \n' + $space + '  (\n' + $f.falseBlock->toOne()->planNodeToString($space+'    ', $extensions)+ $space + '  )\n')+$space+')\n',
         ag:AggregationAwareExecutionNode[1]|'AggregationAware\n'+$space+'('+header($ag, $space, $extensions)+'\n'+$space+ '  activity=' + $ag.aggregationAwareActivity+$e->childrenToString($space+'  ', $extensions)+'\n'+$space+')\n',
         a:AllocationExecutionNode[1]|'Allocation\n'+$space+'('+header($a, $space, $extensions)+'\n'+$space+'  name = '+$a.varName+'\n'+$space+'  value = '+$e->childrenToString($space+'    ', $extensions)+'\n'+$space+')\n',
         c:ConstantExecutionNode[1]|'Constant\n'+$space+'('+header($c, $space, $extensions)+'\n'+$space+'  values=['+$c.values->makeString(',')+']\n'+$space+')\n',
         p:MultiResultSequenceExecutionNode[1]|'MultiResultSequence\n'+$space+'('+header($p, $space, $extensions)+$e->childrenToString($space+'  ', $extensions)+'\n'+$space+')\n',
         p:ErrorExecutionNode[1]|'Error\n'+$space+'('+header($p, $space, $extensions)+'\n'+$space+'  message = '+ $p.message->replace('\n', '\\n')->replace('\r','\\r')+$e->childrenToString($space+'  ', $extensions)+'\n'+$space+')\n',
         e:FunctionParametersValidationNode[1] | 'FunctionParametersValidationNode\n'+ $space+ '(' + '\n'+ $space +'  functionParameters = '+  $e.functionParameters->map(p|$p.name+':'+$p.type->elementToPath()+ '[' + printMultiplicity($p.multiplicity->toOne()) + ']')->makeString('[',', ',']')+'\n'+$space+')\n',
         g:meta::pure::graphFetch::executionPlan::GlobalGraphFetchExecutionNode[1] | $g->meta::pure::graphFetch::executionPlan::globalGraphFetchExecutionNodeToString($space, $extensions),
         g:meta::pure::mapping::modelToModel::graphFetch::executionPlan::StoreStreamReadingExecutionNode[1] | $g->meta::pure::mapping::modelToModel::graphFetch::executionPlan::storeStreamReadingExecutionNodeToString($space, $extensions),
         i:meta::pure::mapping::modelToModel::graphFetch::executionPlan::InMemoryGraphFetchExecutionNode[1] | $i->meta::pure::mapping::modelToModel::graphFetch::executionPlan::inMemoryGraphFetchExecutionNodeToString($space, $extensions),
         v:VariableResolutionExecutionNode[1] | 'VariableResolution\n' + $space + '(' + header($v, $space, $extensions) + '\n' + $space + '  varName = ' + $v.varName + '\n' + $v->childrenToString($space+'  ', $extensions) + '\n' + $space + ')\n',
         p:meta::pure::graphFetch::executionPlan::PlatformPrimitiveQualifierLocalGraphFetchExecutionNode[1] | $p->meta::pure::graphFetch::executionPlan::platformPrimitiveQualifierLocalGraphFetchExecutionNodeToString($space, $extensions)
      ])->toOneMany()
   );
   $space + $root;
}

function <<access.public>> meta::pure::executionPlan::toString::printImplementation(e:PlatformImplementation[0..1], key:String[1], space:String[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
   if ($e->isEmpty(),
    | '',
    | $space+$key+'\n'+
      $space+'(\n'+
      $e->match([
         j:JavaPlatformImplementation[1] |
            if($j.executionClassFullName->isEmpty(), |'', |$space+'  calls = '+$j.executionClassFullName->toOne()+if($j.executionMethodName->isEmpty(), |'', |'.'+$j.executionMethodName->toOne())+'\n') +   
            if($j.classes->isEmpty(),|'',|$space+'  classes =\n' + $j.classes->map({class |
               let sourceLines = $class.source->replace('\n\n', '\n<<EMPTY>>\n')
                                               ->split('\n')
                                               ->fold({l,p|pair($p.first+1, $p.second+format($space+'      %04d %s\n', [$p.first, if($l == '<<EMPTY>>', |'', |$l)]))}, pair(1, '')).second;
               $space+'      '+$class.package+'.'+$class.name+'\n'+$sourceLines+if($class.byteCode->isEmpty(),|'',|$space+'      byteCode: ' + $class.byteCode->toOne()->substring(0,40)+'...'+'\n');
            })->joinStrings('\n'))
      ]) +
      $space+')\n'
   )
}

function <<access.private>> meta::pure::executionPlan::toString::extractClusters(nodes:ExecutionNode[*], extensions:meta::pure::extension::Extension[*]):ClusteredValueSpecification[*]
{
   let res = $nodes.fromCluster;
   assertEquals($res->size(), $nodes->size());
   $res;
}


function meta::pure::executionPlan::toString::header(e:ExecutionNode[1], space:String[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
   '\n'+ $space+'  type = '+$e.resultType->typeToString($space, $extensions)+if($e.resultSizeRange->isEmpty(),|'',|'\n'
       + $space+'  resultSizeRange = '+$e.resultSizeRange->toOne()->meta::pure::metamodel::serialization::grammar::printMultiplicity())
       + if($e.requiredVariableInputs->isEmpty(), |'', | '\n' + $space+'  requires = '+$e.requiredVariableInputs->map(source | $source.name + '(' + $source.type->elementToPath() + '[' + $source.multiplicity->meta::pure::metamodel::serialization::grammar::printMultiplicity() +'])')->joinStrings('[',', ',']'));
}

function meta::pure::executionPlan::toString::childrenToString(e:ExecutionNode[*], space:String[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
  meta::pure::executionPlan::toString::nodesToString($e.executionNodes, $space, $extensions);
}

function meta::pure::executionPlan::toString::nodesToString(nodes:ExecutionNode[*], space:String[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
   if($nodes->isEmpty(),|'',|'\n'+$space+'(\n'+$nodes->map(c|$c->planNodeToString($space+'  ', $extensions))->makeString('')+$space+')');
}

function <<access.private>> meta::pure::executionPlan::toString::typeToString(e:ResultType[1], space:String[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
   $e->match(
      $extensions.executionPlanExtensions().printTypeToString->map(e|$e->eval($space, $extensions))->concatenate(
      [
         partialClassResultType : PartialClassResultType[1]|'PartialClass[impls=['+$partialClassResultType.setImplementations->map(se|'('+$se.class->elementToPath()+' | '+$se.parent.name->toOne()+'.'+$se.id+')')->joinStrings(',')+'], propertiesWithParameters = ['+$partialClassResultType.propertiesWithParameters->map(x | if($x.property->instanceOf(Property), | $x.property.name->toOne(), | $x.parameters->map(x | $x->asString())->joinStrings($x.property.name->toOne() + '(', ', ', ')')))->sort()->joinStrings(', ')+']]',
         classResultType : ClassResultType[1]|'Class[impls='+$classResultType.setImplementations->map(se|'('+$se.class->elementToPath()+' | '+$se.parent.name->toOne()+'.'+$se.id+')')->joinStrings(',')+']'+if($classResultType.genericType->isEmpty(), |'', |'\n'+$space+'         as '+$classResultType.genericType->toOne()->printGenericType()),
         voidResultType : VoidResultType[1]|'Void',
         e:ResultType[1] | $e.type->elementToPath()
      ])->toOneMany()
   )
}

function meta::pure::executionPlan::toString::connectionToString(connection:Connection[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
   $connection->class() ->toString() + '('+
   $connection->match(
               $extensions.executionPlanExtensions().printConnectionToString->map(x|$x->eval($extensions))->concatenate(
               [
                   connection:Connection[1] | $connection.element ->toString()
               ])->toOneMany()
            )
   + ')'
}