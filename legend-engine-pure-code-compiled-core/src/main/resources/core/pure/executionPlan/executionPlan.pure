// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::router::clustering::*;
import meta::pure::router::metamodel::clustering::*;
import meta::pure::runtime::*;
import meta::pure::mapping::*;

Profile meta::pure::executionPlan::profiles::serverVersion
{
    tags: [exclude,start];
}

Class meta::pure::executionPlan::ResultType
{
   type        : Type[1];
   genericType : GenericType[0..1];
}

Class meta::pure::executionPlan::ClassResultType extends ResultType
{
   setImplementations : SetImplementation[*];
}

Class meta::pure::executionPlan::VoidResultType extends ResultType
{
}

Class meta::pure::executionPlan::TDSResultType extends ResultType
{
   tdsColumns : TDSColumn[*];
}

Class meta::pure::executionPlan::PartialClassResultType extends ClassResultType
{
   propertiesWithParameters: PropertyWithParameters[*];
}

Class meta::pure::executionPlan::PropertyWithParameters
{
   property   : AbstractProperty<Any>[1];
   parameters : ValueSpecification[*];
}

Class meta::pure::executionPlan::DataTypeResultType extends ResultType
{
}

Class meta::pure::executionPlan::ExecutionPlan
{
   func : FunctionDefinition<Any>[1];
   mapping : Mapping[1];
   runtime : Runtime[1];
   rootExecutionNode : ExecutionNode[1];
   processingTemplateFunctions :String[*];
   <<doc.deprecated>>
   authDependent: Boolean[1];
   kerberos: String [0..1];
   globalImplementationSupport: PlatformImplementation[0..1];
}

Class meta::pure::executionPlan::ExecutionNode
{
   fromCluster      : ClusteredValueSpecification[0..1];
   resultType       : ResultType[1];
   resultSizeRange  : Multiplicity[0..1];
   executionNodes   : ExecutionNode[*];
   authDependent    : Boolean[0..1];
   kerberos         : String[0..1];
   supportFunctions : String[*];
   requiredVariableInputs : VariableInput[*];
   
   implementation   : PlatformImplementation[0..1];

   childNodes()
   {
      $this.executionNodes->fold({n,accum| $accum->concatenate($n.childNodes()); },[$this]);
   } : ExecutionNode[*];
}

Class meta::pure::executionPlan::VariableInput
{
   name         : String[1];
   type         : Type[1];
   multiplicity : Multiplicity[1];
}

Class meta::pure::executionPlan::SequenceExecutionNode extends meta::pure::executionPlan::ExecutionNode
{
}

Class meta::pure::executionPlan::MultiResultSequenceExecutionNode extends meta::pure::executionPlan::ExecutionNode
{
}

Class meta::pure::executionPlan::PureExpressionPlatformExecutionNode extends meta::pure::executionPlan::ExecutionNode
{
   expression : ValueSpecification[1];
}

Class meta::pure::executionPlan::PlatformUnionExecutionNode extends meta::pure::executionPlan::ExecutionNode
{
  isChildrenExecutionParallelizable : Boolean[0..1];
}

Class meta::pure::executionPlan::PlatformMergeExecutionNode extends meta::pure::executionPlan::ExecutionNode
{
}

Class meta::pure::executionPlan::FreeMarkerConditionalExecutionNode extends meta::pure::executionPlan::ExecutionNode
[
   $this.freeMarkerBooleanExpression->startsWith('${(') && $this.freeMarkerBooleanExpression->endsWith(')?c}')
]
{
   freeMarkerBooleanExpression   : String[1];
   trueBlock                     : ExecutionNode[1];
   falseBlock                    : ExecutionNode[0..1];
}

Class meta::pure::executionPlan::VariableResolutionExecutionNode extends meta::pure::executionPlan::ExecutionNode
{
   varName : String[1];
}

Class meta::pure::executionPlan::PlatformImplementation
{
}

Class meta::pure::executionPlan::JavaPlatformImplementation extends meta::pure::executionPlan::PlatformImplementation
{
   classes                : JavaClass[*];
   executionClassFullName : String[0..1];
   executionMethodName    : String[0..1];
}

Class meta::pure::executionPlan::JavaClass
{
   package  : String[1];
   name     : String[1];
   source   : String[1];
   byteCode : String[0..1];
}

Class meta::pure::executionPlan::CompiledClass
{
   className : String[1];
   byteCode : String[1];
}

Class meta::pure::executionPlan::AllocationExecutionNode extends meta::pure::executionPlan::ExecutionNode
{
   varName : String[1];
   realizeInMemory : Boolean[0..1];
}

Class meta::pure::executionPlan::ConstantExecutionNode extends meta::pure::executionPlan::ExecutionNode
{
   values : Any[1];
}

Class meta::pure::executionPlan::ErrorExecutionNode extends meta::pure::executionPlan::ExecutionNode
{
   message : String[1];
}

Class meta::pure::executionPlan::FunctionParametersValidationNode extends meta::pure::executionPlan::ExecutionNode
{
   functionParameters : FunctionParameter[*];
   parameterValidationContext : ParameterValidationContext[*];
}

Class meta::pure::executionPlan::ParameterValidationContext
{
   varName: String[1];
}

Class meta::pure::executionPlan::EnumValidationContext extends ParameterValidationContext
{
   validEnumValues: String[*];
}

Class meta::pure::executionPlan::FunctionParameter
{
   name : String[1];
   type : Type[1];
   supportsStream : Boolean[0..1];
   multiplicity: Multiplicity[0..1];
}

Class meta::pure::mapping::aggregationAware::AggregationAwareExecutionNode extends ExecutionNode
{
      aggregationAwareActivity: String[1];
}
