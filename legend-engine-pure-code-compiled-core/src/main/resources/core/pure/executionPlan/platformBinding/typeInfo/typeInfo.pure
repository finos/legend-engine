// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::platformBinding::typeInfo::*;
import meta::pure::extension::*;
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::lineage::scanProperties::*;
import meta::pure::mapping::*;
import meta::pure::metamodel::constraint::*;
import meta::pure::metamodel::serialization::grammar::*;
import meta::pure::milestoning::*;



Class <<typemodifiers.abstract>> meta::pure::executionPlan::platformBinding::typeInfo::TypeInfoSet
{
   typeInfos: TypeInfo[*];
}

Class <<typemodifiers.abstract>> meta::pure::executionPlan::platformBinding::typeInfo::TypeInfo
{
   type: meta::pure::metamodel::type::Type[1];
}

Class meta::pure::executionPlan::platformBinding::typeInfo::EnumerationTypeInfo extends TypeInfo
{
   enumeration() { $this.type->cast(@meta::pure::metamodel::type::Enumeration<Any>) }: meta::pure::metamodel::type::Enumeration<Any>[1];
}

Class <<typemodifiers.abstract>> meta::pure::executionPlan::platformBinding::typeInfo::ConstraintInfo
{
   id           : String[1];
   constraint   : Constraint[1];
   propertyTree : meta::pure::lineage::scanProperties::propertyTree::PropertyPathTree[1];
}

Class meta::pure::executionPlan::platformBinding::typeInfo::ClassTypeInfo extends TypeInfo
{
   properties          : Property<Nil,Any|*>[*];
   supertypes          : meta::pure::metamodel::type::Class<Any>[*];
   qualifiedProperties : QualifiedProperty<Any>[*];
   constraints         : ConstraintInfo[*];
   isNewInstanceAllowed        : Boolean[1];

   class() { $this.type->cast(@meta::pure::metamodel::type::Class<Any>) }: meta::pure::metamodel::type::Class<Any>[1];
}

Class meta::pure::executionPlan::platformBinding::typeInfo::UnitTypeInfo extends TypeInfo
{
   measure: Measure[1];
   conversionFunction: FunctionDefinition<Any>[1];

   unit() { $this.type->cast(@Unit) }: Unit[1];
}

function meta::pure::executionPlan::platformBinding::typeInfo::newTypeInfoSet(): TypeInfoSet[1]
{
   ^TypeInfoSet();
}

function meta::pure::executionPlan::platformBinding::typeInfo::addForClasses(info:TypeInfoSet[1], classes: Class<Any>[*]): TypeInfoSet[1]
{
   $classes->fold({c, i| $i->addForClass($c)}, $info);
}

function meta::pure::executionPlan::platformBinding::typeInfo::addForType(info:TypeInfoSet[1], type:Type[1]): TypeInfoSet[1]
{
   $info->addBasicTypeInfoIfMissing($type);
}

function meta::pure::executionPlan::platformBinding::typeInfo::addForClass(info:TypeInfoSet[1], class: Class<Any>[1]): TypeInfoSet[1]
{
   $info->addBasicTypeInfoIfMissing($class);
}

function meta::pure::executionPlan::platformBinding::typeInfo::addForClassesWithAllProperties(info:TypeInfoSet[1], classes: Class<Any>[*]): TypeInfoSet[1]
{
   $classes->fold({c, i| $i->addForClassWithAllProperties($c)}, $info);
}

function meta::pure::executionPlan::platformBinding::typeInfo::addForClassWithAllProperties(info:TypeInfoSet[1], class: Class<Any>[1]): TypeInfoSet[1]
{
   let basic          = $info->addBasicTypeInfoIfMissing($class);
   let plusProperties = $class.properties->fold({p, i| $i->addPropertyForClassIfMissing($class, $p)}, $basic);
   $class.qualifiedProperties->fold({q, i| $i->addQualifiedPropertyForClassIfMissing($class, $q)}, $plusProperties);
}

function meta::pure::executionPlan::platformBinding::typeInfo::addForClassWithAllPropertiesViaAssociations(info:TypeInfoSet[1], class:Class<Any>[1]) : TypeInfoSet[1]
{
   let basic = $info->addBasicTypeInfoIfMissing($class);
   $class.propertiesFromAssociations->fold({p,i | $i->addPropertyForClassIfMissing($class, $p)}, $basic);
}

function meta::pure::executionPlan::platformBinding::typeInfo::addForClass(info:TypeInfoSet[1], class:Class<Any>[1], includeSimple:Boolean[1], includeComplex:Boolean[1], includeDerived:Boolean[1], includeAssociations:Boolean[1]) : TypeInfoSet[1]
{
   let basic       = $info->addBasicTypeInfoIfMissing($class);
   let plusSimple  = if($includeSimple,
                        | $class.properties->filter(p|$p->isPrimitiveValueProperty())->fold(
                             {p, i|
                                $i->addBasicTypeInfoIfMissing($p.genericType.rawType->toOne())
                                  ->addPropertyForClassIfMissing($class, $p);
                             }, 
                             $basic
                          ),
                        | $basic
                     );
   let plusComplex = if($includeComplex,
                        | $class.properties->filter(p|!$p->isPrimitiveValueProperty())->fold({p, i| $i->addPropertyForClassIfMissing($class, $p)}, $plusSimple),
                        | $plusSimple
                     );
   let plusDerived = if($includeDerived,
                        | $class.qualifiedProperties->fold({q, i| $i->addQualifiedPropertyForClassIfMissing($class, $q)}, $plusComplex),
                        | $plusComplex
                     );
   let withAssoc   = if($includeAssociations,
                        | $class.propertiesFromAssociations->fold({p,i | $i->addPropertyForClassIfMissing($class, $p)}, $plusDerived),
                        | $plusDerived
                     );
   
   $withAssoc->forClass($class).supertypes->fold({c, set | $set->addForClass($c, $includeSimple, $includeComplex, $includeDerived, $includeAssociations)}, $withAssoc);
}

function meta::pure::executionPlan::platformBinding::typeInfo::addProperties(info:TypeInfoSet[1], properties:Property<Nil,Any|*>[*]): TypeInfoSet[1]
{
   $properties->fold({p, ti| $ti->addPropertyForTypeIfMissing($p, false)}, $info);
}

function meta::pure::executionPlan::platformBinding::typeInfo::addForGraphFetchTree(info:TypeInfoSet[1], tree: GraphFetchTree[1]): TypeInfoSet[1]
{
   $info->typeInfoFromTree($tree);
}

function meta::pure::executionPlan::platformBinding::typeInfo::addConstraintsForGraphFetchTree(info:TypeInfoSet[1], tree: GraphFetchTree[1]): TypeInfoSet[1]
{
   $info->constraintInfoFromTree($tree);
}

function meta::pure::executionPlan::platformBinding::typeInfo::addForInstanceSetImplementations(info:TypeInfoSet[1], setImplementations:InstanceSetImplementation[*]): TypeInfoSet[1]
{
   $info->typeInfoFromInstanceSetImplementations($setImplementations);
}

function meta::pure::executionPlan::platformBinding::typeInfo::allClassInfos(info:TypeInfoSet[1]): ClassTypeInfo[*]
{
   $info.typeInfos->filter(ti| $ti->instanceOf(ClassTypeInfo))->cast(@ClassTypeInfo);
}

function meta::pure::executionPlan::platformBinding::typeInfo::allEnumerationInfos(info:TypeInfoSet[1]): EnumerationTypeInfo[*]
{
   $info.typeInfos->filter(ti| $ti->instanceOf(EnumerationTypeInfo))->cast(@EnumerationTypeInfo);
}

function meta::pure::executionPlan::platformBinding::typeInfo::allUnitInfos(info:TypeInfoSet[1]): UnitTypeInfo[*]
{
   $info.typeInfos->filter(ti| $ti->instanceOf(UnitTypeInfo))->cast(@UnitTypeInfo);
}

function meta::pure::executionPlan::platformBinding::typeInfo::forType(info:TypeInfoSet[1], type:Type[1]): TypeInfo[1]
{
   let forType = $info.typeInfos->filter(ti| $ti.type == $type);
   assert($forType->size() == 1, |'Type ' + if($forType->isEmpty(), |'missing', |'duplicated') + ': ' + $type->elementToPath());
   $forType->toOne();
}

function meta::pure::executionPlan::platformBinding::typeInfo::forClass(info:TypeInfoSet[1], class:Class<Any>[1]): ClassTypeInfo[1]
{
   $info->forType($class)->cast(@ClassTypeInfo);
}

function meta::pure::executionPlan::platformBinding::typeInfo::forSupertypesOf(info:TypeInfoSet[1], class:Class<Any>[1]): ClassTypeInfo[*]
{
   $info->forClass($class).supertypes->map(s| $info->forClass($s));
}

function meta::pure::executionPlan::platformBinding::typeInfo::forEnumeration(info:TypeInfoSet[1], enumeration:Enumeration<Any>[1]): EnumerationTypeInfo[1]
{
   $info->forType($enumeration)->cast(@EnumerationTypeInfo);
}

function meta::pure::executionPlan::platformBinding::typeInfo::forUnit(info:TypeInfoSet[1], unit:Unit[1]): UnitTypeInfo[1]
{
   $info->forType($unit)->cast(@UnitTypeInfo);
}

function meta::pure::executionPlan::platformBinding::typeInfo::containsProperty(info:TypeInfoSet[1], property:AbstractProperty<Any>[1]): Boolean[1]
{
   let class = $property->ownerClass();
   $info.typeInfos
      ->filter(ti| $ti.type == $class)
      ->match([
           c: ClassTypeInfo[1] | $property->match([
                                               p:Property<Nil,Any|*>[1]    | $c.properties->contains($p),
                                               q:QualifiedProperty<Any>[1] | $c.qualifiedProperties->contains($q)
                                            ]) ,
           a: Any[*]           | false;
        ]);
}

function meta::pure::executionPlan::platformBinding::typeInfo::allProperties(info:TypeInfoSet[1], class:Class<Any>[1]): Property<Nil,Any|*>[*]
{
   $info->allProperties($info->forClass($class))
}

function meta::pure::executionPlan::platformBinding::typeInfo::allProperties(info:TypeInfoSet[1], classInfo:ClassTypeInfo[1]): Property<Nil,Any|*>[*]
{
   $classInfo.supertypes->fold(
      {supertype, properties|
         let notOverriden = $info->forClass($supertype).properties->filter(p| !$p.name->in($properties.name));   
         $properties->concatenate($notOverriden);
      },
      $classInfo.properties
   );
}

function meta::pure::executionPlan::platformBinding::typeInfo::allQualifiedProperties(info:TypeInfoSet[1], class:Class<Any>[1]): QualifiedProperty<Any>[*]
{
   $info->allQualifiedProperties($info->forClass($class))
}

function meta::pure::executionPlan::platformBinding::typeInfo::allQualifiedProperties(info:TypeInfoSet[1], classInfo:ClassTypeInfo[1]): QualifiedProperty<Any>[*]
{
   $classInfo.supertypes->fold(
      {supertype, qualifiedProperties|
         let notOverriden = $info->forClass($supertype).qualifiedProperties->filter(p| !$p.name->in($qualifiedProperties.name));   
         $qualifiedProperties->concatenate($notOverriden);
      },
      $classInfo.qualifiedProperties
   );
}

function meta::pure::executionPlan::platformBinding::typeInfo::valueProperties(info:TypeInfoSet[1], class:Class<Any>[1]): AbstractProperty<Any>[*]
{
   $info->valueProperties($info->forClass($class))
}

function meta::pure::executionPlan::platformBinding::typeInfo::valueProperties(info:TypeInfoSet[1], classInfo:ClassTypeInfo[1]): AbstractProperty<Any>[*]
{
   $info->allProperties($classInfo)->filter(p|$p->isPrimitiveValueProperty());
}

function meta::pure::executionPlan::platformBinding::typeInfo::classDependenciesViaPropertiesWithSubTypes(info:TypeInfoSet[1], class:Class<Any>[1]): Class<Any>[*]
{
   classDependenciesViaPropertiesWithSubTypes($info, $class, false);
}

function meta::pure::executionPlan::platformBinding::typeInfo::classDependenciesViaPropertiesWithSubTypes(info:TypeInfoSet[1], class:Class<Any>[1], getClassSubTypes:Boolean[1]): Class<Any>[*]
{
   let cd = $info
      ->classPropertiesRecursiveWithsubTypes($class, [])
      ->map(p| $p.genericType.rawType)
      ->cast(@Class<Any>)
      ->removeDuplicatesBy(classEqualityKey());

   let cdSubTypes = $cd->map(c | $c->getSpecializations())->filter(s | $info.typeInfos->exists(ti | $ti.type == $s));

   if($getClassSubTypes,
        |  let classSubtypes = $class->getSpecializations()->filter(s | $info.typeInfos->exists(ti | $ti.type == $s));
           $cd->concatenate($cdSubTypes)->concatenate($classSubtypes);,
        |  $cd->concatenate($cdSubTypes)
    )->filter($class->isNotClassFn())
      ->remove(Any)
      ->cast(@Class<Any>)
      ->removeDuplicatesBy(classEqualityKey());
}

function meta::pure::executionPlan::platformBinding::typeInfo::enumDependenciesViaProperties(info:TypeInfoSet[1], class:Class<Any>[1]): Enumeration<Any>[*]
{
   let directProperties     = $info->allProperties($class);
   let dependencyProperties = $info->classDependenciesViaPropertiesWithSubTypes($class)->map(c| $info->allProperties($c));
   
   $directProperties
      ->concatenate($dependencyProperties)
      ->filter(p| $p.genericType.rawType->toOne()->instanceOf(Enumeration))
      ->map(p| $p.genericType.rawType)
      ->cast(@Enumeration<Any>)
      ->removeDuplicatesBy(enumerationEqualityKey());
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::classPropertiesRecursiveWithsubTypes(info:TypeInfoSet[1], class:Class<Any>[1], visitedClasses:Class<Any>[*]):AbstractProperty<Any>[*]
{
   if($class->in($visitedClasses) || $class == Any,
      |[],
      {|
         let forThisClass        = $info->allProperties($class)->filter(p| $p.genericType.rawType->toOne()->instanceOf(Class));
         let forThisWithSubtypes = $forThisClass->concatenate($class->getSpecializations()->filter(s |  $info.typeInfos->exists(ti | $ti.type == $s->cast(@Type)))->map(g | $info->allProperties($g)->filter(p| $p.genericType.rawType->toOne()->instanceOf(Class))));
         
         let forChildren         = $forThisWithSubtypes.genericType.rawType->cast(@Class<Any>)->removeDuplicatesBy(classEqualityKey())->map(c| $info->classPropertiesRecursiveWithsubTypes($c, $visitedClasses->concatenate($class)));
         $forThisWithSubtypes->concatenate($forChildren);
      }
   );
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::typeInfoFromTree(info:TypeInfoSet[1], tree:GraphFetchTree[1]): TypeInfoSet[1]
{
   let types = $tree->match([
      r: RoutedGraphFetchTree[1]    | if($r.sets->isNotEmpty(),
                                         | $r.sets->cast(@InstanceSetImplementation)->map(set| if($set.mappingClass->isNotEmpty(), | $set.mappingClass->toOne(), | $set.class)),
                                         {|
                                            $r->match([
                                               r: RoutedRootGraphFetchTree<Any>[1] | $r.class,
                                               p: RoutedPropertyGraphFetchTree[1]  | $p.property.genericType.rawType->concatenate($p.subType)
                                            ])
                                         }
                                      ),
      st: SubTypeGraphFetchTree[1]  |  $st.subTypeClass,
      r: RootGraphFetchTree<Any>[1] | $r.class,
      p: PropertyGraphFetchTree[1]  | $p.property.genericType.rawType->concatenate($p.subType) 
   ]);
   let withThisType = $types->fold({t, tis| $tis->addBasicTypeInfoIfMissing($t)}, $info);
   
   let classes = $types->filter(t| $t->instanceOf(Class))->cast(@Class<Any>);
   
   let milestoneProperties = $classes.properties->filter(p|$p->isPrimitiveValueProperty() && $p->hasGeneratedMilestoningPropertyStereotype());
   let withMilestoning     = $withThisType->addProperties($milestoneProperties);

   let requiredQP = $tree->match([
      ergft: ExtendedRootGraphFetchTree<Any>[1] | $ergft.requiredQualifiedProperties,
      epgft: ExtendedPropertyGraphFetchTree[1]  | $epgft.requiredQualifiedProperties,
      rrgft: RoutedRootGraphFetchTree<Any>[1]   | $rrgft.requiredQualifiedProperties,
      rpgft: RoutedPropertyGraphFetchTree[1]    | $rpgft.requiredQualifiedProperties,
      gft  : GraphFetchTree[1]                  | []
   ]);
   let withRequiredQualifiers = $requiredQP->fold({qp,tis |$tis->addQualifiedPropertyForTypeIfMissing($qp)}, $withMilestoning);
   
   let withPropertySubtrees= $tree.subTrees->map(x | $x->meta::pure::graphFetch::routing::byPassClusteringInfo())->cast(@PropertyGraphFetchTree)->fold(
      {pgft, tis|
         if($pgft.property->instanceOf(QualifiedProperty), 
            | $tis->addQualifiedPropertyForTypeIfMissing($pgft.property->cast(@QualifiedProperty<Any>)), 
            | $classes->fold({c, tis2| $tis2->addPropertyForClassIfDefined($c, $pgft.property.name->toOne(), false)}, $tis)
         )->typeInfoFromTree($pgft);
      }, 
      $withRequiredQualifiers
   );

   let withSubTypeTrees=if($tree->instanceOf(RootGraphFetchTree),
      |  $tree.subTypeTrees->map(x | $x->meta::pure::graphFetch::routing::byPassClusteringInfo())->cast(@SubTypeGraphFetchTree)->fold(
                {strgft, tis|
                     $tis->typeInfoFromTree($strgft);
                }, 
                $withPropertySubtrees
            );,
      | $withPropertySubtrees);
   $withSubTypeTrees;  
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::constraintInfoFromTree(typeInfos:TypeInfoSet[1], tree:GraphFetchTree[1]): TypeInfoSet[1]
{
   $tree->classesInTree()
      ->map(c| $c->concatenate($typeInfos->forClass($c).supertypes))
      ->removeDuplicates()
      ->fold({class, infos| $infos->addConstraints($class)}, $typeInfos);
}

function meta::pure::executionPlan::platformBinding::typeInfo::addConstraints(typeInfos:TypeInfoSet[1], class:Class<Any>[1]): TypeInfoSet[1]
{
   $class.constraints->toIndexed()->fold({constraint, infos| $infos->addConstraint($class, $constraint.second, $constraint.first)}, $typeInfos);
}

function meta::pure::executionPlan::platformBinding::typeInfo::addConstraint(typeInfos:TypeInfoSet[1], class:Class<Any>[1], constraint:Constraint[1], n:Integer[1]): TypeInfoSet[1]
{
   let classInfo           = $typeInfos->forClass($class);
   let funcProperties      = $constraint.functionDefinition.expressionSequence->map(es | $es->evaluateAndDeactivate()->scanProperties());
   let messageProperties   = $constraint.messageFunction->map(f| $f.expressionSequence->map(es | $es->evaluateAndDeactivate()->scanProperties()));
   let allPaths            = $funcProperties->concatenate($messageProperties).result;
   let propertyTree        = $allPaths->meta::pure::lineage::scanProperties::propertyTree::buildPropertyTree();
   let propertiesUsed      = $propertyTree->propertiesFromTree();
   let missingProperties   = $propertiesUsed->filter(p |!$typeInfos->containsProperty($p));
   let newTypeInfos        = $missingProperties->fold(
                                {prop, infos | if($prop->instanceOf(QualifiedProperty),
                                                  | $infos->addQualifiedPropertyForTypeIfMissing($prop->cast(@QualifiedProperty<Any>), true),
                                                  | $infos->addPropertyForTypeIfMissing($prop->cast(@Property<Nil,Any|*>), true))}
                                , $typeInfos);
   let id                  = $constraint.name->orElse($n->toString());
   let constraintInfo      = ^ConstraintInfo(
                                id             = $id,
                                constraint     = $constraint,
                                propertyTree   = $propertyTree->inlineQualifiedPropertyNodes()
                              );
   let newClassInfo        = $newTypeInfos->forClass($class);
   let withConstraint      = ^$newClassInfo(constraints = $classInfo.constraints->filter(ci| $ci.constraint != $constraint)->add($constraintInfo));

   $newTypeInfos->addOrReplace($withConstraint);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::propertiesFromTree(pTree:meta::pure::lineage::scanProperties::propertyTree::PropertyPathTree[1]): AbstractProperty<Any>[*]
{
   $pTree.value->match([
      node: PropertyPathNode[1] | $node.property,
      any : Any[1]              | []
   ])->concatenate($pTree.children->map(child| $child->propertiesFromTree()));
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::classesInTree(tree:GraphFetchTree[1]): Class<Any>[*]
{
   let class = $tree->match([
      st: SubTypeGraphFetchTree[1] | $st.subTypeClass,
      r: RootGraphFetchTree<Any>[1] | $r.class,
      p: PropertyGraphFetchTree[1]  | $p.property.genericType.rawType->concatenate($p.subType)->filter(t| $t->instanceOf(Class))->cast(@Class<Any>)
   ]);

   $class->concatenate($tree.subTrees->map(st| $st->classesInTree()))->removeDuplicates();
   $class->concatenate($tree.subTrees->map(st| $st->classesInTree()))->concatenate($tree.subTypeTrees->map(st| $st->classesInTree()))->removeDuplicates();
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::typeInfoFromInstanceSetImplementations(info:TypeInfoSet[1], setImplementations:InstanceSetImplementation[*]): TypeInfoSet[1]
{
   $setImplementations->fold(
      {set, updatedTypes |
         let type = if($set.mappingClass->isNotEmpty(),
                       | $set.mappingClass->toOne(),
                       | $set.class
                    );
         $updatedTypes->addForClass($type, true, false, false, false);
      }, 
      $info
   );
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addPropertyForTypeIfMissing(info:TypeInfoSet[1], property:Property<Nil,Any|*>[1]): TypeInfoSet[1]
{
  addPropertyForTypeIfMissing($info, $property, false);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addPropertyForTypeIfMissing(info:TypeInfoSet[1], property:Property<Nil,Any|*>[1], isNewInstanceAllowed:Boolean[1]): TypeInfoSet[1]
{
    
   $property.owner->match([
      {c: Class<Any>[1] |
         $info->addPropertyForClassIfMissing($c, $property, $isNewInstanceAllowed);
      },
      {a: Association[1] |
         let p1 = $a.properties->at(0);
         let c1 = $a.properties->at(1).genericType.rawType->cast(@Class<Any>)->toOne();
         let p2 = $a.properties->at(1);
         let c2 = $a.properties->at(0).genericType.rawType->cast(@Class<Any>)->toOne();
         
         $info->addPropertyForClassIfMissing($c1, $p1)->addPropertyForClassIfMissing($c2, $p2, $isNewInstanceAllowed);
      }
   ]);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addPropertyForClassIfDefined(info:TypeInfoSet[1], class:Class<Any>[1], propertyName:String[1], isNewInstanceAllowed:Boolean[1]): TypeInfoSet[1]
{
   let property = $class.properties->concatenate($class.propertiesFromAssociations)->filter(p| $p.name == $propertyName);
   
   $property->match([
      {p:Property<Nil,Any|*>[1] | 
         $p.owner->match([
            {c: Class<Any>[1] |
               $info->addPropertyForClassIfMissing($c, $p, $isNewInstanceAllowed);
            },
            {a: Association[1] |
               let p1 = $a.properties->at(0);
               let c1 = $a.properties->at(1).genericType.rawType->cast(@Class<Any>)->toOne();
               let p2 = $a.properties->at(1);
               let c2 = $a.properties->at(0).genericType.rawType->cast(@Class<Any>)->toOne();
            
               $info->addPropertyForClassIfMissing($c1, $p1)->addPropertyForClassIfMissing($c2, $p2, $isNewInstanceAllowed);
            }
         ]);
      },
      {none:Property<Nil,Any|*>[0] | 
         $class->getGeneralizations()->fold({c, tis| $tis->addPropertyForClassIfDefined($c, $propertyName, $isNewInstanceAllowed)}, $info);
      },
      {multiple:Property<Nil,Any|*>[*] |
         fail('Multiple properties found with name - ' + $propertyName);
         $info;
      }
   ]);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addPropertyForClassIfMissing(info:TypeInfoSet[1], class:Class<Any>[1], property:Property<Nil,Any|*>[1]): TypeInfoSet[1]
{
  addPropertyForClassIfMissing($info, $class, $property, false);  
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addPropertyForClassIfMissing(info:TypeInfoSet[1], class:Class<Any>[1], property:Property<Nil,Any|*>[1], isNewInstanceAllowed:Boolean[1]): TypeInfoSet[1]
{   
   let enriched  = $info->addBasicTypeInfoIfMissing($class, $isNewInstanceAllowed);
   let ti        = $enriched->forClass($class);
   let rtnType   = $property->functionReturnType().rawType->toOne();
   let enriched2 = if($rtnType->instanceOf(Class) || $rtnType->instanceOf(Enumeration), | $enriched->addBasicTypeInfoIfMissing($rtnType, $isNewInstanceAllowed), | $enriched);

   let withProperty = if($ti.properties->exists(p| $p.name == $property.name), 
      | $enriched2, 
      |$enriched2->addOrReplace(^$ti(properties=$ti.properties->concatenate($property)->sortProperties($class)))
   );

   $ti.supertypes->fold({c, tis| $tis->addPropertyForClassIfDefined($c, $property.name->toOne(), $isNewInstanceAllowed)}, $withProperty);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::sortProperties(properties:Property<Nil,Any|*>[*], class:Class<Any>[1]): Property<Nil,Any|*>[*]
{
   let allProperties = $class->allProperties();
   let ordinal = {p:Property<Nil,Any|*>[1]| $allProperties->indexOf($p)};
   $properties->sort({p1,p2| $ordinal->eval($p1) - $ordinal->eval($p2)});
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addQualifiedPropertyForTypeIfMissing(info:TypeInfoSet[1], qualifiedProperty:QualifiedProperty<Any>[1]): TypeInfoSet[1]
{
  // Note: we allow new instance creation within qualified properties if the return type is of primitive type
  // The check is done within the following function, thus we set the isNewInstanceAllowed flag to true and defer
  // computation of whether new instance creation is allowed
  addQualifiedPropertyForTypeIfMissing($info, $qualifiedProperty, true);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addQualifiedPropertyForTypeIfMissing(info:TypeInfoSet[1], qualifiedProperty:QualifiedProperty<Any>[1], isNewInstanceAllowed:Boolean[1]): TypeInfoSet[1]
{
   let owningClass = $qualifiedProperty->functionType().parameters->evaluateAndDeactivate()->at(0).genericType.rawType->toOne()->cast(@Class<Any>);
   let isPrimitiveReturnType = $qualifiedProperty->isPrimitiveValueProperty();

   $info->addQualifiedPropertyForClassIfMissing($owningClass, $qualifiedProperty, $isNewInstanceAllowed && $isPrimitiveReturnType);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addQualifiedPropertyForClassIfMissing(info:TypeInfoSet[1], class:Class<Any>[1], qualifiedProperty:QualifiedProperty<Any>[1]): TypeInfoSet[1]
{
  // Note: we allow new instance creation within qualified properties if the return type is of primitive type
  // The check is done within the following function, thus we set the isNewInstanceAllowed flag to true and defer
  // computation of whether new instance creation is allowed
  addQualifiedPropertyForClassIfMissing($info, $class, $qualifiedProperty, true);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addQualifiedPropertyForClassIfMissing(info:TypeInfoSet[1], class:Class<Any>[1], qualifiedProperty:QualifiedProperty<Any>[1], isNewInstanceAllowed:Boolean[1]): TypeInfoSet[1]
{
   let enriched = $info->addBasicTypeInfoIfMissing($class, $isNewInstanceAllowed);
   let ti       = $enriched->forClass($class);
   if($qualifiedProperty->printFunctionSignature()->in($ti.qualifiedProperties->map(q| $q->printFunctionSignature())),
      | $enriched,
      {|
         let isPrimitiveReturnType = $qualifiedProperty->isPrimitiveValueProperty();
         let allowCallToNew = $isPrimitiveReturnType && $isNewInstanceAllowed;
         let withQualifier  = $enriched->addOrReplace(^$ti(qualifiedProperties=$ti.qualifiedProperties->concatenate($qualifiedProperty)));
         let withParameters = $qualifiedProperty->functionType().parameters->evaluateAndDeactivate()->tail()->fold({p, agg | $agg->addBasicTypeInfoIfMissing($p.genericType.rawType->toOne(), $allowCallToNew)}, $withQualifier);

         let paths = $qualifiedProperty.expressionSequence->map(es| $es->evaluateAndDeactivate()->scanProperties().result);
         $paths.values.property->removeDuplicates()->fold(
            {prop, info|
               $prop->match([
                  p :Property<Nil,Any|*>[1]    | $info->addPropertyForTypeIfMissing($p, $isPrimitiveReturnType && $allowCallToNew),
                  qp:QualifiedProperty<Any>[1] | $info->addQualifiedPropertyForTypeIfMissing($qp, $isPrimitiveReturnType && $allowCallToNew)
               ]);
            },
            $withParameters
         );
      }
   );
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addOrReplace(info:TypeInfoSet[1], newTypeInfo:TypeInfo[1]): TypeInfoSet[1]
{
   let filterFn = $newTypeInfo.type->isNotTypeFn();
   ^$info(
      typeInfos=$info.typeInfos->filter(ti|$filterFn->eval($ti.type))->concatenate($newTypeInfo)
   );
}

function<<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addBasicTypeInfoIfMissing(info:TypeInfoSet[1], type:Type[1]):TypeInfoSet[1]
{
  addBasicTypeInfoIfMissing($info, $type, false);
}

function<<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addBasicTypeInfoIfMissing(info:TypeInfoSet[1], type:Type[1], isNewInstanceAllowed:Boolean[1]):TypeInfoSet[1]
{
   
   addBasicTypeInfoIfMissing($info,[],$type, $isNewInstanceAllowed);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addBasicTypeInfoIfMissing(info:TypeInfoSet[1], seenClasses:Class<Any>[*], type:Type[1]): TypeInfoSet[1]
{
  addBasicTypeInfoIfMissing($info, $seenClasses, $type, false);
}
   
function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addBasicTypeInfoIfMissing(info:TypeInfoSet[1], seenClasses:Class<Any>[*], type:Type[1], isNewInstanceAllowed:Boolean[1]): TypeInfoSet[1]
{
   if($info.typeInfos.type->contains($type),
      {| 
         $type->match([
           c: Class<Any>[1]  | let newTypeInfos = $info.typeInfos->fold({typeInfo, typeInfoList | if($typeInfo.type == $type,
                                                                                                    | let cti = $typeInfo->cast(@ClassTypeInfo);
                                                                                                      ^$cti(isNewInstanceAllowed = $isNewInstanceAllowed && $cti.isNewInstanceAllowed)->concatenate($typeInfoList); ,
                                                                                                    | $typeInfo->concatenate($typeInfoList);) },
                                                                         []);
                              ^$info(typeInfos = $newTypeInfos);,
          a: Any[1]          | $info

         ])
      },
      {| 
         $type->match([
            e : Enumeration<Any>[1] | $info->addEnumerationTypeInfo($e),
            c : Class<Any>[1]       | $info->addBasicClassTypeInfo($c, $seenClasses, $isNewInstanceAllowed),
            u : Unit[1]             | $info->addUnitTypeInfo($u),
            a : Any[1]              | $info
         ])
      }
   );
}


function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addEnumerationTypeInfo(info:TypeInfoSet[1], enumeration:Enumeration<Any>[1]): TypeInfoSet[1]
{
   $info->addOrReplace(^EnumerationTypeInfo(type=$enumeration));
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addBasicClassTypeInfo(info:TypeInfoSet[1], class:Class<Any>[1], seenClasses:Class<Any>[*]): TypeInfoSet[1]
{
  addBasicClassTypeInfo($info, $class, $seenClasses, false);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addBasicClassTypeInfo(info:TypeInfoSet[1], class:Class<Any>[1], seenClasses:Class<Any>[*], isNewInstanceAllowed:Boolean[1]): TypeInfoSet[1]
{
  if ($seenClasses->contains($class),
      | $info,
      |
        let supertypes          = $class->getGeneralizations();
        let newSeenClasses      = $seenClasses->concatenate($class);
        let withSupertypes      = $supertypes->fold({c, set | $set->addBasicTypeInfoIfMissing($newSeenClasses, $c)}, $info);

        let classInfo = ^ClassTypeInfo(
            type                 = $class,
            supertypes           = $supertypes,
            isNewInstanceAllowed = $isNewInstanceAllowed
        );

        let withSuperTypes      = $withSupertypes->addOrReplace($classInfo);

        $class->getSpecializations()->fold(
          {special, agg |
            pair(list($agg.first.values->concatenate($special)), $agg.second->addBasicTypeInfoIfMissing($agg.first.values, $special))
          },
          pair(list($newSeenClasses->concatenate($supertypes)), $withSuperTypes)
        ).second;
  )
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::addUnitTypeInfo(info:TypeInfoSet[1], unit:Unit[1]): TypeInfoSet[1]
{
   let measure = $unit.measure->toOne();
   let conversionFunction = $unit.conversionFunction->toOne();

   let unitInfo = ^UnitTypeInfo(
      type       = $unit,
      measure    = $measure,
      conversionFunction = $conversionFunction
   );

   $info->addOrReplace($unitInfo);
}

function  <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::getGeneralizations(class:Type[1]):Class<Any>[*]
{
   let generalizations = $class.generalizations->map(g | $g.general->cast(@GenericType).rawType->toOne())->cast(@Class<Any>);
   $generalizations
      ->concatenate($generalizations->map(g| $g->getGeneralizations()))
      ->filter(meta::pure::metamodel::type::Any->isNotClassFn())
      ->cast(@Class<Any>)
      ->removeDuplicatesBy(classEqualityKey());
}

function  <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::getSpecializations(class:Type[1]):Class<Any>[*]
{
   let specializations = $class.specializations->map(g | $g.specific->filter(t|$t->instanceOf(Class))->cast(@Class<Any>));
  
   $specializations
      ->concatenate($specializations->map(g| $g->getSpecializations()))
      ->filter(meta::pure::metamodel::type::Any->isNotClassFn())
      ->cast(@Class<Any>)
      ->removeDuplicatesBy(classEqualityKey());
}


// Comparator needed due to Alloy bug in metadata vs other deserialization
// TODO Verify if this is still needed
function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::classEqualityKey():Function<{Class<Any>[1]->String[1]}>[1]
{
  {c:Class<Any>[1] | $c->elementToPath()}
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::enumerationEqualityKey():Function<{Enumeration<Any>[1]->String[1]}>[1]
{
  {e:Enumeration<Any>[1] | $e->elementToPath()}
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::isNotTypeFn(type:Type[1]):Function<{Type[1]->Boolean[1]}>[1]
{
   let path = $type->cast(@PackageableElement)->elementToPath();
   {t:Type[1] | ($type != $t) && ($path != $t->cast(@PackageableElement)->elementToPath())};
}

function <<access.private>> meta::pure::executionPlan::platformBinding::typeInfo::isNotClassFn(class:Class<Any>[1]):Function<{Class<Any>[1]->Boolean[1]}>[1]
{
   let path = $class->elementToPath();
   {c:Class<Any>[1] | ($class != $c) && ($path != $c->elementToPath())};
}
