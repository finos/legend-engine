// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::engine::java::typeInfo::*;
import meta::alloy::test::runtime::java::typeInfo::*;

Enum meta::alloy::test::runtime::java::typeInfo::Colour
{
   RED, GREEN, BLUE
}

Enum meta::alloy::test::runtime::java::typeInfo::Measure
{
   b, Kb, Mb, Gb, Tb
}

Class meta::alloy::test::runtime::java::typeInfo::Memory
{
   amount  : Integer[1];
   measure : meta::alloy::test::runtime::java::typeInfo::Measure[1];
}

Class meta::alloy::test::runtime::java::typeInfo::A
{
   s   : String[1];
   f   : Float[1];
   sd  : StrictDate[1];
   c   : Colour[0..1];
   ram : Memory[1];
}

Class meta::alloy::test::runtime::java::typeInfo::B extends A
{
   i    : Integer[1];
   d    : Decimal[1];
   disk : Memory[1];
}

Class meta::alloy::test::runtime::java::typeInfo::C
{
   s      : String[1];
   someAs : A[*];
   moreAs : A[*];
}

Class meta::alloy::test::runtime::java::typeInfo::E
{
   s: String[1];
}

Class meta::alloy::test::runtime::java::typeInfo::F
{
   s   : String[1];
   ssd : Memory[1];
}

Class meta::alloy::test::runtime::java::typeInfo::G
{
   s: String[1];
}

Association meta::alloy::test::runtime::java::typeInfo::E_F
{
   e : E[1];
   fs: F[*];
}

Association meta::alloy::test::runtime::java::typeInfo::E_G
{
   e : E[1];
   gs: G[*];
}

Class meta::alloy::test::runtime::java::typeInfo::H extends A
{
   i: Integer[1];
   b: Boolean[1];
}

Class meta::alloy::test::runtime::java::typeInfo::I extends B, H
{
   s: String[1];
}

Class meta::alloy::test::runtime::java::typeInfo::Trade
[
   if($this.side->isEmpty() || $this.side == Side.BUY, |$this.quantity > 0, |$this.quantity < 0)
]
{
   quantity: Integer[1];
   side: Side[0..1];
}

Enum meta::alloy::test::runtime::java::typeInfo::Side
{
   BUY, SELL
}

function <<test.Test>> meta::alloy::test::runtime::java::typeInfo::testGraphAddsInheritesOnlyOnce(): Boolean[1]
{
   let typeInfos = newTypeInfoSet()->addForGraphFetchTree(#{I {s, f, sd, c, i, d, b}}#);
   assertEquals(5, $typeInfos.typeInfos->size());
   
   assertTypeInfo(['s', 'f', 'sd', 'c'], [], $typeInfos->forClass(A));
   assertTypeInfo(['i', 'd'], [A], $typeInfos->forClass(B));
   assertTypeInfo(['i', 'b'], [A], $typeInfos->forClass(H));
   assertTypeInfo(['s'], [A, B, H], $typeInfos->forClass(I));
   assertEquals(Colour, $typeInfos->forEnumeration(Colour).enumeration());

   assertProperties(['s', 'f', 'sd', 'c', 'i', 'd', 'b'], $typeInfos->allProperties(I), I);
}

function <<test.Test>> meta::alloy::test::runtime::java::typeInfo::testGraphIncludesOnlySpecifiedClassProperties(): Boolean[1]
{
   let typeInfos = newTypeInfoSet()->addForGraphFetchTree(#{C {s, someAs {s, f, sd, c}}}#);
   assertEquals(3, $typeInfos.typeInfos->size());
   
   assertTypeInfo(['s', 'f', 'sd', 'c'], [], $typeInfos->forClass(A));
   assertTypeInfo(['s', 'someAs'], [], $typeInfos->forClass(C));
   assertEquals(Colour, $typeInfos->forEnumeration(Colour).enumeration());
}

function <<test.Test>> meta::alloy::test::runtime::java::typeInfo::testGraphMergesForTrees(): Boolean[1]
{
   let typeInfos = newTypeInfoSet()->addForGraphFetchTree(#{C {s, someAs {s, f}}}#)->addForGraphFetchTree(#{C {moreAs {sd, c}}}#);
   assertEquals(3, $typeInfos.typeInfos->size());
   
   assertTypeInfo(['s', 'f', 'sd', 'c'], [], $typeInfos->forClass(A));
   assertTypeInfo(['s', 'someAs', 'moreAs'], [], $typeInfos->forClass(C));
   assertEquals(Colour, $typeInfos->forEnumeration(Colour).enumeration());
}

function <<test.Test>> meta::alloy::test::runtime::java::typeInfo::testGraphIncludesOnlySpecifiedAssociations(): Boolean[1]
{
   let typeInfos = newTypeInfoSet()->addForGraphFetchTree(#{E {s, fs {s}}}#);
   assertEquals(2, $typeInfos.typeInfos->size());
   
   assertTypeInfo(['s', 'fs'], [], $typeInfos->forClass(E));
   assertTypeInfo(['s', 'e'], [], $typeInfos->forClass(F));
}

function <<test.Test>> meta::alloy::test::runtime::java::typeInfo::testClassDependenciesViaProperties(): Boolean[1]
{
   let typeInfos = newTypeInfoSet()->addForGraphFetchTree(#{E {fs {ssd}}}#);
   assertClasses([F, Memory], $typeInfos->classDependenciesViaPropertiesWithsubTypes(E), E, 'classDependenciesViaProperties');
}

function <<test.Test>> meta::alloy::test::runtime::java::typeInfo::testEnumDependenciesViaProperties(): Boolean[1]
{
   let typeInfos = newTypeInfoSet()->addForGraphFetchTree(#{E {fs {ssd {amount,measure}}}}#);
   assert($typeInfos->enumDependenciesViaProperties(E)->containsAll(meta::alloy::test::runtime::java::typeInfo::Measure), |'Unexpected enums: ' + $typeInfos->enumDependenciesViaProperties(E)->map(e| $e->enumName())->joinStrings(','));
}

function <<test.Test>> meta::alloy::test::runtime::java::typeInfo::testAddingConstraintsAddsEnum(): Boolean[1]
{
   let tree      = #{Trade {quantity}}#;
   let typeInfos = newTypeInfoSet()->addForGraphFetchTree($tree)->addConstraintsForGraphFetchTree($tree);
   assertEquals(Side, $typeInfos->forEnumeration(Side).enumeration());
}

function <<access.private>> meta::alloy::test::runtime::java::typeInfo::assertTypeInfo(expectedProperties:String[*], expectedSupertypes:Type[*], actual:ClassTypeInfo[1]): Boolean[1]
{
   assertProperties($expectedProperties, $actual.properties, $actual.type);
   assertClasses($expectedSupertypes, $actual.supertypes, $actual.type, 'supertypes');
}

function <<access.private>> meta::alloy::test::runtime::java::typeInfo::assertProperties(expectedProperties:String[*], actual:AbstractProperty<Any>[*], type:Type[1]): Boolean[1]
{
   assertEquals($expectedProperties->size(), $actual->size(), 'For type %s, properties: expected [%s], actual: [%s]', [$type.name->toOne(), $expectedProperties->joinStrings(','), $actual.name->joinStrings(',')]);
   assert($actual.name->containsAll($expectedProperties),     'For type %s, properties: expected [%s], actual: [%s]', [$type.name->toOne(), $expectedProperties->joinStrings(','), $actual.name->joinStrings(',')]);
}

function <<access.private>> meta::alloy::test::runtime::java::typeInfo::assertClasses(expectedClasses:Type[*], actual:Class<Any>[*], type:Type[1], purpose:String[1]): Boolean[1]
{
   assertEquals($expectedClasses->size(), $actual->size(), 'For type %s, %s: expected [%s], actual: [%s]', [$type.name->toOne(), $purpose, $expectedClasses.name->joinStrings(','), $actual.name->joinStrings(',')]);
   assert($actual->containsAll($expectedClasses),          'For type %s, %s: expected [%s], actual: [%s]', [$type.name->toOne(), $purpose, $expectedClasses.name->joinStrings(','), $actual.name->joinStrings(',')]);
}

