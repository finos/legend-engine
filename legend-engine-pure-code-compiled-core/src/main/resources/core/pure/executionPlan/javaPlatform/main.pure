// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::engine::java::graphFetch::inMemory::*;
import meta::pure::executionPlan::engine::java::graphFetch::common::*;
import meta::pure::executionPlan::engine::java::graphFetch::storeStreamReading::*;
import meta::pure::executionPlan::engine::java::typeInfo::*;
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::modelToModel::graphFetch::executionPlan::*;
import meta::pure::metamodel::constraint::*;

Profile meta::pure::executionPlan::engine::java::roadmap::feature
{
   stereotypes: [ M2MBasics, DataQuality, Enums, Filter, Project, Advanced, XML, Runtime ];
}

Class meta::pure::executionPlan::engine::java::GenerationContext
{
   typeInfos                 : TypeInfoSet[1];
   conventions               : Conventions[1];
   nodeInfos                 : NodeInfo[*];
   baseProject               : Project[0..1];
}

Class meta::pure::executionPlan::engine::java::NodeInfo
{
   path            : String[1];
   returnType      : JavaType[1];
   data            : Any[0..1];
   graphFetchTrees : RootGraphFetchTree<Any>[*];
}

Class meta::pure::executionPlan::engine::java::JavaType
{
}

Class meta::pure::executionPlan::engine::java::SimpleJavaType extends JavaType
{
   pureType   : meta::pure::metamodel::type::Type[1];
   javaType   : meta::external::language::java::metamodel::Type[1];
}

Class meta::pure::executionPlan::engine::java::CheckedJavaType extends JavaType
{
   checkedOf  : SimpleJavaType[1];
   source     : JavaType[0..1];
}


Class <<typemodifiers.abstract>> meta::pure::executionPlan::engine::java::typeInfo::TypeInfoSet
{
   typeInfos: TypeInfo[*];
}

Class <<typemodifiers.abstract>> meta::pure::executionPlan::engine::java::typeInfo::TypeInfo
{
   type: meta::pure::metamodel::type::Type[1];
}

Class meta::pure::executionPlan::engine::java::typeInfo::EnumerationTypeInfo extends TypeInfo
{
   enumeration() { $this.type->cast(@meta::pure::metamodel::type::Enumeration<Any>) }: meta::pure::metamodel::type::Enumeration<Any>[1];
}

Class <<typemodifiers.abstract>> meta::pure::executionPlan::engine::java::typeInfo::ConstraintInfo
{
   constraint:Constraint[1];
}

Class meta::pure::executionPlan::engine::java::typeInfo::SupportedConstraintInfo extends ConstraintInfo
{
}

Class meta::pure::executionPlan::engine::java::typeInfo::AlwaysDefectConstraintInfo extends ConstraintInfo
{
   defectMessage: String[1];
}

Class meta::pure::executionPlan::engine::java::typeInfo::ClassTypeInfo extends TypeInfo
{
   properties          : Property<Nil,Any|*>[*];
   supertypes          : meta::pure::metamodel::type::Class<Any>[*];
   qualifiedProperties : QualifiedProperty<Any>[*];
   constraints         : ConstraintInfo[*];
   isNewInstanceAllowed        : Boolean[1];
   
   class() { $this.type->cast(@meta::pure::metamodel::type::Class<Any>) }: meta::pure::metamodel::type::Class<Any>[1];
}

Class meta::pure::executionPlan::engine::java::typeInfo::UnitTypeInfo extends TypeInfo
{
   measure: Measure[1];
   conversionFunction: FunctionDefinition<Any>[1];

   unit() { $this.type->cast(@Unit) }: Unit[1];
}

Class meta::pure::executionPlan::engine::java::GeneratedCode
{
   project: Project[0..1];
   implementation: JavaPlatformImplementation[0..1];
}

Class meta::pure::executionPlan::engine::java::GeneratedNode
{
   project: Project[0..1];
   node: ExecutionNode[1];
}



// ----------------------------------------------------------------------------------------------------------
// --- Plan generation
// ----------------------------------------------------------------------------------------------------------

function <<doc.deprecated>> meta::pure::executionPlan::engine::java::generatePlatformCode(e:ExecutionPlan[1], config:PlatformCodeGenerationConfig[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ExecutionPlan[1]
{
   generatePlatformCode($e, $config.planId, $extensions, $debug)
}

function meta::pure::executionPlan::engine::java::generatePlatformCode(e:ExecutionPlan[1], config:meta::pure::executionPlan::platformBinding::ExecutionPlanPlatformBindingConfig[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ExecutionPlan[1]
{
   assert($config->instanceOf(meta::pure::executionPlan::platformBinding::legendJava::LegendJavaExecutionPlanPlatformBindingConfig),
          | 'Unexpected config passed for Java binding. ' +
            'Expected: ' + meta::pure::executionPlan::platformBinding::legendJava::LegendJavaExecutionPlanPlatformBindingConfig->elementToPath() + ', ' +
            'Passed: ' + $config->type()->elementToPath());

   let javaConfig = $config->cast(@meta::pure::executionPlan::platformBinding::legendJava::LegendJavaExecutionPlanPlatformBindingConfig);
   let updatedExtsions = $extensions->meta::pure::extension::removeOtherExecutionPlanPlatformBindingExtensions(meta::pure::executionPlan::platformBinding::legendJava::legendJavaPlatformBindingId());
   generatePlatformCode($e, $javaConfig.planId, $extensions, $debug);
}

function <<access.private>> meta::pure::executionPlan::engine::java::generatePlatformCode(e:ExecutionPlan[1], planId:String[0..1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ExecutionPlan[1]
{
   let conventions     = engineConventions($extensions);
   let pathAdjusted    = if($planId->isEmpty(), 
                            |$conventions, 
                            |$conventions->setBasePackageName($conventions.basePackageName+'.'+$conventions->identifier('plan_'+$planId->toOne()))
                         );
   let initialContext  = ^GenerationContext(typeInfos=newTypeInfoSet(), conventions=$pathAdjusted);
   let preparedContext = $e.rootExecutionNode->prepare('root', $initialContext, $extensions, $debug)->meta::pure::executionPlan::engine::java::fillNewFunctionProhibitedList();
   
   // TODO Move Interface/Enum/Unit generation to here
   let context = ^$preparedContext(baseProject=$preparedContext.conventions->fundamentals($debug));
   
   let generated     = $e.rootExecutionNode->generatePlatformCode('root', $e.mapping, $context, $extensions, $debug);
   
   ^$e
   (
      rootExecutionNode = $generated.node,
      globalImplementationSupport = if($generated.project->isEmpty() || $generated.project->toOne()->allClasses()->isEmpty(),
                                       | [],
                                       | $generated.project->toOne()->projectToImplementation()
                                    )
   );
}

function meta::pure::executionPlan::engine::java::projectToImplementation(project:Project[1]):JavaPlatformImplementation[1]
{   
   let sfer = newStringifier($project);
   
   ^JavaPlatformImplementation
    (
       classes = $project->allClasses()->map({cl |
          ^meta::pure::executionPlan::JavaClass
           (
             package = $cl.package->packageToString(),
             name    = $cl.simpleName,
             source  = $sfer->ofClass($cl->meta::external::language::java::factory::inferImports())
          )
       })
    );
}


function meta::pure::executionPlan::engine::java::prepare(node:ExecutionNode[1], path:String[1], context:GenerationContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):GenerationContext[1]
{    
   let contextFromChildren = $node.executionNodes->prepareChildNodes(1, $path, $context, $extensions, $debug);
   
   let extensionClass = meta::pure::executionPlan::platformBinding::legendJava::LegendJavaExecutionPlanPlatformBindingExtension;
   let extensionNodeWalkMatches = $extensions->meta::pure::extension::extractExecutionPlanPlatformBindingExtensions($extensionClass)->map(e | $e.walkChildNodesForPrepare);
   let extensionNodePrepareMatches = $extensions->meta::pure::extension::extractExecutionPlanPlatformBindingExtensions($extensionClass)->map(e | $e.prepareNode);

   let contextFromOtherNodes = $node->match($extensionNodeWalkMatches->map(x|$x->eval($path, $contextFromChildren, $extensions, $debug))->concatenate([
      e:ExecutionNode[1] | $contextFromChildren
   ])->toOneMany());

   $node->match($extensionNodePrepareMatches->map(x|$x->eval($path, $contextFromOtherNodes, $extensions, $debug))->concatenate([   
      e:ExecutionNode[1] |  $contextFromOtherNodes
   ])->toOneMany());
}

function <<access.private>> meta::pure::executionPlan::engine::java::fillNewFunctionProhibitedList(context:GenerationContext[1]):GenerationContext[1]
{
   let cls = $context.typeInfos.typeInfos->filter(t|$t->instanceOf(ClassTypeInfo))->cast(@ClassTypeInfo)->filter(c| !$c.isNewInstanceAllowed); //TODO: remove the not in the last filter
   let oldConventions = $context.conventions; 
   ^$context(conventions = ^$oldConventions(newFunctionProhibitedList = $cls->map(c|$c.class())));
}

function <<access.private>> meta::pure::executionPlan::engine::java::prepareChildNodes(nodes:ExecutionNode[*], childNo:Integer[1], parentPath:String[1], context:GenerationContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):GenerationContext[1]
{
   $nodes->head()->match([
      {n0:ExecutionNode[0] |
         $context
      },
      {n:ExecutionNode[1] |
         let newContext = $n->prepare($parentPath+'.n'+$childNo->toString(), $context, $extensions, $debug);
         $nodes->tail()->prepareChildNodes($childNo+1, $parentPath, $newContext, $extensions, $debug);
      }
   ]);
}

function meta::pure::executionPlan::engine::java::generatePlatformCode(node:ExecutionNode[1], path:String[1], mapping:Mapping[1], context:GenerationContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):GeneratedNode[1]
{
   let extensionClass = meta::pure::executionPlan::platformBinding::legendJava::LegendJavaExecutionPlanPlatformBindingExtension;
   let extensionNodeGenerateMatches = $extensions->meta::pure::extension::extractExecutionPlanPlatformBindingExtensions($extensionClass)->map(e | $e.generateCode);
   let extensionNodeWalkMatches = $extensions->meta::pure::extension::extractExecutionPlanPlatformBindingExtensions($extensionClass)->map(e | $e.walkAndGenerateChildNodes);

   let generated = $node->match($extensionNodeGenerateMatches->map(e|$e->eval($path, $context, $extensions, $debug))->concatenate([
      e:ExecutionNode[1] | ^GeneratedCode()
   ])->toOneMany());

   let children    = $node.executionNodes->generateChildNodes(1, $path, $mapping, $context, $extensions, $debug);

   let allProjects = $generated.project->concatenate($children.project)->concatenate($context.baseProject);
   let fullProject = $allProjects->mergeProjectsNullable();

   let newNode = ^$node(executionNodes=$children.node, implementation=$generated.implementation);

   $newNode->match($extensionNodeWalkMatches->map(e|$e->eval($path, $mapping, $context, $extensions, $fullProject, $debug))->concatenate([
      e:ExecutionNode[1] | ^GeneratedNode(node=$newNode, project=$fullProject)
   ])->toOneMany());
}

function <<access.private>> meta::pure::executionPlan::engine::java::generateChildNodes(nodes:ExecutionNode[*], childNo:Integer[1], parentPath:String[1], mapping:Mapping[1], context:GenerationContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):GeneratedNode[*]
{
   $nodes->head()->match([
      n0:ExecutionNode[0] | [],
      n :ExecutionNode[1] | $n->generatePlatformCode($parentPath+'.n'+$childNo->toString(), $mapping, $context, $extensions, $debug)->concatenate($nodes->tail()->generateChildNodes($childNo+1, $parentPath, $mapping, $context, $extensions, $debug))
   ]);
}

function meta::pure::executionPlan::engine::java::generatedCode(project:Project[1], entryPoint:meta::external::language::java::metamodel::Class[1]):GeneratedCode[1]
{
   assert($project->containsClass($entryPoint), 'Entry point class is missing');
   ^GeneratedCode(
      project        = $project,
      implementation = ^JavaPlatformImplementation
                       (
                          executionClassFullName = $entryPoint->typeToString(),
                          executionMethodName    = $entryPoint.methods->filter(m |$m->isStatic())->first().name
                       )
   );
}

function meta::pure::executionPlan::engine::java::addNodeInfo(context:GenerationContext[1], nodeInfo:NodeInfo[1]): GenerationContext[1]
{
   ^$context(nodeInfos=$context.nodeInfos->concatenate($nodeInfo));   
}

function meta::pure::executionPlan::engine::java::nodeInfosForPath(context:GenerationContext[1], path:String[1]): NodeInfo[*]
{
   $context.nodeInfos->filter(ni| $ni.path == $path);
}

function meta::pure::executionPlan::engine::java::childNodeInfosForPath(context:GenerationContext[1], path:String[1]): NodeInfo[*]
{
   $context.nodeInfos->filter(ni| $ni.path->contains('.') && $ni.path->substring(0, $ni.path->lastIndexOf('.')) == $path);
}

function meta::pure::executionPlan::engine::java::setTypeInfos(context:GenerationContext[1], typeInfos:TypeInfoSet[1]): GenerationContext[1]
{
   ^$context(typeInfos=$typeInfos);   
}

function meta::pure::executionPlan::engine::java::setConventions(context:GenerationContext[1], conventions:Conventions[1]): GenerationContext[1]
{
   ^$context(conventions=$conventions);   
}
