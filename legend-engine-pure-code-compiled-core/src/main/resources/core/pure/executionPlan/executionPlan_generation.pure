// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::extension::*;
import meta::pure::graphFetch::*;
import meta::pure::router::clustering::*;
import meta::pure::runtime::*;
import meta::pure::mapping::*;
import meta::pure::executionPlan::*;

function meta::pure::executionPlan::executionPlan(f:FunctionDefinition<Any>[1], extensions:meta::pure::extension::Extension[*]):ExecutionPlan[1]
{
   $f->executionPlan(^ExecutionContext(), $extensions, noDebug());
}

function meta::pure::executionPlan::executionPlan(f:FunctionDefinition<Any>[1], extensions:meta::pure::extension::Extension[*], debugContext:DebugContext[1]):ExecutionPlan[1]
{
   $f->executionPlan(^ExecutionContext(), $extensions, $debugContext);
}

function meta::pure::executionPlan::executionPlan(f:FunctionDefinition<Any>[1], context:ExecutionContext[1], extensions:meta::pure::extension::Extension[*]):ExecutionPlan[1]
{
   $f->executionPlan($context, $extensions, noDebug());
}

function meta::pure::executionPlan::executionPlan(f:FunctionDefinition<Any>[1], m:Mapping[1], runtime:Runtime[1], extensions:meta::pure::extension::Extension[*], debugContext:DebugContext[1]):ExecutionPlan[1]
{
   $f->executionPlan($m, $runtime, ^ExecutionContext(), $extensions, $debugContext);
}

function meta::pure::executionPlan::executionPlan(f:FunctionDefinition<Any>[1], m:Mapping[1], runtime:Runtime[1], extensions:meta::pure::extension::Extension[*]):ExecutionPlan[1]
{
   $f->executionPlan($m, $runtime, ^ExecutionContext(), $extensions, noDebug());
}

function meta::pure::executionPlan::executionPlan(f:FunctionDefinition<Any>[1], m:Mapping[1], runtime:Runtime[1], shouldDebug:Boolean[1], extensions:meta::pure::extension::Extension[*]):ExecutionPlan[1]
{
   $f->executionPlan($m, $runtime, ^ExecutionContext(), $extensions, if($shouldDebug,|debug(),|noDebug()));
}

function meta::pure::executionPlan::executionPlan(f:FunctionDefinition<Any>[1], m:Mapping[1], runtime:Runtime[1], context:ExecutionContext[1], extensions:meta::pure::extension::Extension[*]):ExecutionPlan[1]
{
   $f->executionPlan($m, $runtime, $context, $extensions, noDebug());
}

Class meta::pure::executionPlan::NodeAndVars
{
   nodes : ExecutionNode[*];
   vars : Map<String, List<Any>>[1];
}

Class meta::pure::executionPlan::ExecutionOption
{
}

Class meta::pure::executionPlan::ExecutionOptionContext extends ExecutionContext
{
   executionOptions : ExecutionOption[*];
}

// Move to platform


Class meta::pure::executionPlan::PlanVarPlaceHolder extends meta::pure::executionPlan::FunctionParameter
{
}

Class meta::pure::executionPlan::PlanSetPlaceHolder
{
    name : String[1];
    tdsColumns: TDSColumn[*];
}

function meta::pure::executionPlan::executionPlan(f:FunctionDefinition<Any>[1], context:ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debugContext:DebugContext[1]):ExecutionPlan[1]
{
   let routed = $f->routeFunction($context, $extensions, $debugContext);
   meta::pure::executionPlan::executionPlan($routed, $f, ^Mapping(package=meta::pure::executionPlan, name='dummy'), ^Runtime(), $context, $extensions, $debugContext);
}

function meta::pure::executionPlan::executionPlan(f:FunctionDefinition<Any>[1], m:Mapping[1], runtime:Runtime[1], context:ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debugContext:DebugContext[1]):ExecutionPlan[1]
{
   let routed = $f->routeFunction($m, $runtime, $context, $extensions, $debugContext);
   meta::pure::executionPlan::executionPlan($routed, $f, $m, $runtime, $context, $extensions, $debugContext);
}

function meta::pure::executionPlan::executionPlan(routed:RoutingResult[1], f:FunctionDefinition<Any>[1], m:Mapping[1], runtime:Runtime[1], context:ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debugContext:DebugContext[1]):ExecutionPlan[1]
{
   let routedFunction = $routed.functions->evaluateAndDeactivate()->toOne();
   let clusters = $routedFunction.expressionSequence->evaluateAndDeactivate()->cast(@ClusteredValueSpecification);

   let functionParameters = $f->stubFuncParameters();
   let inScopeVars = $functionParameters->map(ep|pair($ep.name, ^List<Any>(values=$ep)))->newMap();
   
   meta::pure::executionPlan::executionPlan($clusters, $routed, $routedFunction, $f, $m, $runtime, $context, $inScopeVars, $extensions, $debugContext);
}

function meta::pure::executionPlan::executionPlan(clusters:ClusteredValueSpecification[*], routed:RoutingResult[1], routedFunction:FunctionDefinition<Any>[1], f:FunctionDefinition<Any>[1], m:Mapping[1], runtime:Runtime[1], context:ExecutionContext[1], inScopeVars:Map<String, List<Any>>[1], extensions:meta::pure::extension::Extension[*], debugContext:DebugContext[1]):ExecutionPlan[1]
{
   let functionParameters = $f->stubFuncParameters();
   
   let node = if ($clusters->size() == 1,
       | $clusters->at(0)->plan($inScopeVars, $context, $extensions, $debugContext),
       | let allNodes = $clusters->fold({c,a|let x = $a.vars;
                                             let node = $c->plan($x, $context, $extensions, $debugContext);
                                             let nVars = $node->match([a:AllocationExecutionNode[1]|let varValues = if($a.resultType.type ==TabularDataSet,
                                                                                                                       |^PlanSetPlaceHolder(name=$a.varName,tdsColumns = $a.resultType->match([x:TDSResultType[1]|$x.tdsColumns, a:Any[1]|[]])),
                                                                                                                       |^PlanVarPlaceHolder(name=$a.varName,type = $a.resultType.type, multiplicity=$a.resultSizeRange));
                                                                                                    $x->put($a.varName, ^List<Any>(values=$varValues));,
                                                                       a:Any[*]|$x]);
                                             ^$a(nodes+=$node, vars = $nVars);
                                        }, ^NodeAndVars(vars = $inScopeVars)).nodes;
         ^SequenceExecutionNode
         (
            resultType = $allNodes->last()->toOne().resultType,
            resultSizeRange = $allNodes->last()->toOne().resultSizeRange,
            executionNodes = $allNodes
         );
   );

   let executionOptionParameters = $context->match([
                                                p: meta::pure::executionPlan::ExecutionOptionContext[1] | $p->meta::pure::executionPlan::stubExecutionOptionParameters($extensions),
                                                c: ExecutionContext[1] | []
                                             ]);

   let updatedNode = addFunctionParametersValidationNode($node, $f, $functionParameters->concatenate($executionOptionParameters)->checkConflictingParameters(), $routedFunction);

   ^ExecutionPlan
   (
      func = $f,
      mapping = $m,
      runtime = $runtime,
      rootExecutionNode = $updatedNode,
      authDependent = false || $updatedNode->allNodes($extensions).authDependent->contains(true),
      kerberos =  $updatedNode->allNodes($extensions).kerberos->first(),
      processingTemplateFunctions = $updatedNode->allNodes($extensions).supportFunctions->removeDuplicates()
   );
}



function meta::pure::executionPlan::generatePlatformCode(plan:ExecutionPlan[1], platformId:String[1], config:meta::pure::executionPlan::platformBinding::PlatformBindingConfig[1], extensions:meta::pure::extension::Extension[*]):ExecutionPlan[1]
{
   meta::pure::executionPlan::generatePlatformCode($plan, $platformId, $config, $extensions, if(isOptionSet('DebugPlatformCodeGen'), |debug(), |noDebug()));
}

function meta::pure::executionPlan::generatePlatformCode(plan:ExecutionPlan[1], platformId:String[1], config:meta::pure::executionPlan::platformBinding::PlatformBindingConfig[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ExecutionPlan[1]
{
   let platformBinding = $extensions->meta::pure::executionPlan::platformBinding::extractPlatformBindingById($platformId);
   $platformBinding.bindPlanToPlatform->eval($plan, $config, $extensions, $debug);
}


function <<access.private>> meta::pure::executionPlan::addFunctionParametersValidationNode(node:ExecutionNode[1], f:FunctionDefinition<Any>[1], planVarPlaceHolders:PlanVarPlaceHolder[*], routedFunction:FunctionDefinition<Any>[1]):ExecutionNode[1]
{
   let enumValidationContext = $planVarPlaceHolders->filter(p | $p.type->instanceOf(Enumeration))->map(e | ^meta::pure::executionPlan::EnumValidationContext(varName = $e.name, validEnumValues = $e.type->cast(@Enumeration<Any>)->enumValues()->map(e |$e->id())));
   let paramsSupportedForStreamInput = $routedFunction->findParamsSupportedForStreamInput();
   if($f->instanceOf(LambdaFunction) && $planVarPlaceHolders->isNotEmpty(),| let functionParameters = $planVarPlaceHolders->map(p|^FunctionParameter(name=$p.name, supportsStream = $p.name->in($paramsSupportedForStreamInput), multiplicity=$p.multiplicity, type=$p.type));
                                                                             let functionParametersValidationNode = ^FunctionParametersValidationNode(functionParameters = $functionParameters, resultType=^ResultType(type = Boolean), parameterValidationContext = $enumValidationContext);
                                                                             $node->match([s:SequenceExecutionNode[1]|^$s(executionNodes=$functionParametersValidationNode->concatenate($s.executionNodes)),
                                                                                           e:ExecutionNode[1]|^SequenceExecutionNode(executionNodes=[$functionParametersValidationNode, $e], resultType=$e.resultType, resultSizeRange=$e.resultSizeRange)]);
                                                                         ,| $node);
}

function <<access.private>> meta::pure::executionPlan::findParamsSupportedForStreamInput(routedFunction:FunctionDefinition<Any>[1]):String[*]
{
   let vars = $routedFunction.expressionSequence->evaluateAndDeactivate()->cast(@ClusteredValueSpecification)->map(cvs| let clusterVal                     = $cvs.val->deepByPassRouterInfo()->cast(@ValueSpecification);
                                                                                                                        let varsSupportedForStreamInput    = $clusterVal->findParamsForStreamInput($cvs.store->elementToPath(), $cvs.s.supportsStream, true, false);
                                                                                                                        let varsNotSupportedForStreamInput = $clusterVal->findParamsForStreamInput($cvs.store->elementToPath(), $cvs.s.supportsStream, false, false);
                                                                                                                        pair(^List<Pair<String, String>>(values=$varsSupportedForStreamInput), ^List<Pair<String, String>>(values=$varsNotSupportedForStreamInput)););
   let allVarsSupportedForStreamInput = $vars.first.values;
   let allVarsNotSupportedForStreamInput = $vars.second.values;

   let supportedVarsUsedWithMultipleStores = $allVarsSupportedForStreamInput->groupBy(x | $x.first)->keyValues()->filter(p | $p.second.values.second->distinct()->size() > 1).first;

   $allVarsSupportedForStreamInput.first->filter(p | !$p->in($allVarsNotSupportedForStreamInput.first) && !$p->in($supportedVarsUsedWithMultipleStores));
}

function <<access.private>> meta::pure::executionPlan::findParamsForStreamInput(vs:ValueSpecification[1], storePath:String[1], streamSupportedFunction:Function<{FunctionExpression[1]->Boolean[1]}>[1], getSupportedParams:Boolean[1], isSupportedForStream:Boolean[1]):Pair<String, String>[*]
{
   $vs->match([fe:FunctionExpression[1] | $fe.parametersValues->map(v | $v->findParamsForStreamInput($storePath, $streamSupportedFunction, $getSupportedParams, $streamSupportedFunction->eval($fe->cast(@FunctionExpression)))),
               i:InstanceValue[1] | $i.values->map( v |
                                                         $v->match([a: ValueSpecification[1] | $a->findParamsForStreamInput($storePath, $streamSupportedFunction, $getSupportedParams, $isSupportedForStream);,
                                                         k : KeyExpression[1] | $k.expression->findParamsForStreamInput($storePath, $streamSupportedFunction, $getSupportedParams, $isSupportedForStream);,
                                                         l : LambdaFunction<Any>[1] | $l.expressionSequence->map(e | $e->findParamsForStreamInput($storePath, $streamSupportedFunction, $getSupportedParams, $isSupportedForStream));,
                                                         t : Type[1] | [];,
                                                         a:Any[1] | [];]););,
               ve:VariableExpression[1] | if(($isSupportedForStream && $getSupportedParams) || (!$isSupportedForStream && !$getSupportedParams), | pair($ve.name, $storePath), |[]);,
               cvs:ClusteredValueSpecification[1] | $cvs.val->findParamsForStreamInput($cvs.store->elementToPath(), $cvs.s.supportsStream, $getSupportedParams, false),
               vs:ValueSpecification[1] | [];
             ]
          );
}

function meta::pure::executionPlan::stubFuncParameters(f:FunctionDefinition<Any>[1]):PlanVarPlaceHolder[*]
{
   $f->functionType().parameters->evaluateAndDeactivate()->map(p|^PlanVarPlaceHolder(name=$p.name, type = $p.genericType.rawType->toOne(), multiplicity=$p.multiplicity));
}

function meta::pure::executionPlan::plan(cluster:ClusteredValueSpecification[1], inScopeVars:Map<String, List<Any>>[1], context:ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debugContext:DebugContext[1]):ExecutionNode[1]
{
    let fe = $cluster.val->byPassValueSpecificationWrapper()->cast(@FunctionExpression);

    //This is required to populate the setup sql for test connections where csv data has been supplied. It is done here to ensure that the plan generation is always
    //the only place where sql is generated for this case.
    let rt = $cluster.runtime->match([
        r:Runtime[1] | ^$r(connections = $r.connections->map(c | if ($cluster.s.reprocessConnection->isEmpty(),|$c,|$cluster.s.reprocessConnection->toOne()->eval($c)))),
        r:Runtime[0..1] | $r
    ]);

    let query = ^meta::pure::mapping::StoreQuery(store=$cluster.store, fe=$fe, inScopeVars=$inScopeVars);
    let res = $cluster.s.planExecution->toOne()->eval($query, $cluster.val->match([r:RoutedValueSpecification[1]|$r, a:Any[*]|[]])->cast(@RoutedValueSpecification), $cluster.mapping, $rt, if ($cluster.exeCtx->isEmpty(), | $context, | $cluster.exeCtx->toOne()), $extensions, $debugContext);
    ^$res(fromCluster=$cluster);
}

function meta::pure::executionPlan::nodeFromConnection(c:Connection[1], tree:RootGraphFetchTree<Any>[0..1], enableConstraints:Boolean[1], checked:Boolean[1], extensions:meta::pure::extension::Extension[*]):ExecutionNode[1]
{
   $c->nodeFromConnection($tree, $enableConstraints, $checked, $extensions, {c:Connection[1] | fail('No node available for connection'); @ExecutionNode;});
}

function meta::pure::executionPlan::nodeFromConnection(c:Connection[1], tree:RootGraphFetchTree<Any>[0..1], enableConstraints:Boolean[1], checked:Boolean[1], extensions:meta::pure::extension::Extension[*], dflt:Function<{Nil[1]->ExecutionNode[1]}>[*]):ExecutionNode[1]
{
   $c->match([
               {connection:meta::external::shared::format::executionPlan::ExternalFormatConnection[1] |
                  let binding         = $connection.element->cast(@meta::external::shared::format::binding::Binding);
                  let sourceNode      = meta::external::shared::format::executionPlan::getSourceNodeFromExternalSource($connection.externalSource);
                  let returnedClass   = $tree.class->toOne();

                  assert($tree->isNotEmpty(), 'Deserialization without Graph Fetch Tree not yet supported');
                  ^meta::external::shared::format::executionPlan::ExternalFormatInternalizeExecutionNode
                  (
                      resultType        = ^PartialClassResultType(
                                            type=$returnedClass,
                                            propertiesWithParameters = $tree.subTrees->cast(@PropertyGraphFetchTree)->map(x | $x->map(x | ^PropertyWithParameters(property = $x.property, parameters = $x.parameters)))
                                          ),
                      resultSizeRange   = ZeroMany,
                      tree              = $tree,
                      binding           = $connection->cast(@meta::external::shared::format::executionPlan::ExternalFormatConnection).element->cast(@meta::external::shared::format::binding::Binding),
                      executionNodes    = $sourceNode,
                      enableConstraints = $enableConstraints,
                      checked           = $checked
                  );
               }
            ]->concatenate($dflt)->toOneMany())->toOne();
}

function meta::pure::executionPlan::isExecutionOptionPresent(execCtx: ExecutionOptionContext[1], execOption: Class<Any>[1]):Boolean[1]
{
   let executionOptionsList = $execCtx.executionOptions->filter(f| $f->instanceOf($execOption));
   assert($executionOptionsList->size() <= 1, |'Execution Option :' + $execOption.name->toOne() + 'has more than one instance specified in the context');
   $executionOptionsList->isNotEmpty();
}

function meta::pure::executionPlan::validateAndReturnExecutionOptionOfType(execCtx: ExecutionOptionContext[1], execOption: Class<Any>[1]):ExecutionOption[1]
{
   let executionOptionsList = $execCtx.executionOptions->filter(f| $f->instanceOf($execOption));
   assert($executionOptionsList->size() == 1, |'Execution Option:' + $execOption.name->toOne() + 'not mentioned or mentioned more than once as part of the context');
   $executionOptionsList->head()->toOne();
}

function meta::pure::executionPlan::stubExecutionOptionParameters(execOptionCtx: ExecutionOptionContext[1], extensions: meta::pure::extension::Extension[*]):PlanVarPlaceHolder[*]
{
   let planVarPlaceHolders = $extensions.executionPlanExtensions()->map(
      sc|$sc.extractVariablesFromExecutionOption->map(f|$execOptionCtx.executionOptions->map(x|$f->eval($x)));
   );
   $planVarPlaceHolders->checkConflictingParameters();
}

function meta::pure::executionPlan::checkConflictingParameters(planVarPlaceHolderList: PlanVarPlaceHolder[*]):PlanVarPlaceHolder[*]
{
   let removeDuplicatesFromList  = $planVarPlaceHolderList->removeDuplicatesBy(y|$y.name);
   assert($removeDuplicatesFromList->size()==$planVarPlaceHolderList->size(), |'Conflicting variable names present in the following list: ' + $planVarPlaceHolderList->map(y|$y.name)->makeString(', '));
   $planVarPlaceHolderList;
}
