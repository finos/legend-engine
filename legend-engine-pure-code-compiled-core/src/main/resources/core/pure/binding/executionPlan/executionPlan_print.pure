// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::format::binding::*;
import meta::external::shared::format::executionPlan::*;

import meta::pure::executionPlan::toString::*;
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::routing::*; 

import meta::pure::extension::*;

function meta::external::shared::format::executionPlan::toString::printPlanNodeToString(space:String[1], extensions:Extension[*]): Function<{Nil[1]->String[1]}>[*]
{
   [
      {node:ExternalFormatExternalizeExecutionNode[1] |
         'ExternalFormat_Externalize\n' + 
         $space + '(' + header($node, $space, $extensions) + '\n' +
         $space + '  checked = ' + $node.checked->toString() + '\n' +
         $space + '  binding = ' + $node.binding->elementToPath() + '\n' +
         $node->childrenToString($space+'  ', $extensions) + '\n' +
         $node.implementation->printImplementation('implementation', $space+'  ', $extensions) +
         $space + ')\n'
      },
      {node:ExternalFormatInternalizeExecutionNode[1] |
         'ExternalFormat_Internalize\n' +
         $space + '(' + header($node, $space, $extensions) + '\n' +
         $space + '  binding = ' + $node.binding->elementToPath() + '[' + $node.binding.contentType + ']\n' +
         $space + '  enableConstraints = ' + $node.enableConstraints->toString() + '\n' +
         $space + '  checked = ' + $node.checked->toString() + '\n' +
         if($node.tree->isEmpty(), | '', | $space + '  graphFetchTree = ' + $node.tree->toOne()->sortTree()->asString(true)->replace('\n', '')->replace(' ', '') + '\n') +
         if($node.executionNodes->isEmpty(), |'', |$node->childrenToString($space+'  ', $extensions) + '\n') +
         $node.implementation->printImplementation('implementation', $space+'  ', $extensions) +
         $space + ')\n'
      },
      {node:UrlStreamExecutionNode[1] |   // TODO: TO BE REMOVED
         'UrlStream\n' +
         $space + '(' + header($node, $space, $extensions) + '\n' +
         $space + '  url = ' + $node.url + '\n' +
         $node->childrenToString($space+'  ', $extensions) + '\n' +
         $space + ')\n'
      }
   ]
}
