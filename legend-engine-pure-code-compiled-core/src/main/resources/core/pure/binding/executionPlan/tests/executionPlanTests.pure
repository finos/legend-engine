
// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::format::binding::*;
import meta::pure::dataQuality::*;
import meta::external::shared::format::functions::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::tests::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::functions::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::model::unit::*;
import meta::pure::runtime::*;
import meta::pure::extension::*;

Class meta::external::shared::format::executionPlan::tests::Person
[
   firstNameNotEmpty : $this.firstName->isNotEmpty(),
   lastNameNotEmpty : $this.lastName->isNotEmpty()
]
{
  firstName : String[1];
  lastName  : String[1];
}

Class meta::external::shared::format::executionPlan::tests::_Person
{
  firstName : String[1];
  lastName  : String[1];
}

Class meta::external::shared::format::executionPlan::tests::TargetPerson
{
  fullName : String[1];
}

function <<meta::pure::profiles::test.Test>> meta::external::shared::format::executionPlan::tests::planInternalizeFromRuntimeString(): Boolean[1]
{
  let binding    = testBinding();
  let planString = buildPlan({data:String[1]| Person->internalize($binding, $data)});
  let expected ='Sequence\n' +
                '(\n' +
                '  type = Class[impls=]\n' +
                '  resultSizeRange = *\n' +
                '  (\n' +
                '    FunctionParametersValidationNode\n' +
                '    (\n' +
                '      functionParameters = [data:String[1]]\n' +
                '    )\n' +
                '    ExternalFormat_Internalize\n' +
                '    (\n' +
                '      type = Class[impls=]\n' +
                '      resultSizeRange = *\n' +
                '      binding = meta::external::shared::format::executionPlan::tests::MyBinding[application/x.flatdata]\n' +
                '      enableConstraints = true\n' +
                '      checked = false\n' +
                '      graphFetchTree = #{meta::external::shared::format::executionPlan::tests::Person{firstName,lastName}}#\n' +
                '\n' +
                '      (\n' +
                '        VariableResolution\n' +
                '        (\n' +
                '          type = String\n' +
                '          varName = data\n' +
                '\n' +
                '        )\n' +
                '      )\n' +
                '    )\n' +
                '  )\n' +
                ')\n';

   assertEquals($expected, $planString);
}

function <<meta::pure::profiles::test.Test>> meta::external::shared::format::executionPlan::tests::planInternalizeFromRuntimeInputOfTypeByte(): Boolean[1]
{
  let binding    = testBinding();
  let planString = buildPlan({stream:Byte[*]| Person->internalize($binding, $stream)});

  let expected ='Sequence\n' +
                '(\n' +
                '  type = Class[impls=]\n' +
                '  resultSizeRange = *\n' +
                '  (\n' +
                '    FunctionParametersValidationNode\n' +
                '    (\n' +
                '      functionParameters = [stream:Byte[*]]\n' +
                '    )\n' +
                '    ExternalFormat_Internalize\n' +
                '    (\n' +
                '      type = Class[impls=]\n' +
                '      resultSizeRange = *\n' +
                '      binding = meta::external::shared::format::executionPlan::tests::MyBinding[application/x.flatdata]\n' +
                '      enableConstraints = true\n' +
                '      checked = false\n' +
                '      graphFetchTree = #{meta::external::shared::format::executionPlan::tests::Person{firstName,lastName}}#\n' +
                '\n' +
                '      (\n' +
                '        VariableResolution\n' +
                '        (\n' +
                '          type = Byte\n' +
                '          varName = stream\n' +
                '\n' +
                '        )\n' +
                '      )\n' +
                '    )\n' +
                '  )\n' +
                ')\n';

   assertEquals($expected, $planString);
}

function <<meta::pure::profiles::test.Test>> meta::external::shared::format::executionPlan::tests::planInternalizeFromConstantString(): Boolean[1]
{
  let binding    = testBinding();
  let planString = buildPlan({| Person->internalize($binding, 'FIRST_NAME,LAST_NAME\nFred,Bloggs')});

  let expected = 
        'ExternalFormat_Internalize\n' +
        '(\n' +
        '  type = Class[impls=]\n' +
        '  resultSizeRange = *\n' +
        '  binding = meta::external::shared::format::executionPlan::tests::MyBinding[application/x.flatdata]\n' +
        '  enableConstraints = true\n' +
        '  checked = false\n' +
        '  graphFetchTree = #{meta::external::shared::format::executionPlan::tests::Person{firstName,lastName}}#\n' +
        '\n' +
        '  (\n' +
        '    Sequence\n' +
        '    (\n' +
        '      type = String\n' +
        '      resultSizeRange = 1\n' +
        '      (\n' +
        '        Allocation\n' +
        '        (\n' +
        '          type = Void\n' +
        '          name = internalizeVar$\n' +
        '          value = \n' +
        '            (\n' +
        '              Constant\n' +
        '              (\n' +
        '                type = String\n' +
        '                values=[FIRST_NAME,LAST_NAME\n' +
        'Fred,Bloggs]\n' +
        '              )\n' +
        '            )\n' +
        '        )\n' +
        '        VariableResolution\n' +
        '        (\n' +
        '          type = String\n' +
        '          resultSizeRange = 1\n' +
        '          varName = internalizeVar$\n' +
        '\n' +
        '        )\n' +
        '      )\n' +
        '    )\n' +
        '  )\n' +
        ')\n';

   assertEquals($expected, $planString);
}

function <<meta::pure::profiles::test.Test>> meta::external::shared::format::executionPlan::tests::planInternalizeCheck(): Boolean[1]
{
  let binding    = testBinding();
  let planString = buildPlan({data:Byte[*]| Person->internalize($binding, $data)->checked()});

  let expected =  'Sequence\n' +
                  '(\n' +
                  '  type = Class[impls=]\n' +
                  '  resultSizeRange = *\n' +
                  '  (\n' +
                  '    FunctionParametersValidationNode\n' +
                  '    (\n' +
                  '      functionParameters = [data:Byte[*]]\n' +
                  '    )\n' +
                  '    ExternalFormat_Internalize\n' +
                  '    (\n' +
                  '      type = Class[impls=]\n' +
                  '      resultSizeRange = *\n' +
                  '      binding = meta::external::shared::format::executionPlan::tests::MyBinding[application/x.flatdata]\n' +
                  '      enableConstraints = true\n' +
                  '      checked = true\n' +
                  '      graphFetchTree = #{meta::external::shared::format::executionPlan::tests::Person{firstName,lastName}}#\n' +
                  '\n' +
                  '      (\n' +
                  '        VariableResolution\n' +
                  '        (\n' +
                  '          type = Byte\n' +
                  '          varName = data\n' +
                  '\n' +
                  '        )\n' +
                  '      )\n' +
                  '    )\n' +
                  '  )\n' +
                  ')\n';

   assertEquals($expected, $planString);
}

function <<meta::pure::profiles::test.Test>> meta::external::shared::format::executionPlan::tests::planInternalizeGraphFetch(): Boolean[1]
{
  let binding    = testBinding();
  let gft = #{Person{firstName}}#;
  let planString = buildPlan({data:Byte[*]| Person->internalize($binding, $data)->graphFetch($gft)});

  let expected ='Sequence\n' +
                '(\n' +
                '  type = Class[impls=]\n' +
                '  resultSizeRange = *\n' +
                '  (\n' +
                '    FunctionParametersValidationNode\n' +
                '    (\n' +
                '      functionParameters = [data:Byte[*]]\n' +
                '    )\n' +
                '    ExternalFormat_Internalize\n' +
                '    (\n' +
                '      type = Class[impls=]\n' +
                '      resultSizeRange = *\n' +
                '      binding = meta::external::shared::format::executionPlan::tests::MyBinding[application/x.flatdata]\n' +
                '      enableConstraints = true\n' +
                '      checked = false\n' +
                '      graphFetchTree = #{meta::external::shared::format::executionPlan::tests::Person{firstName,lastName}}#\n' +
                '\n' +
                '      (\n' +
                '        VariableResolution\n' +
                '        (\n' +
                '          type = Byte\n' +
                '          varName = data\n' +
                '\n' +
                '        )\n' +
                '      )\n' +
                '    )\n' +
                '  )\n' +
                ')\n';

   assertEquals($expected, $planString);
}

function <<meta::pure::profiles::test.Test>> meta::external::shared::format::executionPlan::tests::planInternalizeGraphFetchUnexpanded(): Boolean[1]
{
  let binding    = testBinding();
  let gft = #{Person{firstName}}#;
  let planString = buildPlan({data:Byte[*]| Person->internalize($binding, $data)->graphFetchUnexpanded($gft)});

  let expected ='Sequence\n' +
                '(\n' +
                '  type = Class[impls=]\n' +
                '  resultSizeRange = *\n' +
                '  (\n' +
                '    FunctionParametersValidationNode\n' +
                '    (\n' +
                '      functionParameters = [data:Byte[*]]\n' +
                '    )\n' +
                '    ExternalFormat_Internalize\n' +
                '    (\n' +
                '      type = Class[impls=]\n' +
                '      resultSizeRange = *\n' +
                '      binding = meta::external::shared::format::executionPlan::tests::MyBinding[application/x.flatdata]\n' +
                '      enableConstraints = true\n' +
                '      checked = false\n' +
                '      graphFetchTree = #{meta::external::shared::format::executionPlan::tests::Person{firstName}}#\n' +
                '\n' +
                '      (\n' +
                '        VariableResolution\n' +
                '        (\n' +
                '          type = Byte\n' +
                '          varName = data\n' +
                '\n' +
                '        )\n' +
                '      )\n' +
                '    )\n' +
                '  )\n' +
                ')\n';

   assertEquals($expected, $planString);
}

function <<meta::pure::profiles::test.Test>> meta::external::shared::format::executionPlan::tests::planInternalizeGraphFetchCheckedUnexpanded(): Boolean[1]
{
  let binding    = testBinding();
  let gft = #{Person{firstName}}#;
  let planString = buildPlan({data:Byte[*]| Person->internalize($binding, $data)->graphFetchCheckedUnexpanded($gft)});

  let expected =  'Sequence\n' +
                  '(\n' +
                  '  type = Class[impls=]\n' +
                  '  resultSizeRange = *\n' +
                  '  (\n' +
                  '    FunctionParametersValidationNode\n' +
                  '    (\n' +
                  '      functionParameters = [data:Byte[*]]\n' +
                  '    )\n' +
                  '    ExternalFormat_Internalize\n' +
                  '    (\n' +
                  '      type = Class[impls=]\n' +
                  '      resultSizeRange = *\n' +
                  '      binding = meta::external::shared::format::executionPlan::tests::MyBinding[application/x.flatdata]\n' +
                  '      enableConstraints = true\n' +
                  '      checked = true\n' +
                  '      graphFetchTree = #{meta::external::shared::format::executionPlan::tests::Person{firstName}}#\n' +
                  '\n' +
                  '      (\n' +
                  '        VariableResolution\n' +
                  '        (\n' +
                  '          type = Byte\n' +
                  '          varName = data\n' +
                  '\n' +
                  '        )\n' +
                  '      )\n' +
                  '    )\n' +
                  '  )\n' +
                  ')\n';

   assertEquals($expected, $planString);
}

function <<meta::pure::profiles::test.Test>> meta::external::shared::format::executionPlan::tests::planInternalizeGraphFetchChecked(): Boolean[1]
{
  let binding    = testBinding();
  let gft = #{Person{firstName}}#;
  let planString = buildPlan({data:Byte[*]| Person->internalize($binding, $data)->graphFetchChecked($gft)});

  let expected ='Sequence\n' +
                '(\n' +
                '  type = Class[impls=]\n' +
                '  resultSizeRange = *\n' +
                '  (\n' +
                '    FunctionParametersValidationNode\n' +
                '    (\n' +
                '      functionParameters = [data:Byte[*]]\n' +
                '    )\n' +
                '    ExternalFormat_Internalize\n' +
                '    (\n' +
                '      type = Class[impls=]\n' +
                '      resultSizeRange = *\n' +
                '      binding = meta::external::shared::format::executionPlan::tests::MyBinding[application/x.flatdata]\n' +
                '      enableConstraints = true\n' +
                '      checked = true\n' +
                '      graphFetchTree = #{meta::external::shared::format::executionPlan::tests::Person{firstName,lastName}}#\n' +
                '\n' +
                '      (\n' +
                '        VariableResolution\n' +
                '        (\n' +
                '          type = Byte\n' +
                '          varName = data\n' +
                '\n' +
                '        )\n' +
                '      )\n' +
                '    )\n' +
                '  )\n' +
                ')\n';

   assertEquals($expected, $planString);
}

function <<meta::pure::profiles::test.Test>> meta::external::shared::format::executionPlan::tests::planInternalizeWithM2MChaining(): Boolean[1]
{
  let binding    = testBinding();
  let tree       = #{TargetPerson{fullName}}#;
  let planString = buildPlan({data:Byte[*]| TargetPerson.all()->graphFetch($tree)->from(M2MMapping, getRuntimeWithModelQueryConnection(Person, $binding, $data))->externalize($binding, $tree);});

  let expected =
        'Sequence\n' +
        '(\n' +
        '  type = String\n' +
        '  resultSizeRange = 1\n' +
        '  (\n' +
        '    FunctionParametersValidationNode\n' +
        '    (\n' +
        '      functionParameters = [data:Byte[*]]\n' +
        '    )\n' +
        '    ExternalFormat_Externalize\n' +
        '    (\n' +
        '      type = String\n' +
        '      resultSizeRange = 1\n' +
        '      checked = false\n' +
        '      binding = meta::external::shared::format::executionPlan::tests::MyBinding\n' +
        '\n' +
        '      (\n' +
        '        StoreMappingGlobalGraphFetch\n' +
        '        (\n' +
        '          type = PartialClass[impls=[(meta::external::shared::format::executionPlan::tests::TargetPerson | M2MMapping.meta_external_shared_format_executionPlan_tests_TargetPerson)], propertiesWithParameters = [fullName]]\n' +
        '          resultSizeRange = *\n' +
        '          store = MODEL\n' +
        '          localGraphFetchExecutionNode = \n' +
        '             InMemoryRootGraphFetch\n' +
        '             (\n' +
        '               type = PartialClass[impls=[(meta::external::shared::format::executionPlan::tests::TargetPerson | M2MMapping.meta_external_shared_format_executionPlan_tests_TargetPerson)], propertiesWithParameters = [fullName]]\n' +
        '               requires = [data(Byte[*])]\n'+
        '               graphFetchTree = [meta_external_shared_format_executionPlan_tests_TargetPerson/meta::external::shared::format::executionPlan::tests::TargetPerson]{@(meta_external_shared_format_executionPlan_tests_TargetPerson->)@[/fullName]}\n' +
        '               nodeIndex = 0\n' +
        '               batchSize = 1\n' +
        '               checked = false\n' +
        '               (\n' +
        '                 ExternalFormat_Internalize\n' +
        '                 (\n' +
        '                   type = Class[impls=]\n' +
        '                   resultSizeRange = *\n' +
        '                   binding = meta::external::shared::format::executionPlan::tests::MyBinding[application/x.flatdata]\n' +
        '                   enableConstraints = true\n' +
        '                   checked = false\n' +
        '                   graphFetchTree = #{meta::external::shared::format::executionPlan::tests::Person{firstName,lastName}}#\n' +
        '\n' +
        '                   (\n' +
        '                     VariableResolution\n' +
        '                     (\n' +
        '                       type = Byte\n' +
        '                       varName = data\n' +
        '\n' +
        '                     )\n' +
        '                   )\n' +
        '                 )\n' +
        '               )\n' +
        '               children = [\n' +
        '                  \n' +
        '               ]\n' +
        '             )\n' +
        '          children = [\n' +
        '             \n' +
        '          ]\n' +
        '          localTreeIndices = [0, 1]\n' +
        '          dependencyIndices = []\n' +
        '        )\n' +
        '      )\n' +
        '    )\n' +
        '  )\n' +
        ')\n';

   assertEquals($expected, $planString);
}

function <<meta::pure::profiles::test.Test>> meta::external::shared::format::executionPlan::tests::planInternalizeWithMultipleM2MChaining(): Boolean[1]
{
  let binding    = testBinding();
  let tree       = #{TargetPerson{fullName}}#;
  let planString = buildPlan({data:Byte[*]| TargetPerson.all()->graphFetch($tree)->from(M2MMapping, mergeRuntimes([^Runtime(connections = ^ModelChainConnection(element=^ModelStore(), mappings = M2MMapping1)), getRuntimeWithModelQueryConnection(_Person, $binding, $data)]))->externalize($binding, $tree);});

  let expected =
        'Sequence\n' +
        '(\n' +
        '  type = String\n' +
        '  resultSizeRange = 1\n' +
        '  (\n' +
        '    FunctionParametersValidationNode\n' +
        '    (\n' +
        '      functionParameters = [data:Byte[*]]\n' +
        '    )\n' +
        '    ExternalFormat_Externalize\n' +
        '    (\n' +
        '      type = String\n' +
        '      resultSizeRange = 1\n' +
        '      checked = false\n' +
        '      binding = meta::external::shared::format::executionPlan::tests::MyBinding\n' +
        '\n' +
        '      (\n' +
        '        StoreMappingGlobalGraphFetch\n' +
        '        (\n' +
        '          type = PartialClass[impls=[(meta::external::shared::format::executionPlan::tests::TargetPerson | M2MMapping.meta_external_shared_format_executionPlan_tests_TargetPerson)], propertiesWithParameters = [fullName]]\n' +
        '          resultSizeRange = *\n' +
        '          store = MODEL\n' +
        '          localGraphFetchExecutionNode = \n' +
        '             InMemoryRootGraphFetch\n' +
        '             (\n' +
        '               type = PartialClass[impls=[(meta::external::shared::format::executionPlan::tests::TargetPerson | M2MMapping.meta_external_shared_format_executionPlan_tests_TargetPerson)], propertiesWithParameters = [fullName]]\n' +
        '               requires = [data(Byte[*])]\n'+
        '               graphFetchTree = [meta_external_shared_format_executionPlan_tests_TargetPerson/meta::external::shared::format::executionPlan::tests::TargetPerson]{@(meta_external_shared_format_executionPlan_tests_TargetPerson->)@[/fullName]}\n' +
        '               nodeIndex = 0\n' +
        '               batchSize = 1\n' +
        '               checked = false\n' +
        '               (\n' +
        '                 StoreMappingGlobalGraphFetch\n' +
        '                 (\n' +
        '                   type = PartialClass[impls=[(meta::external::shared::format::executionPlan::tests::Person | M2MMapping1.meta_external_shared_format_executionPlan_tests_Person)], propertiesWithParameters = [firstName, lastName]]\n' +
        '                   resultSizeRange = *\n' +
        '                   store = MODEL\n' +
        '                   localGraphFetchExecutionNode = \n' +
        '                      InMemoryRootGraphFetch\n' +
        '                      (\n' +
        '                        type = PartialClass[impls=[(meta::external::shared::format::executionPlan::tests::Person | M2MMapping1.meta_external_shared_format_executionPlan_tests_Person)], propertiesWithParameters = [firstName, lastName]]\n' +
        '                        requires = [data(Byte[*])]\n'+
        '                        graphFetchTree = [meta_external_shared_format_executionPlan_tests_Person/meta::external::shared::format::executionPlan::tests::Person]{@(meta_external_shared_format_executionPlan_tests_Person->)@[/firstName],@(meta_external_shared_format_executionPlan_tests_Person->)@[/lastName]}\n' +
        '                        nodeIndex = 0\n' +
        '                        batchSize = 1\n' +
        '                        checked = false\n' +
        '                        (\n' +
        '                          ExternalFormat_Internalize\n' +
        '                          (\n' +
        '                            type = Class[impls=]\n' +
        '                            resultSizeRange = *\n' +
        '                            binding = meta::external::shared::format::executionPlan::tests::MyBinding[application/x.flatdata]\n' +
        '                            enableConstraints = true\n' +
        '                            checked = false\n' +
        '                            graphFetchTree = #{meta::external::shared::format::executionPlan::tests::_Person{firstName,lastName}}#\n' +
        '\n' +
        '                            (\n' +
        '                              VariableResolution\n' +
        '                              (\n' +
        '                                type = Byte\n' +
        '                                varName = data\n' +
        '\n' +
        '                              )\n' +
        '                            )\n' +
        '                          )\n' +
        '                        )\n' +
        '                        children = [\n' +
        '                           \n' +
        '                        ]\n' +
        '                      )\n' +
        '                   children = [\n' +
        '                      \n' +
        '                   ]\n' +
        '                   localTreeIndices = [0, 1, 2]\n' +
        '                   dependencyIndices = []\n' +
        '                 )\n' +
        '               )\n' +
        '               children = [\n' +
        '                  \n' +
        '               ]\n' +
        '             )\n' +
        '          children = [\n' +
        '             \n' +
        '          ]\n' +
        '          localTreeIndices = [0, 1]\n' +
        '          dependencyIndices = []\n' +
        '        )\n' +
        '      )\n' +
        '    )\n' +
        '  )\n' +
        ')\n';

   assertEquals($expected, $planString);
}

function <<access.private>> meta::external::shared::format::executionPlan::tests::testBinding(): Binding[1]
{
  ^Binding(
    name        = 'MyBinding',
    package     = Person.package,
    contentType = 'application/x.flatdata',
    modelUnit   = ^ModelUnit()
  );
}

function meta::external::shared::format::executionPlan::tests::buildPlan(query:FunctionDefinition<Any>[1]): String[1]
{
   let extensions = meta::external::shared::format::externalFormatExtension();
   let plan = $query->buildPlan($extensions);
   $plan->planToString(false, $extensions);
}

function meta::external::shared::format::executionPlan::tests::buildPlan(query:FunctionDefinition<Any>[1], extensions:meta::pure::extension::Extension[*]): ExecutionPlan[1]
{
   executionPlan($query, ^ExecutionContext(), $extensions, noDebug());
}


###Mapping
import meta::external::shared::format::executionPlan::tests::*;

Mapping meta::external::shared::format::executionPlan::tests::M2MMapping
(
  TargetPerson: Pure
  {
    ~src Person
    fullName : $src.firstName + ' ' + $src.lastName;
  }
)

Mapping meta::external::shared::format::executionPlan::tests::M2MMapping1
(
  Person: Pure
  {
    ~src _Person
    firstName : $src.firstName,
    lastName : $src.lastName
  }
)