// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::transform::*;
import meta::external::shared::format::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::platformBinding::legendJava::*;
import meta::external::shared::format::utils::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::platformBinding::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::extension::*;
import meta::pure::executionPlan::engine::java::*;
import meta::external::shared::format::executionPlan::engine::java::*;

function meta::external::shared::format::executionPlan::platformBinding::legendJava::bindingLegendJavaPlatformBindingExtension(): LegendJavaPlatformBindingExtension[1]
{
   ^LegendJavaPlatformBindingExtension
   (
      platformId = legendJavaPlatformBindingId(),

      id = 'BindingLegendJavaPlatformBindingExtension',

      // Node based extensions ------------------------------------------------------

      supportedExecutionNodes = [
         DataQualityExecutionNode,
         ExternalFormatInternalizeExecutionNode,
         ExternalFormatExternalizeExecutionNode
      ],

      updateGenerationContextForNode = {node: ExecutionNode[1], context: GenerationContext[1], path: String[1], extensions: Extension[*], debug: DebugContext[1] |
         $node->match([
            {node:DataQualityExecutionNode[1] | 
               print(if($debug.debug,|$debug.space+'('+$path+') prepare DataQualityExecutionNode\n', |''));
               let childNodeInfo   = $context->nodeInfosForPath($path + '.n1')->toOne();
               $context->addNodeInfo(^$childNodeInfo(path=$path));
            },
            {node:ExternalFormatInternalizeExecutionNode[1] |
               let externalFormatContract = $extensions.availableExternalFormats->cast(@ExternalFormatContract<Any>)->getExternalFormatContractForContentType($node.binding.contentType);
               prepareExternalFormatInternalizeExecutionNode($node, $path, $context, $externalFormatContract, $extensions, $debug);
            },
            {node:ExternalFormatExternalizeExecutionNode[1] | 
               let externalFormatContract = $extensions.availableExternalFormats->cast(@ExternalFormatContract<Any>)->getExternalFormatContractForContentType($node.binding.contentType);
               prepareExternalFormatExternalizeExecutionNode($node, $path, $context, $externalFormatContract, $extensions, $debug);
            },
            n: ExecutionNode[1] | $context
         ])
      },

      generateLegendJavaCodeForNode = {node: ExecutionNode[1], path: String[1], context: GenerationContext[1], extensions: Extension[*], debug: DebugContext[1] |
         $node->match([
            {node:ExternalFormatInternalizeExecutionNode[1] |
               let formatExtension = $extensions.availableExternalFormats->cast(@ExternalFormatContract<Any>)->getExternalFormatContractForContentType($node.binding.contentType);
               let externalFormatJavaBindingDescriptor = $formatExtension.externalFormatPlanDescriptor.platformBindingDescriptors->filter(pb | $pb->instanceOf(ExternalFormatJavaBindingDescriptor))->cast(@ExternalFormatJavaBindingDescriptor);
               assert($externalFormatJavaBindingDescriptor->isNotEmpty(), | 'Java platform binding not found for - ' + $node.binding.contentType);
               assert($externalFormatJavaBindingDescriptor.internalizeDescriptor->size() == 1, | 'Expected 1 internalize descriptor for - ' + $node.binding.contentType + '. Found - ' + $externalFormatJavaBindingDescriptor.internalizeDescriptor->size()->toString());
               $externalFormatJavaBindingDescriptor.internalizeDescriptor->toOne().internalizeGenerator->eval($node, $path, $context, $debug);
            },
            {node:ExternalFormatExternalizeExecutionNode[1] | 
               let formatExtension = $extensions.availableExternalFormats->cast(@ExternalFormatContract<Any>)->getExternalFormatContractForContentType($node.binding.contentType);
               let externalFormatJavaBindingDescriptor = $formatExtension.externalFormatPlanDescriptor.platformBindingDescriptors->filter(pb | $pb->instanceOf(ExternalFormatJavaBindingDescriptor))->cast(@ExternalFormatJavaBindingDescriptor);
               assert($externalFormatJavaBindingDescriptor->isNotEmpty(), | 'Java platform binding not found for - ' + $node.binding.contentType);
               assert($externalFormatJavaBindingDescriptor.externalizeDescriptor->size() == 1, | 'Expected 1 externalize descriptor for - ' + $node.binding.contentType + '. Found - ' + $externalFormatJavaBindingDescriptor.externalizeDescriptor->size()->toString());
               $externalFormatJavaBindingDescriptor.externalizeDescriptor->toOne().externalizeGenerator->eval($node, $path, $context, $debug);
            },
            n: ExecutionNode[1] | ^GeneratedCode()
         ])
      },

      // ------------------------------------------------------ Node based extensions


      // Adhoc extensions -----------------------------------------------------------      

      adhocExtensions = [
         
         ^LegendJavaPlatformDependencyUpdateExtension
         (
            platformDependencyUpdate = {conventions: Conventions[1], extensions: Extension[*] |
               $extensions.availableExternalFormats
                  ->fold({e, uc |
                     $e.externalFormatPlanDescriptor
                        .platformBindingDescriptors
                        ->filter(pb | $pb->instanceOf(ExternalFormatJavaBindingDescriptor))
                        ->cast(@ExternalFormatJavaBindingDescriptor)
                        .enginePlatformDependencies
                        ->map(e | $e->eval($uc))->first()->orElse($uc)
                  }, extendJavaEngineDependencies($conventions))
            }
         )
      ]

      // ----------------------------------------------------------- Adhoc extensions
   )
}
