// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::transform::*;

import meta::external::shared::format::*;
import meta::external::shared::format::binding::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::toString::*;
import meta::external::shared::format::executionPlan::engine::java::*;
import meta::external::shared::format::functions::*;

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::java::*;

import meta::pure::graphFetch::*;

import meta::pure::model::binding::*;
import meta::pure::model::unit::*;

import meta::pure::extension::*;

// TODO: To be removed
import meta::pure::runtime::*;

import meta::pure::store::platform::executionPlan::generation::*;
import meta::pure::store::platform::extension::*;


import meta::pure::store::*;
import meta::pure::router::clustering::*;
import meta::pure::router::routing::*;
import meta::external::shared::format::binding::validation::*;


function meta::external::shared::format::externalFormatExtension(): Extension[1]
{
  meta::external::shared::format::externalFormatExtension('externalFormat')
}

function <<access.private>> meta::external::shared::format::externalFormatExtension(type:String[1]) : Extension[1]
{
   let shared = ^Extension(
      type = $type,
      availableStores            = meta::pure::extension::defaultExtensions().availableStores,
      availableFeatures          = ^FeatureExtension
                                   (
                                     id = 'ExternalFormat',
                                     shouldStopRouting = bindingRouterFunctions(),
                                     printConnectionToString = printConnection_Extension_MANY__Function_MANY_,
                                     printPlanNodeToString = {space:String[1], extensions:Extension[*] | printPlanNodeToString($space, $extensions)}
                                  ),
      serializerExtension      = meta::external::shared::format::serializerExtensionName_String_1__String_1_,
      moduleExtensions = [
       ^PlatformStoreExtension(module = 'platform',
                               routing_extraIsSerialize = isSerialize_FunctionExpression_1__Boolean_1_,
                               executionPlan_generation_nodeForFunctionExpression = executionPlan_generation_nodeForPlatformFunctionExpression()
                              )
      ]
   )
}

function <<access.private>> meta::external::shared::format::executionPlan_generation_nodeForPlatformFunctionExpression(): PureFunctionToProcessFunctionPair[*]
{
   let externalizer  = {fe:FunctionExpression[1], state : PlatformPlanGenerationState[1], extensions : Extension[*], debug:DebugContext[1] |
                            externalizeFunctionProcessor($fe, $state, $extensions, $debug);
                          };
   let internalizer  = {fe:FunctionExpression[1], state : PlatformPlanGenerationState[1], extensions : Extension[*], debug:DebugContext[1] |
                            internalizeFunctionProcessor($fe, $state, $debug);
                          };
   externalizeFunctions()->map(func | ^PureFunctionToProcessFunctionPair(first = $func, second = $externalizer))
    ->concatenate(internalizeFunctions()->map(func | ^PureFunctionToProcessFunctionPair(first = $func, second = $internalizer)));
}

function <<access.private>> meta::external::shared::format::externalizeFunctionProcessor(fe:FunctionExpression[1], state:PlatformPlanGenerationState[1], extensions : Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let children        = $fe.parametersValues->evaluateAndDeactivate()->at(0)->meta::pure::store::platform::executionPlan::generation::processValueSpecification($state, $extensions, $debug)->toOneMany();

   let bindingArg      = $fe.parametersValues->at(1);
   assert($bindingArg->instanceOf(InstanceValue), 'Only literal binding is supported');
   let checked         = $fe.func == externalize_Checked_MANY__Binding_1__String_1_;
   let binding         = $bindingArg->cast(@InstanceValue).values->cast(@Binding)->toOne();

   ^ExternalFormatExternalizeExecutionNode
   (
      resultType      = ^ResultType(type=String),
      resultSizeRange = PureOne,
      checked         = $checked,
      binding         = $binding,
      executionNodes  = $children
   );
}

function meta::external::shared::format::internalizeFunctionProcessor(fe:FunctionExpression[1], state:PlatformPlanGenerationState[1], debug:DebugContext[1]):ExecutionNode[1]
{
   let checked            = $state.checked->isTrue();
   let graphFetchTree     = $state.graphContext.graphFetchTree;
   let enableConstraints  = $state.exeCtx.enableConstraints->isEmpty() || $state.exeCtx.enableConstraints->toOne();
   let bindingArg         = $fe.parametersValues->at(1);

   assert($bindingArg->instanceOf(InstanceValue), 'Only literal binding is supported');
   let binding            = $bindingArg->cast(@InstanceValue).values->cast(@Binding)->toOne();

   let classArg           = $fe.parametersValues->at(0);
   assert($classArg->instanceOf(InstanceValue), 'Only literal class is supported');
   let class              = $classArg->cast(@InstanceValue).values->cast(@meta::pure::metamodel::type::Class<Any>)->toOne();
   
   ^ExternalFormatInternalizeExecutionNode
   (
      resultType        = ^ClassResultType(type=$class),
      resultSizeRange   = ZeroMany,
      binding           = $binding,
      enableConstraints = $enableConstraints,
      checked           = $checked,
      tree              = $graphFetchTree,
      executionNodes    = generateSourceNodeFromFunctionExpression($fe),
      fromCluster       = ^ClusteredValueSpecification(val = $fe, store = ^meta::pure::store::platform::metamodel::PlatformStore(package=::), s = meta::pure::store::platform::contract::platformStoreContract(), executable=true, multiplicity = $fe.multiplicity, genericType  = $fe.genericType, openVars = newMap([])) //TODO: this should be updated once routing is uplifted to handle binding correctly
   );
}

function meta::external::shared::format::generateSourceNodeFromFunctionExpression(fe:FunctionExpression[1]): ExecutionNode[1]
{
   $fe.parametersValues->at(2)->match([
                                        var:VariableExpression[1] | ^VariableResolutionExecutionNode(varName=$var.name->toOne(), resultType = ^DataTypeResultType(type = $var.genericType.rawType->toOne())),
                                        ins:InstanceValue[1]      | assert($ins.values->size() == 1 && $ins.values->toOne()->instanceOf(String), | 'Expected single string value as parameter for internalize. Please contact dev team with this issue!');

                                                                    let varName           = 'internalizeVar$';
                                                                    let allocationNode    = ^AllocationExecutionNode(varName        = $varName, 
                                                                                                                     executionNodes = ^ConstantExecutionNode(values=$ins.values->cast(@String)->toOne(), resultType = ^DataTypeResultType(type = String)),
                                                                                                                     resultType     = ^VoidResultType(type = Void));
                                                                    let varResolutionNode = ^VariableResolutionExecutionNode(varName         = $varName,
                                                                                                                             resultType      = ^DataTypeResultType(type = String),
                                                                                                                             resultSizeRange = PureOne);

                                                                    ^SequenceExecutionNode(executionNodes = [$allocationNode, $varResolutionNode], resultType = ^DataTypeResultType(type = String), resultSizeRange = PureOne);,
                                        fe:FunctionExpression[1]  | assert($fe.func == new_Class_1__String_1__KeyExpression_MANY__T_1_, 'Url must be created using new (^)');
                                                                    let url = $fe.parametersValues->at(2)->cast(@InstanceValue).values
                                                                                                          ->cast(@KeyExpression)
                                                                                                          ->filter(kv|$kv.key.values == 'url')
                                                                                                          ->toOne().expression;
                                                                    $url->match([
                                                                      var:VariableExpression[1] | ^UrlStreamExecutionNode(url='${' + $var.name->toOne() + '}', resultType = ^DataTypeResultType(type = ByteStream), requiredVariableInputs = ^VariableInput(name = $var.name->toOne(), multiplicity = $var.multiplicity, type = $var.genericType.rawType->toOne())),
                                                                      ins:InstanceValue[1]      | ^UrlStreamExecutionNode(url=$ins.values->cast(@String)->toOne(), resultType = ^DataTypeResultType(type = ByteStream))
                                                                    ]);
                                      ]);
}

function <<access.private>> meta::external::shared::format::serializerExtensionName(version:String[1]): String[1]
{
   'meta::protocols::pure::' + $version + '::external::shared::format::serializerExtension_String_1__SerializerExtension_1_'
}

function meta::external::shared::format::printConnection(extensions:Extension[*]): Function<{Nil[1]->String[1]}>[*]
{
   [
      {ext:ExternalFormatConnection[1] |
         let source = $ext.externalSource->match([
            u:UrlStreamExternalSource[1] | 'url="'+$u.url+'"'
         ]);
         'binding="'+$ext.element->cast(@Binding)->elementToPath()+'", source=('+$source+')';
      }
   ];
}

