// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::transform::*;

import meta::external::shared::format::*;
import meta::external::shared::format::binding::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::toString::*;
import meta::external::shared::format::executionPlan::engine::java::*;
import meta::external::shared::format::functions::*;

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::java::*;

import meta::pure::graphFetch::*;

import meta::pure::model::binding::*;
import meta::pure::model::unit::*;

import meta::pure::extension::*;

// TODO: To be removed
import meta::pure::runtime::*;

import meta::pure::store::platform::executionPlan::generation::*;
import meta::pure::store::platform::extension::*;

function meta::external::shared::format::externalFormatExtension(): Extension[1]
{
  meta::external::shared::format::externalFormatExtension('externalFormat')
}

function <<access.private>> meta::external::shared::format::externalFormatExtension(type:String[1]) : Extension[1]
{
   let shared = ^Extension(
      type = $type,
      availableStores            = meta::pure::extension::defaultExtensions().availableStores,
      availableFeatures          = ^FeatureExtension
                                   (
                                     id = 'ExternalFormat',
                                     shouldStopRouting = serializeFunctions(),
                                     printConnectionToString = printConnection_Extension_MANY__Function_MANY_,
                                     printPlanNodeToString = {space:String[1], extensions:Extension[*] | printPlanNodeToString($space, $extensions)}
                                  ),
      plan_javaRuntime_enginePlatformDependencies_conventions = {conventions:Conventions[1], extensions:Extension[*] | $extensions.availableExternalFormats
                                                                                                                                   ->fold({e, uc | $e.externalFormatPlanDescriptor
                                                                                                                                                     .platformBindingDescriptors
                                                                                                                                                     ->filter(pb | $pb->instanceOf(ExternalFormatJavaBindingDescriptor))
                                                                                                                                                     ->cast(@ExternalFormatJavaBindingDescriptor)
                                                                                                                                                     .enginePlatformDependencies
                                                                                                                                                     ->map(e | $e->eval($uc))->first()->orElse($uc)},
                                                                                                                                           extendJavaEngineDependencies($conventions))},
      serializerExtension      = meta::external::shared::format::serializerExtensionName_String_1__String_1_,
      plan_javaRuntime_main_prepare2 = 
         {path:String[1], context:GenerationContext[1], extensions:Extension[*], debug:DebugContext[1] | planPrepareExternalFormatNodes($extensions.availableExternalFormats->cast(@ExternalFormatContract<Any>), $path, $context, $extensions, $debug)},
      plan_javaRuntime_main_generatePlatformCode1 = 
         {path:String[1], context:GenerationContext[1], extensions:Extension[*], debug:DebugContext[1] | planJavaGenerateExternalFormatNodes($extensions.availableExternalFormats->cast(@ExternalFormatContract<Any>), $path, $context, $extensions, $debug)},
      moduleExtensions = [
       ^PlatformStoreExtension(module = 'platform',
                               routing_extraIsSerialize = isSerialize_FunctionExpression_1__Boolean_1_,
                               executionPlan_generation_nodeForFunctionExpression = executionPlan_generation_nodeForPlatformFunctionExpression()
                              )
      ]
   )
}

function <<access.private>> meta::external::shared::format::executionPlan_generation_nodeForPlatformFunctionExpression(): PureFunctionToProcessFunctionPair[*]
{
   let processor = {fe:FunctionExpression[1], runtime:Runtime[0..1], inScopeVars : Map<String, List<Any>>[1], advancedRouting: Boolean[0..1], exeCtx:ExecutionContext[1], extensions : Extension[*], debug:DebugContext[1] |
                         externalizeFunctionProcessor($fe, $runtime, $inScopeVars, $advancedRouting, $exeCtx, $extensions, $debug);};
   serializeFunctions()->map(func | ^PureFunctionToProcessFunctionPair(first = $func, second = $processor));
}

function <<access.private>> meta::external::shared::format::externalizeFunctionProcessor(fe:FunctionExpression[1], runtime:Runtime[0..1], inScopeVars : Map<String, List<Any>>[1], advancedRouting: Boolean[0..1], exeCtx:ExecutionContext[1], extensions : Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let children        = $fe.parametersValues->evaluateAndDeactivate()->at(0)->meta::pure::store::platform::executionPlan::generation::processValueSpecification($runtime, $inScopeVars, $advancedRouting, $exeCtx, $extensions, $debug)->toOneMany();

   let bindingArg      = $fe.parametersValues->at(1);
   assert($bindingArg->instanceOf(InstanceValue), 'Only literal binding is supported');
   let checked         = $fe.func == externalize_Checked_MANY__Binding_1__String_1_;
   let binding         = $bindingArg->cast(@InstanceValue).values->cast(@Binding)->toOne();

   ^ExternalFormatExternalizeExecutionNode
   (
      resultType      = ^ResultType(type=String),
      resultSizeRange = PureOne,
      checked         = $checked,
      binding         = $binding,
      executionNodes  = $children
   );
}

function <<access.private>> meta::external::shared::format::serializerExtensionName(version:String[1]): String[1]
{
   'meta::protocols::pure::' + $version + '::external::shared::format::serializerExtension_String_1__SerializerExtension_1_'
}

function meta::external::shared::format::printConnection(extensions:Extension[*]): Function<{Nil[1]->String[1]}>[*]
{
   [
      {ext:ExternalFormatConnection[1] |
         let source = $ext.externalSource->match([
            e:ExecutionNodeExternalSource[1] | 'Execution Node Source',
            u:UrlStreamExternalSource[1] | 'url="'+$u.url+'"'
         ]);
         'binding="'+$ext.element->cast(@Binding)->elementToPath()+'", source=('+$source+')';
      }
   ];
}

