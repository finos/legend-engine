// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::format::binding::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::functions::*;
import meta::external::shared::format::metamodel::*;

import  meta::pure::dataQuality::*;

import meta::pure::model::binding::*;

Class meta::external::shared::format::functions::ExternalFormatOption
{   
}

function meta::external::shared::format::functions::externalize<T>(collection: T[*], binding:Binding[1]):String[1]
{
   fail('Implemented by execution plans');
   'Not impemented!';
}

function meta::external::shared::format::functions::externalize<T>(collection: Checked<T>[*], binding:Binding[1]):String[1]
{
   fail('Implemented by execution plans');
   'Not impemented!';
}

function meta::external::shared::format::functions::internalize<T>(toClass:Class<T>[1], binding:Binding[1], data:String[1]):T[*]
{
   fail('Implemented by execution plans');
   [];
}

function meta::external::shared::format::functions::internalize<T>(toClass:Class<T>[1], binding:Binding[1], stream:ByteStream[1]):T[*]
{
   fail('Implemented by execution plans');
   [];
}

function meta::external::shared::format::functions::internalize<T>(toClass:Class<T>[1], binding:Binding[1], url:Url[1]):T[*]
{
   fail('Implemented by execution plans');
   [];
}

// TODO Can we avoid these?
function meta::external::shared::format::functions::isSerialize(fe:FunctionExpression[1]):Boolean[1]
{
   $fe.func->in(externalizeFunctions());
}

function meta::external::shared::format::functions::internalizeFunctions():Function<Any>[*]
{
   [
      internalize_Class_1__Binding_1__String_1__T_MANY_,
      internalize_Class_1__Binding_1__ByteStream_1__T_MANY_,
      internalize_Class_1__Binding_1__Url_1__T_MANY_
   ]
}

function meta::external::shared::format::functions::externalizeFunctions():Function<Any>[*]
{
   [
      externalize_T_MANY__Binding_1__String_1_,
      externalize_Checked_MANY__Binding_1__String_1_
   ]
}

function meta::external::shared::format::functions::bindingRouterFunctions():Function<Any>[*]
{
  internalizeFunctions()->concatenate(externalizeFunctions());
}