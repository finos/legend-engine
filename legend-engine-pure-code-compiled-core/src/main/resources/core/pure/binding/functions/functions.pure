// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::format::binding::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::functions::*;
import meta::external::shared::format::metamodel::*;

import meta::pure::dataQuality::*;

import meta::pure::graphFetch::*;

import meta::pure::model::binding::*;

function <<functionType.NotImplementedFunction, functionType.NormalizeRequiredFunction>> meta::external::shared::format::functions::externalize<T>(collection: T[*], binding:Binding[1], graphFetchTree: RootGraphFetchTree<T>[1]):String[1]
{
   fail('Implemented by execution plans');
   'Not impemented!';
}

function <<functionType.NotImplementedFunction, functionType.NormalizeRequiredFunction>> meta::external::shared::format::functions::externalize<T>(collection: T[*], contentType:String[1], graphFetchTree: RootGraphFetchTree<T>[1]):String[1]
{
   fail('Implemented by execution plans');
   'Not impemented!';
}

function <<functionType.NotImplementedFunction, functionType.NormalizeRequiredFunction>> meta::external::shared::format::functions::internalize<T>(toClass:Class<T>[1], binding:Binding[1], data:String[1]):T[*]
{
   fail('Implemented by execution plans');
   [];
}

function <<functionType.NotImplementedFunction, functionType.NormalizeRequiredFunction>> meta::external::shared::format::functions::internalize<T>(toClass:Class<T>[1], binding:Binding[1], data:Byte[*]):T[*]
{
   fail('Implemented by execution plans');
   [];
}

function <<functionType.NotImplementedFunction, functionType.NormalizeRequiredFunction>> meta::external::shared::format::functions::internalize<T>(toClass:Class<T>[1], contentType:String[1], data:String[1]):T[*]
{
   fail('Implemented by execution plans');
   [];
}

function <<functionType.NotImplementedFunction, functionType.NormalizeRequiredFunction>> meta::external::shared::format::functions::internalize<T>(toClass:Class<T>[1], contentType:String[1], data:Byte[*]):T[*]
{
   fail('Implemented by execution plans');
   [];
}

function <<functionType.NotImplementedFunction>> meta::external::shared::format::functions::checked(valueTree: RootGraphFetchTree<Any>[1], binding: Binding[1]):RootGraphFetchTree<Checked<Any>>[1]
{
   fail('To be evaluated as part of plan generation only');
   @RootGraphFetchTree<Checked<Any>>;
}

function <<functionType.NotImplementedFunction>> meta::external::shared::format::functions::checked(valueTree: RootGraphFetchTree<Any>[1], contentType: String[1]):RootGraphFetchTree<Checked<Any>>[1]
{
   fail('To be evaluated as part of plan generation only');
   @RootGraphFetchTree<Checked<Any>>;
}

function meta::external::shared::format::functions::internalizeFunctions():Function<Any>[*]
{
  [
    internalize_Class_1__Binding_1__String_1__T_MANY_,
    internalize_Class_1__Binding_1__Byte_MANY__T_MANY_,
    internalize_Class_1__String_1__String_1__T_MANY_,
    internalize_Class_1__String_1__Byte_MANY__T_MANY_
  ]
}

function meta::external::shared::format::functions::externalizeFunctions():Function<Any>[*]
{
  [
    externalize_T_MANY__String_1__RootGraphFetchTree_1__String_1_,
    externalize_T_MANY__Binding_1__RootGraphFetchTree_1__String_1_
  ]
}