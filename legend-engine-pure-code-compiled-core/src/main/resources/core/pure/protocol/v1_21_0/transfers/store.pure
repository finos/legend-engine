// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::extension::*;
import meta::json::*;
import meta::pure::runtime::*;

function meta::protocols::pure::v1_21_0::transformation::fromPureGraph::runtime::transformRuntime(pureRuntime:Runtime[1], extensions:Extension[*]):meta::protocols::pure::v1_21_0::metamodel::Runtime[1]
{
   $pureRuntime->match([
      legacy:Runtime[1] | ^meta::protocols::pure::v1_21_0::metamodel::LegacyRuntime(
                             _type = 'legacyRuntime',
                             connections = $pureRuntime.connections->map(con|$con->meta::protocols::pure::v1_21_0::transformation::fromPureGraph::runtime::transformConnection($extensions))
                          );
   ])
}

function meta::protocols::pure::v1_21_0::transformation::fromPureGraph::store::transformStore(store:meta::pure::store::Store[1], extensions:Extension[*]):meta::protocols::pure::v1_21_0::metamodel::store::Store[1]
{
   let handlers = $extensions.serializerExtension('v1_21_0')->cast(@meta::protocols::pure::v1_21_0::extension::SerializerExtension_v1_21_0).transfers_store_transformStore
                  ->concatenate($extensions.serializerExtension('v1_21_0')->cast(@meta::protocols::pure::v1_21_0::extension::SerializerExtension_v1_21_0).transfers_store_transformStore2->map(f | $f->eval($extensions)));
   assert($handlers->isNotEmpty(), |'Error, trying to process Stores with no handlers');
   $store->match($handlers->toOneMany());
}

function meta::protocols::pure::v1_21_0::transformation::fromPureGraph::runtime::transformConnection(connection:Connection[1], extensions:Extension[*]):meta::protocols::pure::v1_21_0::metamodel::runtime::Connection[1]
{
   $connection->match($extensions.serializerExtension('v1_21_0')->cast(@meta::protocols::pure::v1_21_0::extension::SerializerExtension_v1_21_0).transfers_store_transformConnection->concatenate(
                      $extensions.serializerExtension('v1_21_0')->cast(@meta::protocols::pure::v1_21_0::extension::SerializerExtension_v1_21_0).transfers_store_transformConnection2->map(f | $f->eval($extensions)))->concatenate(
      [
         
         model:meta::pure::mapping::modelToModel::ModelConnection[1]     | $model->meta::protocols::pure::v1_21_0::transformation::fromPureGraph::connection::transformModelConnection(),
         j:meta::pure::mapping::modelToModel::JsonModelConnection[1]     | $j->meta::protocols::pure::v1_21_0::transformation::fromPureGraph::connection::transformJsonModelConnection(),
         x:meta::pure::mapping::modelToModel::XmlModelConnection[1]      | $x->meta::protocols::pure::v1_21_0::transformation::fromPureGraph::connection::transformXmlModelConnection(),
         c:meta::pure::mapping::modelToModel::ModelChainConnection[1]    | $c->meta::protocols::pure::v1_21_0::transformation::fromPureGraph::connection::transformChainConnection(),

         
         other: meta::pure::runtime::Connection[1]                       | let failureClass = $other->class()->toString();
                                                                           fail('' + $failureClass + ' Connection type not supported Yet!');
                                                                           @meta::protocols::pure::v1_21_0::metamodel::runtime::Connection;
      ])->toOneMany()
   );
}

function meta::protocols::pure::v1_21_0::transformation::fromPureGraph::connection::transformModelConnection(modelConnection: meta::pure::mapping::modelToModel::ModelConnection[1]):meta::protocols::pure::v1_21_0::metamodel::mapping::modelToModel::ModelConnection[1]
{
   let instances =  $modelConnection.instances->keyValues();
   ^meta::protocols::pure::v1_21_0::metamodel::mapping::modelToModel::ModelConnection( element = 'ModelStore',
                                                                                      _type='ModelConnection',
                                                                                      input = ^meta::protocols::pure::v1_21_0::metamodel::mapping::modelToModel::ModelStringInput(_type='ModelStringInput', class=$instances->at(0).first->elementToPath(), instances=$instances.second.values->map(i| $i->toJsonBeta())));
}

function meta::protocols::pure::v1_21_0::transformation::fromPureGraph::connection::transformJsonModelConnection(jsonModelConnection: meta::pure::mapping::modelToModel::JsonModelConnection[1]):meta::protocols::pure::v1_21_0::metamodel::mapping::modelToModel::JsonModelConnection[1]
{
   ^meta::protocols::pure::v1_21_0::metamodel::mapping::modelToModel::JsonModelConnection(
      element = 'ModelStore',
      _type   = 'JsonModelConnection',
      class   = $jsonModelConnection.class->elementToPath(),
      url     = $jsonModelConnection.url
   );
}

function meta::protocols::pure::v1_21_0::transformation::fromPureGraph::connection::transformXmlModelConnection(xmlModelConnection: meta::pure::mapping::modelToModel::XmlModelConnection[1]):meta::protocols::pure::v1_21_0::metamodel::mapping::modelToModel::XmlModelConnection[1]
{
   ^meta::protocols::pure::v1_21_0::metamodel::mapping::modelToModel::XmlModelConnection(
      element = 'ModelStore',
      _type   = 'XmlModelConnection',
      class   = $xmlModelConnection.class->elementToPath(),
      url     = $xmlModelConnection.url
   );
}

function meta::protocols::pure::v1_21_0::transformation::fromPureGraph::connection::transformChainConnection(modelChainConnection: meta::pure::mapping::modelToModel::ModelChainConnection[1]):meta::protocols::pure::v1_21_0::metamodel::mapping::modelToModel::ModelChainConnection[1]
{
   ^meta::protocols::pure::v1_21_0::metamodel::mapping::modelToModel::ModelChainConnection(
      element  = 'ModelStore',
      _type    = 'ModelChainConnection',
      mappings = $modelChainConnection.mappings->map(m | $m->elementToPath())
   )
}