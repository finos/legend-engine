// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::pure::milestoning::*;
import meta::pure::graphFetch::execution::*;
import meta::json::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::router::clustering::*;
import meta::pure::router::metamodel::*;
import meta::pure::router::metamodel::clustering::*;
import meta::pure::graphFetch::*;
import meta::pure::metamodel::path::*;

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformFunctionBody(f:FunctionDefinition<Any>[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[*]
{
    meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformFunctionBody($f,false, $extensions);
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformFunctionBody(f:FunctionDefinition<Any>[1],useAppliedFunction:Boolean[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[*]
{
   $f.expressionSequence->map(e|$e->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($f->functionType().parameters->evaluateAndDeactivate().name, $f->openVariableValues(),false,$useAppliedFunction, $extensions));
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification(v:ValueSpecification[1], inScope:String[*], open:Map<String,List<Any>>[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[1]
{
    meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($v, $inScope, $open,false, $extensions);
}



function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification(v:ValueSpecification[1], inScope:String[*], open:Map<String,List<Any>>[1],isParameter:Boolean[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[1]
{
   meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($v, $inScope, $open,$isParameter,false, $extensions);
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification(v:ValueSpecification[1], inScope:String[*], open:Map<String,List<Any>>[1],isParameter:Boolean[1],useAppliedFunction:Boolean[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[1]
{
   $v->evaluateAndDeactivate()->match(
      [
         f:FunctionRoutedValueSpecification[1]|$f.value->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, false, $extensions),
         e:ExtendedRoutedValueSpecification[1]|$e.value->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, false, $extensions),
         e:ClusteredValueSpecification[1]|$e.val->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, false, $extensions),
         funcExp:FunctionExpression[1]|
                  let fe = meta::pure::milestoning::reverseMilestoningTransforms($funcExp);
                  let spec = $fe.func->match(
                                          [
                                             p:Property<Nil,Any|*>[1]|
                                                ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::application::AppliedProperty
                                                (
                                                   _type = 'property',
                                                   property = $fe.func.name->toOne()->cast(@String),
                                                   parameters = $fe.parametersValues->evaluateAndDeactivate()->map(pm|$pm->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open,false,$useAppliedFunction, $extensions))
                                                ),
                                             p:QualifiedProperty<Any>[1]|
                                                ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::application::AppliedProperty
                                                (
                                                   _type = 'property',
                                                   property = $fe.func.name->toOne()->cast(@String),
                                                   parameters = $fe.parametersValues->evaluateAndDeactivate()->map(pm|$pm->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, false, $extensions))
                                                ),
                                             f:Function<Any>[1]|
                                                let passToTransformAny =
                                                   [
                                                      agg_FunctionDefinition_1__FunctionDefinition_1__AggregateValue_1_,
                                                      agg_String_1__FunctionDefinition_1__FunctionDefinition_1__AggregateValue_1_,
                                                      func_String_1__FunctionDefinition_1__TdsOlapAggregation_1_,
                                                      func_FunctionDefinition_1__TdsOlapRank_1_
                                                   ];

                                              let isExtractEnum = $fe->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::hasExtractEnumValue();
                                                if($isExtractEnum,
                                                 |^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::application::AppliedProperty
                                                      (
                                                         _type = 'property',
                                                        property = $fe.parametersValues->at(1)->cast(@InstanceValue).values->toOne()->cast(@String),
                                                        parameters =   $fe.parametersValues->at(0)->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open,false, $extensions)
                                                      );,
                                                    | let isAutoMap =   meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::hasAutoMapProperty($fe);
                                                      if($isAutoMap,
                                                       |  let xs = $fe.parametersValues
                                                                                       ->filter(f|$f->instanceOf(InstanceValue))->cast(@InstanceValue).values
                                                                                        ->filter(f|$f->instanceOf(LambdaFunction))->cast(@LambdaFunction<Any>).expressionSequence;
                                                           let newProp = $xs->at(0) ->cast(@SimpleFunctionExpression);
                                                           let newProperty = meta::pure::milestoning::reverseMilestoningTransforms($newProp);
                                                           let newParameter =    $fe.parametersValues->at(0);
                                                           let additionalParameters =   $xs->cast(@SimpleFunctionExpression).parametersValues->tail();
                                                           let updatedProperty = ^$newProperty(parametersValues = $newParameter ->concatenate(  $additionalParameters ));
                                                           $updatedProperty->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope,$open,false,$useAppliedFunction, $extensions);

                                                       ,|   if($passToTransformAny->contains($fe.func) || (new_Class_1__String_1__KeyExpression_MANY__T_1_ == $fe.func && $fe.parametersValues->at(0).genericType.typeArguments.rawType->cast(@Class<Any>)->at(0)->isWithinPackage(meta::pure) && !($fe.parametersValues->at(0).genericType.typeArguments.rawType->cast(@Class<Any>)->at(0)->cast(@PackageableElement)->meta::alloy::isMetaAlloyTestDependency())),
                                                                       |$fe->reactivate($fe->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::scan()->map(o|pair($o,^List<Any>()))->newMap())->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, 0, $fe, $extensions);,
                                                                       |let package = if($fe.func->instanceOf(PackageableFunction), |$fe.func->cast(@PackageableFunction<Any>).package->toOne(), |::);
                                                                        if($fe.func->instanceOf(FunctionDefinition) && $useAppliedFunction && (!$package->isWithinPackage(meta) && !$package->meta::alloy::isMetaAlloyTestDependency() || $package->meta::alloy::isMetaAlloyTestDependencyForGeneration() ),
                                                                           |let functionName = $fe.functionName->toOne();
                                                                            let packagePath = $package->elementToPath() + '::';
                                                                            ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::application::AppliedFunction
                                                                                  (
                                                                                      _type = 'func',
                                                                                     function = if($functionName->startsWith($packagePath),|$functionName,|$packagePath + $functionName),
                                                                                     parameters = $fe.parametersValues->evaluateAndDeactivate()->map(pm|$pm->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open,false,$useAppliedFunction, $extensions))
                                                                                  )
                                                                            ;,|if ($fe.func->instanceOf(FunctionDefinition) && (!$package->isWithinPackage(meta) || $package->meta::alloy::isMetaAlloyTestDependency()),
                                                                                 |
                                                                                  if($fe.func->cast(@FunctionDefinition<Any>).expressionSequence->size() == 1,
                                                                                     {|
                                                                                        //in-line function
                                                                                        let pNames = $fe.func->functionType().parameters->evaluateAndDeactivate().name;
                                                                                        let pValues = $fe.parametersValues->evaluateAndDeactivate()->map(v|
                                                                                             $v->match([
                                                                                               ve:VariableExpression[1]|
                                                                                                  if($open->get($ve.name).values->isNotEmpty(),| $open->get($ve.name), |list($ve));
                                                                                               ,
                                                                                               any:ValueSpecification[1]|list($any)
                                                                                            ]));

                                                                                        let newOpen = $open->putAll($pNames->zip($pValues)->newMap());

                                                                                        $fe.func->cast(@FunctionDefinition<Any>).expressionSequence->at(0)->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $newOpen,false,$useAppliedFunction, $extensions);
                                                                                     },
                                                                                     {|
                                                                                        ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::application::UnknownAppliedFunction
                                                                                        (
                                                                                            _type = 'unknownFunc',
                                                                                           function = $fe.func.functionName->toOne(),
                                                                                           returnType = $fe.func->functionReturnType().rawType->toOne()->elementToPath(),
                                                                                           returnMultiplicity = $fe.func->functionReturnMultiplicity()->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::domain::transformMultiplicity()
                                                                                        )
                                                                                     }
                                                                                   ),
                                                                                 |^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::application::AppliedFunction
                                                                                  (
                                                                                      _type = 'func',
                                                                                     function = $fe.func.functionName->toOne(),
                                                                                     fControl = $fe.func.name->toOne(),
                                                                                     parameters = $fe.parametersValues->evaluateAndDeactivate()->map(pm|$pm->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open,false,$useAppliedFunction, $extensions))
                                                                                  )
                                                                                 );
                                                                     );
                                                             );
                                                          );
                                                   );

                                          ]
                                       );
                  ,
         i:InstanceValue[1]|
                        if($i->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::isClassFunctionParameter(true),
                           |$i->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformHackedClass(),
                           | if($i->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::isClassFunctionParameter(false),
                                |$i.genericType.typeArguments.rawType->toOne()->meta::protocols::pure::v1_31_0::transformation ::fromPureGraph::valueSpecification::transformAny($inScope, $open, $i.multiplicity, 0 , [],$useAppliedFunction, $extensions),
                                |if($i->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::isHackedUnit(),
                                  |$i->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformHackedUnit(),
                                  |if($i->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::isUnitType(),
                                      |$i->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformUnitInstance(),
                                      |$i.values->meta::protocols::pure::v1_31_0::transformation ::fromPureGraph::valueSpecification::transformAny($inScope, $open, $i.multiplicity, 0 , [],$useAppliedFunction, $extensions)))));,
         v:VariableExpression[1]|
            if ($inScope->contains($v.name),
                |meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformVar($v,$isParameter),
                |let r = $open->get($v.name);
                 let vals = $r.values->evaluateAndDeactivate();
                 if ($r->isEmpty(),
                     |meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformVar($v,$isParameter),
                     |if ($vals->size() == 1 && $vals->toOne()->instanceOf(VariableExpression),
                        |meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformVar($vals->toOne()->cast(@VariableExpression),$isParameter),
                        |$r.values->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, if($vals->isEmpty(),|PureZero,|$v.multiplicity), $extensions);
                      )
                 );
            );
      ]
   );
}

function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::isUnitType(v:InstanceValue[1]):Boolean[1]
{
    $v.genericType.rawType->toOne()->instanceOf(Unit)
}

function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::isHackedUnit(v:InstanceValue[1]):Boolean[1]
{
    $v.values->isEmpty() && $v.multiplicity == PureOne && $v->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::isUnitType()
}

function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::isClassFunctionParameter(v:InstanceValue[1], ishacked:Boolean[1]):Boolean[1]
{
    let rawType = $v.genericType.rawType->toOne();
    $v.values->isEmpty() && $v.multiplicity == PureOne && (($rawType->instanceOf(DataType) && !$rawType->instanceOf(Unit)) || $rawType->instanceOf(Class) && (($ishacked && $rawType.name != 'Class') || (!$ishacked && $rawType.name == 'Class')));
}

function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformHackedClass(v:InstanceValue[1]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::GenericTypeInstance[1]
{
   ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::GenericTypeInstance
   (
      _type = 'genericTypeInstance',
      fullPath = $v.genericType.rawType->toOne()->match([
         d:DataType[1]|$d->makeString(),
         c:Class<Any>[1]|$c->elementToPath()
         ])
   )
}

//here
function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformVar(v:VariableExpression[1], isParameter:Boolean[1]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::Variable[1]
{
   //xStore generates 'that' but provides no context on what the class is so we need to leave the class in
//   if(($isParameter  &&$v.name != 'this' ) || $v.name == 'v_automap' || $v.name == 'that' ,
   if($isParameter && !$v.genericType->instanceOf(InferredGenericType) && $v.name != 'this',
      |^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::Variable
             (
                _type = 'var',
                multiplicity = $v.multiplicity->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::domain::transformMultiplicity(),
                name = $v.name,
                class = $v.genericType.rawType->toOne()->elementToPath()
            );
    ,|^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::Variable
                (
                   _type = 'var',
                   name = $v.name
                );
    );

}

function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformHackedUnit(v:ValueSpecification[1]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::GenericTypeInstance[1]
{
   ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::GenericTypeInstance(_type='genericTypeInstance', fullPath=$v.genericType.rawType->toOne()->elementToPath());
}

function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformUnitInstance(v:ValueSpecification[1]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::UnitInstance[1]
{
   ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::UnitInstance(_type='unitInstance', unitType=$v.genericType.rawType->toOne()->elementToPath(), unitValue=$v->cast(@InstanceValue).values->toOne()->cast(@Number));
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny(l:Any[*], inScope:String[*], open:Map<String,List<Any>>[1], m:Multiplicity[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[1]
{
   meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($l, $inScope, $open, $m, 0 , [], $extensions)
}

function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny(l:Any[*], inScope:String[*], open:Map<String,List<Any>>[1], m:Multiplicity[1], depth:Integer[1], fe:FunctionExpression[0..1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[1]
{
   meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($l, $inScope, $open, $m, $depth,$fe, false, $extensions)

}

function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny(l:Any[*], inScope:String[*], open:Map<String,List<Any>>[1], m:Multiplicity[1], depth:Integer[1], fe:FunctionExpression[0..1],useAppliedFunction:Boolean[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[1]
{
   $l->match(
               $extensions.serializerExtension('v1_31_0')->cast(@meta::protocols::pure::v1_31_0::extension::SerializerExtension_v1_31_0).transfers_valueSpecification_transformAny->map(f|$f->eval($inScope, $open, $m, $fe, $useAppliedFunction, $extensions))->concatenate([
                  n:Nil[0] |
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::Collection
                     (
                        _type = 'collection',
                        multiplicity = $m->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::domain::transformMultiplicity()
                     ),
                  s:String[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::CString
                     (
                        _type = 'string',
                        value = $s
                     ),
                  i:Integer[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::CInteger
                     (
                        _type = 'integer',
                        value = $i
                     ),
                  d:Decimal[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::CDecimal
                     (
                        _type = 'decimal',
                        value = $d
                     ),
                  f:Float[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::CFloat
                     (
                        _type = 'float',
                        value = $f
                     ),
                  b:Boolean[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::CBoolean
                     (
                        _type = 'boolean',
                        value = $b
                     ),
                  d:StrictDate[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::CStrictDate
                     (
                        _type = 'strictDate',
                        value = $d->map(st|$st->toString())
                     ),
                  d:DateTime[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::CDateTime
                     (
                        _type = 'dateTime',
                        value = $d->map(st|$st->toString())
                     ),
                  l:LatestDate[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::CLatestDate
                     (
                        _type = 'latestDate'
                     ),
                  c:Class<Any>[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::PackageableElementPtr
                     (
                        _type = 'packageableElementPtr',
                        fullPath = $c->at(0)->elementToPath()
                     ),
                  l:LambdaFunction<Any>[1]|
                     let nInScope = $l->functionType().parameters->evaluateAndDeactivate().name;
                     let nOpen = $open->putAll($l->openVariableValues()->keyValues()->filter(v|$v.second.values->isNotEmpty()));
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda
                     (
                        _type = 'lambda',
                        parameters = $l->at(0)->functionType().parameters->evaluateAndDeactivate()->map(p|$p->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($nInScope, $nOpen, true,$useAppliedFunction, $extensions)->cast(@meta::protocols::pure::v1_31_0::metamodel::valueSpecification::Variable)),
                        body = $l.expressionSequence->map(e|$e->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($nInScope, $nOpen,false,$useAppliedFunction, $extensions))
                     );,
                  e:Enum[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::EnumValue
                     (
                        _type = 'enumValue',
                        fullPath = $e->genericType().rawType->toOne()->elementToPath(),
                        value = $e->id()
                     ),
                  e:Enumeration<Any>[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::PackageableElementPtr
                     (
                        _type = 'packageableElementPtr',
                        fullPath = $e->elementToPath()
                     ),
                  u:Unit[1]|
                    ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::PackageableElementPtr
                    (
                       _type = 'packageableElementPtr',
                       fullPath = $u->elementToPath()
                    ),
                  v:ValueSpecification[1]|$v->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open,false,$useAppliedFunction, $extensions),
                  a:Path<Nil,Any|*>[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ClassInstance                     
                     (
                       _type = 'classInstance',
                       type = 'path',
                       value =  ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Path
                                (
                                    name = if ($a.name->isEmpty(),|'',|$a.name->toOne()),
                                    startType = $a.start.rawType->toOne()->elementToPath(),
                                    path = $a.path->map(
                                                p|$p->match(
                                                  [
                                                      p:PropertyPathElement[1]|^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::PropertyPathElement(
                                                                                    _type='propertyPath',
                                                                                    property=$p.property.name->toOne(),
                                                                                    parameters = $p.parameters->map(pa|$pa->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, $extensions))
                                                                              )
                                                  ]
                                                )
                                          )
                                )
                     )
                     ;,
                  a:meta::pure::functions::collection::AggregateValue<Any, Any, Any>[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ClassInstance                     
                     (
                       _type = 'classInstance',
                       type = 'aggregateValue',
                       value = ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::AggregateValue
                                (
                                    mapFn = $a.mapFn->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda),
                                    aggregateFn= $a.aggregateFn->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda)
                                )
                     ),
                  a:meta::pure::tds::AggregateValue<Any,Any>[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ClassInstance                     
                     (
                       _type = 'classInstance',
                       type = 'tdsAggregateValue',
                       value = ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::TDSAggregateValue
                                (
                                    name = $a.name,
                                    mapFn = $a.mapFn->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda),
                                    aggregateFn= $a.aggregateFn->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda)
                                )
                     ),
                  oo:meta::pure::tds::OlapOperation<Any>[1]|
                     $oo->match([
                        oa : meta::pure::tds::TdsOlapAggregation<Any>[1]|
                          ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ClassInstance                     
                          (
                            _type = 'classInstance',
                            type = 'tdsOlapAggregation',
                            value = ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::TdsOlapAggregation
                                    (
                                        columnName = $oa.colName,
                                        function = $oa.func->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda)
                                    )
                          ),
                        or :  meta::pure::tds::TdsOlapRank<Any>[1]|
                           ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ClassInstance                     
                          (
                            _type = 'classInstance',
                            type = 'tdsOlapRank',
                            value = ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::TdsOlapRank
                                    (
                                        function = $or.func->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda)
                                    )
                          )
                        ]),
                  si:meta::pure::tds::SortInformation[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ClassInstance                     
                          (
                            _type = 'classInstance',
                            type = 'tdsSortInformation',
                            value = ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::TDSSortInformation
                                    (
                                        column = $si.column,
                                        direction = $si.direction->toString()
                                    )
                          ),
                  co:meta::pure::tds::BasicColumnSpecification<Any>[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ClassInstance                     
                          (
                            _type = 'classInstance',
                            type = 'tdsColumnInformation',
                            value = ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::TDSColumnInformation
                                    (
                                        name = $co.name,
                                        columnFn = $co.func->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda)
                                    )
                          ),
                  pair:Pair<Any,Any>[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ClassInstance                     
                          (
                            _type = 'classInstance',
                            type = 'pair',
                            value = ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Pair
                                    (
                                        first = $pair.first->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions),
                                        second = $pair.second->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)
                                    )
                          ),
                 m:meta::pure::mapping::Mapping[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::PackageableElementPtr
                     (
                        _type = 'packageableElementPtr',
                        fullPath = $m->elementToPath()->toOne()
                     ),
                 r:meta::pure::runtime::Runtime[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ClassInstance                     
                      (
                        _type = 'classInstance',
                        type = 'runtimeInstance',
                        value = ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::RuntimeInstance
                                (
                                    runtime = $r->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::runtime::transformRuntime($extensions)
                                )
                      ),
                 l:List<Any>[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::List
                     (
                        _type = 'collection',
                        values = $l.values->map(la|$la->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions))
                     ),
                  a:AlloySerializationConfig[1] |
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ClassInstance                     
                      (
                        _type = 'classInstance',
                        type = 'alloySerializationConfig',
                        value = ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::AlloySerializationConfig
                                (
                                    typeKeyName = $a.typeKeyName,
                                    includeType = $a.includeType,
                                    includeEnumType = $a.includeEnumType,
                                    removePropertiesWithNullValues = $a.removePropertiesWithNullValues,
                                    removePropertiesWithEmptySets = $a.removePropertiesWithEmptySets,
                                    fullyQualifiedTypePath = $a.fullyQualifiedTypePath,
                                    includeObjectReference = $a.includeObjectReference
                                )
                      ),
                  g:GraphFetchTree[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ClassInstance                     
                          (
                            _type = 'classInstance',
                            type = 'rootGraphFetchTree',
                            value = $g->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformGraphFetchTree($inScope, $open, $extensions)
                          ),
                  k:KeyExpression[1]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::KeyExpression
                     (
                        _type = 'keyExpression',
                        add =  $k.add,
                        key =  $k.key->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, false, $extensions),
                        expression = $k.expression->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, false, $extensions)
                     );,
                    p:PrimitiveType[1]|
                    ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::PackageableElementPtr
                    (
                        _type = 'packageableElementPtr',
                        fullPath = $p.name->toOne()
                    ),
                  a:Any[1]|
                     meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::possiblyTransformNewFunction($a, $m, $fe,  $inScope, $open, $extensions);,
                  a:Any[*]|
                     ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::Collection
                     (
                        _type = 'collection',
                        multiplicity = $m->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::domain::transformMultiplicity(),
                        values = $a->map(la|$la->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne,0,[],$useAppliedFunction, $extensions))
                     );
                ])->toOneMany()
              );
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::possiblyTransformNewFunction(any:Any[1], m:Multiplicity[1],fe:FunctionExpression[0..1], inScope:String[*], open:Map<String,List<Any>>[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[1]
{
   if($fe->isNotEmpty() && $fe.functionName== 'new',
      |let serialized =   ^	meta::protocols::pure::v1_31_0::metamodel::valueSpecification::application::AppliedFunction(
                                 _type = 'func',
                                 function = $fe.func.functionName->toOne(),
                                 fControl = $fe.func.name->toOne(),
                                 parameters = $fe->toOne().parametersValues->head()->toOne()->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformNewClass()
                                             ->concatenate($fe->toOne().parametersValues->tail()->map(vs|$vs->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification( $inScope, $open, $extensions) ))
                                 );,


      | let class = $any->genericType().rawType->toOne()->cast(@PackageableElement);
        ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::CString
        (
          _type = 'string',
          value = $class->elementToPath() + ' can\'t be translated'
        );
   );
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformNewClass(v:ValueSpecification[1]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::PackageableElementPtr[1]
{
   ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::PackageableElementPtr
   (
      _type = 'packageableElementPtr',
      fullPath = $v.genericType.typeArguments->at(0).rawType->toOne()->elementToPath()
   );
}
function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformGraphFetchTree(tree: GraphFetchTree[1], inScope:String[*], open:Map<String,List<Any>>[1], extensions:meta::pure::extension::Extension[*]): meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::GraphFetchTree[1]
{
   let base = $tree->match([
      r: RootGraphFetchTree<Any>[1] | ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::RootGraphFetchTree(
                                         _type = 'rootGraphFetchTree',
                                         class = $r.class->elementToPath()
                                      ),
      p: PropertyGraphFetchTree[1]  | ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::PropertyGraphFetchTree(
                                         _type = 'propertyGraphFetchTree',
                                         property   = $p.property.name->toOne(),
                                         parameters = $p.parameters->map(p| $p->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, $extensions)),
                                         alias      = $p.alias,
                                         subType    = $p.subType->map(st| $st->elementToPath())
                                      ),
      c: ClusteredGraphFetchTree[1] | meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformGraphFetchTree($c.tree, $inScope, $open, $extensions)
   ]);

   let subtrees = $tree->match([
      c: ClusteredGraphFetchTree[1] | $c.tree.subTrees->map(st|$st->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformGraphFetchTree($inScope, $open, $extensions)),
      g: GraphFetchTree[1]          | $g.subTrees->map(st|$st->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformGraphFetchTree($inScope, $open, $extensions))
   ]);

   ^$base(subTrees=$subtrees);
}


function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::hasAutoMapProperty(fe:FunctionExpression[1]):Boolean[1]
{

   let instanceProps =  $fe.parametersValues->evaluateAndDeactivate()->filter(f|$f->instanceOf(InstanceValue));
   if($instanceProps->isNotEmpty(),
      |let lambda = $instanceProps->cast(@InstanceValue).values->filter(f|$f->instanceOf(LambdaFunction));
       if($lambda->isNotEmpty(),
            | let es = $lambda->cast(@LambdaFunction<Any>).expressionSequence->at(0)->filter(e|$e->instanceOf(SimpleFunctionExpression));
              if($es->isNotEmpty(),
                   |let ve = $es->cast(@SimpleFunctionExpression).parametersValues->first()->filter(f|$f->instanceOf(VariableExpression));
                    if($ve->isNotEmpty(),
                       | $ve->cast(@VariableExpression).name== 'v_automap';
                       ,|false);
                 ,|false);
            ,|false);
      ,|false);

}


function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::hasExtractEnumValue(fe:FunctionExpression[1]):Boolean[1]
{

   if($fe.func.name=='extractEnumValue_Enumeration_1__String_1__T_1_',
       |  if($fe.parametersValues->at(0)->instanceOf(InstanceValue)   &&  $fe.parametersValues->at(1)->instanceOf(InstanceValue) ,
               |true,|false),
       |false);

}


function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::scan(v:Any[1]):String[*]
{
   $v->match(
      [
         i:InstanceValue[1]| $i.values->map(s|$s->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::scan()),
         l:LambdaFunction<Any>[1]|$l.openVariables,
         f:FunctionExpression[1]|$f.parametersValues->map(p|$p->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::scan()),
         a:Any[1]|[]
      ]
   )
}


function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::transformLambda(f:FunctionDefinition<Any>[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda[1]
{
   meta::protocols::pure::v1_31_0::transformation::fromPureGraph::transformLambda($f, false, $extensions);
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::transformLambda(f:FunctionDefinition<Any>[1],useAppliedFunction:Boolean[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda[1]
{
   ^meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda
   (
      _type = 'lambda',
      body = $f->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformFunctionBody($useAppliedFunction, $extensions),
      parameters = $f->functionType().parameters->map(p |
         $p->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification([], ^Map<String, meta::pure::functions::collection::List<Any>>(), true, $useAppliedFunction, $extensions)->cast(@meta::protocols::pure::v1_31_0::metamodel::valueSpecification::Variable)
      )
   );
}

###Pure
import meta::protocols::pure::v1_31_0::transformation::fromPureGraph::valueSpecification::*;
import meta::protocols::pure::v1_31_0::metamodel::valueSpecification::*;
import meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::*;
import meta::protocols::pure::v1_31_0::metamodel::valueSpecification::application::*;
import meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::*;
import meta::pure::metamodel::serialization::grammar::*;

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::resolveFControlFunction(af : AppliedFunction[1], fControlToFunctionMapping : Map<String,meta::pure::functions::collection::List<Function<Any>>>[1]):Function<Any>[1]
{
   let fMatches = $fControlToFunctionMapping->get($af.fControl->toOne()).values;
   let f        = if($fMatches->size() <= 1,
                    | if($fMatches->isNotEmpty(),
                        | $fMatches->toOne(),
                        | let f2 = $af.fControl->toOne()->forgivingPathToElement()->match([f:FunctionDefinition<Any>[1]|$f, a:Any[*]|[]]);
                          assertNotEmpty($f2, | 'Failed to find match for ' + $af.fControl->toOne());
                          $f2->toOne();
                      );,
                    | let secondPassMatches = $fMatches->filter(fMatch| $fMatch->functionType().parameters == $af.parameters);
                      assertNotEmpty($secondPassMatches, | 'Failed to find second pass match for ' + $af.fControl->toOne() + ' (out of ' + $fMatches->map(f|$f->elementToPath())->joinStrings('', ',', '') + ')');

                      assertEquals(1, $secondPassMatches->size(), | 'Found duplicate second pass match for ' + $af.fControl->toOne() + ' (' + $secondPassMatches->map(f|$f->elementToPath())->joinStrings('', ',', '') + ')');
                      $secondPassMatches->toOne();
                  );
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::toPure(vs : meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[*]):String[1]
{
  meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::toPure($vs, [])
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::toPure(vs : meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[*], extensions:meta::pure::extension::Extension[*]):String[1]
{
  let state = meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::defaultAlloyToPureState($extensions);
  meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::toPure($state, $vs);
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::defaultAlloyToPureState(extensions:meta::pure::extension::Extension[*]):AlloyToPureState[1]
{
  let imports = system::imports::coreImport.imports.path->map(path|$path->forgivingPathToElement())->cast(@Package);

  let fControlToFunctionMapping = $imports.children->map(e|$e->match([c:Function<Any>[1]|$c, a:Any[*]|[]]))
                                                   ->map(c|pair($c.name->toOne(), $c))
                                                   ->concatenate(meta::pure::router::routing::shouldStopFunctions($extensions)->map(f | pair($f.name->toOne(), $f))) 
                                                   ->concatenate([
                                                      pair(meta::pure::mapping::from_TabularDataSet_1__Mapping_1__Runtime_1__TabularDataSet_1_.name->toOne(), meta::pure::mapping::from_TabularDataSet_1__Mapping_1__Runtime_1__TabularDataSet_1_),
                                                      pair(meta::pure::mapping::from_TabularDataSet_1__Mapping_1__Runtime_1__ExecutionContext_1__TabularDataSet_1_.name->toOne(), meta::pure::mapping::from_TabularDataSet_1__Mapping_1__Runtime_1__ExecutionContext_1__TabularDataSet_1_),
                                                      pair(meta::pure::runtime::currentUserId__String_1_.name->toOne(), meta::pure::runtime::currentUserId__String_1_),
                                                      pair(meta::legend::service::validation::assertTabularDataSetEmpty_TabularDataSet_1__String_1__Boolean_1_.name->toOne(), meta::legend::service::validation::assertTabularDataSetEmpty_TabularDataSet_1__String_1__Boolean_1_),
                                                      pair(meta::legend::service::validation::assertCollectionEmpty_Any_MANY__String_1__Boolean_1_.name->toOne(), meta::legend::service::validation::assertCollectionEmpty_Any_MANY__String_1__Boolean_1_)
                                                   ])
                                                   ->removeDuplicatesBy(p | $p.second)
                                                   ->newMultiValueMap();

   let state = ^AlloyToPureState(
                  currentIndent = 0,
                  indentSize = 4,
                  infixFunctions = getSignFunctions(),
                  coreImportPackages = $imports,
                  funcs = $fControlToFunctionMapping,
                  removeFunctionPaths = false
                );
}

Class <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::AlloyToPureState
{
   currentIndent : Integer[1];
   indentSize : Integer[1];
   infixFunctions : meta::pure::functions::collection::Pair<Function<Any>, String>[*];
   funcs : Map<String, meta::pure::functions::collection::List<Function<Any>>>[1];
   coreImportPackages : Package[*];
   removeFunctionPaths:Boolean[1];
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::domainToPure(domain:meta::protocols::pure::v1_31_0::metamodel::domain::Domain[0..1]):String[1]
{
   let profiles = $domain.profiles->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::profilesToPure();
   let enums = $domain.enums->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::enumsToPure();
   let classes = $domain.classes->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::classElementsToPure('');
   let associations = $domain.associations->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::associationsToPure();
   $profiles+$enums+$classes+$associations;
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::domainToPure(elements:meta::protocols::pure::v1_31_0::metamodel::PackageableElement[*]):String[1]
{
   let profiles = $elements->filter(e | $e->instanceOf(meta::protocols::pure::v1_31_0::metamodel::domain::Profile))->cast(@meta::protocols::pure::v1_31_0::metamodel::domain::Profile)->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::profilesToPure();
   let enums = $elements->filter(e | $e->instanceOf(meta::protocols::pure::v1_31_0::metamodel::domain::Enumeration))->cast(@meta::protocols::pure::v1_31_0::metamodel::domain::Enumeration)->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::enumsToPure();
   let classes = $elements->filter(e | $e->instanceOf(meta::protocols::pure::v1_31_0::metamodel::domain::Class))->cast(@meta::protocols::pure::v1_31_0::metamodel::domain::Class)->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::classElementsToPure('');
   let associations = $elements->filter(e | $e->instanceOf(meta::protocols::pure::v1_31_0::metamodel::domain::Association))->cast(@meta::protocols::pure::v1_31_0::metamodel::domain::Association)->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::associationsToPure();
   $profiles + $enums + $classes + $associations;
}


function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::profilesToPure(ps:meta::protocols::pure::v1_31_0::metamodel::domain::Profile[*]):String[1]
{
   $ps->map(p | 'Profile '+if($p.package->isEmpty(),|$p.name,|$p.package->toOne()+'::'+$p.name)+'\n{\n '+  if($p.stereotypes->isNotEmpty() ,|'stereotypes: '+$p.stereotypes->makeString('[',',','];'),|'tags: '+$p.tags->makeString('[',',','];'))+'\n}\n')->makeString();
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::enumsToPure(es:meta::protocols::pure::v1_31_0::metamodel::domain::Enumeration[*]):String[1]
{
   $es->map(e | 'Enum '+if($e.package->isEmpty(),|$e.name,|$e.package->toOne()+'::'+$e.name)+'\n{\n '+ $e.values.value->makeString() +'\n}\n')->makeString();
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::associationsToPure(as:meta::protocols::pure::v1_31_0::metamodel::domain::Association[*]):String[1]
{
   $as->map(a| 'Association '+if($a.package->isEmpty(),|$a.name,|$a.package->toOne()+'::'+$a.name)+'\n{'+$a.properties->classElementsToPure('\n')+$a.qualifiedProperties->classElementsToPure('\n')+'\n}\n')->makeString()
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::classElementsToPure(as:Any[*], separator:String[1]):String[1]{
   $as->map(a|$a->match([ c:meta::protocols::pure::v1_31_0::metamodel::domain::Class[1]| let nonAnySuperTypes = $c.superTypes->filter(s|$s != 'meta::pure::metamodel::type::Any');
                                                                                       '\nClass '+ if($c.stereotypes->isNotEmpty(),|'\t<<'+$c.stereotypes->classElementsToPure(',') + '>>\n',|'') + if($c.taggedValues->isNotEmpty(),|'\t{'+$c.taggedValues->classElementsToPure(',')+'}\n',|'') + if($c.package->isEmpty(),|$c.name,|$c.package->toOne()+'::'+$c.name) + if($nonAnySuperTypes->isNotEmpty(),| ' extends '+$nonAnySuperTypes->makeString(','),|'') +'\n{\n' + $c.properties->classElementsToPure('\n') + '\n' + $c.qualifiedProperties->classElementsToPure('\n')+'\n}\n';,
                          p:meta::protocols::pure::v1_31_0::metamodel::domain::Property[1]| if($p.stereotypes->isNotEmpty(),|'\t<<'+$p.stereotypes->classElementsToPure(',') + '>>\n',|'') + if($p.taggedValues->isNotEmpty(),|'\t{'+$p.taggedValues->classElementsToPure(',')+'}\n',|'') + '\t'+$p.name+':'+$p.type+'['+$p.multiplicity->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::mapToString() +'];',
                          q:meta::protocols::pure::v1_31_0::metamodel::domain::QualifiedProperty[1]| '\t'+$q.name+'('+$q.parameters->tail()->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::classElementsToPure(',')+'){'+$q.body->toPure()->replace('\n','')+'}:'+$q.returnType+'['+$q.returnMultiplicity->meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::mapToString() +'];',
                          v:meta::protocols::pure::v1_31_0::metamodel::valueSpecification::Variable[1]|$v.name + ':' + $v.class->toOne() +'['+$v.multiplicity->toOne()->mapToString()+']',
                          s:meta::protocols::pure::v1_31_0::metamodel::domain::StereotypePtr[1]|$s.profile+'.'+$s.value,
                          t:meta::protocols::pure::v1_31_0::metamodel::domain::TaggedValue[1]|$t.tag.profile+'.'+$t.tag.value+'=\''+$t.value->replace('\'','\\\'')->replace('\n',' ')+'\''
   ]))->makeString($separator)
}

function meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::toPure(state : AlloyToPureState[1], vs : meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[*]):String[1]
{
   $vs->map(x|
      $x->match([
         {af:AppliedFunction[1]|

            let f = $af->resolveFControlFunction($state.funcs);

            let handlers = [
               ^meta::pure::functions::collection::Pair<Function<Any>, FunctionDefinition<{->String[1]}>>(first = extractEnumValue_Enumeration_1__String_1__T_1_, second = {|
                  let p1 = $af.parameters->at(0)->cast(@PackageableElementPtr);
                  let p2 = $af.parameters->at(1)->cast(@CString);

                  let ev = ^EnumValue(_type = 'enumValue', fullPath=$p1.fullPath, value = $p2.value);

                  $state->toPure($ev);
                  }),
               ^meta::pure::functions::collection::Pair<Function<Any>, FunctionDefinition<{->String[1]}>>(first = letFunction_String_1__T_m__T_m_, second = {|
                  let p1 = $af.parameters->at(0)->cast(@CString).value;
                  let p2 = $state->toPure($af.parameters->at(1));

                  'let %s = %s'->format([$p1, $p2]);
                  })
            ];

            let h = $handlers->filter(p|$p.first == $f);

            if($h->isNotEmpty(),
               | $h->toOne().second->eval(),
               |

				      let infixFunctionMappings = $state.infixFunctions;

	   			      if($f->in($infixFunctionMappings.first),
		   			     |
                            let values = $af.parameters;
                            let pValues = if($values->size() == 1,
                                             | $values->match([
                                                   col:Collection[1]|$col.values,
                                                   vs: meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[*]|$vs
                                                  ]),
                                             | $values
                                             )
                                             ->map(v|$state->toPure($v));
					        let symbol = $infixFunctionMappings->filter(p|$p.first == $f)->toOne().second;

                            assertEquals($f->functionType().parameters->size(), $values->size(), | 'Expected ' + $f->functionType().parameters->size()->toString() + ' parameters on ' + $f->elementToPath() + ' function call.  got: ' + $values->size()->makeString());


                            if($f->in([and_Boolean_1__Boolean_1__Boolean_1_, or_Boolean_1__Boolean_1__Boolean_1_]),
                              | $pValues->joinStrings('(', ') ' + $symbol + ' (', ')'),
                              | if($values->size() == 1 && $pValues->size() == 1,
                                   |$pValues->joinStrings(if($f->in([plus_Number_MANY__Number_1_, plus_Float_MANY__Float_1_,plus_Integer_MANY__Integer_1_]), |'', |$symbol), ' ' + $symbol + ' ', ''),
                                   |$pValues->joinStrings(' ' + $symbol + ' ')
                                   );
                              );
					     ,
					     |
					        let injectFirstParam = !$f->in([
   						       col_Function_1__String_1__BasicColumnSpecification_1_,
	   					       agg_String_1__FunctionDefinition_1__FunctionDefinition_1__AggregateValue_1_,
						       if_Boolean_1__Function_1__Function_1__T_m_,
						       not_Boolean_1__Boolean_1_,
                               asc_String_1__SortInformation_1_,
                               desc_String_1__SortInformation_1_
					           ]);
					        let iStr = if($injectFirstParam == false || $af.parameters->isEmpty(),
									| '',
									|
									   let i = $state->toPure($af.parameters->at(0));
									   $i + if($f == getAll_Class_1__T_MANY_, | '.', | if($i->length() > 20 || $i->contains('\n'), | '\n\t', |'') + '->');
									);
					        let fName = if($f == getAll_Class_1__T_MANY_ && $injectFirstParam,
									 | 'all',
									 | if($f == not_Boolean_1__Boolean_1_ ,
										  | '!',
										  | if(($f->cast(@PackageableElement).package->toOne()->in($state.coreImportPackages) ||  $state.removeFunctionPaths) , | '', | $f->cast(@PackageableElement).package->toOne()->elementToPath() + '::') + $f.functionName->toOne()
                                          )
									 );

                            let pValues = if($injectFirstParam, | $af.parameters->tail(), | $af.parameters)->map(p|$state->toPure($p));
					        let pStr = if($pValues->map(s|$s->length())->sum()<= 700, | $pValues->joinStrings('(', ', ', ')'), |$pValues->joinStrings('(\n', ',\n     ', '\n     )'));

                             '%s%s%s'->format([$iStr, $fName, $pStr]);
                            );
            );
         },
         ap : AppliedProperty[1]|
            $state->toPure($ap.parameters->at(0)) + '.' + $ap.property + if($ap.parameters->tail()->isEmpty(),|'',| $ap.parameters->tail()->map(p|$state->toPure($p))->joinStrings('(', ',',')')),
         ci : CInteger[1]|'%s'->format($ci.value),
         ci : CDecimal[1]|'%s'->format($ci.value),
         ci : CFloat[1]|'%s'->format($ci.value),
         ci : CBoolean[1]|'%s'->format($ci.value),
         cs : CString[1]|  let slash = '\\';
                           '\'%s\''->format($cs.value->replace($slash, $slash + $slash)->replace('\'', '\\\'')->replace('\n', '\\n'));,
         cs : CStrictDate[1]| '%' + ('%s'->format($cs.value)),
         cs : CDateTime[1]| '%' + ('%s'->format($cs.value)),
         cs : CLatestDate[1]| '%latest',
         ev : EnumValue[1]|

                  let enumName = if($ev.fullPath->isInMeta(),
                    | $ev.fullPath->substring($ev.fullPath->lastIndexOf('::') + 2),
                    | $ev.fullPath
                    );

                  '%s.%s'->format([$enumName, $ev.value]);
                  ,
         col:Collection[1]| $col.values->map(v|$state->toPure($v))->joinStrings('[',',',']'),
         l : Lambda[1]|
            let pStr = $l.parameters->map(p|$p->match([
               v : Variable[1]|
               if ($v.class->isEmpty(),
                   |$v.name,
                   |let cName = if($v.class->in([Float, Any, String, Integer, Boolean, Date, DateTime, StrictDate]->map(x|$x->makeString())),
                     | $v.class->toOne()->makeString(),
                     | if($v.class->toOne()->isInMeta(),
                          |$v.class->toOne()->substring($v.class->toOne()->lastIndexOf('::')+2),
                          |$v.class->toOne()
                       );
                     )->toOne();
                    let m = $v.multiplicity->toOne()->mapToString();
                    '%s:%s[%s]'->format([$v.name, $cName, $m]);
                )
               ]))->joinStrings(', ');

            let bStr = $state->toPure($l.body);

            '{%s|%s}'->format([$pStr, $bStr]);,
         v : Variable[1]|'$' + $v.name,
         hackedClass :meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::GenericTypeInstance[1]|'@' + $hackedClass.fullPath,
         ci : ClassInstance[1] |
            $ci.value->match(
                [
                     aggValue : TDSAggregateValue[1]| 'agg(\'%s\', %s, %s)'->format([$aggValue.name, $state->toPure($aggValue.mapFn), $state->toPure($aggValue.aggregateFn)]),
                     aggValue : meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::AggregateValue[1]| 'agg(%s, %s)'->format([$state->toPure($aggValue.mapFn), $state->toPure($aggValue.aggregateFn)]),
                     sortInfo : TDSSortInformation[1]| '^SortInformation(column = \'%s\', direction = SortDirection.%s)'->format([$sortInfo.column, $sortInfo.direction]),
                     extendInfo: TDSColumnInformation[1] | '^BasicColumnSpecification<%s>(name = \'%s\', func = %s)'->format([$extendInfo.columnFn->cast(@Lambda).parameters->at(0).class->toOne(), $extendInfo.name, $state->toPure($extendInfo.columnFn)]),
                     path : Path[1]| '#/%s/%s%s#'->format([$path.startType, $path.path->map(p|$p->match([ppe:PropertyPathElement[1]|$ppe.property]))->joinStrings('.'), if($path.name->isEmpty() || ($path.name->toOne()->length() == 0), |'', |'!' + $path.name->toOne())]);,
                     or : meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::TdsOlapRank[1]|
                        '^TdsOlapRank<TDSRow>(func = %s)'->format($state->toPure($or.function)),
                     oa : meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::TdsOlapAggregation[1]|
                        '^TdsOlapAggregation<TDSRow>(colName = \'%s\', func = %s)'->format([$oa.columnName, $state->toPure($oa.function)]),
                     a :meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Whatever[1]|fail('Unsupported type in alloy protocol ' + $a.class);'';,
                     r : RuntimeInstance[1]|'',
                     e : ExecutionContextInstance[1]|'',
                     pv : meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Pair[1]|
                                            let tMatcher = {val:meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[1]| $val->match([
                                                  x : EnumValue[1]| $x.fullPath,
                                                  x : CInteger[1]| Integer->toString(),
                                                  x : CDecimal[1]| Decimal->toString(),
                                                  x : CFloat[1]| Float->toString(),
                                                  x : CBoolean[1]| Boolean->toString(),
                                                  x : CStrictDate[1]| StrictDate->toString(),
                                                  x : CDateTime[1]| DateTime->toString(),
                                                  x : CString[1]| String->toString(),
                                                  x : meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::TdsOlapRank[1]| meta::pure::tds::TdsOlapRank->elementToPath() + '<TDSRow>',
                                                  x : meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::TdsOlapAggregation[1]| meta::pure::tds::TdsOlapAggregation->elementToPath() + '<TDSRow>'
                                                  ])};
                                            let firstType = $tMatcher->eval($pv.first);
                                            let secondType = $tMatcher->eval($pv.second);

                                            '^Pair<%s,%s>(first = %s, second = %s)'->format([$firstType, $secondType, $state->toPure($pv.first),$state->toPure($pv.second)]);
                ]
            ),
         ev: PackageableElementPtr[1] | let enumName = if($ev.fullPath->isInMeta(),
                                                    | $ev.fullPath->substring($ev.fullPath->lastIndexOf('::') + 2),
                                                    | $ev.fullPath
                                                     )

         ]);
      )->joinStrings('', ';\n', if($vs->size() <= 1, | '', | ';'));
}

function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::mapToString(m : meta::protocols::pure::v1_31_0::metamodel::domain::Multiplicity[1]):String[1]
{
   [
      pair(^meta::protocols::pure::v1_31_0::metamodel::domain::Multiplicity(lowerBound=0, upperBound=0), PureZero->printMultiplicity()),
      pair(^meta::protocols::pure::v1_31_0::metamodel::domain::Multiplicity(lowerBound=1, upperBound=1), PureOne->printMultiplicity()),
      pair(^meta::protocols::pure::v1_31_0::metamodel::domain::Multiplicity(lowerBound=0, upperBound=1), ZeroOne->printMultiplicity()),
      pair(^meta::protocols::pure::v1_31_0::metamodel::domain::Multiplicity(lowerBound=1), OneMany->printMultiplicity()),
      pair(^meta::protocols::pure::v1_31_0::metamodel::domain::Multiplicity(lowerBound=0), ZeroMany->printMultiplicity())
   ]
   ->filter(p|$p.first == $m)->toOne().second;
}

function <<access.protected>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::getSignFunctions():meta::pure::functions::collection::Pair<Function<Any>, String>[*]
{
   [
      pair(list(or_Boolean_1__Boolean_1__Boolean_1_), '||'),
      pair(list(and_Boolean_1__Boolean_1__Boolean_1_), '&&'),
      pair(list(equal_Any_MANY__Any_MANY__Boolean_1_), '=='),
      pair(
         list([
            greaterThan_Number_1__Number_1__Boolean_1_,
            greaterThan_Number_1__Number_$0_1$__Boolean_1_,
            greaterThan_Number_$0_1$__Number_1__Boolean_1_,
            greaterThan_Number_$0_1$__Number_$0_1$__Boolean_1_,
            greaterThan_Date_1__Date_1__Boolean_1_,
            greaterThan_Date_$0_1$__Date_1__Boolean_1_,
            greaterThan_Date_1__Date_$0_1$__Boolean_1_,
            greaterThan_Date_$0_1$__Date_$0_1$__Boolean_1_,
            greaterThan_Boolean_1__Boolean_1__Boolean_1_,
            greaterThan_Boolean_$0_1$__Boolean_1__Boolean_1_,
            greaterThan_Boolean_1__Boolean_$0_1$__Boolean_1_,
            greaterThan_Boolean_$0_1$__Boolean_$0_1$__Boolean_1_,
            greaterThan_String_1__String_1__Boolean_1_,
            greaterThan_String_$0_1$__String_1__Boolean_1_,
            greaterThan_String_1__String_$0_1$__Boolean_1_,
            greaterThan_String_$0_1$__String_$0_1$__Boolean_1_
         ]),
            '>'
      ),
      pair(
         list([
            greaterThanEqual_Number_1__Number_1__Boolean_1_,
            greaterThanEqual_Number_1__Number_$0_1$__Boolean_1_,
            greaterThanEqual_Number_$0_1$__Number_1__Boolean_1_,
            greaterThanEqual_Number_$0_1$__Number_$0_1$__Boolean_1_,
            greaterThanEqual_Date_1__Date_1__Boolean_1_,
            greaterThanEqual_Date_$0_1$__Date_1__Boolean_1_,
            greaterThanEqual_Date_1__Date_$0_1$__Boolean_1_,
            greaterThanEqual_Date_$0_1$__Date_$0_1$__Boolean_1_,
            greaterThanEqual_Boolean_1__Boolean_1__Boolean_1_,
            greaterThanEqual_Boolean_$0_1$__Boolean_1__Boolean_1_,
            greaterThanEqual_Boolean_1__Boolean_$0_1$__Boolean_1_,
            greaterThanEqual_Boolean_$0_1$__Boolean_$0_1$__Boolean_1_,
            greaterThanEqual_String_1__String_1__Boolean_1_,
            greaterThanEqual_String_$0_1$__String_1__Boolean_1_,
            greaterThanEqual_String_1__String_$0_1$__Boolean_1_,
            greaterThanEqual_String_$0_1$__String_$0_1$__Boolean_1_
         ]),
            '>='
      ),
      pair(
         list([
            lessThan_Number_1__Number_1__Boolean_1_,
            lessThan_Number_1__Number_$0_1$__Boolean_1_,
            lessThan_Number_$0_1$__Number_1__Boolean_1_,
            lessThan_Number_$0_1$__Number_$0_1$__Boolean_1_,
            lessThan_Date_1__Date_1__Boolean_1_,
            lessThan_Date_$0_1$__Date_1__Boolean_1_,
            lessThan_Date_1__Date_$0_1$__Boolean_1_,
            lessThan_Date_$0_1$__Date_$0_1$__Boolean_1_,
            lessThan_Boolean_1__Boolean_1__Boolean_1_,
            lessThan_Boolean_$0_1$__Boolean_1__Boolean_1_,
            lessThan_Boolean_1__Boolean_$0_1$__Boolean_1_,
            lessThan_Boolean_$0_1$__Boolean_$0_1$__Boolean_1_,
            lessThan_String_1__String_1__Boolean_1_,
            lessThan_String_$0_1$__String_1__Boolean_1_,
            lessThan_String_1__String_$0_1$__Boolean_1_,
            lessThan_String_$0_1$__String_$0_1$__Boolean_1_
         ]),
            '<'
      ),
      pair(
         list([
            lessThanEqual_Number_1__Number_1__Boolean_1_,
            lessThanEqual_Number_1__Number_$0_1$__Boolean_1_,
            lessThanEqual_Number_$0_1$__Number_1__Boolean_1_,
            lessThanEqual_Number_$0_1$__Number_$0_1$__Boolean_1_,
            lessThanEqual_Date_1__Date_1__Boolean_1_,
            lessThanEqual_Date_$0_1$__Date_1__Boolean_1_,
            lessThanEqual_Date_1__Date_$0_1$__Boolean_1_,
            lessThanEqual_Date_$0_1$__Date_$0_1$__Boolean_1_,
            lessThanEqual_Boolean_1__Boolean_1__Boolean_1_,
            lessThanEqual_Boolean_$0_1$__Boolean_1__Boolean_1_,
            lessThanEqual_Boolean_1__Boolean_$0_1$__Boolean_1_,
            lessThanEqual_Boolean_$0_1$__Boolean_$0_1$__Boolean_1_,
            lessThanEqual_String_1__String_1__Boolean_1_,
            lessThanEqual_String_$0_1$__String_1__Boolean_1_,
            lessThanEqual_String_1__String_$0_1$__Boolean_1_,
            lessThanEqual_String_$0_1$__String_$0_1$__Boolean_1_
         ]),
            '<='
      ),
      pair(
         list([
            plus_Number_MANY__Number_1_,
            plus_Float_MANY__Float_1_,
            plus_Integer_MANY__Integer_1_,
            plus_String_MANY__String_1_
         ]),
            '+'
      ),
      pair(
         list([
            minus_Number_MANY__Number_1_,
            minus_Float_MANY__Float_1_,
            minus_Integer_MANY__Integer_1_
         ]),
            '-'
      ),
      pair(
         list([
            times_Number_MANY__Number_1_,
            times_Float_MANY__Float_1_,
            times_Integer_MANY__Integer_1_
         ]),
            '*'
      ),
      pair(list(divide_Number_1__Number_1__Float_1_), '/')
   ]
   ->map(p|$p.first.values->map(v|pair($v, $p.second)));
}

function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::isInMeta(item:String[1]):Boolean[1]
{
   $item->startsWith('meta::pure::') && !$item->startsWith('meta::pure::tests::');
}


function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::isAutoMapFunction(af:AppliedFunction[1]):Boolean[1]
{
   $af.parameters->at(1)->instanceOf(meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda)
      && $af.parameters->at(1)->cast(@meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda).parameters->toOne()->instanceOf(meta::protocols::pure::v1_31_0::metamodel::valueSpecification::Variable)
      && $af.parameters->at(1)->cast(@meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda).parameters->cast(@meta::protocols::pure::v1_31_0::metamodel::valueSpecification::Variable)->toOne().name == 'v_automap'
}

function <<access.private>> meta::protocols::pure::v1_31_0::transformation::fromPureGraph::toPureGrammar::getAutoMapProperty(af:AppliedFunction[1]):meta::protocols::pure::v1_31_0::metamodel::valueSpecification::ValueSpecification[1]
{
   $af.parameters->at(1)->cast(@meta::protocols::pure::v1_31_0::metamodel::valueSpecification::raw::Lambda).body->toOne();
}
