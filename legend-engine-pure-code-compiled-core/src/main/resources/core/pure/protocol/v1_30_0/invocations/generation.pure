###Pure

import meta::pure::generation::metamodel::*;
import meta::json::*;
import meta::protocols::pure::v1_30_0::transformation::fromPureGraph::*;
import meta::alloy::metadataServer::*;
import meta::json::schema::generation::*;
import meta::pure::functions::io::http::*;

function  <<access.private>>  meta::protocols::pure::v1_30_0::invocation::generation::json::legendGenerateJson(input:JSONSchemaConfig[1], host:String[1], port:Integer[1]):JSONSchemaOutput[*]
{
   meta::protocols::pure::v1_30_0::invocation::generation::json::legendGenerateJson($input, $host, $port, 'v1');
}

function meta::protocols::pure::v1_30_0::invocation::generation::json::legendGenerateJson(jsonConfig:JSONSchemaConfig[1], host:String[1], port:Integer[1], version:String[1]):JSONSchemaOutput[*]
{
   let resp = executeHTTPRaw(^URL(host = $host , port=$port, path = '/api/pure/'+$version+'/schemaGeneration/jsonSchema'),
                                 HTTPMethod.POST,
                                 'application/json',
                                 '{ "clientVersion":"v1_30_0",'+
                                 '  "config":'+$jsonConfig->meta::protocols::pure::v1_30_0::invocation::generation::json::transformJSONSchemaConfig()->alloyToJSON()+','+
                                 '  "model":'+if ($jsonConfig.package->isEmpty(),
                                                  |$jsonConfig.class->toOne()->pathToElement()->toOne()->cast(@Type)->buildPureModelFromType(meta::pure::extension::defaultExtensions())->alloyToJSON(),
                                                  |$jsonConfig.package->toOne()->pathToElement()->toOne()->cast(@Package)->buildPureModelFromPackage(meta::pure::extension::defaultExtensions())->alloyToJSON())+
                                 '}'
                                );
   assertEq(200, $resp.statusCode, | $resp.entity);
   $resp.entity->parseJSON()->fromJSON(JSONSchemaOutput, ^ExtendedJSONDeserializationConfig(nullReplacementInArray = ^TDSNull(), typeKeyName='__TYPE', failOnUnknownProperties=true))->cast(@JSONSchemaOutput);
}