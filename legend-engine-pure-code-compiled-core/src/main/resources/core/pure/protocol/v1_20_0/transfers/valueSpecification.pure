// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::pure::milestoning::*;
import meta::pure::graphFetch::execution::*;
import meta::json::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::router::clustering::*;
import meta::pure::graphFetch::*;
import meta::pure::router::metamodel::*;
import meta::pure::router::metamodel::clustering::*;
import meta::pure::metamodel::path::*;

function meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformFunctionBody(f:FunctionDefinition<Any>[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::ValueSpecification[*]
{
    meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformFunctionBody($f,false, $extensions);
}

function meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformFunctionBody(f:FunctionDefinition<Any>[1],useAppliedFunction:Boolean[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::ValueSpecification[*]
{
   $f.expressionSequence->map(e|$e->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($f->functionType().parameters->evaluateAndDeactivate().name, $f->openVariableValues(),false,$useAppliedFunction, $extensions));
}

function meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification(v:ValueSpecification[1], inScope:String[*], open:Map<String,List<Any>>[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::ValueSpecification[1]
{
    meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($v, $inScope, $open,false, $extensions);
}



function meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification(v:ValueSpecification[1], inScope:String[*], open:Map<String,List<Any>>[1],isParameter:Boolean[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::ValueSpecification[1]
{

       meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($v, $inScope, $open,$isParameter,false, $extensions);

}


function meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification(v:ValueSpecification[1], inScope:String[*], open:Map<String,List<Any>>[1],isParameter:Boolean[1],useAppliedFunction:Boolean[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::ValueSpecification[1]
{
   $v->evaluateAndDeactivate()->match(
      [
         f:FunctionRoutedValueSpecification[1]|$f.value->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, false, $extensions),
         e:ExtendedRoutedValueSpecification[1]|$e.value->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, false, $extensions),
         e:ClusteredValueSpecification[1]|$e.val->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, false, $extensions),
         fe:FunctionExpression[1]|
                  let spec = $fe.func->match(
                                          [
                                             p:Property<Nil,Any|*>[1]|
                                                ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::application::AppliedProperty
                                                (
                                                   _type = 'property',
                                                   property = $fe.func.name->toOne()->cast(@String),
                                                   parameters = $fe.parametersValues->evaluateAndDeactivate()->map(pm|$pm->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open,false,$useAppliedFunction, $extensions))
                                                ),
                                             p:QualifiedProperty<Any>[1]|
                                                ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::application::AppliedProperty
                                                (
                                                   _type = 'property',
                                                   property = $fe.func.name->toOne()->cast(@String),
                                                   parameters = $fe.parametersValues->evaluateAndDeactivate()->map(pm|$pm->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, false, $extensions))
                                                ),
                                             f:Function<Any>[1]|
                                                let passToTransformAny =
                                                   [
                                                      agg_FunctionDefinition_1__FunctionDefinition_1__AggregateValue_1_,
                                                      agg_String_1__FunctionDefinition_1__FunctionDefinition_1__AggregateValue_1_,
                                                      func_String_1__FunctionDefinition_1__TdsOlapAggregation_1_,
                                                      func_FunctionDefinition_1__TdsOlapRank_1_,
                                                      new_Class_1__String_1__KeyExpression_MANY__T_1_ // This assumes that transformAny will take care of the instantiation correctly (e.g for sort, extend and agg)
                                                   ];

                                              let isExtractEnum = $fe->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::hasExtractEnumValue();
                                                if($isExtractEnum,
                                                 |^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::application::AppliedProperty
                                                      (
                                                         _type = 'property',
                                                        property = $fe.parametersValues->at(1)->cast(@InstanceValue).values->toOne()->cast(@String),
                                                        parameters =   $fe.parametersValues->at(0)->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open,false, $extensions)
                                                      );,
                                                    | let isAutoMap =   meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::hasAutoMapProperty($fe);
                                                      if($isAutoMap,
                                                       |  let xs = $fe.parametersValues
                                                                                       ->filter(f|$f->instanceOf(InstanceValue))->cast(@InstanceValue).values
                                                                                        ->filter(f|$f->instanceOf(LambdaFunction))->cast(@LambdaFunction<Any>).expressionSequence;
                                                           let newProperty = $xs->at(0) ->cast(@SimpleFunctionExpression);
                                                           let newParameter =    $fe.parametersValues->at(0);
                                                           let additionalParameters =   $xs->cast(@SimpleFunctionExpression).parametersValues->tail();
                                                           let updatedProperty = ^$newProperty(parametersValues = $newParameter ->concatenate(  $additionalParameters ));
                                                           $updatedProperty->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope,$open,false,$useAppliedFunction, $extensions);

                                                       ,|   if($passToTransformAny->contains($fe.func),
                                                                       |$fe->reactivate($fe->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::scan()->map(o|pair($o,^List<Any>()))->newMap())->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, 0, $fe, $extensions);,
                                                                       |let package = if($fe.func->instanceOf(PackageableFunction), |$fe.func->cast(@PackageableFunction<Any>).package->toOne(), |::);
                                                                         if($fe.func->instanceOf(FunctionDefinition) && $useAppliedFunction && (!$package->isWithinPackage(meta) && !$package->meta::alloy::isMetaAlloyTestDependency() || $package->meta::alloy::isMetaAlloyTestDependencyForGeneration() ),
                                                                           |
                                                                            ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::application::AppliedFunction
                                                                                  (
                                                                                      _type = 'func',
                                                                                     function = $fe.functionName->toOne(),
                                                                                     parameters = $fe.parametersValues->evaluateAndDeactivate()->map(pm|$pm->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open,false,$useAppliedFunction, $extensions))
                                                                                  )
                                                                            ,|if ($fe.func->instanceOf(FunctionDefinition) && (!$package->isWithinPackage(meta) || $package->meta::alloy::isMetaAlloyTestDependency()),
                                                                                 |
                                                                                  if($fe.func->cast(@FunctionDefinition<Any>).expressionSequence->size() == 1,
                                                                                     {|
                                                                                        //in-line function
                                                                                        let pNames = $fe.func->functionType().parameters->evaluateAndDeactivate().name;
                                                                                        let pValues = $fe.parametersValues->evaluateAndDeactivate()->map(v|
                                                                                             $v->match([
                                                                                               ve:VariableExpression[1]|
                                                                                                  if($open->get($ve.name).values->isNotEmpty(),| $open->get($ve.name), |list($ve));
                                                                                               ,
                                                                                               any:ValueSpecification[1]|list($any)
                                                                                            ]));

                                                                                        let newOpen = $open->putAll($pNames->zip($pValues)->newMap());

                                                                                        $fe.func->cast(@FunctionDefinition<Any>).expressionSequence->at(0)->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $newOpen,false,$useAppliedFunction, $extensions);
                                                                                     },
                                                                                     {|
                                                                                        ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::application::UnknownAppliedFunction
                                                                                        (
                                                                                            _type = 'unknownFunc',
                                                                                           function = $fe.func.functionName->toOne(),
                                                                                           returnType = $fe.func->functionReturnType().rawType->toOne()->elementToPath(),
                                                                                           returnMultiplicity = $fe.func->functionReturnMultiplicity()->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::domain::transformMultiplicity()
                                                                                        )
                                                                                     }
                                                                                   ),
                                                                                 |^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::application::AppliedFunction
                                                                                  (
                                                                                      _type = 'func',
                                                                                     function = $fe.func.functionName->toOne(),
                                                                                     fControl = $fe.func.name->toOne(),
                                                                                     parameters = $fe.parametersValues->evaluateAndDeactivate()->map(pm|$pm->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open,false,$useAppliedFunction, $extensions))
                                                                                  )
                                                                                 );
                                                                     );
                                                             );
                                                          );
                                                   );

                                          ]
                                       );
                  ,
         i:InstanceValue[1]|
                        if($i->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::isHackedClass(),
                           |$i->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformHackedClass(),
                           |if($i->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::isHackedUnit(),
                               |$i->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformHackedUnit(),
                               |if($i->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::isUnitType(),
                                   |$i->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformUnitInstance(),
                                   |$i.values->meta::protocols::pure::v1_20_0::transformation ::fromPureGraph::valueSpecification::transformAny($inScope, $open, $i.multiplicity, 0 , [],$useAppliedFunction, $extensions))));,
         v:VariableExpression[1]|
            if ($inScope->contains($v.name),
                |meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformVar($v,$isParameter),
                |let r = $open->get($v.name);
                 let vals = $r.values->evaluateAndDeactivate();
                 if ($r->isEmpty(),
                     |meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformVar($v,$isParameter),
                     |if ($vals->size() == 1 && $vals->toOne()->instanceOf(VariableExpression),
                        |meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformVar($vals->toOne()->cast(@VariableExpression),$isParameter),
                        |$r.values->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, if($vals->isEmpty(),|PureZero,|$v.multiplicity), $extensions);
                      )
                 );
            );
      ]
   );
}

function <<access.private>> meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::isUnitType(v:InstanceValue[1]):Boolean[1]
{
    $v.genericType.rawType->toOne()->instanceOf(Unit)
}

function <<access.private>> meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::isHackedUnit(v:InstanceValue[1]):Boolean[1]
{
    $v.values->isEmpty() && $v.multiplicity == PureOne && $v->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::isUnitType()
}

function <<access.private>> meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::isHackedClass(v:InstanceValue[1]):Boolean[1]
{
    let rawType = $v.genericType.rawType->toOne();
    $v.values->isEmpty() && $v.multiplicity == PureOne && (($rawType->instanceOf(DataType) && !$rawType->instanceOf(Unit)) || $rawType->instanceOf(Class));
}

function <<access.private>> meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformHackedClass(v:InstanceValue[1]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::HackedClassValue[1]
{
   ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::HackedClassValue
   (
      _type = 'hackedClass',
      fullPath = $v.genericType.rawType->toOne()->match([
         d:DataType[1]|$d->makeString(),
         c:Class<Any>[1]|$c->elementToPath()
         ])
   )
}

//here
function <<access.private>> meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformVar(v:VariableExpression[1], isParameter:Boolean[1]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::Variable[1]
{
   //xStore generates 'that' but provides no context on what the class is so we need to leave the class in
//   if(($isParameter  &&$v.name != 'this' ) || $v.name == 'v_automap' || $v.name == 'that' ,
   if($isParameter && !$v.genericType->instanceOf(InferredGenericType) && $v.name != 'this',
      |^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::Variable
             (
                _type = 'var',
                multiplicity = $v.multiplicity->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::domain::transformMultiplicity(),
                name = $v.name,
                class = $v.genericType.rawType->toOne()->elementToPath()
            );
    ,|^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::Variable
                (
                   _type = 'var',
                   name = $v.name
                );
    );

}

function <<access.private>> meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformHackedUnit(v:ValueSpecification[1]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::HackedUnit[1]
{
   ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::HackedUnit(_type='hackedUnit', unitType=$v.genericType.rawType->toOne()->elementToPath());
}

function <<access.private>> meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformUnitInstance(v:ValueSpecification[1]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::UnitInstance[1]
{
   ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::UnitInstance(_type='unitInstance', unitType=$v.genericType.rawType->toOne()->elementToPath(), unitValue=$v->cast(@InstanceValue).values->toOne()->cast(@Number));
}

function meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny(l:Any[*], inScope:String[*], open:Map<String,List<Any>>[1], m:Multiplicity[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::ValueSpecification[1]
{
   meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($l, $inScope, $open, $m, 0 , [], $extensions)
}

function <<access.private>> meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny(l:Any[*], inScope:String[*], open:Map<String,List<Any>>[1], m:Multiplicity[1], depth:Integer[1], fe:FunctionExpression[0..1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::ValueSpecification[1]
{
   meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($l, $inScope, $open, $m, $depth,$fe, false, $extensions)

}

function <<access.private>> meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny(l:Any[*], inScope:String[*], open:Map<String,List<Any>>[1], m:Multiplicity[1], depth:Integer[1], fe:FunctionExpression[0..1],useAppliedFunction:Boolean[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::ValueSpecification[1]
{
   $l->match(
               $extensions.serializerExtension('v1_20_0')->cast(@meta::protocols::pure::v1_20_0::extension::SerializerExtension_v1_20_0).transfers_valueSpecification_transformAny->map(f|$f->eval($inScope, $open, $m, $fe, $useAppliedFunction, $extensions))->concatenate([
                  n:Nil[0] |
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::Collection
                     (
                        _type = 'collection',
                        multiplicity = $m->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::domain::transformMultiplicity()
                     ),
                  s:String[*]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::CString
                     (
                        _type = 'string',
                        multiplicity = $m->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::domain::transformMultiplicity(),
                        values = $s
                     ),
                  i:Integer[*]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::CInteger
                     (
                        _type = 'integer',
                        multiplicity = $m->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::domain::transformMultiplicity(),
                        values = $i
                     ),
                  d:Decimal[*]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::CDecimal
                     (
                        _type = 'decimal',
                        multiplicity = $m->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::domain::transformMultiplicity(),
                        values = $d
                     ),
                  f:Float[*]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::CFloat
                     (
                        _type = 'float',
                        multiplicity = $m->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::domain::transformMultiplicity(),
                        values = $f
                     ),
                  b:Boolean[*]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::CBoolean
                     (
                        _type = 'boolean',
                        multiplicity = $m->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::domain::transformMultiplicity(),
                        values = $b
                     ),
                  d:StrictDate[*]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::CStrictDate
                     (
                        _type = 'strictDate',
                        multiplicity = $m->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::domain::transformMultiplicity(),
                        values = $d->map(st|$st->toString())
                     ),
                  d:DateTime[*]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::CDateTime
                     (
                        _type = 'dateTime',
                        multiplicity = $m->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::domain::transformMultiplicity(),
                        values = $d->map(st|$st->toString())
                     ),
                  l:LatestDate[*]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::CLatestDate
                     (
                        _type = 'latestDate',
                        multiplicity = $m->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::domain::transformMultiplicity()
                     ),
                  c:Class<Any>[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::PackageableElementPtr
                     (
                        _type = 'packageableElementPtr',
                        fullPath = $c->at(0)->elementToPath()
                     ),
                  l:LambdaFunction<Any>[1]|
                     let nInScope = $l->functionType().parameters->evaluateAndDeactivate().name;
                     let nOpen = $open->putAll($l->openVariableValues()->keyValues()->filter(v|$v.second.values->isNotEmpty()));
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Lambda
                     (
                        _type = 'lambda',
                        parameters = $l->at(0)->functionType().parameters->evaluateAndDeactivate()->map(p|$p->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($nInScope, $nOpen, true,$useAppliedFunction, $extensions)->cast(@meta::protocols::pure::v1_20_0::metamodel::valueSpecification::Variable)),
                        body = $l.expressionSequence->map(e|$e->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($nInScope, $nOpen,false,$useAppliedFunction, $extensions))
                     );,
                  e:Enum[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::EnumValue
                     (
                        _type = 'enumValue',
                        fullPath = $e->genericType().rawType->toOne()->elementToPath(),
                        value = $e->id()
                     ),
                  e:Enumeration<Any>[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::PackageableElementPtr
                     (
                        _type = 'packageableElementPtr',
                        fullPath = $e->elementToPath()
                     ),
                  u:Unit[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::UnitType
                     (
                        _type='unitType',
                        unitType=$u->elementToPath()
                     );,
                  v:ValueSpecification[1]|$v->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open,false,$useAppliedFunction, $extensions),
                  a:Path<Nil,Any|*>[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Path
                     (
                        _type = 'path',
                        name = if ($a.name->isEmpty(),|'',|$a.name->toOne()),
                        startType = $a.start.rawType->toOne()->elementToPath(),
                        path = $a.path->map(
                                    p|$p->match(
                                       [
                                          p:PropertyPathElement[1]|^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::PropertyPathElement(
                                                                        _type='propertyPath',
                                                                        property=$p.property.name->toOne(),
                                                                        parameters = $p.parameters->map(pa|$pa->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, $extensions))
                                                                   )
                                       ]
                                    )
                               )
                     );,
                  a:meta::pure::functions::collection::AggregateValue<Any, Any, Any>[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::AggregateValue
                     (
                        _type = 'aggregateValue',
                        mapFn = $a.mapFn->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Lambda),
                        aggregateFn= $a.aggregateFn->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Lambda)
                     ),
                  a:meta::pure::tds::AggregateValue<Any,Any>[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::TDSAggregateValue
                     (
                        _type = 'tdsAggregateValue',
                        name = $a.name,
                        mapFn = $a.mapFn->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Lambda),
                        aggregateFn= $a.aggregateFn->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Lambda)
                     ),
                  oo:meta::pure::tds::OlapOperation<Any>[1]|
                     $oo->match([
                        oa : meta::pure::tds::TdsOlapAggregation<Any>[1]|
                           ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::TdsOlapAggregation
                           (
                              _type = 'tdsOlapAggregation',
                              columnName = $oa.colName,
                              function = $oa.func->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Lambda)
                           ),
                        or :  meta::pure::tds::TdsOlapRank<Any>[1]|
                           ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::TdsOlapRank
                           (
                              _type = 'tdsOlapRank',
                              function = $or.func->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Lambda)
                           )
                        ]),
                  si:meta::pure::tds::SortInformation[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::TDSSortInformation
                     (
                        _type = 'tdsSortInformation',
                        column = $si.column,
                        direction = $si.direction->toString()
                     ),
                  co:meta::pure::tds::BasicColumnSpecification<Any>[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::TDSColumnInformation
                     (
                        _type = 'tdsColumnInformation',
                        name = $co.name,
                        columnFn = $co.func->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)->cast(@meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Lambda)
                     );,
                  pair:Pair<Any,Any>[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Pair
                     (
                        _type = 'pair',
                        first = $pair.first->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions),
                        second = $pair.second->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions)
                     );,
                 m:meta::pure::mapping::Mapping[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::PackageableElementPtr
                     (
                        _type = 'packageableElementPtr',
                        fullPath = $m->elementToPath()->toOne()
                     ),
                 r:meta::pure::runtime::Runtime[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::RuntimeInstance
                     (
                        _type = 'runtimeInstance',
                        runtime = $r->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::runtime::transformRuntime($extensions)
                     ),
                 l:List<Any>[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::List
                     (
                        _type = 'listInstance',
                        values = $l.values->map(la|$la->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne, $extensions))
                     ),
                  a:AlloySerializationConfig[1] | ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::AlloySerializationConfig
                     (
                        _type = 'alloySerializationConfig',
                        typeKeyName = $a.typeKeyName,
                        includeType = $a.includeType,
                        includeEnumType = $a.includeEnumType,
                        removePropertiesWithNullValues = $a.removePropertiesWithNullValues,
                        removePropertiesWithEmptySets = $a.removePropertiesWithEmptySets,
                        fullyQualifiedTypePath = $a.fullyQualifiedTypePath,
                        includeObjectReference = $a.includeObjectReference
                     ),
                  g:GraphFetchTree[1]|
                     $g->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformGraphFetchTree($inScope, $open, $extensions),
                  k:KeyExpression[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::KeyExpression
                     (
                        _type = 'keyExpression',
                        add =  $k.add,
                        key =  $k.key->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, false, $extensions),
                        expression = $k.expression->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, false, $extensions)
                     );,
                    p:PrimitiveType[1]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::PrimitiveTypeRef
                        ( _type = 'primitiveType',
                          name= $p.name->toOne()
                         ),

                  a:Any[1]|
                             meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::possiblyTransformNewFunction($a, $m, $fe,  $inScope, $open, $extensions);,
                  a:Any[*]|
                     ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::Collection
                     (
                        _type = 'collection',
                        multiplicity = $m->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::domain::transformMultiplicity(),
                        values = $a->map(la|$la->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open, PureOne,0,[],$useAppliedFunction, $extensions))
                     );
                ])->toOneMany()
              );
}

function meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::possiblyTransformNewFunction(any:Any[1], m:Multiplicity[1],fe:FunctionExpression[0..1], inScope:String[*], open:Map<String,List<Any>>[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::ValueSpecification[1]
{
   if($fe->isNotEmpty() && $fe.functionName== 'new',
      |let serialized =   ^	meta::protocols::pure::v1_20_0::metamodel::valueSpecification::application::AppliedFunction(
                                 _type = 'func',
                                 function = $fe.func.functionName->toOne(),
                                 fControl = $fe.func.name->toOne(),
                                 parameters = $fe->toOne().parametersValues->head()->toOne()->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformNewClass()
                                             ->concatenate($fe->toOne().parametersValues->tail()->map(vs|$vs->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification( $inScope, $open, $extensions) ))
                                 );,


      | let class = $any->genericType().rawType->toOne()->cast(@PackageableElement);
         ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Whatever
         (
            _type = 'whatever',
            class = $class->elementToPath(),
            multiplicity = $m->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::domain::transformMultiplicity(),
            values = [] // newMap([]->cast(@Pair<String,meta::protocols::pure::v1_20_0::metamodel::valueSpecification::ValueSpecification>))//->genericType().rawType->toOne()->cast(@Class<Any>).properties->map(p|pair($p.name->toOne(), $p->eval($a)->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformAny($inScope, $open , $m, $depth+1)))->newMap()
         );
   );
}

function meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformNewClass(v:ValueSpecification[1]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::PackageableElementPtr[1]
{
   ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::PackageableElementPtr
   (
      _type = 'packageableElementPtr',
      fullPath = $v.genericType.typeArguments->at(0).rawType->toOne()->elementToPath()
   );
}
function meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformGraphFetchTree(tree: GraphFetchTree[1], inScope:String[*], open:Map<String,List<Any>>[1], extensions:meta::pure::extension::Extension[*]): meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::GraphFetchTree[1]
{
   let base = $tree->match([
      r: RootGraphFetchTree<Any>[1] | ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::RootGraphFetchTree(
                                         _type = 'rootGraphFetchTree',
                                         class = $r.class->elementToPath()
                                      ),
      p: PropertyGraphFetchTree[1]  | ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::PropertyGraphFetchTree(
                                         _type = 'propertyGraphFetchTree',
                                         property   = $p.property.name->toOne(),
                                         parameters = $p.parameters->map(p| $p->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification($inScope, $open, $extensions)),
                                         alias      = $p.alias,
                                         subType    = $p.subType->map(st| $st->elementToPath())
                                      ),
      c: ClusteredGraphFetchTree[1] | meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformGraphFetchTree($c.tree, $inScope, $open, $extensions)
   ]);

   let subtrees = $tree->match([
      c: ClusteredGraphFetchTree[1] | $c.tree.subTrees->map(st|$st->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformGraphFetchTree($inScope, $open, $extensions)),
      g: GraphFetchTree[1]          | $g.subTrees->map(st|$st->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformGraphFetchTree($inScope, $open, $extensions))
   ]);

   ^$base(subTrees=$subtrees);
}


function <<access.private>> meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::hasAutoMapProperty(fe:FunctionExpression[1]):Boolean[1]
{

   let instanceProps =  $fe.parametersValues->evaluateAndDeactivate()->filter(f|$f->instanceOf(InstanceValue));
   if($instanceProps->isNotEmpty(),
      |let lambda = $instanceProps->cast(@InstanceValue).values->filter(f|$f->instanceOf(LambdaFunction));
       if($lambda->isNotEmpty(),
            | let es = $lambda->cast(@LambdaFunction<Any>).expressionSequence->at(0)->filter(e|$e->instanceOf(SimpleFunctionExpression));
              if($es->isNotEmpty(),
                   |let ve = $es->cast(@SimpleFunctionExpression).parametersValues->first()->filter(f|$f->instanceOf(VariableExpression));
                    if($ve->isNotEmpty(),
                       | $ve->cast(@VariableExpression).name== 'v_automap';
                       ,|false);
                 ,|false);
            ,|false);
      ,|false);

}


function <<access.private>> meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::hasExtractEnumValue(fe:FunctionExpression[1]):Boolean[1]
{

   if($fe.func.name=='extractEnumValue_Enumeration_1__String_1__T_1_',
       |  if($fe.parametersValues->at(0)->instanceOf(InstanceValue)   &&  $fe.parametersValues->at(1)->instanceOf(InstanceValue) ,
               |true,|false),
       |false);

}


function <<access.private>> meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::scan(v:Any[1]):String[*]
{
   $v->match(
      [
         i:InstanceValue[1]| $i.values->map(s|$s->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::scan()),
         l:LambdaFunction<Any>[1]|$l.openVariables,
         f:FunctionExpression[1]|$f.parametersValues->map(p|$p->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::scan()),
         a:Any[1]|[]
      ]
   )
}


function meta::protocols::pure::v1_20_0::transformation::fromPureGraph::transformLambda(f:FunctionDefinition<Any>[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Lambda[1]
{
   meta::protocols::pure::v1_20_0::transformation::fromPureGraph::transformLambda($f, false, $extensions);
}

function meta::protocols::pure::v1_20_0::transformation::fromPureGraph::transformLambda(f:FunctionDefinition<Any>[1],useAppliedFunction:Boolean[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Lambda[1]
{

   ^meta::protocols::pure::v1_20_0::metamodel::valueSpecification::raw::Lambda
   (
      _type = 'lambda',
      body = $f->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformFunctionBody($useAppliedFunction, $extensions),
      parameters = $f->functionType().parameters->map(p |
         $p->meta::protocols::pure::v1_20_0::transformation::fromPureGraph::valueSpecification::transformValueSpecification([], ^Map<String, meta::pure::functions::collection::List<Any>>(), true, $useAppliedFunction, $extensions)->cast(@meta::protocols::pure::v1_20_0::metamodel::valueSpecification::Variable)
      )
   )
}
