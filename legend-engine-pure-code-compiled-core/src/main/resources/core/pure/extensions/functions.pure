// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::engine::java::*;
import meta::java::metamodel::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::transform::*;
import meta::pure::mapping::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::graphFetch::*;
import meta::pure::tds::schema::*;
import meta::pure::executionPlan::*;
import meta::pure::router::routing::*;
import meta::pure::store::*;
import meta::pure::runtime::*;
import meta::pure::extension::*;
import meta::pure::router::clustering::*;
import meta::pure::store::*;
import meta::pure::graphFetch::executionPlan::*;


// Store Extension --------------------------------------------------------------------------
function meta::pure::extension::storeContractForSetImplementation(extensions: Extension[*], s:InstanceSetImplementation[1]):StoreContract[1]
{
  $extensions.availableStores
    ->removeDuplicates(x|$x.id,{a,b|$a==$b})
    ->filter(sc|$sc.supportsSetImplementation->eval($s))
    ->unique(|'for the setImplementation ' + $s->class().name->toOne() + '. For the extensions: [' + $extensions.type->joinStrings(',') + ']');
}
  
function meta::pure::extension::storeContractFromStore(extensions: Extension[*], s: Store[1]):StoreContract[1]
{
  $extensions.availableStores
    ->removeDuplicates(x|$x.id,{a,b|$a==$b})
    ->filter(sc|$sc.supportsStore->eval($s))
    ->unique(|'for the store ' + $s->class().name->toOne() + '. For the extensions: [' + $extensions.type->joinStrings(',') + ']');
}

function <<access.private>> meta::pure::extension::unique(storeContracts:StoreContract[*], message:Function<{->String[1]}>[1]):meta::pure::store::StoreContract[1]
{
  let list = $storeContracts->removeDuplicates(x|$x.id,{a,b|$a==$b});
  assert($list->isNotEmpty(), |'The system can\'t find the appropriate StoreContract '+$message->eval());
  assert($list->size() == 1, |'The system found too many StoreContracts ['+$list.id->joinStrings(',')+'] '+$message->eval());
  $list->toOne();  
}
// -------------------------------------------------------------------------- Store Extension








function meta::pure::extension::defaultExtensions():Extension[*]
{
  ^Extension
  (
    type = 'defaultExtensions',    
    availableStores = [
                          meta::pure::store::platform::contract::platformStoreContract(),
                          meta::pure::mapping::modelToModel::contract::modelStoreContract(),
                          meta::pure::mapping::aggregationAware::contract::aggregationAwareStoreContract()
                      ]                          
  )
}