// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;
import meta::pure::functions::tests::model::*;

function <<test.Test>> meta::pure::functions::meta::tests::type::testTypePrimitive():Boolean[1]
{
    assertEquals(Integer, 1->type());
    assertEquals(String, 'the quick brown fox jumps over the lazy dog'->type());
    assertEquals(Boolean, true->type());
    assertEquals(Float, 5.5->type());
    assertEquals(Date, %2014-01->type());
}

function <<test.Test>> meta::pure::functions::meta::tests::type::testTypeInstance():Boolean[1]
{
    assertEquals(Person, ^Person(firstName='Pierre', lastName='Doe')->type());
}

function <<test.Test>> meta::pure::functions::meta::tests::type::testTypeFromType():Boolean[1]
{
    assertEquals(Class, Person->type());
}

function <<test.Test>> meta::pure::functions::meta::tests::type::testTypeFromEnum():Boolean[1]
{
    assertEquals(Enumeration, GeographicEntityType->type());
}

function <<test.Test>> meta::pure::functions::meta::tests::type::testTypeFromEnumVal():Boolean[1]
{
    assertEquals(GeographicEntityType, GeographicEntityType.CITY->type());
}

function <<test.Test>> meta::pure::functions::meta::tests::type::testTypeWithGenerics():Boolean[1]
{
    assertEquals(List, ^List<String>(values=['a', 'b', 'c'])->type());
}
