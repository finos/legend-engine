// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;

function <<test.Test>> meta::pure::functions::collection::tests::range::testRange():Boolean[1]
{
    assertEquals([0, 1, 2, 3, 4], range(0, 5, 1));
    assertEquals([0, 1, 2, 3, 4], range(0, 5));
    assertEquals([0, 1, 2, 3, 4], range(5));

    assertEquals([0, 1, 2, 3, 4], [0:5:1]);
    assertEquals([0, 1, 2, 3, 4], [0:5]);
    assertEquals([0, 1, 2, 3, 4], [:5]);
}

function <<test.Test>> meta::pure::functions::collection::tests::range::testRangeWithStep():Boolean[1]
{
    assertEquals([1, 3, 5], range(1, 6, 2));
    assertEquals([1, 4], range(1, 6, 3));
    assertEquals([1, 5], range(1, 6, 4));
    assertEquals([1], range(1, 6, 5));
    assertEquals([1], range(1, 6, 6));

    assertEquals([1, 3, 5], [1:6:2]);
    assertEquals([1, 4], [1:6:3]);
    assertEquals([1, 5], [1:6:4]);
    assertEquals([1], [1:6:5]);
    assertEquals([1], [1:6:6]);
}

function <<test.Test>> meta::pure::functions::collection::tests::range::testRangeWithVariables():Boolean[1]
{
    let start = 1;
    let stop = 5;
    let step = 2;
    assertEquals([1, 3], range($start, $stop, $step));
    assertEquals([1, 3], [$start:$stop:$step]);
}

function <<test.Test>> meta::pure::functions::collection::tests::range::testReverseRange():Boolean[1]
{
    assertEquals([5, 4, 3, 2], [5:1:-1]);
    assertEquals([5, 4, 3, 2], range(5, 1, -1));

    let step = -1;
    assertEquals([5, 4, 3, 2], [5:1:$step]);
}

function <<test.Test>> meta::pure::functions::collection::tests::range::testReverseRangeWithStep():Boolean[1]
{
    assertEquals([5, 3], [5:1:-2]);
    assertEquals([5, 2], [5:1:-3]);
    assertEquals([5], [5:1:-4]);

    assertEquals([5, 3], range(5, 1, -2));
    assertEquals([5, 2], range(5, 1, -3));
    assertEquals([5], range(5, 1, -4));

    let step1 = -2;
    assertEquals([5, 3], [5:1:$step1]);
    let step2 = -3;
    assertEquals([5, 2], [5:1:$step2]);
    let step3 = -4;
    assertEquals([5], [5:1:$step3]);
}

function <<test.Test>> meta::pure::functions::collection::tests::range::testReverseRangeWithPositiveStep():Boolean[1]
{
    assertEquals([],range(5, 1, 1));
    assertEquals([],range(5, 1));
    assertEquals([],[5:1:1]);
    assertEquals([],[5:1]);
}

function <<test.Test>> meta::pure::functions::collection::tests::range::testRangeWithStartStopEqual():Boolean[1]
{
    assertEquals([],range(5, 5));
    assertEquals([],[5:5]);
}
