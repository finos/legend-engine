// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;
import meta::pure::functions::tests::model::*;
import meta::pure::functions::string::tests::toString::*;

function <<test.Test>> meta::pure::functions::string::tests::toString::testIntegerToString():Boolean[1]
{
    assertEq('1', 1->toString());
    assertEq('-1', toString(-1));
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testFloatToString():Boolean[1]
{
    assertEq('3.14', 3.14->toString());
    assertEq('3.14159', 3.14159->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testFloatToStringWithExcessTrailingZeros():Boolean[1]
{
    assertEq('17.0', 17.0->toString());
    assertEq('17.0', 17.000->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testFloatToStringWithNoLeadingZero():Boolean[1]
{
    assertEq('0.01', 0.01->toString());
    assertEq('0.01', .01->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testFloatToStringWithPositiveExponent():Boolean[1]
{
    assertEq('134210000.0', 134.21e6->toString());
    assertEq('134210000.0', 1.3421e8->toString());
    assertEq('134210000.0', 0.13421e9->toString());
    assertEq('134210000.0', 134210000.0->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testFloatToStringWithNegativeExponent():Boolean[1]
{
    assertEq('0.000000013421', 134.21e-10->toString());
    assertEq('0.000000013421', 1.3421e-8->toString());
    assertEq('0.000000013421', 0.13421e-7->toString());
    assertEq('0.000000013421', 0.000000013421->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testBooleanToString():Boolean[1]
{
    assertEq('true', true->toString());
    assertEq('false', false->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testStringToString():Boolean[1]
{
    assertEq('the quick brown fox jumps over the lazy dog', 'the quick brown fox jumps over the lazy dog'->toString());
    assertEq('', ''->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testSimpleDateToString():Boolean[1]
{
    assertEq('2014-01-02T01:54:27.352+0000', %2014-01-01T20:54:27.352-0500->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testDateTimeWithTimezoneToString():Boolean[1]
{
    assertEq('2014-01-01T00:00:00.0000+0000', %2014-01-01T00:00:00.0000+0000->toString());
    assertEq('2014-01-01T00:00:00.0000+0000', %2014-01-01T00:00:00.0000-0000->toString());

    assertEq('2014-01-01T00:00:00.000+0000', %2014-01-01T00:00:00.000+0000->toString());
    assertEq('2014-01-01T00:00:00.000+0000', %2014-01-01T00:00:00.000-0000->toString());

    assertEq('2014-01-01T00:00:00.0+0000', %2014-1-1T0:00:00.0+0000->toString());
    assertEq('2014-01-01T00:00:00.0+0000', %2014-1-1T0:00:00.0-0000->toString());

    assertEq('2014-01-01T00:00+0000', %2014-1-1T0:00+0000->toString());
    assertEq('2014-01-01T00:00+0000', %2014-1-1T0:00-0000->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testDateTimeToString():Boolean[1]
{
    assertEq('2014-01-01T00:00:00.000+0000', %2014-01-01T00:00:00.000->toString());
    assertEq('2014-01-01T00:00:00.00+0000', %2014-01-01T00:00:00.00->toString());
    assertEq('2014-01-01T00:00:00.0+0000', %2014-1-1T0:00:00.0->toString());
    assertEq('2014-01-01T00:00:00+0000', %2014-1-1T0:00:00->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testDateToString():Boolean[1]
{
    assertEq('2014-01-01', %2014-01-01->toString());
    assertEq('2014-01-01', %2014-1-1->toString());

    assertEq('2014-01', %2014-01->toString());
    assertEq('2014-01', %2014-1->toString());

    assertEq('2014', %2014->toString());
    assertEq('2014', %2014->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testListToString():Boolean[1]
{
    assertEq('[a, b, c]', ^List<String>(values=['a', 'b', 'c'])->toString());
    assertEq('[[a, b], c]', ^List<Any>(values=[^List<String>(values=['a', 'b']), 'c'])->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testPairToString():Boolean[1]
{
    assertEq('<a, b>', ^Pair<String, String>(first='a', second='b')->toString());
    assertEq('<a, 1>', ^Pair<String, Integer>(first='a', second=1)->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testPairCollectionToString():Boolean[1]
{
    let pairs = [^Pair<String, String>(first='a', second='b'),^Pair<String, Integer>(first='a', second=1)];
    assertEq('(<a, b>,<a, 1>)', $pairs->makeString());

}

function <<test.Test>> meta::pure::functions::string::tests::toString::testPersonToString():Boolean[1]
{
    let str = ^Person(firstName='Pierre', lastName='Doe')->toString();
    print($str);
    assert($str->startsWith('Anonymous_') || $str->startsWith('@_'));
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testClassToString():Boolean[1]
{
    assertEq('Person', Person->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString::testEnumerationToString():Boolean[1]
{
    assertEq('GeographicEntityType', GeographicEntityType->toString());
    assertEq('CITY', GeographicEntityType.CITY->toString());
}

function <<test.Test>> meta::pure::functions::string::tests::toString1::testComplexClassToString():Boolean[1]
{
    assertEq('// Warning: Good for gin -- Sad times no tonic', ^ClassWithComplexToString(errorType=ErrorType.NoTonic,errorMessage='Sad times')->toString());
}


Enum  meta::pure::functions::string::tests::toString::ErrorType {
   NoGin,
   NoTonic
}

Class meta::pure::functions::string::tests::toString::ClassWithComplexToString {
   errorType : ErrorType[1];
   errorMessage : String[1];
   toString() {format('// Warning: %s -- %s %s', [if($this.errorType->equal(ErrorType.NoGin),
                                              |'No Gin - disaster',
                                              |'Good for gin'),
                                             $this.errorMessage,
                                             if($this.errorType->equal(ErrorType.NoTonic),
                                              |'no tonic',
                                              |'good for tonic')
                                            ])}:String[1];
}