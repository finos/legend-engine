// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;
import meta::pure::functions::tests::model::*;

function <<test.Test>> meta::pure::functions::meta::tests::openVariableValues::testOpenVariableValuesForLambda():Boolean[1]
{
    let a = [1,2,5];
    let f = {|1+$a->sum()};
    let res = meta::pure::functions::meta::tests::openVariableValues::nestedFunction($f);
    assertEquals([1,2,5], $res->get('a').values);
}

function <<test.Test>> meta::pure::functions::meta::tests::openVariableValues::testOpenVariableValuesForLambdaSingleString():Boolean[1]
{
    let a = 'ok';
    let f = {|'a'+$a};
    let res = meta::pure::functions::meta::tests::openVariableValues::nestedFunction($f);
    assertEquals('ok', $res->get('a').values);
}

function meta::pure::functions::meta::tests::openVariableValues::nestedFunction(f : Function<Any>[1]):Map<String,List<Any>>[1]
{
    $f->openVariableValues();
}

function <<test.Test>> meta::pure::functions::meta::tests::openVariableValues::testOpenVariableValuesForFunction():Boolean[1]
{
   assertEmpty(meta::pure::functions::meta::tests::openVariableValues::nestedFunction_Function_1__Map_1_->openVariableValues()->keys());
}

function <<test.Test>> meta::pure::functions::meta::tests::openVariableValues::testOpenVariableValuesForLambdaNoOpenVariables():Boolean[1]
{
    let f = {|1};
    let res = meta::pure::functions::meta::tests::openVariableValues::nestedFunction($f);
    assertEmpty($res->keys());
}
