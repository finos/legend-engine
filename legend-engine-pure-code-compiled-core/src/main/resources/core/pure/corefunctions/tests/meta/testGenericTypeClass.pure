// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;
import meta::pure::functions::tests::model::*;

function <<test.Test>> meta::pure::functions::meta::tests::genericTypeClass::testGenericTypeClassPrimitive():Boolean[1]
{
    assertEmpty(1->genericType()->genericTypeClass());
    assertEmpty('the quick brown fox jumps over the lazy dog'->genericType()->genericTypeClass());
    assertEmpty(true->genericType()->genericTypeClass());
}

function <<test.Test>> meta::pure::functions::meta::tests::genericTypeClass::testGenericTypeClassInstance():Boolean[1]
{
    assertIs(Person, ^Person(firstName='Pierre', lastName='Doe')->genericType()->genericTypeClass());
}

function <<test.Test>> meta::pure::functions::meta::tests::genericTypeClass::testGenericTypeClassFromClass():Boolean[1]
{
    assertIs(Class, Person->genericType()->genericTypeClass());
}

function <<test.Test>> meta::pure::functions::meta::tests::genericTypeClass::testGenericTypeClassFromEnum():Boolean[1]
{
    assertIs(Enumeration, GeographicEntityType->genericType()->genericTypeClass());
}

function <<test.Test>> meta::pure::functions::meta::tests::genericTypeClass::testGenericTypeClassFromEnumVal():Boolean[1]
{
    assertEmpty(GeographicEntityType.CITY->genericType()->genericTypeClass());
}

function <<test.Test>> meta::pure::functions::meta::tests::genericTypeClass::testGenericTypeClassWithGenerics():Boolean[1]
{
    assertIs(List, ^List<String>(values=['a', 'b', 'c'])->genericType()->genericTypeClass());
}
