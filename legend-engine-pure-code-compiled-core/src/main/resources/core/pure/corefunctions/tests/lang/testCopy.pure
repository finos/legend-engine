// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;
import meta::pure::functions::tests::model::*;

// Test instance copy

function <<test.Test>> meta::pure::functions::lang::tests::copy::testFlatCopyToOne():Boolean[1]
{
    let pierre = ^Person(firstName='Pierre', lastName='Doe');
    assertEquals('Pierre', $pierre.firstName);
    assertEquals('Doe', $pierre.lastName);

    let david = ^$pierre(firstName='David');
    assertEquals('David', $david.firstName);
    assertEquals('Doe', $david.lastName);

    // Verify that the original object did not change
    assertEquals('Pierre', $pierre.firstName);
}

function <<test.Test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::lang::tests::copy::testDeepCopyToOne():Boolean[1]
{
    let hoboken = ^Address(name='Hoboken, NJ', type=GeographicEntityType.CITY);
    assertEquals('Hoboken, NJ', $hoboken.name);

    let nyc = ^Address(name='New York, NY', type=GeographicEntityType.CITY);

    let firmX = ^Firm(legalName='FirmX', address=$nyc);
    assertEquals('FirmX', $firmX.legalName);
    assertEquals($nyc, $firmX.address);

    let pierre = ^Person(firstName='Pierre', lastName='Doe', address=$hoboken, firm=$firmX);
    assertEquals('Pierre', $pierre.firstName);
    assertEquals('Doe', $pierre.lastName);
    assertEquals($hoboken, $pierre.address);
    assertEquals($firmX, $pierre.firm);

    let pierre2 = ^$pierre(firstName='David', address.name='Somewhere', firm.employees=[], firm.legalName='FirmX');
    assertEquals('David', $pierre2.firstName);
    assertEquals('Doe', $pierre2.lastName);
    assertIsNot($hoboken, $pierre2.address->toOne());
    assertEquals('Somewhere', $pierre2.address.name);
    assertIsNot($firmX, $pierre2.firm->toOne());
    assertEquals('FirmX', $pierre2.firm.legalName);
    assertEquals($nyc, $pierre2.firm.address);

    // Verify that the original objects did not change
    assertEquals('Hoboken, NJ', $hoboken.name);
    assertEquals('Hoboken, NJ', $pierre.address.name);
    assertEquals('FirmX', $firmX.legalName);
    assertEquals('FirmX', $pierre.firm.legalName);
    assertEquals($nyc, $firmX.address);
    assertEquals($nyc, $pierre.firm.address);
}

function <<test.Test>> meta::pure::functions::lang::tests::copy::testFlatCopyObjectToManyAdd():Boolean[1]
{
    let nj = ^Location(place='New Jersey', type=GeographicEntityType.REGION);
    let ny = ^Location(place='New York', type=GeographicEntityType.REGION);

    let pierre = ^Person(firstName='Pierre', lastName='Doe', locations=$nj);
    assertEquals('Pierre', $pierre.firstName);
    assertEquals('Doe', $pierre.lastName);
    assertSize($pierre.locations, 1);
    assertIs($nj, $pierre.locations->at(0));

    let pierre2 = ^$pierre(locations += $ny);
    assertEquals('Pierre', $pierre2.firstName);
    assertEquals('Doe', $pierre2.lastName);
    assertSize($pierre2.locations, 2);
    assertIs($nj, $pierre2.locations->at(0));
    assertIs($ny, $pierre2.locations->at(1));

    // Verify that the original object did not change
    assertEquals('Pierre', $pierre.firstName);
    assertEquals('Doe', $pierre.lastName);
    assertSize($pierre.locations, 1);
    assertIs($nj, $pierre.locations->at(0));
}

function <<test.Test>> meta::pure::functions::lang::tests::copy::testFlatCopyPrimitiveToManyAdd():Boolean[1]
{
    let person = ^Person(firstName='Daniel', lastName='Benedict', otherNames=['DN', 'Danie_Ben']);
    assertEquals('Daniel', $person.firstName);
    assertEquals('Benedict', $person.lastName);
    assertSize($person.otherNames, 2);
    assertEq('DN', $person.otherNames->at(0));
    assertEq('Danie_Ben', $person.otherNames->at(1));

    let person2 = ^$person(otherNames += 'Dani_Benedict');
    assertEquals('Daniel', $person2.firstName);
    assertEquals('Benedict', $person2.lastName);
    assertSize($person2.otherNames, 3);
    assertEq('DN', $person2.otherNames->at(0));
    assertEq('Danie_Ben', $person2.otherNames->at(1));
    assertEq('Dani_Benedict', $person2.otherNames->at(2));

    // Verify that the original object did not change
    assertEquals('Daniel', $person.firstName);
    assertEquals('Benedict', $person.lastName);
    assertSize($person.otherNames, 2);
    assertEq('DN', $person.otherNames->at(0));
    assertEq('Danie_Ben', $person.otherNames->at(1));
}

function <<test.Test>> meta::pure::functions::lang::tests::copy::testFlatCopyPrimitiveToManyReplace():Boolean[1]
{
    let person = ^Person(firstName='Daniel', lastName='Benedict', otherNames=['DN', 'Danie_Ben']);
    assertEquals('Daniel', $person.firstName);
    assertEquals('Benedict', $person.lastName);
    assertSize($person.otherNames, 2);
    assertEq('DN', $person.otherNames->at(0));
    assertEq('Danie_Ben', $person.otherNames->at(1));

    let person2 = ^$person(otherNames = ['Danie_Ben', 'Dani_Benedict', 'Sloth', 'Entropy']);
    assertEquals('Daniel', $person2.firstName);
    assertEquals('Benedict', $person2.lastName);
    assertSize($person2.otherNames, 4);
    assertEq('Danie_Ben', $person2.otherNames->at(0));
    assertEq('Dani_Benedict', $person2.otherNames->at(1));
    assertEq('Sloth', $person2.otherNames->at(2));
    assertEq('Entropy', $person2.otherNames->at(3));

    let person3 = ^$person(otherNames = $person.otherNames->init());
    assertEquals('Daniel', $person3.firstName);
    assertEquals('Benedict', $person3.lastName);
    assertSize($person3.otherNames, 1);
    assertEq('DN', $person3.otherNames->at(0));

    let person4 = ^$person(otherNames = $person.otherNames->init()->init());
    assertEquals('Daniel', $person4.firstName);
    assertEquals('Benedict', $person4.lastName);
    assertSize($person4.otherNames, 0);

    // Verify that the original object did not change
    assertEquals('Daniel', $person.firstName);
    assertEquals('Benedict', $person.lastName);
    assertSize($person.otherNames, 2);
    assertEq('DN', $person.otherNames->at(0));
    assertEq('Danie_Ben', $person.otherNames->at(1));
}

function <<test.Test>> meta::pure::functions::lang::tests::copy::testCopyWithIdVariable():Boolean[1]
{
    let firm = ^Firm(legalName='Firm');
    assertEquals('Firm', $firm.legalName);

    let id = '1234';
    let firm1234 = ^$firm(legalName=$id);
    assertEquals($id, $firm1234.legalName);
}

function <<test.Test>>   meta::pure::functions::lang::tests::copy::testCopyWithAssociation():Boolean[1]
{
    let pierre = ^Person(firstName='Pierre', lastName='Doe', firm=^Firm(legalName='FirmX'));
    assertEquals('Pierre', $pierre.firstName);
    assertEquals('Doe', $pierre.lastName);

    let firmX = $pierre.firm->toOne();
    assertEquals('FirmX', $firmX.legalName);

    assertIs($firmX, $pierre.firm->toOne());
    assertEquals($pierre, $firmX.employees);

    let bob = ^$pierre(firstName='Bob', lastName='Roe');
    assertEquals('Bob', $bob.firstName);
    assertEquals('Roe', $bob.lastName);

    assertIs($firmX, $bob.firm->toOne());
    assertSameElements([$bob, $pierre], $firmX.employees);
}

function <<test.Test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::lang::tests::copy::testDeepCopyWithAssociation1():Boolean[1]
{
    let pierre = ^Person(firstName='Pierre', lastName='Doe', firm=^Firm(legalName='FirmX', address=^Address(name='Jersey City, NJ', type=GeographicEntityType.CITY)));
    assertEquals('Pierre', $pierre.firstName);
    assertEquals('Doe', $pierre.lastName);

    let gsJC = $pierre.firm->toOne();
    assertEquals('FirmX', $gsJC.legalName);
    assertEquals('Jersey City, NJ', $gsJC.address->toOne().name);

    assertIs($gsJC, $pierre.firm->toOne());
    assertEquals($pierre, $gsJC.employees);

    let bob = ^$pierre(firstName='Bob', lastName='Roe', firm.employees=[], firm.address=^Address(name='New York, NY', type=GeographicEntityType.CITY));
    assertEquals('Bob', $bob.firstName);
    assertEquals('Roe', $bob.lastName);

    let gsNYC = $bob.firm->toOne();
    assertEquals('FirmX', $gsNYC.legalName);
    assertEquals('New York, NY', $gsNYC.address->toOne().name);

    assertIs($gsNYC, $bob.firm->toOne());
    assertIsNot($gsJC, $bob.firm->toOne());
    assertSameElements($pierre, $gsJC.employees);
    assertSameElements($bob, $gsNYC.employees);
}

function <<test.Test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::lang::tests::copy::testDeepCopyWithAssociation2():Boolean[1]
{
    let firmX = ^Firm(legalName='FirmX');
    let tech = ^Division(name='Technology', firm=$firmX);
    let tech1 = ^Department(name='Tech1', parent=$tech, firm=$firmX);

    assertInstanceOf($tech1, Department);
    assertEquals('Tech1', $tech1.name);
    assertIs($firmX, $tech1.firm);
    assertIs($tech, $tech1.parent->toOne());

    assertSameElements([$tech, $tech1], $firmX.organizations);
    assertSameElements($tech1, $tech.children);

    let tech2 = ^$tech1(name='Tech2', parent.children=[], parent.name='TechParent1');
    assertInstanceOf($tech2, Department);
    assertEquals('Tech2', $tech2.name);
    assertIs($firmX, $tech2.firm->toOne());
    assertIsNot($tech, $tech2.parent->toOne());

    let p = $tech2.parent->toOne();
    assertIs($p, $tech2.parent->toOne());
    assertEquals('TechParent1', $p.name);
    assertIs($firmX, $p.firm);

    assertSameElements([$tech, $tech1, $p, $tech2], $firmX.organizations);
    assertSameElements($tech1, $tech.children);
    assertSameElements($tech2, $p.children);
}

// Test function definition copy

function <<test.Test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::lang::tests::copy::testFunctionDefinitionCopy():Boolean[1]
{
    let f1 = 'meta::pure::functions::lang::tests::copy::testFunctionDefinitionCopy__Boolean_1_'->pathToElement();
    let type = $f1->genericType();
    assertIs(ConcreteFunctionDefinition, $type.rawType->toOne());

    let f2 = ^$f1();
    assertIsNot($f1, $f2);
    assertEquals($type.rawType, $f2->genericType().rawType);
    assertEquals($type.typeArguments->size(), $f2->genericType().typeArguments->size());
    assertEmpty($type->properties()->filter(p | $p->eval($f1) != $p->eval($f2)));
}

function <<test.Test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::lang::tests::copy::testFunctionDefinitionWithInstanceCopy():Boolean[1]
{
    let f1 = 'meta::pure::functions::lang::tests::copy::testFlatCopyToOne__Boolean_1_'->pathToElement();
    let type = $f1->genericType();
    assertIs(ConcreteFunctionDefinition, $type.rawType->toOne());

    let f2 = ^$f1();
    assertIsNot($f1, $f2);
    assertEquals($type.rawType, $f2->genericType().rawType);
    assertEquals($type.typeArguments->size(), $f2->genericType().typeArguments->size());
    assertEmpty($type->properties()->filter(p | $p->eval($f1) != $p->eval($f2)));
}

function <<test.Test>> meta::pure::functions::lang::tests::copy::testCopySubClass():Boolean[1]
{
    let address = ^Address(name='Somewhere', type=GeographicEntityType.CITY);
    let upCastAddress = $address->cast(@GeographicEntity);
    assertIs($address, $upCastAddress);

    let upCastCopy = ^$upCastAddress(type=GeographicEntityType.REGION);
    assertInstanceOf($upCastCopy, Address);
    assertEquals('Somewhere', $upCastCopy->cast(@Address).name);
    assertIs(GeographicEntityType.REGION, $upCastCopy.type);
}
