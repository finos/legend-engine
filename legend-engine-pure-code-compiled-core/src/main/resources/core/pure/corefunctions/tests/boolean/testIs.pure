// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Tests for is(Any[1], Any[1]):Boolean[1]

import meta::pure::functions::boolean::tests::equalitymodel::*;
import meta::pure::profiles::*;

function <<test.Test>> meta::pure::functions::boolean::tests::testIsPrimitive():Boolean[1]
{
    let x = 6;
    assert(is($x, $x));
    assertFalse(is($x, 7));

    let y = 'the quick brown fox jumps over the lazy dog';
    assert(is($y, $y));
    assertFalse(is($y, 'the lazy dog is jumped over by the quick brown fox'));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testIsEnum():Boolean[1]
{
    assert(is(TestEnum1.FIRST, TestEnum1.FIRST));
    assert(is(TestEnum1.SECOND, TestEnum1.SECOND));

    assertFalse(is(TestEnum1.FIRST, TestEnum1.SECOND));
    assertFalse(is(TestEnum1.SECOND, TestEnum1.FIRST));

    assertFalse(is(TestEnum1.FIRST, TestEnum2.FIRST));
    assertFalse(is(TestEnum1.SECOND, TestEnum2.SECOND));

    assertFalse(is(TestEnum1.FIRST, 1));
    assertFalse(is('a', TestEnum1.SECOND));

    let x = TestEnum1.FIRST;
    assert(is($x, TestEnum1.FIRST));
    assertFalse(is($x, TestEnum1.SECOND));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testIsNonPrimitive():Boolean[1]
{
    let side1 = ^SideClass(stringId='firstSide', intId=1);
    let side2 = ^SideClass(stringId='firstSide', intId=1);
    let side3 = ^SideClass(stringId='secondSide', intId=1);
    let side4 = ^SideClass(stringId='secondSide', intId=2);

    assert(is($side1, $side1));
    assertFalse(is($side1, $side2));
    assertFalse(is($side2, $side1));
    assertFalse(is($side1, $side3));
    assertFalse(is($side3, $side1));
    assertFalse(is($side1, $side4));

    let left11 = ^LeftClass(name='left', left=1, sides=[$side1, $side3]);
    let left12 = ^LeftClass(name='left', left=1, sides=[$side2, $side3]);
    let left21 = ^LeftClass(name='left', left=2, sides=[$side1]);

    assert(is($left11, $left11));
    assertFalse(is($left11, $left12));
    assertFalse(is($left12, $left11));
    assertFalse(is($left11, $left21));
    assertFalse(is($left21, $left11));

    let right11 = ^RightClass(name='right1', right=1, sides=[$side1]);
    let right12 = ^RightClass(name='right1', right=2, sides=[$side1]);
    let right21 = ^RightClass(name='right2', right=1, sides=[$side1]);
    let right22 = ^RightClass(name='right2', right=1, sides=[$side2]);
    let right23 = ^RightClass(name='right2', right=1, sides=[$side3]);

    assert(is($right11, $right11));
    assertFalse(is($right11, $right12));
    assertFalse(is($right12, $right11));
    assertFalse(is($right11, $right21));
    assertFalse(is($right21, $right22));
    assertFalse(is($right21, $right23));

    assertFalse(is($left11, $right11));

    let bot11 = ^BottomClass(name='left', left=1, right=1, sides=[$side1, $side3]);
    let bot12 = ^BottomClass(name='left', left=1, right=2, sides=[$side2, $side3]);
    let bot21 = ^BottomClass(name='left', left=2, right=1, sides=[$side1, $side3]);

    assert(is($bot11, $bot11));
    assertFalse(is($bot11, $bot12));
    assertFalse(is($bot11, $bot21));

    assertFalse(is($left11, $bot11));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testIsNativeFunctions():Boolean[1]
{
    assert(is(meta::pure::functions::string::toString_Any_1__String_1_, pathToElement('meta::pure::functions::string::toString_Any_1__String_1_')));
}

function <<test.Test, test.ToFix>> meta::pure::functions::boolean::tests::testIsConcreteFunctionDefinitions():Boolean[1]
{
    assert(is(meta::pure::functions::boolean::greaterThan_Number_1__Number_1__Boolean_1_, pathToElement('meta::pure::functions::boolean::greaterThan_Number_1__Number_1__Boolean_1_')));
}
