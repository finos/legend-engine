// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;
import meta::pure::functions::tests::model::*;
import meta::pure::functions::collection::tests::contains::*;

function <<test.Test>> meta::pure::functions::collection::tests::contains::testContainsPrimitive():Boolean[1]
{
    let col = [1, 2, 5, 2, 'a', true, %2014-02-01, 'c'];
    assert($col->contains(1));
    assert($col->contains(2));
    assert($col->contains(5));
    assert($col->contains('a'));
    assert($col->contains(true));
    assert($col->contains(%2014-02-01));
    assert($col->contains('c'));

    assertFalse($col->contains(-5));
    assertFalse($col->contains(%2014-02-02));
    assertFalse($col->contains('the quick brown fox'));
    assertFalse($col->contains(false));
}

function <<test.Test>> meta::pure::functions::collection::tests::contains::testContainsNonPrimitive():Boolean[1]
{
    let f1 = ^Firm(legalName='f1');
    let f2 = ^Firm(legalName='f2');
    let col = [$f1, $f2];
    assert($col->contains($f1));
    assert($col->contains(^Firm(legalName='f1')));
    assert($col->contains($f2));
    assert($col->contains(^Firm(legalName='f2')));

    assertFalse($col->contains(3));
    assertFalse($col->contains(^Firm(legalName='f3')));
}


Class meta::pure::functions::collection::tests::contains::ClassWithoutEquality
{
   name : String[1];
}

function meta::pure::functions::collection::tests::contains::comparator(a:ClassWithoutEquality[1], b:ClassWithoutEquality[1]):Boolean[1]
{
   $a.name == $b.name
}


function <<test.Test>> meta::pure::functions::collection::tests::contains::testContainsWithFunction():Boolean[1]
{
    let f1 = ^ClassWithoutEquality(name='f1');
    let f2 = ^ClassWithoutEquality(name='f2');
    let f1Prime = ^ClassWithoutEquality(name='f1');
    
    let col = [$f1, $f2];
    assert($col->contains($f1Prime, comparator_ClassWithoutEquality_1__ClassWithoutEquality_1__Boolean_1_));
    assert($col->contains(^ClassWithoutEquality(name='f1'), comparator_ClassWithoutEquality_1__ClassWithoutEquality_1__Boolean_1_));
    assert($col->contains($f2, comparator_ClassWithoutEquality_1__ClassWithoutEquality_1__Boolean_1_));
    assert($col->contains(^ClassWithoutEquality(name='f2'), comparator_ClassWithoutEquality_1__ClassWithoutEquality_1__Boolean_1_));

    assertFalse($col->contains(^ClassWithoutEquality(name='f3'), comparator_ClassWithoutEquality_1__ClassWithoutEquality_1__Boolean_1_));
}
