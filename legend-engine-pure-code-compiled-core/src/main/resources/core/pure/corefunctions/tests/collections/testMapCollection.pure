// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::tests::model::*;

function <<test.Test>> meta::pure::functions::collection::tests::mapcollection::testMapNew():Boolean[1]
{
   let m = ^Map<String,String>()->put('1','2');
   assertEquals('2', $m->get('1'));
}

function <<test.Test>> meta::pure::functions::collection::tests::mapcollection::testMapBuilder():Boolean[1]
{
   let m = newMap([pair(1,'_1'), pair(2,'_2'), pair(3, '_3')]);
   assertEquals(['_1','_2','_3'], $m->values()->sort());

   let m2 = newMap([pair(1,'_1'), pair(1,'_2'), pair(3, '_3')]);
   assertEquals(['_2','_3'], $m2->values()->sort());
}

function <<test.Test>> meta::pure::functions::collection::tests::mapcollection::testMapKeyValues():Boolean[1]
{
   let m = newMap([pair(1,'_1'), pair(2,'_2'), pair(3, '_3')]);
   assertEquals(['1 _1','2 _2','3 _3'], $m->keyValues()->map(p|$p.first->toString()+' '+$p.second)->sort());
}

function <<test.Test>> meta::pure::functions::collection::tests::mapcollection::testMapPut():Boolean[1]
{
   let m = newMap(pair(1,'ok'))->put(2, 'test');
   assertEquals(['ok','test'], $m->values()->sort());   

   let m2 = newMap(pair(1,'ok'))->put(2, 'test')->put(1, 'omg');
   assertEquals(['omg', 'test'], $m2->values()->sort());   
}

function <<test.Test>> meta::pure::functions::collection::tests::mapcollection::testMapPutAll():Boolean[1]
{
   let m = newMap(pair(1,'_1'));
   let m2 = $m->putAll([pair(2,'_2'), pair(3, '_3')]);
   let m3 = $m2->putAll(pair(4,'_4'));
   assertEquals(['1 _1'], $m->keyValues()->map(p|$p.first->toString()+' '+$p.second)->sort());
   assertEquals(['1 _1','2 _2','3 _3'], $m2->keyValues()->map(p|$p.first->toString()+' '+$p.second)->sort());
   assertEquals(['1 _1','2 _2','3 _3','4 _4'], $m3->keyValues()->map(p|$p.first->toString()+' '+$p.second)->sort());
}

function <<test.Test>> meta::pure::functions::collection::tests::mapcollection::testMapPutAllWithMap():Boolean[1]
{
   let m = newMap(pair(1,'_1'));
   let m2 = newMap([pair(2,'_2'), pair(3, '_3')]);
   let m3 = $m->putAll($m2);
   assertEquals(['1 _1'], $m->keyValues()->map(p|$p.first->toString()+' '+$p.second)->sort());
   assertEquals(['2 _2','3 _3'], $m2->keyValues()->map(p|$p.first->toString()+' '+$p.second)->sort());
   assertEquals(['1 _1','2 _2','3 _3'], $m3->keyValues()->map(p|$p.first->toString()+' '+$p.second)->sort());
}

function <<test.Test>> meta::pure::functions::collection::tests::mapcollection::testMapImmutablePut():Boolean[1]
{
   let m = newMap(pair(1,'ok'))->put(2, 'test');
   assertEquals(['ok','test'], $m->values()->sort());

   let m2 = $m->put(3, 'omg');
   assertEquals(['ok','test'], $m->values()->sort());
   assertEquals(['ok', 'omg', 'test'], $m2->values()->sort());
}

function <<test.Test>> meta::pure::functions::collection::tests::mapcollection::testMapGet():Boolean[1]
{
   let m = newMap(pair(1,'ok'))->put(2, 'test');
   assertEquals('ok', $m->get(1));   
   assertEquals('test', $m->get(2));   

   let m2 = newMap(pair(1,'ok'))->put(2, 'test')->put(1, 'omg');
   assertEquals('omg', $m2->get(1));   
   assertEquals('test', $m2->get(2));   
}

