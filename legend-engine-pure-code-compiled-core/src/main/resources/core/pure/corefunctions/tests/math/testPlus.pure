// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;

function <<test.Test>> meta::pure::functions::math::tests::plus::testSimplePlus():Boolean[1]
{
    assertEq(3, 1 + 2);
}

function <<test.Test>> meta::pure::functions::math::tests::plus::testComplexPlus():Boolean[1]
{
    assertEq(19, 3 + (4 + 5) + 7);
}

function <<test.Test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::math::tests::plus::testLargePlus():Boolean[1]
{
    assertEq(9223372036854775826, 9223372036854775807 + 3 + (4 + 5) + 7);
    assertEq(18446744073709551621, 4 + 9223372036854775807 + 9223372036854775807 + 3);
}

function <<test.Test>> meta::pure::functions::math::tests::plus::testNegativePlus():Boolean[1]
{
    assertEq(-1, 1 + -2);
}

function <<test.Test>> meta::pure::functions::math::tests::plus::testPlusMany():Boolean[1]
{
    assertEq(19, 3 + 4 + 5 + 7);
}

function <<test.Test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::math::tests::plus::testLargePlusMany():Boolean[1]
{
    assertEq(9223372036854775826, 9223372036854775807 + 3 + 4 + 5 + 7);
}

function <<test.Test>> meta::pure::functions::math::tests::plus::testSinglePlus():Boolean[1]
{
    assertEq(1, +1);
    assertEq(1, ++1);
    assertEq(1, +++1);
}

function <<test.Test>> meta::pure::functions::math::tests::plus::testSinglePlusType():Boolean[1]
{
    assertIs(Integer, type(+1)->toOne());
    assertIs(Float, type(+1.0)->toOne());
}

function <<test.Test>> meta::pure::functions::math::tests::plus::testFloatPlus():Boolean[1]
{
    assertEqWithinTolerance(1.7, 0.9 + 0.8, 0.01);
    assertEqWithinTolerance(1.7, 1 + 0.7, 0.01);
    assertEqWithinTolerance(1.7, 2 + -0.3, 0.01);
}

function <<test.Test>> meta::pure::functions::math::tests::plus::testSumInteger():Boolean[1]
{
    assertEq(32, [15,13,2,1,1]->sum());
}

function <<test.Test>> meta::pure::functions::math::tests::plus::testSumFloat():Boolean[1]
{
    assertEq(32.0, [12.5,13.5,4.0,1.5,0.5]->sum());
}

function <<test.Test>> meta::pure::functions::math::tests::plus::testSumNumber():Boolean[1]
{
    assertEq(32.0, [15,13,2.0,1,1.0]->sum());
}

function <<test.Test>> meta::pure::functions::math::tests::plus::testDecimalPlus():Boolean[1]
{
    assertEq(6.0d, [1.0d, 2.0d, 3.0d]->plus());
    assertEq(6.0d, [1.0d, 2.0, 3]->plus());
    assertEq(-1.0d, -4.0d+2.0d+1);
}
