// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessWithoutMessage():Any[*]
{
   assert(true);
   assert(2 == 2);
   assert((1 + 2) == 3);
}

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessWithFormattedMessage():Any[*]
{
   assert(true, 'Test message: %s', [true]);
   assert(2 == 2, 'Test message: %s', [true]);
   assert((1 + 2) == 3, 'Test message: %s', [true]);
}

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertContains():Any[*]
{
    assertContains([1, 2, 5, 2, 'a', true, %2014-02-01, 'c'], true);
    assertContains([1, 2, 5, 2, 'a', true, %2014-02-01, 'c'], %2014-02-01);
}

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertEmpty():Any[*]
{
   assertEmpty([]);
   assertEmpty([1, 2, 3]->filter(x | $x == 5));
}


function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertWithToleranceExactMatch():Any[*]
{
   
        assertEqWithinTolerance(1, 1, 0);
        assertEqWithinTolerance(1, 1, 0.0);
        assertEqWithinTolerance(1, 1.0, 0);
        assertEqWithinTolerance(1, 1.0, 0.0);
        assertEqWithinTolerance(1.0, 1, 0);
        assertEqWithinTolerance(1.0, 1, 0.0);
        assertEqWithinTolerance(1.0, 1.0, 0);
        assertEqWithinTolerance(1.0, 1.0, 0.0);

        assertEqWithinTolerance(-1, -1, 0);
        assertEqWithinTolerance(-1, -1, 0.0);
        assertEqWithinTolerance(-1, -1.0, 0);
        assertEqWithinTolerance(-1, -1.0, 0.0);
        assertEqWithinTolerance(-1.0, -1, 0);
        assertEqWithinTolerance(-1.0, -1, 0.0);
        assertEqWithinTolerance(-1.0, -1.0, 0);
        assertEqWithinTolerance(-1.0, -1.0, 0.0);

        assertEqWithinTolerance(3.14159, 3.14159, 0);
        assertEqWithinTolerance(3.14159, 3.14159, 0.0);
        assertEqWithinTolerance(-3.14159, -3.14159, 0);
        assertEqWithinTolerance(-3.14159, -3.14159, 0.0);
}

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertWithToleranceInexactMatch():Any[*]
{
        assertEqWithinTolerance(1, 0, 1);
        assertEqWithinTolerance(1, 0, 10);
        assertEqWithinTolerance(2.718281828459045, 2.7182818284590455, 0.000000000000001);
        assertEqWithinTolerance(-2.718281828459045, -2.7182818284590455, 0.000000000000001);
}

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertEquals():Any[*]
{
   assertEquals(1, 1);
   assertEquals('aaa', 'aaa');
}

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertEqualsWithCollections():Any[*]
{
        assertEquals([1, 2], [1, 2]);
        assertEquals(['aaa'], ['aaa']);
        assertEquals(['aaa', 'bb'], ['aaa', 'bb']);
        assertEquals(['aaa', 2], ['aaa', 2]);
}

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertInstanceOf():Any[*]
{
        assertInstanceOf(1, Integer);
        assertInstanceOf('the quick' + ' ' + 'brown fox', String);
}

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertInstanceOfDates():Any[*]
{
        assertInstanceOf(%2015-03-14, Date);
        assertInstanceOf(%2015-03-14, StrictDate);
        assertInstanceOf(%2015-03-14, Any);
        assertInstanceOf(%2015-03-14T23:59:00, DateTime);
}


function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertNotContains():Any[*]
{
        assertNotContains([1, 2, 5, 2, 'a', true, %2014-02-01, 'c'], false);
        assertNotContains([1, 2, 5, 2, 'a', true, %2014-02-01, 'c'], 'b');
}


function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertNotEmpty():Any[*]
{
   assertNotEmpty([1, 2, 3]);
}
 

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertNotEquals():Any[*]
{
        assertNotEquals(1, 2);
        assertNotEquals('aaa', 'bbb');
    }

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertNotEqualsCollection():Any[*]
{
        assertNotEquals([1, 3, 2], [2, 4, 1, 5]);
        assertNotEquals([1, 2], [2, 1]);
        assertNotEquals(['aaa', 2], [2, 'aaa']);
    }

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertNotSize():Any[*]
{
        assertNotSize([1, 2, 3], 1);
        assertNotSize(['a', 'b'], 5);
    }


function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertSameElements():Any[*]
{
        assertSameElements([1, 2], [1, 2]);
        assertSameElements([1, 2], [2, 1]);
        assertSameElements(['aaa'], ['aaa']);
        assertSameElements(['aaa', 'bb'], ['aaa', 'bb']);
        assertSameElements(['aaa', 2], ['aaa', 2]);
        assertSameElements(['aaa', 2], [2, 'aaa']);
    }

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertSize():Any[*]
{
        assertSize([1, 2, 3], 3);
        assertSize(['a', 'b'], 2);
    }


function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertFalse():Any[*]
    {
        assertFalse(false);
        assertFalse(2 == 3);
        assertFalse((1 + 2) == 4);
    }

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertFalseWithMessage():Any[*]
    {
        assertFalse(false, 'Test message');
        assertFalse(2 == 3, 'Test message');
        assertFalse((1 + 2) == 4, 'Test message');
    }

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertFalseWithFormat():Any[*]
    {
        assertFalse(false, 'Test message: %s', [true]);
        assertFalse(2 == 3, 'Test message: %s', [true]);
        assertFalse((1 + 2) == 4, 'Test message: %s', [true]);
    }

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertFalseWithLambda():Any[*]
    {
        assertFalse(false, | 'Test message');
        assertFalse(2 == 3, | format('Test message %s', [true]));
        assertFalse((1 + 2) == 4, | format('Test message: %s', [true]));
    }

