// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;
import meta::pure::metamodel::tests::lambdaopenvariables::*;

Class meta::pure::metamodel::tests::lambdaopenvariables::Person
{
   lastName : String[1];
}

Class meta::pure::metamodel::tests::lambdaopenvariables::Firm
{
   employees: Person[*];
}

function <<test.Test>> meta::pure::metamodel::tests::lambdaopenvariables::testSimpleOpenVariable():Boolean[1]
{
    let name = 'nameVal';
    let lambda = {|Person.all()->filter(p|$p.lastName == $name)};
    assertEquals('name', $lambda.openVariables);
}

function <<test.Test>> meta::pure::metamodel::tests::lambdaopenvariables::testNestedOpenVariable():Boolean[1]
{
    let name = 'nameVal';
    let lambda = {|{|Person.all()->filter(p|$p.lastName == $name)}};
    assertEquals('name', $lambda.openVariables);
}

function <<test.Test>> meta::pure::metamodel::tests::lambdaopenvariables::testNestedOpenVariableDeep():Boolean[1]
{
   let var = 'name';
   let lambda = {|Firm.all()->filter(f|$f.employees->exists(e|$e.lastName == $var))};
   assertEquals('var', $lambda.openVariables);
}
