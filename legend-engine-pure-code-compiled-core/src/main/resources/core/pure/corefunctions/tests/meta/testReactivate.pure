// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;
import meta::pure::functions::tests::model::*;

function <<test.Test>> meta::pure::functions::meta::tests::reactivate::testFunctionExpressionReactivation():Boolean[1]
{
    let f = [^Person(firstName='ok', lastName='a'), ^Person(firstName='ok',lastName='b'), ^Person(firstName='ok',lastName='c')]->map(p | $p.lastName)->deactivate()->cast(@FunctionExpression);
    assertSameElements(['a','b','c'],$f->reactivate());
}

function <<test.Test>> meta::pure::functions::meta::tests::reactivate::testInstanceValueReactivation():Boolean[1]
{
    let f = [^Person(firstName='ok', lastName='a'), ^Person(firstName='ok', lastName='b'), ^Person(firstName='ok', lastName='c')]->map(p | $p.lastName)->deactivate()->cast(@FunctionExpression);
    assertSameElements(['a','b','c'], $f.parametersValues->at(0)->reactivate()->cast(@Person)->map(p|$p.lastName));
    assertEq('LambdaFunction', $f.parametersValues->at(1)->reactivate()->type()->toOne()->id());
}


function <<test.Test>> meta::pure::functions::meta::tests::reactivate::testEnumsReactivation():Boolean[1]
{
    let f = [GeographicEntityType.CITY, GeographicEntityType.COUNTRY]->deactivate();
    assertSameElements([GeographicEntityType.CITY, GeographicEntityType.COUNTRY],$f->reactivate());
}


function <<test.Test,test.ToFix>> meta::pure::functions::meta::tests::reactivate::testPredicateReactivate():Boolean[1]
{
    let res = compileValueSpecification('[1,2,3]->exists(x|$x>1)');
    let expr = $res.result;
   
    assertEquals(true, $expr->toOne()->reactivate());
}