// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



function <<test.Test>> meta::pure::functions::date::tests::testSystemDefaultTimeZones():Boolean[1]
{
   meta::pure::functions::date::systemDefaultTimeZones() == ['GMT', 'UTC']
}

function <<test.Test>> meta::pure::functions::date::tests::testValidateDateTimeFormat():Boolean[1]
{
  let formats = ['yyyy', 'yyyy-M', 'yyyy-MM', 'yyyy-MM-d', 'yyyy-M-d', 'yyyy-MM-dd', 'yyyy/mm/dd', 'yyyyMMdd', 'yyyyMd', 'yyMd', 'dd/MM/yyyy', 'MM/dd/yyyy', 'MM/dd/yyyy "at" hh:mma z', 'yyyy-MM-dd HH:mm:ss', 'yyyy-MM-dd h:mm:ssa', 'yyyy-MM-dd HH:mm:ss.SSS', 'yyyy-MM-dd HH:mm:ss.SSSX', 'yyyy-MM-dd HH:mm:ss.SSSZ', 'yyyy-MM-dd HH:mm:ss.SSS z', 'yyyy-MM-dd HH:mm:ss.SSSS z', 'yyyy-MM-dd"T"HH:mm:ss', 'yyyy-MM-dd"T"HH:mm:ssZ', 'yyyy-MM-dd"T"HH:mm:ssZZ', 'yyyy-MM-dd"T"HH:mm:ss.SSS', 'yyyy-MM-dd"T"HH:mm:ss.SSSZ', 'yyyy-MM-dd"T"HH:mm:ss.SSSSZ', 'yy-MM-dd"T"HH:mm:ss."000000"', 'yyyy-MM-dd"T"HH:mm:ss."000000"X', '[EST]yyyy-MM-dd HH:mm:ss.SSSZ', '[CST]yyyy-MM-dd HH:mm:ss.SSS z', '[CET]yyyy-MM-dd HH:mm:ss.SSSX', '[EST]yyyy-MM-dd'];
  assert($formats->map(format | validateDateTimeFormat($format))->assertNotContains(false));

  let invalidFormats = ['yyy', 'yyyyy-M', 'yyyy-MMM', 'yyyy-MM-ddd', 'dd/mm/yyyy', 'MM/ddyy', 'MM/dd/yyyy "at" hh:ma z', 'yyyy-MMM-dd HH:mm:ss', 'yyyy-MM-dd hh:mm:ssa', 'yyyy-MM-dd HH:mm:ss.SSZ', 'yyyy-MM-dd HH:mm:ss.SZ', 'yyyy-MM-dd"TT"HH:mm:ss', 'yyyy-MM-dd"T"HH:mm:sss.SSS', 'yyyy-MM-dd""HH:mm:ss.SSSZ', 'yyyy-MM-dd"T"HH:mm:ss.SSSSSZ', 'yy-MM-dd"T"HH:mm:ss."00"', '(EST)yyyy-MM-dd'];
  assert($invalidFormats->map(format | validateDateTimeFormat($format))->assertNotContains(true));
}
