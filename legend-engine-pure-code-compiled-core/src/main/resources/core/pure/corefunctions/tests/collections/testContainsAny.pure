// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;
import meta::pure::functions::tests::model::*;

function <<test.Test>> meta::pure::functions::collection::tests::contains::testContainsAnyPrimitive():Boolean[1]
{
    let col = [1, 2, 5, 2, 'a', true, %2014-02-01, 'c'];
    assert($col->containsAny(1));
    assert($col->containsAny(2));
    assert($col->containsAny(5));
    assert($col->containsAny('a'));
    assert($col->containsAny(true));
    assert($col->containsAny(%2014-02-01));
    assert($col->containsAny('c'));

    assert($col->containsAny([1, 2]));
    assert($col->containsAny([2, 'k', 2]));
    assert($col->containsAny([%2014-02-02, 5]));
    assert($col->containsAny([-9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]));
    assert($col->containsAny([true]));
    assert($col->containsAny([%2014-02-01, 1, 2, 5, 'a', 'c']));

    assertFalse($col->containsAny(-5));
    assertFalse($col->containsAny(%2014-02-02));
    assertFalse($col->containsAny('the quick brown fox'));
    assertFalse($col->containsAny(false));

    assertFalse($col->containsAny([-1, -2, -5]));
    assertFalse($col->containsAny([%2014-02-02, 'k']));
    assertFalse($col->containsAny([-5, -2, -1, 'the quick brown fox']));
    assertFalse($col->containsAny([false]));
}

function <<test.Test>> meta::pure::functions::collection::tests::contains::testContainsAnyNonPrimitive():Boolean[1]
{
    let f1 = ^Firm(legalName='f1');
    let f2 = ^Firm(legalName='f2');
    let col = [$f1, $f2];
    assert($col->containsAny($f1));
    assert($col->containsAny(^Firm(legalName='f1')));
    assert($col->containsAny($f2));
    assert($col->containsAny(^Firm(legalName='f2')));

    assert($col->containsAny([$f1, $f2]));
    assert($col->containsAny([$f2, 3, $f2, 'f2']));
    assert($col->containsAny([$f2, $f1, $f1, $f2]));
    assert($col->containsAny([^Firm(legalName='f3'), ^Firm(legalName='f1')]));

    assertFalse($col->containsAny([1, 2, 3]));
    assertFalse($col->containsAny([^Firm(legalName='f3'), ^Firm(legalName='f4'), 5, 4, 3, 2, 1]));
}
