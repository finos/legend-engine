// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Tests for eq(Any[1], Any[1]):Boolean[1]

import meta::pure::profiles::*;
import meta::pure::functions::boolean::tests::equalitymodel::*;

function <<test.Test>> meta::pure::functions::boolean::tests::testEqInteger():Boolean[1]
{
    assert(eq(6, 6));
    assert(eq(6, 3 + 3));
    assertFalse(eq(6, 7));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqFloat():Boolean[1]
{
    assert(eq(6.3, 6.3));
    assert(eq(6.3, 6.3 + 0.0));
    assertFalse(eq(6.3, 7.8));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqString():Boolean[1]
{
    assert(eq('ab', 'ab'));
    assert(eq('ab', 'a' + 'b'));
    assertFalse(eq('ab', 'cd'));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqDate():Boolean[1]
{
    assert(eq(%2014, %2014));
    assert(eq(%2014-02-27T05:01:35.231+0000, %2014-02-27T05:01:35.231+0000));
    assert(eq(%2014-02-27T10:01:35.231+0500, %2014-02-27T05:01:35.231+0000));
    assertFalse(eq(%2014, %2013));
    assertFalse(eq(%2014, %2014-01-01));
    assertFalse(eq(%2014-02-27T05:01:35.231+0000, %2014-02-27T05:01:35.231-0500));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqBoolean():Boolean[1]
{
    assert(eq(true, true));
    assert(eq(false, false));
    assertFalse(eq(true, false));
    assertFalse(eq(false, true));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqEnum():Boolean[1]
{
    assert(eq(TestEnum1.FIRST, TestEnum1.FIRST));
    assert(eq(TestEnum1.SECOND, TestEnum1.SECOND));

    assertFalse(eq(TestEnum1.FIRST, TestEnum1.SECOND));
    assertFalse(eq(TestEnum1.SECOND, TestEnum1.FIRST));

    assertFalse(eq(TestEnum1.FIRST, TestEnum2.FIRST));
    assertFalse(eq(TestEnum1.SECOND, TestEnum2.SECOND));

    assertFalse(eq(TestEnum1.FIRST, 1));
    assertFalse(eq('a', TestEnum1.SECOND));

    let x = TestEnum1.FIRST;
    assert(eq($x, TestEnum1.FIRST));
    assertFalse(eq($x, TestEnum1.SECOND));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqVarIdentity():Boolean[1]
{
    let x = 6;
    assert(eq($x, $x));

    let instance = ^BottomClass(name='bottom', left=1, right=1);
    assert(eq($instance, $instance));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqNonPrimitive():Boolean[1]
{
    let side1 = ^SideClass(stringId='firstSide', intId=1);
    let side2 = ^SideClass(stringId='firstSide', intId=1);
    let side3 = ^SideClass(stringId='secondSide', intId=1);
    let side4 = ^SideClass(stringId='secondSide', intId=2);

    assert(eq($side1, $side1));
    assertFalse(eq($side1, $side2));
    assertFalse(eq($side2, $side1));
    assertFalse(eq($side1, $side3));
    assertFalse(eq($side3, $side1));
    assertFalse(eq($side1, $side4));

    let left11 = ^LeftClass(name='left', left=1, sides=[$side1, $side3]);
    let left12 = ^LeftClass(name='left', left=1, sides=[$side2, $side3]);
    let left21 = ^LeftClass(name='left', left=2, sides=[$side1]);

    assert(eq($left11, $left11));
    assertFalse(eq($left11, $left12));
    assertFalse(eq($left12, $left11));
    assertFalse(eq($left11, $left21));
    assertFalse(eq($left21, $left11));

    let right11 = ^RightClass(name='right1', right=1, sides=[$side1]);
    let right12 = ^RightClass(name='right1', right=2, sides=[$side1]);
    let right21 = ^RightClass(name='right2', right=1, sides=[$side1]);
    let right22 = ^RightClass(name='right2', right=1, sides=[$side2]);
    let right23 = ^RightClass(name='right2', right=1, sides=[$side3]);

    assert(eq($right11, $right11));
    assertFalse(eq($right11, $right12));
    assertFalse(eq($right12, $right11));
    assertFalse(eq($right11, $right21));
    assertFalse(eq($right21, $right22));
    assertFalse(eq($right21, $right23));

    assertFalse(eq($left11, $right11));

    let bot11 = ^BottomClass(name='left', left=1, right=1, sides=[$side1, $side3]);
    let bot12 = ^BottomClass(name='left', left=1, right=2, sides=[$side2, $side3]);
    let bot21 = ^BottomClass(name='left', left=2, right=1, sides=[$side1, $side3]);

    assert(eq($bot11, $bot11));
    assertFalse(eq($bot11, $bot12));
    assertFalse(eq($bot11, $bot21));

    assertFalse(eq($left11, $bot11));
}
