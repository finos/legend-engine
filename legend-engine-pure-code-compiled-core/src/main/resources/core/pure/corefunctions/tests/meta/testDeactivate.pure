// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;
import meta::pure::functions::tests::model::*;
import meta::pure::functions::meta::tests::evaluateAndDeactivate::*;
import meta::pure::metamodel::serialization::grammar::*;


function <<test.Test>> meta::pure::functions::meta::tests::deactivate::testDeactivateFunctionToOne():Boolean[1]
{
    let f = Person.all()->filter(p | $p.lastName == 'Doe')->first()->deactivate();
    assertEquals('first', $f->cast(@SimpleFunctionExpression).func.functionName);
    assertEq(1, $f->cast(@SimpleFunctionExpression).parametersValues->size());
}

function <<test.Test>> meta::pure::functions::meta::tests::deactivate::testDeactivateFunctionToMany():Boolean[1]
{
    let f = Person.all()->filter(p | $p.lastName == 'Doe')->deactivate();
    assertEquals('filter', $f->cast(@SimpleFunctionExpression).func.functionName);
    assertEq(2, $f->cast(@SimpleFunctionExpression).parametersValues->size());
}

function <<test.Test>> meta::pure::functions::meta::tests::deactivate::testDeactivateVariableOne():Boolean[1]
{
    let a = 5;
    let b = $a->deactivate();
    assertEquals('a', $b->cast(@VariableExpression).name);
}

function <<test.Test>> meta::pure::functions::meta::tests::deactivate::testDeactivateVariableMany():Boolean[1]
{
    let a = 5;
    let b = 7;
    let z = [$a, $b]->deactivate();
    assertEq('a,b', $z->cast(@InstanceValue).values->map(v | $v->cast(@VariableExpression).name)->joinStrings(','));
}

function <<test.Test>> meta::pure::functions::meta::tests::deactivate::testInstanceValueTypeAfterDeactivation():Boolean[1]
{
    let f = [^Person(firstName='d', lastName='a'), ^Person(firstName='d',lastName='b'), ^Person(firstName='d',lastName='c')]->map(p | $p.lastName)->deactivate()->cast(@FunctionExpression);
    assertSameElements(['InstanceValue', 'InstanceValue'], $f.parametersValues->map(p | $p->genericType().rawType->toOne()->id()));
}

function <<test.Test>> meta::pure::functions::meta::tests::evaluateAndDeactivate::testEvaluateAndDeactivate():Boolean[1]
{
    let f = {a:String[1], b:Integer[1] | true};
    assertEquals(['a', 'b'], $f->genericType().typeArguments->at(0).rawType->toOne()->cast(@FunctionType).parameters->evaluateAndDeactivate()->map(v | $v.name));
}

function <<test.Test>> meta::pure::functions::meta::tests::evaluateAndDeactivate::testEvaluateAndDeactivateFunctionDefinition():Boolean[1]
{
    let f = {| true};
    assertEq('{|true}', $f->evaluateAndDeactivate()->printFunctionDefinition(''));
}

function meta::pure::functions::meta::tests::evaluateAndDeactivate::f(i:Integer[1]):Integer[1]
{
   $i;
}

function <<test.Test>> meta::pure::functions::meta::tests::evaluateAndDeactivate::testEvaluateAndDeactivateSelect():Boolean[1]
{
   let a = [f(1),f(2)]->deactivate();
   let result = $a->cast(@InstanceValue).values->filter(s|$s->cast(@SimpleFunctionExpression).functionName == 'f')->map(r|$r);
   assertNotContains($result->map(c|$c->instanceOf(SimpleFunctionExpression)), false);
}
