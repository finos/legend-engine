// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Tests for equal<T,U>(T[*], U[*]):Boolean[1]

import meta::pure::functions::boolean::tests::equalitymodel::*;
import meta::pure::profiles::*;

function <<test.Test>> meta::pure::functions::boolean::tests::testEqualInteger():Boolean[1]
{
    assert(6 == 6);
    assert(equal(6, 6));
    assert(6 == 3 + 3);
    assert(equal(6, 3 + 3));
    assert(6 != 7);
    assert(!equal(6, 7));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqualFloat():Boolean[1]
{
    assert(6.3 == 6.3);
    assert(equal(6.3, 6.3));
    assert(6.3 == 6.3 + 0.0);
    assert(equal(6.3, 6.3 + 0.0));
    assert(6.3 != 7.8);
    assert(!equal(6.3, 7.8));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqualString():Boolean[1]
{
    assert('ab' == 'ab');
    assert(equal('ab', 'ab'));
    assert('ab' == ('a' + 'b'));
    assert(equal('ab', 'a' + 'b'));
    assert('ab' != 'cd');
    assert(!equal('ab', 'cd'));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqualDate():Boolean[1]
{
    assert(%2014 == %2014);
    assert(equal(%2014, %2014));
    assert(%2014-02-27T05:01:35.231+0000 == %2014-02-27T05:01:35.231+0000);
    assert(equal(%2014-02-27T05:01:35.231+0000, %2014-02-27T05:01:35.231+0000));
    assert(%2014-02-27T10:01:35.231+0500 == %2014-02-27T05:01:35.231+0000);
    assert(equal(%2014-02-27T10:01:35.231+0500, %2014-02-27T05:01:35.231+0000));
    assert(%2014 != %2013);
    assert(!equal(%2014, %2013));
    assert(%2014 != %2014-01-01);
    assert(!equal(%2014, %2014-01-01));
    assert(%2014-02-27T05:01:35.231+0000 != %2014-02-27T05:01:35.231-0500);
    assert(!equal(%2014-02-27T05:01:35.231+0000, %2014-02-27T05:01:35.231-0500));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqualBoolean():Boolean[1]
{
    assert(true == true);
    assert(equal(true, true));
    assert(false == false);
    assert(equal(false, false));
    assert(true != false);
    assert(!equal(true, false));
    assert(false != true);
    assert(!equal(false, true));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqualEnum():Boolean[1]
{
    assert(equal(TestEnum1.FIRST, TestEnum1.FIRST));
    assert(TestEnum1.FIRST == TestEnum1.FIRST);
    assert(equal(TestEnum1.SECOND, TestEnum1.SECOND));
    assert(TestEnum1.SECOND == TestEnum1.SECOND);

    assert(!equal(TestEnum1.FIRST, TestEnum1.SECOND));
    assert(TestEnum1.FIRST != TestEnum1.SECOND);
    assert(!equal(TestEnum1.SECOND, TestEnum1.FIRST));
    assert(TestEnum1.SECOND != TestEnum1.FIRST);

    assert(!equal(TestEnum1.FIRST, TestEnum2.FIRST));
    assert(TestEnum1.FIRST != TestEnum2.FIRST);
    assert(!equal(TestEnum1.SECOND, TestEnum2.SECOND));
    assert(TestEnum1.SECOND != TestEnum2.SECOND);

    assert(!equal(TestEnum1.FIRST, 1));
    assert(TestEnum1.FIRST != 1);
    assert(!equal('a', TestEnum1.SECOND));
    assert('a' != TestEnum1.SECOND);

    let x = TestEnum1.FIRST;
    assert(equal($x, TestEnum1.FIRST));
    assert($x == TestEnum1.FIRST);
    assert(!equal($x, TestEnum1.SECOND));
    assert($x != TestEnum1.SECOND);
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqualVarIdentity():Boolean[1]
{
    let x = 6;
    assert($x == $x);
    assert(equal($x, $x));

    let y = 'the quick brown fox jumps over the lazy dog';
    assert($y == $y);
    assert(equal($y, $y));

    let instance = ^BottomClass(name='name', left=1, right=2);
    assert($instance == $instance);
    assert(equal($instance, $instance));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqualNonPrimitive():Boolean[1]
{
    let side1 = ^SideClass(stringId='firstSide', intId=1);
    let side2 = ^SideClass(stringId='firstSide', intId=1);
    let side3 = ^SideClass(stringId='secondSide', intId=1);
    let side4 = ^SideClass(stringId='secondSide', intId=2);

    assert($side1 == $side1);
    assert(equal($side1, $side1));
    assert($side1 == $side2);
    assert(equal($side1, $side2));
    assert($side2 == $side1);
    assert(equal($side2, $side1));
    assert($side1 != $side3);
    assert(!equal($side1, $side3));
    assert($side3 != $side1);
    assert(!equal($side3, $side1));
    assert($side1 != $side4);
    assert(!equal($side1, $side4));

    let left11 = ^LeftClass(name='left', left=1, sides=[$side1, $side3]);
    let left12 = ^LeftClass(name='left', left=1, sides=[$side2, $side3]);
    let left21 = ^LeftClass(name='left', left=2, sides=[$side1]);

    assert($left11 == $left11);
    assert(equal($left11, $left11));
    assert($left11 == $left12);
    assert(equal($left11, $left12));
    assert($left12 == $left11);
    assert(equal($left12, $left11));
    assert($left11 != $left21);
    assert(!equal($left11, $left21));
    assert($left21 != $left11);
    assert(!equal($left21, $left11));

    let right11 = ^RightClass(name='right1', right=1, sides=[$side1]);
    let right12 = ^RightClass(name='right1', right=2, sides=[$side1]);
    let right21 = ^RightClass(name='right2', right=1, sides=[$side1]);
    let right22 = ^RightClass(name='right2', right=1, sides=[$side2]);
    let right23 = ^RightClass(name='right2', right=1, sides=[$side3]);

    assert($right11 == $right11);
    assert(equal($right11, $right11));
    assert($right11 == $right12);
    assert(equal($right11, $right12));
    assert($right12 == $right11);
    assert(equal($right12, $right11));
    assert($right11 != $right21);
    assert(!equal($right11, $right21));
    assert($right21 == $right22);
    assert(equal($right21, $right22));
    assert($right21 != $right23);
    assert(!equal($right21, $right23));

    assert($left11 != $right11);
    assert(!equal($left11, $right11));

    let bot11 = ^BottomClass(name='left', left=1, right=1, sides=[$side1, $side3]);
    let bot12 = ^BottomClass(name='left', left=1, right=2, sides=[$side2, $side3]);
    let bot21 = ^BottomClass(name='left', left=2, right=1, sides=[$side1, $side3]);

    assert($bot11 == $bot11);
    assert(equal($bot11, $bot11));
    assert($bot11 == $bot12);
    assert(equal($bot11, $bot12));
    assert($bot11 != $bot21);
    assert(!equal($bot11, $bot21));

    assert($left11 != $bot11);
    assert(!equal($left11, $bot11));

    let otherBot11 = ^OtherBottomClass(name='left', left=1, right=1, sides=[$side1, $side2]);
    let otherBot12 = ^OtherBottomClass(name='left', left=1, right=2, sides=[$side1, $side2]);
    let otherBot21 = ^OtherBottomClass(name='left', left=1, right=1, sides=[$side2, $side3]);

    assert($otherBot11 != $otherBot12);
    assert(!equal($otherBot11, $otherBot12));
    assert($otherBot11 == $otherBot21);
    assert(equal($otherBot11, $otherBot21));
    assert($otherBot12 != $otherBot21);
    assert(!equal($otherBot12, $otherBot21));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqualPrimitiveCollections():Boolean[1]
{
    assert(['a', 'b'] == ['a', 'b']);
    assert(equal(['a', 'b'], ['a', 'b']));

    assert(['a', 'b', 'c'] == ['a', 'b', 'c']);
    assert(equal(['a', 'b', 'c'], ['a', 'b', 'c']));

    assertFalse(['a', 'b'] == ['a', 'b', 'c']);
    assertFalse(equal(['a', 'b'], ['a', 'b', 'c']));

    assertFalse(['a', 'b', 'c'] == ['a', 'b']);
    assertFalse(equal(['a', 'b', 'c'], ['a', 'b']));

    assertFalse(['a', 'b'] == ['b', 'a']);
    assertFalse(equal(['a', 'b'], ['b', 'a']));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqualRecursivePrimitiveCollections():Boolean[1]
{
    let side1 = ^SideClass(stringId='firstSide', intId=1);
    let side2 = ^SideClass(stringId='firstSide', intId=1);
    let side3 = ^SideClass(stringId='secondSide', intId=1);
    let side4 = ^SideClass(stringId='secondSide', intId=2);

    let bot11 = ^BottomClass(name='left', left=1, right=1, sides=[$side1, $side3]);
    let bot12 = ^BottomClass(name='left', left=1, right=2, sides=[$side2, $side3]);
    let bot21 = ^BottomClass(name='left', left=2, right=1, sides=[$side1, $side3]);

    assert([$bot11, $bot21] == [$bot11, $bot21]);
    assert(equal([$bot11, $bot21], [$bot11, $bot21]));

    assert([$bot11, $bot21] == [$bot12, $bot21]);
    assert(equal([$bot11, $bot21], [$bot12, $bot21]));

    assertFalse([$bot11, $bot21] == [$bot11, $bot12, $bot21]);
    assertFalse(equal([$bot11, $bot21], [$bot11, $bot12, $bot21]));

    assertFalse([$bot11, $bot12, $bot21] == [$bot11, $bot21]);
    assertFalse(equal([$bot11, $bot12, $bot21], [$bot11, $bot21]));

    assertFalse([$bot11, $bot21] == [$bot11, $bot12]);
    assertFalse(equal([$bot11, $bot21], [$bot11, $bot12]));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqualMixedCollections():Boolean[1]
{
    let side1 = ^SideClass(stringId='firstSide', intId=1);
    let side2 = ^SideClass(stringId='firstSide', intId=1);
    let side3 = ^SideClass(stringId='secondSide', intId=1);
    let side4 = ^SideClass(stringId='secondSide', intId=2);

    let bot11 = ^BottomClass(name='left', left=1, right=1, sides=[$side1, $side3]);
    let bot12 = ^BottomClass(name='left', left=1, right=2, sides=[$side2, $side3]);
    let bot21 = ^BottomClass(name='left', left=2, right=1, sides=[$side1, $side3]);

    assert([$bot11, 'a', $bot21] == [$bot11, 'a', $bot21]);
    assert(equal([$bot11, 'a', $bot21], [$bot11, 'a', $bot21]));

    assert([$bot11, 'a', $bot21] == [$bot12, 'a', $bot21]);
    assert(equal([$bot11, 'a', $bot21], [$bot12, 'a', $bot21]));

    assertFalse([$bot11, 'a', $bot21] == [$bot11, $bot12, 'a', $bot21]);
    assertFalse(equal([$bot11, 'a', $bot21], [$bot11, $bot12, 'a', $bot21]));

    assertFalse([$bot11, $bot12, 'a', $bot21] == [$bot11, 'a', $bot21]);
    assertFalse(equal([$bot11, $bot12, 'a', $bot21], [$bot11, 'a', $bot21]));

    assertFalse([$bot11, $bot21] == [$bot11, 'a']);
    assertFalse(equal([$bot11, $bot21], [$bot11, 'a']));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testEqualEmptyCollections():Boolean[1]
{
    assert([] == []);
    assert(equal([], []));

    let top = ^TopClass(name='top');

    assert($top.sides == []);
    assert(equal($top.sides, []));
    assert([] == $top.sides);
    assert(equal([], $top.sides));

    assert($top.nickName == []);
    assert(equal($top.nickName, []));
    assert([] == $top.nickName);
    assert(equal([], $top.nickName));
}