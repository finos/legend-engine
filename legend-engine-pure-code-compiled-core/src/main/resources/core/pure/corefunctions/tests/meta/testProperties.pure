// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;
import meta::pure::functions::tests::model::*;

function <<test.Test>>  meta::pure::functions::meta::tests::properties::testProperties():Boolean[1]
{
    let props = ^Address(name='Hoboken', type=GeographicEntityType.CITY)->genericType()->properties();
    assertEquals(Address.properties->concatenate(Address.propertiesFromAssociations)->concatenate(GeographicEntity.properties)->concatenate(Any.properties), $props);

    assertSize($props, 7);
    assertIs(Address.properties->get('name')->at(0), $props->at(0));
    assertIs(Address.properties->get('street')->at(0), $props->at(1));
    assertIs(Address.properties->get('comments')->at(0), $props->at(2));
    assertIs(Address.propertiesFromAssociations->get('location')->at(0), $props->at(3));
    assertIs(GeographicEntity.properties->get('type')->at(0), $props->at(4));
    assertIs(Any.properties->get('classifierGenericType')->at(0), $props->at(5));
}

function <<test.Test>> meta::pure::functions::meta::tests::properties::testClassPropertyByName():Boolean[1]
{
    assertEmpty(EntityWithAddress->classPropertyByName('unknownProperty'));
    assertNotEmpty(EntityWithAddress->classPropertyByName('address'));
    assertIs(EntityWithAddress.properties->at(0), EntityWithAddress->classPropertyByName('address')->toOne());
    assertEmpty(EntityWithAddress->classPropertyByName('firstName'));

    assertEmpty(Person->classPropertyByName('unknownProperty'));
    assertEmpty(Person->classPropertyByName('address'));
    assertNotEmpty(Person->classPropertyByName('firstName'));
    assertIs(Person.properties->filter(p | $p.name == 'firstName')->toOne(), Person->classPropertyByName('firstName')->toOne());
}
