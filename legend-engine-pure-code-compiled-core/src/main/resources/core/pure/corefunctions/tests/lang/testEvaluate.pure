// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::lang::tests::eval::*;
import meta::pure::profiles::*;
import meta::pure::functions::tests::model::*;

function <<test.Test>> meta::pure::functions::lang::tests::eval::testEval():Boolean[1]
{
    assertEquals('test', {|'test'}->eval());
    // TODO fix this - it doesn't even compile
    // assertEquals('test', SimpleFunctionDefinition.all()->filter(f | $f->functionType().parameters->isEmpty())->at(0)->eval());
}

function <<test.Test>> meta::pure::functions::lang::tests::eval::testEvalOne():Boolean[1]
{
    let address = ^Address(name='Hoboken, NJ', type=GeographicEntityType.CITY);
    assertEquals('Hoboken, NJ', {a | $a.name}->eval($address));
}

function <<test.Test>> meta::pure::functions::lang::tests::eval::testEvalWithCollectionWithOneElement():Boolean[1]
{
    assert(meta::pure::functions::lang::tests::eval::doSomething_Integer_1__Boolean_1_->eval(getInts()));
}

function meta::pure::functions::lang::tests::eval::getInts():Integer[*]
{
   [1];
}

function meta::pure::functions::lang::tests::eval::doSomething(int:Integer[1]):Boolean[1]
{
   true;
}

function <<test.Test>> meta::pure::functions::lang::tests::eval::testEvalTwo():Boolean[1]
{
    assertEquals(3, {x, y | $x + $y}->eval(1, 2));
    assertEquals('12', {x, y | $x + $y}->eval('1', '2'));
}

function <<test.Test>> meta::pure::functions::lang::tests::evaluate::testEvaluateOne():Boolean[1]
{
    let p = ^Person(firstName='name', lastName='name');
    assertEquals('name', Person.properties->get('lastName')->toOne()->eval($p));
}

function <<test.Test>> meta::pure::functions::lang::tests::evaluate::testEvaluateInheritance():Boolean[1]
{
    let f = {p:GeographicEntity[1] | $p.type};
    assertEquals(GeographicEntityType.CITY, $f->eval(^Address(type=GeographicEntityType.CITY, name='Jersey City')));
}

function <<test.Test>>   meta::pure::functions::lang::tests::evaluate::testEvaluateAnyWithMultiplicities():Boolean[1]
{
    let f = {s:String[1], p:String[*] | $s + ' // ' + $p->joinStrings(',')};
    assertEquals(['ok // ok1'], $f->evaluate([^List<String>(values='ok'), ^List<String>(values='ok1')]));
    assertEquals(['ok // ok1,ok2'], $f->evaluate([^List<String>(values='ok'), ^List<String>(values=['ok1', 'ok2'])]));
}

function <<test.Test>> meta::pure::functions::lang::tests::evaluate::testEvaluateMultiplicityInference():Boolean[1]
{
    let f = {i:Integer[1] | 'p' + $i->toString()};
    assertEquals([2], [1, 2, 3]->filter(i | eq($f->eval($i), 'p2')));
}

function <<test.Test>> meta::pure::functions::lang::tests::evaluate::testEvaluateWithNoParams():Boolean[1]
{
   let f = { | 'Something' + ' else'};
   assertEquals('Something else', $f->evaluate([]));
}

function <<test.Test>> meta::pure::functions::lang::tests::evaluate::testEvaluateQualifier():Boolean[1]
{
    let p = ^Person(firstName='Joe', lastName='Bloggs');
    assertEquals('Joe Bloggs', Person.qualifiedProperties->filter(p | $p.name == 'name')->toOne()->evaluate(^List<Any>(values=$p)));
}

function <<test.Test>> meta::pure::functions::lang::tests::evaluate::testEvaluateQualifierWithParam():Boolean[1]
{
    let p = ^Person(firstName='Joe', lastName='Bloggs');
    assertEquals('Mr Joe Bloggs', Person.qualifiedProperties->filter(p | $p.name == 'nameWithTitle')->toOne()->evaluate([^List<Any>(values=$p), ^List<Any>(values='Mr')]));
}

