// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;

function <<test.Test>> meta::pure::functions::math::tests::minus::testSimpleMinus():Boolean[1]
{
    assertEq(1, 3 - 2);
    assertEq(1, minus([3, 2]));
    assertEq(1, 3-2);
    assertEq(5, 3 - -2);
    assertEq(5, 3--2);
    assertEq(-5, -3 - 2);
    assertEq(-5, -3-2);
}

function <<test.Test>> meta::pure::functions::math::tests::minus::testComplexMinus():Boolean[1]
{
    assertEq(0, 6 - (4 - 5) - 7);
    assertEq(0, minus([6, minus([4, 5]), 7]));
    assertEq(-3, 3 - (4 - 5) - 7);
    assertEq(-3, 3-(4-5)-7);
    assertEq(-9, -3 - (4 - 5) - 7);
    assertEq(-9, -3-(4-5)-7);
}

function <<test.Test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::math::tests::minus::testLargeMinus():Boolean[1]
   {
    assertEq(9223372036854775766, 9223372036854775898 - 132);
    assertEq(9223372036854775766, minus([9223372036854775898, 132]));
}

function <<test.Test>> meta::pure::functions::math::tests::minus::testFloatMinus():Boolean[1]
{
    assertEq(1.5, 3 - 1.5);
    assertEq(0 - 1.5, -1.5);
    assertEq(-1.5, 1.5 - 3);
    assertEq(-4.5, -1.5 - 3);
}

function <<test.Test>> meta::pure::functions::math::tests::minus::testSingleMinus():Boolean[1]
{
    assertEq(0 - 1, -1);
    assertEq(-1, minus(1));
    assertEq(1, --1);
    assertEq(-1, ---1);
}

function <<test.Test>>  meta::pure::functions::math::tests::minus::testSingleExpressionMinus():Boolean[1]
{
    let val = 1;
    assertEq(-1, -$val);
    assertEq(-1, -(3 - 2));
    assertEq(-1, -({| 1}->eval()));
}

function <<test.Test>> meta::pure::functions::math::tests::minus::testSingleMinusType():Boolean[1]
{
    assertIs(Integer, type(-1)->toOne());
    assertIs(Float, type(-1.0)->toOne());
}

function <<test.Test>> meta::pure::functions::math::tests::minus::testReflectiveExecution():Boolean[1]
{

   assertEq(1, meta::pure::functions::math::minus_Integer_MANY__Integer_1_->eval([3,2]));
   assertEq(2, meta::pure::functions::math::minus_Integer_MANY__Integer_1_->evaluate(^List<Integer>(values=[5,3]))->cast(@Integer)->toOne());
   
   assertEq(1.0, meta::pure::functions::math::minus_Float_MANY__Float_1_->eval([3.0,2.0]));
   assertEq(2.0, meta::pure::functions::math::minus_Float_MANY__Float_1_->evaluate(^List<Float>(values=[5.0,3.0]))->cast(@Float)->toOne());
   
   assertEq(100, meta::pure::functions::math::minus_Number_MANY__Number_1_->eval([300,200]));
   assertEq(22, meta::pure::functions::math::minus_Number_MANY__Number_1_->evaluate(^List<Number>(values=[55,33]))->cast(@Number)->toOne());
}

function <<test.Test>> meta::pure::functions::math::tests::minus::testDecimalMinus(): Boolean[1]
{
   assertEq(-4.0d, [1.0d, 2.0d, 3.0d]->minus());
   assertEq(-4.0d, [1.0d, 2, 3.0]->minus());
   assertEq(-7.0d, -4.0d-2.0d-1);
}
