// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;

function <<test.Test>> meta::pure::functions::collection::tests::take::testTakeNegativeOnEmptyList():Boolean[1]
{
  assertEmpty([]->take(-1));
}

function <<test.Test>> meta::pure::functions::collection::tests::take::testTakeNegativeOnNonEmptyList():Boolean[1]
{
  assertEmpty([1, 2, 3]->take(-1));
}

function <<test.Test>> meta::pure::functions::collection::tests::take::testTakeZeroOnEmptyList():Boolean[1]
{
  assertEmpty([]->take(0));
}

function <<test.Test>> meta::pure::functions::collection::tests::take::testTakeZeroOnNonEmptyList():Boolean[1]
{
  assertEmpty([1, 2, 3]->take(0));
}

function <<test.Test>> meta::pure::functions::collection::tests::take::testTakeOneOnEmptyList():Boolean[1]
{
  assertEmpty([]->take(1));
}

function <<test.Test>> meta::pure::functions::collection::tests::take::testTakeOneOnNonEmptyList():Boolean[1]
{
  assertEquals([1], [1, 2, 3]->take(1));
}

function <<test.Test>> meta::pure::functions::collection::tests::take::testTakeManyOnEmptyList():Boolean[1]
{
  assertEmpty([]->take(2));
}

function <<test.Test>> meta::pure::functions::collection::tests::take::testTakeManyOnNonEmptyList():Boolean[1]
{
  assertEquals([1, 2], [1, 2, 3]->take(2));
}

function <<test.Test>> meta::pure::functions::collection::tests::take::testTakeExceedsSizeOnEmptyList():Boolean[1]
{
  assertEmpty([]->take(5));
}

function <<test.Test>> meta::pure::functions::collection::tests::take::testTakeExceedsSizeOnNonEmptyList():Boolean[1]
{
  assertEquals([1, 2, 3], [1, 2, 3]->take(5));
}

function <<test.Test>> meta::pure::functions::collection::tests::take::testTakeInList():Boolean[1]
{
  assertEquals(list([1, 2]), list([1, 2, 3]->take(2)));
}
