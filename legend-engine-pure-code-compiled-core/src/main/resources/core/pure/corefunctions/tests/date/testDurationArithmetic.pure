// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function <<test.Test>> meta::pure::functions::date::tests::testAddSubtractYears():Boolean[1]
{
    assertEquals(%2016, %2015->add(^Duration(number=1, unit=DurationUnit.YEARS)));
    assertEquals(%2027, %2015->add(^Duration(number=12, unit=DurationUnit.YEARS)));
    assertEquals(%2011, %2015->subtract(^Duration(number=4, unit=DurationUnit.YEARS)));

    assertEquals(%2016-02-28, %2015-02-28->add(^Duration(number=1, unit=DurationUnit.YEARS)));
    assertEquals(%2013-02-28, %2012-02-29->add(^Duration(number=1, unit=DurationUnit.YEARS)));
    assertEquals(%2016-02-29, %2012-02-29->add(^Duration(number=4, unit=DurationUnit.YEARS)));
}

function <<test.Test>> meta::pure::functions::date::tests::testAddSubtractMonths():Boolean[1]
{
    assertEquals(%2015-03, %2012-03->add(^Duration(number=36, unit=DurationUnit.MONTHS)));
    assertEquals(%2009-03, %2012-03->subtract(^Duration(number=36, unit=DurationUnit.MONTHS)));

    assertEquals(%2014-03-31, %2012-03-31->add(^Duration(number=24, unit=DurationUnit.MONTHS)));
    assertEquals(%2010-02-28, %2012-02-28->subtract(^Duration(number=24, unit=DurationUnit.MONTHS)));
    assertEquals(%2010-02-28, %2012-02-29->subtract(^Duration(number=24, unit=DurationUnit.MONTHS)));

    assertEquals(%2014-04-30, %2012-03-31->add(^Duration(number=25, unit=DurationUnit.MONTHS)));
    assertEquals(%2010-01-28, %2012-02-28->subtract(^Duration(number=25, unit=DurationUnit.MONTHS)));
    assertEquals(%2010-01-29, %2012-02-29->subtract(^Duration(number=25, unit=DurationUnit.MONTHS)));

    assertEquals(%2015-02-28, %2015-01-31->add(^Duration(number=1, unit=DurationUnit.MONTHS)));
    assertEquals(%2015-02-28T13:55:21, %2015-01-31T13:55:21->add(^Duration(number=1, unit=DurationUnit.MONTHS)));
    assertEquals(%2015-03-31, %2015-01-31->add(^Duration(number=2, unit=DurationUnit.MONTHS)));
    assertEquals(%2015-04-30, %2015-01-31->add(^Duration(number=3, unit=DurationUnit.MONTHS)));
    assertEquals(%2015-05-31, %2015-01-31->add(^Duration(number=4, unit=DurationUnit.MONTHS)));

    assertEquals(%2015-03-28, %2015-02-28->add(^Duration(number=1, unit=DurationUnit.MONTHS)));
    assertEquals(%2016-03-29, %2016-02-29->add(^Duration(number=1, unit=DurationUnit.MONTHS)));
}

function <<test.Test>> meta::pure::functions::date::tests::testAddSubtractDays():Boolean[1]
{
    assertEquals(%2015-04-20, %2015-04-16->add(^Duration(number=4, unit=DurationUnit.DAYS)));
    assertEquals(%2015-04-12, %2015-04-16->subtract(^Duration(number=4, unit=DurationUnit.DAYS)));

    assertEquals(%2015-05-02, %2015-04-16->add(^Duration(number=16, unit=DurationUnit.DAYS)));
    assertEquals(%2015-06-01, %2015-05-16->add(^Duration(number=16, unit=DurationUnit.DAYS)));

    assertEquals(%2015-03-31, %2015-04-16->subtract(^Duration(number=16, unit=DurationUnit.DAYS)));
    assertEquals(%2015-03-30, %2015-04-16->subtract(^Duration(number=17, unit=DurationUnit.DAYS)));

    assertEquals(%2015-03-30, %2014-03-30->add(^Duration(number=365, unit=DurationUnit.DAYS)));
    assertEquals(%2013-03-30, %2014-03-30->subtract(^Duration(number=365, unit=DurationUnit.DAYS)));
}

function <<test.Test>> meta::pure::functions::date::tests::testAddSubtractHours():Boolean[1]
{
    assertEquals(%2015-04-15T13:12:11, %2015-04-15T12:12:11->add(^Duration(number=1, unit=DurationUnit.HOURS)));
    assertEquals(%2015-04-15T11:12:11, %2015-04-15T12:12:11->subtract(^Duration(number=1, unit=DurationUnit.HOURS)));

    assertEquals(%2015-04-16T12:12:11, %2015-04-15T12:12:11->add(^Duration(number=24, unit=DurationUnit.HOURS)));
    assertEquals(%2015-04-14T12:12:11, %2015-04-15T12:12:11->subtract(^Duration(number=24, unit=DurationUnit.HOURS)));

    assertEquals(%2015-04-17T00:12:11, %2015-04-15T12:12:11->add(^Duration(number=36, unit=DurationUnit.HOURS)));
    assertEquals(%2015-04-14T00:12:11, %2015-04-15T12:12:11->subtract(^Duration(number=36, unit=DurationUnit.HOURS)));
}

function <<test.Test>> meta::pure::functions::date::tests::testAddSubtractMinutes():Boolean[1]
{
    assertEquals(%2015-04-15T13:12:11, %2015-04-15T13:11:11->add(^Duration(number=1, unit=DurationUnit.MINUTES)));
    assertEquals(%2015-04-15T13:10:11, %2015-04-15T13:11:11->subtract(^Duration(number=1, unit=DurationUnit.MINUTES)));

    assertEquals(%2015-04-15T14:12:11, %2015-04-15T13:11:11->add(^Duration(number=61, unit=DurationUnit.MINUTES)));
    assertEquals(%2015-04-15T12:10:11, %2015-04-15T13:11:11->subtract(^Duration(number=61, unit=DurationUnit.MINUTES)));

    assertEquals(%2015-04-16T13:12:11, %2015-04-15T13:11:11->add(^Duration(number=1441, unit=DurationUnit.MINUTES)));
    assertEquals(%2015-04-14T13:10:11, %2015-04-15T13:11:11->subtract(^Duration(number=1441, unit=DurationUnit.MINUTES)));
}

function <<test.Test>> meta::pure::functions::date::tests::testAddSubtractSeconds():Boolean[1]
{
    assertEquals(%2015-04-15T13:11:12, %2015-04-15T13:11:11->add(^Duration(number=1, unit=DurationUnit.SECONDS)));
    assertEquals(%2015-04-15T13:11:10, %2015-04-15T13:11:11->subtract(^Duration(number=1, unit=DurationUnit.SECONDS)));

    assertEquals(%2015-04-15T13:12:12, %2015-04-15T13:11:11->add(^Duration(number=61, unit=DurationUnit.SECONDS)));
    assertEquals(%2015-04-15T13:10:10, %2015-04-15T13:11:11->subtract(^Duration(number=61, unit=DurationUnit.SECONDS)));

    assertEquals(%2015-04-15T14:11:12, %2015-04-15T13:11:11->add(^Duration(number=3601, unit=DurationUnit.SECONDS)));
    assertEquals(%2015-04-15T12:11:10, %2015-04-15T13:11:11->subtract(^Duration(number=3601, unit=DurationUnit.SECONDS)));
}
