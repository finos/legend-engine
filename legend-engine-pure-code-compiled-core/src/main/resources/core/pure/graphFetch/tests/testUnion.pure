import meta::pure::graphFetch::execution::*;
import meta::pure::runtime::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::toString::*;

Class meta::pure::graphFetch::tests::union::C
{
  d : meta::pure::graphFetch::tests::union::D[1];
}

Class meta::pure::graphFetch::tests::union::D
{
  s : String[1];
}

Class meta::pure::graphFetch::tests::union::A
{
  b1 : meta::pure::graphFetch::tests::union::B1[1];
  b2 : meta::pure::graphFetch::tests::union::B2[1];
}

Class meta::pure::graphFetch::tests::union::TargetSub
{
  s : String[1];
}

Class meta::pure::graphFetch::tests::union::B2
{
  d : meta::pure::graphFetch::tests::union::D[1];
}

Class meta::pure::graphFetch::tests::union::B1
{
  c : meta::pure::graphFetch::tests::union::C[1];
}

Class meta::pure::graphFetch::tests::union::Target
{
  s : String[1];
  t : meta::pure::graphFetch::tests::union::TargetSub[*];
}


function <<meta::pure::profiles::test.Test>> meta::pure::graphFetch::tests::union::testPlanGenerationWithUnion():Boolean[1]
{
     let m2mTree = #{
      meta::pure::graphFetch::tests::union::Target {
         s,
         t {
            s
         }
      }
   }#;
   
   let plan = executionPlan(|meta::pure::graphFetch::tests::union::Target.all()->graphFetch($m2mTree)->serialize($m2mTree),
                    meta::pure::graphFetch::tests::union::MyMapping,
                    ^Runtime(
                      connections = [
                        ^JsonModelConnection(
                          element = ^ModelStore(),
                          class = meta::pure::graphFetch::tests::union::A,
                          url = 'data:application/json,\n{"b1":{"c":{"d": {"s": "blah"}}},"b2": {"d": {"s": "foo"}}}\n'
                        )
                      ]
                    ),
                    ^ExecutionContext(),
                    meta::pure::extension::defaultExtensions());
   assertEquals('PureExp(type=Stringexpression=->serialize(#{meta::pure::graphFetch::tests::union::Target{s,t{s}}}#)(StoreMappingGlobalGraphFetch(type=PartialClass[impls=[(meta::pure::graphFetch::tests::union::Target|MyMapping.meta_pure_graphFetch_tests_union_Target)],propertiesWithParameters=[s,t]]resultSizeRange=*store=MODELlocalGraphFetchExecutionNode=InMemoryRootGraphFetch(type=PartialClass[impls=[(meta::pure::graphFetch::tests::union::Target|MyMapping.meta_pure_graphFetch_tests_union_Target)],propertiesWithParameters=[s,t]]graphFetchTree=[meta_pure_graphFetch_tests_union_Target/meta::pure::graphFetch::tests::union::Target]{@(meta_pure_graphFetch_tests_union_Target->)@[/s],@(meta_pure_graphFetch_tests_union_Target->SDU),(meta_pure_graphFetch_tests_union_Target->SDL)@[SDU,SDL/t]{@(meta_pure_graphFetch_tests_union_TargetSub->)@[/s]}}nodeIndex=0batchSize=1checked=false(StoreStreamReading(type=PartialClass[impls=[],propertiesWithParameters=[b1,b2]]graphFetchTree=#{meta::pure::graphFetch::tests::union::A{b1{c{d{s}}},b2{d{s}}}}#connection=JsonModelConnection(url=data:application/json,{"b1":{"c":{"d":{"s":"blah"}}},"b2":{"d":{"s":"foo"}}},class=meta::pure::graphFetch::tests::union::A)enableConstraints=truechecked=false))children=[InMemoryPropertyGraphFetch(type=PartialClass[impls=[(meta::pure::graphFetch::tests::union::TargetSub|MyMapping.SDU),(meta::pure::graphFetch::tests::union::TargetSub|MyMapping.SDL)],propertiesWithParameters=[s]]graphFetchTree=@(meta_pure_graphFetch_tests_union_Target->SDU),(meta_pure_graphFetch_tests_union_Target->SDL)@[SDU,SDL/t]{@(meta_pure_graphFetch_tests_union_TargetSub->)@[/s]}nodeIndex=2parentIndex=0children=[])])children=[]localTreeIndices=[0,1,2,3]dependencyIndices=[])))', $plan->planToStringWithoutFormatting(meta::pure::extension::defaultExtensions()));
}

###Mapping
Mapping meta::pure::graphFetch::tests::union::MyMapping
(
  *meta::pure::graphFetch::tests::union::Target: Pure
  {
    ~src meta::pure::graphFetch::tests::union::A
    s: 'hello',
    t[SDL]: $src.b2.d,
    t[SDU]: $src.b1.c.d
  }

  *meta::pure::graphFetch::tests::union::TargetSub: Operation
  {
    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(SDU,SDL)
  }

  meta::pure::graphFetch::tests::union::TargetSub[SDU]: Pure
  {
    ~src meta::pure::graphFetch::tests::union::D
    s : $src.s
  }

  meta::pure::graphFetch::tests::union::TargetSub[SDL]: Pure
  {
    ~src meta::pure::graphFetch::tests::union::D
    s : $src.s
  }
)