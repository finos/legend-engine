// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::graphFetch::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::*;
import meta::pure::runtime::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::extension::*;
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::*;
import meta::pure::runtime::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::extension::*;
import meta::pure::functions::asserts::*;

// ==========================================================================
//  Target class has one class > mapped to subtypes of source Class
// ==========================================================================


// ==================================================
// Via functions in mapping expressions 
// ==================================================

function <<meta::pure::profiles::test.Test>> meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testSingleSubType():Boolean[1]
{
   let tree = #{
      Target{
         targetZipCode, 
         targetAddress

      }
   }#;
    let mapping =  meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithSingleSubType;

    let sourceTree = calculateSourceTree($tree, $mapping, meta::pure::extension::defaultExtensions());

    let expectedSourceTree =
      'Location\n'+
      '(\n' +
      '  zipCode\n' +
      '  ->SubType(Street)\n' +
      '  (\n' +
      '    street\n' +
      '    zipCode\n' +
      '  )\n' +
      ')' 
   ; 
   assertEquals($expectedSourceTree, $sourceTree->sortTree()->meta::pure::graphFetch::treeToString()); 
}

function <<meta::pure::profiles::test.Test>> meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_instanceOf():Boolean[1]
{
    let tree = #{
        Target{
          targetZipCode, 
          targetAddress

        }
    }#;
    let mapping = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_instanceOf;

    let sourceTree = calculateSourceTree($tree, $mapping, meta::pure::extension::defaultExtensions());

    let expectedSourceTree =
      'Location\n'+
      '(\n' +
      '  coordinates\n' +
      '  zipCode\n' +
      '  ->SubType(Road)\n' +
      '  (\n' +
      '    coordinates\n' +
      '    road\n' +
      '    zipCode\n' +
      '  )\n' +
      '  ->SubType(Street)\n' +
      '  (\n' +
      '    coordinates\n' +
      '    street\n' +
      '    zipCode\n' +
      '  )\n'+
      ')'
   ; 
    assertEquals($expectedSourceTree, $sourceTree->sortTree()->meta::pure::graphFetch::treeToString()); 
}

function <<meta::pure::profiles::test.Test>> meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_match():Boolean[1]
{
    let tree = #{
        Target{
          targetZipCode, 
          targetAddress

        }
    }#;
    let mapping =  meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_match;

    let sourceTree = calculateSourceTree($tree, $mapping, meta::pure::extension::defaultExtensions());

    let expectedSourceTree =
      'Location\n'+
      '(\n' +
      '  coordinates\n' +
      '  zipCode\n' +
      '  ->SubType(Road)\n' +
      '  (\n' +
      '    coordinates\n' +
      '    road\n' +
      '    zipCode\n' +
      '  )\n' +
      '  ->SubType(Street)\n' +
      '  (\n' +
      '    coordinates\n' +
      '    street\n' +
      '    zipCode\n' +
      '  )\n'+
      ')'
   ; 
    assertEquals($expectedSourceTree, $sourceTree->sortTree()->meta::pure::graphFetch::treeToString()); 
}

function <<meta::pure::profiles::test.Test>> meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_match_functionCall():Boolean[1]
{
    let tree = #{
        Target{
          targetZipCode, 
          targetAddress

        }
    }#;
    let mapping =  meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_match_functionCall;

    let sourceTree = calculateSourceTree($tree, $mapping, meta::pure::extension::defaultExtensions());

    let expectedSourceTree =
      'Location\n'+
      '(\n' +
      '  coordinates\n' +
      '  zipCode\n' +
      '  ->SubType(Road)\n' +
      '  (\n' +
      '    coordinates\n' +
      '    road\n' +
      '    zipCode\n' +
      '  )\n' +
      '  ->SubType(Street)\n' +
      '  (\n' +
      '    coordinates\n' +
      '    street\n' +
      '    zipCode\n' +
      '  )\n'+
      ')'
   ; 
    assertEquals($expectedSourceTree, $sourceTree->sortTree()->meta::pure::graphFetch::treeToString()); 
}

function <<meta::pure::profiles::test.Test>> meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_noPropertyAccess_instanceOf():Boolean[1]
{
    let tree = #{
        Target{
          targetZipCode, 
          targetAddress

        }
    }#;
    let mapping =  meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_instanceOf_returnStringValue;

    let sourceTree = calculateSourceTree($tree, $mapping, meta::pure::extension::defaultExtensions());

    let expectedSourceTree =
      'Location\n'+
      '(\n' +
      '  zipCode\n' +
      '  ->SubType(Road)\n' +
      '  (\n' +
      '    zipCode\n' +
      '  )\n' +
      '  ->SubType(Street)\n' +
      '  (\n' +
      '    street\n' +
      '    zipCode\n' +
      '  )\n' +
      ')';
       
    assertEquals($expectedSourceTree, $sourceTree->sortTree()->meta::pure::graphFetch::treeToString()); 
    true;
}

function <<meta::pure::profiles::test.Test>> meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_noPropertyAccess_match():Boolean[1]
{
    let tree = #{
        Target{
          targetZipCode, 
          targetAddress

        }
    }#;
    let mapping =  meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_match;

    let sourceTree = calculateSourceTree($tree, $mapping, meta::pure::extension::defaultExtensions());

     let expectedSourceTree =
      'Location\n'+
      '(\n' +
      '  zipCode\n' +
      '  ->SubType(Road)\n' +
      '  (\n' +
      '    zipCode\n' +
      '  )\n' +
      '  ->SubType(Street)\n' +
      '  (\n' +
      '    zipCode\n' +
      '  )\n' +
      ')';

    assertEquals($expectedSourceTree, $sourceTree->sortTree()->meta::pure::graphFetch::treeToString()); 
}

function <<meta::pure::profiles::test.Test>> meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_noPropertyAccess_match_functionCall():Boolean[1]
{
    let tree = #{
        Target{
          targetZipCode, 
          targetAddress

        }
    }#;
    let mapping =  meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_match_functionCall;

    let sourceTree = calculateSourceTree($tree, $mapping, meta::pure::extension::defaultExtensions());

     let expectedSourceTree =
      'Location\n'+
      '(\n' +
      '  zipCode\n' +
      '  ->SubType(Road)\n' +
      '  (\n' +
      '    zipCode\n' +
      '  )\n' +
      '  ->SubType(Street)\n' +
      '  (\n' +
      '    zipCode\n' +
      '  )\n' +
      ')';

    assertEquals($expectedSourceTree, $sourceTree->sortTree()->meta::pure::graphFetch::treeToString()); 
    true;
}

function <<meta::pure::profiles::test.Test>> meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_noPropertyAccess_match_functionCall2():Boolean[1]
{
    let tree = #{
        Target{
          targetAddress

        }
    }#;
    let mapping =  meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_match_functionCall;

    let sourceTree = calculateSourceTree($tree, $mapping, meta::pure::extension::defaultExtensions());

     let expectedSourceTree =
      'Location\n'+
      '(\n' +
      '  ->SubType(Road)\n' +
      '  ->SubType(Street)\n' +
      ')';

    assertEquals($expectedSourceTree, $sourceTree->sortTree()->meta::pure::graphFetch::treeToString()); 
    true;
}
 
###Mapping
import meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::*;

Mapping meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithSingleSubType
(
   *meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Target: Pure
   {
      ~src meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location
      targetZipCode: $src.zipCode,
      targetAddress: if($src->instanceOf(meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street),|$src->cast(@meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street).street,|'unknown')
   }
)

Mapping meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_instanceOf
(
   *meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Target: Pure
   {
      ~src meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location
      targetZipCode: $src.zipCode,
      targetAddress:if($src->instanceOf(meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street),
                       |$src->cast(@meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street).street,
                       |
                         if($src->instanceOf(meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road),
                         |$src->cast(@meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road).road,
                         |$src->cast(@meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location).coordinates
                         )
                      )   
   }
)

Mapping meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_match
(
   *meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Target: Pure
   {
      ~src meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location
      targetZipCode: $src.zipCode,
      targetAddress: $src->match([
         s:Street[1] | $s.street, 
         r:Road[1] | $r.road,
         l:Location[1] | $l.coordinates
         ])
   }
)

Mapping meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_match_functionCall
(
   *meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Target: Pure
   {
      ~src meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location
      targetZipCode: $src.zipCode,
      targetAddress: $src->meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::getLocationStr();
      }
)

Mapping meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_instanceOf_returnStringValue
(
   *meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Target: Pure
   {
      ~src meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location
      targetZipCode: $src.zipCode,
      targetAddress:if($src->instanceOf(meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street),
                       |$src->cast(@meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street).street,
                       |
                         if($src->instanceOf(meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road),
                         |'road_valueFromMapping',
                         |'location_valueFromMapping'
                         )
                      )   
   }
)

Mapping meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_instanceOf_returnBooleanValue
(
   *meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Target2: Pure
   {
      ~src meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location
      targetZipCode: $src.zipCode,
      isLocation : $src->instanceOf(meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location),
      isRoad :  $src->instanceOf(meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road),
      isStreet : $src->instanceOf(meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street ) 
   }
)

Mapping meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_match
(
   *meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Target: Pure
   {
      ~src meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location
      targetZipCode: $src.zipCode,
      targetAddress: $src->match([
         s:Street[1] | 'street_valueFromMapping', 
         r:Road[1] | 'road_valueFromMapping',
         l:Location[1] | 'location_valueFromMapping'
         ])
   }
)

Mapping meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_match_functionCall
(
   *meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Target: Pure
   {
      ~src meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location
      targetZipCode: $src.zipCode,
      targetAddress: $src->meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::getLocationStr_noPropertyAccess();
      }
)


###Pure
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::*;

function meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::getLocationStr(loc:meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location[1]):String[1]
{
  $loc->match([
         s:meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street[1] | $s.street, 
         r:meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road[1] | $r.road,
         l:meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location[1] | $l.coordinates
         ]);
}

function meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::getLocationStr_noPropertyAccess(loc:meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location[1]):String[1]
{
  $loc->match([
         s:meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street[1] | 'street_valueFromMapping', 
         r:meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road[1] | 'road_valueFromMapping',
         l:meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location[1] | 'location_valueFromMapping'
         ]);
}


// ===========================================================
// Via multiple sets in mapping 
// TODO - handle operation sets in calculateSourceTree
// ===========================================================

function <<meta::pure::profiles::test.ToFix>> meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_union():Boolean[1]
{
    let tree = #{
        Target{
          targetZipCode, 
          targetAddress

        }
    }#;
    let mapping = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithUnion;

    let sourceTree = calculateSourceTree($tree, $mapping, meta::pure::extension::defaultExtensions());

    let expectedSourceTree =
      'Location\n'+
      '(\n' +
      '  coordinates\n' +
      '  zipCode\n' +
      '  ->SubType(Road)\n' +
      '  (\n' +
      '    road\n' +
      '    zipCode\n' +
      '  )\n' +
      '  ->SubType(Street)\n' +
      '  (\n' +
      '    street\n' +
      '    zipCode\n' +
      '  )\n'+
      ')'
   ; 
    assertEquals($expectedSourceTree, $sourceTree->sortTree()->meta::pure::graphFetch::treeToString()); 
}


###Mapping
import meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::*;

Mapping meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithUnion
(
  *meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Target: Operation
   {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(location,road,street)
   }
    
  meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Target[location]: Pure
  {
    ~src meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location
    targetZipCode : $src.zipCode,
    targetAddress : $src.coordinates
  }

  meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Target[road]: Pure
  {
    ~src meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road
    targetZipCode : $src.zipCode,
    targetAddress : $src.road
  }

  meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Target[street]: Pure
  {
    ~src meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street
    targetZipCode : $src.zipCode,
    targetAddress : $src.street
  }
)