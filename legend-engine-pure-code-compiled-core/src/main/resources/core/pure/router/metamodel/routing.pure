// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::router::metamodel::*;
import meta::pure::router::routing::*;
import meta::pure::runtime::*;

Class <<typemodifiers.abstract>> meta::pure::router::metamodel::ExtendedRoutedValueSpecification extends RoutedValueSpecification
{
   id                 : String[1];
   executionContext   : ExecutionContext[1];
   routingStrategy    : RoutingStrategy[1];
}

// =========================================================================================
// Routing Strategies
// =========================================================================================

###Pure
import meta::pure::extension::*;
import meta::pure::router::metamodel::*;
import meta::pure::router::routing::*;
import meta::pure::runtime::*;

Class <<typemodifiers.abstract>> meta::pure::router::metamodel::RoutingStrategy
{
   // Process Class
   processClass : Function<{Class<Any>[1], InstanceValue[1], RoutingState[1], ExecutionContext[1], DebugContext[1] -> RoutingState[1]}>[1];
   processClass(c:Class<Any>[1], i:InstanceValue[1], state:RoutingState[1], executionContext:ExecutionContext[1], debug:DebugContext[1])
   {
     $this.processClass->eval($c, $i, $state, $executionContext, $debug)  
   }: RoutingState[1];

   // Process Property
   processProperty : Function<{Property<Nil,Any|*>[1], FunctionExpression[1], RoutingState[1], ExecutionContext[1], Map<VariableExpression, ValueSpecification>[1], Map<String, List<Any>>[1], Extension[*], DebugContext[1] -> RoutingState[1]}>[1];
   processProperty(p:Property<Nil,Any|*>[1], fe:FunctionExpression[1], state:RoutingState[1], executionContext:ExecutionContext[1], vars:Map<VariableExpression, ValueSpecification>[1], inScopeVars:Map<String, List<Any>>[1], extensions:Extension[*], debug:DebugContext[1])
   {
     $this.processProperty->evaluate([list($p), list($fe), list($state), list($executionContext), list($vars), list($inScopeVars), list($extensions), list($debug)])->toOne()->cast(@RoutingState);  
   }: RoutingState[1];

   // Wrap VS into ExtendedRoutedValueSpecification
   wrapValueSpec : Function<{ValueSpecification[1], RoutingStrategy[1], String[1], ExecutionContext[1], Extension[*], DebugContext[1] -> ExtendedRoutedValueSpecification[1]}>[1];
   wrapValueSpec(value:ValueSpecification[1], id:String[1], executionContext:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1])
   {
     $this.wrapValueSpec->eval($value, $this, $id, $executionContext, $extensions, $debug);  
   }:ExtendedRoutedValueSpecification[1];

   toString : Function<{RoutingStrategy[1]->String[1]}>[1];
   toString()
   {
     $this.toString->eval($this);
   }:String[1];
}

// =======================================================================================================
// Utility Functions
// TODO: We should consider moving this logic as part of ExtendedRoutedValueSpecification instances
// =======================================================================================================

###Pure
import meta::pure::router::metamodel::*;
import meta::pure::router::externalFormat::metamodel::*;
import meta::pure::router::platform::metamodel::*;
import meta::pure::router::printer::*;
import meta::pure::router::store::metamodel::*;

function meta::pure::router::routing::toString(evs:ExtendedRoutedValueSpecification[1], pref:Pref[1]):String[1]
{
  $evs->match([
      sc:StoreMappingRoutedValueSpecification[1]  | '['+$sc.id+' '+if($sc.propertyMapping->isEmpty(),|'',|'@'+$sc.propertyMapping->map(p|$p.property.name->toOne()+'('+$p.sourceSetImplementationId+'->'+$p.targetSetImplementationId+')')->joinStrings(',')+'@ ')+$sc.sets.id->joinStrings(', ')+'/'+$sc.value->asString($pref)+']',
      p:PlatformRoutedValueSpecification[1]       | '['+$p.id+' /'+$p.value->asString($pref)+']',
      e:ExternalFormatRoutedValueSpecification[1] | '['+$e.id+' /'+$e.value->asString($pref)+']'
  ]);
}
