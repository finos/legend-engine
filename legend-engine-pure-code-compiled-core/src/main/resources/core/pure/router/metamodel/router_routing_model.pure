// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::mapping::*;
import meta::pure::runtime::*;
import meta::pure::store::*;

Class <<typemodifiers.abstract>> meta::pure::router::ExtendedRoutedValueSpecification extends RoutedValueSpecification
{
   id                 : String[1];
   executionContext   : ExecutionContext[1];
   processedChainSets : SetImplementation[*];
}

Class meta::pure::router::StoreRoutedValueSpecification extends ExtendedRoutedValueSpecification
{
   store              : Store[0..1];        //TODO: check this, to be made mandatory in subsequent commits
   runtime            : Runtime[1];
}

Class meta::pure::router::StoreMappingRoutedValueSpecification extends StoreRoutedValueSpecification
{
   mapping            : Mapping[1];
   sets               : SetImplementation[*];
   propertyMapping    : PropertyMapping[*];
}

Class meta::pure::router::ExternalFormatRoutedValueSpecification extends ExtendedRoutedValueSpecification
{
   binding            : meta::external::shared::format::binding::Binding[1];
}

Class meta::pure::router::PlatformRoutedValueSpecification extends ExtendedRoutedValueSpecification
{
   
}


// =========================================================================================
// Routing Strategies
// =========================================================================================

###Pure
import meta::pure::extension::*;
import meta::pure::mapping::*;
import meta::pure::router::metamodel::*;
import meta::pure::router::routing::*;
import meta::pure::runtime::*;

Class meta::pure::router::routing::PermutationSet
{
   id : Integer[1];
   sets : SetImplementation[*];
}

Class <<typemodifiers.abstract>> meta::pure::router::metamodel::RoutingStrategy
{
   // Process Class
   processClass : Function<{Class<Any>[1], InstanceValue[1], RoutingState[1], ExecutionContext[1], DebugContext[1] -> RoutingState[1]}>[1];
   processClass(c:Class<Any>[1], i:InstanceValue[1], state:RoutingState[1], executionContext:ExecutionContext[1], debug:DebugContext[1])
   {
     $this.processClass->eval($c, $i, $state, $executionContext, $debug)  
   }: RoutingState[1];

   // Process Property
   processProperty : Function<{Property<Nil,Any|*>[1], FunctionExpression[1], RoutingState[1], ExecutionContext[1], Map<VariableExpression, ValueSpecification>[1], Map<String, List<Any>>[1], Extension[*], DebugContext[1] -> RoutingState[1]}>[1];
   processProperty(p:Property<Nil,Any|*>[1], fe:FunctionExpression[1], state:RoutingState[1], executionContext:ExecutionContext[1], vars:Map<VariableExpression, ValueSpecification>[1], inScopeVars:Map<String, List<Any>>[1], extensions:Extension[*], debug:DebugContext[1])
   {
     $this.processProperty->evaluate([list($p), list($fe), list($state), list($executionContext), list($vars), list($inScopeVars), list($extensions), list($debug)])->toOne()->cast(@RoutingState);  
   }: RoutingState[1];
}

Class meta::pure::router::metamodel::StoreRoutingStrategy extends RoutingStrategy
{
   runtime     : Runtime[1];
}

Class meta::pure::router::metamodel::StoreMappingRoutingStrategy extends StoreRoutingStrategy
{
   mapping     : Mapping[1];
   sets        : PermutationSet[*];
   setsByDepth : Map<String,PermutationSet>[1];
   isParentMap : Boolean[1];      //TODO: check this maybe this is not needed
   toChooseSet : SetImplementation[0..1];
   
   classMappingsByClass:Map<Class<Any>,List<SetImplementation>>[1];         //TODO: check this move to mapping

   classMappingsForClass(class:Class<Any>[1])
   {
      $this.classMappingsByClass->get($class)->map(l | $l.values)
   }:SetImplementation[*];
}

Class meta::pure::router::metamodel::ExternalFormatRoutingStrategy extends RoutingStrategy
{
   binding     : meta::external::shared::format::binding::Binding[1];
}

Class meta::pure::router::metamodel::PlatformRoutingStrategy extends RoutingStrategy
{
   
}

// =========================================================================================
// Graph Fetch Tree Models
// =========================================================================================

###Pure
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::mapping::*;

Class meta::pure::graphFetch::routing::RoutedGraphFetchTree extends GraphFetchTree
{
   sets : SetImplementation[*];
   requiredQualifiedProperties: QualifiedProperty<Any>[*];
   constraintsExclusions: String[*];
}

Class meta::pure::graphFetch::routing::RoutedRootGraphFetchTree<T> extends RoutedGraphFetchTree, RootGraphFetchTree<T>
{
}

Class meta::pure::graphFetch::routing::RoutedPropertyGraphFetchTree extends RoutedGraphFetchTree, PropertyGraphFetchTree
{
   propertyMapping : PropertyMapping[*];
}