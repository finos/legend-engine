// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::extension::*;
import meta::pure::router::clustering::*;
import meta::pure::router::externalFormat::metamodel::*;
import meta::pure::router::externalFormat::routing::*;
import meta::pure::router::metamodel::*;
import meta::pure::router::platform::metamodel::*;
import meta::pure::router::platform::routing::*;
import meta::pure::router::store::metamodel::*;
import meta::pure::router::store::routing::*;
import meta::pure::router::metamodel::clustering::*;
import meta::pure::router::printer::*;
import meta::pure::router::routing::*;
import meta::pure::router::utils::*;
import meta::pure::runtime::*;

Class meta::pure::router::RoutedVariablePlaceHolder
{
   name : String[1];
}

function meta::pure::router::routeFunction(f:FunctionDefinition<Any>[1], extensions:Extension[*]):FunctionDefinition<Any>[1]
{
   $f->routeFunction(^ExecutionContext(), $extensions, noDebug());
}

function meta::pure::router::routeFunction(f:FunctionDefinition<Any>[1], exeCtx: ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):FunctionDefinition<Any>[1]
{
   let expressions = $f.expressionSequence->evaluateAndDeactivate();
   assert($expressions->init()->forAll(vs| $vs->isLetFunction()), 'In FunctionDefinition with many expressions, all except last should be let expressions');  //validate ::execute(..) not present

   let funcParams  = $f.classifierGenericType.typeArguments.rawType->cast(@FunctionType).parameters->evaluateAndDeactivate().name;
   let l = {|[]};
   let initStatements = $expressions->init()->fold(
    {vs, a |
      let varName         = $vs->extractLetVariableName();
      let reqVars         = $vs->findVariableExpressionsInValueSpecification(false);
      let inScopeVars     = $a.second->keyValues();

      let unavailableVars = $reqVars.name->removeAllOptimized($inScopeVars.first->concatenate($funcParams));
      assert($unavailableVars->isEmpty(), 'Unable to resolve var(s): ' + $unavailableVars->joinStrings(','));
      
      let unResolvedVars  = $reqVars->filter(v|let resolved = $a.second->get($v.name);
                                               $resolved.values->isEmpty() || $resolved.values->at(0)->instanceOf(RoutedVariablePlaceHolder););
      
      if($unResolvedVars->isNotEmpty(),
        {|
          let unRoutedFunction = ^$l(expressionSequence = $vs, openVariables=$a.second->keys());
          let routedFunction   = routeFunction($unRoutedFunction, getPlatformRoutingStrategy(), $exeCtx, $a.second, $extensions, $debug);
          let vars             = $a.second->put($varName->toOne(), ^List<RoutedVariablePlaceHolder>(values=^RoutedVariablePlaceHolder(name=$varName->toOne())));
          ^$a
          (
            first  = ^$routedFunction(expressionSequence = $a.first.expressionSequence->concatenate($routedFunction.expressionSequence)->evaluateAndDeactivate()->toOneMany())->cast(@FunctionDefinition<Any>), 
            second = $vars
          );
        },
        {|
          let expressionsRoutingSupported = $vs->cast(@FunctionExpression)->checkFunctionExpressionRoutingSupport($extensions);
          if($expressionsRoutingSupported,
            {|
              let f                  = ^$l(expressionSequence = $vs, openVariables=$a.second->keys());
              let routed             = routeFunction($f, getPlatformRoutingStrategy(), $exeCtx, $a.second, $extensions, $debug);
              let canVsBeReactivated = $routed.expressionSequence->toOne()->meta::pure::router::clustering::recursivelyFetchClusteredValueSpecification(true)->forAll(c | $c->instanceOf(meta::pure::router::platform::metamodel::clustering::PlatformClusteredValueSpecification));
              if($canVsBeReactivated,
                |let re   = $vs->reactivate($a.second);
                 let vars = $a.second->put($varName->toOne(), ^List<Any>(values=$re));
                 ^$a(first=$a.first, second = $vars);,
                |let vars   = $a.second->put($varName->toOne(), ^List<RoutedVariablePlaceHolder>(values=^RoutedVariablePlaceHolder(name=$varName->toOne())));
                 ^$a
                 (
                   first = ^$routed(expressionSequence = $a.first.expressionSequence->concatenate($routed.expressionSequence)->evaluateAndDeactivate()->toOneMany())->cast(@FunctionDefinition<Any>),
                   second = $vars
                 ););
            },
            {|
              let re   = $vs->reactivate($a.second);
              let vars = $a.second->put($varName->toOne(), ^List<Any>(values=$re));
              ^$a(first=$a.first, second = $vars);
            }
          );
        }
      );
    },
    pair($l->cast(@FunctionDefinition<Any>), $f->openVariableValues())
  );    

  let vs      = $expressions->last()->toOne();
  let varName = $vs->extractLetVariableName();
  let vars    = if($varName->isNotEmpty(),
                   | $initStatements.second->put($varName->toOne(), ^List<RoutedVariablePlaceHolder>(values=^RoutedVariablePlaceHolder(name=$varName->toOne()))),
                   | $initStatements.second);
  let newF    = ^$l(expressionSequence    = $vs,
                    openVariables         = $vars->keys(),
                    classifierGenericType = ^GenericType(rawType=LambdaFunction, typeArguments=^GenericType(rawType=$f->functionType())));

  let routed  = routeFunction($newF, getPlatformRoutingStrategy(), $exeCtx, $vars, $extensions, $debug);
  ^$routed(expressionSequence = $initStatements.first.expressionSequence->tail()->concatenate($routed.expressionSequence)->evaluateAndDeactivate()->toOneMany())->cast(@FunctionDefinition<Any>);
}

function meta::pure::router::routeFunction(f:FunctionDefinition<Any>[1], routingStrategy:RoutingStrategy[1], exeCtx: ExecutionContext[1], inScopeVars:Map<String, List<Any>>[0..1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):FunctionDefinition<Any>[1]
{
   let fOpenVariables      = $f->openVariableValues();
   let openVariables       = if($inScopeVars->isNotEmpty(),
                                | assert($fOpenVariables->keys()->intersection($inScopeVars)->isEmpty(),'Routing : unable to determine open variables for FunctionDefinition, suplied inScopeVars and FunctionDefinitionOpenVariables intersect');
                                  $fOpenVariables->putAll($inScopeVars->toOne()->keyValues());,
                                | $fOpenVariables);
   
   let functionExpressions = $f.expressionSequence->evaluateAndDeactivate()->cast(@FunctionExpression);

   // Enriching Function Expressions with relevant info (mapping / binding / platform)
   print(if($debug.debug,|'\n'+$debug.space+'Enriching Function Expressions with relevant info (mapping / binding / platform) and assigning routing strategy:\n',|''));
   let enrichedExpressions = enrichFunctionExpressions($functionExpressions, $routingStrategy, $exeCtx, $openVariables, $extensions, $debug);

   // Enriching Function Expressions with more information based on type of expression (subTypes of ExtendedRoutedValueSpecification)
   print(if($debug.debug,|'\n'+$debug.space+'Enriching Function Expressions with strategy based info (mapping / binding / platform):\n',|''));
   let enrichedExpressionsAfterStrategyBasedEnrichment = $enrichedExpressions->map(exp | $exp->enrichExpressionWithStrategyBasedEnrichment($exeCtx, $extensions, $debug));
   
   // Clustering Function Expressions into clusters
   print(if($debug.debug,|'\n'+$debug.space+'Clustering Function Expressions:\n',|''));
   let clusters = $enrichedExpressionsAfterStrategyBasedEnrichment->map(exp| $exp->clusterFunctionExpressions($openVariables, $exeCtx, $extensions, ^$debug(space = $debug.space + '  ')));

   // Wrapping Clustered Function Expressions into original function structure
   let result   = ^$f(expressionSequence = $clusters->toOneMany());
   print(if($debug.debug,|$result->asString()+'\n',|''));

   $result;
}

function meta::pure::router::enrichExpressionWithStrategyBasedEnrichment(vs: ExtendedRoutedValueSpecification[1], exeCtx: ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]): ExtendedRoutedValueSpecification[1]
{
   $vs->match([
     sm: StoreMappingRoutedValueSpecification[1]   | $sm->enrichStoreMappingRoutedValueSpecification($exeCtx, $extensions, $debug),
     ef: ExternalFormatRoutedValueSpecification[1] | ^$ef(value = $ef.value->enrichExternalFormatRoutedValueSpecification($exeCtx, $extensions, $debug)),
     pl: PlatformRoutedValueSpecification[1]       | ^$pl(value = $pl.value->enrichPlatformRoutedValueSpecification($exeCtx, $extensions, $debug)),
     er: ExtendedRoutedValueSpecification[1]       | fail('Unexpected ExtendedRoutedValueSpecification encountered. Please raise the issue with dev team!'); @ExtendedRoutedValueSpecification; 
   ])
}

function meta::pure::router::clusterFunctionExpressions(vs:ExtendedRoutedValueSpecification[1], openVariables:Map<String, List<Any>>[1], exeCtx: ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ClusteredValueSpecification[*]
{
   print(if($debug.debug,|'\n'+$vs->asString()->debug($debug.space+'Processing: '),|''));

   $vs->match([
     sm: StoreMappingRoutedValueSpecification[1]   | $sm->doCluster($sm.mapping, $sm.runtime, $openVariables, $exeCtx, $extensions, $debug),
     ef: ExternalFormatRoutedValueSpecification[1] | let clusteredVal = $ef.value->meta::pure::router::externalFormat::clustering::cluster($ef.binding, $openVariables, $exeCtx, $extensions, $debug)->toOne();
                                                     if($clusteredVal->instanceOf(ClusteredValueSpecification),
                                                        |let cluster = $clusteredVal->cast(@ClusteredValueSpecification);
                                                         ^$cluster(val = ^$ef(value = $cluster.val));,
                                                        |meta::pure::router::platform::clustering::wrapValueSpecByPlatformCluster($ef, $openVariables, $exeCtx));,
     pl: PlatformRoutedValueSpecification[1]       | let clusteredVal = $pl.value->meta::pure::router::platform::clustering::cluster($openVariables, $exeCtx, $extensions, $debug)->toOne()->evaluateAndDeactivate();
                                                     if($clusteredVal->instanceOf(ClusteredValueSpecification),
                                                        |let cluster = $clusteredVal->cast(@ClusteredValueSpecification);
                                                         ^$cluster(val = ^$pl(value = $cluster.val));,
                                                        |meta::pure::router::platform::clustering::wrapValueSpecByPlatformCluster($pl, $openVariables, $exeCtx));,
     er: ExtendedRoutedValueSpecification[1]       | fail('Unexpected ExtendedRoutedValueSpecification encountered. Please raise the issue with dev team!'); @ClusteredValueSpecification; 
   ]);
}