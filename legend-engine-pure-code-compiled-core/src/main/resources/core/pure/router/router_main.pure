// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::*;
import meta::pure::extension::*;
import meta::pure::store::*;
import meta::pure::metamodel::serialization::grammar::*;
import meta::pure::mapping::*;
import meta::pure::runtime::*;
import meta::pure::metamodel::path::*;
import meta::pure::router::printer::*;
import meta::pure::router::builder::*;
import meta::pure::router::clustering::*;
import meta::pure::router::metamodel::*;
import meta::pure::router::routing::*;
import meta::pure::router::execution::*;
import meta::pure::router::store::platform::*;

Class meta::pure::router::RoutingQuery<T|m>  // TODO: check this to be removed
{
   fn : FunctionDefinition<{->T[m]}>[1];
}

Class meta::pure::router::RoutingResult
{
   functions:FunctionDefinition<Any>[*];
}

Class meta::pure::router::RoutedVariablePlaceHolder
{
   name : String[1];
}

Class meta::pure::router::Void extends ValueSpecification
{

}

// ================== TO BE MOVED =============================

Class meta::pure::router::TDSRoutedValueSpecification extends RoutedValueSpecification
{
   id:String[1];
   runtime:Runtime[1];
   mapping:Mapping[1];
   store:meta::pure::store::Store[1];
   executionContext:ExecutionContext[1];
}

Class meta::pure::router::NoSetRoutedValueSpecification extends RoutedValueSpecification
{
}

Class meta::pure::router::FunctionRoutedValueSpecification extends RoutedValueSpecification
{
   propertyMap : PropertyMap[0..1];
   builtPropertyMap : Map<String, SetImplementation>[0..1];
   originalFunction : FunctionDefinition<Any>[1];
}

Class meta::pure::router::ClassSetImplementationHolder extends RoutedValueSpecification
{
   set : SetImplementation[1];
}

// ================== TO BE MOVED =============================

function meta::pure::router::routeFunction(f:FunctionDefinition<Any>[1], extensions:meta::pure::extension::Extension[*]):RoutingResult[1]
{
   $f->routeFunction(^ExecutionContext(), $extensions, noDebug());
}

function meta::pure::router::routeFunction(f:FunctionDefinition<Any>[1], exeCtx: ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):RoutingResult[1]
{
   let expressions     = $f.expressionSequence->evaluateAndDeactivate();
   assert($expressions->init()->forAll(vs| $vs->isLetFunction()), 'In FunctionDefinition with many expressions, all except last should be let expressions');  //validate ::execute(..) not present

   let l = {|[]};
   let initStatements = $expressions->init()->fold(
    {vs, a |
      let varName = $vs->extractLetVariableName();

      if($vs->usesFrom(),
        {|
          let f      = ^$l(expressionSequence = $vs, openVariables=$a.second->keys());
          let routed = routeFunction($f, getRoutingStrategyFromMappingAndRuntime(^Mapping(name = ''), ^meta::pure::runtime::Runtime()), $exeCtx, $a.second, $extensions, $debug);       //TODO: check this remove empty mapping and runtime
          let vars   = if($varName->isNotEmpty(),
                         | $a.second->put($varName->toOne(), ^List<RoutedVariablePlaceHolder>(values=^RoutedVariablePlaceHolder(name=$varName->toOne()))),
                         | $a.second
                       );
          let temp   = $routed.functions->toOne();
          ^$a(
first = ^RoutingResult(
              functions       = ^$temp(expressionSequence = $a.first.functions.expressionSequence->concatenate($temp.expressionSequence)->evaluateAndDeactivate()->toOneMany())->cast(@FunctionDefinition<Any>)
            ),
            second = $vars
          );
        },
        {|
          let expression      = $vs->cast(@FunctionExpression).parametersValues->evaluateAndDeactivate()->at(1);
          let varExprs        = $vs->findVariableExpressionsInValueSpecification();
          let inScopeVars     = $a.second->keyValues();

          let unavailableVars = $varExprs.name->removeAllOptimized($inScopeVars.first);
          assert($unavailableVars->isEmpty(), 'Unable to resolve var(s): ' + $unavailableVars->joinStrings());

          let unResolvedVars  = $varExprs->filter(v|let resolved = $a.second->get($v.name);
                                                    $resolved.values->isEmpty() || $resolved.values->at(0)->instanceOf(RoutedVariablePlaceHolder););
          if($unResolvedVars->isNotEmpty(),
            {|
              let unRoutedFunction = ^$l(expressionSequence = $vs);
              let vars = $a.second->put($varName->toOne(), ^List<RoutedVariablePlaceHolder>(values=^RoutedVariablePlaceHolder(name=$varName->toOne())));
              let temp = $unRoutedFunction->toOne();
              ^$a(first=^RoutingResult(functions=^$temp(expressionSequence = $a.first.functions.expressionSequence->concatenate($temp.expressionSequence)->evaluateAndDeactivate()->toOneMany())->cast(@FunctionDefinition<Any>)), second=$vars);
            },
            {|
              let re = $vs->reactivate($a.second);
              let vars = $a.second->put($varName->toOne(), ^List<Any>(values=$re));
              ^$a(first=$a.first, second = $vars);
            }
          );
        }
      );
    },
    pair(^RoutingResult(), $f->openVariableValues())
  );

   let vs      = $expressions->last()->toOne();
   let varName = $vs->extractLetVariableName();
   let vars    = if($varName->isNotEmpty(),
                   | $initStatements.second->put($varName->toOne(), ^List<RoutedVariablePlaceHolder>(values=^RoutedVariablePlaceHolder(name=$varName->toOne()))),
                   | $initStatements.second);
   let newF    = ^$l(expressionSequence    = $vs,
                     openVariables         = $vars->keys(),
                     classifierGenericType = ^GenericType(rawType=LambdaFunction, typeArguments=^GenericType(rawType=$f->functionType())));

   let routed  = routeFunction($newF, getRoutingStrategyFromMappingAndRuntime(^Mapping(name = ''), ^meta::pure::runtime::Runtime()), $exeCtx, $vars, $extensions, $debug);              //TODO: check this remove empty mapping and runtime
   let temp    = $routed.functions->toOne();
   ^RoutingResult(
     functions       = ^$temp(expressionSequence = $initStatements.first.functions.expressionSequence->concatenate($temp.expressionSequence)->evaluateAndDeactivate()->toOneMany())->cast(@FunctionDefinition<Any>)
   );
}

function meta::pure::router::routeFunction(f:FunctionDefinition<Any>[1], routingStrategy:RoutingStrategy[1], exeCtx: ExecutionContext[1], inScopeVars:Map<String, List<Any>>[0..1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):RoutingResult[1]
{
   let fOpenVariables = $f->openVariableValues();
   let openVariables  = if($inScopeVars->isNotEmpty(),
                          | assert($fOpenVariables->keys()->intersection($inScopeVars)->isEmpty(),'Routing : unable to determine open variables for FunctionDefinition, suplied inScopeVars and FunctionDefinitionOpenVariables intersect');
                            $fOpenVariables->putAll($inScopeVars->toOne()->keyValues());,
                          | $fOpenVariables);
   
   let functionExpressions = $f.expressionSequence->evaluateAndDeactivate()->cast(@FunctionExpression);

   // Enriching Function Expressions with relevant info (mapping / binding / platform)
   print(if($debug.debug,|$debug.space+'Enriching Function Expressions with relevant info (mapping / binding / platform) and assigning routing strategy:\n',|''));
   let enrichedExpressions = enrichFunctionExpressions($functionExpressions, $routingStrategy, $exeCtx, $openVariables, $extensions, $debug);

   // Enriching Function Expressions with more information based on type of expression (subTypes of ExtendedRoutedValueSpecification)
   print(if($debug.debug,|$debug.space+'Enriching Function Expressions with strategy based info (mapping / binding / platform):\n',|''));
   let enrichedExpressionsAfterStrategyBasedEnrichment = $enrichedExpressions->map(exp | $exp->enrichExpressionWithStrategyBasedEnrichment($exeCtx, $extensions, $debug));

   // Clustering Function Expressions into clusters
   print(if($debug.debug,|$debug.space+'Clustering Function Expressions:\n',|''));
   let clusters = $enrichedExpressionsAfterStrategyBasedEnrichment->map(exp| $exp->clusterFunctionExpressions($openVariables, $exeCtx, $extensions, ^$debug(space = $debug.space + '  ')));

   // Wrapping Clustered Function Expressions into original function structure
   let result   = ^$f(expressionSequence = $clusters->toOneMany());
   print(if($debug.debug,|$result->asString()+'\n',|''));

   ^RoutingResult
   (
      functions       = $result
   );
}

function meta::pure::router::enrichExpressionWithStrategyBasedEnrichment(vs: ExtendedRoutedValueSpecification[1], exeCtx: ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]): ExtendedRoutedValueSpecification[1] // TODO: check this possibly move this as a property
{
   $vs->match([
     sm: StoreMappingRoutedValueSpecification[1]   | $sm->enrichStoreMappingRoutedValueSpecification($exeCtx, $extensions, $debug),
     ef: ExternalFormatRoutedValueSpecification[1] | $ef,
     pl: PlatformRoutedValueSpecification[1]       | $pl
   ])
}

function meta::pure::router::clusterFunctionExpressions(vs:ExtendedRoutedValueSpecification[1], openVariables:Map<String, List<Any>>[1], exeCtx: ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ClusteredValueSpecification[*] // TODO: check this possibly move this as a property
{
   print(if($debug.debug,|'\n'+$vs->asString()->debug($debug.space+'Processing: '),|''));

   $vs->match([
     sm: StoreMappingRoutedValueSpecification[1]   | $sm->doCluster($sm.mapping, $sm.runtime, $openVariables, $exeCtx, $extensions, $debug),
     ef: ExternalFormatRoutedValueSpecification[1] | $vs->cast(@ClusteredValueSpecification),
     pl: PlatformRoutedValueSpecification[1]       | $vs->cast(@ClusteredValueSpecification)
   ]);
}