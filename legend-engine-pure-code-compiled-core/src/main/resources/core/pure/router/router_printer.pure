// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::serialization::grammar::*;
import meta::pure::metamodel::path::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::graphFetch::*;
import meta::pure::mapping::*;
import meta::pure::runtime::*;
import meta::pure::router::printer::*;
import meta::pure::router::clustering::*;
import meta::pure::router::store::embedded::*;
import meta::pure::store::platform::metamodel::*;

Class meta::pure::router::printer::Pref
{
   format : Boolean[0..1];
   elementsFullyQualified : Boolean[0..1];
   useClusterIndex : Boolean[1];
   clusterIndex : ClusteredValueSpecification[*];
}

function meta::pure::router::printer::default():Pref[1]
{
   ^Pref(useClusterIndex=false)
}

function meta::pure::router::printer::asString(v:ValueSpecification[1]):String[1]
{
   $v->asString(default());
}

function meta::pure::router::printer::asString(f:Function<Any>[1]):String[1]
{
   $f->asString(default());
}

function meta::pure::router::printer::asString(f:Function<Any>[1], pref:Pref[1]):String[1]
{
   $f->match([
               q:AbstractProperty<Any>[1] | $q.name->toOne(),
               f:LambdaFunction<Any>[1]| let start = $f->functionType().parameters->evaluateAndDeactivate()->map(v|$v.name+':'+$v.genericType->printGenericType()+'['+$v.multiplicity->printMultiplicity()+']')->makeString(',')+' | ';
                                         $start + $f.expressionSequence->evaluateAndDeactivate()->map(e|$e->asString($pref)->replace('\n','\n'+space($start->length())))->makeString(';\n'+space($start->length()))+';';,
               f:ConcreteFunctionDefinition<Any>[1]|$f.name->toOne(),
               n:NativeFunction<Any>[1]|$n.name->toOne()
             ]);
}

function meta::pure::router::printer::asString(f:ValueSpecification[1], pref:Pref[1]):String[1]
{
   $f->match(
               [
                   v:Void[1] | 'VOID',
                   i:InstanceValue[1] | if($i.values->size() < 2,|'',|'[')+
                                          $i.values->map(v|$v->match([
                                                                     l:LambdaFunction<Any>[1]|$l->asString($pref),
                                                                     s:String[1] | '\''+$s+'\'',
                                                                     s:Integer[1] | $s->toString(),
                                                                     s:Boolean[1] | $s->toString(),
                                                                     s:Date[1] | $s->toString(),
                                                                     s:Float[1] | $s->toString(),
                                                                     p:Property<Nil,Any|1>[1]|$p.owner.name->toOne()+'~'+$p.name->toOne(),
                                                                     q:QualifiedProperty<Any>[1]|'(Qualified)'+$q.name->toOne(),
                                                                     a:ValueSpecification[1]|$a->asString($pref),
                                                                     p:Path<Nil,Any|*>[1]|'#/'+$p.start.rawType.name->toOne()+'/'+$p.path->map(prop|$prop->cast(@PropertyPathElement).property.name)->joinStrings('/')+'#';,
                                                                     a:meta::pure::functions::collection::AggregateValue<Nil,Any,Any>[1]|$a.mapFn->asString($pref) + ' -> agg('+$a.aggregateFn->asString($pref)+')',
                                                                     a:meta::pure::tds::AggregateValue<Any,Any>[1]|'\''+ $a.name + '\'-> agg(' +$a.mapFn->asString($pref)+', '+$a.aggregateFn->asString($pref)+')',
                                                                     a:meta::pure::graphFetch::GraphFetchTree[1]|meta::pure::graphFetch::routing::asString($a, false),
                                                                     b:KeyExpression[1]|'^KeyExpression(key = ' + $b.key->asString($pref) + ', value = '+ $b.expression->asString($pref) + ')',
                                                                     a:BasicColumnSpecification<Any>[1]| '^BasicColumnSpecification<' + $a->genericType().typeArguments.rawType.name->makeString() + '>(name = \'' + $a.name + '\', func = ' + $a.func->asString($pref) + ')';,
                                                                     r:RoutedVariablePlaceHolder[1]|'$'+$r.name,
                                                                     a:Class<Any>[1]|if (efq($pref),|$a->elementToPath(),|$a->genericType().rawType.name->toOne()+' '+$a->toString()),
                                                                     a:Any[1]|$a->genericType().rawType.name->toOne()+' '+$a->toString();
                                                                   ]))->joinStrings(', ')+if($i.values->size() < 2,|'',|']');,
                   v:VariableExpression[1] | '$'+$v.name,
                   s:SimpleFunctionExpression[1] | $s->asString($pref),
                   v:ExtendedRoutedValueSpecification[1]|'['+$v.id+' '+if($v.propertyMapping->isEmpty(),|'',|'@'+$v.propertyMapping->map(p|$p.property.name->toOne()+'('+$p.sourceSetImplementationId+'->'+$p.targetSetImplementationId+')')->joinStrings(',')+'@ ')+$v.sets.id->joinStrings(', ')+'/'+$v.value->asString($pref)+']',
                   r:NoSetRoutedValueSpecification[1]|'[Routed No Sets:'+$r.value->evaluateAndDeactivate()->asString($pref)+']',
                   f:FunctionRoutedValueSpecification[1]|'[Routed Func:'+$f.value->asString($pref)+']',
                   cs:ClassSetImplementationHolder[1]|'['+$cs.set.id+' '+$cs.value->asString($pref)+']',
                   c:ClusteredValueSpecification[1]|if ($pref.useClusterIndex,
                                                        |'[Node Index:'+$pref.clusterIndex->indexOf($c)->toString()+']',
                                                        |let start = '{'+if($c.store->instanceOf(PlatformStore),|'Platform', |if($c.store->instanceOf(EmbeddedStore),|'Embedded',|$c.store->toOne()->elementToPath()))+'> ';
                                                         $start+$c.val->asString($pref)->replace('\n','\n'+space($start->length()))+'}';
                                                    );,
                  t:TDSRoutedValueSpecification[1]|'[Table TDS'+$t.id+']'
               ]
            );
}

function meta::pure::router::printer::asString(f:FunctionExpression[1], pref:Pref[1]):String[1]
{
   $f.func->match(
      [
         p:Property<Nil,Any|*>[1]| $f.parametersValues->at(0)->asString($pref)+'.'+$p->id(),
         fd:Function<Any>[1]| let dispatch = [
                                    pair('getAll', f:FunctionExpression[1]|$f.parametersValues->at(0)->asString($pref)+'.all('+$f.parametersValues->tail()->map(v|$v->asString($pref))->joinStrings(', ')+')'),
                                    pair('equal', f:FunctionExpression[1]|$f.parametersValues->at(0)->asString($pref)+' == '+$f.parametersValues->at(1)->asString($pref)),
                                    pair('letFunction', f:FunctionExpression[1]|'let '+$f.parametersValues->at(0)->cast(@InstanceValue).values->at(0)->toString()+' = '+$f.parametersValues->at(1)->asString($pref))
                                  ];
                              let res = $dispatch->filter(p|$p.first == $f.func.functionName);
                              if ($res->size() == 1,
                                    |$res->at(0).second->eval($f->cast(@FunctionExpression)),
                                    |let qpBlock = if($fd->instanceOf(QualifiedProperty) && $fd->cast(@QualifiedProperty<Any>).expressionSequence->size() == 1,|'{ '+$fd->cast(@QualifiedProperty<Any>).expressionSequence->toOne()->asString($pref)+' }',|'');
                                     if($f.parametersValues->size() > 0,
                                          |let start = $f.parametersValues->at(0)->asString($pref)+if(f($pref),|'\n   ',|' ')+'-> ' + $f.func->functionName($pref) +'(';
                                           $start+$f.parametersValues->tail()->map(v|$v->asString($pref)->replace('\n','\n'+space($start->length())))->joinStrings(', ')+')'+$qpBlock;,
                                          |$f.func->functionName($pref)+'()'+$qpBlock;
                                         );
                                 );
         ]
   );
}

function meta::pure::router::printer::functionName(f:Function<Any>[1], pref:Pref[1]):String[1]
{
  if($pref->efq(),
    |$f.package->toOne()->elementToPath()+'::'+$f.functionName->toOne(),
    |$f.functionName->toOne()
  );
}

function meta::pure::router::printer::efq(pref:Pref[1]):Boolean[1]
{
  !$pref.elementsFullyQualified->isEmpty() && $pref.elementsFullyQualified->toOne()
}

function meta::pure::router::printer::f(pref:Pref[1]):Boolean[1]
{
  !$pref.format->isEmpty() && $pref.format->toOne()
}

function meta::pure::graphFetch::routing::asString(r: GraphFetchTree[1], multiLine: Boolean[1]):String[1]
{
   meta::pure::graphFetch::routing::asString($r, '', $multiLine);
}

function meta::pure::graphFetch::routing::asString(r: GraphFetchTree[1], spaceString: String[1], multiLine: Boolean[1]):String[1]
{
   let space = if($multiLine, | $spaceString, | '');
   let newLine = if($multiLine, | '\n', | '');
   $r->match([
      c: ClusteredGraphFetchTree[1] |
         let start = '{'+if($c.store->instanceOf(meta::pure::store::platform::metamodel::PlatformStore),|'Platform', |if($c.store->instanceOf(meta::pure::router::store::embedded::EmbeddedStore),|'Embedded',|$c.store->toOne()->elementToPath()))+'> ';
         $space+$start+$c.tree->asString($space, $multiLine)+'}';,

      rr: RoutedRootGraphFetchTree<Any>[1] |
         $space + $rr.sets.id->joinStrings('[', ', ', ' / ' + $rr.class->elementToPath() + ']') +
         if($rr.subTrees->isEmpty(), | '', | $rr.subTrees->map(x | $x->asString($space + '    ', $multiLine))->joinStrings(' {'+$newLine, ', '+$newLine, $newLine + $space + '}')),

      rr: RootGraphFetchTree<Any>[1] |
         $space + '#{'+$rr.class->elementToPath() +
         if($rr.subTrees->isEmpty(), | '}#', | $rr.subTrees->map(x | $x->asString($space + '    ', $multiLine))->joinStrings(' {'+$newLine, ', '+$newLine, $newLine + $space + '}}#')),

      rp: RoutedPropertyGraphFetchTree[1] |
         $space + if($rp.propertyMapping->isEmpty(), | '', | $rp.propertyMapping->map(p | '(' + $p.sourceSetImplementationId + '->' + $p.targetSetImplementationId + ')')->joinStrings('@', ', ', '@ ')) + $rp.sets.id->joinStrings('[', ', ', ' / ' + $rp.property.name->toOne() + ']') +
         if($rp.subTrees->isEmpty(), | '', | $rp.subTrees->map(x | $x->asString($space + '    ', $multiLine))->joinStrings(' {'+$newLine, ', '+$newLine, $newLine + $space + '}')),

      rp: PropertyGraphFetchTree[1] |
         $space +  $rp.property.name->toOne() + if($rp.property->instanceOf(QualifiedProperty), |'('+$rp.parameters->evaluateAndDeactivate()->map(p|$p->asString())->joinStrings(', ')+')', |'') +
         if($rp.subTrees->isEmpty(), | '', | $rp.subTrees->map(x | $x->asString($space + '    ', $multiLine))->joinStrings(' {'+$newLine, ', '+$newLine, $newLine + $space + '}'));
 ]); 
}

