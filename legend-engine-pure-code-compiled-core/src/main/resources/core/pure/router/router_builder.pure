// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::serialization::grammar::*;
import meta::pure::metamodel::path::*;
import meta::pure::router::builder::*;
import meta::pure::router::routing::*;
import meta::pure::mapping::*;
import meta::pure::runtime::*;

// To Remove ------------------------------------------
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::inMemory::*;
// ------------------------------------------ To Remove 

function meta::pure::mapping::propertyMappingsByPropertyName(i:EmbeddedSetImplementation[1],propertyName:String[1]):PropertyMapping[*]
{
   let propertyMapping = $i->match([o:OtherwiseEmbeddedSetImplementation[1]|$o.propertyMappingsByPropertyName($propertyName);,
                                    a:PropertyMappingsImplementation[1]| $a.propertyMappingsByPropertyName($propertyName);]);
   if($propertyMapping->isEmpty()
    ,| $i->match([ i:InlineEmbeddedSetImplementation[1] | $i.inlineEmbeddedProperty($propertyName),
                   o:OtherwiseEmbeddedSetImplementation[1] | $o.parent._classMappingByIdRecursive($o.otherwisePropertyMapping.targetSetImplementationId)->cast(@InstanceSetImplementation).propertyMappingsByPropertyName($propertyName);,
                   e:EmbeddedSetImplementation[1] | let mapping = $e.parent;
                                                    let sourceInfo = $mapping->sourceInformation();
                                                    if ($sourceInfo->isEmpty(),
                                                        | fail('Cannot find a mapping for property \'' + $propertyName + '\' in an embedded mapping for class ' + $e.class->elementToPath() + ' in the mapping ' + $mapping->elementToPath()),
                                                        | let si = $sourceInfo->toOne();
                                                          fail('Cannot find a mapping for property \'' + $propertyName + '\' in an embedded mapping for class ' + $e.class->elementToPath() + ' in the mapping ' + $mapping->elementToPath() + ' (source:'+ $si.source + ' line:' + $si.line->toString() + ' col:' + $si.column->toString() + ')'););
                                                    [];])
    ,| $propertyMapping
   );
}


function meta::pure::router::builder::isVoid(v:ValueSpecification[1]):Boolean[1]
{
   $v->instanceOf(Void) || ($v->instanceOf(ExtendedRoutedValueSpecification) && $v->cast(@ExtendedRoutedValueSpecification).value->instanceOf(Void));
}

function meta::pure::router::builder::propagateVoid(v:ValueSpecification[1], elements:ValueSpecification[*]):ValueSpecification[1]
{
   if ($elements->filter(e|$e->isVoid())->isEmpty(),|$v,|^Void(genericType=^GenericType(rawType=Nil), multiplicity=PureOne)->evaluateAndDeactivate())
}

function meta::pure::router::builder::build(v:ValueSpecification[1], l:List<PermutationSet>[*], last:SetImplementation[0..1], mapping:Mapping[1], exeCtx: ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ValueSpecification[1]
{  
    $v->match([
               f:FunctionExpression[1]| if($f->isSerialize($extensions),
                                                 | // Not routing tree part in serialize function call
                                                   if ($f.parametersValues->size() > 2 , 
                                                       | ^$f(parametersValues = [$f.parametersValues->evaluateAndDeactivate()->at(0)->build($l, $last, $mapping, $exeCtx, $extensions, $debug), $f.parametersValues->evaluateAndDeactivate()->at(1), $f.parametersValues->evaluateAndDeactivate()->at(2)]), 
                                                       | ^$f(parametersValues = [$f.parametersValues->evaluateAndDeactivate()->at(0)->build($l, $last, $mapping, $exeCtx, $extensions, $debug), $f.parametersValues->evaluateAndDeactivate()->at(1)])),
                                                 | let params = $f.parametersValues->evaluateAndDeactivate()->map(v|$v->build($l, $last, $mapping, $exeCtx, $extensions, $debug));

                                                   $f.func->match([q:QualifiedProperty<Any>[1] | let sequence = $q.expressionSequence->evaluateAndDeactivate()->map(ex|$ex->build($l, $last, $mapping, $exeCtx, $extensions, $debug));
                                                                                                 let nq = ^$q(expressionSequence = $sequence);
                                                                                                 ^$f(parametersValues=$params, func = $nq)->propagateVoid($params)->propagateVoid($nq.expressionSequence);,
                                                                   z:Any[1] | ^$f(parametersValues=$params)->propagateVoid($params);
                                                                  ]);
                                          ),
               r:ExtendedRoutedValueSpecification[1]| let s = $l.values->filter(v|$v.id->toString() == $r.id).sets->toOne();
                                                      let value = $r.value;
                                                      let final = if ($value->instanceOf(FunctionExpression) && ( ($value->cast(@FunctionExpression).func->instanceOf(Property) && !($value->cast(@FunctionExpression)->meta::pure::milestoning::isMilestonedGeneratedDateProperty())) || $value->cast(@FunctionExpression).func->instanceOf(QualifiedProperty)),
                                                         | let f = $value->cast(@FunctionExpression);
                                                           let params = $f.parametersValues->evaluateAndDeactivate()->map(v|$v->build($l, $last, $r.mapping, $exeCtx, $extensions, $debug));
                                                           $params->at(0)->match(
                                                              [
                                                                 e:ExtendedRoutedValueSpecification[1]|

                                                                    let propNameReturnTypePair =  $f.func->match([
                                                                          p:Property<Nil,Any|*>[1]|pair($p.name->toOne(), $p.classifierGenericType.typeArguments->at(1).rawType->toOne()),
                                                                          qp:QualifiedProperty<Any>[1]|pair($qp.name->toOne(), $qp.genericType.rawType->toOne())
                                                                          ])->toOne();
                                                                    let propertyName = $propNameReturnTypePair.first;
                                                                    let setImplementation = $params->at(0)->cast(@ExtendedRoutedValueSpecification).sets->toOne();
                                                                    let newParams = $setImplementation->match([
                                                                                              o:OtherwiseEmbeddedSetImplementation[1]| let pMapping = $o.propertyMappingsByPropertyName($propertyName);
                                                                                                                                       let oldP = $params->at(0)->cast(@ExtendedRoutedValueSpecification);
                                                                                                                                       if( $pMapping->isEmpty()
                                                                                                                                           ,|^$oldP(propertyMapping=$o.otherwisePropertyMapping);
                                                                                                                                           ,|^$oldP(propertyMapping=$o))->concatenate($params->tail());,
                                                                                              a:Any[1]| $params
                                                                             ]);
                                                                    if (!$propNameReturnTypePair.second->instanceOf(DataType),
                                                                        |  let source = $params->at(0)->cast(@ExtendedRoutedValueSpecification).sets->toOne();
                                                                           let target = $s->toOne();
                                                                           let sources = $source->resolveOperation($e.mapping);
                                                                           let targets = $target->resolveOperation($e.mapping);
                                                                           let propertyMappings = $sources->map(
                                                                                                      s|$targets->map(t|
                                                                                                         let targetIds = $e.mapping.allSuperSetImplementationIds($t.id);
                                                                                                         print(if($debug.debug,|$debug.space+'  Looking up propertyMapping for property "'+$propertyName+'" from "'+$s.id+'" to "'+$targetIds->joinStrings('[', ',', ']')+'"',|''));
                                                                                                         let resByProperty = $targetIds->map(targetId | $s->cast(@InstanceSetImplementation)->meta::pure::mapping::propertyMappingByPropertyNameAndTargetIdWithInlineResolution($propertyName, $targetId))->first();
                                                                                                         let res = if($resByProperty->isEmpty(),| $e.mapping._associationPropertyMappingsByIdRecursive($s.id)->filter(pm|$pm.targetSetImplementationId == $t.id && $pm.property.name==$propertyName),
                                                                                                                                                | $resByProperty);
                                                                                                         print(if($debug.debug,|$debug.space+' -> Found: '+$res->size()->toString(),|''));
                                                                                                         $res;
                                                                                                         );
                                                                                                      );


                                                                           let fWithBuiltExprSeq = if ($f.func->instanceOf(QualifiedProperty)
                                                                                                            ,| print(if($debug.debug,|$debug.space+'\n\t',|''));
                                                                                                               let qp = $f.func->cast(@QualifiedProperty<Any>)->evaluateAndDeactivate();
                                                                                                               let routedExprSeq=$qp.expressionSequence->map(es|$es->build($l, $r.sets->first(), $e.mapping, $exeCtx, $extensions, $debug));
                                                                                                               let newQp = ^$qp(expressionSequence=$routedExprSeq, owner=^PropertyOwner());
                                                                                                               ^$f(func=$newQp);
                                                                                                            ,|$f);

                                                                           let isMappedInHierarchy = {|!$sources->at(0).class->generalizations()->cast(@Class<Any>)->map(c|$e.mapping.rootClassMappingByClass($c))->filter(s|$s->instanceOf(InstanceSetImplementation))->map(s|$s->cast(@InstanceSetImplementation).propertyMappingByPropertyNameAndTargetId($propertyName, $targets->at(0).id))->isEmpty()};

                                                                           if ($value->cast(@FunctionExpression).func->instanceOf(Property) && $targets->size() == 1 && $sources->size() == 1 && $sources->toOne().id != 'embdedded_todo' && $targets->toOne().id != 'embdedded_todo' && $propertyMappings->isEmpty() && !$isMappedInHierarchy->eval(),
                                                                              |print(if($debug.debug,|$debug.space+' -> VOID\n',|''));
                                                                               ^Void(genericType=^GenericType(rawType=Nil), multiplicity=PureOne)->evaluateAndDeactivate();,
                                                                              |print(if($debug.debug,|$debug.space+'\n',|''));
                                                                               let res = ^$r(
                                                                                              sets = $s,
                                                                                              value = ^$fWithBuiltExprSeq(parametersValues=$newParams),
                                                                                              propertyMapping = $propertyMappings->removeDuplicates({a,b|$a.property == $b.property && $a.sourceSetImplementationId == $b.sourceSetImplementationId && $a.targetSetImplementationId == $b.targetSetImplementationId})
                                                                                          );
                                                                               if ($res.value->cast(@FunctionExpression).func->instanceOf(QualifiedProperty), | $res->propagateVoid($res.value->cast(@FunctionExpression).func->cast(@QualifiedProperty<Any>).expressionSequence);, | $res);
                                                                           );,
                                                                        |if($value->cast(@FunctionExpression).func->instanceOf(Property),
                                                                          |   print(if($debug.debug,|$debug.space+'   Looking up propertyMapping for property "'+$f.func->cast(@Property<Nil,Any|*>).name->toOne()+'" in "'+$params->at(0)->cast(@ExtendedRoutedValueSpecification).sets->toOne().id+'" \n',|''));
                                                                             let setImplementation = $params->at(0)->cast(@ExtendedRoutedValueSpecification).sets->toOne();
                                                                             let property = $f.func->cast(@Property<Nil,Any|*>);
                                                                             let propertyMappings = $setImplementation->match([
                                                                                               i:InstanceSetImplementation[1]|let pMapping = $i->propertyMappingsByPropertyName($propertyName);
                                                                                                                              if($pMapping->isEmpty() && ($i->isNoMappingPassThru($property) || $i->isNoMappingDefaultToEmpty($property) || $i->isPartOfMerge()  ),
                                                                                                                                 | [],
                                                                                                                                 {|  
                                                                                                                                    assert(!$pMapping->isEmpty(), | 'No property mapping found for: "'+$propertyName+'" in "'+$setImplementation.id+'" in the mapping "'+$setImplementation.parent->elementToPath()+'"');
                                                                                                                                    $pMapping->toOne();
                                                                                                                                 }
                                                                                                                              );,
                                                                                               o:OperationSetImplementation[1]|  $o->resolveOperation($e.mapping)->map(i|  let pMapping = $i->match([e:EmbeddedSetImplementation[1]| $e->propertyMappingsByPropertyName($propertyName),
                                                                                                                                                                                                   a:InstanceSetImplementation[1]| $i.propertyMappingsByPropertyName($propertyName)
                                                                                                                                                                                                ]);  
                                                                                                                                                                      if($pMapping->isEmpty() && ($i->isNoMappingPassThru($property) || $i->isNoMappingDefaultToEmpty($property) || $o->instanceOf(MergeOperationSetImplementation)),
                                                                                                                                                                        | [],                         
                                                                                                                                                                        {| assert(!$pMapping->isEmpty(), | 'No property mapping found for: ' + $propertyName + ' in mapping ' + $i.class.name->toOne() + '[' + $i.id + ']');
                                                                                                                                                                          $pMapping->toOne();
                                                                                                                                                                        }
                                                                                                                                                                      );
                                                                                                                                         )
                                                                                                                           ;]);

                                                                             print(if($debug.debug,|$debug.space+'  propertyMappings found "'+$propertyMappings->size()->toString() +'" \n',|''));

                                                                             ^$r(
                                                                               sets = $s,
                                                                               value = ^$f(parametersValues=$newParams),
                                                                               propertyMapping = $propertyMappings->removeDuplicates({a,b|$a.property == $b.property && $a.sourceSetImplementationId == $b.sourceSetImplementationId && $a.targetSetImplementationId == $b.targetSetImplementationId})
                                                                             );
                                                                          ,| ^$r(
                                                                                sets = $s,
                                                                                value = ^$f(parametersValues=$newParams)
                                                                             )
                                                                          )
                                                                    );,
                                                                 z:Void[1]|$z,
                                                                 v:ValueSpecification[1]|
                                                                    ^$r(
                                                                        sets = $s,
                                                                        value = $r.value->evaluateAndDeactivate()
                                                                     )
                                                              ]
                                                           );
                                                          ,
                                                         |^$r(
                                                            sets = $s,
                                                            value = $r.value->evaluateAndDeactivate()->build($l, $s, $r.mapping, $exeCtx, $extensions, $debug)
                                                          )
                                                      );
                                                      $final->propagateVoid($final);

                                                      ,
               z:NoSetRoutedValueSpecification[1]|$z.value,
               r:FunctionRoutedValueSpecification[1]|let built = $r.propertyMap.v->map(p|let id = $p.second->cast(@ExtendedRoutedValueSpecification).id;
                                                                                         let s = $l.values->filter(v|$v.id->toString() == $id).sets->toOne();
                                                                                         pair($p.first, $s);
                                                                                )->newMap()->cast(@Map<String, SetImplementation>);
                                                     let res = ^$r(value=$r.value->build($l, $last, $mapping, $exeCtx, $extensions, $debug),
                                                                   builtPropertyMap = $built
                                                               );
                                                     $res->propagateVoid($res.value);,
               i:InstanceValue[1]| let res = ^$i(values = $i.values->evaluateAndDeactivate()->map(iv|$iv->match(
                                                                                                            [
                                                                                                               r:meta::pure::graphFetch::RootGraphFetchTree<Any>[1] | $r->meta::pure::graphFetch::routing::routeRootGraphFetchTree($last->toOne(), $mapping, $exeCtx, $extensions),
                                                                                                               v:ValueSpecification[1]|let t = $v->build($l, $last, $mapping, $exeCtx, $extensions, $debug);
                                                                                                                                       $t->propagateVoid($t);,
                                                                                                               f:FunctionDefinition<Any>[1]|let sequence = $f.expressionSequence->evaluateAndDeactivate()->map(ex|$ex->build($l, $last, $mapping, $exeCtx, $extensions, $debug));
                                                                                                                                            if ($sequence->filter(p|$p->isVoid())->isEmpty(),|^$f(expressionSequence = $sequence),|^Void(genericType=^GenericType(rawType=Nil), multiplicity=PureOne)->evaluateAndDeactivate());,
                                                                                                               a:meta::pure::functions::collection::AggregateValue<Nil,Any,Any>[1]|let f = $a.mapFn;
                                                                                                                                                                                   let sequence = $f.expressionSequence->evaluateAndDeactivate()->map(ex|$ex->build($l, $last, $mapping, $exeCtx, $extensions, $debug));
                                                                                                                                                                                   $i.genericType->dynamicNew([^KeyValue(key='mapFn', value=^$f(expressionSequence=$sequence)),^KeyValue(key='aggregateFn', value=$a.aggregateFn)]);,
                                                                                                               a:meta::pure::tds::AggregateValue<Any,Any>[1]|let f = $a.mapFn;
                                                                                                                                                             let sequence = $f.expressionSequence->evaluateAndDeactivate()->map(ex|$ex->build($l, $last, $mapping, $exeCtx, $extensions, $debug));
                                                                                                                                                             $i.genericType->dynamicNew([^KeyValue(key='name', value=$a.name),
                                                                                                                                                                                                          ^KeyValue(key='mapFn', value=^$f(expressionSequence=$sequence)),
                                                                                                                                                                                                          ^KeyValue(key='aggregateFn', value=$a.aggregateFn)]);,
                                                                                                               a:Any[1]|$a
                                                                                                            ]
                                                                                                      );));
                                   $res->propagateVoid($res.values->filter(v|$v->instanceOf(ValueSpecification))->cast(@ValueSpecification));,
               v:VariableExpression[1]| $v,
               a:TDSRoutedValueSpecification[1]| $a->propagateVoid($a.value);
             ]);
}

function meta::pure::graphFetch::execution::isSerialize(fe:FunctionExpression[1], extensions:meta::pure::extension::Extension[*]):Boolean[1]
{
   $fe.func == serialize_T_MANY__RootGraphFetchTree_1__String_1_ || 
   $fe.func == serialize_Checked_MANY__RootGraphFetchTree_1__String_1_ ||
   $fe.func == serialize_T_MANY__RootGraphFetchTree_1__AlloySerializationConfig_1__String_1_ ||
   $fe.func == serialize_Checked_MANY__RootGraphFetchTree_1__AlloySerializationConfig_1__String_1_ ||
   $extensions.moduleExtension('platform')->cast(@meta::pure::store::platform::extension::PlatformStoreExtension).routing_extraIsSerialize->exists(f|$f->eval($fe));
}



