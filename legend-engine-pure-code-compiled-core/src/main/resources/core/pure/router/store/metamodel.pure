// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::mapping::*;
import meta::pure::router::clustering::*;
import meta::pure::router::metamodel::*;
import meta::pure::router::metamodel::clustering::*;
import meta::pure::router::routing::*;
import meta::pure::router::store::metamodel::*;
import meta::pure::router::store::metamodel::clustering::*;
import meta::pure::runtime::*;
import meta::pure::store::*;

Class meta::pure::router::store::metamodel::StoreRoutedValueSpecification extends ExtendedRoutedValueSpecification
{
   store              : Store[0..1];        //TODO: To be made mandatory in subsequent commits
   runtime            : Runtime[1];
}

Class meta::pure::router::store::metamodel::StoreMappingRoutedValueSpecification extends StoreRoutedValueSpecification
{
   mapping            : Mapping[1];
   processedChainSets : SetImplementation[*];
   sets               : SetImplementation[*];
   propertyMapping    : PropertyMapping[*];
}

Class meta::pure::router::store::metamodel::PermutationSet
{
   id : Integer[1];
   sets : SetImplementation[*];
}

Class meta::pure::router::store::metamodel::StoreRoutingStrategy extends RoutingStrategy
{
   runtime     : Runtime[1];
}

Class meta::pure::router::store::metamodel::StoreMappingRoutingStrategy extends StoreRoutingStrategy
{
   mapping     : Mapping[1];
   sets        : PermutationSet[*];
   setsByDepth : Map<String,PermutationSet>[1];
   toChooseSet : SetImplementation[0..1];
   
   classMappingsByClass:Map<Class<Any>,List<SetImplementation>>[1];         //TODO: Move to mapping

   classMappingsForClass(class:Class<Any>[1])
   {
      $this.classMappingsByClass->get($class)->map(l | $l.values)
   }:SetImplementation[*];
}

Class meta::pure::router::store::metamodel::clustering::StoreClusteredValueSpecification extends ClusteredValueSpecification
{
   s          : StoreContract[1];
   store      : Store[1];
   runtime    : Runtime[0..1];
}

Class meta::pure::router::store::metamodel::clustering::StoreMappingClusteredValueSpecification extends StoreClusteredValueSpecification
{
   mapping    : Mapping[1]; 
}

// =========================================================================================
// To be cleaned
// =========================================================================================

Class meta::pure::router::TDSRoutedValueSpecification extends RoutedValueSpecification
{
   id:String[1];
   runtime:Runtime[1];
   mapping:Mapping[1];
   store:meta::pure::store::Store[1];
   executionContext:ExecutionContext[1];
}

Class meta::pure::router::NoSetRoutedValueSpecification extends RoutedValueSpecification
{
}

Class meta::pure::router::FunctionRoutedValueSpecification extends RoutedValueSpecification
{
   propertyMap : PropertyMap[0..1];
   builtPropertyMap : Map<String, SetImplementation>[0..1];
   originalFunction : FunctionDefinition<Any>[1];
}

Class meta::pure::router::ClassSetImplementationHolder extends RoutedValueSpecification
{
   set : SetImplementation[1];
}

// =========================================================================================
// Graph Fetch Tree Models
// =========================================================================================

###Pure
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::mapping::*;
import meta::pure::runtime::*;
import meta::pure::store::*;

Class meta::pure::graphFetch::routing::RoutedGraphFetchTree extends GraphFetchTree
{
   sets : SetImplementation[*];
   requiredQualifiedProperties: QualifiedProperty<Any>[*];
   constraintsExclusions: String[*];
}

Class meta::pure::graphFetch::routing::RoutedRootGraphFetchTree<T> extends RoutedGraphFetchTree, RootGraphFetchTree<T>
{
}

Class meta::pure::graphFetch::routing::RoutedPropertyGraphFetchTree extends RoutedGraphFetchTree, PropertyGraphFetchTree
{
   propertyMapping : PropertyMapping[*];
   isXStoreDependentPrimitiveQualifier : Boolean[0..1];
}

Class meta::pure::graphFetch::routing::StoreMappingClusteredGraphFetchTree extends ClusteredGraphFetchTree
{
   s        : StoreContract[1];
   store    : Store[1];
   runtime  : Runtime[0..1];
   mapping  : Mapping[0..1];
}
