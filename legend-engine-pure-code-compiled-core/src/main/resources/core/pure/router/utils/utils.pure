// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::router::clustering::*;
import meta::pure::router::metamodel::*;
import meta::pure::router::metamodel::clustering::*;
import meta::pure::router::utils::*;

function meta::pure::router::utils::deepByPassRouterInfo(value:Any[1]):Any[1]
{
   $value->evaluateAndDeactivate()->match([r:ExtendedRoutedValueSpecification[1] | $r.value->deepByPassRouterInfo(),
                                           v:NoSetRoutedValueSpecification[1]    | $v.value->deepByPassRouterInfo(),
                                           f:FunctionRoutedValueSpecification[1] | $f.value->deepByPassRouterInfo(),
                                           e:FunctionExpression[1]               | ^$e(parametersValues = $e->evaluateAndDeactivate().parametersValues->map(x | $x->deepByPassRouterInfo())->cast(@ValueSpecification)),
                                           f:FunctionDefinition<Any>[1]          | ^$f(expressionSequence=$f.expressionSequence->map(x | $x->deepByPassRouterInfo())->cast(@ValueSpecification)),
                                           i:InstanceValue[1]                    | ^$i(values = $i.values->map(x | $x->deepByPassRouterInfo())),
                                           c:ClusteredValueSpecification[1]      | ^$c(val = $c.val->deepByPassRouterInfo()->cast(@ValueSpecification)),
                                           n:NonExecutableValueSpecification[1]  | ^$n(values = $n.values->map(x | $x->deepByPassRouterInfo())->cast(@ValueSpecification)),
                                           a:Any[1]                              | $a]);
}

function meta::pure::router::utils::byPassValueSpecificationWrapper(v:ValueSpecification[1]):ValueSpecification[1]
{
   $v->match([ e: RoutedValueSpecification[1]|byPassValueSpecificationWrapper($e.value),
               c: ClusteredValueSpecification[1]|byPassValueSpecificationWrapper($c.val),
               e: ExtendedRoutedValueSpecification[1]|byPassValueSpecificationWrapper($e.value),
               n: NonExecutableValueSpecification[1]|byPassValueSpecificationWrapper($n.values->toOne()->cast(@ValueSpecification)),
               v: ValueSpecification[1] | $v]);
}

function meta::pure::router::utils::extractLetVariableName(v:ValueSpecification[1]):String[0..1]
{
   if($v->isLetFunction(),| $v->cast(@FunctionExpression).parametersValues->evaluateAndDeactivate()->at(0)->cast(@InstanceValue).values->at(0)->cast(@String),| []);
}

function meta::pure::router::utils::isSerializeOnGraphFetch(vs:ValueSpecification[1]):Boolean[1]
{
   $vs->instanceOf(FunctionExpression) && $vs->cast(@FunctionExpression)->meta::pure::graphFetch::execution::isSerialize() &&
   $vs->cast(@FunctionExpression).parametersValues->evaluateAndDeactivate()->at(0)->byPassRouterInfo()->instanceOf(FunctionExpression) &&
   $vs->cast(@FunctionExpression).parametersValues->evaluateAndDeactivate()->at(0)->byPassRouterInfo()->cast(@FunctionExpression).func->in(meta::pure::graphFetch::execution::graphFetchFunctions());
}

function meta::pure::router::utils::isLetFunction(fe:ValueSpecification[1]):Boolean[1]
{
   $fe->instanceOf(FunctionExpression) && $fe->cast(@FunctionExpression).func == meta::pure::functions::lang::letFunction_String_1__T_m__T_m_
}

function meta::pure::router::utils::isUnionOnGraphFetch(vs:ValueSpecification[1]):Boolean[1]
{
   isUnionOnGraphFetch($vs, false);
}

function meta::pure::router::utils::isUnionOnGraphFetch(vs:ValueSpecification[1], recurse:Boolean[1]):Boolean[1]
{
   let unionFunctions = [concatenate_T_MANY__T_MANY__T_MANY_, union_T_MANY__T_MANY__T_MANY_];

   $vs->instanceOf(FunctionExpression)
   && $unionFunctions->contains($vs->cast(@FunctionExpression).func)
   && $vs->cast(@FunctionExpression).parametersValues->map(v|$v->byPassValueSpecificationWrapper())
                                                    ->forAll(v| $v->instanceOf(FunctionExpression)
                                                             && ($v->cast(@FunctionExpression).func->in(meta::pure::graphFetch::execution::graphFetchFunctions()) || ($recurse && $v->isUnionOnGraphFetch($recurse))));
}

function meta::pure::router::utils::isMergeOnGraphFetch(vs:ValueSpecification[1]):Boolean[1]
{
   let mergefunc = mergeInstance_Any_MANY__Any_1_;
   $vs->instanceOf(FunctionExpression) && $mergefunc == ($vs->cast(@FunctionExpression).func) && $vs->cast(@FunctionExpression).parametersValues->at(0)->cast(@InstanceValue).values->cast(@ValueSpecification)->map(v|$v->byPassRouterInfo())->forAll(v|$v->instanceOf(FunctionExpression) && $v->cast(@FunctionExpression).func->in(meta::pure::graphFetch::execution::graphFetchFunctions()));
}
