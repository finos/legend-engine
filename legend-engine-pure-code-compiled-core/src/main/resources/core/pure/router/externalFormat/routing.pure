// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::router::clustering::*;
import meta::pure::router::externalFormat::metamodel::*;
import meta::pure::router::externalFormat::metamodel::clustering::*;
import meta::pure::router::externalFormat::clustering::*;
import meta::pure::router::externalFormat::routing::*;
import meta::pure::router::metamodel::*;
import meta::pure::router::metamodel::clustering::*;
import meta::pure::router::printer::*;
import meta::pure::router::routing::*;
import meta::pure::runtime::*;

// =========================================================================================
// ExternalFormat Routing Strategy Builder Helper
// =========================================================================================

function meta::pure::router::externalFormat::routing::getExternalFormatRoutingStrategy(binding:meta::external::shared::format::binding::Binding[1]):ExternalFormatRoutingStrategy[1]
{
  ^ExternalFormatRoutingStrategy(binding         = $binding,
                                 processClass    = meta::pure::router::externalFormat::routing::processClass_Class_1__InstanceValue_1__RoutingState_1__ExecutionContext_1__DebugContext_1__RoutingState_1_,
                                 processProperty = meta::pure::router::externalFormat::routing::processProperty_Property_1__FunctionExpression_1__RoutingState_1__ExecutionContext_1__Map_1__Map_1__Extension_MANY__DebugContext_1__RoutingState_1_,
                                 wrapValueSpec   = meta::pure::router::externalFormat::routing::wrapValueSpecification_ValueSpecification_1__RoutingStrategy_1__String_1__ExecutionContext_1__Extension_MANY__DebugContext_1__ExtendedRoutedValueSpecification_1_,
                                 toString        = {strategy:RoutingStrategy[1] | 'ExternalFormatRoutingStrategy'});
}

function <<access.private>> meta::pure::router::externalFormat::routing::processClass(c:Class<Any>[1], i:InstanceValue[1], state:RoutingState[1], executionContext:ExecutionContext[1], debug:DebugContext[1]):RoutingState[1]
{
   print(if($debug.debug,|$debug.space+'~>C) (ExternalFormatRoutingStrategy) '+$state.value->toOne()->toString()+'\n',|''));
   $state;
}

function <<access.private>> meta::pure::router::externalFormat::routing::processProperty(p:Property<Nil,Any|*>[1], fe:FunctionExpression[1], state:RoutingState[1], executionContext:ExecutionContext[1], vars:Map<VariableExpression, ValueSpecification>[1], inScopeVars:Map<String, List<Any>>[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):RoutingState[1]
{
   fail('Property processing not supported by ExternalFormatRoutingStrategy!!');
   $state;
}

function <<access.private>> meta::pure::router::externalFormat::routing::wrapValueSpecification(value:ValueSpecification[1], routingStrategy:RoutingStrategy[1], id:String[1], executionContext:ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ExtendedRoutedValueSpecification[1]
{
   ^ExternalFormatRoutedValueSpecification
   (
      genericType = $value.genericType,
      multiplicity = $value.multiplicity,
      id = $id,
      executionContext = $executionContext,
      value = $value,
      routingStrategy = $routingStrategy,
      binding = $routingStrategy->cast(@ExternalFormatRoutingStrategy).binding
   );
}

// ===================================================================================
// Special Functions
// ===================================================================================

function meta::pure::router::externalFormat::routing::specializedFunctionExpressionRouterProcessorForExternalFormat():Pair<Function<{FunctionExpression[1]->Boolean[1]}>, Function<{Function<Any>[1], FunctionExpression[1], RoutingState[1], ExecutionContext[1], Map<VariableExpression, ValueSpecification>[1], Map<String, List<Any>>[1], meta::pure::extension::Extension[*], DebugContext[1]->RoutingState[1]}>>[*]
{
  [
    pair(fe:FunctionExpression[1] | $fe.func->in(meta::external::shared::format::functions::externalizeFunctions()),
        {f:Function<Any>[1], fe:FunctionExpression[1], state:RoutingState[1], executionContext:ExecutionContext[1], vars:Map<VariableExpression, ValueSpecification>[1], inScopeVars:Map<String, List<Any>>[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1] |
            let processedFirstParam  = processCollection($state, $fe.parametersValues->at(0), $executionContext, $vars, $inScopeVars, {x:Any[1] | true}, $extensions, $debug)->toOne();
            let processedExternalize = ^$fe(parametersValues = $processedFirstParam.value->cast(@ValueSpecification)->concatenate($fe.parametersValues->tail()));
            let binding              = $fe.parametersValues->at(1)->cast(@InstanceValue).values->at(0)->match([
                                                                      b:meta::external::shared::format::binding::Binding[1] | $b,
                                                                      s:String[1] | ^meta::external::shared::format::binding::Binding(name = 'generatedBinding', package = meta::pure::router::externalFormat::routing, contentType = $s, modelUnit = ^meta::pure::model::unit::ModelUnit(packageableElementIncludes = $fe.parametersValues->at(0).genericType.rawType->cast(@Class<Any>)))
                                                                    ]);
            let routedExternalize    = ^ExternalFormatRoutedValueSpecification
                                        (
                                          multiplicity    = $f->functionReturnMultiplicity(),
                                          genericType     = $f->functionReturnType(),
                                          executionContext= $executionContext,
                                          id              = $fe->id(),
                                          routingStrategy = getExternalFormatRoutingStrategy($binding),
                                          binding         = $binding,
                                          value           = $processedExternalize
                                        );
            print(if($debug.debug,|$debug.space+'~>Externalize Routing Done',|''));          
            ^$processedFirstParam(routingStrategy = getExternalFormatRoutingStrategy($binding),
                                  value           = $routedExternalize);
        }
    ),
    pair(fe:FunctionExpression[1] | $fe.func->in(meta::external::shared::format::functions::internalizeFunctions()),
        {f:Function<Any>[1], fe:FunctionExpression[1], state:RoutingState[1], executionContext:ExecutionContext[1], vars:Map<VariableExpression, ValueSpecification>[1], inScopeVars:Map<String, List<Any>>[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1] |
            let binding              = $fe.parametersValues->at(1)->cast(@InstanceValue).values->at(0)->match([
                                                                      b:meta::external::shared::format::binding::Binding[1] | $b,
                                                                      s:String[1] | ^meta::external::shared::format::binding::Binding(name = 'generatedBinding', package = meta::pure::router::externalFormat::routing, contentType = $s, modelUnit = ^meta::pure::model::unit::ModelUnit(packageableElementIncludes = $fe.parametersValues->at(0).genericType.rawType->cast(@Class<Any>)))
                                                                    ]);
            let routingStrategy      = getExternalFormatRoutingStrategy($binding);
            let processedFirstParam  = processCollection(^$state(routingStrategy = $routingStrategy), $fe.parametersValues->at(0), $executionContext, $vars, $inScopeVars, {x:Any[1] | true}, $extensions, $debug)->toOne();
            let processedInternalize = ^$fe(parametersValues = $processedFirstParam.value->cast(@ValueSpecification)->concatenate($fe.parametersValues->tail()));
            let routedInternalize    = ^ExternalFormatRoutedValueSpecification
                                        (
                                          multiplicity    = $f->functionReturnMultiplicity(),
                                          genericType     = $f->functionReturnType(),
                                          executionContext= $executionContext,
                                          id              = $fe->id(),
                                          routingStrategy = $routingStrategy,
                                          binding         = $binding,
                                          value           = $processedInternalize
                                        );
            print(if($debug.debug,|$debug.space+'~>Internalize Routing Done',|''));          
            ^$processedFirstParam(routingStrategy = $routingStrategy,
                                  value           = $routedInternalize);
        }
    )
  ]
}

// =========================================================================================
// ExternalFormatRoutedValueSpecification enrichment Strategy
// =========================================================================================

function meta::pure::router::externalFormat::routing::enrichExternalFormatRoutedValueSpecification(v:ValueSpecification[1], exeCtx:ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ValueSpecification[1]
{
   $v->match([f:FunctionExpression[1]                | ^$f(parametersValues = $f.parametersValues->evaluateAndDeactivate()->map(v|$v->enrichExternalFormatRoutedValueSpecification($exeCtx, $extensions, $debug))), 
              i:InstanceValue[1]                     | let updatedValues = $i.values->map(val | $val->match([
                                                                                                        v:ValueSpecification[1]      | $v->enrichExternalFormatRoutedValueSpecification($exeCtx, $extensions, $debug),
                                                                                                        f:FunctionDefinition<Any>[1] | ^$f(expressionSequence = $f.expressionSequence->map(e | $e->enrichExternalFormatRoutedValueSpecification($exeCtx, $extensions, $debug))),
                                                                                                        a:Any[1] | $a
                                                                                                      ]));
                                                       ^$i(values = $updatedValues);,
               v:VariableExpression[1]               | $v,
               e:ExtendedRoutedValueSpecification[1] | $e->enrichExpressionWithStrategyBasedEnrichment($exeCtx, $extensions, $debug)
      ]
   );
}

// =========================================================================================
// ExternalFormatRoutedValueSpecification clustering Strategy
// =========================================================================================

function meta::pure::router::externalFormat::clustering::cluster(v:ValueSpecification[1], binding:meta::external::shared::format::binding::Binding[1], openVariables:Map<String, List<Any>>[1], exeCtx:ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ValueSpecification[*]
{
   $v->match([f:FunctionExpression[1]                | let params = $f.parametersValues->evaluateAndDeactivate()->map(v|$v->cluster($binding, $openVariables, $exeCtx, $extensions, ^$debug(space = $debug.space+'   ')));    
                                                       if($f->externalFormatSupportsFunction(),
                                                         |wrapValueSpecByExternalFormatCluster(^$f(parametersValues = $params->map(p | $p->match([ef:ExternalFormatClusteredValueSpecification[1]|$ef.val, vs:ValueSpecification[1]| $vs]))), $binding, $openVariables, $exeCtx),
                                                         |meta::pure::router::platform::clustering::wrapValueSpecByPlatformCluster(^$f(parametersValues = $params), $openVariables, $exeCtx))->evaluateAndDeactivate();,
              i:InstanceValue[1]                     | if($i->isOneFunctionDefinition(),
                                                          | let f           = $i.values->at(0)->cast(@FunctionDefinition<Any>)->evaluateAndDeactivate();
                                                            let expressions = $f.expressionSequence->evaluateAndDeactivate()->map(v|print(if($debug.debug,|'\n'+$v->asString()->debug($debug.space+'Processing: '),|''));
                                                                                                                                         $v->cluster($binding, $openVariables, $exeCtx, $extensions, ^$debug(space = $debug.space+'   ')););
                                                            let unique      = $expressions->filter(p|$p->instanceOf(ClusteredValueSpecification))->cast(@ClusteredValueSpecification)->removeDuplicates({x, y | areClustersCompatible($x, $y, $extensions)});
                                                            if($unique->size() == 0,
                                                              | ^$i(values=^$f(expressionSequence = $expressions->toOneMany())),
                                                              | if($unique->size() == 1,
                                                                    | let one = $unique->toOne();
                                                                      print(if($debug.debug, |$i->evaluateAndDeactivate()->asString()->debug($debug.space+'Func: '),|''));
                                                                      let res = ^$one(
                                                                                  genericType  = $i.genericType,
                                                                                  multiplicity = $i.multiplicity,
                                                                                  val = ^$i(values=^$f(expressionSequence = $expressions->evaluateAndDeactivate()->map(p|$p->match([c:ClusteredValueSpecification[1]|$c.val;, a:ValueSpecification[1]|$a]))->toOneMany()))
                                                                                );
                                                                      print(if($debug.debug, |$res->evaluateAndDeactivate()->asString()->debug($debug.space+'~> '),|''));
                                                                      $res;,
                                                                    | print(if($debug.debug, |$i->evaluateAndDeactivate()->asString()->debug($debug.space+'Func: '), |''));
                                                                      let res = meta::pure::router::platform::clustering::wrapValueSpecByPlatformCluster(^$i(values=^$f(expressionSequence = $expressions->toOneMany())), $openVariables, $exeCtx);
                                                                      print(if($debug.debug, |$res->evaluateAndDeactivate()->asString()->debug($debug.space+'~> '),|''));
                                                                      $res;
                                                                )
                                                              );,
                                                          | print(if($debug.debug,|$i->asString()->debug($debug.space+'Constant: '),|''));
                                                            let values       = $i.values->evaluateAndDeactivate()->map(m|if($m->instanceOf(ValueSpecification),
                                                                                                                            | $m->cast(@ValueSpecification)->cluster($binding, $openVariables, $exeCtx, $extensions, $debug),
                                                                                                                            | $m));
                                                            let unique       = $values->filter(p|$p->instanceOf(ClusteredValueSpecification))->cast(@ClusteredValueSpecification)->removeDuplicates({x, y | areClustersCompatible($x, $y, $extensions)});
                                                            let res          = if($unique->size() == 1,
                                                                                  | let one = $unique->toOne();
                                                                                    ^$one(
                                                                                      genericType  = $i.genericType,
                                                                                      multiplicity = $i.multiplicity,
                                                                                      val          = ^$i(values = $values->evaluateAndDeactivate()->map(p|$p->match([c:ClusteredValueSpecification[1]|$c.val;, a:Any[1]|$a])))
                                                                                    );,
                                                                                  | ^$i(values = $values);
                                                                              );
                                                            print(if($debug.debug,|$res->asString()->debug($debug.space+'~> '),|''));
                                                            $res;
                                                       );,
               v:VariableExpression[1]               | $v,
               e:ExtendedRoutedValueSpecification[1] | $e->clusterFunctionExpressions($openVariables, $exeCtx, $extensions, $debug),
               c:ClusteredValueSpecification[1]      | $c 
      ]
   );
}

function meta::pure::router::externalFormat::clustering::wrapValueSpecByExternalFormatCluster(vs:ValueSpecification[1], binding:meta::external::shared::format::binding::Binding[1], openVariables:Map<String, List<Any>>[1], exeCtx:ExecutionContext[1]):ExternalFormatClusteredValueSpecification[1]
{
  ^ExternalFormatClusteredValueSpecification
  (
    genericType  = $vs.genericType,
    multiplicity = $vs.multiplicity,
    openVars     = $openVariables,
    exeCtx       = $exeCtx,
    binding      = $binding,
    val          = $vs,
    executable   = true
  )
}

function meta::pure::router::externalFormat::clustering::externalFormatSupportsFunction(f:FunctionExpression[1]):Boolean[1]
{
  let supportedFunctions = meta::external::shared::format::functions::internalizeFunctions()
                            ->concatenate(meta::external::shared::format::functions::externalizeFunctions())
                            ->concatenate(meta::pure::graphFetch::execution::graphFetchFunctions())
                            ->concatenate(meta::pure::dataQuality::checked_T_MANY__Checked_MANY_);
  $f.func->in($supportedFunctions);
}