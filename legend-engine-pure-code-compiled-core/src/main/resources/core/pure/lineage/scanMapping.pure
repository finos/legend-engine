// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::lineage::scanMapping::*;
import meta::pure::mapping::*;

function meta::pure::lineage::scanMapping::scanMapping(val:Any[1]):Mapping[*]
{
   $val->scanMappingInternal()->removeDuplicates();
}

function <<access.private>> meta::pure::lineage::scanMapping::scanMappingInternal(val:Any[1]):Mapping[*]
{
   $val->match([
      l:LambdaFunction<Any>[1]|$l->scanMappingFunctionDefinition(),
      f:FunctionDefinition<Any>[1]|$f->scanMappingFunctionDefinition(),
      n:NativeFunction<Any>[1]|[],
      fe:FunctionExpression[1]|let fromParams = $fe.parametersValues->map(pw|$pw->scanMappingInternal());
                                 if($fe.func->toOne()->elementToPath()->startsWith('meta::'), |[], |$fe.func->scanMappingInternal())->concatenate($fromParams);,
      i:InstanceValue[1]|$i.values->map(i|$i->scanMappingInternal());,
      p:VariableExpression[1]|[],
      p:KeyExpression[1]|[],
      p:Mapping[1]|$p,
      c:Class<Any>[1]|[],
      p:Property<Nil,Any|*>[1]|[],
      e:Enumeration<Any>[1]|[],
      p:String[1]|[],
      p:Boolean[1]|[],
      p:Integer[1]|[],
      a:Any[1]|[]
   ]
  );
}

function <<access.private>> meta::pure::lineage::scanMapping::scanMappingFunctionDefinition(f:FunctionDefinition<Any>[1]):Mapping[*]
{
   $f.expressionSequence->evaluateAndDeactivate()->map(a|$a->scanMappingInternal());
}
