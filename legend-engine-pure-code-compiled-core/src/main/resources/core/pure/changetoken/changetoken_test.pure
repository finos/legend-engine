// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::changetoken::*;
import meta::pure::constraints::functions::*;

function <<test.Test>> meta::pure::changetoken::tests::testToString():Boolean[1]
{
  assertEquals(
    'AddField(class=meta::domain::MyClass,fieldName=myNewField,fieldType=Number,'
      + 'defaultValue=ConstValue(value=100),safeCast=true)',
    ^AddField(
      fieldName='myNewField', fieldType='Number', class='meta::domain::MyClass',
      defaultValue=^ConstValue(value=100), safeCast=true)->toString()
  );
}

function <<test.Test>> meta::pure::changetoken::tests::testConstraint():Boolean[1]
{
  assertValidConstraint(Versions, [^KeyValue(key='versions', value=[^Version(version='1'), ^Version(version='2', prevVersion='1')])], 'linearVersions');
  assertInvalidConstraint(Versions, [^KeyValue(key='versions', value=[^Version(version='1'), ^Version(version='2')])], 'linearVersions');
}
