// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::legend::service::metamodel::*;

import meta::pure::executionPlan::*;

import meta::pure::mapping::*;

import meta::pure::runtime::*;

Class meta::legend::service::metamodel::Service extends PackageableElement, meta::pure::test::Testable
[
   multiExecutionKeyMustBePartOfPattern: if($this.execution->instanceOf(meta::legend::service::metamodel::PureMultiExecution),|$this.pattern->contains('{'+ $this.execution->cast(@PureMultiExecution).executionKey+'}'),|true),

   executionAndTestTypesMatch: if($this.execution->instanceOf(meta::legend::service::metamodel::PureMultiExecution),
                                  | assert($this.test->instanceOf(MultiExecutionTest),'Service with multiple executions requires a MultiExecution test'),
                                  |if($this.execution->instanceOf(meta::legend::service::metamodel::PureSingleExecution),
                                      |assert($this.test->instanceOf(SingleExecutionTest),'Service with a single execution requires a SingleExecution test'),
                                      |true)
                                  ),

   patternMustStartWithBackslash: $this.pattern->startsWith('/')
]
{
   pattern : String[1];
   owners : String[*];
   autoActivateUpdates : Boolean[1];
   documentation : String[1];
   execution : Execution[1];
   tags: ServiceTag[*];

   <<doc.deprecated>> test: Test[1];
}

Class meta::legend::service::metamodel::ServiceTag
{
   name: String[1];
   value: String[1];
}

Class meta::legend::service::metamodel::Execution
{
}

Class meta::legend::service::metamodel::PureExecution extends Execution
{
   func : FunctionDefinition<Any>[1];
}

Class meta::legend::service::metamodel::PureSingleExecution extends PureExecution
{
   mapping : Mapping[1];
   runtime : Runtime[1];
   executionOptions : ExecutionOption[*];
}

Class meta::legend::service::metamodel::PureMultiExecution extends PureExecution
{
   executionKey : String[1];

   executionParameters:KeyedExecutionParameter[*];

   getExecution(key:String[1]){$this.getExecutionForgiving($key)->toOne()}:KeyedExecutionParameter[1];

   getExecutionForgiving(key:String[1]){$this.executionParameters->filter(e|$e.key==$key)->first()}:KeyedExecutionParameter[0..1];
}

Class  meta::legend::service::metamodel::KeyedExecutionParameter
{
   key:String[1];
   mapping : Mapping[1];
   runtime : Runtime[1];
   executionOptions : ExecutionOption[*];
}

// Test Model
Class meta::legend::service::metamodel::ServiceTestSuite extends meta::pure::test::TestSuite
{
  testData   : TestData[1];
}

Class meta::legend::service::metamodel::ServiceTest extends meta::pure::test::AtomicTest
{
  parameters : ParameterValue[*];
}

Class meta::legend::service::metamodel::ParameterValue
{
  name       : String[1];
  value      : Any[*];
}

Class meta::legend::service::metamodel::TestData
{
  connectionsTestData : ConnectionTestData[*];
}

Class meta::legend::service::metamodel::ConnectionTestData
{
  connectionId : String[1];
  testData     : meta::pure::data::EmbeddedData[1];
}

// Legacy Test Model
Class <<doc.deprecated>> meta::legend::service::metamodel::Test
{
}

Class <<doc.deprecated>> meta::legend::service::metamodel::SingleExecutionTest extends Test
{
   data : String[1];
   asserts : TestContainer[1..*];
}

Class <<doc.deprecated>> meta::legend::service::metamodel::MultiExecutionTest extends Test
{
   tests: KeyedSingleExecutionTest[*];

   getResultForgiving(key:String[1]){$this.tests->filter(r|$r.key==$key)->first()}:KeyedSingleExecutionTest[0..1];

   getResult(key:String[1]){$this.getResultForgiving($key)->toOne() }:KeyedSingleExecutionTest[1];
}

Class <<doc.deprecated>> meta::legend::service::metamodel::KeyedSingleExecutionTest extends SingleExecutionTest
{
   key:String[1];
}

Class <<doc.deprecated>> meta::legend::service::metamodel::TestContainer
{
   parametersValues : Any[*];
   assert:FunctionDefinition<{Result<Any|*>[1]->Boolean[1]}>[1];
}