// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::legend::service::metamodel::*;

import meta::pure::executionPlan::*;

import meta::pure::mapping::*;

import meta::pure::runtime::*;

Class meta::legend::service::metamodel::Service extends PackageableElement, meta::pure::test::Testable
[
   multiExecutionKeyMustBePartOfPattern: if($this.execution->instanceOf(meta::legend::service::metamodel::PureMultiExecution),|$this.pattern->contains('{'+ $this.execution->cast(@PureMultiExecution).executionKey+'}'),|true),

   executionAndTestTypesMatch: if($this.execution->instanceOf(meta::legend::service::metamodel::PureMultiExecution),
                                  | assert($this.test->instanceOf(MultiExecutionTest),'Service with multiple executions requires a MultiExecution test'),
                                  |if($this.execution->instanceOf(meta::legend::service::metamodel::PureSingleExecution),
                                      |assert($this.test->instanceOf(SingleExecutionTest),'Service with a single execution requires a SingleExecution test'),
                                      |true)
                                  ),

   patternMustStartWithBackslash: $this.pattern->startsWith('/')
]
{
   pattern : String[1];
   owners : String[*];
   autoActivateUpdates : Boolean[1];
   documentation : String[1];
   execution : Execution[1];
   tags: ServiceTag[*];
   postValidations: PostValidation<Any|*>[*];

   <<doc.deprecated>> test: Test[1];
}

Class meta::legend::service::metamodel::ServiceTag
{
   name: String[1];
   value: String[1];
}

Class meta::legend::service::metamodel::Execution
{
}

Class meta::legend::service::metamodel::PureExecution extends Execution
{
   func : FunctionDefinition<Any>[1];
}

Class meta::legend::service::metamodel::PureSingleExecution extends PureExecution
{
   mapping : Mapping[0..1];
   runtime : Runtime[0..1];
   executionOptions : ExecutionOption[*];
}

Class meta::legend::service::metamodel::PureMultiExecution extends PureExecution
{
   executionKey : String[1];

   executionParameters:KeyedExecutionParameter[*];

   getExecution(key:String[1]){$this.getExecutionForgiving($key)->toOne()}:KeyedExecutionParameter[1];

   getExecutionForgiving(key:String[1]){$this.executionParameters->filter(e|$e.key==$key)->first()}:KeyedExecutionParameter[0..1];
}

Class  meta::legend::service::metamodel::KeyedExecutionParameter
{
   key:String[1];
   mapping : Mapping[1];
   runtime : Runtime[1];
   executionOptions : ExecutionOption[*];
}

// Test Model
Class meta::legend::service::metamodel::ServiceTestSuite extends meta::pure::test::TestSuite
{
  testData   : TestData[1];
}

Class meta::legend::service::metamodel::ServiceTest extends meta::pure::test::AtomicTest
{
  serializationFormat: String[0..1];
  parameters : ParameterValue[*];
  keys: String[*];
}

Class meta::legend::service::metamodel::ParameterValue
{
  name       : String[1];
  value      : Any[*];
}

Class meta::legend::service::metamodel::TestData
{
  connectionsTestData : ConnectionTestData[*];
}

Class meta::legend::service::metamodel::ConnectionTestData
{
  connectionId : String[1];
  testData     : meta::pure::data::EmbeddedData[1];
}

// Legacy Test Model
Class <<doc.deprecated>> meta::legend::service::metamodel::Test
{
}

Class <<doc.deprecated>> meta::legend::service::metamodel::SingleExecutionTest extends Test
{
   data : String[1];
   asserts : TestContainer[1..*];
}

Class <<doc.deprecated>> meta::legend::service::metamodel::MultiExecutionTest extends Test
{
   tests: KeyedSingleExecutionTest[*];

   getResultForgiving(key:String[1]){$this.tests->filter(r|$r.key==$key)->first()}:KeyedSingleExecutionTest[0..1];

   getResult(key:String[1]){$this.getResultForgiving($key)->toOne() }:KeyedSingleExecutionTest[1];
}

Class <<doc.deprecated>> meta::legend::service::metamodel::KeyedSingleExecutionTest extends SingleExecutionTest
{
   key:String[1];
}

Class <<doc.deprecated>> meta::legend::service::metamodel::TestContainer
{
   parametersValues : Any[*];
   assert:FunctionDefinition<{Result<Any|*>[1]->Boolean[1]}>[1];
}

//Post Validation
Class meta::legend::service::metamodel::PostValidation<T|m>
{
  description: String[1];
  parameters: Function<Any>[*];
  assertions: meta::legend::service::metamodel::PostValidationAssertion<T|m>[1..*];
}

Class meta::legend::service::metamodel::PostValidationAssertion<T|m>
{
  id: String[1];
  assertion: Function<{T[m]->Boolean[1]}>[1];
}

###Diagram

Diagram meta::legend::service::metamodel::ServiceDiagram(width=0.0, height=0.0)
{
    TypeView cview_7(
        type=meta::pure::test::TestSuite,
        position=(1153.40967, 448.00000),
        width=97.38477,
        height=44.00000,
        stereotypesVisible=true,
        attributesVisible=true,
        attributeStereotypesVisible=true,
        attributeTypesVisible=true,
        color=#FFFFCC,
        lineWidth=1.0)

    TypeView cview_5(
        type=meta::pure::test::Test,
        position=(1007.43457, 269.00000),
        width=97.38477,
        height=58.00000,
        stereotypesVisible=true,
        attributesVisible=true,
        attributeStereotypesVisible=true,
        attributeTypesVisible=true,
        color=#FFFFCC,
        lineWidth=1.0)

    TypeView cview_4(
        type=meta::pure::test::AtomicTest,
        position=(891.43457, 411.00000),
        width=179.96191,
        height=58.00000,
        stereotypesVisible=true,
        attributesVisible=true,
        attributeStereotypesVisible=true,
        attributeTypesVisible=true,
        color=#FFFFCC,
        lineWidth=1.0)

    TypeView cview_8(
        type=meta::pure::test::assertion::TestAssertion,
        position=(629.10205, 411.00000),
        width=99.13086,
        height=58.00000,
        stereotypesVisible=true,
        attributesVisible=true,
        attributeStereotypesVisible=true,
        attributeTypesVisible=true,
        color=#FFFFCC,
        lineWidth=1.0)

    TypeView cview_9(
        type=meta::pure::test::assertion::EqualToJson,
        position=(512.10205, 554.00000),
        width=169.76758,
        height=44.00000,
        stereotypesVisible=true,
        attributesVisible=true,
        attributeStereotypesVisible=true,
        attributeTypesVisible=true,
        color=#FFFFCC,
        lineWidth=1.0)

    TypeView cview_3(
        type=meta::legend::service::metamodel::ServiceTest,
        position=(742.00000, 547.00000),
        width=186.86914,
        height=58.00000,
        stereotypesVisible=true,
        attributesVisible=true,
        attributeStereotypesVisible=true,
        attributeTypesVisible=true,
        color=#FFFFCC,
        lineWidth=1.0)

    GeneralizationView gview_0(
        source=cview_3,
        target=cview_4,
        points=[(835.43457,576.00000),(981.41553,440.00000)],
        label='',
        color=#000000,
        lineWidth=-1.0,
        lineStyle=SIMPLE)

    GeneralizationView gview_1(
        source=cview_4,
        target=cview_5,
        points=[(981.41553,440.00000),(1056.12695,298.00000)],
        label='',
        color=#000000,
        lineWidth=-1.0,
        lineStyle=SIMPLE)

    GeneralizationView gview_2(
        source=cview_7,
        target=cview_5,
        points=[(1202.10205,470.00000),(1056.12695,298.00000)],
        label='',
        color=#000000,
        lineWidth=-1.0,
        lineStyle=SIMPLE)

    GeneralizationView gview_3(
        source=cview_9,
        target=cview_8,
        points=[(596.98584,576.00000),(678.66748,440.00000)],
        label='',
        color=#000000,
        lineWidth=-1.0,
        lineStyle=SIMPLE)

    PropertyView pview_0(
        property=meta::pure::test::TestSuite.tests,
        source=cview_7,
        target=cview_4
,        points=[(1202.10205,470.00000),(981.41553,440.00000)],
        label='',
        propertyPosition=(0.0,0.0),
        multiplicityPosition=(0.0,0.0),
        color=#000000,
        lineWidth=-1.0,
        stereotypesVisible=true,
        nameVisible=true,
        lineStyle=SIMPLE)

    PropertyView pview_1(
        property=meta::pure::test::AtomicTest.assertions,
        source=cview_4,
        target=cview_8
,        points=[(981.41553,440.00000),(678.66748,440.00000)],
        label='',
        propertyPosition=(0.0,0.0),
        multiplicityPosition=(0.0,0.0),
        color=#000000,
        lineWidth=-1.0,
        stereotypesVisible=true,
        nameVisible=true,
        lineStyle=SIMPLE)
}