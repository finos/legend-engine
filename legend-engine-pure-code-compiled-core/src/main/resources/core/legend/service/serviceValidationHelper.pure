// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
function meta::legend::service::validateServiceLambda(func: FunctionDefinition<Any>[1]):Boolean[1]
{
  let fromExpr = $func.expressionSequence->filter(x| $x->instanceOf(FunctionExpression))->map(seq| $seq->cast(@FunctionExpression)->meta::legend::service::findFromFunctionExpression());
  $fromExpr->isNotEmpty();
}

function meta::legend::service::findFromFunctionExpression(exp: FunctionExpression[1]):FunctionExpression[*]
{
  if ($exp->evaluateAndDeactivate().func == meta::pure::mapping::from_TabularDataSet_1__Mapping_1__Runtime_1__ExecutionContext_1__TabularDataSet_1_
   || $exp->evaluateAndDeactivate().func == meta::pure::mapping::from_TabularDataSet_1__Mapping_1__Runtime_1__TabularDataSet_1_  
   || $exp->evaluateAndDeactivate().func == meta::pure::mapping::from_T_m__Mapping_1__Runtime_1__T_m_,
   | $exp,
   | let paramValues = $exp->evaluateAndDeactivate().parametersValues->filter(x | $x->instanceOf(FunctionExpression));
      if($paramValues->isNotEmpty(),
      | $paramValues->map(p | $p->cast(@FunctionExpression)->meta::legend::service::findFromFunctionExpression()),
      | []););
}

function meta::legend::service::getRuntimeFromFunctionExpression(func: FunctionDefinition<Any>[1]):meta::pure::runtime::Runtime[1]
{
  let fromExprList = $func.expressionSequence->filter(x| $x->instanceOf(FunctionExpression))->map(seq| $seq->cast(@FunctionExpression)->meta::legend::service::findFromFunctionExpression());
  let fromFuncExpr = $fromExprList->at(0);
  let resolvedParams = $fromFuncExpr->evaluateAndDeactivate().parametersValues->tail()->map(p|$p->evaluateAndDeactivate()->match([i:InstanceValue[1]|$i.values,
                                                                                                          a: Any[1]| []]));
  $resolvedParams->at(1)->cast(@meta::pure::runtime::Runtime);
}
