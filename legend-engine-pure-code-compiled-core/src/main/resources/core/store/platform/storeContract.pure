// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::mapping::*;
import meta::pure::router::systemMapping::tests::*;
import meta::pure::extension::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::store::*;
import meta::pure::runtime::*;
import meta::pure::executionPlan::*;
import meta::pure::router::execution::*;
import meta::pure::extension::*;

function meta::pure::store::platform::contract::platformStoreContract():StoreContract[1]
{
   ^StoreContract
   (
     id = 'platformStore',
     executeStoreQuery = meta::pure::store::platform::contract::execution_StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_$0_1$__Runtime_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__Result_1_,
     supports = meta::pure::store::platform::contract::supports_FunctionExpression_1__Boolean_1_,
     planExecution = meta::pure::store::platform::contract::planExecution_StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_$0_1$__Runtime_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_,
     
     supportsSetImplementation = s:SetImplementation[1]|false,
     supportsStore = s:Store[1]|$s->instanceOf(meta::pure::store::platform::metamodel::PlatformStore),
     resolveStoreFromSetImplementation = s:InstanceSetImplementation[1]|^meta::pure::store::platform::metamodel::PlatformStore(name='PLATFORM', package=::),
     supportsNativeJoinAmongElements = false
   )
   ->meta::pure::extension::withExtraExecutionPlanPlatformBindingExtension(meta::pure::store::platform::contract::platformLegendJavaExecutionPlanPlatformBindingExtension())
}

// Platform Store Execution
function meta::pure::store::platform::contract::execution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):Result<Any|*>[1]
{
  let newOne = ^Container(value = $sq.fe)->resolve($sq.inScopeVars, $sq.advancedRouting->toOne(), $extensions, $debug);
  ^Result<Any|*>(activities = $newOne.activities, values=$newOne.value->reactivate($sq.inScopeVars));
}

// Platform Store Execution Plan Generation Flow
function meta::pure::store::platform::contract::planExecution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extensions : Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   $sq.fe->meta::pure::store::platform::executionPlan::generation::processValueSpecification($runtime, $sq.inScopeVars, $sq.advancedRouting, $exeCtx, $extensions, $debug)->toOne();
}

// Functions supported by platform store
function meta::pure::store::platform::contract::supports(f:FunctionExpression[1]):Boolean[1]
{
   true;
}

// Legend Java Platform Binding Extension
###Pure
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::project::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::engine::java::graphFetch::common::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::extension::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::mapping::*;


function <<access.private>> meta::pure::store::platform::contract::platformLegendJavaExecutionPlanPlatformBindingExtension(): LegendJavaExecutionPlanPlatformBindingExtension[1]
{
   ^LegendJavaExecutionPlanPlatformBindingExtension
   (
      id = legendJavaPlatformBindingId(),

      // Graph fetch extensions ----------------------------------------------------------------------------------
      walkChildNodesForPrepare = {path:String[1], contextFromChildren:GenerationContext[1], extensions:Extension[*], debug:DebugContext[1] |
         [
            {f:FreeMarkerConditionalExecutionNode[1] |
               let contextFromTrueBlock = $f.trueBlock->prepare($path+'.trueBlock', $contextFromChildren, $extensions, $debug);
               if($f.falseBlock->isEmpty(), |$contextFromTrueBlock, |$f.falseBlock->toOne()->prepare($path+'.falseBlock', $contextFromTrueBlock, $extensions, $debug));
            },
            {g:GlobalGraphFetchExecutionNode[1] | 
               let contextFromGlobalChildren = $g.children->size()->range()->fold({x, ctx | $g.children->at($x)->prepare($path+'.globalChild' + $x->toString(), $ctx, $extensions, $debug)}, $contextFromChildren);
               $g.localGraphFetchExecutionNode->prepare($path+localGraphFetchNodePathPrefix(), $contextFromGlobalChildren, $extensions, $debug);
            }
         ]
      },

      prepareNode = {path:String[1], contextFromOtherNodes:GenerationContext[1], extensions:Extension[*], debug:DebugContext[1] |
         [
            g:GlobalGraphFetchExecutionNode[1]       | $g->prepareForGlobalGraphFetchNode($path, $contextFromOtherNodes, $debug),
            p:PureExpressionPlatformExecutionNode[1] | $p->prepareForPlatformNode($path, $contextFromOtherNodes, $extensions, $debug)
         ]
      },

      generateCode = {path:String[1], context:GenerationContext[1], extensions:Extension[*], debug:DebugContext[1] |
         [
            l:LocalGraphFetchExecutionNode[1]        | $l->generateCodeForLocalGraphFetchNode($path, $context, $extensions, $debug),
            p:PureExpressionPlatformExecutionNode[1] | $p->generateImplementionForPlatformNode($path, $context, $extensions, $debug)
         ]
      },

      walkAndGenerateChildNodes = {path: String[1], mapping:Mapping[1], context:GenerationContext[1], extensions:Extension[*], fullProject:Project[0..1], debug:DebugContext[1] |
         [
            g:GlobalGraphFetchExecutionNode[1] |
               let transformedChildren = $g.children->size()->range()->map(x | $g.children->at($x)->generatePlatformCode($path+'.globalChild' + $x->toString(), $mapping, $context, $extensions, $debug));
               let transformedLocal = $g.localGraphFetchExecutionNode->generatePlatformCode($path+localGraphFetchNodePathPrefix(), $mapping, $context, $extensions, $debug);
               let transformedLocalNode = $transformedLocal.node->cast(@LocalGraphFetchExecutionNode);
               ^GeneratedNode(node=^$g(children = $transformedChildren.node->cast(@GlobalGraphFetchExecutionNode), localGraphFetchExecutionNode = $transformedLocalNode), project = mergeProjectsNullable($fullProject->concatenate($transformedChildren.project)->concatenate($transformedLocal.project)));,
            f:FreeMarkerConditionalExecutionNode[1] |
               let transformedTrueBlock = $f.trueBlock->generatePlatformCode($path+'.trueBlock', $mapping, $context, $extensions, $debug);
               let transformedFalseBlock = if($f.falseBlock->isEmpty(), |[], |$f.falseBlock->toOne()->generatePlatformCode($path+'.falseBlock', $mapping, $context, $extensions, $debug));
               ^GeneratedNode(node=^$f(trueBlock = $transformedTrueBlock.node, falseBlock = $transformedFalseBlock.node), project = mergeProjectsNullable($fullProject->concatenate($transformedTrueBlock.project)->concatenate($transformedFalseBlock.project)));         ]
      }
      // ---------------------------------------------------------------------------------- Graph fetch extensions
   )
}