// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::*;

import meta::pure::router::clustering::*;
import meta::pure::extension::*;
import meta::pure::store::platform::metamodel::*;
import meta::pure::store::*;

import meta::pure::runtime::*;
import meta::pure::store::platform::executionPlan::generation::*;

Class meta::pure::store::platform::executionPlan::generation::PureFunctionToProcessFunctionPair extends Pair<meta::pure::metamodel::function::Function<Any>, meta::pure::metamodel::function::Function<{FunctionExpression[1], Runtime[0..1], Map<String, List<Any>>[1], Boolean[0..1], ExecutionContext[1], Extension[*], DebugContext[1] -> ExecutionNode[1]}>>
{
}

function meta::pure::store::platform::executionPlan::generation::processValueSpecification(vs:ValueSpecification[1], runtime:Runtime[0..1], inScopeVars : Map<String, List<Any>>[1], advancedRouting: Boolean[0..1], exeCtx:ExecutionContext[1], extensions : Extension[*], debug:DebugContext[1]):ExecutionNode[0..1]
{
   $vs->match([
      f:SimpleFunctionExpression[1]         | $f->meta::pure::store::platform::executionPlan::generation::getFunctionProcessor($extensions)->eval($f, $runtime, $inScopeVars, $advancedRouting, $exeCtx, $extensions, $debug),
      c:ClusteredValueSpecification[1]      | $c->plan($runtime, $inScopeVars, $advancedRouting, $exeCtx, $extensions, $debug),
      e:ExtendedRoutedValueSpecification[1] | $e.value->processValueSpecification($runtime, $inScopeVars, $advancedRouting, $exeCtx, $extensions, $debug),
      i:InstanceValue[1]                    | [],
      v:ValueSpecification[1]               | []
   ]);
}

function <<access.private>> meta::pure::store::platform::executionPlan::generation::defaultFunctionProcessor(fe:FunctionExpression[1], runtime:Runtime[0..1], inScopeVars : Map<String, List<Any>>[1], advancedRouting: Boolean[0..1], exeCtx:ExecutionContext[1], extensions : Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let children = $fe.parametersValues->evaluateAndDeactivate()->map(v|$v->meta::pure::store::platform::executionPlan::generation::recursivelyFetchClusteredValueSpecification())->map(v|$v->meta::pure::store::platform::executionPlan::generation::processValueSpecification($runtime, $inScopeVars, $advancedRouting, $exeCtx, $extensions, $debug));
   
   ^PureExpressionPlatformExecutionNode
   (
      expression = $fe,
      resultType = ^ResultType(type=$fe.genericType.rawType->toOne()),
      executionNodes = $children,
      fromCluster = meta::pure::store::platform::executionPlan::generation::generatePlatformClusterForFunction($fe, $inScopeVars)
   );
}

function <<access.private>> meta::pure::store::platform::executionPlan::generation::serializeFunctionProcessor(fe:FunctionExpression[1], runtime:Runtime[0..1], inScopeVars : Map<String, List<Any>>[1], advancedRouting: Boolean[0..1], exeCtx:ExecutionContext[1], extensions : Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let children = $fe.parametersValues->evaluateAndDeactivate()->at(0)->meta::pure::store::platform::executionPlan::generation::processValueSpecification($runtime, $inScopeVars, $advancedRouting, $exeCtx, $extensions, $debug);
   
   ^PureExpressionPlatformExecutionNode
   (
      expression = $fe,
      resultType = ^ResultType(type=$fe.genericType.rawType->toOne()),
      executionNodes = $children,
      fromCluster = meta::pure::store::platform::executionPlan::generation::generatePlatformClusterForFunction($fe, $inScopeVars)
   );
}

function <<access.private>> meta::pure::store::platform::executionPlan::generation::unionFunctionProcessor(fe:FunctionExpression[1], runtime:Runtime[0..1], inScopeVars : Map<String, List<Any>>[1], advancedRouting: Boolean[0..1], exeCtx:ExecutionContext[1], extensions : Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let children = $fe.parametersValues->evaluateAndDeactivate()->map(v | $v->meta::pure::store::platform::executionPlan::generation::processValueSpecification($runtime, $inScopeVars, $advancedRouting, $exeCtx, $extensions, $debug));
   
   let nestedNodesFromChildUnion = $children->filter(ch | $ch->instanceOf(PureExpressionPlatformExecutionNode) && $ch->cast(@PureExpressionPlatformExecutionNode).expression->cast(@FunctionExpression).func->in([union_T_MANY__T_MANY__T_MANY_, concatenate_T_MANY__T_MANY__T_MANY_]));
   let updatedChildren = $children->filter(ch | !$ch->in($nestedNodesFromChildUnion))->concatenate($children->filter(ch | $ch->in($nestedNodesFromChildUnion)).executionNodes);
   
   ^PureExpressionPlatformExecutionNode
   (
      expression = $fe,
      resultType = ^ResultType(type=$fe.genericType.rawType->toOne()),
      executionNodes = $updatedChildren,
      fromCluster = meta::pure::store::platform::executionPlan::generation::generatePlatformClusterForFunction($fe, $inScopeVars)
   );
}

function <<access.private>> meta::pure::store::platform::executionPlan::generation::generatePlatformClusterForFunction(fe:FunctionExpression[1], inScopeVars : Map<String, List<Any>>[1]):ClusteredValueSpecification[1]
{
   ^ClusteredValueSpecification(
      val = $fe, 
      store = ^PlatformStore(package=::), 
      s = meta::pure::store::platform::contract::platformStoreContract(),
      executable=true, 
      multiplicity = $fe.multiplicity, 
      genericType  = $fe.genericType, 
      openVars = $inScopeVars
   );
}

function <<access.private>> meta::pure::store::platform::executionPlan::generation::recursivelyFetchClusteredValueSpecification(vs:ValueSpecification[1]):ClusteredValueSpecification[*]
{
   $vs->match([
      f:SimpleFunctionExpression[1]|$f.parametersValues->evaluateAndDeactivate()->map(v|$v->meta::pure::store::platform::executionPlan::generation::recursivelyFetchClusteredValueSpecification()),
      c:ClusteredValueSpecification[*]|$c,
      i:InstanceValue[1]|[]
   ]);
}

function <<access.private>> meta::pure::store::platform::executionPlan::generation::getFunctionProcessor(f:SimpleFunctionExpression[1], extensions:meta::pure::extension::Extension[*]):meta::pure::metamodel::function::Function<{FunctionExpression[1], Runtime[0..1], Map<String, List<Any>>[1], Boolean[0..1], ExecutionContext[1], Extension[*], DebugContext[1] -> ExecutionNode[1]}>[1]
{
   let specificProcessorsForFunctions = 
      newMap($extensions.moduleExtension('platform')->cast(@meta::pure::store::platform::extension::PlatformStoreExtension).executionPlan_generation_nodeForFunctionExpression->concatenate([
         ^PureFunctionToProcessFunctionPair(first = meta::pure::graphFetch::execution::serialize_T_MANY__RootGraphFetchTree_1__String_1_, second = serializeFunctionProcessor_FunctionExpression_1__Runtime_$0_1$__Map_1__Boolean_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_),
         ^PureFunctionToProcessFunctionPair(first = meta::pure::graphFetch::execution::serialize_Checked_MANY__RootGraphFetchTree_1__String_1_, second = serializeFunctionProcessor_FunctionExpression_1__Runtime_$0_1$__Map_1__Boolean_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_),
         ^PureFunctionToProcessFunctionPair(first = meta::pure::graphFetch::execution::serialize_T_MANY__RootGraphFetchTree_1__AlloySerializationConfig_1__String_1_, second = serializeFunctionProcessor_FunctionExpression_1__Runtime_$0_1$__Map_1__Boolean_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_),
         ^PureFunctionToProcessFunctionPair(first = meta::pure::graphFetch::execution::serialize_Checked_MANY__RootGraphFetchTree_1__AlloySerializationConfig_1__String_1_, second = serializeFunctionProcessor_FunctionExpression_1__Runtime_$0_1$__Map_1__Boolean_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_),
         ^PureFunctionToProcessFunctionPair(first = meta::pure::functions::collection::concatenate_T_MANY__T_MANY__T_MANY_, second = unionFunctionProcessor_FunctionExpression_1__Runtime_$0_1$__Map_1__Boolean_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_),
         ^PureFunctionToProcessFunctionPair(first = meta::pure::functions::collection::union_T_MANY__T_MANY__T_MANY_, second = unionFunctionProcessor_FunctionExpression_1__Runtime_$0_1$__Map_1__Boolean_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_)
      ]));
   
   if($specificProcessorsForFunctions->get($f.func)->isNotEmpty(),
      |$specificProcessorsForFunctions->get($f.func)->toOne(),
      |defaultFunctionProcessor_FunctionExpression_1__Runtime_$0_1$__Map_1__Boolean_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_
   );
}
