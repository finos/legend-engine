// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::runtime::*;
import meta::pure::executionPlan::*;
import meta::pure::router::routing::*;
import meta::pure::router::store::metamodel::*;
import meta::pure::mapping::modelToModel::inMemory::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::*;

Class meta::pure::mapping::modelToModel::inMemory::ModelPayload extends MappingInstanceData
{
   src : Any[1];
}

function meta::pure::mapping::modelToModel::inMemory::executeInMemory(v:ValueSpecification[1], e:StoreMappingRoutedValueSpecification[0..1], mapping: Mapping[1], mc:ModelConnection[1], runtime:Runtime[1], exeCtx:ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):Result<Any|*>[1]
{
   let res = $v->match([
               f:FunctionExpression[1]|if($f.func.name == 'getAll_Class_1__T_MANY_' || $f.func.name == 'getAllVersions_Class_1__T_MANY_' || $f.func.name == 'getAll_Class_1__Date_1__T_MANY_',
                                          |let impls = $e.sets->resolveOperation($mapping)->cast(@PureInstanceSetImplementation);
                                           let res = $impls->map(impl|inMemoryGetAll($impl, $e->toOne(), $mapping, $mc, $runtime, $exeCtx, $extensions, $debug))->setOperation($e);,
                                          |$f.func->evaluate($f.parametersValues->map(p|list($p->executeInMemory($e, $mapping, $mc, $runtime, $exeCtx, $extensions, $debug).values)))
                                       ),
               r:FunctionRoutedValueSpecification[1]|$r.value->cast(@InstanceValue).values->at(0)->cast(@LambdaFunction<Any>)->routeGettersInCode($e),
               e:StoreMappingRoutedValueSpecification[1]|$e.value->executeInMemory($e, $mapping, $mc, $runtime, $exeCtx, $extensions, $debug).values;,
               i:InstanceValue[1]|$i.values->map(v|$v->match([vs:ValueSpecification[1]|$vs->executeInMemory($e, $mapping, $mc, $runtime, $exeCtx, $extensions, $debug).values,a:Any[1]|$a]))
             ]);
   ^Result<Any|*>(values=$res);
}


function <<access.private>> meta::pure::mapping::modelToModel::inMemory::setOperation(sets:Any[*],e:StoreMappingRoutedValueSpecification[0..1]):Any[*]
{
  let operationFunctions = newMap(pair(meta::pure::router::operations::merge_OperationSetImplementation_1__SetImplementation_MANY_, meta::pure::mapping::modelToModel::inMemory::mergeResult_Any_MANY__Any_$0_1$_));
   if($e->isEmpty(),
      |$sets, 
      |let operation  =  $e->toOne().sets->filter(s| $s->instanceOf(OperationSetImplementation))->cast(@OperationSetImplementation);
       if($operation->size()!=1,
              |$sets,
              | let fn =   $operationFunctions->get($operation->toOne().operation->toOne());  
                if($fn->isEmpty(),
                    |$sets,
                    |$fn->toOne()->eval($sets)
                  ); 
          );
     );       
   
   
}



function <<access.private>> meta::pure::mapping::modelToModel::inMemory::routeGettersInCode(f:LambdaFunction<Any>[1], e:StoreMappingRoutedValueSpecification[0..1]):LambdaFunction<Any>[1]
{
   ^$f(expressionSequence = $f.expressionSequence->map(v|$v->routeGettersInCodeVS($e)->cast(@ValueSpecification)));
}

function <<access.private>> meta::pure::mapping::modelToModel::inMemory::routeGettersInCodeVS(v:Any[1], e:StoreMappingRoutedValueSpecification[0..1]):Any[1]
{
   $v->match([
               f:FunctionExpression[1]|if($f.func->instanceOf(Property) && !$f.func->functionReturnType().rawType->toOne()->instanceOf(DataType),
                                           |^$f(
                                                func=meta::pure::mapping::modelToModel::inMemory::getter_Any_1__Property_1__PropertyMapping_MANY__T_MANY_,
                                                resolvedTypeParameters = $f.genericType,
                                                parametersValues = [$f.parametersValues->at(0)->routeGettersInCodeVS($e)->cast(@ValueSpecification),
                                                                    ^InstanceValue(genericType=^GenericType(rawType=Property), multiplicity=PureOne, values=$f.func)->evaluateAndDeactivate(),
                                                                    ^InstanceValue(genericType=^GenericType(rawType=PurePropertyMapping), multiplicity=ZeroMany, values=$e.propertyMapping)->evaluateAndDeactivate()->cast(@ValueSpecification)
                                                                   ]
                                             );,
                                           |^$f(parametersValues = $f.parametersValues->evaluateAndDeactivate()->map(k|$k->routeGettersInCodeVS($e)->cast(@ValueSpecification)))
                                       ),
               r:FunctionRoutedValueSpecification[1]|let i = $r.value->cast(@InstanceValue);
                                                     ^$i(values = $i.values->at(0)->cast(@LambdaFunction<Any>)->routeGettersInCode($e));,
               e:StoreMappingRoutedValueSpecification[1]|$e.value->routeGettersInCodeVS($e);,
               i:InstanceValue[1]|^$i(values=$i.values->map(v|$v->match([vs:ValueSpecification[1]|$vs->routeGettersInCodeVS($e),a:Any[1]|$a]))),
               v:VariableExpression[1]|$v
             ]);
}

function meta::pure::mapping::modelToModel::inMemory::inMemoryGetAll(impl:PureInstanceSetImplementation[1], e:StoreMappingRoutedValueSpecification[1], mapping:Mapping[1], mc:ModelConnection[1], runtime:Runtime[1], exeCtx:ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):Any[*]
{
   let srcClass = $impl.srcClass->toOne();
   let list = $mc.instances->get($srcClass);
   if ($list->isEmpty(),
       |[],
       |let filtered = if ($impl.filter->isEmpty(),|$list.values, |let f = $impl.filter->toOne(); $list.values->filter(v|$f->evaluate(list($v))->toOne()->cast(@Boolean)););
        let static = ^StaticMappingInstanceData
                     (
                         setImplementation = $impl,
                         mapping = $mapping,
                         runtime = $runtime,
                         systemMapping = meta::pure::mapping::modelToModel::contract::modelStoreContract(),
                         exeCtx = $exeCtx,
                         debug = $debug,
                         extensions = $extensions
                     );
        $filtered->map(i|$i->transformWithMapping($impl,$e, $static));
   );
}

function meta::pure::mapping::modelToModel::inMemory::internal_getter(o:Any[1], property:Property<Nil,Any|*>[1], propertyMappings:PropertyMapping[*]):Any[*]
{
   let modelPayload = $o->getHiddenPayload()->cast(@ModelPayload);
   let mapping = $modelPayload.static.mapping->toOne();
   let targetGenericType = $property->functionReturnType();
   
   let pms = if ($propertyMappings->isEmpty(),
                 |if ($modelPayload.static.setImplementation->isEmpty(),
                     |[],
                     |let setImpls = $mapping->rootClassMappingByClass($targetGenericType.rawType->toOne()->cast(@Class<Any>))->resolveOperation($mapping);
                      let setImplds = $setImpls.id;
                      let pms = $modelPayload.static.setImplementation->toOne()->_propertyMappingsByPropertyName($property.name->toOne())->cast(@PurePropertyMapping);
                      $pms->filter(p|$setImplds->contains($p.targetSetImplementationId));
                  );,
                 |$propertyMappings
             );

   if ($pms->isEmpty(),
       |// Delta use case
        let srcGenericType = $modelPayload.src->genericType();
        let srcProperties = if($srcGenericType.rawType->toOne()->instanceOf(DataType),|[],|$srcGenericType->properties());
        let foundProperties = $srcProperties->filter(p|$p.name == $property.name);
        assert($property.multiplicity.lowerBound.value->toOne() == 0 || !$foundProperties->isEmpty(), | 'Can\'t find a mapping for the property \''+$property.name->toOne()+'\' in the setImplementation \''+if($modelPayload.static.setImplementation->isEmpty(),|'unknown',|$modelPayload.static.setImplementation->toOne().id)+'\' in the mapping \''+$modelPayload.static.mapping->elementToPath()+'\'');
        if ($foundProperties->isEmpty(),
          |[],
          |let srcRes = $foundProperties->toOne()->evaluate(list($modelPayload.src));
           let setImpl = $mapping->rootClassMappingByClass($targetGenericType.rawType->toOne()->cast(@Class<Any>));

           if($setImpl->isEmpty(),
             |let static = ^StaticMappingInstanceData
                        (
                           setImplementation = [],
                           runtime = $modelPayload.static.runtime,
                           mapping =  $mapping,
                           systemMapping = meta::pure::mapping::modelToModel::contract::modelStoreContract(),
                           exeCtx = $modelPayload.static.exeCtx,
                           debug = $modelPayload.static.debug,
                           extensions = $modelPayload.static.extensions
                        );
        $srcRes->map(v| transformNoMappingPassThru($v, $targetGenericType, $static));,   

             |let static = ^StaticMappingInstanceData
                           (
                              setImplementation = $setImpl->toOne()->cast(@PureInstanceSetImplementation),
                              mapping = $mapping,
                              runtime = $modelPayload.static.runtime,
                              systemMapping = meta::pure::mapping::modelToModel::contract::modelStoreContract(),
                              exeCtx = $modelPayload.static.exeCtx,
                              debug = $modelPayload.static.debug,
                              extensions = $modelPayload.static.extensions
                           );
              $srcRes->map(v|$v->transformWithMapping($setImpl->toOne()->cast(@PureInstanceSetImplementation), [],$static));
           );
        );,
       |$pms->cast(@PurePropertyMapping)
            ->filter(pm | $modelPayload.src->toOne()->instanceOf($pm.owner->cast(@PureInstanceSetImplementation).srcClass->toOne()))
            ->map(pm|
                    let targetImpl = $modelPayload.static.mapping->classMappingById($pm->toOne().targetSetImplementationId)->toOne();
                    let src= $pm->toOne().transform->evaluate(list($modelPayload.src));
                    let resolved   = if($targetImpl->instanceOf(OperationSetImplementation),
                                        |$targetImpl->cast(@OperationSetImplementation)->resolveOperation($modelPayload.static.mapping)->cast(@PureInstanceSetImplementation),
                                        |$targetImpl->cast(@PureInstanceSetImplementation)
                                      )
                                                  ->map(r| if($r.srcClass->isEmpty()  ||  $src->isEmpty() || $src->at(0)->instanceOf($r.srcClass->toOne())  ,
                                                      |$r ,
                                                      |[];
                                                    ););

                    $resolved->map({pisi|
                        let filtered = if ($pisi.filter->isEmpty(),
                                          |$src,
                                          |let f = $pisi.filter->toOne();
                                            $src->filter(v|$f->evaluate(list($v))->toOne()->cast(@Boolean));
                                          );
                        let static = ^StaticMappingInstanceData
                                      (
                                        setImplementation = $pisi,
                                        mapping           = $modelPayload.static.mapping->toOne(),
                                        runtime           = $modelPayload.static.runtime,
                                        systemMapping     = meta::pure::mapping::modelToModel::contract::modelStoreContract(),
                                        exeCtx            = $modelPayload.static.exeCtx,
                                        debug             = $modelPayload.static.debug,
                                        extensions = $modelPayload.static.extensions
                                      );
                        $filtered->map(v|$v->transformWithMapping($pisi, [], $static));
                    });
            );
   );
}



function meta::pure::mapping::modelToModel::inMemory::transformWithMapping(src:Any[1], impl:PureInstanceSetImplementation[1],  e:StoreMappingRoutedValueSpecification[0..1], static:StaticMappingInstanceData[1]):Any[*]
{
   let sval = if($impl.srcClass->isEmpty(), |[], |list($src));
   let targetClass = $impl.class;

   let nonMappedProperties = $targetClass.properties->filter(p|$p->functionReturnType().rawType->toOne()->instanceOf(DataType))->removeAll($impl->allPropertyMappings().property);

   let allTransformedByType = $impl->allPropertyMappings()->filter(p|$p->instanceOf(PurePropertyMapping))->cast(@PurePropertyMapping)
                                                    ->filter(pm|$pm.property->functionReturnType().rawType->toOne()->instanceOf(DataType))
                                                    ->partition(pm|!$pm.localMappingProperty->isEmpty() && $pm.localMappingProperty->toOne());

   let explodedPartition =  $allTransformedByType.second.values
                                                 ->partition(pm| if($pm.explodeProperty->isEmpty(),|false,|$pm.explodeProperty->toOne()));
   let transformedMappedProperties =  $explodedPartition.second.values
                                                 ->map(pm|
                                                            ^KeyValue(
                                                             key = $pm.property.name->toOne(),
                                                             value = $pm.transform->evaluate($sval)->map(x | $pm->valueTransform($x))
                                                          );
                                                      );

   let explodedProperty = if($explodedPartition.first.values->size() > 0,
                             |let propertyMaps = $explodedPartition.first.values;
                              assert($propertyMaps->map(propertyMap| $propertyMap.owner;)->distinct()->size() <= 1, 'Explosion on target properties from more than one class is not supported.');
                              let inputLists = $propertyMaps->map(propertyMap|list($propertyMap.transform->evaluate($sval)
                                                                                   ->map(v|
                                                                                           ^KeyValue(key = $propertyMap.property.name->toOne(),
                                                                                                     value = $propertyMap->valueTransform($v)
                                                                                           )
                                                                                        )
                                                                                   )
                                                                 );
                              zipHorizontally($inputLists);
                             ,|[]);

   let mappingLevelProperties = $allTransformedByType.first.values
                                                 ->map(pm|
                                                         ^KeyValue(
                                                             key = $pm.property.name->toOne(),
                                                             value = $pm.transform->evaluate($sval)->map(x | $pm->valueTransform($x))
                                                          );
                                                      );
   
   let sourceType = $src->genericType();
   
 //dont fill in if part of a merged set 
 let nonMappedPropertiesValues = if ($sourceType.rawType->toOne()->instanceOf(DataType)  ||  $impl.id->toOne()-> setIsPartOfMerge($e) ,
                                     |[],
                                     |let srcPropertiesByName = $sourceType->properties()->groupBy(p|$p.name->toOne());
                                      $nonMappedProperties->map(p|let srcProperty = $srcPropertiesByName->get($p.name->toOne());
                                                                  if ($srcProperty->isNotEmpty()
                                                                       && $srcProperty.values->toOne().genericType.rawType->toOne()->subTypeOf($p.genericType.rawType->toOne()) && $p.multiplicity->toOne()->multiplicitySubsumes($srcProperty.values->toOne().multiplicity),
                                                                      |
                                                                       ^KeyValue(
                                                                         key = $p.name->toOne(),
                                                                         value = $srcProperty.values->toOne()->evaluate($sval)
                                                                       );,
                                                                       |[]
                                                                     ); 
                                                            );
                                   );

   if($explodedProperty->isNotEmpty(),
      |$explodedProperty->map(p:List<KeyValue>[1]|$targetClass->dynamicNew($transformedMappedProperties->concatenate($nonMappedPropertiesValues)->concatenate($p.values),
                             meta::pure::mapping::xStore::crossGetterOverrideToOne_Any_1__Property_1__Any_$0_1$_,
                             meta::pure::mapping::xStore::crossGetterOverrideToMany_Any_1__Property_1__Any_MANY_,
                            ^ModelPayload(
                               src = $src,
                               mappingPropertyValues = $mappingLevelProperties,
                               static = $static
                            ), $static.exeCtx->getConstraintsManager()
                          ));,
     | $targetClass->dynamicNew($transformedMappedProperties->concatenate($nonMappedPropertiesValues),
                              meta::pure::mapping::xStore::crossGetterOverrideToOne_Any_1__Property_1__Any_$0_1$_,
                             meta::pure::mapping::xStore::crossGetterOverrideToMany_Any_1__Property_1__Any_MANY_,
                            ^ModelPayload(
                               src = $src,
                               mappingPropertyValues = $mappingLevelProperties,
                               static = $static
                            ), $static.exeCtx->getConstraintsManager()
                          );
     );
}

function meta::pure::mapping::modelToModel::inMemory::setIsPartOfMerge(id:String[1], ev:StoreMappingRoutedValueSpecification[0..1]):Boolean[1]
{
 

   if($ev->isMerge(),
   |  let mergeSets = $ev->toOne().sets->filter(s| $s->instanceOf(OperationSetImplementation))->cast(@OperationSetImplementation)->filter(o |$o.operation == meta::pure::router::operations::merge_OperationSetImplementation_1__SetImplementation_MANY_ );
       if($mergeSets->isNotEmpty() && $id ->in($mergeSets->toOne().parameters.id),
            |true,
            |false
         );,
    
   |false
   );
}


function meta::pure::mapping::modelToModel::inMemory::transformNoMappingPassThru(src:Any[1], targetGenericType:GenericType[1], static:StaticMappingInstanceData[1]):Any[1]
{
   let sval = list($src);
   let srcPropertiesByName = $src->genericType()->properties()->groupBy(p|$p.name->toOne());
   let targetProperties = $targetGenericType->properties()->filter(p|$p->functionReturnType().rawType->toOne()->instanceOf(DataType));

  
   let keyVals = $targetProperties->map(p|let srcProperty = $srcPropertiesByName->get($p.name->toOne());
                                              if ($srcProperty->isNotEmpty()&& $srcProperty.values->toOne().genericType.rawType->toOne()->subTypeOf($p.genericType.rawType->toOne()) && $p.multiplicity->toOne()->multiplicitySubsumes($srcProperty.values->toOne().multiplicity),
                                                                      |
                                                                       ^KeyValue(
                                                                         key = $p.name->toOne(),
                                                                         value = $srcProperty.values->toOne()->evaluate($sval)
                                                                       );,
                                                                       |[]
                                                                     ); 
                                        
                 
                    );
   $targetGenericType->dynamicNew($keyVals,
                             meta::pure::mapping::xStore::crossGetterOverrideToOne_Any_1__Property_1__Any_$0_1$_,
                             meta::pure::mapping::xStore::crossGetterOverrideToMany_Any_1__Property_1__Any_MANY_,
                            ^ModelPayload(
                               src = $src,
                               static = $static
                            ), $static.exeCtx->getConstraintsManager()
                          );
}

function meta::pure::mapping::modelToModel::inMemory::getter<T>(o:Any[1], property:Property<Nil,T|*>[1], propertyMappings:PropertyMapping[*]):T[*]
{
   $o->internal_getter($property, $propertyMappings)->cast(@T);
}

function meta::pure::mapping::modelToModel::inMemory::getter(o:Any[1], property:Property<Nil,Any|*>[1]):Any[*]
{
   $o->internal_getter($property, []);
}

function meta::pure::mapping::modelToModel::inMemory::planExecutionInMemory(sq:meta::pure::mapping::StoreQuery[1], e:StoreMappingRoutedValueSpecification[0..1], mapping: Mapping[0..1], mc:ModelConnection[1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let jsonFeWithPpt = if($sq.fe.func.name == 'toJSON_T_MANY__LambdaFunction_MANY__String_1_',
                          | let inputFeToJson = $sq.fe.parametersValues->at(0)->byPassRouterInfo()->cast(@FunctionExpression);
                            let jsonPropertyPaths = $sq.fe.parametersValues->at(1)->byPassRouterInfo()->cast(@InstanceValue).values->cast(@LambdaFunction<{Nil[1]->Any[*]}>);
                            ^JsonFeWithPropertyPaths(fe=$inputFeToJson, jsonPropertyPaths=$jsonPropertyPaths);,
                          | ^JsonFeWithPropertyPaths(fe=$sq.fe)
                       );
   
   let fe = $jsonFeWithPpt.fe;
   
   let fd = ^LambdaFunction<{->Any[*]}>(expressionSequence = $fe);
   
   let possibleClass = $fe.genericType.rawType->toOne();
   let class = if ($possibleClass == Any, | let getAllClass = findMainClassInGetAllExpression($fe); if($getAllClass->isEmpty(), | $possibleClass, | $getAllClass);, | $possibleClass );

   assert(!$class->genericType().typeArguments->at(0)->instanceOf(TabularDataSet),'ExecutionPlan not supported for Alloy ModelToModel queries returning \'TabularDataSet\'');
   
   let setImplementation = if ($e->isEmpty(),
                               |$mapping->toOne()->rootClassMappingByClass($possibleClass->cast(@Class<Any>))->toOne()->cast(@SetImplementation);,
                               |$e.sets->toOne()->cast(@SetImplementation));
   
   let connection = $runtime->toOne().connections->at(0);
   
   let resultType = ^ClassResultType
                     (
                        type = $class,
                        setImplementations = $setImplementation
                     );
   

   ^ModelToModelExecutionNode(fd=$fd, classes=$mapping->toOne()->classMappings().class, resultType=$resultType, resultSizeRange=ZeroMany, connection=$connection, jsonPropertyPaths=$jsonFeWithPpt.jsonPropertyPaths, mapping=$mapping->toOne());
}

function <<access.private>> meta::pure::mapping::modelToModel::inMemory::zipHorizontally(inputLists:List<KeyValue>[*]):List<KeyValue>[*]
{
   if ($inputLists->isEmpty() || $inputLists->filter({l|$l.values->isNotEmpty()})->size()==0,
       |[],
       |let newFirst = list($inputLists->map(l|let values = $l.values;
                                            if ($values->isEmpty(),
                                                |[],
                                                |$l.values->at(0));
                        ));
       let result = $newFirst->concatenate($inputLists->map(l|list($l.values->drop(1)))->zipHorizontally()););
}
function <<access.private>> meta::pure::mapping::modelToModel::inMemory::isMerge(ev:StoreMappingRoutedValueSpecification[0..1]):Boolean[1]
{
if($ev->isNotEmpty(),
   |   $ev->toOne().sets->filter(s| $s->instanceOf(OperationSetImplementation))->cast(@OperationSetImplementation)->filter(o |$o.operation == meta::pure::router::operations::merge_OperationSetImplementation_1__SetImplementation_MANY_ )->isNotEmpty();,
   | false );
}


function <<access.private>> meta::pure::mapping::modelToModel::inMemory::mergeResult(set:Any[*]):Any[0..1]
{
   if($set->isEmpty()
      ,|[]
      ,|$set->at(0)->class()->allProperties()->cast(@Property<Nil, Any|*>)
               ->map(p: Property<Nil, Any|*>[1] |
                  let propertyToMutate = $set->at(0)->getPropertyValues($p.name->toOne());  
                  let propertyValuesFromOtherInstances = $set->filter(r|$r->getPropertyValues($p.name->toOne())->isNotEmpty());
                  if($propertyValuesFromOtherInstances->size()==1 && $propertyToMutate->isEmpty()
                             ,|$set->at(0)->mutateAdd($p.name->toOne(), $propertyValuesFromOtherInstances->toOne()->getPropertyValues($p.name->toOne()))
                             ,| assert($propertyValuesFromOtherInstances->size()<=1,'Property '+ $p.name->toOne()+' is mapped more than once.'); 
                               [];);
            );
         $set->at(0);
      );
}



