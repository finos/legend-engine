// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::engine::java::roadmap::*;
import meta::json::*;
import meta::pure::executionPlan::profiles::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::modelToModel::test::alloy::simple::graphWithoutAssociations::*;
import meta::pure::mapping::modelToModel::test::alloy::simple::graphWithoutAssociations::src::*;
import meta::pure::mapping::modelToModel::test::alloy::simple::graphWithoutAssociations::dest::*;
import meta::pure::runtime::*;

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly, feature.M2MBasics>> 
{  serverVersion.start='v1_19_0',
   doc.doc='Given: a simple graph using direct (not via association) relationship',
   doc.doc='When:  a mapping is executed using graphFetch and serialize.',
   doc.doc='Then:  the mapping is applied and the result of the mapping is serialized demonstrating the translated graph.'
} 
meta::pure::mapping::modelToModel::test::alloy::simple::serializeGraphWithoutAssociations() : Boolean[1]
{
   let tree = #{Firm {name, employees {fullName}} }#;

   let result = execute(
      |Firm.all()->graphFetch($tree)->serialize($tree),
      firmMappings,
      ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Firm, 
                                url='data:application/json,{"name":"Metallurgy Inc.", "employees":[{"firstName":"Pierre","lastName":"Doe"}, {"firstName":"Dave","lastName":"Miles"}]}'
                             )
      ),
      meta::pure::extension::defaultExtensions()
   );

   assert(jsonEquivalent('{"name":"Metallurgy Inc.", "employees":[{"fullName":"Pierre Doe"}, {"fullName":"Dave Miles"}]}'->parseJSON(), $result.values->toOne()->parseJSON()));
}


###Pure
import meta::pure::mapping::modelToModel::test::alloy::simple::graphWithoutAssociations::src::*;
import meta::pure::mapping::modelToModel::test::alloy::simple::graphWithoutAssociations::dest::*;

Class meta::pure::mapping::modelToModel::test::alloy::simple::graphWithoutAssociations::src::_Firm
{
   name      : String[1];
   employees : _Person[*];
}

Class meta::pure::mapping::modelToModel::test::alloy::simple::graphWithoutAssociations::src::_Person
{
   firstName : String[1];
   lastName  : String[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::simple::graphWithoutAssociations::dest::Firm
{
   name      : String[1];
   employees : Person[*];
}

Class meta::pure::mapping::modelToModel::test::alloy::simple::graphWithoutAssociations::dest::Person
{
   fullName : String[1];
}

###Mapping
import meta::pure::mapping::modelToModel::test::alloy::simple::graphWithoutAssociations::src::*;
import meta::pure::mapping::modelToModel::test::alloy::simple::graphWithoutAssociations::dest::*;

Mapping meta::pure::mapping::modelToModel::test::alloy::simple::graphWithoutAssociations::firmMappings
(
   Firm : Pure
            {
               ~src _Firm
               name  : $src.name,
               employees: $src.employees
            }
   
   Person : Pure
            {
               ~src _Person
               fullName : $src.firstName + ' ' + $src.lastName
            }
)
