// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::runtime::*;
import meta::pure::mapping::modelToModel::test::merge::*;
import meta::pure::router::operations::*;
import meta::pure::mapping::modelToModel::test::shared::src::*;
import meta::pure::mapping::modelToModel::test::shared::dest::*;
import meta::pure::mapping::modelToModel::test::*;


Class meta::pure::mapping::modelToModel::test::merge::SourcePersonWithFirstName
{
   firstName:String[1];
}


Class meta::pure::mapping::modelToModel::test::merge::SourcePersonWithLastName
{
   lastName:String[1];
}


function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.ExcludeAlloy>> meta::pure::mapping::modelToModel::test::merge::testMergeMultiInstance():Any[*]
{
   let instances = newMap(pair(SourcePersonWithFirstName, list([^SourcePersonWithFirstName(firstName='Pierre')])))
                         ->put(SourcePersonWithLastName, list([^SourcePersonWithLastName(lastName='Doe') ]))  ;
   
   let res = execute(
            |Person.all(),
            meta::pure::mapping::modelToModel::test::merge::MergeModelMappingSource,
            ^Runtime( connections = ^ModelConnection(element=^ModelStore(), instances=$instances)),
            meta::pure::extension::defaultExtensions()
            );
       assertEquals(1, $res.values->size());
       assertEquals('Doe', $res.values->at(0).lastName);
       assertEquals('Pierre', $res.values->at(0).firstName);
}



###Mapping
import meta::pure::mapping::modelToModel::test::merge::*;
import meta::pure::router::operations::*;
import meta::pure::mapping::modelToModel::test::shared::dest::*;
import meta::pure::mapping::modelToModel::test::*;

Mapping meta::pure::mapping::modelToModel::test::merge::MergeModelMappingSource
(
   *Person : Operation
           {
              merge_OperationSetImplementation_1__SetImplementation_MANY_(p1,p2)
           }

   Person[p1] : Pure
            {
               ~src SourcePersonWithFirstName
               firstName : $src.firstName
            }

   Person[p2] : Pure
            {
               ~src SourcePersonWithLastName
               lastName :  $src.lastName
            }

)

