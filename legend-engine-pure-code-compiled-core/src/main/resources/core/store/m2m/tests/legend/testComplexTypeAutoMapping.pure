// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// ======================================================================================================
// Tests
// ======================================================================================================

import meta::pure::graphFetch::*;
import meta::pure::mapping::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::runtime::*;
import meta::pure::mapping::modelToModel::test::alloy::autoMapping::helper::*;
import meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::*;
import meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::*;

function <<test.Test, test.AlloyOnly>> meta::pure::mapping::modelToModel::test::alloy::autoMapping::testComplexTypePassThroughSimple():Boolean[1]
{
  let tree    = #{Person{firstName, lastName, firm {id}}}#;
  let mapping = testComplexTypePassThroughSimple();
  let runtime = ^Runtime(connections = ^meta::pure::mapping::modelToModel::JsonModelConnection(
                                            element=^meta::pure::mapping::modelToModel::ModelStore(), 
                                            class=SPerson, 
                                            url='data:application/json,{"fullName":"John Doe", "firm" : {"id" : "Firm A", "address" : {"street": "A"}}}'
                                        ));
  let query = {| Person.all()->graphFetch($tree)->from($mapping, $runtime)->serialize($tree)};

  let result = executeReflectively($query);
  assertEquals('{"builder":{"_type":"json"},"values":{"firstName":"John","lastName":"Doe","firm":{"id":"Firm A"}}}', $result);
}

function <<test.Test, test.AlloyOnly>> meta::pure::mapping::modelToModel::test::alloy::autoMapping::testComplexTypePassThroughWithNestedProperties():Boolean[1]
{
  let tree    = #{Person{firstName, lastName, firm {id, address {street}}}}#;
  let mapping = testComplexTypePassThroughSimple();
  let runtime = ^Runtime(connections = ^meta::pure::mapping::modelToModel::JsonModelConnection(
                                            element=^meta::pure::mapping::modelToModel::ModelStore(), 
                                            class=SPerson, 
                                            url='data:application/json,{"fullName":"John Doe", "firm" : {"id" : "Firm A", "address" : {"street": "A"}}}'
                                        ));
  let query = {| Person.all()->graphFetch($tree)->from($mapping, $runtime)->serialize($tree)};
  
  let result = executeReflectively($query);
  assertEquals('{"builder":{"_type":"json"},"values":{"firstName":"John","lastName":"Doe","firm":{"id":"Firm A","address":{"street":"A"}}}}', $result);
}

function <<test.Test, test.AlloyOnly>> meta::pure::mapping::modelToModel::test::alloy::autoMapping::testComplexTypePassThroughWithoutAnyOtherProperty():Boolean[1]
{
  let tree    = #{Person{firm {id, address {street}}}}#;
  let mapping = testComplexTypePassThroughSimple();
  let runtime = ^Runtime(connections = ^meta::pure::mapping::modelToModel::JsonModelConnection(
                                            element=^meta::pure::mapping::modelToModel::ModelStore(), 
                                            class=SPerson, 
                                            url='data:application/json,{"fullName":"John Doe", "firm" : {"id" : "Firm A", "address" : {"street": "A"}}}'
                                        ));
  let query = {| Person.all()->graphFetch($tree)->from($mapping, $runtime)->serialize($tree)};
  
  let result = executeReflectively($query);
  assertEquals('{"builder":{"_type":"json"},"values":{"firm":{"id":"Firm A","address":{"street":"A"}}}}', $result);
}

function <<test.Test, test.AlloyOnly>> meta::pure::mapping::modelToModel::test::alloy::autoMapping::testMultipleComplexTypePassThrough():Boolean[1]
{
  let tree    = #{Person{firstName, lastName, firm {id, address {street}}, addresses {street}}}#;
  let mapping = testComplexTypePassThroughWithMultipleProperties();
  let runtime = ^Runtime(connections = ^meta::pure::mapping::modelToModel::JsonModelConnection(
                                            element=^meta::pure::mapping::modelToModel::ModelStore(), 
                                            class=SPerson, 
                                            url='data:application/json,{"fullName":"John Doe", "firm" : {"id" : "Firm A", "address" : {"street": "A"}}, "address1": {"street": "Person Street A"}}'
                                        ));
  let query = {| Person.all()->graphFetch($tree)->from($mapping, $runtime)->serialize($tree)};
  
  let result = executeReflectively($query);
  assertEquals('{"builder":{"_type":"json"},"values":{"firstName":"John","lastName":"Doe","firm":{"id":"Firm A","address":{"street":"A"}},"addresses":[{"street":"Person Street A"}]}}', $result);
}

function <<test.Test, test.AlloyOnly>> meta::pure::mapping::modelToModel::test::alloy::autoMapping::testComplexTypePassThroughAtPropertyLevel():Boolean[1]
{
  let tree    = #{Person{firstName, lastName, firm {id, address {street}}}}#;
  let mapping = testComplexTypePassThroughAtPropertyLevel();
  let runtime = ^Runtime(connections = ^meta::pure::mapping::modelToModel::JsonModelConnection(
                                            element=^meta::pure::mapping::modelToModel::ModelStore(), 
                                            class=SPerson, 
                                            url='data:application/json,{"fullName":"John Doe", "firm" : {"id" : "Firm A", "address" : {"street": "A"}}, "address1": {"street": "Person Street A"}}'
                                        ));
  let query = {| Person.all()->graphFetch($tree)->from($mapping, $runtime)->serialize($tree)};
  
  let result = executeReflectively($query);
  assertEquals('{"builder":{"_type":"json"},"values":{"firstName":"John","lastName":"Doe","firm":{"id":"Firm A updated","address":{"street":"A"}}}}', $result);
}

function <<test.Test, test.AlloyOnly>> meta::pure::mapping::modelToModel::test::alloy::autoMapping::testComplexTypePassThroughWithConcatenateFunction():Boolean[1]
{
  let tree    = #{Person{firstName, lastName, firm {id, address {street}}, addresses {street}}}#;
  let mapping = testComplexTypePassThroughWithConcatenateFunctionMapping();
  let runtime = ^Runtime(connections = ^meta::pure::mapping::modelToModel::JsonModelConnection(
                                            element=^meta::pure::mapping::modelToModel::ModelStore(), 
                                            class=SPerson, 
                                            url='data:application/json,{"fullName":"John Doe", "firm" : {"id" : "Firm A", "address" : {"street": "A"}}, "address1": {"street": "Person Street A"}, "address2": {"street": "Person Street B"}}'
                                        ));
  let query = {| Person.all()->graphFetch($tree)->from($mapping, $runtime)->serialize($tree)};
  
  let result = executeReflectively($query);
  assertEquals('{"builder":{"_type":"json"},"values":{"firstName":"John","lastName":"Doe","firm":{"id":"Firm A","address":{"street":"A"}},"addresses":[{"street":"Person Street A"},{"street":"Person Street B"}]}}', $result);
}

function <<test.Test, test.AlloyOnly>> meta::pure::mapping::modelToModel::test::alloy::autoMapping::testComplexTypePassThroughViaPropertyAccess():Boolean[1]
{
  let tree    = #{Person{firstName, lastName, addresses {street}}}#;
  let mapping = testComplexTypePassThroughViaPropertyAccess();
  let runtime = ^Runtime(connections = ^meta::pure::mapping::modelToModel::JsonModelConnection(
                                            element=^meta::pure::mapping::modelToModel::ModelStore(), 
                                            class=SPerson, 
                                            url='data:application/json,{"fullName":"John Doe", "firm" : {"id" : "Firm A", "address" : {"street": "A"}}, "address1": {"street": "Person Street A"}, "address2": {"street": "Person Street B"}}'
                                        ));
  let query = {| Person.all()->graphFetch($tree)->from($mapping, $runtime)->serialize($tree)};
  
  let result = executeReflectively($query);
  assertEquals('{"builder":{"_type":"json"},"values":{"firstName":"John","lastName":"Doe","addresses":[{"street":"A"}]}}', $result);
}

function <<test.Test, test.AlloyOnly>> meta::pure::mapping::modelToModel::test::alloy::autoMapping::testComplexTypePassThroughViaUserDefinedFunction():Boolean[1]
{
  let tree    = #{Person{firstName, lastName, addresses {street}}}#;
  let mapping = testComplexTypePassThroughViaUserDefinedFunction();
  let runtime = ^Runtime(connections = ^meta::pure::mapping::modelToModel::JsonModelConnection(
                                            element=^meta::pure::mapping::modelToModel::ModelStore(), 
                                            class=SPerson, 
                                            url='data:application/json,{"fullName":"John Doe", "firm" : {"id" : "Firm A", "address" : {"street": "A"}}, "address1": {"street": "Person Street A"}, "address2": {"street": "Person Street B"}}'
                                        ));
  let query = {| Person.all()->graphFetch($tree)->from($mapping, $runtime)->serialize($tree)};
  
  let result = executeReflectively($query);
  assertEquals('{"builder":{"_type":"json"},"values":{"firstName":"John","lastName":"Doe","addresses":[{"street":"A"}]}}', $result);
}

function <<test.Test, test.AlloyOnly>> meta::pure::mapping::modelToModel::test::alloy::autoMapping::testComplexTypePassThroughWithSubType():Boolean[1]
{
  let tree    = #{Person{firstName, lastName, firm {id}}}#;
  let mapping = testComplexTypePassThroughWithSubType();
  let runtime = ^Runtime(connections = ^meta::pure::mapping::modelToModel::JsonModelConnection(
                                            element=^meta::pure::mapping::modelToModel::ModelStore(), 
                                            class=SPerson1, 
                                            url='data:application/json,{"fullName":"John Doe", "firm" : {"id" : "Firm A", "address" : {"street": "A"}, "size" : 1000}}'
                                        ));
  let query = {| Person.all()->graphFetch($tree)->from($mapping, $runtime)->serialize($tree)};
  
  let result = executeReflectively($query);
  assertEquals('{"builder":{"_type":"json"},"values":{"firstName":"John","lastName":"Doe","firm":{"id":"Firm A"}}}', $result);
}

function <<test.Test, test.AlloyOnly>> meta::pure::mapping::modelToModel::test::alloy::autoMapping::testComplexTypePassThroughWithNestedSubType():Boolean[1]
{
  let tree    = #{Person{firstName, lastName, firm {id}}}#;
  let mapping = testComplexTypePassThroughWithNestedSubType();
  let runtime = ^Runtime(connections = ^meta::pure::mapping::modelToModel::JsonModelConnection(
                                            element=^meta::pure::mapping::modelToModel::ModelStore(), 
                                            class=SPerson2, 
                                            url='data:application/json,{"fullName":"John Doe", "firm" : {"id" : "Firm A", "address" : {"street": "A"}, "size" : 1000, "legalName": "Firm legalName"}}'
                                        ));
  let query = {| Person.all()->graphFetch($tree)->from($mapping, $runtime)->serialize($tree)};
  
  let result = executeReflectively($query);

  assertEquals('{"builder":{"_type":"json"},"values":{"firstName":"John","lastName":"Doe","firm":{"id":"Firm A"}}}', $result);
}

function <<test.Test>> meta::pure::mapping::modelToModel::test::alloy::autoMapping::testComplexTypePassThrougSourceTreeCalculation():Boolean[1]
{
  let tree    = #{Person{firstName, lastName, firm {id, address {street}}, addresses {street}}}#;
  let mapping = testComplexTypePassThroughWithMultipleProperties();

  let actual  = calculateSourceTree($tree, $mapping, meta::pure::extension::defaultExtensions());

  let expected= #{SPerson{address1 {street}, firm{address {street}, id}, fullName}}#;

  assertEquals($expected->treeToString(), $actual->treeToString());
}

function <<test.Test>> meta::pure::mapping::modelToModel::test::alloy::autoMapping::testComplexTypePassThrougSourceTreeCalculationWithSubType():Boolean[1]
{
  let tree    = #{Person{firstName, lastName, firm {id, address {street}}}}#;
  let mapping = testComplexTypePassThroughWithNestedSubType();

  let actual  = calculateSourceTree($tree, $mapping, meta::pure::extension::defaultExtensions());

  let expected= #{SPerson2{firm{address {street}, id}, fullName}}#;

  assertEquals($expected->treeToString(), $actual->treeToString());
}

// ======================================================================================================
// Setup
// ======================================================================================================

###Pure
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::*;
import meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::*;

Class meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::Person
{
  firstName : String[1];
  lastName  : String[1];
  firm      : Firm[1];
  addresses : Address[*];
}

Class meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::SPerson
{
  fullName : String[1];
  firm     : Firm[1];
  address1 : Address[1];
  address2 : Address[0..1];
}

Class meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::SPerson1
{
  fullName : String[1];
  firm     : BigFirm[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::SPerson2
{
  fullName : String[1];
  firm     : Corporation[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::Firm
{
  id       : String[1];
  address  : Address[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::BigFirm extends Firm
{
  size     : Integer[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::Corporation extends BigFirm
{
  legalName: String[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::Address
{
  street   : String[1];
}

function meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::testComplexTypePassThroughSimple(): Mapping[1]
{
  let mapping             = testComplexTypePassThroughBase;
  let classMapping        = $mapping.classMappings->toOne()->cast(@PureInstanceSetImplementation);
  let updatedClassMapping = ^$classMapping(propertyMappings += ^PurePropertyMapping(transform={src:SPerson[1]| $src.firm},
                                                                                    property=Person.properties->filter(p | $p.name == 'firm')->toOne(),
                                                                                    sourceSetImplementationId='src',
                                                                                    targetSetImplementationId='',
                                                                                    owner=$classMapping));
  ^$mapping(classMappings = $updatedClassMapping);
}

function meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::testComplexTypePassThroughWithMultipleProperties(): Mapping[1]
{
  let mapping             = testComplexTypePassThroughBase;
  let classMapping        = $mapping.classMappings->toOne()->cast(@PureInstanceSetImplementation);
  let updatedClassMapping = ^$classMapping(propertyMappings += [^PurePropertyMapping(transform={src:SPerson[1]| $src.firm},
                                                                                     property=Person.properties->filter(p | $p.name == 'firm')->toOne(),
                                                                                     sourceSetImplementationId='src',
                                                                                     targetSetImplementationId='',
                                                                                     owner=$classMapping),
                                                                ^PurePropertyMapping(transform={src:SPerson[1]| $src.address1},
                                                                                     property=Person.properties->filter(p | $p.name == 'addresses')->toOne(),
                                                                                     sourceSetImplementationId='src',
                                                                                     targetSetImplementationId='',
                                                                                     owner=$classMapping)]);
  ^$mapping(classMappings = $updatedClassMapping);
}

function meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::testComplexTypePassThroughAtPropertyLevel(): Mapping[1]
{
  let mapping             = testComplexTypePassThroughAtPropertyLevelBase;
  let classMapping        = $mapping.classMappings->filter(cm | $cm.class == Firm)->toOne()->cast(@PureInstanceSetImplementation);
  let updatedClassMapping = ^$classMapping(propertyMappings += ^PurePropertyMapping(transform={src:Firm[1]| $src.address},
                                                                                    property=Firm.properties->filter(p | $p.name == 'address')->toOne(),
                                                                                    sourceSetImplementationId='firm',
                                                                                    targetSetImplementationId='',
                                                                                    owner=$classMapping));
  ^$mapping(classMappings = $mapping.classMappings->filter(cm | $cm.class == Person)->concatenate($updatedClassMapping));
}

function meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::testComplexTypePassThroughWithConcatenateFunctionMapping(): Mapping[1]
{
  let mapping             = testComplexTypePassThroughBase;
  let classMapping        = $mapping.classMappings->toOne()->cast(@PureInstanceSetImplementation);
  let updatedClassMapping = ^$classMapping(propertyMappings += [^PurePropertyMapping(transform={src:SPerson[1]| $src.firm},
                                                                                     property=Person.properties->filter(p | $p.name == 'firm')->toOne(),
                                                                                     sourceSetImplementationId='src',
                                                                                     targetSetImplementationId='',
                                                                                     owner=$classMapping),
                                                                ^PurePropertyMapping(transform={src:SPerson[1]| $src.address1->concatenate($src.address2)},
                                                                                     property=Person.properties->filter(p | $p.name == 'addresses')->toOne(),
                                                                                     sourceSetImplementationId='src',
                                                                                     targetSetImplementationId='',
                                                                                     owner=$classMapping)]);
  ^$mapping(classMappings = $updatedClassMapping);
}

function meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::testComplexTypePassThroughViaPropertyAccess(): Mapping[1]
{
  let mapping             = testComplexTypePassThroughBase;
  let classMapping        = $mapping.classMappings->toOne()->cast(@PureInstanceSetImplementation);
  let updatedClassMapping = ^$classMapping(propertyMappings += [^PurePropertyMapping(transform={src:SPerson[1]| $src.firm.address},
                                                                                     property=Person.properties->filter(p | $p.name == 'addresses')->toOne(),
                                                                                     sourceSetImplementationId='src',
                                                                                     targetSetImplementationId='',
                                                                                     owner=$classMapping)]);
  ^$mapping(classMappings = $updatedClassMapping);
}

function meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::testComplexTypePassThroughViaUserDefinedFunction(): Mapping[1]
{
  let mapping             = testComplexTypePassThroughBase;
  let classMapping        = $mapping.classMappings->toOne()->cast(@PureInstanceSetImplementation);
  let updatedClassMapping = ^$classMapping(propertyMappings += [^PurePropertyMapping(transform={src:SPerson[1]| helperFunction($src)},
                                                                                     property=Person.properties->filter(p | $p.name == 'addresses')->toOne(),
                                                                                     sourceSetImplementationId='src',
                                                                                     targetSetImplementationId='',
                                                                                     owner=$classMapping)]);
  ^$mapping(classMappings = $updatedClassMapping);
}

function meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::testComplexTypePassThroughWithSubType(): Mapping[1]
{
  let mapping             = testComplexTypePassThroughWithSubTypeBase;
  let classMapping        = $mapping.classMappings->toOne()->cast(@PureInstanceSetImplementation);
  let updatedClassMapping = ^$classMapping(propertyMappings += [^PurePropertyMapping(transform={src:SPerson1[1]| $src.firm},
                                                                                     property=Person.properties->filter(p | $p.name == 'firm')->toOne(),
                                                                                     sourceSetImplementationId='src',
                                                                                     targetSetImplementationId='',
                                                                                     owner=$classMapping)]);
  ^$mapping(classMappings = $updatedClassMapping);
}

function meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::testComplexTypePassThroughWithNestedSubType(): Mapping[1]
{
  let mapping             = testComplexTypePassThroughWithNestedSubTypeBase;
  let classMapping        = $mapping.classMappings->toOne()->cast(@PureInstanceSetImplementation);
  let updatedClassMapping = ^$classMapping(propertyMappings += [^PurePropertyMapping(transform={src:SPerson2[1]| $src.firm},
                                                                                     property=Person.properties->filter(p | $p.name == 'firm')->toOne(),
                                                                                     sourceSetImplementationId='src',
                                                                                     targetSetImplementationId='',
                                                                                     owner=$classMapping)]);
  ^$mapping(classMappings = $updatedClassMapping);
}

function meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::helperFunction(sPerson:SPerson[1]): Address[1]
{
  $sPerson.firm.address
}

###Mapping
import meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::*;

Mapping meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::testComplexTypePassThroughBase
(
  *meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::Person[src]: Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::SPerson

    firstName : $src.fullName->substring(0, $src.fullName->indexOf(' ')),
    lastName  : $src.fullName->substring($src.fullName->indexOf(' ') + 1, $src.fullName->length())
  }
)

Mapping meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::testComplexTypePassThroughAtPropertyLevelBase
(
  *meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::Person[src]: Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::SPerson

    firstName : $src.fullName->substring(0, $src.fullName->indexOf(' ')),
    lastName  : $src.fullName->substring($src.fullName->indexOf(' ') + 1, $src.fullName->length()),
    firm[firm]: $src.firm
  }

  *meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::Firm[firm]: Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::Firm

    id     : $src.id + ' updated'
  }
)

Mapping meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::testComplexTypePassThroughWithSubTypeBase
(
  *meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::Person[src]: Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::SPerson1

    firstName : $src.fullName->substring(0, $src.fullName->indexOf(' ')),
    lastName  : $src.fullName->substring($src.fullName->indexOf(' ') + 1, $src.fullName->length())
  }
)

Mapping meta::pure::mapping::modelToModel::test::alloy::autoMapping::mapping::testComplexTypePassThroughWithNestedSubTypeBase
(
  *meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::Person[src]: Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::autoMapping::model::SPerson2

    firstName : $src.fullName->substring(0, $src.fullName->indexOf(' ')),
    lastName  : $src.fullName->substring($src.fullName->indexOf(' ') + 1, $src.fullName->length())
  }
)

// ======================================================================================================
// Helper Functions
// ======================================================================================================

###Pure
import meta::pure::extension::*;
import meta::pure::runtime::*;

function meta::pure::mapping::modelToModel::test::alloy::autoMapping::helper::executeReflectively(f: FunctionDefinition<Any>[1]): String[1]
{
  meta::legend::executeLegendQuery($f, [], ^ExecutionContext(), meta::pure::extension::defaultExtensions());
}