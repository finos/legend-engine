// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::mapping::modelToModel::test::primitives::*;
import meta::pure::mapping::modelToModel::test::filter::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::modelToModel::test::*;
import meta::pure::runtime::*;
import meta::pure::mapping::modelToModel::test::shared::src::*;
import meta::pure::mapping::modelToModel::test::shared::dest::*;

function <<meta::pure::profiles::test.Test>> meta::pure::mapping::modelToModel::test::primitives::testWithPrimitiveTypes():Any[*]
{
    let res = execute(
            |Person.all()->filter(f|$f.addresses->exists(a|$a.street == 'MyStreet')),
            primitiveModelMapping,
            ^Runtime(connections = ^ModelConnection(element=^ModelStore(), instances= newMap(
                                                                                                      pair(_Person_Address , list([
                                                                                                                        ^_Person_Address (name='ok', street='MyStreet')
                                                                                                                    ])
                                                                                                      )
                                                                                            )
                                                   )
             ),
             meta::pure::extension::defaultExtensions()
          );
   assertSameElements(['ok'], $res.values->at(0).lastName);
   assertSameElements(['MyStreet'], $res.values->at(0).addresses->at(0).street);
   assertSameElements([], $res.values->at(0).addresses->at(0).extension);
}


###Mapping
import meta::pure::mapping::modelToModel::test::shared::src::*;
import meta::pure::mapping::modelToModel::test::shared::dest::*;
import meta::pure::mapping::modelToModel::test::*;

Mapping meta::pure::mapping::modelToModel::test::primitives::primitiveModelMapping
(
   Person : Pure
            {
               ~src _Person_Address
               lastName : $src.name,
               addresses[add] : $src.street
            }
   
   Address[add] : Pure
            {
               ~src String
               street : $src
            }
)