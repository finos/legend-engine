// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class test::Person
{
  fullName: String[1];
}

Class test::Firm
{
  name: String[1];
}

Class test::Address
{
  name: String[1];
}

Association test::Person_Firm
{
  employees: test::Person[*];
  firm: test::Firm[0..1];
}

Association test::Person_Address
{
  persons: test::Person[*];
  address: test::Address[0..1];
}

Association test::Firm_Address
{
  firms: test::Firm[*];
  address: test::Address[0..1];
}

function test::fetch1(): String[1]
{
  test::Person.all()
    ->graphFetch(#{
      test::Person {
        fullName
      }
    }#, 1)
    ->serialize(#{
      test::Person {
        fullName
      }
    }#)
}

function test::fetch2(): String[1]
{
  test::Person.all()
    ->graphFetch(#{
      test::Person {
        fullName,
        firm {
          name
        }
      }
    }#, 1)
    ->serialize(#{
      test::Person {
        fullName,
        firm {
          name
        }
      }
    }#)
}

function test::fetch3(): String[1]
{
  test::Address.all()
    ->graphFetch(#{
      test::Address {
        name,
        persons {
          fullName
        }
      }
    }#, 1)
    ->serialize(#{
      test::Address {
        name,
        persons {
          fullName
        }
      }
    }#)
}

function test::fetch4(): String[1]
{
  test::Person.all()
    ->graphFetch(#{
      test::Person {
        fullName,
        firm {
          name
        },
        address {
          name
        }
      }
    }#, 1)
    ->serialize(#{
      test::Person {
        fullName,
        firm {
          name
        },
        address {
          name
        }
      }
    }#)
}

function test::fetch5(): String[1]
{
  test::Person.all()
    ->graphFetch(#{
      test::Person {
        fullName,
        firm {
          name,
          address {
            name
          }
        },
        address {
          name
        }
      }
    }#, 1)
    ->serialize(#{
      test::Person {
        fullName,
        firm {
          name,
          address {
            name
          }
        },
        address {
          name
        }
      }
    }#)
}


###Relational
Database test::DB1
(
  Table personTable (
    fullName VARCHAR(100) PRIMARY KEY,
    firmName VARCHAR(100),
    addressName VARCHAR(100)
  )
)

###Relational
Database test::DB2
(
  Table firmTable (
    name VARCHAR(100) PRIMARY KEY,
    addressName VARCHAR(100)
  )
)

###Relational
Database test::DB3
(
  Table addressTable (
    name VARCHAR(100) PRIMARY KEY
  )
)


###Mapping
Mapping test::Map
(
  test::Person : Relational {
    +firmName : String[0..1] : [test::DB1]personTable.firmName,
    +addressName : String[0..1] : [test::DB1]personTable.addressName,
    fullName: [test::DB1]personTable.fullName
  }

  test::Firm : Relational {
    +addressName : String[0..1] : [test::DB2]firmTable.addressName,
    name: [test::DB2]firmTable.name
  }

  test::Address : Relational {
    name: [test::DB3]addressTable.name
  }

  test::Person_Firm : XStore {
    employees[test_Firm, test_Person]: $this.name == $that.firmName,
    firm[test_Person, test_Firm]: $this.firmName == $that.name
  }

  test::Person_Address : XStore {
    persons[test_Address, test_Person]: $this.name == $that.addressName,
    address[test_Person, test_Address]: $this.addressName == $that.name
  }

  test::Firm_Address : XStore {
    firms[test_Address, test_Firm]: $this.name == $that.addressName,
    address[test_Firm, test_Address]: $this.addressName == $that.name
  }
)


###Runtime
Runtime test::Runtime
{
  mappings:
  [
    test::Map
  ];
  connections:
  [
    test::DB1:
    [
      c1: #{
        RelationalDatabaseConnection
        {
          type: H2;
          specification: LocalH2 
          {
            testDataSetupCSV: 'default\npersonTable\nfullName,firmName,addressName\nP1,F1,A1\nP2,F2,A2\nP3,,\nP4,,A3\nP5,F1,A1\n---';
          };
          auth: DefaultH2;
        }
      }#
    ],
    test::DB2:
    [
      c2: #{
        RelationalDatabaseConnection
        {
          type: H2;
          specification: LocalH2 
          {
            testDataSetupCSV: 'default\nfirmTable\nname,addressName\nF1,A4\nF2,A3\nF3,A3\nF4,null\n---';
          };
          auth: DefaultH2;
        }
      }#
    ],
    test::DB3:
    [
      c3: #{
        RelationalDatabaseConnection
        {
          type: H2;
          specification: LocalH2 
          {
            testDataSetupCSV: 'default\naddressTable\nname\nA1\nA2\nA3\nA4\nA5\n---';
          };
          auth: DefaultH2;
        }
      }#
    ]
  ];
}