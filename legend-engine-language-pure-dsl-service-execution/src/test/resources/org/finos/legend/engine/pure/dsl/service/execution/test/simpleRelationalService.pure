// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Relational
Database test::DB
(
  Table personTable
  (
    ID INTEGER PRIMARY KEY,
    FIRSTNAME VARCHAR(100),
    LASTNAME VARCHAR(100),
    CITY VARCHAR(100),
    AGE INT,
    SALARY FLOAT,
    DOB DATE,
    EMPLOYMENT_DATETIME TIMESTAMP,
    ACTIVE_EMPLOYMENT VARCHAR(100),
    YEAR_OF_START INT
  )
  Table fiscalCalendarTable
  (
    ID INTEGER PRIMARY KEY,
    FISCAL_YEAR_VALUE INT
  )
  Table PersonTableWithBusinessSnapshotMilestoning
  (
    milestoning(
        business(BUS_SNAPSHOT_DATE=SNAPSHOTDATE)
    )
    ID Integer PRIMARY KEY,
    FIRSTNAME VARCHAR(100),
    LASTNAME VARCHAR(100),
    SNAPSHOTDATE DATE
  )
)
Database test::DB2
(
  Table employmentTable
   (
     EMP_ID INTEGER PRIMARY KEY,
     FIRSTNAME VARCHAR(100),
     LASTNAME VARCHAR(100),
     EMPLOYMENT_DATETIME TIMESTAMP
   )
)

###Pure
Class test::Person
{
  firstName: String[1];
  lastName: String[1];
  city : String[0..1];
  age : Integer[0..1];
  salary : Float[0..1];
  dob : Date[0..1];
  employmentDateTime : DateTime[0..1];
  activeEmployment : Boolean[1];
  yearOfStart : Integer[1];
}

Class test::FiscalCalendar
{
   calendarID: Integer[1];
   fiscalYear: test::FiscalYear[1];
}

Class test::FiscalYear
{
  value: Integer[1];
}

Class test::Employment
{
  firstName: String[1];
  lastName: String[1];
  employmentDateTime : DateTime[0..1];
}

Class <<temporal.businesstemporal>> test::PersonWithBusinessSnapshotMilestoning
{
   id : Integer[1];
   firstName : String[1];
   lastName : String[1];
}

function test::fetch(ip: String[*]): String[1]
{
   test::Person.all()->filter(x|$x.firstName->in($ip))->graphFetch(#{test::Person{firstName,lastName}}#)->serialize(#{test::Person{firstName,lastName}}#)
}

function test::fetchOptionalCity(optionalCity:String[0..1]):Any[*]
{
    test::Person.all()->filter(p|$p.city==$optionalCity)->graphFetch(#{test::Person{firstName,lastName,city}}#)->serialize(#{test::Person{firstName,lastName,city}}#)
}

function test::fetchOptionalAge(optionalAge:Integer[0..1]):Any[*]
{
    test::Person.all()->filter(p|$p.age==$optionalAge)->graphFetch(#{test::Person{firstName,lastName,age}}#)->serialize(#{test::Person{firstName,lastName,age}}#)
}

function test::fetchOptionalSalary(optionalSalary:Float[0..1]):Any[*]
{
    test::Person.all()->filter(p|$p.salary==$optionalSalary)->graphFetch(#{test::Person{firstName,lastName,salary}}#)->serialize(#{test::Person{firstName,lastName,salary}}#)
}

function test::fetchOptionalDateOfBirth(optionalDate:Date[0..1]):Any[*]
{
    test::Person.all()->filter(p|$p.dob==$optionalDate)->graphFetch(#{test::Person{firstName,lastName,dob}}#)->serialize(#{test::Person{firstName,lastName,dob}}#)
}

function test::fetchOptionalEmploymentDateTime(optionalDateTime:DateTime[0..1]):Any[*]
{
    test::Person.all()->filter(p|$p.employmentDateTime==$optionalDateTime)->graphFetch(#{test::Person{firstName,lastName,employmentDateTime}}#)->serialize(#{test::Person{firstName,lastName,employmentDateTime}}#)
}

function test::fetchOptionalEmploymentDateTimeWithTZ(optionalDateTimeWithTZ:DateTime[0..1]):Any[*]
{
    test::Employment.all()->filter(e|$e.employmentDateTime==$optionalDateTimeWithTZ)->graphFetch(#{test::Employment{firstName,lastName,employmentDateTime}}#)->serialize(#{test::Employment{firstName,lastName,employmentDateTime}}#)
}

function test::fetchOptionalActiveEmployment(optionalActiveEmployment:Boolean[0..1]):Any[*]
{
    test::Person.all()->filter(p|$p.activeEmployment==$optionalActiveEmployment)->graphFetch(#{test::Person{firstName,lastName}}#)->serialize(#{test::Person{firstName,lastName}}#)
}

function test::testMultiExpressionQueryWithMandatoryTemporalDate(businessDate: StrictDate[0..1]): String[1]
{
   let dummyDate = %2005-03-15;
   let asOf = if($businessDate->isNotEmpty(), |$businessDate->toOne(), |$dummyDate);
   test::PersonWithBusinessSnapshotMilestoning.all($asOf)->graphFetch(#{test::PersonWithBusinessSnapshotMilestoning{firstName,lastName}}#)->serialize(#{test::PersonWithBusinessSnapshotMilestoning{firstName,lastName}}#);
}

function test::fetchWithUserId(): String[1]
{
   let currentUser = meta::pure::runtime::currentUserId();
   test::Person.all()->filter(p|$p.firstName->toLower() == $currentUser)->graphFetch(#{test::Person{firstName,lastName}}#)->serialize(#{test::Person{firstName,lastName}}#);
}

function test::testMultiExpressionQueryWithPropertyPath(): Any[*]
{
    let endDateCalendar = test::FiscalCalendar.all()->filter(x|$x.fiscalYear.value == 2015)->toOne()->graphFetch(#{test::FiscalCalendar{fiscalYear{value}}}#);
    test::Person.all()->filter(x|$x.yearOfStart == $endDateCalendar->toOne().fiscalYear.value)->graphFetch(#{test::Person{firstName,lastName}}#)->serialize(#{test::Person{firstName,lastName}}#);
}

function test::fetchOptionalCityMany(optionalCity:String[*]):Any[*]
{
    test::Person.all()->filter(p|$p.city->in($optionalCity))->graphFetch(#{test::Person{firstName,lastName}}#)->serialize(#{test::Person{firstName,lastName}}#)
}

function test::fetchOptionalAgeMany(optionalAge:Integer[*]):Any[*]
{
    test::Person.all()->filter(p|$p.age->in($optionalAge))->graphFetch(#{test::Person{firstName,lastName}}#)->serialize(#{test::Person{firstName,lastName}}#)
}

function test::fetchOptionalSalaryMany(optionalSalary:Float[*]):Any[*]
{
    test::Person.all()->filter(p|$p.salary->in($optionalSalary))->graphFetch(#{test::Person{firstName,lastName,salary}}#)->serialize(#{test::Person{firstName,lastName,salary}}#)
}

function test::fetchOptionalDobMany(optionalDate:Date[*]):Any[*]
{
    test::Person.all()->filter(p|$p.dob->in($optionalDate))->graphFetch(#{test::Person{firstName,lastName,dob}}#)->serialize(#{test::Person{firstName,lastName,dob}}#)
}

function test::fetchOptionalDateTimeWithNoTZMany(optionalDateTime:DateTime[*]):Any[*]
{
    test::Person.all()->filter(p|$p.employmentDateTime->in($optionalDateTime))->graphFetch(#{test::Person{firstName,lastName,employmentDateTime}}#)->serialize(#{test::Person{firstName,lastName,employmentDateTime}}#)
}

function test::fetchOptionalDateTimeWithTZMany(optionalDateTime:DateTime[*]):Any[*]
{
    test::Employment.all()->filter(e|$e.employmentDateTime->in($optionalDateTime))->graphFetch(#{test::Employment{firstName,lastName,employmentDateTime}}#)->serialize(#{test::Employment{firstName,lastName,employmentDateTime}}#)
}

function test::graphFetchWithBatchMemoryLimit():String[1]
{
    test::Person.all()->graphFetch(#{test::Person{firstName,lastName,employmentDateTime}}#)->serialize(#{test::Person{firstName,lastName,employmentDateTime}}#)
}

function test::graphFetchWithBatchMemoryLimitAndBatchSize():String[1]
{
    test::Person.all()->graphFetch(#{test::Person{firstName,lastName,employmentDateTime}}#, 1)->serialize(#{test::Person{firstName,lastName,employmentDateTime}}#)
}

function test::graphFetchCheckedWithBatchMemoryLimit():String[1]
{
    test::Person.all()->graphFetchChecked(#{test::Person{firstName,lastName,employmentDateTime}}#)->serialize(#{test::Person{firstName,lastName,employmentDateTime}}#)
}

function test::graphFetchCheckedWithBatchMemoryLimitAndBatchSize():String[1]
{
    test::Person.all()->graphFetchChecked(#{test::Person{firstName,lastName,employmentDateTime}}#, 1)->serialize(#{test::Person{firstName,lastName,employmentDateTime}}#)
}

###Mapping
Mapping test::Map
(
  *test::Person: Relational
  {
    ~primaryKey
    (
      [test::DB]personTable.ID
    )
    ~mainTable [test::DB]personTable
    firstName: [test::DB]personTable.FIRSTNAME,
    lastName: [test::DB]personTable.LASTNAME,
    city : [test::DB]personTable.CITY,
    age : [test::DB]personTable.AGE,
    salary : [test::DB]personTable.SALARY,
    dob : [test::DB]personTable.DOB,
    employmentDateTime : [test::DB]personTable.EMPLOYMENT_DATETIME,
    activeEmployment : case(equal([test::DB]personTable.ACTIVE_EMPLOYMENT,'Y'),'true','false'),
    yearOfStart : [test::DB]personTable.YEAR_OF_START

  }

  *test::FiscalCalendar: Relational
    {
      ~primaryKey
      (
        [test::DB]fiscalCalendarTable.ID
      )
      ~mainTable [test::DB]fiscalCalendarTable
      fiscalYear
      (
        value: [test::DB]fiscalCalendarTable.FISCAL_YEAR_VALUE
      )
    }

  *test::Employment: Relational
    {
      ~primaryKey
      (
        [test::DB2]employmentTable.EMP_ID
      )
      ~mainTable [test::DB2]employmentTable
      firstName: [test::DB2]employmentTable.FIRSTNAME,
      lastName: [test::DB2]employmentTable.LASTNAME,
      employmentDateTime : [test::DB2]employmentTable.EMPLOYMENT_DATETIME
    }

  *test::PersonWithBusinessSnapshotMilestoning : Relational
  {
    ~primaryKey
    (
      [test::DB]PersonTableWithBusinessSnapshotMilestoning.ID
    )
    ~mainTable [test::DB]PersonTableWithBusinessSnapshotMilestoning
    id : [test::DB]PersonTableWithBusinessSnapshotMilestoning.ID,
    firstName : [test::DB]PersonTableWithBusinessSnapshotMilestoning.FIRSTNAME,
    lastName : [test::DB]PersonTableWithBusinessSnapshotMilestoning.LASTNAME
  }
)

###Runtime
Runtime test::Runtime
{
  mappings:
  [
    test::Map
  ];
  connections:
  [
    test::DB:
    [
      connection_1:
      #{
        RelationalDatabaseConnection
        {
          store: test::DB;
          type: H2;
          specification: LocalH2
          {
            testDataSetupCSV: 'default\nfiscalCalendarTable\nID,FISCAL_YEAR_VALUE\n111,2015\n222,2005\n333,2010\n---\ndefault\npersonTable\nID,FIRSTNAME,LASTNAME,CITY,AGE,SALARY,DOB,EMPLOYMENT_DATETIME,ACTIVE_EMPLOYMENT,YEAR_OF_START\n1,Peter,Smith,New York,,,1982-01-20,2012-05-20T13:10:52.501,,2015\n2,John,Johnson,,35,80000.75,,2005-03-15T18:47:52,N,2005\n3,Bob,Stevens,Dallas,25,75000.75,1997-12-16,,Y,2010\n---\ndefault\nPersonTableWithBusinessSnapshotMilestoning\nID,FIRSTNAME,LASTNAME,SNAPSHOTDATE\n1,Peter,Smith,1982-01-20\n2,John,Johnson,2005-03-15\n3,Bob,Stevens,1997-12-16\n---';
          };
          auth: DefaultH2;
        }
      }#
    ],
    test::DB2:
    [
      connection_2:
      #{
        RelationalDatabaseConnection
        {
          store: test::DB2;
          type: H2;
          timezone:+1000;
          specification: LocalH2
          {
            testDataSetupCSV: 'default\nemploymentTable\nEMP_ID,FIRSTNAME,LASTNAME,EMPLOYMENT_DATETIME\n1,Peter,Smith,2012-05-20T13:10:52.501\n2,John,Johnson,2005-03-15T18:47:52\n3,Bob,Stevens,\n---';
          };
          auth: DefaultH2;
        }
      }#
    ]
  ];
}