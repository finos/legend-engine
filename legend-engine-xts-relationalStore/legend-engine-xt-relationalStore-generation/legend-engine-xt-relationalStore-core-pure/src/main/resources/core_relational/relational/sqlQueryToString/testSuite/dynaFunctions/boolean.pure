// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::metamodel::*;
import meta::relational::dbTestRunner::*;
import meta::pure::test::*;

//operations on booleans

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::sqlTrue::testSqlTrue(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name= 'sqlTrue');
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::sqlFalse::testSqlFalse(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='sqlFalse');
  let expected = ^Literal(value=false);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

//TODO activate these tests once we have stabilised boolean datatype by providing custom boolean literal propcessors for dbs that dont support boolean datatypes
function <<paramTest.Ignore>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::and::testAnd(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='and', parameters=[^Literal(value=true), ^Literal(value=false)]);
  let expected = ^Literal(value=false);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Ignore>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::and::testAndWithSqlBooleanDynaFunctions(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='and', parameters=[^DynaFunction(name='sqlTrue'), ^DynaFunction(name='sqlFalse')]);
  let expected = ^Literal(value=false);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

// Dyna function should only be used for H2 compatibility
function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::castBoolean::testCastBoolean(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(
    name= 'castBoolean', 
    parameters=[
      ^DynaFunction(
        name='case', 
        parameters=[
          ^DynaFunction(name='equal', parameters=[^Literal(value='Y'), ^Literal(value='Y')]), 
          ^Literal(value='true'), 
          ^Literal(value='false')
        ]
      )
    ]
  );
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::and::testAndwithConditions(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='and', parameters=[^DynaFunction(name='greaterThan', parameters=[^Literal(value=11), ^Literal(value=1)]),
                                                       ^DynaFunction(name='lessThan', parameters=[^Literal(value=11), ^Literal(value=1)])]);
  let expected = ^Literal(value=false);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Ignore>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::or::testOr(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='or', parameters=[^Literal(value=true), ^Literal(value=false)]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::or::testOrWithConditions(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='or', parameters=[^DynaFunction(name='greaterThan', parameters=[^Literal(value=11), ^Literal(value=1)]),
                                                      ^DynaFunction(name='lessThan', parameters=[^Literal(value=11), ^Literal(value=1)])]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Ignore>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::or::testOrWithSqlBooleanDynaFunctions(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='or', parameters=[^DynaFunction(name='sqlTrue'), ^DynaFunction(name='sqlFalse')]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::sqlNull::testIsNull(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='isNull', parameters= [^DynaFunction(name='sqlNull')]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

//TODO expand these tests on row results when testing with 'setup data' is available 
function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::isNull::testSqlNull(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='isNull', parameters= [^DynaFunction(name='sqlNull')]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::isNotNull::testSqlNull(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='isNotNull', parameters= [^DynaFunction(name='sqlNull')]);
  let expected = ^Literal(value=false);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::isEmpty::testSqlNull(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='isEmpty', parameters= [^DynaFunction(name='sqlNull')]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::isNotEmpty::testSqlNull(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='isNotEmpty', parameters= [^DynaFunction(name='sqlNull')]);
  let expected = ^Literal(value=false);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

// Operations with Boolean Results

// object equality
function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::equal::testNumberEquality(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='equal', parameters=[^Literal(value=11), ^Literal(value=11)]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::notEqual::testNumberInequality(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='notEqual', parameters=[^Literal(value=11), ^Literal(value=11)]);
  let expected = ^Literal(value=false);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::notEqualAnsi::testNumberInequality(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='notEqualAnsi', parameters=[^Literal(value=11), ^Literal(value=11)]);
  let expected = ^Literal(value=false);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}


// Number comparison
function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::greaterThan::testNumbers(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='greaterThan', parameters=[^Literal(value=11), ^Literal(value=1)]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::greaterThanEqual::testNumbers(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='greaterThanEqual', parameters=[^Literal(value=11), ^Literal(value=1)]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::lessThan::testNumbers(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='lessThan', parameters=[^Literal(value=1), ^Literal(value=11)]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::lessThanEqual::testNumbers(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='lessThanEqual', parameters=[^Literal(value=1), ^Literal(value=11)]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}