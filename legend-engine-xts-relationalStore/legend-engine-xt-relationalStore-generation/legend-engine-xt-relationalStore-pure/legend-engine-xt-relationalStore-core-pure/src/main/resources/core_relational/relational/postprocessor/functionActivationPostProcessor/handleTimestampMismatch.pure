// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::metamodel::relation::*;
import meta::relational::functions::pureToSqlQuery::*;
import meta::relational::postProcessor::*;
import meta::relational::functions::pureToSqlQuery::metamodel::*;
import meta::pure::extension::*;
import meta::pure::runtime::*;
import meta::core::runtime::*;
import meta::relational::metamodel::*;
import meta::relational::mapping::*;
import meta::relational::metamodel::datatype::*;

function meta::relational::postProcessor::HandleTimestampMismatch(query:SQLQuery[1]): PostProcessorResult[1]
{
    let transformFunc = {r: RelationalOperationElement[1]|
                          $r->match([
                            l: Alias[1] | transformAlias($l),
                            d: DynaFunction[1] | transformDynaFunction($d),
                            r: RelationalOperationElement[1] | $r;
                          ]);
                        };

  let transformedQuery = $query->transform($transformFunc, ^Map<RelationalOperationElement, RelationalOperationElement>()).first; 
  
  ^PostProcessorResult(query = $transformedQuery->cast(@SQLQuery)); 
}

function <<access.private>> meta::relational::postProcessor::transformAlias(a: Alias[1]): RelationalOperationElement[1]
{   
  if($a.relationalElement->instanceOf(TableAliasColumn),
      | let t = $a.relationalElement->cast(@TableAliasColumn);
        if($t.column.type->instanceOf(Timestamp),
            | ^$a(relationalElement = ^DynaFunction(name = 'cast', parameters = [$t, ^DataTypeInfo(dataType=$t.column.type)]));,
            | $a
          );,
      |$a
    );
}

function <<access.private>> meta::relational::postProcessor::transformDynaFunction(d: DynaFunction[1]): RelationalOperationElement[1]
{   
  if($d.name != 'cast' ,
    | let newParams = $d.parameters->map(p | if($p->instanceOf(TableAliasColumn) && $p->cast(@TableAliasColumn).column.type->instanceOf(Timestamp),
                                              | let t = $p->cast(@TableAliasColumn);
                                                ^DynaFunction(name = 'cast', parameters = [$t, ^DataTypeInfo(dataType=$t.column.type)]);,
                                              |$p;
                                             )
                                        );
      ^$d(parameters = $newParams);,
    | $d;
  );
}