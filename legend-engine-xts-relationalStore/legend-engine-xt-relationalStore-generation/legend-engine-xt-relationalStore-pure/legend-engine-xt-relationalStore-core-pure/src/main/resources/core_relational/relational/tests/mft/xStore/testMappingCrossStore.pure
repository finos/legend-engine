// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::pure::mft::tests::collection::*;
import meta::pure::mft::*;
import meta::pure::runtime::*;
import meta::relational::tests::mapping::groupBy::model::store::*;
import meta::pure::mft::tests::collection::*;
import meta::pure::test::mft::*;
import meta::pure::testCoverage::featureMatrix::*;
import meta::relational::mft::*;

function <<MappingFeature.crossStore, meta::pure::test::mft::model::MFT.testCollection>> meta::relational::tests::mft::mapping::crossstore::testcrossstoreMapping():MFTMappingTest[1]
{
 ^MFTMappingTest(setupData = [ ^CSVSetupData(database=meta::relational::tests::mapping::crossStore::model::mapping::mft::store::FirmDB,path='/core_relational/relational/tests/mft/xStore/setup2.csv'),
                                ^CSVSetupData(database=meta::relational::tests::mapping::crossStore::model::mapping::mft::store::PersonDB,path='/core_relational/relational/tests/mft/xStore/setup1.csv')
                             ],
                 mapping =  meta::relational::tests::mapping::crossStore::model::mapping::mft::crossStoreTestMapping,
                assertions = [ ^IgnoreExecutionTest(reason='bug in plan generation for graph fetch related to association to firm ' ,tests= meta::pure::mft::tests::collection::filter::simpleGraph__FunctionDefinition_1_ ),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::distinct::distinctTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::drop::dropTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::exists::existsRecursiveTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterAssociationGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":{"firstName":"Joe"}}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterAssociationIsEmptyGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":{"firstName":"John"}}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterAssociationIsEmptyTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName,legalName\nJohn,Firm D\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>], legalName: [FIRM.LEGAL_NAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterAssociationTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":{"firstName":"Joe"}}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::first::firstTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::groupBy::groupByTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='name,cnt\nJoe,1\nJohn,1\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[cnt: [PERSON.LASTNAME <TableAliasColumn>], name: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::slice::sliceTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::sort::sortAssociationTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::sort::sortTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::take::takeTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::drop::dropGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":{"firstName":"Joe"}}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::exists::existsTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterPropertyFromSuperTypeTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Address','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::simpleGraph__FunctionDefinition_1_,expectedLineageResult=meta::pure::test::mft::expectedLineage(
                              ['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'],
                                  ['Lambda','meta::pure::mft::tests::collection::Address','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'],
                                  '[Person.address.street: [PERSON.STREET <TableAliasColumn>], Person.address.type: [PERSON.ADDRESS_TYPE <TableAliasColumn>], Person.birthDate: [PERSON.BIRTHDATE <TableAliasColumn>], Person.firm.legalName: [FIRM.LEGAL_NAME <TableAliasColumn>], Person.firm.optionalDescription: [FIRM.OPTIONAL_DESCRIPTION <TableAliasColumn>], Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>], Person.fullName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON.LASTNAME <TableAliasColumn>], Person.lastName: [PERSON.LASTNAME <TableAliasColumn>]]'
                                  )),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::simpleTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName,lastName,fullName,birthDate,street,type,legalName,optionalDescription\nJohn,Doe,John Doe,2020-02-02,MAIN,PRIMARY,Firm D,TDSNull\nJoe,Smith,Joe Smith,2010-02-02,FIRST,SECONDARY,Co,Company\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(
                              ['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'],
                                  ['Lambda','meta::pure::mft::tests::collection::Address','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'],
                                  '[birthDate: [PERSON.BIRTHDATE <TableAliasColumn>], firstName: [PERSON.FIRSTNAME <TableAliasColumn>], fullName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON.LASTNAME <TableAliasColumn>], lastName: [PERSON.LASTNAME <TableAliasColumn>], legalName: [FIRM.LEGAL_NAME <TableAliasColumn>], optionalDescription: [FIRM.OPTIONAL_DESCRIPTION <TableAliasColumn>], street: [PERSON.STREET <TableAliasColumn>], type: [PERSON.ADDRESS_TYPE <TableAliasColumn>]]'
                                  )),
                            ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::first::firstGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"John"},{"firstName":"Joe"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                            ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::groupBy::groupByMultiAggTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='name,cnt,cnt2\nJoe,1,1\nJohn,1,1\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[cnt2: [PERSON.BIRTHDATE <TableAliasColumn>], cnt: [PERSON.LASTNAME <TableAliasColumn>], name: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                            ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::slice::sliceGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":{"firstName":"John"}}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                            ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::sort::sortGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"Joe"},{"firstName":"John"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                            ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::take::takeGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":{"firstName":"John"}}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]'))
                ] 
            );

}


function <<MappingFeature.crossStore,MappingFeature.union, meta::pure::test::mft::model::MFT.testCollection>> meta::relational::tests::mft::mapping::crossstore::testcrossstoreUnionMapping():MFTMappingTest[1]
{
 ^MFTMappingTest(setupData = [ ^CSVSetupData(database=meta::relational::tests::mapping::crossStore::model::mapping::mft::store::FirmDB,path='/core_relational/relational/tests/mft/xStore/setup2.csv'),
                                ^CSVSetupData(database=meta::relational::tests::mapping::crossStore::model::mapping::mft::store::PersonDB,path='/core_relational/relational/tests/mft/xStore/setup1.csv')
                             ],
                 mapping =  meta::relational::tests::mapping::crossStore::model::mapping::mft::crossStoreUnionTestMapping,
                assertions = [^IgnoreExecutionTest(reason='bug in plan generation for graph fetch related to association to firm ' ,tests= meta::pure::mft::tests::collection::filter::simpleGraph__FunctionDefinition_1_ ),
                                ^IgnoreExecutionTest(tests=[meta::pure::mft::tests::collection::filter::filterAssociationGraphFetch__FunctionDefinition_1_,meta::pure::mft::tests::collection::filter::filterAssociationIsEmptyGraphFetch__FunctionDefinition_1_], reason='bug in cluster generation (resource:/core/pure/router/store/cluster.pure line:251 column:8), "Match failure'),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::distinct::distinctTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::drop::dropTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\nJoe\nJohn\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::exists::existsTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::exists::existsRecursiveTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterAssociationGraphFetch__FunctionDefinition_1_,expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterAssociationIsEmptyGraphFetch__FunctionDefinition_1_,expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterAssociationIsEmptyTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName,legalName\nJohn,Firm D\nJohn,TDSNull\nJoe,TDSNull\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>], legalName: [FIRM.LEGAL_NAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterAssociationTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"Joe"},{"firstName":"Joe"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterPropertyFromSuperTypeTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Address','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::first::firstTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\nJoe\nJohn\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::groupBy::groupByMultiAggTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='name,cnt,cnt2\nJoe,2,2\nJohn,2,2\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[cnt2: [PERSON.BIRTHDATE <TableAliasColumn>], cnt: [PERSON.LASTNAME <TableAliasColumn>], name: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::groupBy::groupByTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='name,cnt\nJoe,2\nJohn,2\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[cnt: [PERSON.LASTNAME <TableAliasColumn>], name: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::slice::sliceTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::sort::sortAssociationTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\nJoe\nJoe\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::sort::sortGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"Joe"},{"firstName":"John"},{"firstName":"Joe"},{"firstName":"John"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::sort::sortTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\nJoe\nJohn\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::take::takeTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
               
                            ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::drop::dropGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"Joe"},{"firstName":"Joe"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                            ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::simpleGraph__FunctionDefinition_1_,expectedLineageResult=meta::pure::test::mft::expectedLineage(
                            ['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'],
                                ['Lambda','meta::pure::mft::tests::collection::Address','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'],
                                '[Person.address.street: [PERSON.STREET <TableAliasColumn>], Person.address.type: [PERSON.ADDRESS_TYPE <TableAliasColumn>], Person.birthDate: [PERSON.BIRTHDATE <TableAliasColumn>], Person.firm.legalName: [FIRM.LEGAL_NAME <TableAliasColumn>], Person.firm.optionalDescription: [FIRM.OPTIONAL_DESCRIPTION <TableAliasColumn>], Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>], Person.fullName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON.LASTNAME <TableAliasColumn>], Person.lastName: [PERSON.LASTNAME <TableAliasColumn>]]'
                                )),
                            ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::simpleTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName,lastName,fullName,birthDate,street,type,legalName,optionalDescription\nJohn,Doe,John Doe,2020-02-02,MAIN,PRIMARY,Firm D,TDSNull\nJoe,Smith,Joe Smith,2010-02-02,FIRST,SECONDARY,Co,Company\nJohn,Doe,John Doe,2020-02-02,MAIN,PRIMARY,TDSNull,TDSNull\nJoe,Smith,Joe Smith,2010-02-02,FIRST,SECONDARY,TDSNull,TDSNull\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(
                            ['Lambda','db_FirmDB','db_PersonDB','tb_FirmDBFIRMSCHEMAFIRM','tb_PersonDBTESTPERSON'],
                                ['Lambda','meta::pure::mft::tests::collection::Address','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'],
                                '[birthDate: [PERSON.BIRTHDATE <TableAliasColumn>], firstName: [PERSON.FIRSTNAME <TableAliasColumn>], fullName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON.LASTNAME <TableAliasColumn>], lastName: [PERSON.LASTNAME <TableAliasColumn>], legalName: [FIRM.LEGAL_NAME <TableAliasColumn>], optionalDescription: [FIRM.OPTIONAL_DESCRIPTION <TableAliasColumn>], street: [PERSON.STREET <TableAliasColumn>], type: [PERSON.ADDRESS_TYPE <TableAliasColumn>]]'
                                )),
                            ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::first::firstGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"John"},{"firstName":"Joe"},{"firstName":"John"},{"firstName":"Joe"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                            ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::slice::sliceGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"John"},{"firstName":"John"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]')),
                            ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::take::takeGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"John"},{"firstName":"John"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_PersonDB','tb_PersonDBTESTPERSON'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>]]'))
                ]
            );

}

###Mapping
import meta::pure::mft::tests::collection::*;
import meta::relational::tests::mapping::crossStore::model::mapping::mft::store::*;
Mapping meta::relational::tests::mapping::crossStore::model::mapping::mft::crossStoreTestMapping
(

     Person[person]: Relational
    {
       scope([PersonDB]TEST.PERSON)
       (
          firstName: FIRSTNAME,
          lastName : LASTNAME,
          birthDate: BIRTHDATE,
            address(
            street:STREET,
            type: EnumerationMapping AddressTypeMapping: ADDRESS_TYPE  
          ),
          +FIRM_IDFk: Integer[1]: FIRM_ID

       )  
    }


    Firm[firm]: Relational
    {
       legalName: [FirmDB]FIRMSCHEMA.FIRM.LEGAL_NAME,
       optionalDescription: [FirmDB]FIRMSCHEMA.FIRM.OPTIONAL_DESCRIPTION,
      +FIRM_ID: Integer[1]: [FirmDB]FIRMSCHEMA.FIRM.ID


    }

    PersonFirm: XStore
  {
    firm[person, firm]: $this.FIRM_IDFk == $that.FIRM_ID,
    employees[firm, person]: $this.FIRM_ID ==  $that.FIRM_IDFk
  }

    AddressType: EnumerationMapping AddressTypeMapping
  {
    PRIMARY: ['PRIMARY'],
    SECONDARY: ['SECONDARY']
  }

)

###Mapping
import meta::pure::mft::tests::collection::*;
import meta::relational::tests::mapping::crossStore::model::mapping::mft::store::*;
Mapping meta::relational::tests::mapping::crossStore::model::mapping::mft::crossStoreUnionTestMapping
(

   *Person : Operation
               {
             meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(person1,person2)
             }
  
   *Firm : Operation
               {
             meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(firm1,firm2)
             }

      Person[person1]: Relational
    {
       scope([PersonDB]TEST.PERSON)
       (
          firstName: FIRSTNAME,
          lastName : LASTNAME,
          birthDate: BIRTHDATE,
            address(
            street:STREET,
            type: EnumerationMapping AddressTypeMapping: ADDRESS_TYPE  
  
          ),
          +FIRM_IDFk: Integer[1]: FIRM_ID

       )  
    }


      Person[person2]: Relational
    {
       scope([PersonDB]TEST.PERSON)
       (
          firstName: FIRSTNAME,
          lastName : LASTNAME,
            address(
            street:STREET,
            type: EnumerationMapping AddressTypeMapping: ADDRESS_TYPE  
  
          ),
          birthDate: BIRTHDATE,
          +FIRM_IDFk: Integer[1]: FIRM_ID

       )  
    }



    Firm[firm1]: Relational
    {
       legalName: [FirmDB]FIRMSCHEMA.FIRM.LEGAL_NAME,
       optionalDescription: [FirmDB]FIRMSCHEMA.FIRM.OPTIONAL_DESCRIPTION,
      +FIRM_ID: Integer[1]: [FirmDB]FIRMSCHEMA.FIRM.ID


    }



    Firm[firm2]: Relational
    {
       legalName: [FirmDB]FIRMSCHEMA.FIRM.LEGAL_NAME,
       optionalDescription: [FirmDB]FIRMSCHEMA.FIRM.OPTIONAL_DESCRIPTION,
      +FIRM_ID: Integer[1]: [FirmDB]FIRMSCHEMA.FIRM.ID


    }

    PersonFirm: XStore
  {
    firm[person1, firm1]: $this.FIRM_IDFk == $that.FIRM_ID,
    employees[firm1, person1]: $this.FIRM_ID ==  $that.FIRM_IDFk
    firm[person2, firm2]: $this.FIRM_IDFk == $that.FIRM_ID,
    employees[firm2, person2]: $this.FIRM_ID ==  $that.FIRM_IDFk
  }

     AddressType: EnumerationMapping AddressTypeMapping
  {
    PRIMARY: ['PRIMARY'],
    SECONDARY: ['SECONDARY']
  }


)


###Relational

Database meta::relational::tests::mapping::crossStore::model::mapping::mft::store::FirmDB
(
    Schema FIRMSCHEMA
    (
    

    Table FIRM
    (
       ID INT PRIMARY KEY,
       LEGAL_NAME VARCHAR(20),
       OPTIONAL_DESCRIPTION VARCHAR(20)

    )

    )

)

###Relational
Database meta::relational::tests::mapping::crossStore::model::mapping::mft::store::PersonDB
(
    Schema TEST
    (
    Table PERSON
    (
        ID INT PRIMARY KEY,
        FIRSTNAME VARCHAR(20),
        LASTNAME VARCHAR(20),
        FIRM_ID INT,
        BIRTHDATE DATE,
        STREET VARCHAR(20),
        ADDRESS_TYPE  VARCHAR(20)

    )

    )

)
