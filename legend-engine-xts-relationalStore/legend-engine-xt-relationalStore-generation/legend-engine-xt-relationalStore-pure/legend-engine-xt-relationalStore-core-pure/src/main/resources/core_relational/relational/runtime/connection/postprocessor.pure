// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::metamodel::relation::*;
import meta::relational::postProcessor::*;
import meta::pure::alloy::connections::*;
import meta::external::store::relational::runtime::*;
import meta::core::runtime::*;
import meta::pure::mapping::*;
import meta::relational::metamodel::*;
import meta::relational::mapping::*;
import meta::pure::alloy::connections::alloy::*;
import meta::pure::alloy::connections::alloy::specification::*;
import meta::pure::alloy::connections::alloy::authentication::*;

Class <<typemodifiers.abstract>> meta::pure::alloy::connections::PostProcessor {}


Class meta::pure::alloy::connections::Mapper extends meta::relational::runtime::PostProcessorParameter {
   from: String[1];
   to: String[1];
}

Class meta::pure::alloy::connections::MapperPostProcessor extends PostProcessor
{
   mappers: Mapper[*];
}

Class meta::pure::alloy::connections::RelationalMapperPostProcessor extends PostProcessor
{
  relationalMappers: RelationalMapper[*];
}

Class <<typemodifiers.abstract>> meta::pure::alloy::connections::SchemaNameMapper extends Mapper {}
Class <<typemodifiers.abstract>> meta::pure::alloy::connections::TableNameMapper extends Mapper {
   schema: meta::pure::alloy::connections::SchemaNameMapper[1];
}

function meta::pure::alloy::connections::relationalMapperPostProcessor(mapper:RelationalMapperPostProcessor[1]):meta::relational::runtime::PostProcessorWithParameter[1]
{
   ^meta::relational::runtime::PostProcessorWithParameter(parameters = $mapper.relationalMappers, postProcessor = meta::pure::alloy::connections::postProcessor::relationalMapperPostProcessor__PostProcessor_1_);
}

function meta::pure::alloy::connections::postProcessor::relationalMapperPostProcessor():meta::relational::runtime::PostProcessor[1]
{
   ^meta::relational::runtime::PostProcessor(sqlQueryPostProcessorForExecution = {|''} , sqlQueryPostProcessorForPlan = meta::pure::alloy::connections::relationalMapperPostProcessor_SQLQuery_1__Mapping_$0_1$__Runtime_1__Database_$0_1$__ExecutionContext_1__PostProcessorParameter_MANY__PostProcessorResult_1_ )
}

function meta::pure::alloy::connections::relationalMapperPostProcessor(sql:SQLQuery[1], m:Mapping[0..1], runtime:Runtime[1], store:Database[0..1], exeCtx:meta::pure::runtime::ExecutionContext[1], params:	meta::relational::runtime::PostProcessorParameter[*]):PostProcessorResult[1]
{
  let databaseMappers = $params->cast(@meta::relational::metamodel::RelationalMapper).databaseMappers;
  let schemaMappers = $params->cast(@meta::relational::metamodel::RelationalMapper).schemaMappers;
  let tableMappers = $params->cast(@meta::relational::metamodel::RelationalMapper).tableMappers;
  let processedMappers = meta::pure::alloy::connections::relationalMapperPostProcessor($databaseMappers, $schemaMappers, $tableMappers); 
  let result = meta::relational::postProcessor::transform($sql, $processedMappers);
  ^meta::relational::mapping::PostProcessorResult(query = $result->cast(@SQLQuery));
}

function meta::pure::alloy::connections::relationalMapperPostProcessor(dbMappers:meta::relational::metamodel::DatabaseMapper[*], schemaMappers:meta::relational::metamodel::SchemaMapper[*], tableMappers:meta::relational::metamodel::TableMapper[*]):meta::pure::metamodel::function::Function<{RelationalOperationElement[1]->RelationalOperationElement[1]}>[1] 
{
     {r:RelationalOperationElement[1]| $r->match([ t:meta::relational::metamodel::relation::Table[1] | if(!$t->isTemporaryTable(),
                                                                                                            | let processedTable = processRelationalMappers($t, $dbMappers, $schemaMappers, $tableMappers);
                                                                                                              if(!$processedTable->isEmpty(),
                                                                                                                  | $processedTable->toOne(),
                                                                                                                  | $t
                                                                                                                );,
                                                                                                            |$t
                                                                                                          );,
                                                    r:RelationalOperationElement[1] | $r]
                                                );
      }
}

function <<access.private>> meta::pure::alloy::connections::processRelationalMappers(t:Table[1], dbMappers : meta::relational::metamodel::DatabaseMapper[*], schemaMappers:meta::relational::metamodel::SchemaMapper[*], tableMappers:meta::relational::metamodel::TableMapper[*]):Table[0..1]
{
  let tableUpdated  =  $tableMappers->map(tm|if($t.name == $tm.from.name,| ^$t(name=$tm.to),| []))->last();

  let tableSchemaUpdated =  $schemaMappers->map(sm|if( ($t.schema.name == $sm.from.name) && ($t.schema.database.name == $sm.from.database.name),
                                                      | let tableSchema = $t.schema;
                                                        let newSchema = ^$tableSchema(name=$sm.to) ;
                                                        ^$t(schema = $newSchema->toOne(), name = if($tableUpdated->isNotEmpty(), | $tableUpdated.name->toOne(), |$t.name));,
                                                      | []))->last();

  let databaseUpdated = $dbMappers->map(dm | $dm.schemas->map(s | if($t.schema.name == $s.name,
                                                                      | let newSchema = if($tableSchemaUpdated->isNotEmpty(),
                                                                                            | $tableSchemaUpdated.schema->toOne(),
                                                                                            | $t.schema);
                                                                        let newDatabaseSchema = ^$newSchema(name = $dm.database + '.' + $newSchema.name);
                                                                        ^$t(schema = $newDatabaseSchema, name = if($tableUpdated->isNotEmpty(), | $tableUpdated.name->toOne(), |$t.name));,
                                                                      | []))->last()) ->last();

  if($databaseUpdated->isNotEmpty(),
      | $databaseUpdated,
      | if($tableSchemaUpdated->isNotEmpty(),
          | $tableSchemaUpdated,
          | $tableUpdated));
}

function meta::pure::alloy::connections::tableMapperPostProcessor(mapper:MapperPostProcessor[1]):meta::relational::runtime::PostProcessorWithParameter[1]
{
   ^meta::relational::runtime::PostProcessorWithParameter(parameters = $mapper.mappers,
                                                          postProcessor = meta::pure::alloy::connections::postProcessor::tableMapperPostProcessor__PostProcessor_1_);

}

function meta::pure::alloy::connections::postProcessor::tableMapperPostProcessor():meta::relational::runtime::PostProcessor[1]
{
   ^meta::relational::runtime::PostProcessor(sqlQueryPostProcessorForExecution ={|''} , sqlQueryPostProcessorForPlan = meta::pure::alloy::connections::tableMapperPostProcessor_SQLQuery_1__Mapping_$0_1$__Runtime_1__Database_$0_1$__ExecutionContext_1__PostProcessorParameter_MANY__PostProcessorResult_1_ )
}

function meta::pure::alloy::connections::tableMapperPostProcessor(sql:SQLQuery[1],m:Mapping[0..1], runtime:Runtime[1],store:Database[0..1],exeCtx:meta::pure::runtime::ExecutionContext[1],params:	meta::relational::runtime::PostProcessorParameter[*]):PostProcessorResult[1]
{
   let tableMappers = $params->filter(p | $p->instanceOf(meta::pure::alloy::connections::TableNameMapper))->cast(@meta::pure::alloy::connections::TableNameMapper);
   let schemaMappers = $params->filter(p | $p->instanceOf(meta::pure::alloy::connections::SchemaNameMapper))->cast(@meta::pure::alloy::connections::SchemaNameMapper);

   let processedMappers = meta::pure::alloy::connections::postProcessTablesFn($tableMappers, $schemaMappers);
   let result = meta::relational::postProcessor::transform($sql, $processedMappers);
   ^meta::relational::mapping::PostProcessorResult(query = $result->cast(@SQLQuery));
}

function meta::pure::alloy::connections::postProcessTablesFn(tableNameMappers: meta::pure::alloy::connections::TableNameMapper[*], schemaNameMappers: meta::pure::alloy::connections::SchemaNameMapper[*]):meta::pure::metamodel::function::Function<{RelationalOperationElement[1]->RelationalOperationElement[1]}>[1] {
     {r:RelationalOperationElement[1]| $r->match([ t:meta::relational::metamodel::relation::Table[1] | if(!$t->isTemporaryTable(),| let nt = processTableMappers($t, $tableNameMappers);
                                                                                                                                if(!$nt->isEmpty(),| $nt->toOne();
                                                                                                                                                  ,| let ns = processSchemaMappers($t.schema, $schemaNameMappers);
                                                                                                                                                    if(!$ns->isEmpty(),|^$t(schema=$ns->toOne());
                                                                                                                                                                      ,|$t);
                                                                                                                                  );
                                                                                                          ,|$t);,
                                                    r:RelationalOperationElement[1] | $r]);}
}

function <<access.private>> meta::pure::alloy::connections::processTableMappers(t:meta::relational::metamodel::relation::Table[1], tableNameMappers:meta::pure::alloy::connections::TableNameMapper[*]):meta::relational::metamodel::relation::Table[0..1]{
    $tableNameMappers->map(m| if($t.name==$m.from && ($m.schema.from->toLower() == $t.schema.name->toLower()),| let processedSchema = meta::pure::alloy::connections::processSchemaMappers($t.schema, $m.schema);
                                                  if(!$processedSchema->isEmpty(),|^$t(name=$m.to, schema=$processedSchema->toOne()),|^$t(name=$m.to));
                                                  ,|[]))->last()
}

function <<access.private>> meta::pure::alloy::connections::processSchemaMappers(schema:Schema[1], schemaNameMappers : meta::pure::alloy::connections::SchemaNameMapper[*]):Schema[0..1]{
    $schemaNameMappers->map(m|if($schema.name == $m.from,| ^$schema(name=$m.to),|[]))->last()
}

Class meta::relational::postProcessor::SchemaNameMapper extends meta::relational::runtime::PostProcessorParameter {
   in:String[1];
   out:String[1];

   toString() {'{in: '+$this.in+', out:'+$this.out+'}'}:String[1];
}

Class meta::relational::postProcessor::TableNameMapper extends meta::relational::runtime::PostProcessorParameter {
   schemaNameMapper : meta::relational::postProcessor::SchemaNameMapper[1];
   in : String[1];
   out : String[1];

   toString() {'{in: '+$this.in+', out:'+$this.out+'}'}:String[1];
}
