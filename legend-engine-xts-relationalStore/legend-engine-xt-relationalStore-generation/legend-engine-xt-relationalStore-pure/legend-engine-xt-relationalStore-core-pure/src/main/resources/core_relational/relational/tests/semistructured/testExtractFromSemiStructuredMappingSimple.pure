// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::semistructured::extract::*;
import meta::pure::test::*;
import meta::pure::executionPlan::*;
import meta::relational::metamodel::*;
import meta::core::runtime::*;
import meta::pure::mapping::*;

function meta::relational::tests::semistructured::extract::semiStructuredExecute(conn: Connection[1], func: String[1], expected: String[1]):Boolean[1]
{
  let csv =
        'FIRM_SCHEMA\n' +
        'FIRM_TABLE\n' +
        'ID,FIRM_DETAILS\n' +
        '1,"{\\"legalName\\": \\"Firm X\\", \\"employeeCount\\": 4, \\"revenue\\": 5.0, \\"mnc\\": true, \\"dates\\": {\\"estDate\\": \\"2010-03-04\\", \\"last Update\\": \\"2022-01-16T01:00:00\\"}, \\"entity\\": {\\"entityType\\":\\"O\\"}, \\"otherNames\\": [\\"O1\\", \\"O2\\"], \\"address\\": {\\"name\\": \\"A1\\", \\"street\\": \\"S1\\", \\"lines\\": [{\\"details\\": \\"D1\\"}, {\\"details\\": \\"D2\\"}, {\\"details\\": \\"D3\\"}]}}"\n' +
        '2,"{\\"legalName\\": \\"Firm A\\", \\"employeeCount\\": 1, \\"revenue\\": 2000.5, \\"mnc\\": false, \\"dates\\": {\\"estDate\\": \\"2012-11-13\\", \\"last Update\\": \\"2022-02-14T03:00:00\\"}, \\"entity\\": {\\"entityType\\":\\"O\\"}, \\"otherNames\\": [\\"O3\\", \\"O4\\"], \\"address\\": {\\"name\\": \\"A2\\", \\"lines\\": [{\\"details\\": \\"D4\\"}, {\\"details\\": \\"D5\\"}]}}"\n' +
        '3,"{\\"legalName\\": \\"Firm B\\", \\"employeeCount\\": 2, \\"revenue\\": 0.1, \\"mnc\\": true, \\"dates\\": {\\"estDate\\": \\"2017-7-7\\", \\"last Update\\": \\"2022-9-01T06:00:00\\"}, \\"entity\\": {\\"entityType\\":\\"C\\"}, \\"otherNames\\": [\\"O5\\", \\"O6\\"], \\"address\\": {\\"name\\": \\"A3\\", \\"lines\\": [{\\"details\\": \\"D5\\"},{\\"details\\": \\"D6\\"}]}}"\n'
        ;

  let model = '/core_relational/relational/tests/semistructured/model/extractFromSemiStructuredMappingSimple.legend';

  let m = 'simple::mapping::H2Mapping';
  let s = 'simple::store::H2DB';

   meta::relational::metamodel::execute::tests::executeLegendFunction($conn, $csv, $model, $func, $m, $s, $expected);
}

function <<paramTest.Test>> meta::relational::tests::semistructured::extract::testDotAndBracketNotationAccess(conn: Connection[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'simple::dotAndBracketNotationAccess__TabularDataSet_1_',
    'Id,Dot Only,Bracket Only,Dot & Bracket\n' +
    '1,2010-03-04,2022-01-16 01:00:00.0,D2\n' +
    '2,2012-11-13,2022-02-14 03:00:00.0,D5\n' +
    '3,2017-07-07,2022-09-01 06:00:00.0,D6\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::extract::testArrayElementNoFlattenAccess(conn: Connection[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'simple::arrayElementNoFlattenAccess__TabularDataSet_1_',
    'Id,Second Line of Address\n' +
    '1,D2\n' +
    '2,D5\n' +
    '3,D6\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::extract::testAllDataTypesAccess(conn: Connection[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'simple::allDataTypesAccess__TabularDataSet_1_',
    'Id,Legal Name,Est Date,Mnc,Employee Count,Revenue,Last Update\n' +
    '1,Firm X,2010-03-04,true,4,5.0,2022-01-16 01:00:00.0\n' +
    '2,Firm A,2012-11-13,false,1,2000.5,2022-02-14 03:00:00.0\n' +
    '3,Firm B,2017-07-07,true,2,0.1,2022-09-01 06:00:00.0\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::extract::testExtractEnumProperty(conn: Connection[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'simple::extractEnumProperty__TabularDataSet_1_',
    'Id,Entity Type\n' +
    '1,O\n' +
    '2,O\n' +
    '3,C\n'
  );
}