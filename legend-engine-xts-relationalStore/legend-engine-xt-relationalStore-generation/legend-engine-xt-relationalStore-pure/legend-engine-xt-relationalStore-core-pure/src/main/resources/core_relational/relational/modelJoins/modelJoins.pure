import meta::relational::contract::*;
import meta::pure::store::*;
import meta::pure::executionPlan::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::alloy::objectReference::*;
import meta::external::store::relational::runtime::*;
import meta::relational::runtime::*;
import meta::relational::functions::pureToSqlQuery::union::*;
import meta::relational::functions::pureToSqlQuery::metamodel::*;
import meta::relational::functions::pureToSqlQuery::*;
import meta::pure::metamodel::valuespecification::*;
import meta::relational::mapping::*;
import meta::relational::metamodel::*;
import meta::relational::metamodel::operation::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::join::*;
import meta::relational::functions::pureToSqlQuery::*;
import meta::relational::functions::pureToSqlQuery::relationalmappingspecification::*;
import meta::pure::mapping::*;
import meta::pure::mapping::relation::*;
import meta::pure::metamodel::path::*;
import meta::pure::metamodel::serialization::grammar::*;
import meta::pure::milestoning::*;
import meta::pure::tds::*;
import meta::relational::functions::*;
import meta::relational::milestoning::*;
import meta::pure::router::clustering::*;
import meta::pure::router::printer::*;
import meta::pure::router::routing::*;
import meta::pure::router::store::embedded::*;
import meta::pure::router::store::metamodel::*;
import meta::pure::router::store::metamodel::clustering::*;
import meta::pure::router::utils::*;
import meta::relational::extension::*;
import meta::pure::mapping::xStore::*;
import meta::external::store::relational::modelJoins::*;

function meta::external::store::relational::modelJoins::localizeXStoreAssociation(xstoreAssociation: XStoreAssociationImplementation[1], setImpl:SetImplementation[*], stores:Store[*]):AssociationImplementation[1]
{
  let database = ^Database(includes=$stores->cast(@Database));
  let newAssociation = ^RelationalAssociationImplementation(association=$xstoreAssociation.association,parent=$xstoreAssociation.parent,id=$xstoreAssociation.id, stores=$database);
  let relationalPropertyMappings = $xstoreAssociation.propertyMappings->cast(@XStorePropertyMapping)->map(xstorePropertyMapping | transformXStorePropertyIntoRelationalProperty($xstorePropertyMapping, $setImpl, $database, $newAssociation));
  ^$newAssociation(propertyMappings = $relationalPropertyMappings);
}

function <<access.private>> meta::external::store::relational::modelJoins::transformXStorePropertyIntoRelationalProperty(xstoreProperty: meta::pure::mapping::xStore::XStorePropertyMapping[1], setImpl:SetImplementation[*], database:Database[1], propertyMappingOwner:AssociationImplementation[1]): RelationalPropertyMapping[1]
{
  let expressionSequence = $xstoreProperty.crossExpression.expressionSequence->cast(@SimpleFunctionExpression)->toOne()->evaluateAndDeactivate();
  let sourceId = $xstoreProperty.sourceSetImplementationId->toOne();
  let targetId = $xstoreProperty.targetSetImplementationId->toOne();
  let classMappings = $setImpl->map(s|$s->match([ 
                                        r:RelationalInstanceSetImplementation[1]|$r,
                                        r:RelationFunctionInstanceSetImplementation[1]|$r->transformRelationFunctionClassMapping()
                                      ]
                                    ))->cast(@InstanceSetImplementation);

  let join = transformExpressionSequenceIntoJoin($expressionSequence, $sourceId, $targetId, $classMappings, $database);

  let joinTreeNode = ^JoinTreeNode(
    joinName=$join.name,
    database=$join.database->toOne(),
    alias=$join.target->toOne(),
    join=$join
  );

  let ro = ^RelationalOperationElementWithJoin(joinTreeNode=$joinTreeNode);
  let r = ^RelationalPropertyMapping(owner=$propertyMappingOwner, sourceSetImplementationId=$sourceId,property=$xstoreProperty.property->toOne(),relationalOperationElement=$ro,targetSetImplementationId=$targetId);
}

function <<access.private>> meta::external::store::relational::modelJoins::getClassMappingAtId(classMappings:InstanceSetImplementation[*], id:String[1]):InstanceSetImplementation[1]
{
  $classMappings->filter(c| $c.id == $id)->toOne('More than one class mapping at the given id: ' + $id);
}

function <<access.private>> meta::external::store::relational::modelJoins::getMainTableAliasForSetId(classMapping:InstanceSetImplementation[1]):TableAlias[1]
{
  $classMapping->match(
                        [
                          r:RootRelationalInstanceSetImplementation[1]| $r.mainTableAlias->map(alias|^$alias(name=$alias.relation->cast(@NamedRelation).name)),
                          t:RelationFunctionInstanceSetImplementation[1]| ^TableAlias(name=$t.id, relationalElement=^RelationFunction(owner=$t))
                        ]
                      );
}

function <<access.private>> meta::external::store::relational::modelJoins::convertToRelationalElement(vs:ValueSpecification[1], sourceSet:InstanceSetImplementation[1], targetSet: InstanceSetImplementation[1]):RelationalOperationElement[1]
{
  $vs->match([
    p : SimpleFunctionExpression[1] | 
      assert($p.func->instanceOf(Property),|'Expected only property function calls in model joins.');
      let var = $p.parametersValues->evaluateAndDeactivate()->at(0);
      assert($var->instanceOf(VariableExpression) && $var->cast(@VariableExpression).name->in(['this','that']),|'Properties of $this or $that can be accessed in model joins.');
      let classMapping = if($var->cast(@VariableExpression).name == 'this', | $sourceSet, | $targetSet);
      let relationalPropertyMapping = $classMapping.propertyMappings->filter(x|$x.property==$p.func)->cast(@RelationalPropertyMapping)->toOne();
      $relationalPropertyMapping.relationalOperationElement->toOne('Localized relational model joins cannot support more than one relational operation element per property mapping. Found on class mapping id: ' + $classMapping.id);,

    v : InstanceValue[1] |
      assert($v.values->size() == 1 && ($v.values->toOne()->instanceOf(String) || $v.values->toOne()->instanceOf(Number) || $v.values->toOne()->instanceOf(Date)),|'The join key should only have one mapping.');
      ^Literal(value=$v.values->toOne());
  ]);

}

function <<access.private>> meta::external::store::relational::modelJoins::transformExpressionSequenceIntoJoin(expressionSequence: SimpleFunctionExpression[1], sourceId:String[1], targetId:String[1], classMappings:InstanceSetImplementation[*], database:Database[1]): Join[1]
{
  let functionOperator = $expressionSequence.functionName->toOne();
  let joinName = $sourceId + '_' + $targetId + '_GeneratedRelationalJoin';
  let sourceClassMapping = $classMappings->getClassMappingAtId($sourceId);
  let targetClassMapping = $classMappings->getClassMappingAtId($targetId);
  let sourceMainTableAlias = $sourceClassMapping->getMainTableAliasForSetId();
  let targetMainTableAlias = $targetClassMapping->getMainTableAliasForSetId();

  assertContains(['equal', 'not', 'and', 'or', 'greaterThanEqual', 'greaterThan', 'lessThanEqual', 'lessThan' ], $functionOperator, 'Failed to translate XStore Property into Relational Property because function operator is not in standard list');

  let join = if(
    $functionOperator->in(['equal', 'greaterThanEqual', 'greaterThan', 'lessThanEqual', 'lessThan' ]),
    | let expressionParameters = $expressionSequence.parametersValues->evaluateAndDeactivate();
      let sourceSet = getClassMappingAtId($classMappings, $sourceId);
      let targetSet = getClassMappingAtId($classMappings, $targetId);

      let parameters = $expressionParameters->map(e | $e->convertToRelationalElement($sourceSet, $targetSet));
      let operation = ^DynaFunction(name=$functionOperator, parameters=$parameters);
      ^Join(
        name=$joinName,
        operation=$operation, 
        target=$targetMainTableAlias,
        database=$database,
        aliases = [^Pair<TableAlias,TableAlias>(first=$targetMainTableAlias,second=$sourceMainTableAlias), ^Pair<TableAlias,TableAlias>(first=$sourceMainTableAlias,second=$targetMainTableAlias)]
      );, 
    | let childJoins = $expressionSequence.parametersValues->map(p | 
        transformExpressionSequenceIntoJoin($p->cast(@SimpleFunctionExpression)->evaluateAndDeactivate(), $sourceId, $targetId, $classMappings, $database)
      );
      let operation = ^DynaFunction(name=$functionOperator, parameters=$childJoins.operation->evaluateAndDeactivate());
      ^Join(
        name=$joinName,
        operation=$operation,
        target=$targetMainTableAlias,
        database=$database,
        aliases = [^Pair<TableAlias,TableAlias>(first=$targetMainTableAlias,second=$sourceMainTableAlias), ^Pair<TableAlias,TableAlias>(first=$sourceMainTableAlias,second=$targetMainTableAlias)]->concatenate($childJoins.aliases)
      );
  );

}
