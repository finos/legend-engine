// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::semistructured::inheritance::*;
import meta::pure::test::*;
import meta::pure::executionPlan::*;
import meta::relational::metamodel::*;
import meta::core::runtime::*;
import meta::pure::mapping::*;

function meta::relational::tests::semistructured::inheritance::semiStructuredExecute(conn: Connection[1], func: String[1], mapping:String[1], expected: String[1]):Boolean[1]
{
  let csv =
        'PERSON_SCHEMA\n' +
        'PERSON_TABLE\n' +
        'ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID\n' +
        '1,Peter,Smith,"{\\"legalName\\": \\"Firm X\\", \\"address\\": {\\"name\\": \\"A1\\", \\"lines\\": [{\\"lineno\\": 1, \\"street\\": \\"s1\\"}, {\\"lineno\\": 2, \\"city\\": \\"c1\\"}, {\\"lineno\\": 3, \\"state\\": \\"s1\\"}]}}",2\n' +
        '2,John,Johnson,"{\\"legalName\\": \\"Firm X\\", \\"address\\": {\\"name\\": \\"A1\\", \\"lines\\": [{\\"lineno\\": 1, \\"street\\": \\"s1\\"}, {\\"lineno\\": 2, \\"city\\": \\"c1\\"}, {\\"lineno\\": 3, \\"state\\": \\"s1\\"}]}}",4\n' +
        '3,John,Hill,"{\\"legalName\\": \\"Firm X\\", \\"address\\": {\\"name\\": \\"A1\\", \\"lines\\": [{\\"lineno\\": 1, \\"street\\": \\"s1\\"}, {\\"lineno\\": 2, \\"city\\": \\"c1\\"}, {\\"lineno\\": 3, \\"state\\": \\"s1\\"}]}}",2\n' +
        '4,Anthony,Allen,"{\\"legalName\\": \\"Firm X\\", \\"address\\": {\\"name\\": \\"A1\\", \\"lines\\": [{\\"lineno\\": 1, \\"street\\": \\"s1\\"}, {\\"lineno\\": 2, \\"city\\": \\"c1\\"}, {\\"lineno\\": 3, \\"state\\": \\"s1\\"}]}}",\n' +
        '5,Fabrice,Roberts,"{\\"legalName\\": \\"Firm A\\", \\"address\\": {\\"name\\": \\"A2\\", \\"lines\\": [{\\"lineno\\": 1, \\"street\\": \\"s2\\"}, {\\"lineno\\": 2, \\"city\\": \\"c2\\"}]}}",\n' +
        '6,Oliver,Hill,"{\\"legalName\\": \\"Firm B\\", \\"address\\": {\\"name\\": \\"A3\\", \\"lines\\": [{\\"lineno\\": 1, \\"street\\": \\"s3\\"}]}}",7\n' +
        '7,David,Harris,"{\\"legalName\\": \\"Firm B\\", \\"address\\": {\\"name\\": \\"A3\\", \\"lines\\": [{\\"lineno\\": 1, \\"street\\": \\"s3\\"}]}}",\n'
        ;

  let model = '/core_relational/relational/tests/semistructured/model/semiStructuredInheritanceMapping.legend';
  let store = 'inheritance::store::H2DB';

  meta::relational::metamodel::execute::tests::executeLegendFunction($conn, $csv, $model, $func, $mapping, $store, $expected);
}

function meta::relational::tests::semistructured::inheritance::testSemiStructuredPropertyAccessAtBaseClassHelper(conn: Connection[1], mapping:String[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'inheritance::semiStructuredPropertyAccessAtBaseClass__TabularDataSet_1_',
    $mapping,
    'First Name,Firm Address Name\n' +
    'Peter,A1\n' +
    'John,A1\n' +
    'John,A1\n' +
    'Anthony,A1\n' +
    'Fabrice,A2\n' +
    'Oliver,A3\n' +
    'David,A3\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::inheritance::testSemiStructuredPropertyAccessAtBaseClass(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredPropertyAccessAtBaseClassHelper($conn, 'inheritance::mapping::H2Mapping');
}

function <<paramTest.Test>> meta::relational::tests::semistructured::inheritance::relationFunctionMapping::testSemiStructuredPropertyAccessAtBaseClass(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredPropertyAccessAtBaseClassHelper($conn, 'inheritance::relationFunctionMapping::H2Mapping');
}

function meta::relational::tests::semistructured::inheritance::testSemiStructuredPropertyAccessAtSubClassHelper(conn: Connection[1], mapping:String[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'inheritance::semiStructuredPropertyAccessAtSubClass__TabularDataSet_1_',
    $mapping,
    'First Name,Firm Address 0 Line No\n' +
    'Peter,1\n' +
    'John,1\n' +
    'John,1\n' +
    'Anthony,1\n' +
    'Fabrice,1\n' +
    'Oliver,1\n' +
    'David,1\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::inheritance::testSemiStructuredPropertyAccessAtSubClass(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredPropertyAccessAtSubClassHelper($conn, 'inheritance::mapping::H2Mapping');
}

function <<paramTest.Test>> meta::relational::tests::semistructured::inheritance::relationFunctionMapping::testSemiStructuredPropertyAccessAtSubClass(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredPropertyAccessAtSubClassHelper($conn, 'inheritance::relationFunctionMapping::H2Mapping');
}

function meta::relational::tests::semistructured::inheritance::testSemiStructuredPropertyAccessAtSubClassNestedHelper(conn: Connection[1], mapping:String[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'inheritance::semiStructuredPropertyAccessAtSubClassNested__TabularDataSet_1_',
    $mapping,
    'First Name,Firm Address 0 Line No,Firm Address Street,Firm Address City,Firm Address State\n' +
    'Peter,1,s1,c1,s1\n' +
    'John,1,s1,c1,s1\n' +
    'John,1,s1,c1,s1\n' +
    'Anthony,1,s1,c1,s1\n' +
    'Fabrice,1,s2,c2,\n' +
    'Oliver,1,s3,,\n' +
    'David,1,s3,,\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::inheritance::testSemiStructuredPropertyAccessAtSubClassNested(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredPropertyAccessAtSubClassNestedHelper($conn, 'inheritance::mapping::H2Mapping');
}

function <<paramTest.Test>> meta::relational::tests::semistructured::inheritance::relationFunctionMapping::testSemiStructuredPropertyAccessAtSubClassNested(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredPropertyAccessAtSubClassNestedHelper($conn, 'inheritance::relationFunctionMapping::H2Mapping');
}

function meta::relational::tests::semistructured::inheritance::testSemiStructuredPropertyAccessAtSubClassNestedUsingProjectWithFunctionsHelper(conn: Connection[1], mapping:String[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'inheritance::semiStructuredPropertyAccessAtSubClassNestedUsingProjectWithFunctions__TabularDataSet_1_',
    $mapping,
    'First Name,Firm Address 0 Line No,Firm Address Street,Firm Address City,Firm Address State\n' +
    'Peter,1,s1,c1,s1\n' +
    'John,1,s1,c1,s1\n' +
    'John,1,s1,c1,s1\n' +
    'Anthony,1,s1,c1,s1\n' +
    'Fabrice,1,s2,c2,\n' +
    'Oliver,1,s3,,\n' +
    'David,1,s3,,\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::inheritance::testSemiStructuredPropertyAccessAtSubClassNestedUsingProjectWithFunctions(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredPropertyAccessAtSubClassNestedUsingProjectWithFunctionsHelper($conn, 'inheritance::mapping::H2Mapping')
}

function <<paramTest.Test>> meta::relational::tests::semistructured::inheritance::relationFunctionMapping::testSemiStructuredPropertyAccessAtSubClassNestedUsingProjectWithFunctions(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredPropertyAccessAtSubClassNestedUsingProjectWithFunctionsHelper($conn, 'inheritance::relationFunctionMapping::H2Mapping')
}