// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::mapping::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::external::store::relational::tests::*;
import meta::pure::executionPlan::*;
import meta::pure::profiles::*;
import meta::relational::functions::sqlstring::*;

function <<test.Test>> meta::relational::tests::query::slice::testSlice():Boolean[1]
{
   let result = execute(|Person.all()->slice(1,4), simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" offset 1 rows fetch next 3 rows only', $result->sqlRemoveFormatting());
   assertSize($result.values, 3);

   let result2 = execute(|Person.all()->slice(2,4), simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" offset 2 rows fetch next 2 rows only', $result2->sqlRemoveFormatting());
   assertSize($result2.values, 2);

   let result3 = execute(|Person.all()->slice(2,6), simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" offset 2 rows fetch next 4 rows only', $result3->sqlRemoveFormatting());
   assertSize($result3.values, 4);

   let result4 = execute(|Person.all()->slice(0,1), simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('select top 1 "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root"', $result4->sqlRemoveFormatting());
   assertSize($result4.values, 1);
}

function <<test.Test>> meta::relational::tests::query::take::testSliceByVendor():Boolean[1]
{
   let f1 = {|Person.all()->slice(3, 5);};

   let s = toSQLString($f1, meta::relational::tests::simpleRelationalMapping, meta::relational::runtime::DatabaseType.H2, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" offset 3 rows fetch next 2 rows only', $s);
}

function <<test.Test>> meta::relational::tests::query::limit::testSimpleLimit():Boolean[1]
{
   let result = execute(|Person.all()->limit(0), simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('select top 0 "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root"', $result->sqlRemoveFormatting());
   assertSize($result.values, 0 );

   let result2 = execute(|Person.all()->limit(1), simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('select top 1 "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root"', $result2->sqlRemoveFormatting());
   assertSize($result2.values, 1 );
}

function <<test.Test>> meta::relational::tests::query::take::testSimpleTake():Boolean[1]
{
   let result = execute(|Person.all()->take(0), simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('select top 0 "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root"', $result->sqlRemoveFormatting());
   assertSize($result.values, 0 );

   let result2 = execute(|Person.all()->take(1), simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('select top 1 "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root"', $result2->sqlRemoveFormatting());
   assertSize($result2.values, 1 );
}

function <<test.Test>> meta::relational::tests::query::take::testLimitByVendor():Boolean[1]
{
   let s = toSQLString(|Person.all()->limit(1);,meta::relational::tests::simpleRelationalMapping, meta::relational::runtime::DatabaseType.H2, meta::relational::extension::relationalExtensions());
   assertEquals('select top 1 "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root"', $s);
}

function <<test.Test>> meta::relational::tests::query::take::testTakeByVendor():Boolean[1]
{
   let s = toSQLString(|Person.all()->take(10);, meta::relational::tests::simpleRelationalMapping, meta::relational::runtime::DatabaseType.H2, meta::relational::extension::relationalExtensions());
   assertEquals('select top 10 "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root"', $s);
}

function <<test.Test>> meta::relational::tests::query::drop::testSimpleDrop():Boolean[1]
{
   let result = execute(|Person.all()->drop(0), simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" offset 0 rows', $result->sqlRemoveFormatting());
   assertSize($result.values, 12 );

   let result2 = execute(|Person.all()->drop(1), simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" offset 1 rows', $result2->sqlRemoveFormatting());
   assertSize($result2.values, 11 );
}

function <<test.Test>> meta::relational::tests::query::take::testLimitFilterInSequence():Boolean[1]
{
   let result = execute(|Person.all()->project([x|$x.firstName,x|$x.lastName,x|$x.age],['firstName','lastName','age'])->limit(1)->filter(x | $x.getInteger('age') > 25);, simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('select "subselect"."firstName" as "firstName", "subselect"."lastName" as "lastName", "subselect"."age" as "age" from (select top 1 "root".FIRSTNAME as "firstName", "root".LASTNAME as "lastName", "root".AGE as "age" from personTable as "root") as "subselect" where "subselect"."age" > 25', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::query::take::testFilterLimitInSequence():Boolean[1]
{
   let result = execute(|Person.all()->project([x|$x.firstName,x|$x.lastName,x|$x.age],['firstName','lastName','age'])-> filter(x | $x.getInteger('age') > 30)->limit(2);, simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('select top 2 "root".FIRSTNAME as "firstName", "root".LASTNAME as "lastName", "root".AGE as "age" from personTable as "root" where "root".AGE > 30',  $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::query::take::testLimitFilterInSequenceForTableAccessor():Boolean[1]
{
   let fun = {|#>{meta::relational::tests::dbInc.personTable}#->limit(1)->filter(x | $x.AGE > 25)-> select(~[FIRSTNAME,LASTNAME])};
   let actualPlan =  meta::pure::executionPlan::executionPlan($fun,meta::relational::tests::simpleRelationalMapping,meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions())
    ->  meta::pure::executionPlan::toString::planToStringWithoutFormatting(meta::relational::extension::relationalExtensions());
   assertEquals('Relational(type=TDS[(FIRSTNAME,String,VARCHAR(1024),""),(LASTNAME,String,VARCHAR(1024),"")]resultColumns=[("FIRSTNAME",VARCHAR(200)),("LASTNAME",VARCHAR(200))]sql=select"subselect"."FIRSTNAME"as"FIRSTNAME","subselect"."LASTNAME"as"LASTNAME"from(selecttop1"persontable_1".IDas"ID","persontable_1".FIRSTNAMEas"FIRSTNAME","persontable_1".LASTNAMEas"LASTNAME","persontable_1".AGEas"AGE","persontable_1".ADDRESSIDas"ADDRESSID","persontable_1".FIRMIDas"FIRMID","persontable_1".MANAGERIDas"MANAGERID"frompersonTableas"persontable_1")as"subselect"where("subselect"."AGE"isnotnulland"subselect"."AGE">25)connection=TestDatabaseConnection(type="H2"))', $actualPlan);
}

function <<test.Test>> meta::relational::tests::query::take::testFilterLimitInSequenceForTableAccessor():Boolean[1]
{
    let fun = {|#>{meta::relational::tests::dbInc.personTable}#->filter(x | $x.AGE > 25)->limit(1)-> select(~[FIRSTNAME,LASTNAME])};
    let actualPlan =  meta::pure::executionPlan::executionPlan($fun,meta::relational::tests::simpleRelationalMapping,meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions())
    ->  meta::pure::executionPlan::toString::planToStringWithoutFormatting(meta::relational::extension::relationalExtensions());
   assertEquals('Relational(type=TDS[(FIRSTNAME,String,VARCHAR(1024),""),(LASTNAME,String,VARCHAR(1024),"")]resultColumns=[("FIRSTNAME",VARCHAR(200)),("LASTNAME",VARCHAR(200))]sql=select"subselect"."FIRSTNAME"as"FIRSTNAME","subselect"."LASTNAME"as"LASTNAME"from(selecttop1"persontable_1".IDas"ID","persontable_1".FIRSTNAMEas"FIRSTNAME","persontable_1".LASTNAMEas"LASTNAME","persontable_1".AGEas"AGE","persontable_1".ADDRESSIDas"ADDRESSID","persontable_1".FIRMIDas"FIRMID","persontable_1".MANAGERIDas"MANAGERID"frompersonTableas"persontable_1"where("persontable_1".AGEisnotnulland"persontable_1".AGE>25))as"subselect"connection=TestDatabaseConnection(type="H2"))', $actualPlan);
}