// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::core::runtime::*;
import meta::relational::functions::sqlQueryToString::h2::*;
import meta::core::runtime::*;
import meta::relational::mapping::*;
import meta::relational::tests::*;
import meta::external::store::relational::tests::*;
import meta::relational::tests::milestoning::*;
import meta::relational::functions::asserts::*;

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testQueryOnTemporalRoot():Boolean[1]
{
   let result = execute(|ProcessingTemporalProduct.all(%2015-08-26)->filter(p|$p.name == 'ProductName1')->project([p|$p.id],['id']), processingSnapshotMilestoningMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "root".id as "id" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".name = \'ProductName1\' and "root".snapshotDate = \'2015-08-26\'',
    'select "root".id as "id" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".name = \'ProductName1\' and "root".snapshotDate = DATE\'2015-08-26\'',
    $result->sqlRemoveFormatting()
   );
   assertEquals(2, $result.values.rows.get('id'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testQueryOnNonTemporalRootWithTemporalProperty():Boolean[1]
{
   let result = execute(|Order.all()->filter(o|$o.processingTemporalProduct(%2015-08-26).name == 'ProductName1')->project([o|$o.processingTemporalProduct(%2015-08-26).id],['id']), processingSnapshotMilestoningMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "producttablewithprocessingsnapshotmilestoning_0".id as "id" from OrderTable as "root" left outer join ProductTableWithProcessingSnapshotMilestoning as "producttablewithprocessingsnapshotmilestoning_0" on ("root".prodFk = "producttablewithprocessingsnapshotmilestoning_0".id and "producttablewithprocessingsnapshotmilestoning_0".snapshotDate = \'2015-08-26\') where "producttablewithprocessingsnapshotmilestoning_0".name = \'ProductName1\'',
    'select "producttablewithprocessingsnapshotmilestoning_0".id as "id" from OrderTable as "root" left outer join ProductTableWithProcessingSnapshotMilestoning as "producttablewithprocessingsnapshotmilestoning_0" on ("root".prodFk = "producttablewithprocessingsnapshotmilestoning_0".id and "producttablewithprocessingsnapshotmilestoning_0".snapshotDate = DATE\'2015-08-26\') where "producttablewithprocessingsnapshotmilestoning_0".name = \'ProductName1\'',
    $result->sqlRemoveFormatting()
   );
   assertEquals(2, $result.values.rows.get('id'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testQueryWithPropagationOnTemporalRoot():Boolean[1]
{
   let result = execute(|ProcessingTemporalProduct.all(%2015-08-26)->filter(p|$p.classification.description == 'STOCK DESC-V2')->project([p|$p.classification.type],['type']), processingSnapshotMilestoningMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "productclassificationtablewithprocessingsnapshotmilestoning_0".type as "type" from ProductTableWithProcessingSnapshotMilestoning as "root" left outer join ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_0" on ("root".type = "productclassificationtablewithprocessingsnapshotmilestoning_0".type and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate = \'2015-08-26\') where "productclassificationtablewithprocessingsnapshotmilestoning_0".type_description = \'STOCK DESC-V2\' and "root".snapshotDate = \'2015-08-26\'',
    'select "productclassificationtablewithprocessingsnapshotmilestoning_0".type as "type" from ProductTableWithProcessingSnapshotMilestoning as "root" left outer join ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_0" on ("root".type = "productclassificationtablewithprocessingsnapshotmilestoning_0".type and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate = DATE\'2015-08-26\') where "productclassificationtablewithprocessingsnapshotmilestoning_0".type_description = \'STOCK DESC-V2\' and "root".snapshotDate = DATE\'2015-08-26\'',
    $result->sqlRemoveFormatting()
   );
   assertEquals('STOCK', $result.values.rows.get('type'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testQueryWithPropagationOnNonTemporalRootWithTemporalProperty():Boolean[1]
{
   let result = execute(|Order.all()->filter(o|$o.processingTemporalProduct(%2015-08-26).classification.description == 'STOCK DESC-V2')->project([o|$o.processingTemporalProduct(%2015-08-26).classification.type],['type']), processingSnapshotMilestoningMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "productclassificationtablewithprocessingsnapshotmilestoning_1".type as "type" from OrderTable as "root" left outer join ProductTableWithProcessingSnapshotMilestoning as "producttablewithprocessingsnapshotmilestoning_0" on ("root".prodFk = "producttablewithprocessingsnapshotmilestoning_0".id and "producttablewithprocessingsnapshotmilestoning_0".snapshotDate = \'2015-08-26\') left outer join ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_0" on ("producttablewithprocessingsnapshotmilestoning_0".type = "productclassificationtablewithprocessingsnapshotmilestoning_0".type and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate = \'2015-08-26\') left outer join (select "productclassificationtablewithprocessingsnapshotmilestoning_2".type as type from ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_2" where "productclassificationtablewithprocessingsnapshotmilestoning_2".snapshotDate = \'2015-08-26\') as "productclassificationtablewithprocessingsnapshotmilestoning_1" on ("producttablewithprocessingsnapshotmilestoning_0".type = "productclassificationtablewithprocessingsnapshotmilestoning_1".type) where "productclassificationtablewithprocessingsnapshotmilestoning_0".type_description = \'STOCK DESC-V2\'',
    'select "productclassificationtablewithprocessingsnapshotmilestoning_1".type as "type" from OrderTable as "root" left outer join ProductTableWithProcessingSnapshotMilestoning as "producttablewithprocessingsnapshotmilestoning_0" on ("root".prodFk = "producttablewithprocessingsnapshotmilestoning_0".id and "producttablewithprocessingsnapshotmilestoning_0".snapshotDate = DATE\'2015-08-26\') left outer join ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_0" on ("producttablewithprocessingsnapshotmilestoning_0".type = "productclassificationtablewithprocessingsnapshotmilestoning_0".type and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate = DATE\'2015-08-26\') left outer join (select "productclassificationtablewithprocessingsnapshotmilestoning_2".type as type from ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_2" where "productclassificationtablewithprocessingsnapshotmilestoning_2".snapshotDate = DATE\'2015-08-26\') as "productclassificationtablewithprocessingsnapshotmilestoning_1" on ("producttablewithprocessingsnapshotmilestoning_0".type = "productclassificationtablewithprocessingsnapshotmilestoning_1".type) where "productclassificationtablewithprocessingsnapshotmilestoning_0".type_description = \'STOCK DESC-V2\'',
    $result->sqlRemoveFormatting()
   );
   assertEquals('STOCK', $result.values.rows.get('type'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testUnionQueryOnTemporalRoot():Boolean[1]
{
   let result = execute(|ProcessingTemporalProduct.all(%2015-08-26)->filter(p|$p.name == 'ProductName1')->project([p|$p.id],['id']), processingSnapshotMilestoningUnionMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "unionBase"."ProductTableWithProcessingSnapshotMilestoningid_ProductTableWithProcessingSnapshotMilestoningid" as "id" from (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".name as "ProductTableWithProcessingSnapshotMilestoningname_ProductTableWithProcessingSnapshotMilestoningname", "root".id as "pk_0_0", null as "pk_0_1", "root".id as "ProductTableWithProcessingSnapshotMilestoningid_ProductTableWithProcessingSnapshotMilestoningid" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\' UNION ALL select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".name as "ProductTableWithProcessingSnapshotMilestoningname_ProductTableWithProcessingSnapshotMilestoningname", null as "pk_0_0", "root".id as "pk_0_1", "root".id as "ProductTableWithProcessingSnapshotMilestoningid_ProductTableWithProcessingSnapshotMilestoningid" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\') as "unionBase" where "unionBase"."ProductTableWithProcessingSnapshotMilestoningname_ProductTableWithProcessingSnapshotMilestoningname" = \'ProductName1\'',
    'select "unionBase"."ProductTableWithProcessingSnapshotMilestoningid_ProductTableWithProcessingSnapshotMilestoningid" as "id" from (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".name as "ProductTableWithProcessingSnapshotMilestoningname_ProductTableWithProcessingSnapshotMilestoningname", "root".id as "pk_0_0", null as "pk_0_1", "root".id as "ProductTableWithProcessingSnapshotMilestoningid_ProductTableWithProcessingSnapshotMilestoningid" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\' union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".name as "ProductTableWithProcessingSnapshotMilestoningname_ProductTableWithProcessingSnapshotMilestoningname", null as "pk_0_0", "root".id as "pk_0_1", "root".id as "ProductTableWithProcessingSnapshotMilestoningid_ProductTableWithProcessingSnapshotMilestoningid" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\') as "unionBase" where "unionBase"."ProductTableWithProcessingSnapshotMilestoningname_ProductTableWithProcessingSnapshotMilestoningname" = \'ProductName1\'',
    $result->sqlRemoveFormatting()
   );
   assertEquals([2, 2], $result.values.rows.get('id'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testUnionQueryOnNonTemporalRootWithTemporalProperty():Boolean[1]
{
   let result = execute(|Order.all()->filter(o|$o.processingTemporalProduct(%2015-08-26).name == 'ProductName1')->project([o|$o.processingTemporalProduct(%2015-08-26).id],['id']), processingSnapshotMilestoningUnionMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "unionalias_1"."ProductTableWithProcessingSnapshotMilestoningid_ProductTableWithProcessingSnapshotMilestoningid" as "id" from (select "root".prodFk as prodFk_0, null as prodFk_1, "root".id as "pk_0_0", null as "pk_0_1" from OrderTable as "root" UNION ALL select null as prodFk_0, "root".prodFk as prodFk_1, null as "pk_0_0", "root".id as "pk_0_1" from OrderTable as "root") as "unionBase" left outer join (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".id as id, "root".name as "ProductTableWithProcessingSnapshotMilestoningname_ProductTableWithProcessingSnapshotMilestoningname", "root".id as "ProductTableWithProcessingSnapshotMilestoningid_ProductTableWithProcessingSnapshotMilestoningid" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\' UNION ALL select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".id as id, "root".name as "ProductTableWithProcessingSnapshotMilestoningname_ProductTableWithProcessingSnapshotMilestoningname", "root".id as "ProductTableWithProcessingSnapshotMilestoningid_ProductTableWithProcessingSnapshotMilestoningid" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\') as "unionalias_1" on (("unionBase".prodFk_0 = "unionalias_1".id or "unionBase".prodFk_1 = "unionalias_1".id) and (coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") = \'2015-08-26\' or coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") is null)) where "unionalias_1"."ProductTableWithProcessingSnapshotMilestoningname_ProductTableWithProcessingSnapshotMilestoningname" = \'ProductName1\'',
    'select "unionalias_1"."ProductTableWithProcessingSnapshotMilestoningid_ProductTableWithProcessingSnapshotMilestoningid" as "id" from (select "root".prodFk as prodFk_0, null as prodFk_1, "root".id as "pk_0_0", null as "pk_0_1" from OrderTable as "root" union all select null as prodFk_0, "root".prodFk as prodFk_1, null as "pk_0_0", "root".id as "pk_0_1" from OrderTable as "root") as "unionBase" left outer join (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".id as id, "root".name as "ProductTableWithProcessingSnapshotMilestoningname_ProductTableWithProcessingSnapshotMilestoningname", "root".id as "ProductTableWithProcessingSnapshotMilestoningid_ProductTableWithProcessingSnapshotMilestoningid" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\' union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".id as id, "root".name as "ProductTableWithProcessingSnapshotMilestoningname_ProductTableWithProcessingSnapshotMilestoningname", "root".id as "ProductTableWithProcessingSnapshotMilestoningid_ProductTableWithProcessingSnapshotMilestoningid" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\') as "unionalias_1" on (("unionBase".prodFk_0 = "unionalias_1".id or "unionBase".prodFk_1 = "unionalias_1".id) and (coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") = DATE\'2015-08-26\' or coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") is null)) where "unionalias_1"."ProductTableWithProcessingSnapshotMilestoningname_ProductTableWithProcessingSnapshotMilestoningname" = \'ProductName1\'',
    $result->sqlRemoveFormatting()
   );
   assertEquals([2, 2, 2, 2], $result.values.rows.get('id'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testUnionQueryWithPropagationOnTemporalRoot():Boolean[1]
{
   let result = execute(|ProcessingTemporalProduct.all(%2015-08-26)->filter(p|$p.classification.description == 'STOCK DESC-V2')->project([p|$p.classification.type],['type']), processingSnapshotMilestoningUnionMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "unionalias_1"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" as "type" from (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type_0, null as type_1, "root".id as "pk_0_0", null as "pk_0_1" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\' UNION ALL select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", null as type_0, "root".type as type_1, null as "pk_0_0", "root".id as "pk_0_1" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\') as "unionBase" left outer join (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description", "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\' UNION ALL select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description", "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\') as "unionalias_1" on (("unionBase".type_0 = "unionalias_1".type or "unionBase".type_1 = "unionalias_1".type) and (coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") = \'2015-08-26\' or coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") is null)) where "unionalias_1"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description" = \'STOCK DESC-V2\'',
    'select "unionalias_1"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" as "type" from (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type_0, null as type_1, "root".id as "pk_0_0", null as "pk_0_1" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\' union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", null as type_0, "root".type as type_1, null as "pk_0_0", "root".id as "pk_0_1" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\') as "unionBase" left outer join (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description", "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\' union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description", "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\') as "unionalias_1" on (("unionBase".type_0 = "unionalias_1".type or "unionBase".type_1 = "unionalias_1".type) and (coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") = DATE\'2015-08-26\' or coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") is null)) where "unionalias_1"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description" = \'STOCK DESC-V2\'',
    $result->sqlRemoveFormatting()
   );
   assertEquals(['STOCK', 'STOCK', 'STOCK', 'STOCK'], $result.values.rows.get('type'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testUnionQueryWithPropagationOnNonTemporalRootWithTemporalProperty():Boolean[1]
{
   let result = execute(|Order.all()->filter(o|$o.processingTemporalProduct(%2015-08-26).classification.description == 'STOCK DESC-V2')->project([o|$o.processingTemporalProduct(%2015-08-26).classification.type],['type']), processingSnapshotMilestoningUnionMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "unionalias_3"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" as "type" from (select "root".prodFk as prodFk_0, null as prodFk_1, "root".id as "pk_0_0", null as "pk_0_1" from OrderTable as "root" UNION ALL select null as prodFk_0, "root".prodFk as prodFk_1, null as "pk_0_0", "root".id as "pk_0_1" from OrderTable as "root") as "unionBase" left outer join (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".id as id, "root".type as type_0, null as type_1 from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\' UNION ALL select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".id as id, null as type_0, "root".type as type_1 from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\') as "unionalias_1" on (("unionBase".prodFk_0 = "unionalias_1".id or "unionBase".prodFk_1 = "unionalias_1".id) and (coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") = \'2015-08-26\' or coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") is null)) left outer join (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\' UNION ALL select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\') as "unionalias_2" on (("unionalias_1".type_0 = "unionalias_2".type or "unionalias_1".type_1 = "unionalias_2".type) and (coalesce("unionalias_2"."snapshotDate_0", "unionalias_2"."snapshotDate_1") = \'2015-08-26\' or coalesce("unionalias_2"."snapshotDate_0", "unionalias_2"."snapshotDate_1") is null)) left outer join (select "unionalias_4".type as type, "unionalias_4"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type, "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\' UNION ALL select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".type as type, "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = \'2015-08-26\') as "unionalias_4" where coalesce("unionalias_4"."snapshotDate_0", "unionalias_4"."snapshotDate_1") = \'2015-08-26\' or coalesce("unionalias_4"."snapshotDate_0", "unionalias_4"."snapshotDate_1") is null) as "unionalias_3" on ("unionalias_1".type_0 = "unionalias_3".type or "unionalias_1".type_1 = "unionalias_3".type) where "unionalias_2"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description" = \'STOCK DESC-V2\'',
    'select "unionalias_3"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" as "type" from (select "root".prodFk as prodFk_0, null as prodFk_1, "root".id as "pk_0_0", null as "pk_0_1" from OrderTable as "root" union all select null as prodFk_0, "root".prodFk as prodFk_1, null as "pk_0_0", "root".id as "pk_0_1" from OrderTable as "root") as "unionBase" left outer join (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".id as id, "root".type as type_0, null as type_1 from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\' union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".id as id, null as type_0, "root".type as type_1 from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\') as "unionalias_1" on (("unionBase".prodFk_0 = "unionalias_1".id or "unionBase".prodFk_1 = "unionalias_1".id) and (coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") = DATE\'2015-08-26\' or coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") is null)) left outer join (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\' union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\') as "unionalias_2" on (("unionalias_1".type_0 = "unionalias_2".type or "unionalias_1".type_1 = "unionalias_2".type) and (coalesce("unionalias_2"."snapshotDate_0", "unionalias_2"."snapshotDate_1") = DATE\'2015-08-26\' or coalesce("unionalias_2"."snapshotDate_0", "unionalias_2"."snapshotDate_1") is null)) left outer join (select "unionalias_4".type as type, "unionalias_4"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type, "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\' union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".type as type, "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = DATE\'2015-08-26\') as "unionalias_4" where coalesce("unionalias_4"."snapshotDate_0", "unionalias_4"."snapshotDate_1") = DATE\'2015-08-26\' or coalesce("unionalias_4"."snapshotDate_0", "unionalias_4"."snapshotDate_1") is null) as "unionalias_3" on ("unionalias_1".type_0 = "unionalias_3".type or "unionalias_1".type_1 = "unionalias_3".type) where "unionalias_2"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description" = \'STOCK DESC-V2\'',
    $result->sqlRemoveFormatting()
   );
   assertEquals(['STOCK', 'STOCK', 'STOCK', 'STOCK', 'STOCK', 'STOCK', 'STOCK', 'STOCK', 'STOCK', 'STOCK', 'STOCK', 'STOCK', 'STOCK', 'STOCK', 'STOCK', 'STOCK'], $result.values.rows.get('type'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testAllVersionInRangeForProcessingSnapshotMilestoning():Boolean[1]
{
   let result = execute(|ProcessingTemporalProduct.allVersionsInRange(%2012-1-1, %2016-1-1)->filter(p|$p.name == 'ProductName1')->project([p|$p.id],['id']), processingSnapshotMilestoningMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "root".id as "id" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".name = \'ProductName1\' and "root".snapshotDate >= \'2012-01-01\' and "root".snapshotDate <= \'2016-01-01\'',
    'select "root".id as "id" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".name = \'ProductName1\' and "root".snapshotDate >= DATE\'2012-01-01\' and "root".snapshotDate <= DATE\'2016-01-01\'',
    $result->sqlRemoveFormatting()
   );
   assertEquals(2, $result.values.rows.get('id'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testProcessingSnapshotRangeQueryOnProperty():Boolean[1]
{
   let result = execute(|ProcessingTemporalProduct.allVersions()->filter(x|$x.classificationAllVersionsInRange(%2015-1-1, %2015-9-1).type == 'STOCK')->project([x|$x.classificationAllVersionsInRange(%2015-1-1, %2015-9-1).type], ['type'])->distinct(), processingSnapshotMilestoningMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select distinct "productclassificationtablewithprocessingsnapshotmilestoning_0".type as "type" from ProductTableWithProcessingSnapshotMilestoning as "root" left outer join ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_0" on ("root".type = "productclassificationtablewithprocessingsnapshotmilestoning_0".type and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate >= \'2015-01-01\' and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate <= \'2015-09-01\') where "productclassificationtablewithprocessingsnapshotmilestoning_0".type = \'STOCK\'',
    'select distinct "productclassificationtablewithprocessingsnapshotmilestoning_0".type as "type" from ProductTableWithProcessingSnapshotMilestoning as "root" left outer join ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_0" on ("root".type = "productclassificationtablewithprocessingsnapshotmilestoning_0".type and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate >= DATE\'2015-01-01\' and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate <= DATE\'2015-09-01\') where "productclassificationtablewithprocessingsnapshotmilestoning_0".type = \'STOCK\'',
    $result->sqlRemoveFormatting()
   );
   assertSameElements(['STOCK'], $result.values.rows.getString('type'));
}

function <<test.Test>> meta::relational::tests::milestoning::rangeQuery::testProcessingSnapshotRangeQueryOnRootAndProperty():Boolean[1]
{
   let result = execute(|ProcessingTemporalProduct.allVersionsInRange(%2015-1-1, %2015-9-1)->filter(x|$x.classificationAllVersionsInRange(%2015-1-1, %2015-9-1).type == 'STOCK')->project([x|$x.classificationAllVersionsInRange(%2015-1-1, %2015-9-1).type], ['type'])->distinct(), processingSnapshotMilestoningMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select distinct "productclassificationtablewithprocessingsnapshotmilestoning_0".type as "type" from ProductTableWithProcessingSnapshotMilestoning as "root" left outer join ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_0" on ("root".type = "productclassificationtablewithprocessingsnapshotmilestoning_0".type and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate >= \'2015-01-01\' and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate <= \'2015-09-01\') where "productclassificationtablewithprocessingsnapshotmilestoning_0".type = \'STOCK\' and "root".snapshotDate >= \'2015-01-01\' and "root".snapshotDate <= \'2015-09-01\'',
    'select distinct "productclassificationtablewithprocessingsnapshotmilestoning_0".type as "type" from ProductTableWithProcessingSnapshotMilestoning as "root" left outer join ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_0" on ("root".type = "productclassificationtablewithprocessingsnapshotmilestoning_0".type and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate >= DATE\'2015-01-01\' and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate <= DATE\'2015-09-01\') where "productclassificationtablewithprocessingsnapshotmilestoning_0".type = \'STOCK\' and "root".snapshotDate >= DATE\'2015-01-01\' and "root".snapshotDate <= DATE\'2015-09-01\'',
    $result->sqlRemoveFormatting()
   );
   assertSameElements(['STOCK'], $result.values.rows.getString('type'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testDateTimeMilestoningParam():Boolean[1]
{
   let result = execute(|ProcessingTemporalProduct.all(%2015-08-26T02:00:00)->filter(p|$p.name == 'ProductName1')->project([p|$p.id],['id']), processingSnapshotMilestoningMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "root".id as "id" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".name = \'ProductName1\' and "root".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date)',
    'select "root".id as "id" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".name = \'ProductName1\' and "root".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date)',
    $result->sqlRemoveFormatting()
   );
   assertEquals(2, $result.values.rows.get('id'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testDateTimeVariableMilestoningParam():Boolean[1]
{
   let result = execute({|let dt = '2015-08-26T02:00:00'->parseDate(); ProcessingTemporalProduct.all($dt)->filter(p|$p.name == 'ProductName1')->project([p|$p.id],['id']);}, processingSnapshotMilestoningMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "root".id as "id" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".name = \'ProductName1\' and "root".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date)',
    'select "root".id as "id" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".name = \'ProductName1\' and "root".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date)',
    $result->sqlRemoveFormatting()
   );
   assertEquals(2, $result.values.rows.get('id'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testDateTimeMilestoningParamPropagation():Boolean[1]
{
   let result = execute(|ProcessingTemporalProduct.all(%2015-08-26T02:00:00)->filter(p|$p.classification.description == 'STOCK DESC-V2')->project([p|$p.classification.type],['type']), processingSnapshotMilestoningMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "productclassificationtablewithprocessingsnapshotmilestoning_0".type as "type" from ProductTableWithProcessingSnapshotMilestoning as "root" left outer join ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_0" on ("root".type = "productclassificationtablewithprocessingsnapshotmilestoning_0".type and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date)) where "productclassificationtablewithprocessingsnapshotmilestoning_0".type_description = \'STOCK DESC-V2\' and "root".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date)',
    'select "productclassificationtablewithprocessingsnapshotmilestoning_0".type as "type" from ProductTableWithProcessingSnapshotMilestoning as "root" left outer join ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_0" on ("root".type = "productclassificationtablewithprocessingsnapshotmilestoning_0".type and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date)) where "productclassificationtablewithprocessingsnapshotmilestoning_0".type_description = \'STOCK DESC-V2\' and "root".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date)',
    $result->sqlRemoveFormatting()
   );
   assertEquals('STOCK', $result.values.rows.get('type'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testDateTimeVariableMilestoningParamPropagation():Boolean[1]
{
   let result = execute({|let dt = '2015-08-26T02:00:00'->parseDate(); ProcessingTemporalProduct.all($dt)->filter(p|$p.classification.description == 'STOCK DESC-V2')->project([p|$p.classification.type],['type']);}, processingSnapshotMilestoningMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "productclassificationtablewithprocessingsnapshotmilestoning_0".type as "type" from ProductTableWithProcessingSnapshotMilestoning as "root" left outer join ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_0" on ("root".type = "productclassificationtablewithprocessingsnapshotmilestoning_0".type and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date)) where "productclassificationtablewithprocessingsnapshotmilestoning_0".type_description = \'STOCK DESC-V2\' and "root".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date)',
    'select "productclassificationtablewithprocessingsnapshotmilestoning_0".type as "type" from ProductTableWithProcessingSnapshotMilestoning as "root" left outer join ProductClassificationTableWithProcessingSnapshotMilestoning as "productclassificationtablewithprocessingsnapshotmilestoning_0" on ("root".type = "productclassificationtablewithprocessingsnapshotmilestoning_0".type and "productclassificationtablewithprocessingsnapshotmilestoning_0".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date)) where "productclassificationtablewithprocessingsnapshotmilestoning_0".type_description = \'STOCK DESC-V2\' and "root".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date)',
    $result->sqlRemoveFormatting()
   );
   assertEquals('STOCK', $result.values.rows.get('type'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testDateTimeMilestoningParamUnion():Boolean[1]
{
   let result = execute(|ProcessingTemporalProduct.all(%2015-08-26T02:00:00)->filter(p|$p.classification.description == 'STOCK DESC-V2')->project([p|$p.classification.type],['type']), processingSnapshotMilestoningUnionMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "unionalias_1"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" as "type" from (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type_0, null as type_1, "root".id as "pk_0_0", null as "pk_0_1" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date) union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", null as type_0, "root".type as type_1, null as "pk_0_0", "root".id as "pk_0_1" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date)) as "unionBase" left outer join (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description", "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date) union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description", "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date)) as "unionalias_1" on (("unionBase".type_0 = "unionalias_1".type or "unionBase".type_1 = "unionalias_1".type) and (coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") = cast(truncate(\'2015-08-26 02:00:00\') as date) or coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") is null)) where "unionalias_1"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description" = \'STOCK DESC-V2\'',
    'select "unionalias_1"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" as "type" from (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type_0, null as type_1, "root".id as "pk_0_0", null as "pk_0_1" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date) union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", null as type_0, "root".type as type_1, null as "pk_0_0", "root".id as "pk_0_1" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date)) as "unionBase" left outer join (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description", "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date) union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description", "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date)) as "unionalias_1" on (("unionBase".type_0 = "unionalias_1".type or "unionBase".type_1 = "unionalias_1".type) and (coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date) or coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") is null)) where "unionalias_1"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description" = \'STOCK DESC-V2\'',
    $result->sqlRemoveFormatting()
   );
   assertEquals(['STOCK', 'STOCK', 'STOCK', 'STOCK'], $result.values.rows.get('type'));
}

function <<test.Test>> meta::relational::tests::milestoning::processingSnapshot::testDateTimeVariableMilestoningParamUnion():Boolean[1]
{
   let result = execute({|let dt = '2015-08-26T02:00:00'->parseDate(); ProcessingTemporalProduct.all($dt)->filter(p|$p.classification.description == 'STOCK DESC-V2')->project([p|$p.classification.type],['type']);}, processingSnapshotMilestoningUnionMap, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertEqualsH2Compatible(
    'select "unionalias_1"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" as "type" from (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type_0, null as type_1, "root".id as "pk_0_0", null as "pk_0_1" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date) union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", null as type_0, "root".type as type_1, null as "pk_0_0", "root".id as "pk_0_1" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date)) as "unionBase" left outer join (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description", "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date) union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description", "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(\'2015-08-26 02:00:00\') as date)) as "unionalias_1" on (("unionBase".type_0 = "unionalias_1".type or "unionBase".type_1 = "unionalias_1".type) and (coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") = cast(truncate(\'2015-08-26 02:00:00\') as date) or coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") is null)) where "unionalias_1"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description" = \'STOCK DESC-V2\'',
    'select "unionalias_1"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" as "type" from (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type_0, null as type_1, "root".id as "pk_0_0", null as "pk_0_1" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date) union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", null as type_0, "root".type as type_1, null as "pk_0_0", "root".id as "pk_0_1" from ProductTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date)) as "unionBase" left outer join (select "root".snapshotDate as "snapshotDate_0", null as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description", "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date) union all select null as "snapshotDate_0", "root".snapshotDate as "snapshotDate_1", "root".type as type, "root".type_description as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description", "root".type as "ProductClassificationTableWithProcessingSnapshotMilestoningtype_ProductClassificationTableWithProcessingSnapshotMilestoningtype" from ProductClassificationTableWithProcessingSnapshotMilestoning as "root" where "root".snapshotDate = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date)) as "unionalias_1" on (("unionBase".type_0 = "unionalias_1".type or "unionBase".type_1 = "unionalias_1".type) and (coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") = cast(truncate(TIMESTAMP\'2015-08-26 02:00:00\') as date) or coalesce("unionalias_1"."snapshotDate_0", "unionalias_1"."snapshotDate_1") is null)) where "unionalias_1"."ProductClassificationTableWithProcessingSnapshotMilestoningtype_description_ProductClassificationTableWithProcessingSnapshotMilestoningtype_description" = \'STOCK DESC-V2\'',
    $result->sqlRemoveFormatting()
   );
   assertEquals(['STOCK', 'STOCK', 'STOCK', 'STOCK'], $result.values.rows.get('type'));
}

function <<test.BeforePackage>> meta::relational::tests::milestoning::processingSnapshot::setUp():Runtime[1]
{
   initDatabase();
}
