// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::semistructured::union::*;
import meta::pure::test::*;
import meta::pure::executionPlan::*;
import meta::relational::metamodel::*;
import meta::core::runtime::*;
import meta::pure::mapping::*;

function meta::relational::tests::semistructured::union::semiStructuredExecute(conn: Connection[1], func: String[1], expected: String[1]):Boolean[1]
{
  let t1 =         
        'PERSON_SCHEMA\n' +
        'PERSON_TABLE_1\n' +
        'ID,FIRM_DETAILS,NAME\n' +
        '1,{\\"firm\\": {\\"firmName\\": \\"firm_A\\"}},ABC\n' +
        '3,{\\"firm\\": {\\"firmName\\": \\"firm_B\\"}},PQR\n' +
        '5,{\\"firm\\": {\\"firmName\\": \\"firm_C\\"}},XYZ\n';

  let t2 =         
        'PERSON_SCHEMA\n' +
        'PERSON_TABLE_2\n' +
        'ID,FIRM_DETAILS,NAME\n' +
        '2,{\\"firmName\\": \\"firm_D\\"},MNO\n' +
        '4,{\\"firmName\\": \\"firm_E\\"},DEF\n' +
        '6,{\\"firmName\\": \\"firm_F\\"},STU\n';

  let csv = [$t1, $t2];

  let model = '/core_relational/relational/tests/semistructured/model/semiStructuredUnionMapping.legend';

  let m = 'test::mapping::testMapping';
  let s = 'test::store::testDB';

   meta::relational::metamodel::execute::tests::executeLegendFunction($conn, $csv, $model, $func, $m, $s, $expected);
}

function <<paramTest.Test>> meta::relational::tests::semistructured::union::testSemiStructuredUnionMappingWithBinding(conn: Connection[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'test::query::getFirmDetails__TabularDataSet_1_',
    'Firm/FirmName\n' +
    'firm_A\n' +
    'firm_B\n' +
    'firm_C\n' +
    'firm_D\n' +
    'firm_E\n' +
    'firm_F\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::union::testSemiStructuredUnionMappingWithBindingAndFilter(conn: Connection[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'test::query::getFirmDetailsWithFilter__TabularDataSet_1_',
    'Firm/FirmName\n' +
    'firm_A\n' +
    'firm_B\n' +
    'firm_D\n'
  );
}