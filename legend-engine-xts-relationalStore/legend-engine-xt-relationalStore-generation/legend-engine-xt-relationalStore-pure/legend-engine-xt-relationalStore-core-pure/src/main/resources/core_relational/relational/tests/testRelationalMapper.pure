import meta::relational::tests::projection::qualifier::*;
import meta::pure::mapping::*;
import meta::relational::tests::*;
import meta::pure::alloy::connections::tests::relationalMapper::*;
import meta::core::runtime::*;
import meta::relational::functions::toDDL::*;
import meta::relational::functions::database::*;
import meta::pure::alloy::connections::*;
import meta::relational::runtime::*;
import meta::external::store::relational::runtime::*;
import meta::relational::tests::model::simple::*;
import meta::relational::mapping::*;
import meta::relational::metamodel::*;


function meta::pure::alloy::connections::tests::relationalMapper::databaseMappers():DatabaseMapper[*]
{
  [
    ^DatabaseMapper ( database = 'snDB',
                      schemas = [
                                  schema(meta::relational::tests::dbInc, 'productSchema')->toOne(),
                                  schema(meta::relational::tests::db, 'productSchema')->toOne()
                                ]
                    ),
    ^DatabaseMapper ( database = 'snDBDefault',
                      schemas = [
                                  schema(meta::relational::tests::db, 'default')->toOne()
                                ]
                    )
  ]
}

function meta::pure::alloy::connections::tests::relationalMapper::schemaMappers():SchemaMapper[*]
{
  [
    ^SchemaMapper ( to = 'productSchemaNewDBINC',
                    from = getSchema(meta::relational::tests::dbInc, 'productSchema')->toOne()),
    ^SchemaMapper ( to = 'productSchemaNewDB',
                    from = getSchema(meta::relational::tests::db, 'productSchema')->toOne())
  ]
}

function meta::pure::alloy::connections::tests::relationalMapper::tableMappers():TableMapper[*]
{
  [
    ^TableMapper ( to = 'synonymTableNew',
                   from = getTable(meta::relational::tests::db, 'productSchema', 'synonymTable')),
    ^TableMapper ( to = 'productTableNewINC',
                   from = getTable(meta::relational::tests::dbInc, 'productSchema', 'productTable')),
    ^TableMapper ( to = 'firmTableNew',
                   from = getTable(meta::relational::tests::db, 'default', 'firmTable'))
  ]
}

function meta::pure::alloy::connections::tests::relationalMapper::getSchema(_this:Database[1], name:String[1]):Schema[0..1]
{
    let schemas = $_this.includes->map(d|$d->cast(@Database)->getSchema($name))->concatenate($_this.schemas->filter(s|$s.name == $name));
    
    if ($schemas->size() > 1,
            | let schema = $schemas->filter(s|$s.database.name == $_this.name)->at(0);
              ^$schema(tables = $schemas.tables);,
            | $schemas->first();
       );
}

function <<access.private>> meta::pure::alloy::connections::tests::relationalMapper::relationalMapperSqlQuery(query:LambdaFunction<{->Any[*]}>[1], mapping:Mapping[1], databaseMaps:DatabaseMapper[*], schemaMaps:SchemaMapper[*], tableMaps:TableMapper[*]):String[1]
{
  let runtime = ^meta::core::runtime::Runtime
                ( connectionStores = ^meta::core::runtime::ConnectionStore(
                                        element = meta::relational::tests::db,
                                        connection = ^TestDatabaseConnection(
                                        type = DatabaseType.H2,
                                        queryPostProcessorsWithParameter = [relationalMapperPostProcessor(^RelationalMapperPostProcessor(relationalMappers = ^RelationalMapper(databaseMappers = $databaseMaps, schemaMappers  = $schemaMaps, tableMappers   = $tableMaps)))]
                                    ))
                );
  let result = meta::pure::executionPlan::executionPlan($query, $mapping, $runtime, meta::relational::extension::relationalExtensions());
  $result.rootExecutionNode.executionNodes->filter(p|$p->instanceOf(SQLExecutionNode))->cast(@SQLExecutionNode)->toOne().sqlQuery;
}

function <<test.Test>> meta::pure::alloy::connections::tests::relationalMapper::testRelationalDatabaseMapper():Boolean[1]
{
  let resultSQL = relationalMapperSqlQuery({|Product.all()}, productMappingWithFilter, databaseMappers(), [], []);
  assertEquals('select "root".ID as "pk_0", "root".NAME as "name" from snDB.productSchema.productTable as "root"', $resultSQL);
}

function <<test.Test>> meta::pure::alloy::connections::tests::relationalMapper::testRelationalSchemaMapper():Boolean[1]
{
  let resultSQL = relationalMapperSqlQuery({|Product.all()}, productMappingWithFilter, [], schemaMappers(), []);
  assertEquals('select "root".ID as "pk_0", "root".NAME as "name" from productSchemaNewDBINC.productTable as "root"', $resultSQL);
}

function <<test.Test>> meta::pure::alloy::connections::tests::relationalMapper::testRelationalTableMapper():Boolean[1]
{
  let resultSQL = relationalMapperSqlQuery({|Product.all()}, productMappingWithFilter, [], [], tableMappers());
  assertEquals('select "root".ID as "pk_0", "root".NAME as "name" from productSchema.productTableNewINC as "root"', $resultSQL);
}



function <<test.Test>> meta::pure::alloy::connections::tests::relationalMapper::testRelationalDatabaseSchemaMapper():Boolean[1]
{
  let resultSQL = relationalMapperSqlQuery({|Product.all()}, productMappingWithFilter, databaseMappers(), schemaMappers(), []);
  assertEquals('select "root".ID as "pk_0", "root".NAME as "name" from snDB.productSchemaNewDBINC.productTable as "root"', $resultSQL);
}

function <<test.Test>> meta::pure::alloy::connections::tests::relationalMapper::testRelationalDatabaseTableMapper():Boolean[1]
{
  let resultSQL = relationalMapperSqlQuery({|Product.all()}, productMappingWithFilter, databaseMappers(), [], tableMappers());
  assertEquals('select "root".ID as "pk_0", "root".NAME as "name" from snDB.productSchema.productTableNewINC as "root"', $resultSQL);
}

function <<test.Test>> meta::pure::alloy::connections::tests::relationalMapper::testRelationalSchemaTableMapper():Boolean[1]
{
  let resultSQL = relationalMapperSqlQuery({|Product.all()}, productMappingWithFilter, [], schemaMappers(), tableMappers());
  assertEquals('select "root".ID as "pk_0", "root".NAME as "name" from productSchemaNewDBINC.productTableNewINC as "root"', $resultSQL);
}



function <<test.Test>> meta::pure::alloy::connections::tests::relationalMapper::testRelationalDatabaseSchemaTableMapper():Boolean[1]
{
  let resultSQL = relationalMapperSqlQuery({|Product.all()},productMappingWithFilter, databaseMappers(), schemaMappers(), tableMappers());
  assertEquals('select "root".ID as "pk_0", "root".NAME as "name" from snDB.productSchemaNewDBINC.productTableNewINC as "root"', $resultSQL);
}



function <<test.Test>> meta::pure::alloy::connections::tests::relationalMapper::testRelationalDefaultSchemaMapper():Boolean[1]
{
  let resultSQL = relationalMapperSqlQuery({|Firm.all()}, simpleRelationalMapping, databaseMappers(), schemaMappers(), tableMappers());
  assertEquals('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from snDBDefault.default.firmTableNew as "root"', $resultSQL);
}

function <<test.Test>> meta::pure::alloy::connections::tests::relationalMapper::testRelationalMapperWithJoin():Boolean[1]
{
  let resultSQL = relationalMapperSqlQuery({|Firm.all()->project([f|$f.employeeByLastName('Smith').address.name],['address'])}, simpleRelationalMapping, databaseMappers(), schemaMappers(), tableMappers());
  assertEquals('select "addresstable_0".NAME as "address" from snDBDefault.default.firmTableNew as "root" left outer join snDBDefault.default.personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and "persontable_0".LASTNAME = \'Smith\') left outer join snDBDefault.default.addressTable as "addresstable_0" on ("addresstable_0".ID = "persontable_0".ADDRESSID)', $resultSQL);
}

function <<test.Test>> meta::pure::alloy::connections::tests::relationalMapper::testRelationalMapperTwoDBs():Boolean[1]
{
  let resultSQL = relationalMapperSqlQuery({|Product.all()->filter(p | $p.cusip == 'CUSIP1')->project([p | $p.name, p | $p.cusip], ['name', 'cusip'])}, productMappingWithFilter, databaseMappers(), schemaMappers(), tableMappers());
  assertEquals('select "root".NAME as "name", "synonymtable_0".NAME as "cusip" from snDB.productSchemaNewDBINC.productTableNewINC as "root" left outer join snDB.productSchemaNewDB.synonymTableNew as "synonymtable_0" on ("synonymtable_0".PRODID = "root".ID and "synonymtable_0".TYPE = \'CUSIP\' and "synonymtable_0".ID != 1) where "synonymtable_0".NAME = \'CUSIP1\'', $resultSQL);
}
