// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::protocols::pure::vX_X_X::transformation::helpers::*;
import meta::protocols::pure::vX_X_X::metamodel::valueSpecification::raw::*;
import meta::pure::extension::*;
import meta::pure::tds::toRelation::*;
import meta::protocols::pure::vX_X_X::metamodel::m3::valuespecification::constant::datatype::primitive::*;

function meta::pure::tds::toRelation::tdsToRelationExtension():TdsToRelationExtension_V_X_X[1]
   {
      ^TdsToRelationExtension_V_X_X(
        transfers = {a:meta::protocols::pure::vX_X_X::metamodel::m3::valuespecification::AppliedFunction[1], extensions:Extension[*] |
          [
            pair(join_TabularDataSet_1__TabularDataSet_1__JoinType_1__String_$1_MANY$__TabularDataSet_1_->cast(@Function<Any>),
            |
              let left = $a.parameters->at(0)->transform($extensions);
              let right = $a.parameters->at(1)->transform($extensions);
              let joinKind = $a.parameters->at(2)->transformJoinKind();
              let joinCols = $a.parameters->at(3)->fromCollection()->cast(@CString).value;
              let func = transformJoinColsToFunc($joinCols, $joinCols);

              appliedFunction(join_Relation_1__Relation_1__JoinKind_1__Function_1__Relation_1_, [$left, $right, $joinKind, $func]);
            ),
            pair(join_TabularDataSet_1__TabularDataSet_1__JoinType_1__String_$1_MANY$__String_$1_MANY$__TabularDataSet_1_->cast(@Function<Any>),
              |
                let left = $a.parameters->at(0)->transform($extensions);
                let right = $a.parameters->at(1)->transform($extensions);
                let joinKind = $a.parameters->at(2)->transformJoinKind();
                let leftJoinCols = $a.parameters->at(3)->fromCollection()->cast(@CString).value;
                let rightJoinCols = $a.parameters->at(4)->fromCollection()->cast(@CString).value;
                let func = transformJoinColsToFunc($leftJoinCols, $rightJoinCols);

                appliedFunction(join_Relation_1__Relation_1__JoinKind_1__Function_1__Relation_1_, [$left, $right, $joinKind, $func]);
            ),
            pair(join_TabularDataSet_1__TabularDataSet_1__JoinType_1__Function_1__TabularDataSet_1_->cast(@Function<Any>),
              |
                let left = $a.parameters->at(0)->transform($extensions);
                let right = $a.parameters->at(1)->transform($extensions);
                let joinKind = $a.parameters->at(2)->transformJoinKind();
                let func = $a.parameters->at(3)->transform($extensions);

                appliedFunction(join_Relation_1__Relation_1__JoinKind_1__Function_1__Relation_1_, [$left, $right, $joinKind, $func]);
            )
          ]
        }
      )
   }
