// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::relation::*;
import meta::pure::executionPlan::*;
import meta::relational::metamodel::*;
import meta::pure::mapping::*;
import meta::core::runtime::*;
import meta::relational::metamodel::execute::tests::*;

function meta::relational::metamodel::execute::tests::executeLegendFunction(conn: Connection[1], csvs: String[*], model: String[1], func: String[1], m: String[1], s: String[1], expectedCsv: String[1]):Boolean[1]
{
  let elements = $model->meta::legend::compileLegendFile();

  let function = $elements->filter(x | $x->elementToPath() == $func)->toOne('Not found: ' + $func)->cast(@FunctionDefinition<{->TabularDataSet[1]}>);
  let mapping = $elements->filter(x | $x->elementToPath() == $m)->toOne('Not found: ' + $m)->cast(@Mapping);
  let db = $elements->filter(x | $x->elementToPath() == $s)->toOne('Not found: ' + $s)->cast(@Database);

  let runtime =   ^Runtime
                  (
                    connectionStores=^ConnectionStore
                                      (
                                        connection=$conn,
                                        element = $db
                                      )
                  );

  let setupFunc = 'meta::relational::tests::pct::process::setupDatabase_String_MANY__Database_1__Runtime_1__DebugContext_1__SequenceExecutionNode_1_'
    ->pathToElement()->cast(@Function<{String[*], Database[1], Runtime[1], DebugContext[1]->SequenceExecutionNode[1]}>);
  let setup = $setupFunc->eval($csvs, $db, $runtime, noDebug());

  // generate plan
  let rawPlan = meta::pure::executionPlan::executionPlan($function, $mapping, $runtime, meta::legend::getLegendExtensions());

  let planWithTeardown = ^$rawPlan(rootExecutionNode =
      ^meta::pure::executionPlan::RelationalBlockExecutionNode(
          executionNodes = $setup->concatenate($rawPlan.rootExecutionNode),
          resultType = $rawPlan.rootExecutionNode.resultType,
          resultSizeRange =  $rawPlan.rootExecutionNode.resultSizeRange
      )
  );

  // bind to available local platform
  let planBindToJava = $planWithTeardown->meta::pure::executionPlan::platformBinding::localBinding::bindTestPlanToPlatformLocallyWithClasspathExtensions('LegendJava'); // TODO: Remove hardcoded platformId
  // transform to vX_X_X
  let plan = $planBindToJava->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::executionPlan::transformPlan(meta::legend::getLegendExtensions());
  // serialize to json
  let planAsJson = $plan->meta::json::toJSON(1000, meta::json::config(false, false, true, true));
  let actualCsv = meta::legend::executePlanAsJSON($planAsJson, []->cast(@Pair<String, Any>), 'CSV');
  
  let actualTds = $actualCsv->sortCsv();
  let expectedTds = $expectedCsv->sortCsv();
    
  assertEquals($expectedTds, $actualTds);
}

function meta::relational::metamodel::execute::tests::sortCsv(csv: String[1]):String[1]
{
  let tds = $csv->stringToTDS();
  let columns = $tds->columns();

  let rows = $tds->map(x | $columns->map(c | $c->eval($x)->first()->meta::pure::functions::lang::orElse('null'))->list());
  let r = range($columns->size());
  let sorted = $rows->sort({a, b | 
    $r->fold({c, v | 
      if ($v == 0, | $a.values->at($c)->compare($b.values->at($c)), |$v)
    }, 0)
  });

  let a = $columns->map(c | $c.name->toOne())->joinStrings(',') + '\n' + $sorted->map(x | $x.values->map(v | s($v))->joinStrings(','))->joinStrings('\n');
}