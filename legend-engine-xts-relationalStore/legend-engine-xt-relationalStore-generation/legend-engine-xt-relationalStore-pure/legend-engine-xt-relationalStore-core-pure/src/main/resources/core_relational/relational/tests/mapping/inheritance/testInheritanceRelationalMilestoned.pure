// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::*;
import meta::relational::metamodel::execute::*;
import meta::relational::tests::model::inheritance::milestoned::*;

function <<test.BeforePackage>> meta::relational::tests::mapping::inheritance::milestoned::setUp():Boolean[1]
{
  meta::relational::tests::mapping::inheritance::milestoned::createTablesAndFillDb();
}

function <<test.Test>> meta::relational::tests::mapping::inheritance::milestoned::testMilestonedSubTyping():Boolean[1]
{
  let result = execute(|VehicleOwner.all(%2025-01-01)->project([x|$x.vehicle->subType(@Car).name, x|$x.vehicle->subType(@Bicycle).name], ['carName', 'bicycleName']), MilestonedInheritanceMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions()).values;
  assertEquals(2, $result.rows->size());
  assertSameElements(['Peugeot | MBK', 'Renault | TDSNull'], $result.rows->map(r | $r.values->makeString(' | ')));
}

function <<test.Test>> meta::relational::tests::mapping::inheritance::milestoned::testMilestonedSubTypingWithDifferentDates():Boolean[1]
{
  let result = execute(|VehicleOwner.all(%2025-01-01)->project([x|$x.vehicle(%2024-01-01)->subType(@Car).name, x|$x.vehicle(%2023-01-01)->subType(@Bicycle).name], ['carName', 'bicycleName']), MilestonedInheritanceMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions()).values;
  assertEquals(2, $result.rows->size());
  assertSameElements(['TDSNull | TDSNull', 'Renault | BMX'], $result.rows->map(r | $r.values->makeString(' | ')));
}

function meta::relational::tests::mapping::inheritance::milestoned::createTablesAndFillDb():Boolean[1]
{
  let connection = meta::external::store::relational::tests::testRuntime().connectionByElement(db)->cast(@meta::external::store::relational::runtime::TestDatabaseConnection);

  executeInDb('Drop table if exists Owner;', $connection);
  executeInDb('Create Table Owner (ID INT, NAME VARCHAR(200), FROM_Z DATE, THRU_Z DATE);', $connection);
  executeInDb('insert into Owner (ID, NAME, FROM_Z, THRU_Z) values (1, \'David Scott\', \'2025-01-01\', \'9999-12-31\');', $connection);
  executeInDb('insert into Owner (ID, NAME, FROM_Z, THRU_Z) values (2, \'Atul Anand\', \'2025-01-01\', \'9999-12-31\');', $connection);

  executeInDb('Drop table if exists Car;', $connection);
  executeInDb('Create Table Car (OWNER_ID INT, NAME VARCHAR(200), FUEL INTEGER, FROM_Z DATE, THRU_Z DATE);', $connection);
  executeInDb('insert into Car (OWNER_ID, NAME, FUEL, FROM_Z, THRU_Z) values (1, \'Peugeot\', 1, \'2025-01-01\', \'9999-12-31\');', $connection);
  executeInDb('insert into Car (OWNER_ID, NAME, FUEL, FROM_Z, THRU_Z) values (2, \'Renault\', 2, \'2023-01-01\', \'2025-12-31\');', $connection);
  executeInDb('insert into Car (OWNER_ID, NAME, FUEL, FROM_Z, THRU_Z) values (3, \'Nissan\', 3, \'2025-01-01\', \'9999-12-31\');', $connection);

  executeInDb('Drop table if exists Bicycle;', $connection);
  executeInDb('Create Table Bicycle(OWNER_ID INT, NAME VARCHAR(200), GEAR INTEGER, FROM_Z DATE, THRU_Z DATE);', $connection);
  executeInDb('insert into Bicycle (OWNER_ID, NAME, GEAR, FROM_Z, THRU_Z) values (1, \'MBK\', 3, \'2025-01-01\', \'9999-12-31\');', $connection);
  executeInDb('insert into Bicycle (OWNER_ID, NAME, GEAR, FROM_Z, THRU_Z) values (2, \'BMX\', 4, \'2022-01-01\', \'2023-12-31\');', $connection);

  true;
}

// A temporally milestoned Vehicle probably doesn't make sense, but we will push the limits of reasoning for consistency in testing.
Class <<temporal.businesstemporal>> meta::relational::tests::model::inheritance::milestoned::Vehicle
{
  name: String[1];
}

Class <<temporal.businesstemporal>> meta::relational::tests::model::inheritance::milestoned::VehicleOwner
{
  name: String[1];
}

Class <<temporal.businesstemporal>> meta::relational::tests::model::inheritance::milestoned::Car extends Vehicle
{
  fuelAmount: Integer[1];
}

Class <<temporal.businesstemporal>> meta::relational::tests::model::inheritance::milestoned::Bicycle extends Vehicle
{
  gear: Integer[1];
}

Association meta::relational::tests::model::inheritance::milestoned::Vehicle_VehicleOwner
{
  owner: VehicleOwner[1];
  vehicle: Vehicle[1];
}

###Relational
Database meta::relational::tests::model::inheritance::milestoned::MilestonedInheritanceDb
(
  Table Owner
  (
    milestoning
    (
      business(BUS_FROM=FROM_Z, BUS_THRU=THRU_Z)
    )
    NAME VARCHAR(200) PRIMARY KEY,
    ID VARCHAR(200) PRIMARY KEY,
    FROM_Z DATE,
    THRU_Z DATE
  )

  Table Car
  (
    milestoning
    (
      business(BUS_FROM=FROM_Z, BUS_THRU=THRU_Z)
    )
    OWNER_ID VARCHAR(200) PRIMARY KEY,
    NAME VARCHAR(200) PRIMARY KEY,
    FUEL INTEGER,
    FROM_Z DATE,
    THRU_Z DATE
  )

  Table Bicycle
  (
    milestoning
    (
      business(BUS_FROM=FROM_Z, BUS_THRU=THRU_Z)
    )
    OWNER_ID VARCHAR(200) PRIMARY KEY,
    NAME VARCHAR(200) PRIMARY KEY,
    GEAR INTEGER,
    FROM_Z DATE,
    THRU_Z DATE
  )

  Join Owner_Car(Owner.ID = Car.OWNER_ID)
  Join Owner_Bicycle(Owner.ID = Bicycle.OWNER_ID)
)

###Mapping
import meta::relational::tests::model::inheritance::milestoned::*;

Mapping meta::relational::tests::model::inheritance::milestoned::MilestonedInheritanceMapping
(
  *meta::relational::tests::model::inheritance::milestoned::VehicleOwner[o]: Relational 
  {
    ~mainTable [MilestonedInheritanceDb] Owner
    name: [MilestonedInheritanceDb] Owner.NAME
  }

  *meta::relational::tests::model::inheritance::milestoned::Car[c]: Relational 
  {
    ~mainTable [MilestonedInheritanceDb] Car
    name: [MilestonedInheritanceDb] Car.NAME,
    fuelAmount: [MilestonedInheritanceDb] Car.FUEL
  }

  *meta::relational::tests::model::inheritance::milestoned::Bicycle[b]: Relational 
  {
    ~mainTable [MilestonedInheritanceDb] Bicycle
    name: [MilestonedInheritanceDb] Bicycle.NAME,
    gear: [MilestonedInheritanceDb] Bicycle.GEAR
  }

  *meta::relational::tests::model::inheritance::milestoned::Vehicle_VehicleOwner: Relational 
  {
    AssociationMapping
    (
      owner[c, o] : [MilestonedInheritanceDb] @Owner_Car,
      vehicle[o, c] : [MilestonedInheritanceDb] @Owner_Car,
      owner[b, o] : [MilestonedInheritanceDb] @Owner_Bicycle,
      vehicle[o, b] : [MilestonedInheritanceDb] @Owner_Bicycle
    )
  }
)