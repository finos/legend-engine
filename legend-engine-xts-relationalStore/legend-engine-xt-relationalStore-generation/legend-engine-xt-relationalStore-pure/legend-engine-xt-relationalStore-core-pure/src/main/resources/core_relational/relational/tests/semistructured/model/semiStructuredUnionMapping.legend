###Relational
Database test::store::testDB
(
  Schema PERSON_SCHEMA
  (
    Table PERSON_TABLE_1
    (
      ID INTEGER PRIMARY KEY,
      FIRM_DETAILS SEMISTRUCTURED,
      NAME VARCHAR(32)
    )
    Table PERSON_TABLE_2
    (
      ID INTEGER PRIMARY KEY,
      FIRM_DETAILS SEMISTRUCTURED,
      NAME VARCHAR(32)
    )
  )
)


###ExternalFormat
Binding test::binding::FirmBinding
{
  contentType: 'application/json';
  modelIncludes: [
    test::model::Firm
  ];
}


###Pure
Class test::model::Firm
{
  firmName: String[1];
}

Class test::model::Person
{
  firm: test::model::Firm[1];
}

function test::query::getFirmDetails(): meta::pure::tds::TabularDataSet[1]
{
  test::model::Person.all()->project(
    [
      x|$x.firm.firmName
    ],
    ['Firm/FirmName']
  )
}

function test::query::getFirmDetailsWithFilter(): meta::pure::tds::TabularDataSet[1]
{
  test::model::Person.all()->filter(
    x|$x.firm.firmName->in(
      [
        'firm_A',
        'firm_B',
        'firm_D'
      ]
    )->and()
  )->project(
    [
      x|$x.firm.firmName
    ],
    ['Firm/FirmName']
  )
}


###Mapping
Mapping test::mapping::testMapping
(
  *test::model::Person: Operation
  {
    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(Type_A,Type_B)
  }
  test::model::Person[Type_A]: Relational
  {
    ~primaryKey
    (
      [test::store::testDB]PERSON_SCHEMA.PERSON_TABLE_1.ID
    )
    ~mainTable [test::store::testDB]PERSON_SCHEMA.PERSON_TABLE_1
    firm: Binding test::binding::FirmBinding : extractFromSemiStructured([test::store::testDB]PERSON_SCHEMA.PERSON_TABLE_1.FIRM_DETAILS, 'firm', 'VARCHAR')
  }
  test::model::Person[Type_B]: Relational
  {
    ~primaryKey
    (
      [test::store::testDB]PERSON_SCHEMA.PERSON_TABLE_2.ID
    )
    ~mainTable [test::store::testDB]PERSON_SCHEMA.PERSON_TABLE_2
    firm: Binding test::binding::FirmBinding : [test::store::testDB]PERSON_SCHEMA.PERSON_TABLE_2.FIRM_DETAILS
  }
)