// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::pure::mft::tests::collection::*;
import meta::pure::mft::*;
import meta::pure::runtime::*;
import meta::relational::tests::mapping::groupBy::model::store::*;
import meta::pure::mft::tests::collection::*;
import meta::pure::test::mft::*;
import meta::pure::testCoverage::featureMatrix::*;
import meta::relational::mft::*;

function <<MappingFeature.union, meta::pure::test::mft::model::MFT.testCollection>> meta::relational::tests::mft::mapping::union::testunionMapping():MFTMappingTest[1]
{
 ^MFTMappingTest(setupData= ^CSVSetupData(database=meta::relational::tests::mapping::union::model::mapping::mft::store::MFTtestDB,path='/core_relational/relational/tests/mft/union/unionSetup.csv'),
                 mapping =  meta::relational::tests::mapping::union::model::mapping::mft::unionTestMapping,
                 assertions = [^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::distinct::distinctTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::drop::dropTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\nJoe\nJohn\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::exists::existsRecursiveTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTFIRM','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterAssociationGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"Joe"},{"firstName":"Joe"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTFIRM','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterAssociationIsEmptyGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"John"},{"firstName":"John"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTFIRM','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterAssociationIsEmptyTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName,legalName\nJohn,Firm D\nJohn,Firm D\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTFIRM','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>], legalName: [FIRM.ID <JoinTreeNode>, FIRM.LEGAL_NAME <TableAliasColumn>, PERSON.FIRM_ID <JoinTreeNode>, PERSON2.FIRM_ID <JoinTreeNode>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterAssociationTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTFIRM','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"Joe"},{"firstName":"Joe"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterPropertyFromSuperTypeTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Address','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::filterTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::first::firstTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\nJoe\nJohn\nJoe\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::groupBy::groupByTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='name,cnt\nJoe,2\nJohn,2\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[cnt: [PERSON.LASTNAME <TableAliasColumn>, PERSON2.LASTNAME <TableAliasColumn>], name: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::slice::sliceTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::sort::sortAssociationTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\nJoe\nJohn\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTFIRM','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::sort::sortTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJoe\nJoe\nJohn\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::take::takeTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                               ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::drop::dropGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"Joe"},{"firstName":"Joe"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::exists::existsTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName\nJohn\nJohn\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTFIRM','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::simpleGraph__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"John","lastName":"Doe","fullName()":"John Doe","birthDate":"2020-02-02","address":{"street":"MAIN","type":"PRIMARY"},"firm":{"legalName":"Firm D","optionalDescription":null}},{"firstName":"Joe","lastName":"Smith","fullName()":"Joe Smith","birthDate":"2010-02-02","address":{"street":"FIRST","type":"SECONDARY"},"firm":{"legalName":"Co","optionalDescription":"Company"}},{"firstName":"John","lastName":"Doe","fullName()":"John Doe","birthDate":"2000-02-02","address":{"street":"SECOND","type":"PRIMARY"},"firm":{"legalName":"Firm D","optionalDescription":null}},{"firstName":"Joe","lastName":"Smith","fullName()":"Joe Smith","birthDate":"2000-02-02","address":{"street":"THIRD","type":"SECONDARY"},"firm":{"legalName":"Co","optionalDescription":"Company"}}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(
                              ['Lambda','db_MFTtestDB','tb_MFTtestDBTESTFIRM','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'],
                                  ['Lambda','meta::pure::mft::tests::collection::Address','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'],
                                  '[Person.address.street: [PERSON.STREET <TableAliasColumn>, PERSON2.STREET <TableAliasColumn>], Person.address.type: [PERSON.ADDRESS_TYPE <TableAliasColumn>, PERSON2.ADDRESS_TYPE <TableAliasColumn>], Person.birthDate: [PERSON.BIRTHDATE <TableAliasColumn>, PERSON2.BIRTHDATE <TableAliasColumn>], Person.firm.legalName: [FIRM.ID <JoinTreeNode>, FIRM.LEGAL_NAME <TableAliasColumn>, PERSON.FIRM_ID <JoinTreeNode>, PERSON2.FIRM_ID <JoinTreeNode>], Person.firm.optionalDescription: [FIRM.ID <JoinTreeNode>, FIRM.OPTIONAL_DESCRIPTION <TableAliasColumn>, PERSON.FIRM_ID <JoinTreeNode>, PERSON2.FIRM_ID <JoinTreeNode>], Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>], Person.fullName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON.LASTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>, PERSON2.LASTNAME <TableAliasColumn>], Person.lastName: [PERSON.LASTNAME <TableAliasColumn>, PERSON2.LASTNAME <TableAliasColumn>]]'
                                  )),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::filter::simpleTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='firstName,lastName,fullName,birthDate,street,type,legalName,optionalDescription\nJohn,Doe,John Doe,2020-02-02,MAIN,PRIMARY,Firm D,TDSNull\nJoe,Smith,Joe Smith,2010-02-02,FIRST,SECONDARY,Co,Company\nJohn,Doe,John Doe,2000-02-02,SECOND,PRIMARY,Firm D,TDSNull\nJoe,Smith,Joe Smith,2000-02-02,THIRD,SECONDARY,Co,Company\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(
                              ['Lambda','db_MFTtestDB','tb_MFTtestDBTESTFIRM','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'],
                                  ['Lambda','meta::pure::mft::tests::collection::Address','meta::pure::mft::tests::collection::Firm','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'],
                                  '[birthDate: [PERSON.BIRTHDATE <TableAliasColumn>, PERSON2.BIRTHDATE <TableAliasColumn>], firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>], fullName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON.LASTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>, PERSON2.LASTNAME <TableAliasColumn>], lastName: [PERSON.LASTNAME <TableAliasColumn>, PERSON2.LASTNAME <TableAliasColumn>], legalName: [FIRM.ID <JoinTreeNode>, FIRM.LEGAL_NAME <TableAliasColumn>, PERSON.FIRM_ID <JoinTreeNode>, PERSON2.FIRM_ID <JoinTreeNode>], optionalDescription: [FIRM.ID <JoinTreeNode>, FIRM.OPTIONAL_DESCRIPTION <TableAliasColumn>, PERSON.FIRM_ID <JoinTreeNode>, PERSON2.FIRM_ID <JoinTreeNode>], street: [PERSON.STREET <TableAliasColumn>, PERSON2.STREET <TableAliasColumn>], type: [PERSON.ADDRESS_TYPE <TableAliasColumn>, PERSON2.ADDRESS_TYPE <TableAliasColumn>]]'
                                  )),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::first::firstGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"John"},{"firstName":"Joe"},{"firstName":"John"},{"firstName":"Joe"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::groupBy::groupByMultiAggTDS__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::TDSResult(value='name,cnt,cnt2\nJoe,2,2\nJohn,2,2\n'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[cnt2: [PERSON.BIRTHDATE <TableAliasColumn>, PERSON2.BIRTHDATE <TableAliasColumn>], cnt: [PERSON.LASTNAME <TableAliasColumn>, PERSON2.LASTNAME <TableAliasColumn>], name: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::slice::sliceGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"John"},{"firstName":"John"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::sort::sortGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"Joe"},{"firstName":"John"},{"firstName":"Joe"},{"firstName":"John"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]')),
                              ^meta::pure::test::mft::TestAssertion(tests=meta::pure::mft::tests::collection::take::takeGraphFetch__FunctionDefinition_1_,expectedExecutionResult=^meta::pure::test::mft::JSONResult(value='{"builder":{"_type":"json"},"values":[{"firstName":"John"},{"firstName":"John"}]}'),expectedLineageResult=meta::pure::test::mft::expectedLineage(['Lambda','db_MFTtestDB','tb_MFTtestDBTESTPERSON','tb_MFTtestDBTESTPERSON2'], ['Lambda','meta::pure::mft::tests::collection::Person','pack_meta::pure::mft::tests::collection'], '[Person.firstName: [PERSON.FIRSTNAME <TableAliasColumn>, PERSON2.FIRSTNAME <TableAliasColumn>]]'))
                              ]
                 
           
            );

}



###Mapping
import meta::pure::mft::tests::collection::*;
import meta::relational::tests::mapping::union::model::mapping::mft::store::*;
Mapping meta::relational::tests::mapping::union::model::mapping::mft::unionTestMapping
(
   *Person : Operation
            {
               meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(set1, set2)
            }

      Person[set1]: Relational
    {
       scope([MFTtestDB]TEST.PERSON)
       (
          firstName: FIRSTNAME,
          lastName : LASTNAME,
          birthDate: BIRTHDATE,
          address(
            street:STREET,
            type: EnumerationMapping AddressTypeMapping: ADDRESS_TYPE
           )  
          
       ),   
       firm: [MFTtestDB]@personFirm
    }

      Person[set2]: Relational
    {
       scope([MFTtestDB]TEST.PERSON2)
       (
          firstName: FIRSTNAME,
          lastName : LASTNAME,
          birthDate: BIRTHDATE,
          address(
            street:STREET,
            type: EnumerationMapping AddressTypeMapping: ADDRESS_TYPE  
          )    
       ),   
       firm: [MFTtestDB]@personFirm2
    }

    Firm: Relational
    {
       legalName: [MFTtestDB]TEST.FIRM.LEGAL_NAME,
       optionalDescription: [MFTtestDB]TEST.FIRM.OPTIONAL_DESCRIPTION,
       employees[set1]: [MFTtestDB]@personFirm,
       employees[set2]: [MFTtestDB]@personFirm2

    }
  AddressType: EnumerationMapping AddressTypeMapping
  {
    PRIMARY: ['PRIMARY'],
    SECONDARY: ['SECONDARY']
  }
)


###Relational

Database meta::relational::tests::mapping::union::model::mapping::mft::store::MFTtestDB
(
    Schema TEST
    (
    Table PERSON
    (
        ID INT PRIMARY KEY,
        FIRSTNAME VARCHAR(20),
        LASTNAME VARCHAR(20),
        FIRM_ID INT,
        BIRTHDATE DATE,
        STREET VARCHAR(20),
        ADDRESS_TYPE VARCHAR(20)

    )

    Table PERSON2
    (
        ID INT PRIMARY KEY,
        FIRSTNAME VARCHAR(20),
        LASTNAME VARCHAR(20),
        FIRM_ID INT,
        BIRTHDATE DATE,
        STREET VARCHAR(20), 
        ADDRESS_TYPE VARCHAR(20)
 

    )

    Table FIRM
    (
       ID INT PRIMARY KEY,
       LEGAL_NAME VARCHAR(20),
       OPTIONAL_DESCRIPTION VARCHAR(20)

    )

    )
    Join personFirm(TEST.PERSON.FIRM_ID = TEST.FIRM.ID)
    Join personFirm2(TEST.PERSON2.FIRM_ID = TEST.FIRM.ID)


)
