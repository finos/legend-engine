// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::mapping::*;
import meta::relational::functions::pureToSqlQuery::*;
import meta::relational::functions::pureToSqlQuery::metamodel::*;
import meta::relational::metamodel::operation::*;
import meta::relational::postProcessor::*;
import meta::relational::postProcessor::filterPushDown::*;
import meta::relational::metamodel::*;
import meta::relational::metamodel::join::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::relational::metamodel::relation::*;

function meta::relational::postProcessor::filterPushDown::pushFiltersDownToJoins(selectSQLQuery:SelectSQLQuery[1], extensions:Extension[*]):Result<SelectSQLQuery|1>[1]
{
   let transformFunction = {r: RelationalOperationElement[1] |
                              $r->match([
                                 s: SelectSQLQuery[1] | let transformedS = if($s.data->isNotEmpty(),
                                                           | let newS = ^$s(data = $s.data->toOne()->pushFiltersDownToJoins(list($s.filteringOperation->getFilteringPairs()), $extensions)->cast(@RootJoinTreeNode));
                                                           if($s.leftSideOfFilter->isNotEmpty(),
                                                              |^$newS(leftSideOfFilter=$s.leftSideOfFilter->toOne()->meta::relational::functions::pureToSqlQuery::findOneNode($s.data->toOne(), $newS.data->toOne())),
                                                              | $newS);,
                                                           | $s);
                                                          ^$transformedS(commonTableExpressions = $transformedS.commonTableExpressions->map(c | ^$c(sqlQuery = $c.sqlQuery->pushFiltersDownToJoins($extensions).values)));,
                                 rel: RelationalOperationElement[1] | $rel;
                              ]);
                           };
   
   ^Result<SelectSQLQuery|1>(
      values = $selectSQLQuery->transformNonCached($transformFunction)->cast(@SelectSQLQuery)
   );
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::pushFiltersDownToJoins(r: RelationalTreeNode[1], filteringPairs: List<Pair<TableAliasColumn, RelationalOperationElement>>[1], extensions:Extension[*]):RelationalTreeNode[1]
{
   let unSupportedJoinExists = $r->allNodes()->exists(n | $n->match([
      j: JoinTreeNode[1] | $j.joinType->in([JoinType.RIGHT_OUTER, JoinType.FULL_OUTER]),
      a: Any[*]          | false
   ]));

   if ($unSupportedJoinExists,
       | $r,
       | $r->match([
            j:JoinTreeNode[1] | let join = $j.join;
                                let res = $join.operation->tryAddingFiltersToJoinOperation($filteringPairs, $j.alias, $extensions);
                                ^$j( join=^$join(operation=$res.first->cast(@Operation)),
                                    alias=$j.alias->tryPushFiltersIntoSubQuery(list($res.first->getFilteringPairs()), $extensions),
                                    childrenData=$j->children()->map(c | $c->pushFiltersDownToJoins(list($filteringPairs.values->concatenate($res.second.values)), $extensions)));,
            r:RelationalTreeNode[1] | ^$r(alias=$r.alias->tryPushFiltersIntoSubQuery($filteringPairs, $extensions), childrenData=$r->children()->map(c | $c->pushFiltersDownToJoins($filteringPairs, $extensions)));
        ]);
   );
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::allNodes(r: RelationalTreeNode[1]): RelationalTreeNode[*]
{
   $r->concatenate($r->children()->map(x | $x->allNodes()))
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::candidatePairsForAlias(alias: TableAlias[1], filteringPairs: List<Pair<TableAliasColumn, RelationalOperationElement>>[1], extensions: Extension[*]): List<Pair<TableAliasColumn, RelationalOperationElement>>[1]
{
   // In a relational tree node, alias names should be unique (sub queries not considered)
   ^$filteringPairs(values = $filteringPairs.values->filter(p | $p.first.alias.name == $alias.name));
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::tryPushFiltersIntoSubQuery(alias: TableAlias[1], filteringPairs: List<Pair<TableAliasColumn, RelationalOperationElement>>[1], extensions:Extension[*]):TableAlias[1]
{
   $alias.relationalElement->match([
      subSelect: SelectSQLQuery[1]      | ^$alias(relationalElement = $subSelect->tryAddingFiltersToSubQuery(candidatePairsForAlias($alias, $filteringPairs, $extensions), $extensions)),
      viewSelect: ViewSelectSQLQuery[1] | ^$alias(relationalElement = ^$viewSelect(selectSQLQuery = $viewSelect.selectSQLQuery->tryAddingFiltersToSubQuery(candidatePairsForAlias($alias, $filteringPairs, $extensions), $extensions))),
      a:Any[*]                          | $alias
   ])
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::tryAddingFiltersToSubQuery(subSelect: SelectSQLQuery[1], filteringPairs: List<Pair<TableAliasColumn, RelationalOperationElement>>[1], extensions:Extension[*]): SelectSQLQuery[1]
{
   if ($filteringPairs.values->isEmpty(),
       | $subSelect,
       | let elementsInSubSelect = $subSelect->extractRelationalElements(false);
         let subSelectHasUnknownElementsOrWindowColumns = (!$elementsInSubSelect.noUnknownElement) || $elementsInSubSelect.elements->exists(x | $x->instanceOf(WindowColumn));
         let subSelectHasFromOrToRow = $subSelect.fromRow->isNotEmpty() || $subSelect.toRow->isNotEmpty();
         let cannotPushFiltersIntoSubQuery = $subSelectHasUnknownElementsOrWindowColumns || $subSelectHasFromOrToRow || ($subSelect.filteringOperation->size() > 1) || ($subSelect.havingOperation->size() > 1);
         if ($cannotPushFiltersIntoSubQuery,
             | $subSelect,
             | $filteringPairs.values->fold({fp, aggSelect | $aggSelect->tryAddingSingleFilterToSubQuery($fp, $extensions)}, $subSelect);
         );
   );
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::tryAddingSingleFilterToSubQuery(subSelect: SelectSQLQuery[1], filteringPair: Pair<TableAliasColumn, RelationalOperationElement>[1], extensions:Extension[*]): SelectSQLQuery[1]
{
   let groupByExists = $subSelect.groupBy->isNotEmpty();

   let selectCol = $subSelect.columns->filter(x | $x->match([
      a:Alias[1] | ($a.name == $filteringPair.first.column.name) && $a.relationalElement->resolveIfSingleTableAliasColumnGroup()->instanceOf(TableAliasColumn), 
      a:Any[*]   | false
   ]));

   let groupByNames = $subSelect.groupBy->map(column| $column->match([a:Alias[1]|$a.name, c:ColumnName[1]|$c.name, a:Any[*]|[]]));
   let isGroupingColumn = $groupByNames->contains($filteringPair.first.column.name) || 
                          (
                            ($selectCol->size() == 1) && 
                            $subSelect.groupBy->map(g | $g->resolveIfSingleTableAliasColumnGroup())->exists({x |
                               let selectTAC = $selectCol->toOne()->cast(@Alias).relationalElement->resolveIfSingleTableAliasColumnGroup()->cast(@TableAliasColumn);
                               $x->instanceOf(TableAliasColumn) && ($x->cast(@TableAliasColumn).alias.name == $selectTAC.alias.name) && ($x->cast(@TableAliasColumn).column.name == $selectTAC.column.name);
                            })
                          );
   let opToUpdate = if ($groupByExists && (!$isGroupingColumn), 
                        | $subSelect.havingOperation,
                        | $subSelect.filteringOperation
                    );

   let newFilter = if ($selectCol->size() == 1,
                       | let toReplaceWith = $selectCol->toOne()->cast(@Alias).relationalElement->resolveIfSingleTableAliasColumnGroup();
                         let transformFunc = {rel: RelationalOperationElement[1] | if($rel == $filteringPair.first, | $toReplaceWith, | $rel)};
                         $filteringPair.second->transformNonCached($transformFunc);,
                       | []
                   );

   if ($newFilter->isEmpty(),
       | $subSelect,
       | let updatedOp = if($opToUpdate->size() == 1, | [$newFilter->toOne(), $opToUpdate->toOne()]->andFilters($extensions), | $newFilter);
         if ($groupByExists && (!$isGroupingColumn), 
             | ^$subSelect(havingOperation = $updatedOp),
             | ^$subSelect(filteringOperation = $updatedOp)
         );
   );
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::resolveIfSingleTableAliasColumnGroup(relOp: RelationalOperationElement[1]): RelationalOperationElement[1]
{
   $relOp->match([
      d: DynaFunction[1] | if(($d.name == 'group') && ($d.parameters->size() == 1) && $d.parameters->at(0)->instanceOf(TableAliasColumn),
                              | $d.parameters->at(0),
                              | $relOp
                           ),
      a: Any[*] | $relOp
   ])
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::addFilterToJoinoperation(filteringPairs : Pair<TableAliasColumn, RelationalOperationElement>[*], left: TableAliasColumn[1], right: TableAliasColumn[1], operation: RelationalOperationElement[1], joinTableAlias: TableAlias[1], extensions:Extension[*]):Pair<RelationalOperationElement, List<Pair<TableAliasColumn, RelationalOperationElement>>>[1]
{
   let candidatePairs = $filteringPairs->filter(p | $p.first == $left && !($left.alias.name == $joinTableAlias.name && $left.alias.relationalElement->buildUniqueName(true, $extensions) == $joinTableAlias.relationalElement->buildUniqueName(true, $extensions)));
   let tranformFunc = {rel: RelationalOperationElement[1] | if($rel == $left, | $right, | $rel)};
   $candidatePairs->fold({element, aggregate | let transformedElement = $element.second->transformNonCached($tranformFunc);
                                               pair( newAndOrDynaFunctionRelaxedBrackets('and', [$aggregate.first, $transformedElement]),
                                                     list($aggregate.second.values->add(pair($right, $transformedElement))));}, pair($operation, list([]->cast(@Pair<TableAliasColumn, RelationalOperationElement>))));
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::tryAddingFiltersToJoinOperation(operation:RelationalOperationElement[1], filteringPairs: List<Pair<TableAliasColumn, RelationalOperationElement>>[1], joinTableAlias: TableAlias[1], extensions:Extension[*]):Pair<RelationalOperationElement, List<Pair<TableAliasColumn, RelationalOperationElement>>>[1]
{
   if(($operation->instanceOf(DynaFunction) && $operation->cast(@DynaFunction).name == 'equal'),
      | let left  = $operation->cast(@DynaFunction).parameters->at(0);
        let right = $operation->cast(@DynaFunction).parameters->at(1);
        if($left->instanceOf(TableAliasColumn) && $right->instanceOf(TableAliasColumn),
           | let first  = addFilterToJoinoperation($filteringPairs.values, $left->cast(@TableAliasColumn), $right->cast(@TableAliasColumn), $operation, $joinTableAlias, $extensions);
             let second = addFilterToJoinoperation($filteringPairs.values, $right->cast(@TableAliasColumn), $left->cast(@TableAliasColumn), $first.first, $joinTableAlias, $extensions);
             pair($second.first, list($first.second.values->concatenate($second.second.values)));,
           | pair($operation, list([])));,

      | if(($operation->instanceOf(DynaFunction) && $operation->cast(@DynaFunction).name == 'and'),
           | let dynaOp = $operation->cast(@DynaFunction);
             let res = $dynaOp.parameters->map(param | $param->tryAddingFiltersToJoinOperation($filteringPairs, $joinTableAlias, $extensions));
             pair(^$dynaOp(parameters=$res.first), list($res.second.values));,
           | pair($operation, list([]))
          )
      )
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::getPairForBinaryOp(param1: RelationalOperationElement[1], param2: RelationalOperationElement[1], op: RelationalOperationElement[1]):Pair<TableAliasColumn, RelationalOperationElement>[*]
{
   let allOpsInParam2 = meta::relational::functions::pureToSqlQuery::gatherAllOperations($param2, true);
   let param2Filter = $allOpsInParam2->filter(elem | !($elem->instanceOf(Literal) || $elem->instanceOf(LiteralList) || ($elem->instanceOf(VarPlaceHolder) && $elem->cast(@VarPlaceHolder).type->instanceOf(PrimitiveType)) ))->isEmpty();
   if($param1->instanceOf(TableAliasColumn) && $param2Filter,
      | pair($param1->cast(@TableAliasColumn), $op),
      | []);
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::getPairForUnaryOp(param1: RelationalOperationElement[1], op: RelationalOperationElement[1]):Pair<TableAliasColumn, RelationalOperationElement>[*]
{
   if($param1->instanceOf(TableAliasColumn),
      | pair($param1->cast(@TableAliasColumn),$op),
      | [])
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::getFilteringPairs(operation: RelationalOperationElement[*]):Pair<TableAliasColumn, RelationalOperationElement>[*]
{
   $operation->map(op |
       $op->match([
          dynaOp: DynaFunction[1] | let inScopeBinaryDynaOps = ['lessThan', 'lessThanEqual', 'greaterThan', 'greaterThanEqual', 'equal', 'notEqual', 'startsWith', 'endsWith', 'contains', 'in'];
                                    let inScopeUnaryDynaOps = ['isEmpty', 'isNotEmpty', 'isNull', 'isNotNull'];
                                    if($dynaOp.name->in(['and', 'group']),
                                       | $dynaOp.parameters->getFilteringPairs(),
                                       | if($dynaOp.name->in($inScopeBinaryDynaOps),
                                            | getPairForBinaryOp($dynaOp.parameters->at(0), $dynaOp.parameters->at(1), $dynaOp)->concatenate(getPairForBinaryOp($dynaOp.parameters->at(1), $dynaOp.parameters->at(0), $dynaOp)),
                                            | if($dynaOp.name->in($inScopeUnaryDynaOps),
                                                 | getPairForUnaryOp($dynaOp.parameters->at(0), $dynaOp),
                                                 | [])));,
          column: TableAliasColumn[1]  | pair($column, $column),
          rel: RelationalOperationElement[1] | [] ]) );
}

Class <<access.private>> meta::relational::postProcessor::filterPushDown::RelationalElementCollection
{
  noUnknownElement: Boolean[1];
  elements: RelationalOperationElement[*];
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::collection(noUnknownElement: Boolean[1], elements: RelationalOperationElement[*]): RelationalElementCollection[1]
{
  ^RelationalElementCollection(noUnknownElement = $noUnknownElement, elements = $elements)
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::extractRelationalElements(elements: RelationalOperationElement[*], recurseSubQueries: Boolean[1]): RelationalElementCollection[1]
{
  let results = $elements->map(el | $el->extractRelationalElements($recurseSubQueries));
  collection($results.noUnknownElement->and(), $results.elements);
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::extractRelationalElements(el: RelationalOperationElement[1], recurseSubQueries: Boolean[1]): RelationalElementCollection[1]
{
  let results = $el->match([
    {s: SelectSQLQuery[1] |
      let fromData = if($s.data->isNotEmpty(), | $s.data->toOne()->extractRelationalElements($recurseSubQueries), | []);
      let fromOtherElements = $s.columns
        ->concatenate($s.filteringOperation)
        ->concatenate($s.groupBy)
        ->concatenate($s.havingOperation)
        ->concatenate($s.orderBy.column)
        ->concatenate($s.fromRow)
        ->concatenate($s.toRow)
        ->concatenate($s.commonTableExpressions)
        ->extractRelationalElements($recurseSubQueries);
        $fromData->concatenate($fromOtherElements);
    },
    {v: ViewSelectSQLQuery[1] | collection(true, [])},
    {u: Union[1] | collection(true, [])},
    {a: TableAlias[1] | collection(true, [])}, // Not recursing on relational element, as it will happen from data
    {a: Alias[1] | $a.relationalElement->extractRelationalElements($recurseSubQueries)},
    {t: Table[1] | collection(true, [])},
    {c: CommonTableExpression[1] | $c.sqlQuery->extractRelationalElements($recurseSubQueries)},
    {t: CommonTableExpressionReference[1] | collection(true, [])},
    {t: TableAliasColumn[1] | $t.column->extractRelationalElements($recurseSubQueries)}, // Not recursing on alias, as it will happen from data
    {a: TableAliasColumnName[1] | collection(true, [])}, // Not recursing on alias, as it will happen from data
    {u: UnaryOperation[1] | $u.nested->extractRelationalElements($recurseSubQueries)},
    {b: BinaryOperation[1] | $b.left->concatenate($b.right)->extractRelationalElements($recurseSubQueries)},
    {va: VariableArityOperation[1] |$va.args->extractRelationalElements($recurseSubQueries)},
    {d: DynaFunction[1] | $d.parameters->extractRelationalElements($recurseSubQueries)},
    {f: FreeMarkerOperationHolder[1] | $f.parameters->extractRelationalElements($recurseSubQueries)},
    {wc: Column[1] | collection(true, [])},
    {wc: ColumnName[1] | collection(true, [])},
    {wc: WindowColumn[1] | $wc.window->concatenate($wc.func)->extractRelationalElements($recurseSubQueries)},
    {wc: Literal[1] | collection(true, [])},
    {wc: LiteralList[1] | collection(true, [])},
    {wc: VarPlaceHolder[1] | collection(true, [])},
    {w: meta::relational::metamodel::Window[1] | $w.partition->concatenate($w.sortBy.sortByElement)->extractRelationalElements($recurseSubQueries)},
    {js: JoinStrings[1] | $js.strings->concatenate($js.prefix)->concatenate($js.separator)->concatenate($js.suffix)->extractRelationalElements($recurseSubQueries)},
    {s: SemiStructuredPropertyAccess[1] | $s.operand->concatenate($s.property)->concatenate($s.index)->extractRelationalElements($recurseSubQueries)},
    {s: SemiStructuredArrayElementAccess[1] | $s.operand->concatenate($s.index)->extractRelationalElements($recurseSubQueries)},
    {s: SemiStructuredArrayFlatten[1] | $s.navigation->extractRelationalElements($recurseSubQueries)},
    {s: SemiStructuredArrayFlattenOutput[1] | $s.tableAliasColumn->extractRelationalElements($recurseSubQueries)},
    {a: Any[*] | /*println('Encountered unknown element of type: ' +  $el->type()->elementToPath());*/ collection(false, []);}
  ]);
  collection($results.noUnknownElement->and(), $el->concatenate($results.elements));
}

function <<access.private>> meta::relational::postProcessor::filterPushDown::extractRelationalElements(rn: RelationalTreeNode[1], recurseSubQueries: Boolean[1]): RelationalElementCollection[1]
{
  let aliasResults = $rn.alias->extractRelationalElements($recurseSubQueries);
  let relElementResults = $rn.alias.relationalElement->match([
    u: Union[1] | collection(true, $u)->concatenate(if($recurseSubQueries, | $u.queries->extractRelationalElements($recurseSubQueries), | [])),
    v: ViewSelectSQLQuery[1] | collection(true, $v)->concatenate(if($recurseSubQueries, | $v.selectSQLQuery->extractRelationalElements($recurseSubQueries), | [])),
    s: SelectSQLQuery[1] | collection(true, $s)->concatenate(if($recurseSubQueries, | $s->extractRelationalElements($recurseSubQueries), | [])),
    t: Table[1] | collection(true, $t),
    ss: SemiStructuredArrayFlatten[1] | $ss->extractRelationalElements($recurseSubQueries),
    a: Any[*] | /*println('Encountered unknown element of type: ' +  $a->type()->elementToPath());*/ collection(false, $rn.alias.relationalElement);
  ]);
  let joinResults = $rn->match([jtn: JoinTreeNode[1] | $jtn.join.operation->extractRelationalElements($recurseSubQueries), a: Any[*] | []]);
  let childrenResults = $rn.childrenData->cast(@RelationalTreeNode)->map(c | $c->extractRelationalElements($recurseSubQueries));
  let results = $aliasResults->concatenate($relElementResults)->concatenate($joinResults)->concatenate($childrenResults);
  collection($results.noUnknownElement->and(), $results.elements);
}