// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Relational
Database meta::relational::tests::mapping::relation::testDB
(
  Table personTable
  (
    ID INTEGER PRIMARY KEY,
    "FIRST NAME" VARCHAR(100),
    AGE INTEGER,
    FIRMID INTEGER,
    SALARY FLOAT
  )

  Table firmTable
  (
    ID INTEGER PRIMARY KEY,
    legalName VARCHAR(100)
  )

  Table groupMembershipTable
  (
    GROUPID INTEGER PRIMARY KEY,
    PERSONID INTEGER,
    GROUPNAME VARCHAR(30)
  )
)
 
###Pure
Class meta::relational::tests::mapping::relation::Person
{
  firstName: String[1];
  age: Integer[1];
}

Class meta::relational::tests::mapping::relation::PersonWithFirmId extends meta::relational::tests::mapping::relation::Person
{
  firmId: Integer[1];
}

Class meta::relational::tests::mapping::relation::ExtendedPerson extends meta::relational::tests::mapping::relation::Person
{
  rank: Integer[1];
  groupName: String[1];
}

Class meta::relational::tests::mapping::relation::Firm
{
  legalName: String[1];
}

Association meta::relational::tests::mapping::relation::Person_Firm
{
  employees: meta::relational::tests::mapping::relation::Person[*];
  firm: meta::relational::tests::mapping::relation::Firm[1];
}

###Mapping
import meta::relational::tests::mapping::relation::*;
Mapping meta::relational::tests::mapping::relation::SimpleMapping
(
  *Person[person]: Relation
  {
    ~func meta::relational::tests::mapping::relation::personFunction__Relation_1_
    firstName: 'FIRST NAME',
    age: AGE,
    +firmId: Integer[1]: FIRMID
  }

  *Firm[firm]: Relation 
  {
    ~func meta::relational::tests::mapping::relation::firmFunction__Relation_1_
    legalName: legalName,
    +id: Integer[1]: ID
  }

  Person_Firm: XStore
  {
    employees[firm, person]: $this.id == $that.firmId,
    firm[person, firm]: $this.firmId == $that.id
  }
)

Mapping meta::relational::tests::mapping::relation::MixedMapping
(
  *Person[person]: Relation
  {
    ~func meta::relational::tests::mapping::relation::personFunctionWithProject__Relation_1_
    firstName: 'FIRST NAME',
    age: AGE,
    +firmId: Integer[1]: FIRMID
  }

  *PersonWithFirmId: Relational 
  {
    firstName: [testDB]personTable."FIRST NAME",
    age: [testDB]personTable.AGE,
    firmId: [testDB]personTable.FIRMID
  }

  *Firm[firm]: Relational 
  {
    +id: Integer[1]: [testDB]firmTable.ID,
    legalName: [testDB]firmTable.legalName
  }

  Person_Firm: XStore
  {
    employees[firm, person]: $this.id == $that.firmId,
    firm[person, firm]: $this.firmId == $that.id
  }
)

Mapping meta::relational::tests::mapping::relation::WindowFunctionMapping
(
  *ExtendedPerson[person]: Relation
  {
    ~func meta::relational::tests::mapping::relation::personFunctionWithWindowColumn__Relation_1_
    firstName: 'FIRST NAME',
    groupName: GROUPNAME,
    age: AGE,
    rank: RANK
  }
)

Mapping meta::relational::tests::mapping::relation::UnionMapping
(
  *Person[person] : Operation
  {
    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(person1, person2)
  }

  Person[person1]: Relation
  {
    ~func meta::relational::tests::mapping::relation::personFunction__Relation_1_
    firstName: 'FIRST NAME',
    age: AGE
  }

  Person[person2]: Relation
  {
    ~func meta::relational::tests::mapping::relation::personFunctionWithProject__Relation_1_
    firstName: 'FIRST NAME',
    age: AGE
  }
)

Mapping meta::relational::tests::mapping::relation::MultiExprFunctionMapping
(
  *Person[person1]: Relation
  {
    ~func meta::relational::tests::mapping::relation::personFunctionMultiExpr__Relation_1_
    firstName: 'FIRST NAME',
    age: AGE
  }
)

###Pure
import meta::relational::metamodel::execute::*;
import meta::relational::metamodel::*;
import meta::pure::mapping::*;
import meta::legend::*;
import meta::pure::metamodel::relation::*;
import meta::relational::tests::mapping::relation::*;

function meta::relational::tests::mapping::relation::personFunction(): Relation<Any>[1]
{
  #>{meta::relational::tests::mapping::relation::testDB.personTable}#
    ->filter(x | $x.AGE > 25)
    ->limit(5)
}

function meta::relational::tests::mapping::relation::personFunctionMultiExpr(): Relation<Any>[1]
{
  let age = 25;
  #>{meta::relational::tests::mapping::relation::testDB.personTable}#
    ->filter(x | $x.AGE > $age)
    ->limit(5);
}

function meta::relational::tests::mapping::relation::personFunctionWithProject(): Relation<Any>[1]
{
  PersonWithFirmId.all()
    ->filter(x|$x.age > 25)
    ->project(
      ~[
        'FIRST NAME':x|$x.firstName,
        AGE:x|$x.age,
        FIRMID:x|$x.firmId
      ]
    )
    ->select(~['FIRST NAME', AGE, FIRMID])
}

function meta::relational::tests::mapping::relation::firmFunction(): Relation<Any>[1]
{
  #>{meta::relational::tests::mapping::relation::testDB.firmTable}#
    ->limit(10)
    ->select(~[ID, legalName])
}

function meta::relational::tests::mapping::relation::personFunctionWithWindowColumn(): Relation<Any>[1]
{
  #>{meta::relational::tests::mapping::relation::testDB.personTable}#
    ->join(#>{meta::relational::tests::mapping::relation::testDB.groupMembershipTable}#, JoinKind.INNER, {x,y| $x.ID == $y.PERSONID})
    ->extend(over(~GROUPID, ~SALARY->ascending()), ~[RANK:{p,w,r| $p->rank($w, $r)}]);
}
