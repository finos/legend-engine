// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::sqlQueryToString::h2::*;
import meta::relational::milestoning::*;
import meta::relational::metamodel::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::operation::*;
import meta::relational::metamodel::join::*;
import meta::relational::tests::milestoning::*;
import meta::relational::tests::*;
import meta::external::store::relational::tests::*;
import meta::relational::functions::asserts::*;
import meta::pure::executionPlan::*;

function <<test.Test>> meta::relational::tests::milestoning::applyMilestoningFilters::testMilestoningFilterApplicationOnSemiStructuredRelationalOperationElements():Any[*]
{
   let extensions = meta::relational::extension::relationalExtensions();
   
   let ssp = ^SemiStructuredPropertyAccess(
      operand = ^TableAliasColumn(alias = ^TableAlias(name = 'root', relationalElement = ^Table(name = 't', schema = ^Schema(name = 's', database = ^Database(name = 'd', package = ::)))), column = ^Column(name = 'result', type = ^meta::relational::metamodel::datatype::SemiStructured())),
      property = ^Literal(value = 'prop')
   );
   meta::relational::milestoning::applyMilestoningFilters($ssp, {t|[]}, {t|$t}, false, $extensions);

   let ssa = ^SemiStructuredArrayElementAccess(
      operand = ^TableAliasColumn(alias = ^TableAlias(name = 'root', relationalElement = ^Table(name = 't', schema = ^Schema(name = 's', database = ^Database(name = 'd', package = ::)))), column = ^Column(name = 'result', type = ^meta::relational::metamodel::datatype::SemiStructured())),
      index = ^Literal(value = 0)
   );
   meta::relational::milestoning::applyMilestoningFilters($ssa, {t|[]}, {t|$t}, false, $extensions);

   let ssf = ^SemiStructuredArrayFlatten(navigation = $ssp);
   meta::relational::milestoning::applyMilestoningFilters($ssf, {t|[]}, {t|$t}, false, $extensions);

   let ssfo = ^SemiStructuredArrayFlattenOutput(tableAliasColumn = ^TableAliasColumn(alias = ^TableAlias(name = 'ssf', relationalElement = $ssf), column = ^Column(name = 'result', type = ^meta::relational::metamodel::datatype::Integer())), returnType  = Integer);
   meta::relational::milestoning::applyMilestoningFilters($ssfo, {t|[]}, {t|$t}, false, $extensions);

   let firstAlias = ^TableAlias(name = 'root', relationalElement = ^Table(name = 't', schema = ^Schema(name = 's', database = ^Database(name = 'd', package = ::))));
   let secondAlias = ^TableAlias(name = 'ssf', relationalElement = $ssf);
   let jtn = ^JoinTreeNode(alias = $secondAlias, database = ^Database(name = 'd', package = ::), joinName = 'flatten_join', join = ^Join(name = 'flatten_join', operation = ^DynaFunction(name = 'not', parameters = ^Literal(value = false)), aliases = [pair($firstAlias, $secondAlias), pair($secondAlias, $firstAlias)]));
   meta::relational::milestoning::applyMilestoningFilters($jtn, {t|[]}, {t|$t}, false, $extensions);
}

function <<test.Test, test.ExcludeAlloy>> meta::relational::tests::milestoning::projection::testMileStoningWithNewTDSFilterAndPostProcessor():Boolean[1]
{

   meta::relational::tests::milestoning::initSimpleRelationalDbWithMilestoningColumns();

  let runtime = meta::external::store::relational::tests::testRuntime();

  let funcPP = {s:SelectSQLQuery[1] | let ff = {ta:TableAlias[1]| if($ta.relationalElement->instanceOf(Table) , | let table = $ta.relationalElement->cast(@Table);
                                                     ^DynaFunction(name='equal', parameters=[^TableAliasColumn(alias=$ta, column=^Column(name='thru_z', type=^meta::relational::metamodel::datatype::Date(), nullable=false)), ^Literal(value=%9999-12-31T00:00:00.000)]);
                                                                                          ,| []);};
                          let s2 = applyMilestoningFilters($s, $ff, getTableToTableIdentifyFunction(), true, meta::relational::extension::relationalExtensions())->cast(@SelectSQLQuery);
                          ^meta::pure::mapping::Result<SelectSQLQuery|1>(values=$s2);};

  let updatedRuntime = $runtime->meta::relational::runtime::addPostProcessors([], $funcPP);

  let result = executionPlan(|Product.all(%2015-10-16T00:00:00)->project(~[ID:x|$x.id,'Name':x|$x.name])->filter(row|$row.ID == '1'), milestoningMapWithEmbeddedSimple, $updatedRuntime, meta::relational::extension::relationalExtensions());

  assertEqualsH2Compatible(
    'Relational(type=TDS[(ID,Integer,INT,""),(Name,String,VARCHAR(1024),"")]resultColumns=[("ID",INT),("Name",VARCHAR(200))]sql=select"root".idas"ID","root".nameas"Name"fromProductTableas"root"where"root".from_z<=\'2015-10-1600:00:00\'and"root".thru_z>\'2015-10-1600:00:00\'and"root".id=\'1\'and"root".thru_z=\'9999-12-3100:00:00.000\'connection=TestDatabaseConnection(type="H2"))',
    'Relational(type=TDS[(ID,Integer,INT,""),(Name,String,VARCHAR(1024),"")]resultColumns=[("ID",INT),("Name",VARCHAR(200))]sql=select"root".idas"ID","root".nameas"Name"fromProductTableas"root"where"root".from_z<=TIMESTAMP\'2015-10-1600:00:00\'and"root".thru_z>TIMESTAMP\'2015-10-1600:00:00\'and"root".id=\'1\'and"root".thru_z=TIMESTAMP\'9999-12-3100:00:00.000\'connection=TestDatabaseConnection(type="H2"))',
    $result -> meta::pure::executionPlan::toString::planToStringWithoutFormatting(meta::relational::extension::relationalExtensions()));

}
