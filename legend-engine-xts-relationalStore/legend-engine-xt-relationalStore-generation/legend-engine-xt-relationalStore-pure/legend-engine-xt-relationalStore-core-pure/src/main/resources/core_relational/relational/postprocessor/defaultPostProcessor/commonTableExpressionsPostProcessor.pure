// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::postProcessor::*;
import meta::relational::metamodel::*;
import meta::pure::mapping::*;
import meta::pure::extension::*;
import meta::relational::metamodel::relation::*;


function meta::relational::postProcessor::cte::collectCommonTableExpressionReferences(selectSQLQuery:SelectSQLQuery[1], extensions:Extension[*]):Result<SelectSQLQuery|1>[1]
{
   let transformations =  {r: RelationalOperationElement[1]|
                                                   $r->match([
                                                      select  : SelectSQLQuery[1] | 
                                                        ^$select(commonTableExpressions = [])
                                                      ,
                                                      rel: RelationalOperationElement[1] | 
                                                        $rel
                                                   ])
                                             };

   let transformed = $selectSQLQuery->transform($transformations, ^Map<RelationalOperationElement, RelationalOperationElement>());

   let ctes = $transformed.second->keys()
      ->filter(x | $x->instanceOf(SelectSQLQuery))
      ->map(x | $x->cast(@SelectSQLQuery).commonTableExpressions)
      ->removeDuplicatesBy(x | $x.name);

   let transformedSelect = $transformed.first->cast(@SelectSQLQuery);

   ^Result<SelectSQLQuery|1>(values= ^$transformedSelect(commonTableExpressions = $ctes));
}