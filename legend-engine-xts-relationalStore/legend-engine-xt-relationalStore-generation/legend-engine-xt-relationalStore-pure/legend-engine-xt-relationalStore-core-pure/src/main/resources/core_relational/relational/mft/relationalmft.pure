//  Copyright 2024 Goldman Sachs
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

import meta::pure::graphFetch::execution::*;
import meta::pure::graphFetch::*;
import meta::pure::testCoverage::featureMatrix::*;
import meta::relational::tests::csv::*;
import meta::pure::extension::*;
import meta::relational::dbTestRunner::*;
import meta::json::*;
import meta::pure::metamodel::relation::*;
import meta::pure::mft::*;
import meta::pure::mapping::*;
import meta::external::store::relational::runtime::*;
import meta::core::runtime::*;
import meta::relational::functions::database::*;
import meta::relational::metamodel::*;
import meta::relational::metamodel::relation::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::runtime::*;
import meta::pure::store::*;
import meta::pure::mapping::metamodel::*;
import meta::pure::mapping::metamodel::*;
import meta::relational::extension::*;
import meta::pure::runtime::*;
import meta::pure::test::mft::*;
import meta::relational::mft::*;



function   <<meta::pure::test::mft::model::MFT.evaluator>>  meta::relational::mft::relationalEvaluator():MFTEvaluator[1]
{
    ^MFTEvaluator(eval =meta::relational::mft::relationalExecuteWrapperLegendQueryResult_TestParameters_1__StringResult_1_,
                  assertion = meta::relational::mft::assertExecute_TestResult_1__TestParameters_1__Boolean_1_,
                  testParameters = meta::pure::test::mft::createTestParametersExecution_MFTMappingTest_1__Runtime_1__TestParameters_MANY_,
                  unsupportedFeatures = meta::relational::mft::unsupportedMappingFeatures__FeatureSet_MANY_

             );

}

function   <<meta::pure::test::mft::model::MFT.evaluator>>  meta::relational::mft::relationalPureExecuteEvaluator():MFTEvaluator[1]
{
    ^MFTEvaluator(eval =meta::relational::mft::relationalExecuteWrapperQueryResult_TestParameters_1__TestResult_1_,
                  assertion = meta::relational::mft::assertExecute_TestResult_1__TestParameters_1__Boolean_1_,
                  testParameters = meta::pure::test::mft::createTestParametersExecution_MFTMappingTest_1__Runtime_1__TestParameters_MANY_,
                  unsupportedFeatures = meta::relational::mft::unsupportedMappingFeatures__FeatureSet_MANY_
             );

}

function   <<meta::pure::test::mft::model::MFT.adapter>>  meta::relational::mft::relationalMockAdaptor():MFTAdapter[1] //Mock connection for lineage calculations
{
    ^MFTAdapter( runtime= meta::relational::mft::relationalRunTimeMock_MFTMappingTest_1__Runtime_1_
             );

}


function   meta::relational::mft::unsupportedMappingFeatures():FeatureSet[*]
{

   ^FeatureSet(features =  MappingFeature->profileSubSet(['rowExplosion']));

}


Class meta::relational::mft::CSVSetupData extends meta::pure::test::mft::SetupData
{
  database:meta::relational::metamodel::Database[1];
  path:String[1];
}


function   meta::relational::mft::relationalExecuteWrapperExecuteSimple(parameters:meta::pure::test::mft::TestParameters[1]):Boolean[1]
{ 
  
    let fn =  $parameters.test->at(0).expressionSequence->cast(@InstanceValue)->evaluateAndDeactivate().values->at(0)->cast(@FunctionDefinition<{->Any[*]}>);
          if($parameters.expectedErrorMessage->isNotEmpty(),
              | assertError(|    
                                execute(|$fn,$parameters.mapping,$parameters.runtime,  relationalExtensions()),
                                $parameters.expectedErrorMessage->toOne()
                                
                                );,
              |   let result = ^ExecuteResult<Any>(result =execute($fn,$parameters.mapping,$parameters.runtime, relationalExtensions(), debug()));
                  meta::relational::mft::assertExecute($result, $parameters->toOne());
          );
  
}


// function   meta::relational::mft::relationalExecuteWrapperLegendQuery(parameters:meta::pure::test::mft::TestParameters[1]):Boolean[1]
// { 
  
//       let fn =  $parameters.test->at(0).expressionSequence->cast(@InstanceValue)->evaluateAndDeactivate().values->at(0)->cast(@FunctionDefinition<{->Any[*]}>).expressionSequence;

                      

//       if($parameters.expectedErrorMessage->isNotEmpty(),
//               | assertError(|    
//                                 meta::legend::executeLegendQuery(|$fn->from($parameters.mapping,$parameters.runtime), [], ^meta::pure::runtime::ExecutionContext(), relationalExtensions()),
//                                 $parameters.expectedErrorMessage->toOne()
                                
//                                 ); false;,
//               |   let result = ^StringResult(result =meta::legend::executeLegendQuery(|$fn->from($parameters.mapping,$parameters.runtime), [], ^meta::pure::runtime::ExecutionContext(), relationalExtensions()));
//                   meta::relational::mft::assertExecute($result, $parameters->toOne());
//           );
// }



function   meta::relational::mft::relationalExecuteWrapperLegendQueryResult(parameters:meta::pure::test::mft::TestParameters[1]):StringResult[1]
{ 
  
              $parameters->meta::pure::test::mft::executeMFTLegendQuery(relationalExtensions());

}

function   meta::relational::mft::relationalExecuteWrapperQueryResult(parameters:meta::pure::test::mft::TestParameters[1]):TestResult[1]
{ 
  
              $parameters->meta::relational::mft::executeMFTQuery(relationalExtensions());

}

function   meta::relational::mft::executeMFTQuery(parameters:meta::pure::test::mft::TestParameters[1],extensions:Extension[*]):TestResult[1]
{ 
  let fn =  $parameters.test->at(0).expressionSequence->cast(@InstanceValue)->evaluateAndDeactivate().values->at(0)->cast(@FunctionDefinition<{->Any[*]}>);
 
     // let fn =  $parameters.test->at(0).expressionSequence->cast(@InstanceValue)->evaluateAndDeactivate().values->at(0)->cast(@FunctionDefinition<{->Any[*]}>).expressionSequence->cast(@SimpleFunctionExpression)->toOne();

  if($parameters.test->hasStereotype('graphFetch',QueryType),
            | let graph =  $fn.expressionSequence->cast(@SimpleFunctionExpression)->toOne().parametersValues->at(1)->cast(@InstanceValue).values->at(0)->cast(@RootGraphFetchTree<Any>);
              if($parameters.expectedErrorMessage->isNotEmpty(),
                          | assertError(|    
                                            execute(|$fn->serialize($graph), $parameters.mapping,$parameters.runtime,$extensions),
                                            $parameters.expectedErrorMessage->toOne()
                                            
                                            ); @StringResult;,
                          |  let execute = execute(|$fn->serialize($graph), $parameters.mapping,$parameters.runtime,$extensions);  
                            let result = ^StringResult(result =$execute.values->toOne());
                  );,
            |if($parameters.expectedErrorMessage->isNotEmpty(),
                          | assertError(|    
                                             execute($fn, $parameters.mapping,$parameters.runtime,$extensions),
                                             $parameters.expectedErrorMessage->toOne()
                                            
                                            ); @StringResult;,
                          |     let result = execute($fn, $parameters.mapping,$parameters.runtime,$extensions);
                                ^CSVTestResult(result = $result.values->cast(@TabularDataSet)->toOne()->toCSV());

               ));
}




function meta::relational::mft::relationalRunTimeMock(mappingTest:meta::pure::test::mft::MFTMappingTest[1]):Runtime[1]
{
      $mappingTest.setupData->at(0)->match([c:CSVSetupData[1]|    ^Runtime(connectionStores =   ^ConnectionStore( connection = ^RelationalDatabaseConnection( type = DatabaseType.H2,
                                                                                                                      datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::LocalH2DatasourceSpecification(testDataSetupCsv = ''),
                                                                                                                      authenticationStrategy = ^meta::pure::alloy::connections::alloy::authentication::TestDatabaseAuthenticationStrategy()
                                                                                                                    ),
                                                            element = $c.database));
                                  ] );
   


}


function meta::relational::mft::assertExecute(result:meta::pure::test::mft::TestResult[1],parameter:TestParameters[1]):Boolean[1]
{
  let expected = $parameter.expectedExecutionResult->toOne();
$expected->match([t:TDSResult[1] | let actualCSV=     $result->match([s:StringResult[1] |let res = $s.result->meta::json::fromJSON(meta::protocols::pure::vX_X_X::metamodel::invocation::execution::execute::RelationalTDSResult, ^meta::json::ExtendedJSONDeserializationConfig(typeKeyName='__TYPE', failOnUnknownProperties=true, nullReplacementInArray=TDSNull))->cast(@meta::protocols::pure::vX_X_X::metamodel::invocation::execution::execute::RelationalTDSResult)->toOne();
                                                                                            $res->resultToCSV(); ,   
                                                                      c:CSVTestResult[1] | $c.result
                                                         ])->split('\n');
                                   let actualHeader =   $actualCSV->at(0);                      
                                   let actualContent  =   $actualCSV->tail();                      

                                   let expectedRows = $t.value->split('\n');
                                   let expectedHeader =  $expectedRows->at(0);
                                   let expectedContent = $expectedRows->tail(); 
                                   assertEquals($expectedHeader,$actualHeader );
                                   assertSameElements($expectedContent, $actualContent);,
                                  // assertEquals($expectedHeader->split(','),$res.result.columns->map(e|$e->meta::relational::tests::csv::toCSVString()) );
                                  // assertSameElements($expectedContent, $res.result.rows->map(r | $r.values->map(v | $v->meta::relational::tests::csv::toCSVString())->joinStrings(',')));,
                 j:JSONResult[1]| assertEquals(  $j.value,$result->cast(@StringResult).result)


      ]);

}

function meta::relational::mft::resultToCSV(t:meta::protocols::pure::vX_X_X::metamodel::invocation::execution::execute::RelationalTDSResult[1]):String[1]
{
   $t.result.columns->map(c | $c->meta::relational::tests::csv::toCSVString())->joinStrings(',') + '\n' +
   $t.result.rows->map(r | $r.values->map(v | $v->meta::relational::tests::csv::toCSVString())->joinStrings(','))->joinStrings('', '\n', '\n');
}


