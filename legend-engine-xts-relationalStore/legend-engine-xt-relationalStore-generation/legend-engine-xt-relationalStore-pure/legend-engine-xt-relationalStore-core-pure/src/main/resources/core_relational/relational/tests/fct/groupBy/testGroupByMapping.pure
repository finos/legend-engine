


###Pure
import meta::pure::test::fct::*;
import meta::pure::fct::*;
import meta::pure::runtime::*;
import meta::relational::tests::mapping::groupBy::model::store::*;
import meta::pure::fct::tests::collection::*;
import meta::pure::test::fct::model::*;
import meta::pure::testCoverage::featureMatrix::*;
import meta::relational::fct::*;

function <<MappingFeature.groupBy, meta::pure::test::fct::model::FCT.testCollection >> meta::relational::tests::fct::mapping::groupBy::testGroupByMapping():FCTMappingTest[1] 
{
  ^FCTMappingTest(setupData= ^CSVSetupData(database=meta::relational::tests::mapping::groupBy::model::mapping::fct::store::FCTtestDB,path='/core_relational/relational/tests/fct/shared/setup.csv'),
                 mapping =  meta::relational::tests::mapping::groupBy::model::mapping::fct::groupByTestMapping,
                 assertions= [^TestAssertion(tests = meta::pure::fct::tests::collection::filter::filterTDS__FunctionDefinition_1_,
                                             expectedLineageResult= expectedLineage(['Lambda', 'db_FCTtestDB', 'tb_FCTtestDBTESTTRADE'],['Lambda', 'meta::pure::fct::tests::collection::Position', 'pack_meta::pure::fct::tests::collection'],'[gsn: [TRADE.GSN <TableAliasColumn>]]'),
                                             expectedExecutionResult = ^TDSResult(value='gsn\nABC123\n')),
                              ^TestAssertion(tests = meta::pure::fct::tests::collection::filter::filterAssociationTDS__FunctionDefinition_1_,
                                             expectedLineageResult= expectedLineage(['Lambda', 'db_FCTtestDB', 'tb_FCTtestDBTESTPRODUCT', 'tb_FCTtestDBTESTTRADE'],['Lambda', 'meta::pure::fct::tests::collection::Position', 'meta::pure::fct::tests::collection::Product', 'pack_meta::pure::fct::tests::collection'],'[gsn: [TRADE.GSN <TableAliasColumn>]]'),
                                             expectedExecutionResult = ^TDSResult(value='gsn\nABCDEF\n')),
                              ^TestErrorAssertion(tests = [meta::pure::fct::tests::collection::filter::filterGraphFetch__FunctionDefinition_1_,
                                                            meta::pure::fct::tests::collection::filter::filterAssociationGraphFetch__FunctionDefinition_1_],
                                                  expectedErrorMessage = 'Store group by not allowed in graph fetch flow')
                           ]
                );
}

            


###Mapping
import meta::pure::fct::tests::collection::*;
import meta::relational::tests::mapping::groupBy::model::mapping::fct::store::*;
Mapping meta::relational::tests::mapping::groupBy::model::mapping::fct::groupByTestMapping
(
    Position: Relational
    {
       ~groupBy([FCTtestDB]TEST.TRADE.ACC_NUM, [FCTtestDB]TEST.TRADE.PRODUCT_ID, [FCTtestDB]TEST.TRADE.GSN)
       scope([FCTtestDB]TEST.TRADE)
       (
          acctNum: ACC_NUM,
          gsn : GSN,
          quantity : sum(QTY)
       ),
       product: [FCTtestDB]@product
    }


    Product: Relational
    {
       description: [FCTtestDB]TEST.PRODUCT.DESCRIPTION,
       positions: [FCTtestDB]@product
    }
)


###Relational

Database meta::relational::tests::mapping::groupBy::model::mapping::fct::store::FCTtestDB
(
    Schema  TEST
    (
    Table TRADE
    (
        TRADE_ID INT PRIMARY KEY,
        ACC_NUM INT,
        GSN VARCHAR(20),
        PRODUCT_ID INT,
        QTY INT
    )

    Table PRODUCT
    (
       ID INT PRIMARY KEY,
       DESCRIPTION VARCHAR(20)
    )

    Table PRODUCT_EXPLODED
    (
       TRADEABLE_ID INT PRIMARY KEY,
       PRODUCT_ID INT,
       DESCRIPTION VARCHAR(20),
       TRADEABLE VARCHAR(20),
       ACTIVE INT
    )
    )
    Join product(TEST.TRADE.PRODUCT_ID = TEST.PRODUCT.ID)
    Join tradePosition(TEST.TRADE.PRODUCT_ID = {target}.PRODUCT_ID and TEST.TRADE.ACC_NUM = {target}.ACC_NUM)

    Join tradeProductExploded(TEST.TRADE.PRODUCT_ID = TEST.PRODUCT_EXPLODED.PRODUCT_ID)

    Filter productFilter(TEST.TRADE.PRODUCT_ID = 1)
    Filter activeProducts(TEST.PRODUCT_EXPLODED.ACTIVE = 1)

)
