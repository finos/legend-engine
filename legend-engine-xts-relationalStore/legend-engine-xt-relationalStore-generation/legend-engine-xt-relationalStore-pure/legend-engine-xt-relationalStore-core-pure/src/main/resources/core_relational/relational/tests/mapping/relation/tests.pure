// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::relational::metamodel::execute::*;
import meta::relational::metamodel::*;
import meta::pure::router::*;
import meta::pure::mapping::*;
import meta::pure::metamodel::relation::*;
import meta::relational::tests::mapping::relation::*;

function <<test.BeforePackage>> meta::relational::tests::mapping::relation::setUp():Boolean[1]
{
  createTablesAndFillDb();
}

function meta::relational::tests::mapping::relation::createTablesAndFillDb():Boolean[1]
{
   let connection = meta::external::store::relational::tests::testRuntime(testDB).connectionByElement(testDB)->cast(@meta::external::store::relational::runtime::TestDatabaseConnection);
   
   executeInDb('Drop table if exists PersonTable;', $connection);
   executeInDb('Create Table PersonTable(id INT, "FIRST NAME" VARCHAR(200), age INT, firmId INT, birthdate DATE, salary DOUBLE, isMale BIT);', $connection);
   executeInDb('insert into PersonTable (id, "FIRST NAME", age, firmId, birthDate, salary, isMale) values (1, \'Peter\',   23,  1, \'2000-11-01\', 14.34, 1);', $connection);
   executeInDb('insert into PersonTable (id, "FIRST NAME", age, firmId, birthDate, salary, isMale) values (2, \'John\',    30,  1, \'1994-11-01\', 72.40, 1);', $connection);
   executeInDb('insert into PersonTable (id, "FIRST NAME", age, firmId, birthDate, salary, isMale) values (3, \'Jane\',    23,  2, \'2000-11-01\', 48.00, 0);', $connection);
   executeInDb('insert into PersonTable (id, "FIRST NAME", age, firmId, birthDate, salary, isMale) values (4, \'Anthony\', 19,  3, \'2005-11-01\', 64.90, 1);', $connection);
   executeInDb('insert into PersonTable (id, "FIRST NAME", age, firmId, birthDate, salary, isMale) values (5, \'Fabrice\', 45,  4, \'1979-11-01\', 19.29, 1);', $connection);
   executeInDb('insert into PersonTable (id, "FIRST NAME", age, firmId, birthDate, salary, isMale) values (6, \'Oliver\',  26,  4, \'1998-11-01\', 42.34, 1);', $connection);
   executeInDb('insert into PersonTable (id, "FIRST NAME", age, firmId, birthDate, salary, isMale) values (7, \'David\',   52,  5, \'1972-11-01\', 88.88, 1);', $connection);

   executeInDb('Drop table if exists FirmTable;', $connection);
   executeInDb('Create Table FirmTable(id INT, legalName VARCHAR(200), addressId INT, ceoId INT);', $connection);
   executeInDb('insert into FirmTable (id, legalName, addressId, ceoId) values (1, \'Firm X\', 8, 1);', $connection);
   executeInDb('insert into FirmTable (id, legalName, addressId, ceoId) values (2, \'Firm A\', 9, 5);', $connection);
   executeInDb('insert into FirmTable (id, legalName, addressId, ceoId) values (3, \'Firm B\', 10, 3);', $connection);
   executeInDb('insert into FirmTable (id, legalName, addressId, ceoId) values (4, \'Firm C\', 11, 7);', $connection);
   executeInDb('insert into FirmTable (id, legalName, addressId, ceoId) values (5, \'Firm D\', 11, 2);', $connection);

   executeInDb('Drop table if exists GroupMembershipTable;', $connection);
   executeInDb('Create Table GroupMembershipTable(groupid INT, personid INT, groupname VARCHAR(30));', $connection);
   executeInDb('insert into GroupMembershipTable (groupid, personid, groupname) values (1, 1, \'Group A\');', $connection);
   executeInDb('insert into GroupMembershipTable (groupid, personid, groupname) values (1, 2, \'Group A\');', $connection);
   executeInDb('insert into GroupMembershipTable (groupid, personid, groupname) values (2, 3, \'Group B\');', $connection);
   executeInDb('insert into GroupMembershipTable (groupid, personid, groupname) values (3, 4, \'Group C\');', $connection);
   executeInDb('insert into GroupMembershipTable (groupid, personid, groupname) values (3, 5, \'Group C\');', $connection);
   executeInDb('insert into GroupMembershipTable (groupid, personid, groupname) values (3, 6, \'Group C\');', $connection);
   executeInDb('insert into GroupMembershipTable (groupid, personid, groupname) values (4, 7, \'Group D\');', $connection);

  true;
}

function <<access.private>> meta::relational::tests::mapping::relation::testTds(func: FunctionDefinition<{->TabularDataSet[1]}>[1], mapping: Mapping[1], expectedRows:String[*]):Boolean[1]
{
   let result = execute($func, 
                        $mapping, 
                        meta::external::store::relational::tests::testRuntime(meta::relational::tests::mapping::relation::testDB), 
                        meta::relational::extension::relationalExtensions()
                      ).values->at(0);

   assertSameElements($expectedRows, $result.rows->map(r|$r.values->makeString(' | ')));
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testSimpleRelationMapping():Boolean[1]
{
   testTds(|Person.all()->project([x|$x.firstName, x|$x.age], ['name', 'age']), 
            meta::relational::tests::mapping::relation::simpleMapping, 
            ['David | 52', 'Fabrice | 45', 'John | 30', 'Oliver | 26']
          );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testSimpleRelationMappingWithAssociation():Boolean[1]
{
   testTds(|Person.all()->project([x|$x.firstName, x|$x.firm.legalName], ['name', 'firmName']),
            meta::relational::tests::mapping::relation::simpleMapping, 
            ['David | Firm D', 'Fabrice | Firm C', 'John | Firm X', 'Oliver | Firm C']
          );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testSimpleRelationMappingWithFilter():Boolean[1]
{
   testTds(|Firm.all()->filter(x|$x.legalName != 'Firm X')->project([x|$x.legalName, x|$x.employees.firstName], ['firmName', 'name']), 
            meta::relational::tests::mapping::relation::simpleMapping, 
            ['Firm A | TDSNull', 'Firm B | TDSNull', 'Firm C | Fabrice', 'Firm C | Oliver', 'Firm D | David']
          );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testSimpleRelationMappingWithSubFilter():Boolean[1]
{
   testTds(|Person.all()->project([x|$x.firstName, x|$x.firm.employees->filter(e|$e.age < 35).firstName], ['name', 'firmName']), 
            meta::relational::tests::mapping::relation::simpleMapping, 
            ['David | TDSNull', 'Fabrice | TDSNull', 'John | John', 'Oliver | Fabrice', 'Oliver | Oliver']
          );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testSimpleRelationMappingWithGroupByAndProject():Boolean[1]
{
   testTds(|Person.all()->groupBy([p|$p.firm.legalName], [agg(p|$p.age, y | $y->average())], ['name', 'averageAge'])
                        ->project([col(r:TDSRow[1]|$r.getString('name'), 'name'), col(r:TDSRow[1]|$r.getString('averageAge'), 'averageAge')]),
            meta::relational::tests::mapping::relation::simpleMapping,
            ['Firm C | 35.5', 'Firm D | 52.0', 'Firm X | 30.0']
          );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMixedMapping():Boolean[1]
{
  testTds(|Person.all()->project([x|$x.firstName, x|$x.age], ['name', 'age']), 
            meta::relational::tests::mapping::relation::mixedMapping, 
            ['David | 52', 'Fabrice | 45', 'John | 30', 'Oliver | 26']
          );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMixedMappingWithAssociation():Boolean[1]
{
   testTds(|Person.all()->project([x|$x.firstName, x|$x.firm.legalName], ['name', 'firmName']), 
            meta::relational::tests::mapping::relation::mixedMapping, 
            ['David | Firm D', 'Fabrice | Firm C', 'John | Firm X', 'Oliver | Firm C']
          );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMixedMappingWithFilter():Boolean[1]
{
   testTds(|Firm.all()->filter(x|$x.legalName != 'Firm X')->project([x|$x.legalName, x|$x.employees.firstName], ['firmName', 'name']), 
            meta::relational::tests::mapping::relation::mixedMapping, 
            ['Firm A | TDSNull', 'Firm B | TDSNull', 'Firm C | Fabrice', 'Firm C | Oliver', 'Firm D | David']
          );
}

// SQL Gen fails during isolation when adding a self join, need to investigate further
function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.ToFix>> meta::relational::tests::mapping::relation::testMixedMappingWithSubFilter():Boolean[1]
{
   testTds(|Person.all()->project([x|$x.firstName, x|$x.firm.employees->filter(e|$e.age < 35).firstName], ['name', 'firmName']), 
            meta::relational::tests::mapping::relation::mixedMapping, 
            ['David | TDSNull', 'Fabrice | TDSNull', 'John | John', 'Oliver | Fabrice', 'Oliver | Oliver']
          );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMixedMappingWithGroupByAndProject():Boolean[1]
{
   testTds(|Person.all()->groupBy([p|$p.firm.legalName], [agg(p|$p.age, y | $y->average())], ['name', 'averageAge'])
                        ->project([col(r:TDSRow[1]|$r.getString('name'), 'name'), col(r:TDSRow[1]|$r.getString('averageAge'), 'averageAge')]),
            meta::relational::tests::mapping::relation::mixedMapping,
            ['Firm C | 35.5', 'Firm D | 52.0', 'Firm X | 30.0']
          );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testComplexRelationMapping():Boolean[1]
{
   testTds(|ExtendedPerson.all()->filter(x|$x.age > 25)->project([x|$x.firstName, x|$x.groupName, x|$x.rank], ['name', 'groupName', 'rank']), 
            meta::relational::tests::mapping::relation::complexMapping, 
            ['David | Group D | 1', 'Fabrice | Group C | 1', 'John | Group A | 2', 'Oliver | Group C | 2']
          );
}

