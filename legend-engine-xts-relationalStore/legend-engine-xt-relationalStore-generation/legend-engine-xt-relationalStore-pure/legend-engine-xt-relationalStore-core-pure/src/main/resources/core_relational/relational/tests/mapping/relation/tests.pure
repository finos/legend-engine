// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::relational::metamodel::execute::*;
import meta::relational::metamodel::*;
import meta::pure::router::*;
import meta::pure::mapping::*;
import meta::pure::metamodel::relation::*;
import meta::relational::tests::mapping::relation::*;

function <<access.private>> meta::relational::tests::mapping::relation::testTds(func: FunctionDefinition<{->TabularDataSet[1]}>[1], mapping: Mapping[1], expectedRows:String[*]):Boolean[1]
{
  let result = execute($func, 
                      $mapping, 
                      meta::external::store::relational::tests::testRuntime(meta::relational::tests::mapping::relation::testDB), 
                      meta::relational::extension::relationalExtensions()
                    ).values->at(0);
  assertSameElements($expectedRows, $result.rows->map(r|$r.values->makeString(' | ')));
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testSimpleMappingQuery():Boolean[1]
{
  testTds(|Person.all()->project(~[name:x|$x.firstName, age:x|$x.age])->cast(@TabularDataSet), 
          meta::relational::tests::mapping::relation::SimpleMapping, 
          ['David | 52', 'Fabrice | 45', 'John | 30', 'Oliver | 26']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testSimpleMappingWithAssociation():Boolean[1]
{
  testTds(|Person.all()->project(~[name:x|$x.firstName, firmName:x|$x.firm.legalName])->cast(@TabularDataSet),
          meta::relational::tests::mapping::relation::SimpleMapping, 
          ['David | Firm D', 'Fabrice | Firm C', 'John | Firm X', 'Oliver | Firm C']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testSimpleMappingQueryWithPreFilter():Boolean[1]
{
  testTds(|Firm.all()->filter(x|$x.legalName != 'Firm X')->project(~[firmName:x|$x.legalName, name:x|$x.employees.firstName])->cast(@TabularDataSet), 
          meta::relational::tests::mapping::relation::SimpleMapping, 
          ['Firm A | TDSNull', 'Firm B | TDSNull', 'Firm C | Fabrice', 'Firm C | Oliver', 'Firm D | David']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testSimpleMappingQueryWithFilterInProject():Boolean[1]
{
  testTds(|Person.all()->project(~[name1:x|$x.firstName, name2:x|$x.firm.employees->filter(e|$e.age < 35).firstName])->cast(@TabularDataSet), 
          meta::relational::tests::mapping::relation::SimpleMapping, 
          ['David | TDSNull', 'Fabrice | TDSNull', 'John | John', 'Oliver | Fabrice', 'Oliver | Oliver']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testSimpleMappingQueryWithObjectGroupByAndTdsProject():Boolean[1]
{
  testTds(|Person.all()->groupBy([p|$p.firm.legalName], [agg(p|$p.age, y | $y->average())], ['name', 'averageAge'])
                      ->project([col(r:TDSRow[1]|$r.getString('name'), 'name'), col(r:TDSRow[1]|$r.getString('averageAge'), 'averageAge')]),
          meta::relational::tests::mapping::relation::SimpleMapping,
          ['Firm C | 35.5', 'Firm D | 52.0', 'Firm X | 30.0']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMixedMapping():Boolean[1]
{
  testTds(|Person.all()->project(~[name:x|$x.firstName, age:x|$x.age])->cast(@TabularDataSet), 
            meta::relational::tests::mapping::relation::MixedMapping, 
            ['David | 52', 'Fabrice | 45', 'John | 30', 'Oliver | 26']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMixedMappingWithAssociation():Boolean[1]
{
  testTds(|Person.all()->project(~[name:x|$x.firstName, firmName:x|$x.firm.legalName])->cast(@TabularDataSet), 
          meta::relational::tests::mapping::relation::MixedMapping, 
          ['David | Firm D', 'Fabrice | Firm C', 'John | Firm X', 'Oliver | Firm C']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMixedMappingQueryWithPreFilter():Boolean[1]
{
  testTds(|Firm.all()->filter(x|$x.legalName != 'Firm X')->project(~[name1:x|$x.legalName, name2:x|$x.employees.firstName])->cast(@TabularDataSet), 
          meta::relational::tests::mapping::relation::MixedMapping, 
          ['Firm A | TDSNull', 'Firm B | TDSNull', 'Firm C | Fabrice', 'Firm C | Oliver', 'Firm D | David']
        );
}

// SQL Gen fails during isolation when adding a self join, need to investigate further
function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.ToFix>> meta::relational::tests::mapping::relation::testMixedMappingWithFilterInProject():Boolean[1]
{
  testTds(|Person.all()->project(~[name1:x|$x.firstName, name2:x|$x.firm.employees->filter(e|$e.age < 35).firstName])->cast(@TabularDataSet), 
          meta::relational::tests::mapping::relation::MixedMapping, 
          ['David | TDSNull', 'Fabrice | TDSNull', 'John | John', 'Oliver | Fabrice', 'Oliver | Oliver']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMixedMappingWithObjectGroupByAndTdsProject():Boolean[1]
{
  testTds(|Person.all()->groupBy([p|$p.firm.legalName], [agg(p|$p.age, y | $y->average())], ['name', 'averageAge'])
                      ->project([col(r:TDSRow[1]|$r.getString('name'), 'name'), col(r:TDSRow[1]|$r.getString('averageAge'), 'averageAge')]),
          meta::relational::tests::mapping::relation::MixedMapping,
          ['Firm C | 35.5', 'Firm D | 52.0', 'Firm X | 30.0']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMappingWithWindowColumn():Boolean[1]
{
  testTds(|ExtendedPerson.all()->filter(x|$x.age > 25)->project(~[name:x|$x.firstName, groupName:x|$x.groupName, rank:x|$x.rank])->cast(@TabularDataSet),
          meta::relational::tests::mapping::relation::WindowColumnMapping, 
          ['David | Group D | 1', 'Fabrice | Group C | 1', 'John | Group A | 2', 'Oliver | Group C | 2']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMappingWithGroupBy():Boolean[1]
{
  testTds(|GroupByClass.all(%2020-01-01)->project(~[firmId:x|$x.firmId, sum:x|$x.sum])->cast(@TabularDataSet),
          meta::relational::tests::mapping::relation::GroupByMapping, 
          ['1 | 53', '2 | 23', '3 | 19', '4 | 71', '5 | 52']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMappingWithProcessingSnapshotMilestoning():Boolean[1]
{
  testTds(|ProcessingTemporalPerson.all(%2025-01-01)->project(~[firstName:x|$x.firstName, legalName:x|$x.ptFirm(%2024-11-01).legalName])->cast(@TabularDataSet),
          meta::relational::tests::mapping::relation::SnapshotMilestonedMapping, 
          ['Anthony | Firm B', 'David | TDSNull', 'Peter | TDSNull']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMappingWithProcessingSnapshotMilestoningAllVersionsInRange():Boolean[1]
{
  testTds(|ProcessingTemporalPerson.allVersionsInRange(%2024-01-01, %2025-01-01)->project(~[firstName:x|$x.firstName, legalName:x|$x.ptFirm(%2024-11-01).legalName])->cast(@TabularDataSet),
        meta::relational::tests::mapping::relation::SnapshotMilestonedMapping, 
        ['Anthony | Firm B', 'David | TDSNull', 'Jane | Firm A', 'John | TDSNull', 'Oliver | TDSNull', 'Peter | TDSNull']
      );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMappingWithBusinessSnapshotMilestoning():Boolean[1]
{
  testTds(|BusinessTemporalPerson.all(%2025-01-01)->project(~[firstName:x|$x.firstName, legalName:x|$x.biztFirm(%2024-11-01).legalName])->cast(@TabularDataSet),
          meta::relational::tests::mapping::relation::SnapshotMilestonedMapping, 
          ['Anthony | Firm B', 'David | TDSNull', 'Peter | TDSNull']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMappingWithBusinessSnapshotMilestoningAllVersionsInRange():Boolean[1]
{
  testTds(|BusinessTemporalPerson.allVersionsInRange(%2024-01-01, %2025-01-01)->project(~[firstName:x|$x.firstName, legalName:x|$x.biztFirm(%2024-11-01).legalName])->cast(@TabularDataSet),
          meta::relational::tests::mapping::relation::SnapshotMilestonedMapping, 
          ['Anthony | Firm B', 'David | TDSNull', 'Jane | Firm A', 'John | TDSNull', 'Oliver | TDSNull', 'Peter | TDSNull']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMappingWithProcessingTemporalMilestoning():Boolean[1]
{
  testTds(|ProcessingTemporalPerson.all(%2025-01-01)->project(~[firstName:x|$x.firstName, legalName:x|$x.ptFirm(%2024-11-01).legalName])->cast(@TabularDataSet),
          meta::relational::tests::mapping::relation::TemporalMilestonedMapping, 
          ['Anthony | Firm B', 'Jane | TDSNull', 'Peter | Firm X']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMappingWithProcessingTemporalMilestoningAllVersionsInRange():Boolean[1]
{
  testTds(|ProcessingTemporalPerson.allVersionsInRange(%2024-01-01, %2025-01-01)->project(~[firstName:x|$x.firstName, legalName:x|$x.ptFirm(%2024-11-01).legalName])->cast(@TabularDataSet),
        meta::relational::tests::mapping::relation::TemporalMilestonedMapping, 
        ['Anthony | Firm B', 'Fabrice | Firm C', 'Jane | TDSNull', 'Oliver | Firm C', 'Peter | Firm X']
      );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMappingWithBusinessTemporalMilestoning():Boolean[1]
{
  testTds(|BusinessTemporalPerson.all(%2025-01-01)->project(~[firstName:x|$x.firstName, legalName:x|$x.biztFirm(%2024-11-01).legalName])->cast(@TabularDataSet),
          meta::relational::tests::mapping::relation::TemporalMilestonedMapping, 
          ['Anthony | Firm B', 'Jane | TDSNull', 'Peter | Firm X']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMappingWithBusinessTemporalMilestoningAllVersionsInRange():Boolean[1]
{
  testTds(|BusinessTemporalPerson.allVersionsInRange(%2024-01-01, %2025-01-01)->project(~[firstName:x|$x.firstName, legalName:x|$x.biztFirm(%2024-11-01).legalName])->cast(@TabularDataSet),
          meta::relational::tests::mapping::relation::TemporalMilestonedMapping, 
          ['Anthony | Firm B', 'Fabrice | Firm C', 'Jane | TDSNull', 'Oliver | Firm C', 'Peter | Firm X']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMappingWithBiTemporalMilestoning():Boolean[1]
{
  testTds(|BiTemporalPerson.all(%2025-01-01, %2025-01-01)->project(~[firstName:x|$x.firstName, legalName:x|$x.btFirm(%2024-11-01, %2024-11-01).legalName])->cast(@TabularDataSet),
          meta::relational::tests::mapping::relation::TemporalMilestonedMapping, 
          ['Anthony | Firm B', 'Jane | TDSNull', 'Peter | Firm X']
        );
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::relation::testMappingWithMultipleMilestonedTables():Boolean[1]
{
  testTds(|ProcessingTemporalPerson.all(%2025-01-01)->project(~[firstName:x|$x.firstName])->cast(@TabularDataSet),
          meta::relational::tests::mapping::relation::MultipleMilestonedTablesMapping, 
          ['Peter']
        );
}