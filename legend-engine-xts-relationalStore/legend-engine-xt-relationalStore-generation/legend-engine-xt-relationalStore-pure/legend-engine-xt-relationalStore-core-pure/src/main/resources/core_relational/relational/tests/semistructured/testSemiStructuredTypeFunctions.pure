// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::semistructured::typeFunctions::*;
import meta::pure::test::*;
import meta::pure::executionPlan::*;
import meta::relational::metamodel::*;
import meta::core::runtime::*;
import meta::pure::mapping::*;

function meta::relational::tests::semistructured::typeFunctions::semiStructuredExecute(conn: Connection[1], func: String[1], mapping: String[1], expected: String[1]):Boolean[1]
{
  let csv =
        'ORDER_SCHEMA\n' +
        'ORDER_TABLE\n' +
        'ORDERID,ORDERNAME,CUSTOMER\n' +
        '1,Order1,"{\\"customerId\\": \\"Customer1\\", \\"customerAddress\\": {\\"@type\\":\\"BillingAddress\\",\\"name\\": \\"A1\\",\\"billAddress\\":\\"B1\\"},\\"transactionDetails\\": {\\"payment\\":{\\"@type\\":\\"CashOnDeliveryPayment\\",\\"paymentId\\": \\"P1\\",\\"amountToBePaid\\": 200}}, \\"products\\": [{\\"@type\\": \\"ElectronicsProduct\\", \\"productId\\": 1, \\"productName\\": \\"P1\\", \\"brand\\": \\"B1\\"}, {\\"@type\\": \\"SportsProduct\\", \\"productId\\": 2, \\"productName\\": \\"P2\\", \\"sport\\": \\"S1\\"}]}"\n' +
        '2,Order2,"{\\"customerId\\": \\"Customer2\\", \\"customerAddress\\": {\\"@type\\":\\"BillingAddress\\",\\"name\\": \\"A2\\",\\"billAddress\\":\\"B2\\"},\\"transactionDetails\\": {\\"payment\\":{\\"@type\\":\\"CashOnDeliveryPayment\\",\\"paymentId\\": \\"P2\\",\\"amountToBePaid\\": 180}}, \\"products\\": [{\\"@type\\": \\"SportsProduct\\", \\"productId\\": 2, \\"productName\\": \\"P2\\", \\"sport\\": \\"S1\\"}]}"\n' +
        '3,Order3,"{\\"customerId\\": \\"Customer3\\", \\"customerAddress\\": {\\"@type\\":\\"BillingAddress\\",\\"name\\": \\"A3\\",\\"billAddress\\":\\"B3\\"},\\"transactionDetails\\": {\\"payment\\":{\\"@type\\":\\"CashOnDeliveryPayment\\",\\"paymentId\\": \\"P3\\",\\"amountToBePaid\\": 290}}}"\n' +
        '4,Order4,"{\\"customerId\\": \\"Customer4\\", \\"customerAddress\\": {\\"@type\\":\\"Address\\",\\"name\\": \\"A4\\"},\\"transactionDetails\\": {\\"payment\\":{\\"@type\\":\\"PrepaidPayment\\",\\"paymentId\\": \\"P4\\",\\"amountPaid\\": 150}}}"\n' +
        '6,Order6,"{\\"customerId\\": \\"Customer6\\", \\"customerAddress\\": {\\"@type\\":\\"ShippingAddress\\",\\"name\\": \\"A6\\",\\"shipAddress\\":\\"S2\\"},\\"transactionDetails\\": {\\"payment\\":{\\"@type\\":\\"PrepaidPayment\\",\\"paymentId\\": \\"P6\\",\\"amountPaid\\": 120}}}"\n' +
        '5,Order5,"{\\"customerId\\": \\"Customer5\\", \\"customerAddress\\": {\\"@type\\":\\"ShippingAddress\\",\\"name\\": \\"A5\\",\\"shipAddress\\":\\"S1\\"},\\"transactionDetails\\": {\\"payment\\":{\\"@type\\":\\"PrepaidPayment\\",\\"paymentId\\": \\"P5\\",\\"amountPaid\\": 185}}}"\n' +
        '7,Order7,"{\\"customerId\\": \\"Customer7\\", \\"customerAddress\\": {\\"@type\\":\\"ShippingAddress\\",\\"name\\": \\"A7\\",\\"shipAddress\\":\\"S3\\"},\\"transactionDetails\\": {\\"payment\\":{\\"@type\\":\\"WalletPrepaidPayment\\",\\"paymentId\\": \\"P7\\",\\"amountPaid\\": 180,\\"walletTransactionAmount\\":200}}}"\n' +
        '8,Order8,"{\\"customerId\\": \\"Customer8\\", \\"customerAddress\\": {\\"@type\\":\\"ShippingAddress\\",\\"name\\": \\"A8\\",\\"shipAddress\\":\\"S4\\"},\\"transactionDetails\\": {\\"payment\\":{\\"@type\\":\\"CardPrepaidPayment\\",\\"paymentId\\": \\"P8\\",\\"amountPaid\\": 160, \\"cardTransactionAmount\\":190}}}"\n'
        ;

  let model = '/core_relational/relational/tests/semistructured/model/semiStructuredTypeFunctions.legend';
  let store = 'typeFunctions::store::H2DB';

   meta::relational::metamodel::execute::tests::executeLegendFunction($conn, $csv, $model, $func, $mapping, $store, $expected);
}

function meta::relational::tests::semistructured::typeFunctions::testSemiStructuredTypeNameFunctionUsageInProjectWithFunctionsHelper(conn: Connection[1], mapping: String[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'typeFunctions::semiStructuredTypeNameFunctionUsageInProjectWithFunctions__TabularDataSet_1_',
    $mapping,
    'Customer Address Type,Payment Type\n' +
    'BillingAddress,CashOnDeliveryPayment\n' +
    'BillingAddress,CashOnDeliveryPayment\n' +
    'BillingAddress,CashOnDeliveryPayment\n' +
    'Address,PrepaidPayment\n' +
    'ShippingAddress,PrepaidPayment\n' +
    'ShippingAddress,PrepaidPayment\n' +
    'ShippingAddress,WalletPrepaidPayment\n' +
    'ShippingAddress,CardPrepaidPayment\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::typeFunctions::testSemiStructuredTypeNameFunctionUsageInProjectWithFunctions(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredTypeNameFunctionUsageInProjectWithFunctionsHelper($conn, 'typeFunctions::mapping::H2Mapping');
}

function <<paramTest.Test>> meta::relational::tests::semistructured::typeFunctions::relationFunctionMapping::testSemiStructuredTypeNameFunctionUsageInProjectWithFunctions(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredTypeNameFunctionUsageInProjectWithFunctionsHelper($conn, 'typeFunctions::relationFunctionMapping::H2Mapping');
}

function meta::relational::tests::semistructured::typeFunctions::testSemiStructuredTypeNameFunctionUsageInProjectWithColSpecsHelper(conn: Connection[1], mapping: String[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'typeFunctions::semiStructuredTypeNameFunctionUsageInProjectWithColSpecs__TabularDataSet_1_',
    $mapping,
    'Customer Address Type,Payment Type\n' +
    'BillingAddress,CashOnDeliveryPayment\n' +
    'BillingAddress,CashOnDeliveryPayment\n' +
    'BillingAddress,CashOnDeliveryPayment\n' +
    'Address,PrepaidPayment\n' +
    'ShippingAddress,PrepaidPayment\n' +
    'ShippingAddress,PrepaidPayment\n' +
    'ShippingAddress,WalletPrepaidPayment\n' +
    'ShippingAddress,CardPrepaidPayment\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::typeFunctions::testSemiStructuredTypeNameFunctionUsageInProjectWithColSpecs(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredTypeNameFunctionUsageInProjectWithColSpecsHelper($conn, 'typeFunctions::mapping::H2Mapping');
}

function <<paramTest.Test>> meta::relational::tests::semistructured::typeFunctions::relationFunctionMapping::testSemiStructuredTypeNameFunctionUsageInProjectWithColSpecs(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredTypeNameFunctionUsageInProjectWithColSpecsHelper($conn, 'typeFunctions::relationFunctionMapping::H2Mapping');
}

function meta::relational::tests::semistructured::typeFunctions::testSemiStructuredTypeNameFunctionUsageInFilterHelper(conn: Connection[1], mapping: String[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'typeFunctions::semiStructuredTypeNameFunctionUsageInFilter__TabularDataSet_1_',
    $mapping,
    'Order Id,Customer Address Type\n' +
    '1,BillingAddress\n' +
    '2,BillingAddress\n' +
    '3,BillingAddress\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::typeFunctions::testSemiStructuredTypeNameFunctionUsageInFilter(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredTypeNameFunctionUsageInFilterHelper($conn, 'typeFunctions::mapping::H2Mapping');
}

function <<paramTest.Test>> meta::relational::tests::semistructured::typeFunctions::relationFunctionMapping::testSemiStructuredTypeNameFunctionUsageInFilter(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredTypeNameFunctionUsageInFilterHelper($conn, 'typeFunctions::relationFunctionMapping::H2Mapping');
}

function meta::relational::tests::semistructured::typeFunctions::testSemiStructuredTypeNameFunctionUsageAfterFlattenFunctionHelper(conn: Connection[1], mapping: String[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'typeFunctions::semiStructuredTypeNameFunctionUsageAfterFlattenFunction__TabularDataSet_1_',
    $mapping,
    'Order Id,Product Type\n' +
    '1,ElectronicsProduct\n' +
    '1,SportsProduct\n' +
    '2,SportsProduct\n' +
    '3,\n' +
    '4,\n' +
    '6,\n' +
    '5,\n' +
    '7,\n' +
    '8,\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::typeFunctions::testSemiStructuredTypeNameFunctionUsageAfterFlattenFunction(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredTypeNameFunctionUsageAfterFlattenFunctionHelper($conn, 'typeFunctions::mapping::H2Mapping');
}

function <<paramTest.Test>> meta::relational::tests::semistructured::typeFunctions::relationFunctionMapping::testSemiStructuredTypeNameFunctionUsageAfterFlattenFunction(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredTypeNameFunctionUsageAfterFlattenFunctionHelper($conn, 'typeFunctions::relationFunctionMapping::H2Mapping');
}

function meta::relational::tests::semistructured::typeFunctions::testSemiStructuredTypeNameFunctionUsageAfterFlattenColSpecHelper(conn: Connection[1], mapping: String[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'typeFunctions::semiStructuredTypeNameFunctionUsageAfterFlattenColSpec__TabularDataSet_1_',
    $mapping,
    'Order Id,Product Type\n' +
    '1,ElectronicsProduct\n' +
    '1,SportsProduct\n' +
    '2,SportsProduct\n' +
    '3,\n' +
    '4,\n' +
    '6,\n' +
    '5,\n' +
    '7,\n' +
    '8,\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::typeFunctions::testSemiStructuredTypeNameFunctionUsageAfterFlattenColSpec(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredTypeNameFunctionUsageAfterFlattenColSpecHelper($conn, 'typeFunctions::mapping::H2Mapping');
}

function <<paramTest.Test>> meta::relational::tests::semistructured::typeFunctions::relationFunctionMapping::testSemiStructuredTypeNameFunctionUsageAfterFlattenColSpec(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredTypeNameFunctionUsageAfterFlattenColSpecHelper($conn, 'typeFunctions::relationFunctionMapping::H2Mapping');
}

function meta::relational::tests::semistructured::typeFunctions::testSemiStructuredTypeNameFunctionUsageAfterArrayElementAccessHelper(conn: Connection[1], mapping: String[1]):Boolean[1]
{
  semiStructuredExecute($conn,
    'typeFunctions::semiStructuredTypeNameFunctionUsageAfterArrayElementAccess__TabularDataSet_1_',
    $mapping,
    'Order Id,Product 0 Type,Product 1 Type\n' +
    '1,ElectronicsProduct,SportsProduct\n' +
    '2,SportsProduct,\n' +
    '3,,\n' +
    '4,,\n' +
    '6,,\n' +
    '5,,\n' +
    '7,,\n' +
    '8,,\n'
  );
}

function <<paramTest.Test>> meta::relational::tests::semistructured::typeFunctions::testSemiStructuredTypeNameFunctionUsageAfterArrayElementAccess(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredTypeNameFunctionUsageAfterArrayElementAccessHelper($conn, 'typeFunctions::mapping::H2Mapping');
}

function <<paramTest.Test>> meta::relational::tests::semistructured::typeFunctions::relationFunctionMapping::testSemiStructuredTypeNameFunctionUsageAfterArrayElementAccess(conn: Connection[1]):Boolean[1]
{
  testSemiStructuredTypeNameFunctionUsageAfterArrayElementAccessHelper($conn, 'typeFunctions::relationFunctionMapping::H2Mapping');
}