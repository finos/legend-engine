// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::naming::*;
import meta::external::language::java::factory::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::platformBinding::legendJava::platform::objectReference::*;

function meta::relational::executionPlan::platformBinding::legendJava::getRelationalObjectReferenceParserHelperClass(pkOrder: String[*], path:String[1], context:GenerationContext[1], debug:DebugContext[1]):meta::external::language::java::metamodel::Class[1]
{
   let objectMapperClass           = javaClass('com.fasterxml.jackson.databind.ObjectMapper');
   let base64Class                 = javaClass('java.util.Base64');
   
   let objectReferenceInterface    = getObjectReferenceParserHelperInterface($path, $context);
   
   let pkOrderField                = javaField('private', javaList(javaString()), 'pkOrder');
   let objectMapperField           = javaField('private', $objectMapperClass, 'objectMapper');
   let baseClass                   = $context.conventions->planNodeClass(['public'], $path, 'RelationalObjectReferenceParserHelper')
                                                         ->implements($objectReferenceInterface)
                                                         ->imports($context.conventions->standardImports())
                                                         ->imports($objectMapperClass)
                                                         ->imports($base64Class)
                                                         ->imports($objectReferenceInterface)
                                                         ->addField($pkOrderField)
                                                         ->addField($objectMapperField);
   let jThis                       = j_this($baseClass);

   let constructor                 = javaConstructor([], [],
                                                     [
                                                        $jThis->j_field($pkOrderField)->j_assign(javaArrayList(javaString())->j_new(javaArrays()->j_invoke('asList', $pkOrder->cast(@String)->map(pk| j_string($pk)), javaList(javaString())))),
                                                        $jThis->j_field($objectMapperField)->j_assign(j_new($objectMapperClass, []))
                                                     ]);

   let objectReferenceParam        = j_parameter(javaString(), 'objectReference');
   let ex                          = j_parameter(javaException(), 'e');
   let decodedObjectReferenceVar   = j_variable(javaString(), 'indexStream');
   let relationalObjectReferenceVar= j_variable(javaString(), 'relationalObjectReference');
   let objectReferenceVersionVar   = j_variable(javaInt(), 'objectReferenceVersion');
   
   let lengthStringSizeVar         = j_variable(javaInt(), 'lengthStringSize');

   let typeStartVar                = j_variable(javaInt(), 'typeStart');
   let typeStringLengthVar         = j_variable(javaInt(), 'typeStringLength');
   let typeEndVar                  = j_variable(javaInt(), 'typeEnd');
   let typeVar                     = j_variable(javaString(), 'type');

   let mappingStartVar             = j_variable(javaInt(), 'mappingStart');
   let mappingStringLengthVar      = j_variable(javaInt(), 'mappingStringLength');
   let mappingEndVar               = j_variable(javaInt(), 'mappingEnd');
   let mappingVar                  = j_variable(javaString(), 'mapping');

   let allSetsStartVar             = j_variable(javaInt(), 'allSetsStart');
   let allSetsStringLengthVar      = j_variable(javaInt(), 'allSetsStringLength');
   let allSetsEndVar               = j_variable(javaInt(), 'allSetsEnd');
   let allSetsVar                  = j_variable(javaString(), 'allSets');

   let setStartVar                 = j_variable(javaInt(), 'setStart');
   let setStringLengthVar          = j_variable(javaInt(), 'setStringLength');
   let setEndVar                   = j_variable(javaInt(), 'setEnd');
   let setVar                      = j_variable(javaString(), 'set');

   let dbConnStartVar              = j_variable(javaInt(), 'dbConnStart');
   let dbConnStringLengthVar       = j_variable(javaInt(), 'dbConnStringLength');
   let dbConnEndVar                = j_variable(javaInt(), 'dbConnEnd');
   let dbConnVar                   = j_variable(javaString(), 'dbConn');

   let pkMapStartVar               = j_variable(javaInt(), 'pkMapStart');
   let pkMapStringLengthVar        = j_variable(javaInt(), 'pkMapStringLength');
   let pkMapEndVar                 = j_variable(javaInt(), 'pkMapEnd');
   let pkMapStringVar              = j_variable(javaString(), 'pkMapString');

   let pkMapVar                    = j_variable(javaMap(javaString(), javaObject()), 'pkMap');



   let parseEncodedObjectReferenceMethod = javaMethod(['private'], javaString(), 'parseEncodedObjectReference', [$objectReferenceParam],
                                                      [
                                                         $decodedObjectReferenceVar->j_declare(j_new(javaString(), $base64Class->j_invoke('getDecoder', [], javaObject())->j_invoke('decode', $objectReferenceParam, javaString()))),
                                                         $objectReferenceVersionVar->j_declare(javaInt()->toBoxed()->j_invoke('parseInt', $decodedObjectReferenceVar->j_invoke('substring', [j_int(0), j_int(3)], javaString()), javaInt())),
                                                         j_if($objectReferenceVersionVar->j_eq(j_int(1)),
                                                              j_return($jThis->j_invoke('parseObjectReferenceV1', $decodedObjectReferenceVar->j_invoke('substring', j_int(4), javaString()), javaString())),
                                                              j_throw(j_new(javaRuntimeException(), j_string('We currently support parsing objectReference v1 only!! Found version - ')->j_plus($objectReferenceVersionVar)))  
                                                         )
                                                      ]);

   let parseObjectReferenceV1Method = javaMethod(['private'], javaString(), 'parseObjectReferenceV1', [$objectReferenceParam],
                                                      [
                                                         $lengthStringSizeVar->j_declare(javaInt()->toBoxed()->j_invoke('parseInt', $objectReferenceParam->j_invoke('substring', [j_int(0), j_int(3)], javaString()), javaInt())),
                                                         
                                                         $typeStartVar->j_declare(j_int(4)->j_plus($lengthStringSizeVar)->j_plus(j_int(1))),
                                                         $typeStringLengthVar->j_declare(javaInt()->toBoxed()->j_invoke('parseInt', $objectReferenceParam->j_invoke('substring', [j_int(4), j_int(4)->j_plus($lengthStringSizeVar)], javaString()), javaInt())),
                                                         $typeEndVar->j_declare($typeStartVar->j_plus($typeStringLengthVar)),
                                                         $typeVar->j_declare($objectReferenceParam->j_invoke('substring', [$typeStartVar, $typeEndVar], javaString())),
                                                         j_if(j_not(j_string('relational')->j_invoke('equalsIgnoreCase', $typeVar, javaBoolean())), j_throw(j_new(javaRuntimeException(), j_string('Expected storType to be relational. Found - ')->j_plus($typeVar)))),
                                                         
                                                         $relationalObjectReferenceVar->j_declare($objectReferenceParam->j_invoke('substring', [$typeEndVar->j_plus(j_int(1))], javaString())),
                                                         
                                                         $mappingStartVar->j_declare($lengthStringSizeVar->j_plus(j_int(1))),
                                                         $mappingStringLengthVar->j_declare(javaInt()->toBoxed()->j_invoke('parseInt', $relationalObjectReferenceVar->j_invoke('substring', [j_int(0), $mappingStartVar->j_minus(j_int(1))], javaString()), javaInt())),
                                                         $mappingEndVar->j_declare($mappingStartVar->j_plus($mappingStringLengthVar)),
                                                         $mappingVar->j_declare($relationalObjectReferenceVar->j_invoke('substring', [$mappingStartVar, $mappingEndVar], javaString())),
                                                         
                                                         $allSetsStartVar->j_declare($mappingEndVar->j_plus(j_int(1))->j_plus($lengthStringSizeVar)->j_plus(j_int(1))),
                                                         $allSetsStringLengthVar->j_declare(javaInt()->toBoxed()->j_invoke('parseInt', $relationalObjectReferenceVar->j_invoke('substring', [$mappingEndVar->j_plus(j_int(1)), $allSetsStartVar->j_minus(j_int(1))], javaString()), javaInt())),
                                                         $allSetsEndVar->j_declare($allSetsStartVar->j_plus($allSetsStringLengthVar)),
                                                         $allSetsVar->j_declare($relationalObjectReferenceVar->j_invoke('substring', [$allSetsStartVar, $allSetsEndVar], javaString())),
                                                         
                                                         $setStartVar->j_declare($allSetsEndVar->j_plus(j_int(1))->j_plus($lengthStringSizeVar)->j_plus(j_int(1))),
                                                         $setStringLengthVar->j_declare(javaInt()->toBoxed()->j_invoke('parseInt', $relationalObjectReferenceVar->j_invoke('substring', [$allSetsEndVar->j_plus(j_int(1)), $setStartVar->j_minus(j_int(1))], javaString()), javaInt())),
                                                         $setEndVar->j_declare($setStartVar->j_plus($setStringLengthVar)),
                                                         $setVar->j_declare($relationalObjectReferenceVar->j_invoke('substring', [$setStartVar, $setEndVar], javaString())),
                                                         
                                                         $dbConnStartVar->j_declare($setEndVar->j_plus(j_int(1))->j_plus($lengthStringSizeVar)->j_plus(j_int(1))),
                                                         $dbConnStringLengthVar->j_declare(javaInt()->toBoxed()->j_invoke('parseInt', $relationalObjectReferenceVar->j_invoke('substring', [$setEndVar->j_plus(j_int(1)), $dbConnStartVar->j_minus(j_int(1))], javaString()), javaInt())),
                                                         $dbConnEndVar->j_declare($dbConnStartVar->j_plus($dbConnStringLengthVar)),
                                                         $dbConnVar->j_declare($relationalObjectReferenceVar->j_invoke('substring', [$dbConnStartVar, $dbConnEndVar], javaString())),
                                                         
                                                         $pkMapStartVar->j_declare($dbConnEndVar->j_plus(j_int(1))->j_plus($lengthStringSizeVar)->j_plus(j_int(1))),
                                                         $pkMapStringLengthVar->j_declare(javaInt()->toBoxed()->j_invoke('parseInt', $relationalObjectReferenceVar->j_invoke('substring', [$dbConnEndVar->j_plus(j_int(1)), $pkMapStartVar->j_minus(j_int(1))], javaString()), javaInt())),
                                                         $pkMapEndVar->j_declare($pkMapStartVar->j_plus($pkMapStringLengthVar)),
                                                         $pkMapStringVar->j_declare($relationalObjectReferenceVar->j_invoke('substring', [$pkMapStartVar, $pkMapEndVar], javaString()))
                                                      ]->concatenate(
                                                      [
                                                         $pkMapVar->j_declare($jThis->j_field($objectMapperField)->j_invoke('readValue',
                                                                                                                           [
                                                                                                                              $pkMapStringVar,
                                                                                                                              j_field(javaMap(javaString(), javaObject())->cast(@meta::external::language::java::metamodel::ParameterizedType).rawType, 'class', javaObject())
                                                                                                                           ],
                                                                                                                           javaMap(javaObject(), javaObject())
                                                                                                                           )->j_cast(javaMap(javaString(), javaObject()))),
                                                         $jThis->j_field($pkOrderField)->j_streamOf()->js_map(j_methodReference($pkMapVar, 'get', javaFunctionType(javaString(), javaObject())))->js_map(j_methodReference(javaObject(), 'toString'))->js_joining(j_string(','))->j_return()
                                                      ]->j_exTryCatch()));
 
   let parseUnEncodedObjectReferenceMethod = javaMethod(['private'], javaString(), 'parseUnEncodedObjectReference', [$objectReferenceParam],
                                                      [
                                                         $pkMapVar->j_declare($jThis->j_field($objectMapperField)->j_invoke('readValue',
                                                                                                                           [
                                                                                                                              $objectReferenceParam,
                                                                                                                              j_field(javaMap(javaString(), javaObject())->cast(@meta::external::language::java::metamodel::ParameterizedType).rawType, 'class', javaObject())
                                                                                                                           ],
                                                                                                                           javaMap(javaString(), javaObject())
                                                                                                                           )->j_invoke('get', j_string('pkMap'), javaObject())->j_cast(javaMap(javaString(), javaObject()))),
                                                         $jThis->j_field($pkOrderField)->j_streamOf()->js_map(j_methodReference($pkMapVar, 'get', javaFunctionType(javaString(), javaObject())))->js_map(j_methodReference(javaObject(), 'toString'))->js_joining(j_string(','))->j_return()
                                                      ]->j_exTryCatch());
   
   let parseObjectReferenceMethod = javaMethod(['public'], javaObject(), 'parseObjectReference', [$objectReferenceParam],
                                               j_try(
                                                   [
                                                      j_if($objectReferenceParam->j_invoke('startsWith', j_string('ASOR'), javaBoolean()),
                                                         j_return($jThis->j_invoke('parseEncodedObjectReference', $objectReferenceParam->j_invoke('substring', j_int(5), javaString()), javaString())),
                                                         j_return($jThis->j_invoke('parseUnEncodedObjectReference', $objectReferenceParam, javaString()))
                                                      )
                                                   ],
                                                   j_catch($ex,
                                                      [
                                                         j_throw(j_new(javaRuntimeException(), j_string('Unable to parse objectReference. Exception - ')->j_plus($ex)))                  
                                                      ]
                                                   )
                                               ))
                                    ->addAnnotation(^meta::external::language::java::metamodel::annotations::override::Override());

   $baseClass->addConstructor($constructor)
                ->addMethod($parseObjectReferenceMethod)
                ->addMethod($parseEncodedObjectReferenceMethod)
                ->addMethod($parseObjectReferenceV1Method)
                ->addMethod($parseUnEncodedObjectReferenceMethod);
}
