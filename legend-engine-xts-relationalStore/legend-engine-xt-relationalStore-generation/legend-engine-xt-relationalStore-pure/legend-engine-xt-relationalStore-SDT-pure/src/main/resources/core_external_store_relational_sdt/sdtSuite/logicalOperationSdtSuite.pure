// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::relational::sqlDialectTranslation::utils::*;
import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sdt::framework::*;
import meta::external::query::sql::metamodel::extension::*;

// SELECT 101 < 102 AND 104 > 103 AS result
function <<SDT.test>> meta::external::store::relational::sdt::suite::logicalOperation::testAndTrue(): SqlDialectTest[1]
{
  testConfigForSimpleExpression(
    ^LogicalBinaryExpression(
      left = ^ComparisonExpression(left = literal(101), right = literal(102), operator = ComparisonOperator.LESS_THAN), 
      right = ^ComparisonExpression(left = literal(104), right = literal(103), operator = ComparisonOperator.GREATER_THAN), 
      type = LogicalBinaryType.AND
      ),
    true,
    'LogicalOperation - AndTrue'
  )
}

// SELECT 101 < 102 AND 103 > 104 AS result
function <<SDT.test>> meta::external::store::relational::sdt::suite::logicalOperation::testAndFalse(): SqlDialectTest[1]
{
  testConfigForSimpleExpression(
    ^LogicalBinaryExpression(
      left = ^ComparisonExpression(left = literal(101), right = literal(102), operator = ComparisonOperator.LESS_THAN), 
      right = ^ComparisonExpression(left = literal(103), right = literal(104), operator = ComparisonOperator.GREATER_THAN), 
      type = LogicalBinaryType.AND
      ),
    false,
    'LogicalOperation - AndFalse'
  )
}

// SELECT 101 < 102 OR 103 > 104 AS result
function <<SDT.test>> meta::external::store::relational::sdt::suite::logicalOperation::testOrTrue(): SqlDialectTest[1]
{
  testConfigForSimpleExpression(
    ^LogicalBinaryExpression(
      left = ^ComparisonExpression(left = literal(101), right = literal(102), operator = ComparisonOperator.LESS_THAN), 
      right = ^ComparisonExpression(left = literal(103), right = literal(104), operator = ComparisonOperator.GREATER_THAN), 
      type = LogicalBinaryType.OR
      ),
    true,
    'LogicalOperation - OrTrue'
  )
}

// SELECT 102 < 101 OR 103 > 104 AS result
function <<SDT.test>> meta::external::store::relational::sdt::suite::logicalOperation::testOrFalse(): SqlDialectTest[1]
{
  testConfigForSimpleExpression(
    ^LogicalBinaryExpression(
      left = ^ComparisonExpression(left = literal(102), right = literal(101), operator = ComparisonOperator.LESS_THAN), 
      right = ^ComparisonExpression(left = literal(103), right = literal(104), operator = ComparisonOperator.GREATER_THAN), 
      type = LogicalBinaryType.OR
      ),
    false,
    'LogicalOperation - OrFalse'
  )
}

// SELECT 101 < 102 OR (101 < 102 AND 103 > 104) AS result
function <<SDT.test>> meta::external::store::relational::sdt::suite::logicalOperation::testLogicalComposite(): SqlDialectTest[1]
{
  testConfigForSimpleExpression(
    ^LogicalBinaryExpression(
      left = ^ComparisonExpression(left = literal(101), right = literal(102), operator = ComparisonOperator.LESS_THAN), 
      right = ^LogicalBinaryExpression(
        left = ^ComparisonExpression(left = literal(101), right = literal(102), operator = ComparisonOperator.LESS_THAN), 
        right = ^ComparisonExpression(left = literal(103), right = literal(104), operator = ComparisonOperator.GREATER_THAN), 
        type = LogicalBinaryType.AND
      ), 
      type = LogicalBinaryType.OR
      ),
    true,
    'LogicalOperation - LogicalComposite'
  )
}