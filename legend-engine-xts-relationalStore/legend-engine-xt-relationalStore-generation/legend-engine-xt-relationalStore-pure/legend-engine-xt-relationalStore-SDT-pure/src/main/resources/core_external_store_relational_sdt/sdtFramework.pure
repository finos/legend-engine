// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::relational::sdt::suite::functions::*;
import meta::external::store::relational::sqlDialectTranslation::tests::utils::*;
import meta::relational::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;
import meta::external::query::sql::metamodel::extension::tests::*;
import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sdt::framework::*;
import meta::pure::extension::*;
import meta::pure::functions::meta::*;
import meta::json::*;

// SDT - SQL Dialect Test

native function meta::external::store::relational::sdt::framework::runSqlDialectTestQuery(dbType: String[1], testQuery: String[1], setupSqls: String[*], teardownSqls: String[*]): meta::relational::metamodel::execute::ResultSet[1];

function meta::external::store::relational::sdt::framework::runSqlDialectTest(sdt: SqlDialectTest[1], dbType: String[1], extensions: Extension[*], debug: DebugContext[1]): Boolean[1]
{
  let transformBooleanToInt =  $dbType->fetchSqlDialectForDbType($extensions).isBooleanAliasForTinyInt->toOne();
  let sdtTestCaseSqls = $sdt->generateSdtTestCaseSqls($dbType, $extensions);
  $sdtTestCaseSqls.setupSqls->concatenate($sdtTestCaseSqls.testQuery)->concatenate($sdtTestCaseSqls.teardownSqls)->map(s | print(if(!$debug.debug, |'', | $debug.space + 'Running statement: ' + $s + '\n')));
  let result = $dbType->runSqlDialectTestQuery($sdtTestCaseSqls.testQuery, $sdtTestCaseSqls.setupSqls, $sdtTestCaseSqls.teardownSqls)->testResultFromResultSet();
  $sdt->assertSdtTestPasses($result, $transformBooleanToInt);
}

Profile meta::external::store::relational::sdt::framework::SDT
{
  stereotypes : [test];
}

Class meta::external::store::relational::sdt::framework::SqlDialectTest
{
  identifier: String[1];
  setupStatements: Statement[*];
  teardownStatements: Statement[*];
  testQuery: Query[1];
  expectedResult: TestResult[1];
}

Class meta::external::store::relational::sdt::framework::TestResult
{
  <<equality.Key>> columnNames: String[*];
  <<equality.Key>> rows: TestResultRow[*];
}

Class meta::external::store::relational::sdt::framework::TestResultRow
{
  <<equality.Key>> values: Any[*];
}

function meta::external::store::relational::sdt::framework::collectSDTTestsInPackage(pkg: String[1]): ConcreteFunctionDefinition<{->SqlDialectTest[*]}>[*]
{
  getAllPackageElements($pkg->pathToElement()->cast(@Package), true)
    ->filter(x | $x->hasStereotype('test', SDT))
    ->map(x | $x->match([
      f: ConcreteFunctionDefinition<{->SqlDialectTest[*]}>[1] | $f,
      a: Any[*] | $x->elementToPath() + ' element with stereotype SDT.test not a concrete function definition returning SqlDialectTest[1]'; [];
    ]));
}

function meta::external::store::relational::sdt::framework::getSqlDialectTests(func: ConcreteFunctionDefinition<{->SqlDialectTest[*]}>[1]): SqlDialectTest[*]
{
  $func->eval()
}

Class <<access.private>>  meta::external::store::relational::sdt::framework::SdtTestCaseSqls
{
  setupSqls: String[*];
  testQuery: String[1];
  teardownSqls: String[*];
}

function <<access.private>> meta::external::store::relational::sdt::framework::generateSdtTestCaseSqls(sdt: SqlDialectTest[1], dbType: String[1], extensions: Extension[*]): SdtTestCaseSqls[1]
{
  let cfg = sdtTestSqlDialectTranslationConfig($dbType);

  ^SdtTestCaseSqls
  (
    setupSqls = $dbType->fetchSqlDialectForDbType($extensions).initSqlStatementsForTests->concatenate($sdt.setupStatements->map(s | $s->generateSqlDialect($cfg, $extensions))),
    testQuery = $sdt.testQuery->generateSqlDialect($cfg, $extensions),
    teardownSqls = $sdt.teardownStatements->map(s | $s->generateSqlDialect($cfg, $extensions))
  );
}

function <<access.private>> meta::external::store::relational::sdt::framework::testResultFromResultSet(rs: meta::relational::metamodel::execute::ResultSet[1]): TestResult[1]
{
  ^TestResult
  (
    columnNames = $rs.columnNames,
    rows = $rs.rows->map(r | ^TestResultRow(values = $r.values))
  )
}

function <<access.private>> meta::external::store::relational::sdt::framework::assertSdtTestPasses(sdt: SqlDialectTest[1], actualResult: TestResult[1], transformBooleanToInt: Boolean[1]): Boolean[1]
{
  let expected = if($transformBooleanToInt, | $sdt.expectedResult->transformResult()->transformExpectedBoolean(), | $sdt.expectedResult->transformResult());
  let actual = $actualResult->transformResult();
  assertEquals($expected, $actual, | 'Expected - ' + $expected->toJSON(100) + '\n' + 'Actual - ' + $actual->toJSON(100));
}

function <<access.private>> meta::external::store::relational::sdt::framework::transformResult(res: TestResult[1]): TestResult[1]
{
  ^$res(rows = $res.rows->map(r | ^$r(values = $r.values->map(v | $v->match([f: Float[1] | round($f, 8), a:Any[*] | $a])))),columnNames=$res.columnNames->map(c|$c->toLower()))
}

function <<access.private>> meta::external::store::relational::sdt::framework::transformExpectedBoolean(res: TestResult[1]): TestResult[1]
{
  ^$res(rows = $res.rows->map(r | ^$r(values = $r.values->map(v | $v->match([b: Boolean[1] | if($b,| 1, | 0), a:Any[*] | $a])))),columnNames=$res.columnNames)
}

function meta::external::store::relational::sdt::framework::testConfigForSimpleExpression(expression: String[1], expected: Any[1], identifier: String[1]): SqlDialectTest[1]
{
  let parsedExpression = meta::external::store::relational::postgresSql::parser::parseSqlStatement('SELECT ' + $expression)->cast(@Query).queryBody->cast(@QuerySpecification).select.selectItems->at(0)->cast(@SingleColumn).expression;
  testConfigForSimpleExpression($parsedExpression, $expected, $identifier);
}

function meta::external::store::relational::sdt::framework::testQueryForSimpleExpression(expression: meta::external::query::sql::metamodel::Expression[1]): Query[1]
{
  ^Query(
    queryBody = ^QuerySpecification(
      select = ^Select(
        distinct = false,
        selectItems = ^SingleColumn(
          expression = $expression,
          alias = 'result'
        )
      )
    )
  )
}

function meta::external::store::relational::sdt::framework::testConfigForSimpleExpression(expression: meta::external::query::sql::metamodel::Expression[1], expected: Any[1], identifier: String[1]): SqlDialectTest[1]
{
  ^SqlDialectTest(
    identifier = $identifier,
    testQuery = $expression->testQueryForSimpleExpression(),
    expectedResult = ^TestResult(columnNames = ['result'], rows = [^TestResultRow(values = $expected)])
  );
}

function meta::external::store::relational::sdt::framework::testConfigForSqlFunctionTest(test: SqlFunctionTest[1], identifier: String[1]): SqlDialectTest[1]
{
  let query = $test.query->match(
    [
      q: Query[1]| $q,
      f: meta::external::query::sql::metamodel::Expression[1]| $f->testQueryForSimpleExpression()
    ]
  );

  let expectedResult = $test.result->match(
    [
      t: TestExpectedResult[1]| ^TestResult(columnNames = $t.columns, rows = $t.data->map(d| ^TestResultRow(values = $d.values))),
      a: Any[*]| ^TestResult(columnNames = ['result'], rows = [^TestResultRow(values = $a)])
    ]
  );

  ^SqlDialectTest(
    identifier = $identifier,
    setupStatements = $test.setupData->map(d| [
                                                ^DropTestTable(tableName = $d.tableName, isTempTable = $d.useTempTable),
                                                ^CreateTestTable(tableName = $d.tableName, columns = $d.columns->map(c| pair($c.first, ^ColumnType(name = $c.second))), isTempTable = $d.useTempTable),
                                                ^InsertIntoTestTable(tableName = $d.tableName, columns = $d.columns.first, values = $d.data)
                                              ]
                                          ),
    teardownStatements = $test.setupData->map(d| ^DropTestTable(tableName = $d.tableName, isTempTable = $d.useTempTable)),
    testQuery = $query,
    expectedResult = $expectedResult
  );
}

function <<access.private>> meta::external::store::relational::sdt::framework::sdtTestSqlDialectTranslationConfig(dbType: String[1]): SqlDialectTranslationConfig[1]
{
  meta::external::store::relational::sdt::framework::sdtTestSqlDialectTranslationConfig($dbType, false);
}

function <<access.private>> meta::external::store::relational::sdt::framework::sdtTestSqlDialectTranslationConfig(dbType: String[1], quoteIdentifiers: Boolean[1]): SqlDialectTranslationConfig[1]
{
  ^SqlDialectTranslationConfig
  (
    dbConfig = ^DbConfig(dbType = $dbType, quoteIdentifiers = $quoteIdentifiers),
    formatConfig = ^FormatConfig(pretty = false, upperCaseKeywords = true),
    functionRegistry = meta::external::store::relational::sqlDialectTranslation::functionRegistry::sqlFunctionRegistry()
  )
}

function meta::external::store::relational::sdt::framework::testSuiteBasePackage(): String[1]
{
  'meta::external::store::relational::sdt::suite';
}

function meta::external::store::relational::sdt::framework::runSdtTestsInIDE(extensions: Extension[*]): Any[*]
{
  runSdtTestsInIDE($extensions, noDebug());
}

function meta::external::store::relational::sdt::framework::runSdtTestsInIDE(extensions: Extension[*], debug: DebugContext[1]): Any[*]
{
  runSdtTestsInIDE(testSuiteBasePackage(), $extensions, $debug);
}

function meta::external::store::relational::sdt::framework::runSdtTestsInIDE(package: String[1], extensions: Extension[*], debug: DebugContext[1]): Any[*]
{
  let tests = collectSDTTestsInPackage($package)->map(x| $x->eval());
  runSdtTestsInIDE($tests, $extensions, $debug);
}

function meta::external::store::relational::sdt::framework::runSdtTestsInIDE(tests: SqlDialectTest[*], extensions: Extension[*], debug: DebugContext[1]): Any[*]
{
  let dialectExtensions = $extensions.moduleExtensions->filter(m | $m.module == sqlDialectTranslationModuleExtensionName())->cast(@SqlDialectTranslationModuleExtension);
  $dialectExtensions->map({ext|
    $ext.extraSqlDialects->map({dialect|
      $tests->map({sdtConfigs |
        let len = $sdtConfigs->size();
        $sdtConfigs->size()->range()->map({i |
          let sdtTest = $sdtConfigs->at($i);
          let dbType = $dialect.dbType;
          let excluded = $dialect.expectedSqlDialectTestErrors->get($sdtTest.identifier)->isNotEmpty();
          if ($excluded,
            | print(if(!$debug.debug, |'', | $debug.space + '[' + $dbType + '] Excluding SDT Test - ' + $sdtTest.identifier + '\n')),
            | print(if(!$debug.debug, |'', | $debug.space + '[' + $dbType + '] Running SDT Test - ' + $sdtTest.identifier + '\n'));
              $sdtConfigs->at($i)->runSqlDialectTest($dbType, $extensions, $debug->indent());
          );
        });
      });
    });
  });
}

function meta::external::store::relational::sdt::framework::runFunctionSdtTestsInIDE(functions: Class<SqlFunction>[*], extensions: Extension[*], debug: DebugContext[1]): Any[*]
{
  let registry = sqlFunctionRegistry();
  let tests = $functions->map(f | functionSdtTests($registry->get($f)->toOne()));
  runSdtTestsInIDE($tests, $extensions, $debug);
}

function meta::external::store::relational::sdt::framework::runPostgresSdtTestsInIDE(): Any[*]
{
  runPostgresSdtTestsInIDE(testSuiteBasePackage(), noDebug())
}

function meta::external::store::relational::sdt::framework::runPostgresSdtTestsInIDE(package: String[1]): Any[*]
{
  runPostgresSdtTestsInIDE($package, noDebug())
}

function meta::external::store::relational::sdt::framework::runPostgresSdtTestsInIDE(package:String[1], debug: DebugContext[1]): Any[*]
{
  runSdtTestsInIDE(
    $package,
    meta::external::store::relational::sqlDialectTranslation::postgres::postgresSqlDialectExtension(),
    $debug
  );
}
