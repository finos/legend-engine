// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sdt::framework::*;
import meta::pure::extension::*;
import meta::pure::functions::meta::*;
import meta::json::*;

// SDT - SQL Dialect Test

native function meta::external::store::relational::sdt::framework::runSqlDialectTestQuery(dbType: String[1], testQuery: String[1], setupSqls: String[*], teardownSqls: String[*]): meta::relational::metamodel::execute::ResultSet[1];

function meta::external::store::relational::sdt::framework::runSqlDialectTest(sdt: SqlDialectTest[1], dbType: String[1], extensions: Extension[*], debug: DebugContext[1]): Boolean[1]
{
  let testQuery = $sdt->generateTestSqlForSdtTestCase($dbType, $extensions);
  let setupSqls = $sdt->generateSetupSqlsForSdtTestCase($dbType, $extensions);
  let teardownSqls = $sdt->generateTeardownSqlsForSdtTestCase($dbType, $extensions);
  $setupSqls->concatenate($testQuery)->concatenate($teardownSqls)->map(s | print(if(!$debug.debug, |'', | $debug.space + 'Running query: ' + $s + '\n')));
  let result = $dbType->runSqlDialectTestQuery($testQuery, $setupSqls, $teardownSqls)->testResultFromResultSet();
  $sdt->assertSdtTestPasses($result);
}

Profile meta::external::store::relational::sdt::framework::SDT
{
  stereotypes : [test];
}

Class meta::external::store::relational::sdt::framework::SqlDialectTest
{
  identifier: String[1];
  setupStatements: Statement[*];
  teardownStatements: Statement[*];
  testQuery: Query[1];
  expectedResult: TestResult[1];
}

Class meta::external::store::relational::sdt::framework::TestResult
{
  <<equality.Key>> columnNames: String[*];
  <<equality.Key>> rows: TestResultRow[*];
}

Class meta::external::store::relational::sdt::framework::TestResultRow
{
  <<equality.Key>> values: Any[*];
}

function meta::external::store::relational::sdt::framework::collectSDTTestsInPackage(pkg: String[1]): ConcreteFunctionDefinition<{->SqlDialectTest[*]}>[*]
{
  getAllPackageElements($pkg->pathToElement()->cast(@Package), true)
    ->filter(x | $x->hasStereotype('test', SDT))
    ->map(x | $x->match([
      f: ConcreteFunctionDefinition<{->SqlDialectTest[*]}>[1] | $f,
      a: Any[*] | $x->elementToPath() + ' element with stereotype SDT.test not a concrete function definition returning SqlDialectTest[1]'; [];
    ]));
}

function meta::external::store::relational::sdt::framework::getSqlDialectTests(func: ConcreteFunctionDefinition<{->SqlDialectTest[*]}>[1]): SqlDialectTest[*]
{
  $func->eval()
}

function <<access.private>> meta::external::store::relational::sdt::framework::generateSetupSqlsForSdtTestCase(sdt: SqlDialectTest[1], dbType: String[1], extensions: Extension[*]): String[*]
{
  $sdt.setupStatements->map(s | $s->generateSqlDialectForStatement(sdtTestSqlDialectTranslationConfig($dbType), $extensions))
}

function <<access.private>> meta::external::store::relational::sdt::framework::generateTestSqlForSdtTestCase(sdt: SqlDialectTest[1], dbType: String[1], extensions: Extension[*]): String[1]
{
  $sdt.testQuery->generateSqlDialectForStatement(sdtTestSqlDialectTranslationConfig($dbType), $extensions);
}

function <<access.private>> meta::external::store::relational::sdt::framework::generateTeardownSqlsForSdtTestCase(sdt: SqlDialectTest[1], dbType: String[1], extensions: Extension[*]): String[*]
{
  $sdt.teardownStatements->map(s | $s->generateSqlDialectForStatement(sdtTestSqlDialectTranslationConfig($dbType), $extensions))
}

function <<access.private>> meta::external::store::relational::sdt::framework::testResultFromResultSet(rs: meta::relational::metamodel::execute::ResultSet[1]): TestResult[1]
{
  ^TestResult
  (
    columnNames = $rs.columnNames,
    rows = $rs.rows->map(r | ^TestResultRow(values = $r.values))
  )
}

function <<access.private>> meta::external::store::relational::sdt::framework::assertSdtTestPasses(sdt: SqlDialectTest[1], actualResult: TestResult[1]): Boolean[1]
{
  let expected = $sdt.expectedResult->roundFloats();
  let actual = $actualResult->roundFloats();
  assertEquals($expected, $actual, | 'Expected - ' + $expected->toJSON(100) + '\n' + 'Actual - ' + $actual->toJSON(100));
}

function <<access.private>> meta::external::store::relational::sdt::framework::roundFloats(res: TestResult[1]): TestResult[1]
{
  ^$res(rows = $res.rows->map(r | ^$r(values = $r.values->map(v | $v->match([f: Float[1] | round($f, 8), a:Any[*] | $a])))))
}

function meta::external::store::relational::sdt::framework::testConfigForSimpleExpression(expression: String[1], expected: Any[1], identifier: String[1]): SqlDialectTest[1]
{
  let parsedExpression = meta::external::store::relational::postgresSql::parser::parseSqlStatement('SELECT ' + $expression)->cast(@Query).queryBody->cast(@QuerySpecification).select.selectItems->at(0)->cast(@SingleColumn).expression;
  testConfigForSimpleExpression($parsedExpression, $expected, $identifier);
}

function meta::external::store::relational::sdt::framework::testConfigForSimpleExpression(expression: meta::external::query::sql::metamodel::Expression[1], expected: Any[1], identifier: String[1]): SqlDialectTest[1]
{
  ^SqlDialectTest(
    identifier = $identifier,
    testQuery = ^Query(
      queryBody = ^QuerySpecification(
        select = ^Select(
          distinct = false,
          selectItems = ^SingleColumn(
            expression = $expression,
            alias = 'result'
          )
        )
      )
    ),
    expectedResult = ^TestResult(
      columnNames = ['result'],
      rows = [^TestResultRow(values = $expected)]
    )
  )
}

function <<access.private>> meta::external::store::relational::sdt::framework::sdtTestSqlDialectTranslationConfig(dbType: String[1]): SqlDialectTranslationConfig[1]
{
  meta::external::store::relational::sdt::framework::sdtTestSqlDialectTranslationConfig($dbType, false);
}

function <<access.private>> meta::external::store::relational::sdt::framework::sdtTestSqlDialectTranslationConfig(dbType: String[1], quoteIdentifiers: Boolean[1]): SqlDialectTranslationConfig[1]
{
  ^SqlDialectTranslationConfig
  (
    dbConfig = ^DbConfig(dbType = $dbType, quoteIdentifiers = $quoteIdentifiers),
    formatConfig = ^FormatConfig(pretty = false, upperCaseKeywords = true),
    functionRegistry = meta::external::store::relational::sqlDialectTranslation::functionRegistry::sqlFunctionRegistry()
  )
}

function meta::external::store::relational::sdt::framework::runSdtTestsInIDE(package: String[1], dbType: String[1], excludes: Map<String, String>[1], extensions: Extension[*], debug: DebugContext[1]): Any[*]
{
  meta::external::store::relational::sdt::framework::collectSDTTestsInPackage($package)
    ->map({x |
      let sdtConfigs = $x->eval();
      let len = $sdtConfigs->size();
      $sdtConfigs->size()->range()->map({i |
        let sdtTest = $sdtConfigs->at($i);
        let excluded = $excludes->get($sdtTest.identifier)->isNotEmpty();
        if ($excluded,
            | print(if(!$debug.debug, |'', | $debug.space + '[' + $dbType + '] Exluding SDT Test - ' + $sdtTest.identifier + '\n')),
            | print(if(!$debug.debug, |'', | $debug.space + '[' + $dbType + '] Running SDT Test - ' + $sdtTest.identifier + '\n'));
              $sdtConfigs->at($i)->runSqlDialectTest($dbType, $extensions, $debug->indent());
        );
      });
    });
}

function meta::external::store::relational::sdt::framework::runPostgresSdtTestsInIDE(debug: DebugContext[1]): Any[*]
{
  meta::external::store::relational::sdt::framework::runSdtTestsInIDE(
    'meta::external::store::relational::sdt::suite',
    'Postgres',
    meta::external::store::relational::sqlDialectTranslation::postgres::postgresFunctionTestsExpectedErrors(),
    meta::external::store::relational::sqlDialectTranslation::postgres::postgresSqlDialectExtension(),
    $debug
  );
}
