// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlPlanning::*;
import meta::pure::extension::*;

Class meta::external::store::relational::sqlPlanning::SqlPlanningModuleExtension extends ModuleExtension
[
  $this.module == 'SqlPlanning'
]
{
  sqlPlanning_ruleBasedTransformation_extraRuleBasedSqlTransformers : meta::external::store::relational::sqlPlanning::ruleBasedTransformation::RuleBasedSqlTransformer[*];
}

Class meta::external::store::relational::sqlPlanning::SqlPlanningConfig
{
  dbType : String[1];
}

function meta::external::store::relational::sqlPlanning::planSqlStatement(statement: Statement[1], config: SqlPlanningConfig[1], extensions: Extension[*]): Statement[1]
{
  $statement->match([
    q: Query[1]     | $q->planSqlQuery($config, $extensions),
    s: Statement[1] | fail('Planning of sql statement of type - ' + $statement->type()->elementToPath() + ' not supported'); $statement;
  ])
}

function <<access.private>> meta::external::store::relational::sqlPlanning::planSqlQuery(query: Query[1], config: SqlPlanningConfig[1], extensions: Extension[*]): Query[1]
{
  fail('Not implemented yet!');
  $query;
}