// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlPlanning::*;
import meta::external::store::relational::sqlPlanning::ruleBasedTransformation::*;
import meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::*;
import meta::pure::extension::*;

Class meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::JoinFilterPushDownRule extends RuleBasedSqlTransformer
[
  $this.name == 'JoinFilterPushDown'
]
{
  transformSqlQuery(query: Query[1], config: SqlPlanningConfig[1], debug: DebugContext[1], extensions: Extension[*])
  {
    $query->pushFiltersIntoJoins()
  }: TransformedQuery[1];
}

function meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::joinFilterPushDownRule(): JoinFilterPushDownRule[1]
{
  ^JoinFilterPushDownRule
  (
    name = 'JoinFilterPushDown',
    enabledByDefault = true,
    databaseSupport = ^AllDatabaseSupport()
  )
}

// ---------------------------------------------------------------------------------------------------------------------------

###Pure 

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlPlanning::ruleBasedTransformation::*;
import meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::*;
import meta::external::store::relational::sqlPlanning::utils::*;

function <<access.private>> meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::pushFiltersIntoJoins(query: Query[1]): TransformedQuery[1]
{
  let transformed = $query->transformNodeRecursivelyWithChangeTracking(pushFiltersIntoJoinsTransformFunction());
  ^TransformedQuery
  (
    hasChanged = $transformed.hasChanged,
    query = $transformed.result->cast(@Query)
  );
}

function <<access.private>> meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::pushFiltersIntoJoinsTransformFunction(): Function<{Node[1]->NodeTransformationWithChangeTracking[1]}>[1]
{
  {node: Node[1] |
    $node->match([
      {qs: QuerySpecification[1] |
        if ($qs->isFromSupportedForJoinFilterPushDown(),
            | let joins = $qs->extractOrderedJoins();
              let filterPairs = $qs.where->map(e | $e->identifySingleColumnFilterGroups());
              let result = $joins->fold({join, agg | $join->tryAddFiltersToJoin($agg)}, ^JoinFilterPushDownIntermediateResult(filterPairs = $filterPairs));
              let changed = $result.joins.hasChanged->or();
              if ($changed,
                  | let newFrom = $result.joins.result->tail()->cast(@Join)->fold({j, agg | ^$j(left = $agg)}, $result.joins.result->at(0)->cast(@Join));
                    changed(^$qs(from = $newFrom));,
                  | unchanged($qs)
              );,
            | unchanged($qs)
        )
      },
      {n: Node[1] | unchanged($n)}
    ])
  }
}

Class <<access.private>> meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::JoinFilterPushDownIntermediateResult
{
  joins: NodeTransformationWithChangeTracking[*];
  filterPairs: Pair<QualifiedNameReference, meta::external::query::sql::metamodel::Expression>[*];
}

function <<access.private>> meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::tryAddFiltersToJoin(join: Join[1], current: JoinFilterPushDownIntermediateResult[1]): JoinFilterPushDownIntermediateResult[1]
{
  let joinCriteria = $join.criteria->toOne()->cast(@JoinOn);
  let joinExpr = $joinCriteria.expression;
  let targetAlias = $join.right->cast(@AliasedRelation).alias;
  let inScopeFilterPairs = $current.filterPairs->filter(fp | $fp.first.name.parts->size() == 2)->filter(fp | $fp.first.name.parts->at(0) != $targetAlias); // Filter pairs for not target alias columns
  let updatedExprWithNewFilterPairs = $joinExpr->tryAddFiltersToJoinExpression($inScopeFilterPairs);
  if ($updatedExprWithNewFilterPairs.second.values->isEmpty(),
      | // No update happened
        ^$current(joins += unchanged($join)),
      | // Expression updated
        let newJoin = ^$join(criteria = ^$joinCriteria(expression = $updatedExprWithNewFilterPairs.first));
        ^$current(joins += changed($newJoin), filterPairs += $updatedExprWithNewFilterPairs.second.values);
  );
}

function <<access.private>> meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::tryAddFiltersToJoinExpression(expr: meta::external::query::sql::metamodel::Expression[1], filterPairs: Pair<QualifiedNameReference, meta::external::query::sql::metamodel::Expression>[*]): Pair<meta::external::query::sql::metamodel::Expression, List<Pair<QualifiedNameReference, meta::external::query::sql::metamodel::Expression>>>[1]
{
  $expr->tryAddFiltersToJoinExpression($expr, $filterPairs)
}

function <<access.private>> meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::tryAddFiltersToJoinExpression(expr: meta::external::query::sql::metamodel::Expression[1], fullJoinExpr: meta::external::query::sql::metamodel::Expression[1], filterPairs: Pair<QualifiedNameReference, meta::external::query::sql::metamodel::Expression>[*]): Pair<meta::external::query::sql::metamodel::Expression, List<Pair<QualifiedNameReference, meta::external::query::sql::metamodel::Expression>>>[1]
{
  if ($expr->isEqualsExpression(),
      | let equals = $expr->cast(@ComparisonExpression);
        [pair($equals.left, $equals.right), pair($equals.right, $equals.left)]
          ->filter(p | $p.first->instanceOf(QualifiedNameReference) && $p.second->instanceOf(QualifiedNameReference))
          ->fold({p, agg1 | 
            $filterPairs
              ->filter(fp | $fp.first == $p.first)
              ->fold({fp, agg2 |
                let transformFunc = {n: Node[1] | if($n == $p.first, | changed($p.second), | unchanged($n))};
                let newExpr = $fp.second->transformNodeRecursivelyWithChangeTracking($transformFunc).result->cast(@meta::external::query::sql::metamodel::Expression);
                let joinDoesNotHaveExpr = $fullJoinExpr->addClauseIfNotExisting($newExpr).hasChanged;
                if ($joinDoesNotHaveExpr,
                    | let updatedExpr = ^LogicalBinaryExpression(left = $agg2.first, right = $newExpr, type = LogicalBinaryType.AND);
                      pair($updatedExpr, $agg2.second.values->concatenate(pair($p.second->cast(@QualifiedNameReference), $newExpr))->list());,
                    | $agg2
                );
              }, $agg1)
          }, pair($expr, list([]->cast(@Pair<QualifiedNameReference, meta::external::query::sql::metamodel::Expression>))));,
      |

  if ($expr->isAndExpression(),
      | let andExpr = $expr->cast(@LogicalBinaryExpression);
        let updatedLeft = $andExpr.left->tryAddFiltersToJoinExpression($fullJoinExpr, $filterPairs);
        let updatedRight = $andExpr.right->tryAddFiltersToJoinExpression($fullJoinExpr, $filterPairs);
        pair(^$andExpr(left = $updatedLeft.first, right = $updatedRight.first), $updatedLeft.second.values->concatenate($updatedRight.second.values)->list());,

      | pair($expr, list([]->cast(@Pair<QualifiedNameReference, meta::external::query::sql::metamodel::Expression>)))
  ))
}

function <<access.private>> meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::isFromSupportedForJoinFilterPushDown(qs: QuerySpecification[1]): Boolean[1]
{
  ($qs.from->size() == 1) && $qs.from->toOne()->instanceOf(Join) && $qs.from->toOne()->cast(@Join)->isJoinSupportedForJoinFilterPushDown()
}

function <<access.private>> meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::isJoinSupportedForJoinFilterPushDown(j: Join[1]): Boolean[1]
{
  $j.criteria->isNotEmpty() && $j.criteria->toOne()->instanceOf(JoinOn) &&
  $j.type->in([JoinType.INNER, JoinType.LEFT]) &&
  $j.left->match([a: AliasedRelation[1] | true, sj: Join[1] | $sj->isJoinSupportedForJoinFilterPushDown(), a: Any[*] | false]) &&
  $j.right->instanceOf(AliasedRelation)
}

function <<access.private>> meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::extractOrderedJoins(qs: QuerySpecification[1]): Join[1..*]
{
  extractOrderedJoins($qs.from->toOne()->cast(@Join))
}

function <<access.private>> meta::external::store::relational::sqlPlanning::ruleBasedTransformation::joinFilterPushDown::extractOrderedJoins(j: Join[1]): Join[1..*]
{
  $j.left->match([
    l: Join[1] | $l->extractOrderedJoins(),
    a: Any[*]  | []
  ])->concatenate($j)->toOneMany()
}
