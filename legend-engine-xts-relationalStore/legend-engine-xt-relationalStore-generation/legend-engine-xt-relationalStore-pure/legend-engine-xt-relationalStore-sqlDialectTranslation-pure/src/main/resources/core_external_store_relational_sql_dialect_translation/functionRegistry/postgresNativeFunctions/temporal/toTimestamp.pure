// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::ToTimestamp extends PostgresNativeSqlFunction
[
  $this.name == 'to_timestamp'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::toTimestamp(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::ToTimestamp
  (
    name = 'to_timestamp',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = [AbstractStringSqlType, AbstractStringSqlType],
        returnType = TimestampSqlType
      ),
      ^SqlFunctionVariation
      (
        parameterTypes = AbstractNumericSqlType,
        returnType = TimestampSqlType
      )
    ],
    tests = [
      sqlFunctionTest(
        simpleFunctionCall('to_timestamp', [literal('2020-01-01 12:34:56.111'), literal('YYYY-MM-DD HH24:MI:SS.MS')]),
        %2020-01-01T12:34:56.111000000+0000
      ),
      sqlFunctionTest(
        simpleFunctionCall('to_timestamp', [literal('05 Dec 2000'), literal('DD Mon YYYY')]),
        %2000-12-05T00:00:00.000000000+0000

      ),
      sqlFunctionTest(
        simpleFunctionCall('to_timestamp',literal(1284352323.0)),
        %2010-09-13T04:32:03.000000000+0000
      ),
      sqlFunctionTest(
        simpleFunctionCall('to_timestamp',literal(1284352323)),
        %2010-09-13T04:32:03.000000000+0000
      )
    ]
  )
}
