// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::relational::sqlDialectTranslation::tests::utils::*;
import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::tests::*;

Class {sqlFunctionInfo.initializer = 'jaroWinklerSimilarity'} meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::string::JaroWinklerSimilarity extends ExtensionSqlFunction
[
  $this.name == 'jarowinkler_similarity'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::string::jaroWinklerSimilarity(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::string::JaroWinklerSimilarity
  (
    name = 'jarowinkler_similarity',
    documentation = 'Computes the Jaro-Winkler similarity between two input strings. The function returns an integer between 0 and 1, where 0 indicates no similarity and 1 indicates an exact match.',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = [AbstractStringSqlType, AbstractStringSqlType],
        returnType = AbstractNumericSqlType
      )
    ],
    tests = [
      sqlFunctionTest(
        simpleFunctionCall('jarowinkler_similarity', [literal('John Smith'), literal('Jane Smith')]),
        0.88
      ),
      sqlFunctionTest(
        simpleFunctionCall('jarowinkler_similarity', [literal('jack'), literal('jack')]),
        1.0
      ),
      sqlFunctionTest(
        simpleFunctionCall('jarowinkler_similarity', [literal('Coffee'), literal('Batsman')]),
        0.0
      )
    ]
  )
}
