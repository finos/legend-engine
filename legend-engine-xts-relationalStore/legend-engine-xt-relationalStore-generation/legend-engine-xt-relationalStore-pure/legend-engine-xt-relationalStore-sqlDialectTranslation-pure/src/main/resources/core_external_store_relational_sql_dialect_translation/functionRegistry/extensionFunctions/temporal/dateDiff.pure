// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class {sqlFunctionInfo.initializer = 'dateDiff'} meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::temporal::DateDiff extends ExtensionSqlFunction
[
  $this.name == 'datediff'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::temporal::dateDiff(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::temporal::DateDiff
  (
    name = 'datediff',
    documentation = 'Returns the difference between 2 dates/timestamps (arg3 - arg2) in the specified time units (arg1).',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = [AbstractStringSqlType, TimestampSqlType, TimestampSqlType],
        returnType = AbstractIntegerSqlType
      ),
      ^SqlFunctionVariation
      (
        parameterTypes = [AbstractStringSqlType, DateSqlType, DateSqlType],
        returnType = AbstractIntegerSqlType
      ),
      ^SqlFunctionVariation
      (
        parameterTypes = [AbstractStringSqlType, AbstractTemporalSqlType, AbstractTemporalSqlType],
        returnType = AbstractIntegerSqlType
      )
    ],
    tests = [
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('year'), cast(literal('2023-12-31'), 'DATE'), cast(literal('2024-01-01'), 'DATE')]),
        1
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('year'), cast(literal('2023-12-31'), 'DATE'), cast(literal('2023-01-01'), 'DATE')]),
        0
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('year'), cast(literal('2023-12-31'), 'DATE'), cast(literal('2022-01-01'), 'DATE')]),
        -1
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('month'), cast(literal('2023-11-01'), 'DATE'), cast(literal('2024-12-31'), 'DATE')]),
        13
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('month'), cast(literal('2022-12-01'), 'DATE'), cast(literal('2024-02-26'), 'DATE')]),
        14
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('month'), cast(literal('2023-11-30'), 'DATE'), cast(literal('2023-12-01'), 'DATE')]),
        1
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('month'), cast(literal('2023-11-01'), 'DATE'), cast(literal('2023-09-30'), 'DATE')]),
        -2
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('day'), cast(literal('2023-11-01'), 'DATE'), cast(literal('2023-12-15'), 'DATE')]),
        44
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('day'), cast(literal('2023-11-01'), 'TIMESTAMP'), cast(literal('2023-12-15'), 'TIMESTAMP')]),
        44
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('day'), cast(literal('2023-11-03'), 'DATE'), cast(literal('2023-11-01'), 'DATE')]),
        -2
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('day'), cast(literal('2022-12-01'), 'DATE'), cast(literal('2023-12-01'), 'DATE')]),
        365
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('day'), cast(literal('2022-12-10'), 'DATE'), cast(literal('2023-12-01'), 'DATE')]),
        356
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('day'), cast(literal('2022-12-01'), 'DATE'), cast(literal('2023-12-31'), 'DATE')]),
        395
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('week'), cast(literal('2023-11-01'), 'DATE'), cast(literal('2024-11-15'), 'DATE')]),
        54
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('week'), cast(literal('2025-02-16'), 'DATE'), cast(literal('2025-02-20'), 'DATE')]),
        0
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('hour'), cast(literal('2023-11-03 12:30:20'), 'TIMESTAMP'), cast(literal('2023-11-04 13:30:20'), 'TIMESTAMP')]),
        25
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('hour'), cast(literal('2023-11-03 12:30:20'), 'TIMESTAMP'), cast(literal('2023-11-04 13:10:20'), 'TIMESTAMP')]),
        25
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('hour'), cast(literal('2023-11-03 12:30:20'), 'TIMESTAMP'), cast(literal('2023-11-04 01:10:20'), 'TIMESTAMP')]),
        13
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('hour'), cast(literal('2023-11-03 23:30:20'), 'TIMESTAMP'), cast(literal('2023-11-04 00:10:20'), 'TIMESTAMP')]),
        1
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('minute'), cast(literal('2023-11-03 12:30:20'), 'TIMESTAMP'), cast(literal('2023-11-04 13:31:20'), 'TIMESTAMP')]),
        1501
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('minute'), cast(literal('2023-11-03 12:30:20'), 'TIMESTAMP'), cast(literal('2023-11-04 13:31:10'), 'TIMESTAMP')]),
        1501
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('minute'), cast(literal('2023-11-03 12:30:20'), 'TIMESTAMP'), cast(literal('2023-11-04 13:10:10'), 'TIMESTAMP')]),
        1480
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('second'), cast(literal('2023-11-03 12:30:20'), 'TIMESTAMP'), cast(literal('2023-11-03 14:30:21'), 'TIMESTAMP')]),
        7201
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('millisecond'), cast(literal('2023-11-03 12:30:20.20'), 'TIMESTAMP'), cast(literal('2023-11-03 12:30:20.24'), 'TIMESTAMP')]),
        40
      ),
      sqlFunctionTest(
        simpleFunctionCall('datediff', [literal('day'), literal(%2023-11-02T12:30:20.20), literal(%2023-11-03)]),
        1
      )


    ]
  )
}