// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::relational::sqlDialectTranslation::tests::utils::*;
import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::Count extends PostgresNativeSqlFunction
[
  $this.name == 'count'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::count(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::Count
  (
    name = 'count',
    documentation = 'Returns the number of input rows for which the value of expression is not null',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = SqlType,
        returnType = BigIntSqlType
      )
    ],
    tests = [
      sqlFunctionTest(
        ^TestSetupData(
          tableName = 'testTable', 
          columns = [pair('courses_enrolled', 'varchar'), pair('name', 'varchar')], 
          data = [
            dataRow(['Math', 'Robert']), 
            dataRow(['AI', 'Robert']), 
            dataRow(['Geo', 'Robert']),
            dataRow(['Math', 'Jane']),
            dataRow([^NullLiteral(), 'Jane'])
          ]
        ),
        // SELECT name, count(courses_enrolled) AS result FROM testTable GROUP BY name ORDER BY result ASC NULLS LAST
        simpleAggFunctionCall(
          ^FunctionCall(
            name = ^QualifiedName(parts = 'count'), 
            arguments = [^QualifiedNameReference(name = ^QualifiedName(parts = 'courses_enrolled'))]
          ),
          'testTable',
          'name'
        ),
        ^TestExpectedResult(
          columns = ['name', 'result'], 
          data = [
            list(['Jane', 1]), 
            list(['Robert', 3]) 
          ]
        )
      )
    ]
  )
}
