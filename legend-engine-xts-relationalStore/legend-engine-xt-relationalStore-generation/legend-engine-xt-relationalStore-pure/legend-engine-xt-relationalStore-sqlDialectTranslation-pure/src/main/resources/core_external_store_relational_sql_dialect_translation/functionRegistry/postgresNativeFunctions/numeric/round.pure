// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class {sqlFunctionInfo.initializer = 'round'} meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::Round extends PostgresNativeSqlFunction
[
  $this.name == 'round'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::round(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::Round
  (
    name = 'round',
    documentation = 'Rounds 1st arg to 2nd arg decimal places. Ties are broken by rounding away from zero.',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = [DoubleSqlType, AbstractIntegerSqlType],
        returnType = DoubleSqlType
      ),
      ^SqlFunctionVariation
      (
        parameterTypes = DoubleSqlType,
        documentation = 'Rounds to nearest integer. For double precision, the tie-breaking behavior is platform dependent, but “round to nearest even” is the most common rule.',
        returnType = DoubleSqlType
      ),
      ^SqlFunctionVariation
      (
        parameterTypes = [AbstractNumericSqlType, AbstractIntegerSqlType],
        returnType = AbstractNumericSqlType
      ),
      ^SqlFunctionVariation
      (
        parameterTypes = AbstractNumericSqlType,
        documentation = 'Rounds to nearest integer. For numeric, ties are broken by rounding away from zero.',
        returnType = AbstractNumericSqlType
      )
    ],
    tests = [
      sqlFunctionTest(
        simpleFunctionCall('round', [literal(2.1289), literal(3)]),
        2.129
      ),
      sqlFunctionTest(
        simpleFunctionCall('round', [literal(2.1283), literal(3)]),
        2.128
      ),
      sqlFunctionTest(
        simpleFunctionCall('round', [literal(2.8)]),
        3.0
      ),
      sqlFunctionTest(
        simpleFunctionCall('round', [literal(2.21)]),
        2.0
      )
    ]
  )
}
