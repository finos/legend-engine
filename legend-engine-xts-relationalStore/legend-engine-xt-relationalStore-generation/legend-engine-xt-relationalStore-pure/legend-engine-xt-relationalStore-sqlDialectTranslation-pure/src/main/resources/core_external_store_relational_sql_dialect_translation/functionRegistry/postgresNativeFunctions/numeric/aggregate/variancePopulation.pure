// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::relational::sqlDialectTranslation::tests::utils::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::tests::*;
import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class {sqlFunctionInfo.initializer = 'variancePopulation'} meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::aggregate::VariancePopulation extends PostgresNativeSqlFunction
[
  $this.name == 'var_pop'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::aggregate::variancePopulation(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::aggregate::VariancePopulation
  (
    name = 'var_pop',
    documentation = 'Returns the population variance of the input values (square of the population standard deviation)',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = AbstractIntegerSqlType,
        returnType = AbstractNumericSqlType
      ),
      ^SqlFunctionVariation
      (
        parameterTypes = DoubleSqlType,
        returnType = DoubleSqlType
      ),
      ^SqlFunctionVariation
      (
        parameterTypes = AbstractNumericSqlType,
        returnType = AbstractNumericSqlType
      )
    ],
    tests = [
      sqlFunctionTest(
        testSetupDataForStatistics(),
        // SELECT var_pop(temperature) AS result FROM testTable ORDER BY result ASC NULLS LAST
        simpleAggFunctionCall(
          ^FunctionCall(
            name = ^QualifiedName(parts = 'var_pop'), 
            arguments = [^QualifiedNameReference(name = ^QualifiedName(parts = 'temperature'))]
          ),
          'testTable',
          []
        ),
        ^TestExpectedResult(
          columns = ['result'], 
          data = [
            list([172.0864])
          ]
        )
      )
    ]
  )
}
