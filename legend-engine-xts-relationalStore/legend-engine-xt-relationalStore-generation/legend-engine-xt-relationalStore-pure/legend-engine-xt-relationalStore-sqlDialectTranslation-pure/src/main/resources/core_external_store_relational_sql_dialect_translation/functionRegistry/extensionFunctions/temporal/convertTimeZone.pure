// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class {sqlFunctionInfo.initializer = 'convertTimeZone'} meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::temporal::ConvertTimeZone extends ExtensionSqlFunction
[
  $this.name == 'convert_timezone'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::temporal::convertTimeZone(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::temporal::ConvertTimeZone
  (
    name = 'convert_timezone',
    documentation = 'Converts a timestamp from source time zone to target time zone.',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = [TimestampSqlType, AbstractStringSqlType, AbstractStringSqlType],
        returnType = AbstractStringSqlType
      )
    ],
    tests = [
      sqlFunctionTest(
        simpleFunctionCall('convert_timezone', [literal(%2024-01-01T14:00:00), literal('America/New_York'), literal('YYYY-MM-DD HH24:MI:SS')]),
         '2024-01-01 09:00:00'
      ),
      sqlFunctionTest(
        simpleFunctionCall('convert_timezone', [literal(%2024-01-01T14:00:00), literal('America/Los_Angeles'), literal('YYYY-MM-DD HH24:MI:SS')]),
         '2024-01-01 06:00:00'
      )                
    ]
  )
}

