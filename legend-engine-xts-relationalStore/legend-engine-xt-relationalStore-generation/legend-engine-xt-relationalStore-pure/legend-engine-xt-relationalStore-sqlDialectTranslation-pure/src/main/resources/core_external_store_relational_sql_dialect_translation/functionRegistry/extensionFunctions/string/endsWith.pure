// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class {sqlFunctionInfo.initializer = 'endsWith'} meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::string::EndsWith extends ExtensionSqlFunction
[
  $this.name == 'endswith'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::string::endsWith(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::string::EndsWith
  (
    name = 'endswith',
    documentation = 'Returns true if arg1 ends with arg2. Both expressions must be text or binary expressions.',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = [AbstractStringSqlType, AbstractStringSqlType],
        returnType = BooleanSqlType
      )
    ],
    tests = [
      sqlFunctionTest(
        simpleFunctionCall('endswith', [literal('abc'), literal('c')]),
        true
      ),
      sqlFunctionTest(
        simpleFunctionCall('endswith', [literal('abc'), literal('bc')]),
        true
      ),
      sqlFunctionTest(
        simpleFunctionCall('endswith', [literal('abc'), literal('a')]),
        false
      ),
      sqlFunctionTest(
        simpleFunctionCall('endswith', [literal('abc'), literal('')]),
        true
      ),
      sqlFunctionTest(
        simpleFunctionCall('endswith', [literal(''), literal('')]),
        true
      ),
      sqlFunctionTest(
        simpleFunctionCall('endswith', [literal('abc%'), literal('%')]),
        true
      ),
      sqlFunctionTest(
        simpleFunctionCall('endswith', [literal('abc\''), literal('c\'')]),
        true
      ),
      sqlFunctionTest(
        simpleFunctionCall('endswith', [literal('abcd'), literal('_')]),
        false
      )
    ]
  )
}