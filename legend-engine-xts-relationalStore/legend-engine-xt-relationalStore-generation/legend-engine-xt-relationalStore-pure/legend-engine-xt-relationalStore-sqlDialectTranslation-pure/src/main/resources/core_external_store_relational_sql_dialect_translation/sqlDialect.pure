// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::extension::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::defaults::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::typeInference::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;


Class meta::external::store::relational::sqlDialectTranslation::SqlDialect
{
  dbType: String[1];
  identifierQuoteConfig: QuoteConfiguration[1];
  literalQuoteConfig: QuoteConfiguration[1];
  nodeProcessors: Map<Class<Node>, NodeProcessor<Node>>[1];
  identifierProcessor: IdentifierProcessor[1];
  expressionPrecedenceComparator: ExpressionPrecedenceComparator[1];
  keywords: String[*];
  functionProcessorMap: Map<Class<SqlFunction>, FunctionProcessor>[0..1];
  variablePlaceholderPrefixSuffixMap: Map<String, Pair<String, String>>[1];
  isBooleanAliasForTinyInt: Boolean[1] = false;
  // For testing
  initSqlStatementsForTests: String[*];
  expectedSqlDialectTestErrors: Map<String, String>[1];
}

Class meta::external::store::relational::sqlDialectTranslation::NodeProcessor<T> // T extends Node
{
  nodeType: Class<T>[1];
  processFunction: Function<{SqlDialect[1], T[1], SqlDialectTranslationState[1], SqlDialectTranslationConfig[1] -> String[1]}>[1];
  selfDelimiting: Function<{T[1] -> Boolean[1]}>[1];
}

Class meta::external::store::relational::sqlDialectTranslation::FunctionProcessor
{
  processFunction: Function<{SqlDialect[1], FunctionCall[1], SqlDialectTranslationState[1], SqlDialectTranslationConfig[1] -> String[1]}>[1];
  selfDelimiting: Function<{FunctionCall[1] -> Boolean[1]}>[1];
}

Class meta::external::store::relational::sqlDialectTranslation::IdentifierProcessor
{
  processFunction: Function<{SqlDialect[1], String[1], Boolean[1], SqlDialectTranslationState[1], SqlDialectTranslationConfig[1] -> String[1]}>[1];
}

Class meta::external::store::relational::sqlDialectTranslation::ExpressionPrecedenceComparator
{
  // Precedence is currently used to delimit child expressions with parentheses if the parent expression is of higher precedence
  findOperatorType: Function<{meta::external::query::sql::metamodel::Expression[1] -> String[1]}>[1];
  operatorPrecedence: Map<String, Integer>[1];


  // Returns
  //   1 id e1 expression has higher precedence than e2 expression
  //   0 id e1 expression has same precedence than e2 expression
  //   -1 id e1 expression has lower precedence than e2 expression

  compare(e1: meta::external::query::sql::metamodel::Expression[1], e2: meta::external::query::sql::metamodel::Expression[1])
  {
    let priority1 = $this.operatorPrecedence->get($this.findOperatorType->eval($e1))->toOne();
    let priority2 = $this.operatorPrecedence->get($this.findOperatorType->eval($e2))->toOne();
    if (
      [
        pair(| $priority1 < $priority2, | 1),
        pair(| $priority1 == $priority2, | 0)
      ],
      | -1
    );
  }: Integer[1];
}

function meta::external::store::relational::sqlDialectTranslation::nodeProcessor<T>(nodeType: Class<T>[1], processFunction: Function<{SqlDialect[1], T[1], SqlDialectTranslationState[1], SqlDialectTranslationConfig[1] -> String[1]}>[1]): NodeProcessor<T>[1]
{
  ^NodeProcessor<T>
  (
    nodeType = $nodeType,
    processFunction = $processFunction,
    selfDelimiting = {n: Node[1] | false}
  )
}

function meta::external::store::relational::sqlDialectTranslation::nodeProcessor<T>(nodeType: Class<T>[1], processFunction: Function<{SqlDialect[1], T[1], SqlDialectTranslationState[1], SqlDialectTranslationConfig[1] -> String[1]}>[1], selfDelimiting: Function<{T[1] -> Boolean[1]}>[1]): NodeProcessor<T>[1]
{
  ^NodeProcessor<T>
  (
    nodeType = $nodeType,
    processFunction = $processFunction,
    selfDelimiting = $selfDelimiting
  )
}

function meta::external::store::relational::sqlDialectTranslation::executeNodeProcessor(sqlDialect: SqlDialect[1], node: Node[1], state: SqlDialectTranslationState[1], config: SqlDialectTranslationConfig[1]): String[1]
{
  $sqlDialect->executeNodeProcessor($node, [], $state, $config)
}

function meta::external::store::relational::sqlDialectTranslation::executeNodeProcessor(sqlDialect: SqlDialect[1], node: Node[1], parentNode: Node[0..1], state: SqlDialectTranslationState[1], config: SqlDialectTranslationConfig[1]): String[1]
{
  let nodeProcessor = $node->getNodeProcessorForNode($sqlDialect, $config);
  executeNodeProcessor($sqlDialect, $nodeProcessor, $node, $parentNode, $state, $config);
}

function meta::external::store::relational::sqlDialectTranslation::executeNodeProcessor(sqlDialect: SqlDialect[1], nodeProcessor: NodeProcessor<Node>[1], node: Node[1], parentNode: Node[0..1], state: SqlDialectTranslationState[1], config: SqlDialectTranslationConfig[1]): String[1]
{
  let processedNode = $nodeProcessor.processFunction->toOne()->evaluate([list($sqlDialect), list($node), list($state), list($config)])->toOne()->cast(@String);
  if ($node->isSelfDelimiting($nodeProcessor),
    | $processedNode,
    | // Check precedence of expressions
      if ($node->instanceOf(meta::external::query::sql::metamodel::Expression) && $parentNode->isNotEmpty() && $parentNode->toOne()->instanceOf(meta::external::query::sql::metamodel::Expression),
        | let e1 = $node->cast(@meta::external::query::sql::metamodel::Expression);
          let e2 = $parentNode->toOne()->cast(@meta::external::query::sql::metamodel::Expression);
          let precedenceResult = $sqlDialect.expressionPrecedenceComparator.compare($e1, $e2);
          // Though precedence wise its enough to check precedenceResult < 0, better to wrap in parentheses when dealing with different logical operations (to make SQL more readable)
          // With divide not always floating points, need to wrap
          if ($precedenceResult < 0 || differentLogicalBinaryExpressionTypes($e1, $e2) || doubleNegation($e1, $e2) 
              || $e1->isDivideExpr() || $e2->isDivideExpr() || $e1->isSubtractExpr() || $e2->isSubtractExpr(),
            | '(' + $processedNode + ')',
            | $processedNode
          );,
        | $processedNode 
      );
  );
}

function meta::external::store::relational::sqlDialectTranslation::isSelfDelimiting(node:Node[1], nodeProcessor: NodeProcessor<Node>[1]): Boolean[1]
{
  $nodeProcessor->toOne().selfDelimiting->evaluate(list($node))->toOne()->cast(@Boolean);
}

function meta::external::store::relational::sqlDialectTranslation::getNodeProcessorForNode(node: Node[1], sqlDialect: SqlDialect[1], config: SqlDialectTranslationConfig[1]): NodeProcessor<Node>[1]
{
  let nodeProcessorsMap = if($config.extraNodeProcessors->isNotEmpty(),
    | $sqlDialect.nodeProcessors->putAll($config.extraNodeProcessors->toOne()),
    | $sqlDialect.nodeProcessors
  );
  let nodeClass = $node->class();
  let untypedNodeClass = if($nodeClass->_subTypeOf(TypedSqlExpression), 
    | $nodeClass->validGeneralizations()->filter(x | !$x->_subTypeOf(TypedSqlExpression))->toOne(), 
    | $nodeClass
  )->cast(@Class<Node>);
  $nodeProcessorsMap->get($untypedNodeClass)->toOne('Dialect translation for node of type "' + $untypedNodeClass->elementToPath() + '" not implemented in SqlDialect for database type "' + $config.dbConfig.dbType + '"');
}

function meta::external::store::relational::sqlDialectTranslation::functionProcessor<T>(processFunction: Function<{SqlDialect[1], FunctionCall[1], SqlDialectTranslationState[1], SqlDialectTranslationConfig[1] -> String[1]}>[1], selfDelimiting: Function<{T[1] -> Boolean[1]}>[1]): FunctionProcessor[1]
{
  ^FunctionProcessor
  (
    processFunction = $processFunction,
    selfDelimiting = $selfDelimiting
  )
}

function meta::external::store::relational::sqlDialectTranslation::simpleFunctionProcessor(functionName: String[*]): FunctionProcessor[1]
{
  functionProcessor(
    {sqlDialect, f, state, config |
      $f->doFunctionCallChecks();
      $sqlDialect->generateFunctionCallWithArgs($functionName, $f.arguments, $f.window, $f.group, $f.distinct, $state, $config);
    },
    {n: FunctionCall[1] | true}
  )
}


function meta::external::store::relational::sqlDialectTranslation::argTransformFunctionProcessor(functionName: String[1], transform: Function<{Node[*]->Node[*]}>[1]): FunctionProcessor[1]
{
  functionProcessor(
    {sqlDialect, f, state, config |
      $f->doFunctionCallChecks();
      $sqlDialect->generateFunctionCallWithArgs($functionName, $transform->eval($f.arguments), $f.window, $f.group, $f.distinct, $state, $config);
    },
    {n: FunctionCall[1] | true}
  )
}

function meta::external::store::relational::sqlDialectTranslation::customFunctionProcessor(transform: Function<{FunctionCall[1], SqlDialect[1], SqlDialectTranslationState[1], SqlDialectTranslationConfig[1] -> String[1]}>[1]): FunctionProcessor[1]
{
  functionProcessor(
    {sqlDialect, f, state, config |
      $f->doFunctionCallChecks();
      $transform->eval($f, $sqlDialect, $state, $config);
    },
    {n: FunctionCall[1] | true}
  )
}

function meta::external::store::relational::sqlDialectTranslation::nativeFunctionProcessor(functionClass: Class<SqlFunction>[1]): FunctionProcessor[1]
{
  let initializerPath = $functionClass.package->toOne()->elementToPath() + '::' + $functionClass->value4Tag('initializer', sqlFunctionInfo).value->toOne() + '__SqlFunction_1_';
  let sqlFunc = $initializerPath->pathToElement()->cast(@Function<{->SqlFunction[1]}>)->eval();
  simpleFunctionProcessor($sqlFunc.name);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::doFunctionCallChecks(f: FunctionCall[1]): Any[*]
{
  assert($f.filter->isEmpty(), | 'Filtered function call processing not implemented yet');
  assert($f.orderBy->isEmpty(), | 'Sorted function call processing not implemented yet');
}

function meta::external::store::relational::sqlDialectTranslation::processFunctionArgs(sqlDialect: SqlDialect[1], args: Node[*], state: SqlDialectTranslationState[1], config: SqlDialectTranslationConfig[1]): String[*]
{
  $args->map(a|$sqlDialect->executeNodeProcessor($a, [], $state->increaseLevel(), $config));
}

function meta::external::store::relational::sqlDialectTranslation::generateFunctionCallWithArgs(sqlDialect: SqlDialect[1], targetFunction:String[*], args: Node[*], window: meta::external::query::sql::metamodel::Window[0..1], state: SqlDialectTranslationState[1], config: SqlDialectTranslationConfig[1]): String[1]
{
  generateFunctionCallWithArgs($sqlDialect, $targetFunction, $args, $window, [], [], $state, $config)
}

function meta::external::store::relational::sqlDialectTranslation::generateFunctionCallWithArgs(sqlDialect: SqlDialect[1], targetFunction:String[*], args: Node[*], window: meta::external::query::sql::metamodel::Window[0..1], group:Group[0..1], distinct:Boolean[0..1],state: SqlDialectTranslationState[1], config: SqlDialectTranslationConfig[1]): String[1]
{
  let processedArgs = $sqlDialect->processFunctionArgs($args, $state, $config);
  generateFunctionCallWithArgs($sqlDialect, $targetFunction, $processedArgs, $window, $group, $distinct, $state, $config);
}

function meta::external::store::relational::sqlDialectTranslation::generateFunctionCallWithArgs(sqlDialect: SqlDialect[1], targetFunction:String[*], args: String[*], state: SqlDialectTranslationState[1], config: SqlDialectTranslationConfig[1]): String[1]
{
  generateFunctionCallWithArgs($sqlDialect, $targetFunction, $args, [], [], [], $state, $config)
}

function meta::external::store::relational::sqlDialectTranslation::generateFunctionCallWithArgs(sqlDialect: SqlDialect[1], targetFunction:String[*], args: String[*], window: meta::external::query::sql::metamodel::Window[0..1], state: SqlDialectTranslationState[1], config: SqlDialectTranslationConfig[1]): String[1]
{
  generateFunctionCallWithArgs($sqlDialect, $targetFunction, $args, $window, [], [], $state, $config)
}

function meta::external::store::relational::sqlDialectTranslation::generateFunctionCallWithArgs(sqlDialect: SqlDialect[1], targetFunction:String[*], args: String[*], f: meta::external::query::sql::metamodel::FunctionCall[1], state: SqlDialectTranslationState[1], config: SqlDialectTranslationConfig[1]): String[1]
{
  generateFunctionCallWithArgs($sqlDialect, $targetFunction, $args, $f.window, $f.group, $f.distinct, $state, $config)
}

function meta::external::store::relational::sqlDialectTranslation::generateFunctionCallWithArgs(sqlDialect: SqlDialect[1], targetFunction:String[*], args: String[*], window: meta::external::query::sql::metamodel::Window[0..1], group:Group[0..1], distinct:Boolean[0..1],state: SqlDialectTranslationState[1], config: SqlDialectTranslationConfig[1]): String[1]
{
  let sep0 = $state.separatorIfPretty(0, $config);
  let sep1 = $state.separatorIfPretty(1, $config);

  let functionName = $targetFunction->joinStrings('.');
  
  let noArgIsMultiLine = !($args->isNotEmpty() && $config.formatConfig.pretty && $args->map(a | $a->indexOf($config.formatConfig.lineSeparator) >= 0)->or());
  let argsWithDistinct = if($distinct->isTrue(), | $sqlDialect->keyword('distinct', $state, $config) + '(' + $args->at(0) + ')', | $args->head())->concatenate($args->tail());
  let argumentsString = $argsWithDistinct->joinStrings(',' + if($noArgIsMultiLine, |' ', |$state.separator(1, $config)));

  $functionName + '(' + if($noArgIsMultiLine, |'', |$state.separatorIfPretty(1, $config)) +
    $argumentsString +
  if($noArgIsMultiLine, |'', |$state.separatorIfPretty(0, $config)) + ')' +

  $group->executeIfNotEmptyElseReturnEmptyString({|
    ' ' + $sqlDialect->keyword('within group', $state, $config) + ' (' + $sep1 + $sqlDialect->keyword('order by ', $state, $config) + $sep1 + $group.orderBy->map(o | $sqlDialect->executeNodeProcessor($o, [], $state->increaseLevel(), $config))->joinStrings(',' + $sep1) + ')'
  }) + 
 
  $window->executeIfNotEmptyElseReturnEmptyString({|
    ' ' + $sqlDialect->keyword('over', $state, $config) + ' (' + $sep1 + $sqlDialect->executeNodeProcessor($window->toOne(), [], $state->increaseLevel(), $config) + $sep0 + ')'
  });  
}

function meta::external::store::relational::sqlDialectTranslation::identifierProcessor(processFunction: Function<{SqlDialect[1], String[1], Boolean[1], SqlDialectTranslationState[1], SqlDialectTranslationConfig[1] -> String[1]}>[1]): IdentifierProcessor[1]
{
  ^IdentifierProcessor(processFunction = $processFunction)
}

function meta::external::store::relational::sqlDialectTranslation::executeIdentifierProcessor(sqlDialect: SqlDialect[1], identifier: String[1], shouldQuote: Boolean[1], state: SqlDialectTranslationState[1], config: SqlDialectTranslationConfig[1]): String[1]
{
  $sqlDialect.identifierProcessor.processFunction->eval($sqlDialect, $identifier, $shouldQuote, $state, $config)
}

function meta::external::store::relational::sqlDialectTranslation::executeIdentifierProcessor(sqlDialect: SqlDialect[1], identifier: String[1], state: SqlDialectTranslationState[1], config: SqlDialectTranslationConfig[1]): String[1]
{
  $sqlDialect.identifierProcessor.processFunction->eval($sqlDialect, $identifier, $config.dbConfig.quoteIdentifiers, $state, $config)
}

//-------------------------------------------------------------------------------------------------------------------------------------------------

// Quoting

Class meta::external::store::relational::sqlDialectTranslation::QuoteConfiguration
{
  start: String[1];
  end: String[1];
  escape: String[1];
}
