// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::Chr extends PostgresNativeSqlFunction
[
  $this.name == 'chr'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::chr(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::Chr
  (
    name = 'chr',
    documentation = 'Returns the Character with the given code. For UTF8 the argument is treated as a Unicode code point. For other multibyte encodings the argument must designate an ASCII character. The NULL (0) character is not allowed because text data types cannot store such bytes.',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = AbstractIntegerSqlType,
        returnType = AbstractStringSqlType
      )
    ],
    tests = [ 
      sqlFunctionTest(
        simpleFunctionCall('chr', literal(65)),
        'A'
      ),
      sqlFunctionTest(
        simpleFunctionCall('chr', literal(122)),
        'z'
      ),
      sqlFunctionTest(
        simpleFunctionCall('chr', literal(33)),
        '!'
      ),
      sqlFunctionTest(
        simpleFunctionCall('chr', literal(54)),
        '6'
      ),
      sqlFunctionTest(
        simpleFunctionCall('chr', literal(32)),
        ' '
      )
    ]
  )
}
