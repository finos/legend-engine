// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class {sqlFunctionInfo.initializer = 'power'} meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::Power extends PostgresNativeSqlFunction
[
  $this.name == 'power'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::power(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::Power
  (
    name = 'power',
    documentation = '1st arg raised to the power of 2nd arg.',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = [DoubleSqlType, DoubleSqlType],
        returnType = DoubleSqlType
      ),
      
      ^SqlFunctionVariation
      (
        parameterTypes = [AbstractNumericSqlType, AbstractNumericSqlType],
        returnType = AbstractNumericSqlType
      )
    ],
    tests = [
      
      sqlFunctionTest(
        simpleFunctionCall('power', [literal(2), literal(3)]),
        8.0
      ),
      sqlFunctionTest(
        simpleFunctionCall('power', [literal(2), literal(-3)]),
        0.125
      ),
      sqlFunctionTest(
        simpleFunctionCall('power', [literal(2), literal(0.5)]),
        1.41421356
      )
    ]
  )
}
