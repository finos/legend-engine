// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::relational::sqlDialectTranslation::tests::utils::*;
import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::tests::*;

Class {sqlFunctionInfo.initializer = 'mode'} meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::aggregate::Mode extends PostgresNativeSqlFunction
[
  $this.name == 'mode'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::aggregate::mode(): SqlFunction[1]
{
  // Postgres only supports mode() as an ordered set aggregate function, requiring a WITHIN GROUP clause.
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::aggregate::Mode
  (
    name = 'mode',
    documentation = 'Returns the most frequent input value (arbitrarily choosing the first one if there are multiple equally-frequent results).',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = [],
        returnType = SqlType
      )
    ],
    tests = [
      sqlFunctionTest(
        testSetupDataForWindowFunctions(),
        // SELECT mode() WITHIN GROUP (ORDER BY score DESC NULLS LAST) AS result FROM testTable ORDER BY result NULLS LAST
        simpleAggFunctionCall(
          ^FunctionCall(
            name = ^QualifiedName(parts = 'mode'), 
            arguments = [],
            group = ^meta::external::query::sql::metamodel::Group(
              orderBy = [
                ^SortItem(
                  sortKey = ^QualifiedNameReference(name = ^QualifiedName(parts = 'score')),
                  ordering = SortItemOrdering.DESCENDING, 
                  nullOrdering = SortItemNullOrdering.LAST
                )
              ]
            )
          ),
          'testTable',
          []
        ),
        ^TestExpectedResult(
          columns = ['result'], 
          data = [
            list([88])
          ]
        )
      ),
      sqlFunctionTest(
        testSetupDataForMode(),
        // SELECT mode() WITHIN GROUP (ORDER BY score DESC NULLS LAST) AS result FROM testTable ORDER BY result NULLS LAST
        simpleAggFunctionCall(
          ^FunctionCall(
            name = ^QualifiedName(parts = 'mode'), 
            arguments = [],
            group = ^meta::external::query::sql::metamodel::Group(
              orderBy = [
                ^SortItem(
                  sortKey = ^QualifiedNameReference(name = ^QualifiedName(parts = 'score')),
                  ordering = SortItemOrdering.DESCENDING, 
                  nullOrdering = SortItemNullOrdering.LAST
                )
              ]
            )
          ),
          'testTable',
          []
        ),
        ^TestExpectedResult(
          columns = ['result'], 
          data = [
            list([80])
          ]
        )
      )
    ]
  )
}