// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::defaults::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::postgres::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::typeInference::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;
import meta::pure::extension::*;

function meta::external::store::relational::sqlDialectTranslation::postgres::postgresSqlDialect(): SqlDialect[1]
{
  ^SqlDialect
  (
    dbType = 'Postgres',
    quoteConfig = postgresQuoteConfiguration(),
    nodeProcessors = postgresDialectNodeProcessors(),
    identifierProcessor = postgresIdentifierProcessor(),
    expressionPrecedenceComparator = postgresExpressionPrecedenceComparator(),
    keywords = postgresKeywords()
  )
}

function meta::external::store::relational::sqlDialectTranslation::postgres::postgresSqlDialectExtension(): Extension[1]
{
  ^Extension
  (
    type = 'PostgresSqlDialectExtension',
    moduleExtensions = [
      ^SqlDialectTranslationModuleExtension
      (
        module = sqlDialectTranslationModuleExtensionName(),
        extraSqlDialects = postgresSqlDialect()
      )
    ]
  )
}

function meta::external::store::relational::sqlDialectTranslation::postgres::postgresFunctionTestsExpectedErrors(): Map<String, String>[1]
{
  [
    pair(
      'FuncTests - log10(0/1)',
      'Postgres SQL Dialect does not support the function - log10'
    ),
    pair(
      'FuncTests - log10(1/1)',
      'Postgres SQL Dialect does not support the function - log10'
    )
  ]->newMap()
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresQuoteConfiguration(): QuoteConfiguration[1]
{
  ^QuoteConfiguration
  (
    start = '"',
    end = '"',
    escape = '""'
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectNodeProcessors(): Map<Class<Node>, NodeProcessor<Node>>[1]
{
  newMap(
    postgresDialectStatementProcessors()
    ->concatenate(
      postgresDialectRelationProcessors()
    )
    ->concatenate(
      postgresDialectExpressionProcessors()
    )
    ->concatenate(
      postgresDialectLiteralProcessors()
    )
    ->concatenate(
      postgresDialectSelectItemProcessors()
    )
    ->concatenate(
      postgresDialectOtherNodeProcessors()
    )
    ->map(n | pair($n.nodeType, $n))
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectStatementProcessors(): NodeProcessor<Statement>[*]
{
  [
    queryProcessor_default(),
    windowProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectRelationProcessors(): NodeProcessor<Relation>[*]
{
  [
    tableProcessor_default(),
    aliasedRelationProcessor_default(),
    joinProcessor_default(),
    querySpecificationProcessor_default(),
    unionProcessor_default(),
    tableSubqueryProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectExpressionProcessors(): NodeProcessor<meta::external::query::sql::metamodel::Expression>[*]
{
  [
    comparisonExpressionNodeProcessor_default(),
    logicalBinaryExpressionNodeProcessor_default(),
    notExpressionNodeProcessor_default(),
    arithmeticExpressionNodeProcessor_default(),
    qualifiedNameReferenceNodeProcessor_default(),
    isNullPredicateNodeProcessor_default(),
    isNotNullPredicateNodeProcessor_default(),
    negativeNodeProcessor_default(),
    currentTimeNodeProcessor_default(),
    whenClauseNodeProcessor_default(),
    searchedCaseExpressionNodeProcessor_default(),
    columnTypeProcessor_default(),
    castProcessor_default(),
    inListExpressionProcessor_default(),
    inPredicateProcessor_default(),
    extractProcessor_default(),
    betweenPredicateProcessor_default(),
    functionCallProcessor_postgres(),
    subQueryExpressionProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectLiteralProcessors(): NodeProcessor<Literal>[*]
{
  [
    integerLiteralNodeProcessor_default(),
    stringLiteralNodeProcessor_default(),
    booleanLiteralNodeProcessor_default(),
    longLiteralNodeProcessor_default(),
    doubleLiteralNodeProcessor_default(),
    nullLiteralNodeProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectSelectItemProcessors(): NodeProcessor<SelectItem>[*]
{
  [
    allColumnsNodeProcessor_default(),
    singleColumnNodeProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectOtherNodeProcessors(): NodeProcessor<Node>[*]
{
  [
    sortItemProcessor_default(),
    selectProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresIdentifierProcessor(): IdentifierProcessor[1]
{
  identifierProcessor_default()
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresExpressionPrecedenceComparator(): ExpressionPrecedenceComparator[1]
{
  ^ExpressionPrecedenceComparator(
    findOperatorType = findOperatorType_default_Expression_1__String_1_,
    operatorPrecedence = operatorPrecedence_default()
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresKeywords(): String[*]
{
  [
    // TODO: Update
    'date'
  ]
}

// ---------------------------- Function processing -------------------------

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::functionCallProcessor_postgres(): NodeProcessor<FunctionCall>[1]
{
  nodeProcessor(
    FunctionCall,
    {sqlDialect, f, state, config |
      assert($f.distinct == false, | 'Distinct function call processing not implemented yet');
      assert($f.filter->isEmpty(), | 'Filtered function call processing not implemented yet');
      assert($f.group->isEmpty(), | 'Grouped function call processing not implemented yet');
      assert($f.orderBy->isEmpty(), | 'Sorted function call processing not implemented yet');

      assert($f->cast(@TypedFunctionCall).sqlFunction->instanceOf(PostgresNativeSqlFunction), | 'Postgres SQL Dialect does not support the function - ' + $f.name.parts->joinStrings('.')->toLower());

      let sep0 = $state.separatorIfPretty(0, $config);
      let sep1 = $state.separatorIfPretty(1, $config);
      
      let args = $f.arguments->map(a | $sqlDialect->executeNodeProcessor($a, [], $state->increaseLevel(), $config));
      let noArgIsMultiLine = !($args->isNotEmpty() && $config.formatConfig.pretty && $args->map(a | $a->indexOf($config.formatConfig.lineSeparator) >= 0)->or());

      $sqlDialect->qualifiedName($f.name, $state, $config) + '(' + if($noArgIsMultiLine, | '', | $sep1) +
      $args->joinStrings(',' + if($noArgIsMultiLine, | ' ', | $state.separator(1, $config))) +
      + if($noArgIsMultiLine, | '', | $sep0) + ')' +
      if ($f.window->isNotEmpty(),
          | ' ' + $sqlDialect->keyword('over', $state, $config) + ' (' + $sep1 + $sqlDialect->executeNodeProcessor($f.window->toOne(), [], $state->increaseLevel(), $config) + $sep0 + ')',
          | ''
      );
    },
    {n | true}
  );
}

// --------------------------------------------------------------------------