// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::boolean::aggregate::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensiveFunctions::temporal::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::string::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::aggregate::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::aggregate::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::misc::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::numeric::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::temporal::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::aggregate::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::window::*;
import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::defaults::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::postgres::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::typeInference::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;
import meta::pure::extension::*;

function meta::external::store::relational::sqlDialectTranslation::postgres::postgresSqlDialect(): SqlDialect[1]
{
  ^SqlDialect
  (
    dbType = 'Postgres',
    quoteConfig = postgresQuoteConfiguration(),
    nodeProcessors = postgresDialectNodeProcessors(),
    identifierProcessor = postgresIdentifierProcessor(),
    expressionPrecedenceComparator = postgresExpressionPrecedenceComparator(),
    keywords = postgresKeywords(),
    functionProcessorMap = functionProcessorMap()
  )
}

function meta::external::store::relational::sqlDialectTranslation::postgres::postgresSqlDialectExtension(): Extension[1]
{
  ^Extension
  (
    type = 'PostgresSqlDialectExtension',
    moduleExtensions = [
      ^SqlDialectTranslationModuleExtension
      (
        module = sqlDialectTranslationModuleExtensionName(),
        extraSqlDialects = postgresSqlDialect()
      )
    ]
  )
}

function meta::external::store::relational::sqlDialectTranslation::postgres::postgresFunctionTestsExpectedErrors(): Map<String, String>[1]
{
  [

  ]->newMap()->cast(@Map<String, String>)
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresQuoteConfiguration(): QuoteConfiguration[1]
{
  ^QuoteConfiguration
  (
    start = '"',
    end = '"',
    escape = '""'
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectNodeProcessors(): Map<Class<Node>, NodeProcessor<Node>>[1]
{
  newMap(
    postgresDialectStatementProcessors()
    ->concatenate(
      postgresDialectRelationProcessors()
    )
    ->concatenate(
      postgresDialectExpressionProcessors()
    )
    ->concatenate(
      postgresDialectLiteralProcessors()
    )
    ->concatenate(
      postgresDialectSelectItemProcessors()
    )
    ->concatenate(
      postgresDialectOtherNodeProcessors()
    )
    ->concatenate(
      postgresDialectDDLProcessors()
    )
    ->map(n | pair($n.nodeType, $n))
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectStatementProcessors(): NodeProcessor<Statement>[*]
{
  [
    queryProcessor_default(),
    windowProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectRelationProcessors(): NodeProcessor<Relation>[*]
{
  [
    tableProcessor_default(),
    aliasedRelationProcessor_default(),
    joinProcessor_default(),
    querySpecificationProcessor_default(),
    unionProcessor_default(),
    tableSubqueryProcessor_default(),
    tablePlaceholderProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectExpressionProcessors(): NodeProcessor<meta::external::query::sql::metamodel::Expression>[*]
{
  [
    comparisonExpressionNodeProcessor_default(),
    logicalBinaryExpressionNodeProcessor_default(),
    notExpressionNodeProcessor_default(),
    arithmeticExpressionNodeProcessor_default(),
    qualifiedNameReferenceNodeProcessor_default(),
    isNullPredicateNodeProcessor_default(),
    isNotNullPredicateNodeProcessor_default(),
    negativeNodeProcessor_default(),
    currentTimeNodeProcessor_default(),
    whenClauseNodeProcessor_default(),
    searchedCaseExpressionNodeProcessor_default(),
    columnTypeProcessor_default(),
    castProcessor_default(),
    inListExpressionProcessor_default(),
    inPredicateProcessor_default(),
    extractProcessor_default(),
    betweenPredicateProcessor_default(),
    functionCallProcessor_default(),
    subQueryExpressionProcessor_default(),
    trimProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectLiteralProcessors(): NodeProcessor<Literal>[*]
{
  [
    integerLiteralNodeProcessor_default(),
    stringLiteralNodeProcessor_default(),
    booleanLiteralNodeProcessor_default(),
    longLiteralNodeProcessor_default(),
    doubleLiteralNodeProcessor_default(),
    nullLiteralNodeProcessor_default(),
    dateLiteralNodeProcessor_default(),
    timestampLiteralNodeProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectSelectItemProcessors(): NodeProcessor<SelectItem>[*]
{
  [
    allColumnsNodeProcessor_default(),
    singleColumnNodeProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectOtherNodeProcessors(): NodeProcessor<Node>[*]
{
  [
    sortItemProcessor_default(),
    selectProcessor_default(),
    withQueryProcessor_default(),
    windowFrameProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresDialectDDLProcessors(): NodeProcessor<Node>[*]
{
  [
    createTestTableProcessor_default(),
    dropTestTableProcessor_default(),
    insertIntoTestTableProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresIdentifierProcessor(): IdentifierProcessor[1]
{
  identifierProcessor_default()
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresExpressionPrecedenceComparator(): ExpressionPrecedenceComparator[1]
{
  ^ExpressionPrecedenceComparator(
    findOperatorType = findOperatorType_default_Expression_1__String_1_,
    operatorPrecedence = operatorPrecedence_default()
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::postgresKeywords(): String[*]
{
  [
    'all', 
    'analyse', 
    'analyze', 
    'and', 
    'any', 
    'array', 
    'as', 
    'asc', 
    'asymmetric', 
    'authorization', 
    'binary', 
    'both', 
    'case', 
    'cast', 
    'check', 
    'collate', 
    'collation', 
    'column', 
    'concurrently', 
    'constraint', 
    'create', 
    'cross', 
    'current_catalog', 
    'current_date', 
    'current_role', 
    'current_schema', 
    'current_time', 
    'current_timestamp', 
    'current_user', 
    'default', 
    'deferrable', 
    'desc', 
    'distinct', 
    'do', 
    'else', 
    'end', 
    'except', 
    'false', 
    'fetch', 
    'for', 
    'foreign', 
    'freeze', 
    'from', 
    'full', 
    'grant', 
    'group', 
    'having', 
    'ilike', 
    'in', 
    'initially', 
    'inner', 
    'intersect', 
    'into', 
    'is', 
    'isnull', 
    'join', 
    'lateral', 
    'leading', 
    'left', 
    'like', 
    'limit', 
    'localtime', 
    'localtimestamp', 
    'natural', 
    'not', 
    'notnull', 
    'null', 
    'offset', 
    'on', 
    'only', 
    'or', 
    'order', 
    'outer', 
    'overlaps', 
    'placing', 
    'primary', 
    'references', 
    'returning', 
    'right', 
    'select', 
    'session_user', 
    'similar', 
    'some', 
    'symmetric', 
    'system_user', 
    'table', 
    'tablesample', 
    'then', 
    'to', 
    'trailing', 
    'true', 
    'union', 
    'unique', 
    'user', 
    'using', 
    'variadic', 
    'verbose', 
    'when', 
    'where', 
    'window', 
    'with'
  ];
}

// ---------------------------- Function processing -------------------------

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::functionProcessorMap(): Map<Class<SqlFunction>, FunctionProcessor>[1]
{
  newMap([
    // Postgres Native Functions
    // Numeric
    Abs->nativeFunctionMapEntry(),
    Acos->nativeFunctionMapEntry(),
    Asin->nativeFunctionMapEntry(),
    Atan->nativeFunctionMapEntry(),
    Atan2->nativeFunctionMapEntry(),
    Cbrt->nativeFunctionMapEntry(),
    Ceil->nativeFunctionMapEntry(),
    Ceiling->nativeFunctionMapEntry(),
    Cos->nativeFunctionMapEntry(),
    Cot->nativeFunctionMapEntry(),
    Degrees->nativeFunctionMapEntry(),
    Exp->nativeFunctionMapEntry(),
    Floor->nativeFunctionMapEntry(),
    Ln->nativeFunctionMapEntry(),
    Log->nativeFunctionMapEntry(),
    Mod->nativeFunctionMapEntry(),
    Power->nativeFunctionMapEntry(),
    Round->nativeFunctionMapEntry(),
    pair(Sign, customFunctionProcessor(processorForSign_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    Sin->nativeFunctionMapEntry(),
    Sqrt->nativeFunctionMapEntry(),
    Tan->nativeFunctionMapEntry(),

    // Numeric Aggregate
    Average->nativeFunctionMapEntry(),
    Sum->nativeFunctionMapEntry(),
    VarianceSample->nativeFunctionMapEntry(),
    VariancePopulation->nativeFunctionMapEntry(),
    
    // String
    Ascii->nativeFunctionMapEntry(),
    CharLength->nativeFunctionMapEntry(),
    Chr->nativeFunctionMapEntry(),
    Concat->nativeFunctionMapEntry(),
    Left->nativeFunctionMapEntry(),
    Lower->nativeFunctionMapEntry(),
    Lpad->nativeFunctionMapEntry(),
    Ltrim->nativeFunctionMapEntry(),
    Md5->nativeFunctionMapEntry(),
    Repeat->nativeFunctionMapEntry(),
    Replace->nativeFunctionMapEntry(),
    Reverse->nativeFunctionMapEntry(),
    Rpad->nativeFunctionMapEntry(),
    Rtrim->nativeFunctionMapEntry(),
    SplitPart->nativeFunctionMapEntry(),
    StrPos->nativeFunctionMapEntry(),
    Substring->nativeFunctionMapEntry(),
    Right->nativeFunctionMapEntry(),
    Upper->nativeFunctionMapEntry(),

    // String Aggregate
    StringAgg->nativeFunctionMapEntry(),

    // Boolean Aggregate
    BoolAnd->nativeFunctionMapEntry(),
    BoolOr->nativeFunctionMapEntry(),

    // Temporal
    pair(DatePart, customFunctionProcessor(processorForDatePart_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    DateTrunc->nativeFunctionMapEntry(),
    Now->nativeFunctionMapEntry(),
    ToDate->nativeFunctionMapEntry(),
    ToTimestamp->nativeFunctionMapEntry(),

    // Miscellaneous
    Coalesce->nativeFunctionMapEntry(),

    // Aggregate
    Count->nativeFunctionMapEntry(),
    Max->nativeFunctionMapEntry(),
    Min->nativeFunctionMapEntry(),

    // Window
    CumulativeDistribution->nativeFunctionMapEntry(),
    DenseRank->nativeFunctionMapEntry(),
    FirstValue->nativeFunctionMapEntry(),
    Lag->nativeFunctionMapEntry(),
    LastValue->nativeFunctionMapEntry(),
    Lead->nativeFunctionMapEntry(),
    NthValue->nativeFunctionMapEntry(),
    Ntile->nativeFunctionMapEntry(),
    PercentRank->nativeFunctionMapEntry(),
    Rank->nativeFunctionMapEntry(),
    RowNumber->nativeFunctionMapEntry(),

    // Extension Functions
    // Numeric
    pair(Log10, argTransformFunctionProcessor('log', {n:Node[*]| literal(10)->concatenate($n)})),

    // String
    pair(RegexpLike, customFunctionProcessor(processorForRegexpLike_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(Sha1, customFunctionProcessor({f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]| processorForSha('sha1', $f, $sqlDialect, $state, $config )})),
    pair(Sha256, customFunctionProcessor({f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]| processorForSha('sha256', $f, $sqlDialect, $state, $config )}))

  ])
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::processorForSha(hashing:String[1], f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let processedArgs = $sqlDialect->processFunctionArgs($f.arguments, $state, $config);
  let hashType = '\''+$hashing+'\'';
  let digestCall = generateFunctionCallWithArgs($sqlDialect, 'digest', [$processedArgs->at(0), $hashType], [], $state, $config);
  generateFunctionCallWithArgs($sqlDialect, 'encode', [$digestCall, '\'hex\''], [], $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::processorForDatePart(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  // Postgres returns double for some reason, also, date_part to second includes milliseconds, which is non-standard.
  let datePart = simpleFunctionProcessor('date_part').processFunction->toOne()->eval($sqlDialect, $f, $state, $config);
  let roundedDatePart = $sqlDialect->generateFunctionCallWithArgs('floor', $datePart, [], $state, $config);
  $sqlDialect->generateCast($roundedDatePart, 'integer', $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::postgres::processorForSign(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  // Postgres returns sign in decimal, which is non standard.
  let floatedSign = simpleFunctionProcessor('sign').processFunction->toOne()->eval($sqlDialect, $f, $state, $config);
  $sqlDialect->generateCast($floatedSign, 'integer', $state, $config);
}

function meta::external::store::relational::sqlDialectTranslation::postgres::nativeFunctionMapEntry(functionClass: Class<SqlFunction>[1]):  Pair<Class<SqlFunction>, FunctionProcessor>[1]
{
  pair($functionClass, $functionClass->nativeFunctionProcessor())
}
