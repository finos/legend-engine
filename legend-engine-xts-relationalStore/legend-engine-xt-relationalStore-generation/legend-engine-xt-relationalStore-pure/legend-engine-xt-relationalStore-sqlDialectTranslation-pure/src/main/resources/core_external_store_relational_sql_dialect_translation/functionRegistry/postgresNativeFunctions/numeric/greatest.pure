// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::Greatest extends PostgresNativeSqlFunction
[
  $this.name == 'greatest'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::greatest(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::Greatest
  (
    name = 'greatest',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = [AbstractIntegerSqlType, AbstractIntegerSqlType],
        returnType = AbstractIntegerSqlType
      ),
      ^SqlFunctionVariation
      (
        parameterTypes = [AbstractStringSqlType, AbstractStringSqlType],
        returnType = AbstractStringSqlType
      ),
      ^SqlFunctionVariation
      (
        parameterTypes = [DoubleSqlType, DoubleSqlType],
        returnType = DoubleSqlType
      ),
      ^SqlFunctionVariation
      (
        parameterTypes = [DateSqlType, DateSqlType],
        returnType = DateSqlType
      ),
      ^SqlFunctionVariation
      (
        parameterTypes = [TimestampSqlType, TimestampSqlType],
        returnType = TimestampSqlType
      ),
      ^SqlFunctionVariation
      (
        parameterTypes = [SqlType, SqlType],
        returnType = SqlType
      )
    ],
    tests = [
      sqlFunctionTest(
        simpleFunctionCall('greatest', [literal(3), literal(2)]),
        3
      ),
      sqlFunctionTest(
        simpleFunctionCall('greatest', [literal(2.8), literal(2.851)]),
        2.851
      ),
      sqlFunctionTest(
        simpleFunctionCall('greatest', [literal('def'), literal('abc')]),
        'def'
      ),
      sqlFunctionTest(
        simpleFunctionCall('greatest', [cast(literal('2025-02-12 12:30:01'), 'TIMESTAMP'), cast(literal('2025-02-12 12:31:01'), 'TIMESTAMP')]),
        %2025-02-12T12:31:01.000000000+0000
      ),
      sqlFunctionTest(
        simpleFunctionCall('greatest', [cast(literal('2025-02-12'), 'DATE'), cast(literal('2025-02-11'), 'DATE')]),
        %2025-02-12
      )
    ]
  )
}