// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::numeric::Log10 extends ExtensionSqlFunction
[
  $this.name == 'log10'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::numeric::log10(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::numeric::Log10
  (
    name = 'log10',
    documentation = 'Returns the logarithm with base 10 for a given number.',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = AbstractNumericSqlType,
        returnType = AbstractPrecisionScaleSqlType
      )
    ],
    tests = [
      sqlFunctionTest(
        simpleFunctionCall('log10', literal(10)),
        1.0
      ),
      sqlFunctionTest(
        simpleFunctionCall('log10', literal(100.0)),
        2.0
      )
    ]
  )
}