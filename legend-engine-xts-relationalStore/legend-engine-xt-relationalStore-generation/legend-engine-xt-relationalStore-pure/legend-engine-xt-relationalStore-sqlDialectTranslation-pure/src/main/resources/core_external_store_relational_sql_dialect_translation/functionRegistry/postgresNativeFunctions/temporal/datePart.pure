// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::DatePart extends PostgresNativeSqlFunction
[
  $this.name == 'date_part'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::datePart(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::DatePart
  (
    name = 'date_part',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = [AbstractStringSqlType, AbstractTemporalSqlType],
        returnType = IntegerSqlType
      )
    ],
    tests = [
      sqlFunctionTest(
        simpleFunctionCall('date_part', [literal('day'), cast(literal('2025-01-01'), 'DATE')]),
        1
      ),
      sqlFunctionTest(
        simpleFunctionCall('date_part', [literal('day'), cast(literal('2025-01-31 12:00:00'), 'TIMESTAMP')]),
        31
      ),
      sqlFunctionTest(
        simpleFunctionCall('date_part', [literal('month'), cast(literal('2025-02-01'), 'DATE')]),
        2
      ),
      sqlFunctionTest(
        simpleFunctionCall('date_part', [literal('hour'), cast(literal('2025-01-01 12:34:56.789'), 'TIMESTAMP')]),
        12
      ),
      sqlFunctionTest(
        simpleFunctionCall('date_part', [literal('minute'), cast(literal('2025-01-01 12:34:56.789'), 'TIMESTAMP')]),
        34
      ),
      sqlFunctionTest(
        simpleFunctionCall('date_part', [literal('second'), cast(literal('2025-01-01 12:34:56.789'), 'TIMESTAMP')]),
        56
      ),
      sqlFunctionTest(
        simpleFunctionCall('date_part', [literal('millisecond'), cast(literal('2025-01-01 12:34:56.789'), 'TIMESTAMP')]),
        56789
      )
    ]
  )
}
