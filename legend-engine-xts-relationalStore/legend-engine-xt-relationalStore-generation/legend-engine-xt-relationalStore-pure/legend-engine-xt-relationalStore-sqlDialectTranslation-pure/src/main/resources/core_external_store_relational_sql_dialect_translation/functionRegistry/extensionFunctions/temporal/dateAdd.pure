// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class {sqlFunctionInfo.initializer = 'dateAdd'} meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::temporal::DateAdd extends ExtensionSqlFunction
[
  $this.name == 'dateadd'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::temporal::dateAdd(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::temporal::DateAdd
  (
    name = 'dateadd',
    documentation = 'Adds specified number (arg2) of time units (arg3) to given date/timestamp (arg1).',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = [AbstractTemporalSqlType, AbstractIntegerSqlType, AbstractStringSqlType],
        returnType = AbstractTemporalSqlType
      ),
      ^SqlFunctionVariation  // TODO: Remove, Use cast in SelectSQLQuery -> Postgres model transform 
      (
        parameterTypes = [AbstractTemporalSqlType, AbstractNumericSqlType, AbstractStringSqlType],
        returnType = AbstractTemporalSqlType
      )
    ],
    tests = [
      sqlFunctionTest(
        simpleFunctionCall('dateadd', [literal(%2014-11-30), literal(1), literal('DAY')]),
        %2014-12-01
      ),
      sqlFunctionTest(
        simpleFunctionCall('dateadd', [literal(%2014-12-04T15:22:23), literal(123456), literal('MICROSECOND')]),
        %2014-12-04T15:22:23.123456000
      ),
      sqlFunctionTest(
        simpleFunctionCall('dateadd', [literal(%2014-12-04T15:22:23), literal(123), literal('MILLISECOND')]),
        %2014-12-04T15:22:23.123000000+0000
      ),
      sqlFunctionTest(
      simpleFunctionCall('dateadd', [literal(%2022-08-17), literal(3), literal('WEEK')]),
        %2022-09-07
      )
    ]
  )
}
