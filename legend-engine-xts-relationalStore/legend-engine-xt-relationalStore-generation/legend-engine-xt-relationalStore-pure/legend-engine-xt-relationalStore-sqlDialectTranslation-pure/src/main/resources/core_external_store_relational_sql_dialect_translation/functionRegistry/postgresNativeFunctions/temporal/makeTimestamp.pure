// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;

Class {sqlFunctionInfo.initializer = 'makeTimestamp'} meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::MakeTimestamp extends PostgresNativeSqlFunction
[
  $this.name == 'make_timestamp'
]
{}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::makeTimestamp(): SqlFunction[1]
{
  ^meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::MakeTimestamp
  (
    name = 'make_timestamp',
    documentation = 'Create timestamp from year, month, day, hour, minute and seconds fields (negative years signify BC)',
    variations = [
      ^SqlFunctionVariation
      (
        parameterTypes = [AbstractIntegerSqlType, AbstractIntegerSqlType, AbstractIntegerSqlType, AbstractIntegerSqlType, AbstractIntegerSqlType, AbstractNumericSqlType],
        returnType = TimestampSqlType
      )    
    ],
    tests = [
      sqlFunctionTest(
        simpleFunctionCall('make_timestamp', [literal(2025), literal(11), literal(9), literal(12), literal(34), literal(56)]),
        %2025-11-09T12:34:56.000000000+0000
      ),
      sqlFunctionTest(
        simpleFunctionCall('make_timestamp', [literal(2025), literal(11), literal(9), literal(12), literal(34), literal(56.789)]),
        %2025-11-09T12:34:56.789000000+0000
      )
    ]
  )
}
