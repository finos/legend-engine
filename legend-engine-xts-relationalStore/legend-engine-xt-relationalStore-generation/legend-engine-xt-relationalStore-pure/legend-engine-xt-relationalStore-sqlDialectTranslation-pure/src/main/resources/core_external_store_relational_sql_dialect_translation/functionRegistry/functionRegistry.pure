// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::tests::utils::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;

Class <<typemodifiers.abstract>> meta::external::store::relational::sqlDialectTranslation::functionRegistry::SqlFunction
{
  name: String[*];
  variations: SqlFunctionVariation[1..*];
  tests: SqlFunctionTest[1..*];
  documentation: String[1];
}

Class meta::external::store::relational::sqlDialectTranslation::functionRegistry::SqlFunctionVariation
{
  parameterTypes: Class<SqlType>[*];
  returnType: Class<SqlType>[1];
  documentation: String[0..1];

  identifier() {
    $this.parameterTypes->map(t | $t.name)->joinStrings('(', ', ', '):') + $this.returnType.name->toOne()
  }: String[1];
}

Class meta::external::store::relational::sqlDialectTranslation::functionRegistry::VariadicSqlFunctionVariation extends SqlFunctionVariation
[
  hasAtLeastOneArgument:  if($this.parameterTypes->size() > 0,
                            | true,
                            | println('VariadicSqlFunctionVariation expects at least one argument, found none.');
                              false;
                          )
]
{
}

Class <<typemodifiers.abstract>> meta::external::store::relational::sqlDialectTranslation::functionRegistry::PostgresNativeSqlFunction extends SqlFunction
{
}

Class <<typemodifiers.abstract>> meta::external::store::relational::sqlDialectTranslation::functionRegistry::ExtensionSqlFunction extends SqlFunction
{
}

Class meta::external::store::relational::sqlDialectTranslation::functionRegistry::SqlFunctionTest
{
  setupData: TestSetupData[*];
  query: Node[1];
  result: Any[*];
}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::extractFunctionNames(e:meta::external::query::sql::metamodel::Expression[1]): String[*]
{
  $e->match([
    f:FunctionCall[1]|$f.name.parts->joinStrings('.')->concatenate($f.arguments->map(a|$a->extractFunctionNames())),
    e:meta::external::query::sql::metamodel::Expression[1]|[]
  ])
  
}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::sqlFunctionTest(functionCall: FunctionCall[1], result: Any[*]): SqlFunctionTest[1]
{
  ^SqlFunctionTest
  (
    query = $functionCall,
    result = $result
  )
}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::sqlFunctionTest(data: TestSetupData[*], query: Query[1], result: Any[*]): SqlFunctionTest[1]
{
  ^SqlFunctionTest
  (
    setupData = $data,
    query = $query,
    result = $result
  );
}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::sqlFunctionRegistry(): Map<Class<SqlFunction>, SqlFunction>[1]
{
  [
    // Postgres Native Functions
    // Numeric
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::abs(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::cbrt(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::ceil(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::ceiling(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::degrees(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::exp(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::ln(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::log(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::sqrt(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::acos(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::asin(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::atan(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::atan2(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::cos(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::cot(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::sin(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::tan(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::power(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::mod(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::sign(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::round(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::floor(),

    // String
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::lpad(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::rpad(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::ltrim(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::rtrim(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::ascii(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::lower(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::upper(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::repeat(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::replace(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::left(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::right(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::md5(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::charLength(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::chr(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::reverse(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::splitPart(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::substring(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::strPos(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::stringAgg(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::concat(),

    // Temporal function
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::datePart(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::dateTrunc(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::now(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::toDate(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::toTimestamp(),

    // Miscellaneous
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::misc::coalesce(),

    // Extension Functions
    // Numeric
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::numeric::log10(),

    // Boolean functions
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::boolean::regexpLike(),

    // String functions
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::string::sha1(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::string::sha256()

  ]
  ->groupBy(x | $x->type()->cast(@Class<SqlFunction>))->keyValues()
  ->map({kv |
    assert($kv.second.values->size() == 1, | 'Multiple SQL functions in function registry with same name - ' + $kv.first.name->toOne());
    pair($kv.first, $kv.second.values->toOne());
  })
  ->newMap()
}
