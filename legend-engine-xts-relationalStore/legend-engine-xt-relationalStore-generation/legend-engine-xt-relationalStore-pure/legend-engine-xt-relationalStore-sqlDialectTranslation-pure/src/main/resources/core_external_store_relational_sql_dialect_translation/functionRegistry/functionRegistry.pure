// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::sqlTypes::*;

Class <<typemodifiers.abstract>> meta::external::store::relational::sqlDialectTranslation::functionRegistry::SqlFunction
[
  testsWithMatchingFunction: $this.tests->size()->range()->forAll({i |
    let t = $this.tests->at($i);
    if ($t.functionCall.name.parts == $this.name,
        | true,
        | println('SqlFunctionTest at index ' + toString($i) + ' for function "' + $this.name->joinStrings('.') + '" is for a different function "' + $t.functionCall.name.parts->joinStrings('.') + '"');
          false;
    );
  })
]
{
  name: String[*];
  variations: SqlFunctionVariation[1..*];
  tests: SqlFunctionTest[1..*];
}

Class meta::external::store::relational::sqlDialectTranslation::functionRegistry::SqlFunctionVariation
{
  parameterTypes: Class<SqlType>[*];
  returnType: Class<SqlType>[1];

  identifier() {
    '(' + $this.parameterTypes->map(t | $t.name)->joinStrings(', ') + '):' + $this.returnType.name->toOne()
  }: String[1];
}

Class <<typemodifiers.abstract>> meta::external::store::relational::sqlDialectTranslation::functionRegistry::PostgresNativeSqlFunction extends SqlFunction
{
}

Class <<typemodifiers.abstract>> meta::external::store::relational::sqlDialectTranslation::functionRegistry::ExtensionSqlFunction extends SqlFunction
{
}

Class meta::external::store::relational::sqlDialectTranslation::functionRegistry::SqlFunctionTest
{
  functionCall: FunctionCall[1];
  result: Any[*];
}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::sqlFunctionTest(functionCall: FunctionCall[1], result: Any[*]): SqlFunctionTest[1]
{
  ^SqlFunctionTest
  (
    functionCall = $functionCall,
    result = $result
  )
}

function meta::external::store::relational::sqlDialectTranslation::functionRegistry::sqlFunctionRegistry(): Map<String, SqlFunction>[1]
{
  [
    // Postgres Native Functions
    // Numeric
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numericFunctions::abs(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numericFunctions::cbrt(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numericFunctions::ceil(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numericFunctions::ceiling(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numericFunctions::degrees(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numericFunctions::exp(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numericFunctions::ln(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numericFunctions::log(),
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numericFunctions::sqrt(),
    
    // Extension Functions
    // Numeric
    meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::numericFunctions::log10()
  ]
  ->groupBy(x | $x.name->joinStrings('.')->toLower())->keyValues()
  ->map({kv |
    assert($kv.second.values->size() == 1, | 'Multiple SQL functions in function registry with same name - ' + $kv.first);
    pair($kv.first, $kv.second.values->toOne());
  })
  ->newMap()
}
