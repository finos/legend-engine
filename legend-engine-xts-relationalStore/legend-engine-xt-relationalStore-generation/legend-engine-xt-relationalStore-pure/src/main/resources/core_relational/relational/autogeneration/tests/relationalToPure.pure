import meta::relational::transform::autogen::*;
import meta::relational::transform::autogen::tests::*;
import meta::pure::functions::asserts::*;

function <<test.Test>> meta::relational::transform::autogen::tests::testClassesAssociationsAndMappingFromSchema():Boolean[1]
{
   let extensions = meta::relational::extension::relationalExtension('relational');
   let expected = ^meta::protocols::pure::vX_X_X::metamodel::PureModelContextData
   (
     _type = 'data',
     serializer = ^meta::protocols::Protocol(name='pure', version='vX_X_X'),
     elements = meta::protocols::pure::vX_X_X::transformation::fromPureGraph::mapping::transformMapping(meta::relational::transform::autogen::tests::testDBMapping, $extensions)
                   ->concatenate(meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformPackageableElement(meta::relational::transform::autogen::tests::Company, $extensions))
                   ->concatenate(meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformPackageableElement(meta::relational::transform::autogen::tests::Employee, $extensions))
                   ->concatenate(meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformPackageableElement(meta::relational::transform::autogen::tests::City, $extensions))
                   ->concatenate(meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformPackageableElement(meta::relational::transform::autogen::tests::Passport, $extensions))
                   ->concatenate(meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformPackageableElement(meta::relational::transform::autogen::tests::Country, $extensions))
                   ->concatenate(meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformAssociation(meta::relational::transform::autogen::tests::CompanyEmployee, $extensions))
                   ->concatenate(meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformAssociation(meta::relational::transform::autogen::tests::EmployeeCity, $extensions))
                   ->concatenate(meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformAssociation(meta::relational::transform::autogen::tests::EmployeePassport, $extensions))
                   ->concatenate(meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformAssociation(meta::relational::transform::autogen::tests::PassportCountry, $extensions))
   )->meta::alloy::metadataServer::alloyToJSON();
   let actual = meta::relational::transform::autogen::classesAssociationsAndMappingFromSchema(testDB.schemas->toOne(), meta::relational::transform::autogen::tests->elementToPath()+'::', $extensions);
   assertJsonStringsEqual($expected, $actual);
}

Class meta::relational::transform::autogen::tests::Company
{
   name : String[1];
   location : String[1];
}

Class meta::relational::transform::autogen::tests::Employee
{
   fullname : String[1];
   passportId : Integer[1];
   firmname : String[0..1];
   location : String[0..1];
}

Class meta::relational::transform::autogen::tests::City
{
   cityId : Integer[1];
   name : String[0..1];
}

Class meta::relational::transform::autogen::tests::Passport
{
   passportId : Integer[1];
   countryName : String[0..1];
}

Class meta::relational::transform::autogen::tests::Country
{
   name : String[1];
}

Association meta::relational::transform::autogen::tests::CompanyEmployee
{
   company : meta::relational::transform::autogen::tests::Company[1];
   employee : meta::relational::transform::autogen::tests::Employee[1..*];
}

Association meta::relational::transform::autogen::tests::EmployeeCity
{
   employee : meta::relational::transform::autogen::tests::Employee[1..*];
   city : meta::relational::transform::autogen::tests::City[1..*];
}

Association meta::relational::transform::autogen::tests::EmployeePassport
{
   employee : meta::relational::transform::autogen::tests::Employee[1];
   passport : meta::relational::transform::autogen::tests::Passport[1];
}

Association meta::relational::transform::autogen::tests::PassportCountry
{
   passport : meta::relational::transform::autogen::tests::Passport[1..*];
   country : meta::relational::transform::autogen::tests::Country[1];
}

###Mapping
Mapping meta::relational::transform::autogen::tests::testDBMapping
(
   *meta::relational::transform::autogen::tests::Company[meta_relational_transform_autogen_tests_Company] : Relational
   {
     ~primaryKey
     (
       [meta::relational::transform::autogen::tests::testDB]Company.name
     )
     ~mainTable [meta::relational::transform::autogen::tests::testDB]Company
     name : [meta::relational::transform::autogen::tests::testDB]Company.name,
     location : [meta::relational::transform::autogen::tests::testDB]Company.location
   }
   *meta::relational::transform::autogen::tests::Employee[meta_relational_transform_autogen_tests_Employee] : Relational
   {
     ~primaryKey
     (
       [meta::relational::transform::autogen::tests::testDB]Employee.fullname,
       [meta::relational::transform::autogen::tests::testDB]Employee.passportId
     )
     ~mainTable [meta::relational::transform::autogen::tests::testDB]Employee
     fullname : [meta::relational::transform::autogen::tests::testDB]Employee.fullname,
     passportId : [meta::relational::transform::autogen::tests::testDB]Employee.passportId,
     firmname : [meta::relational::transform::autogen::tests::testDB]Employee.firmname,
     location : [meta::relational::transform::autogen::tests::testDB]Employee.location
   }
   *meta::relational::transform::autogen::tests::City[meta_relational_transform_autogen_tests_City] : Relational
   {
     ~primaryKey
     (
       [meta::relational::transform::autogen::tests::testDB]City.city_id
     )
     ~mainTable [meta::relational::transform::autogen::tests::testDB]City
     cityId : [meta::relational::transform::autogen::tests::testDB]City.city_id,
     name : [meta::relational::transform::autogen::tests::testDB]City.name
   }
   *meta::relational::transform::autogen::tests::Passport[meta_relational_transform_autogen_tests_Passport] : Relational
   {
     ~primaryKey
     (
       [meta::relational::transform::autogen::tests::testDB]Passport.passportId
     )
     ~mainTable [meta::relational::transform::autogen::tests::testDB]Passport
     passportId : [meta::relational::transform::autogen::tests::testDB]Passport.passportId,
     countryName : [meta::relational::transform::autogen::tests::testDB]Passport.countryName
   }
   *meta::relational::transform::autogen::tests::Country[meta_relational_transform_autogen_tests_Country] : Relational
   {
     ~primaryKey
     (
       [meta::relational::transform::autogen::tests::testDB]Country.name
     )
     ~mainTable [meta::relational::transform::autogen::tests::testDB]Country
     name : [meta::relational::transform::autogen::tests::testDB]Country.name
   }
   meta::relational::transform::autogen::tests::CompanyEmployee : Relational
   {
      AssociationMapping
      (
        company[meta_relational_transform_autogen_tests_Employee,meta_relational_transform_autogen_tests_Company] : [meta::relational::transform::autogen::tests::testDB]@CompanyEmployee,
        employee[meta_relational_transform_autogen_tests_Company,meta_relational_transform_autogen_tests_Employee] : [meta::relational::transform::autogen::tests::testDB]@CompanyEmployee
      )
   }
   meta::relational::transform::autogen::tests::EmployeeCity : Relational
   {
      AssociationMapping
      (
        employee[meta_relational_transform_autogen_tests_City,meta_relational_transform_autogen_tests_Employee] : [meta::relational::transform::autogen::tests::testDB]@EmployeeCity,
        city[meta_relational_transform_autogen_tests_Employee,meta_relational_transform_autogen_tests_City] : [meta::relational::transform::autogen::tests::testDB]@EmployeeCity
      )
   }
   meta::relational::transform::autogen::tests::EmployeePassport : Relational
   {
      AssociationMapping
      (
        employee[meta_relational_transform_autogen_tests_Passport,meta_relational_transform_autogen_tests_Employee] : [meta::relational::transform::autogen::tests::testDB]@EmployeePassport,
        passport[meta_relational_transform_autogen_tests_Employee,meta_relational_transform_autogen_tests_Passport] : [meta::relational::transform::autogen::tests::testDB]@EmployeePassport
      )
   }
   meta::relational::transform::autogen::tests::PassportCountry : Relational
   {
      AssociationMapping
      (
        passport[meta_relational_transform_autogen_tests_Country,meta_relational_transform_autogen_tests_Passport] : [meta::relational::transform::autogen::tests::testDB]@PassportCountry,
        country[meta_relational_transform_autogen_tests_Passport,meta_relational_transform_autogen_tests_Country] : [meta::relational::transform::autogen::tests::testDB]@PassportCountry
      )
   }
)

###Relational
Database meta::relational::transform::autogen::tests::testDB
(
   Table Company(name VARCHAR(200) PRIMARY KEY, location VARCHAR(200) NOT NULL)
   Table Employee(fullname VARCHAR(1000) PRIMARY KEY, passportId INT PRIMARY KEY, firmname VARCHAR(200), location VARCHAR(200))
   Table City(city_id INT PRIMARY KEY, name VARCHAR(200))
   Table Passport(passportId INT PRIMARY KEY, countryName VARCHAR(200))
   Table Country(name VARCHAR(200) PRIMARY KEY)
   Join CompanyEmployee(Company.location != 'Toronto' and Employee.fullname = 'John Doe' and Company.name = Employee.firmname)
   Join EmployeeCity(Employee.location = City.name)
   Join EmployeePassport(Employee.passportId = Passport.passportId)
   Join PassportCountry(Passport.countryName = Country.name)
)