// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::metamodel::*;
import meta::relational::dbTestRunner::*;
import meta::pure::test::*;

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::in::testIn(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='in', parameters=[^Literal(value='a'), ^LiteralList(values=[^Literal(value='a')])]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::coalesce::testCoalesce(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='coalesce', parameters=[^Literal(value=^SQLNull()), ^Literal(value='a')]);
  let expected = ^Literal(value='a');
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::md5::testMD5(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='md5', parameters=[^Literal(value='hello')]);
  let expected = ^Literal(value='5d41402abc4b2a76b9719d911017c592');
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::sha1::testSHA1(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='sha1', parameters=[^Literal(value='hello')]);
  let expected = ^Literal(value='aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d');
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::sha256::testSHA256(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='sha256', parameters=[^Literal(value='hello')]);
  let expected = ^Literal(value='2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824');
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::greatest::string(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='greatest', parameters=[^Literal(value = 'b'), ^Literal(value = 'c'), ^Literal(value = 'a')]);
  let expected = ^Literal(value = 'c');
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::greatest::number(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='greatest', parameters=[^Literal(value = 2), ^Literal(value = 3), ^Literal(value = 1)]);
  let expected = ^Literal(value = 3);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::greatest::date(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='greatest', parameters=[^Literal(value = %2023-06-01), ^Literal(value = %2023-12-01), ^Literal(value = %2023-01-01)]);
  let expected = ^Literal(value = %2023-12-01);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::greatest::boolean(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='greatest', parameters=[^Literal(value = true), ^Literal(value = false)]);
  let expected = ^Literal(value = true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::least::string(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='least', parameters=[^Literal(value = 'b'), ^Literal(value = 'a'), ^Literal(value = 'c')]);
  let expected = ^Literal(value = 'a');
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::least::number(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='least', parameters=[^Literal(value = 2), ^Literal(value = 1), ^Literal(value = 3)]);
  let expected = ^Literal(value = 1);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::least::date(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='least', parameters=[^Literal(value = %2023-06-01), ^Literal(value = %2023-01-01), ^Literal(value = %2023-12-01)]);
  let expected = ^Literal(value = %2023-01-01);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::least::boolean(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='least', parameters=[^Literal(value = true), ^Literal(value = false)]);
  let expected = ^Literal(value = false);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}