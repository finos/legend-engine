//Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::pure::executionPlan::profiles::*;
import meta::pure::runtime::*;
import meta::pure::mapping::*;
import meta::relational::metamodel::execute::*;
import meta::relational::functions::database::*;
import meta::relational::tests::mapping::union::*;
import meta::pure::alloy::connections::alloy::specification::*;
import meta::pure::alloy::connections::alloy::authentication::*;
import meta::relational::runtime::*;
import meta::pure::alloy::connections::*;
import meta::pure::executionPlan::*;
import meta::relational::tests::*;
import meta::pure::graphFetch::execution::*;
import meta::relational::tests::model::simple::*;


function <<test.BeforePackage>> meta::relational::graphFetch::tests::union::propertyLevel::setup(): Boolean[1]
{
  let runtime =  ^Runtime(connections = [^TestDatabaseConnection(element=meta::relational::tests::mapping::union::myDB, type=DatabaseType.H2)]);
  let connection  = $runtime.connections->at(0)->cast(@DatabaseConnection);
   
  executeInDb('Drop table if exists PersonSet1;', $connection);    
  executeInDb('Create Table PersonSet1 (ID INT, lastName_s1 VARCHAR(200), FirmID INT, ADDRESSID INT, NICKNAME VARCHAR(200));', $connection);    
  executeInDb('insert into PersonSet1 (ID, lastName_s1, FirmID, ADDRESSID) values (1, \'Scott\', 1, 1);', $connection);    
  executeInDb('insert into PersonSet1 (ID, lastName_s1, FirmID, ADDRESSID) values (2, \'Anand\', 1, 2);', $connection);    
  executeInDb('insert into PersonSet1 (ID, lastName_s1, FirmID, ADDRESSID) values (3, \'Roberts\', 2, 2);', $connection);
  executeInDb('insert into PersonSet1 (ID, lastName_s1, FirmID, ADDRESSID) values (4, \'David\', 2, 1);', $connection);   
  executeInDb('insert into PersonSet1 (ID, lastName_s1, FirmID, ADDRESSID) values (21, \'Bala\', 3, 1);', $connection);
  executeInDb('insert into PersonSet1 (ID, lastName_s1, FirmID, ADDRESSID) values (22, \'Raman\', 3, 2);', $connection);

  executeInDb('Drop table if exists PersonSet2;', $connection);    
  executeInDb('Create Table PersonSet2 (ID INT, lastName_s2 VARCHAR(200), FirmID INT, ADDRESSID INT);', $connection);    
  executeInDb('insert into PersonSet2 (ID, lastName_s2, FirmID, ADDRESSID) values (5, \'Taylor\', 1, 1);', $connection);    
  executeInDb('insert into PersonSet2 (ID, lastName_s2, FirmID, ADDRESSID) values (6, \'Wright\', 1, 2);', $connection);
  executeInDb('insert into PersonSet2 (ID, lastName_s2, FirmID, ADDRESSID) values (7, \'Mark\', 2, 1);', $connection);
  executeInDb('insert into PersonSet2 (ID, lastName_s2, FirmID, ADDRESSID) values (8, \'Allen\', 2, 2);', $connection);    
  executeInDb('insert into PersonSet2 (ID, lastName_s2, FirmID, ADDRESSID) values (19, \'Bark\', 3, 1);', $connection);
  executeInDb('insert into PersonSet2 (ID, lastName_s2, FirmID, ADDRESSID) values (20, \'Simon\', 3, 2);', $connection); 

  executeInDb('Drop table if exists PersonSet3;', $connection);    
  executeInDb('Create Table PersonSet3 (Set3ID INT, lastName_s3 VARCHAR(200), FirmID INT, ADDRESSID INT);', $connection);    
  executeInDb('insert into PersonSet3 (Set3ID, lastName_s3, FirmID, ADDRESSID) values (9, \'Rafael\', 1, 1);', $connection);    
  executeInDb('insert into PersonSet3 (Set3ID, lastName_s3, FirmID, ADDRESSID) values (10, \'wick\', 1, 2);', $connection);
  executeInDb('insert into PersonSet3 (Set3ID, lastName_s3, FirmID, ADDRESSID) values (11, \'root\', 1, 3);', $connection);
  executeInDb('insert into PersonSet3 (Set3ID, lastName_s3, FirmID, ADDRESSID) values (13, \'gayle\', 2, 1);', $connection);
  executeInDb('insert into PersonSet3 (Set3ID, lastName_s3, FirmID, ADDRESSID) values (14, \'Plesis\', 2, 2);', $connection);
  executeInDb('insert into PersonSet3 (Set3ID, lastName_s3, FirmID, ADDRESSID) values (15, \'Shock\', 2, 3);', $connection);
  executeInDb('insert into PersonSet3 (Set3ID, lastName_s3, FirmID, ADDRESSID) values (16, \'Rock\', 3, 1);', $connection);
  executeInDb('insert into PersonSet3 (Set3ID, lastName_s3, FirmID, ADDRESSID) values (17, \'Smith\', 3, 2);', $connection);
  executeInDb('insert into PersonSet3 (Set3ID, lastName_s3, FirmID, ADDRESSID) values (18, \'Cook\', 3, 3);', $connection);

  executeInDb('Drop table if exists FirmSet1;', $connection);    
  executeInDb('Create Table FirmSet1(id INT, name VARCHAR(200),NICKNAME VARCHAR(200));', $connection);    
  executeInDb('insert into FirmSet1 (id, name) values (1, \'Firm X\');', $connection);    

  executeInDb('Drop table if exists FirmSet2;', $connection);    
  executeInDb('Create Table FirmSet2(id INT, name VARCHAR(200));', $connection);    
  executeInDb('insert into FirmSet2 (id, name) values (2, \'Firm A\');', $connection);    

  executeInDb('Drop table if exists FirmSet3;', $connection);    
  executeInDb('Create Table FirmSet3(id INT, name VARCHAR(200));', $connection);    
  executeInDb('insert into FirmSet3(id, name) values (3, \'Firm B\');', $connection); 

  executeInDb('Drop table if exists AddressSet1;', $connection);    
  executeInDb('Create Table AddressSet1(id INT, name VARCHAR(200));', $connection);    
  executeInDb('insert into AddressSet1 (id, name) values (1, \'New York\');', $connection);   
  
  executeInDb('Drop table if exists AddressSet2;', $connection);    
  executeInDb('Create Table AddressSet2(id INT, name VARCHAR(200));', $connection);    
  executeInDb('insert into AddressSet2 (id, name) values (2, \'Hoboken\');', $connection);   

  executeInDb('Drop table if exists AddressSet3;', $connection);    
  executeInDb('Create Table AddressSet3(id INT, name VARCHAR(200));', $connection);    
  executeInDb('insert into AddressSet3(id, name) values (3, \'Dalas\');', $connection);  

  executeInDb('Drop table if exists Firm;', $connection);    
  executeInDb('Create Table Firm(id INT, name VARCHAR(200));', $connection);    
  executeInDb('insert into Firm (id, name) values (1, \'Firm X\');', $connection);    
  executeInDb('insert into Firm (id, name) values (2, \'Firm A\');', $connection);   
  true;
} 

function <<test.Test, test.AlloyOnly>> {serverVersion.start='v1_32_0'} meta::relational::graphFetch::tests::union::propertyLevel::test1():Boolean[1]
{
  let tree = #{
                Firm{
                  legalName,
                  employees{
                    lastName,
                    address{
                      name
                    }
                  }
                }
              }#;

  let result = execute(|Firm.all()->graphFetch($tree)->serialize($tree), meta::relational::graphFetch::tests::union::propertyLevel::Mapping1, testRuntime(), meta::relational::extension::relationalExtensions()).values;
  assertJsonStringsEqual(
  '[{"legalName":"Firm X","employees":[{"lastName":"Scott","address":{"name":"New York"}},{"lastName":"Anand","address":{"name":"Hoboken"}},{"lastName":"Taylor","address":{"name":"New York"}},{"lastName":"Wright","address":{"name":"Hoboken"}}]},' +
  '{"legalName":"Firm A","employees":[{"lastName":"Roberts","address":{"name":"Hoboken"}},{"lastName":"David","address":{"name":"New York"}},{"lastName":"Mark","address":{"name":"New York"}},{"lastName":"Allen","address":{"name":"Hoboken"}}]}]',
  $result
  );
}

function <<test.Test, test.AlloyOnly>> {serverVersion.start='v1_32_0'} meta::relational::graphFetch::tests::union::propertyLevel::test2():Boolean[1]
{
  let tree = #{
                Firm{
                  legalName,
                  employees{
                    lastName,
                    address{
                      name
                    }
                  }
                }
             }#;

  let result = execute(|Firm.all()->graphFetch($tree)->serialize($tree), meta::relational::graphFetch::tests::union::propertyLevel::Mapping2, testRuntime(), meta::relational::extension::relationalExtensions()).values;
  assertJsonStringsEqual(
  '[{"legalName":"Firm X","employees":[{"lastName":"Scott","address":{"name":"New York"}},{"lastName":"Anand","address":null},{"lastName":"Taylor","address":null},{"lastName":"Wright","address":{"name":"Hoboken"}}]},' +
  '{"legalName":"Firm A","employees":[{"lastName":"Roberts","address":null},{"lastName":"David","address":{"name":"New York"}},{"lastName":"Mark","address":null},{"lastName":"Allen","address":{"name":"Hoboken"}}]}]',
  $result
  );

}

function <<test.Test, test.AlloyOnly>> {serverVersion.start='v1_32_0'} meta::relational::graphFetch::tests::union::propertyLevel::test3():Boolean[1]
{
  let tree = #{
                Firm{
                  legalName,
                  employees{
                    lastName,
                    address{
                      name
                    }
                  }
                }
             }#;

  let result = execute(|Firm.all()->graphFetch($tree)->serialize($tree), meta::relational::graphFetch::tests::union::propertyLevel::Mapping3, testRuntime(), meta::relational::extension::relationalExtensions()).values;
  assertJsonStringsEqual(
  '[{"legalName":"Firm X","employees":[{"lastName":"Scott","address":{"name":"New York"}},{"lastName":"Anand","address":{"name":"Hoboken"}},{"lastName":"Taylor","address":{"name":"New York"}},{"lastName":"Wright","address":{"name":"Hoboken"}}]},' +
  '{"legalName":"Firm A","employees":[{"lastName":"Roberts","address":{"name":"Hoboken"}},{"lastName":"David","address":{"name":"New York"}},{"lastName":"Mark","address":{"name":"New York"}},{"lastName":"Allen","address":{"name":"Hoboken"}}]}]',
  $result
  );
}

function <<test.Test, test.AlloyOnly>> {serverVersion.start='v1_32_0'} meta::relational::graphFetch::tests::union::propertyLevel::test4():Boolean[1]
{
  let tree = #{
                Firm{
                  legalName,
                  employees{
                    lastName,
                    address{
                      name
                    }
                  }
                }
             }#;

  let result = execute(|Firm.all()->graphFetch($tree)->serialize($tree), meta::relational::graphFetch::tests::union::propertyLevel::Mapping4, testRuntime(), meta::relational::extension::relationalExtensions()).values;
  assertJsonStringsEqual(
  '[{"legalName":"Firm X","employees":[{"lastName":"Scott","address":{"name":"New York"}},{"lastName":"Anand","address":{"name":"Hoboken"}}]},' +
  '{"legalName":"Firm A","employees":[{"lastName":"Mark","address":{"name":"New York"}},{"lastName":"Allen","address":{"name":"Hoboken"}}]}]',
  $result
  );
}

function <<test.Test, test.AlloyOnly>> {serverVersion.start='v1_32_0'} meta::relational::graphFetch::tests::union::propertyLevel::test5():Boolean[1]
{
  let tree = #{
                Firm{
                  legalName,
                  employees{
                    lastName,
                    address{
                      name
                    }
                  }
                }
             }#;

  let result = execute(|Firm.all()->graphFetch($tree)->serialize($tree), meta::relational::graphFetch::tests::union::propertyLevel::Mapping5, testRuntime(), meta::relational::extension::relationalExtensions()).values;
  assertJsonStringsEqual(
  '[{"legalName":"Firm X","employees":[{"lastName":"Scott","address":{"name":"New York"}},{"lastName":"Anand","address":null},{"lastName":"Taylor","address":null},{"lastName":"Wright","address":{"name":"Hoboken"}}]},' +
  '{"legalName":"Firm A","employees":[{"lastName":"Roberts","address":null},{"lastName":"David","address":{"name":"New York"}},{"lastName":"Mark","address":null},{"lastName":"Allen","address":{"name":"Hoboken"}}]}]' ,
  $result
  );
}

function <<test.Test, test.AlloyOnly>> {serverVersion.start='v1_32_0'} meta::relational::graphFetch::tests::union::propertyLevel::test6():Boolean[1]
{
  let tree = #{
                Firm{
                  legalName,
                  employees{
                    lastName,
                    address{
                      name
                    }
                  }
                }
              }#;

  let result = execute(|Firm.all()->graphFetch($tree)->serialize($tree), meta::relational::graphFetch::tests::union::propertyLevel::Mapping6, testRuntime(), meta::relational::extension::relationalExtensions()).values;
  assertJsonStringsEqual(
  '[{"legalName":"Firm B","employees":[{"lastName":"Bala","address":{"name":"New York"}},{"lastName":"Raman","address":{"name":"Hoboken"}},{"lastName":"Bark","address":{"name":"New York"}},{"lastName":"Simon","address":{"name":"Hoboken"}},{"lastName":"Rock","address":{"name":"New York"}},{"lastName":"Smith","address":{"name":"Hoboken"}},{"lastName":"Cook","address":{"name":"Dalas"}}]},' +
  '{"legalName":"Firm X","employees":[{"lastName":"Scott","address":{"name":"New York"}},{"lastName":"Anand","address":{"name":"Hoboken"}},{"lastName":"Taylor","address":{"name":"New York"}},{"lastName":"Wright","address":{"name":"Hoboken"}},{"lastName":"Rafael","address":{"name":"New York"}},{"lastName":"wick","address":{"name":"Hoboken"}},{"lastName":"root","address":{"name":"Dalas"}}]},' +
  '{"legalName":"Firm A","employees":[{"lastName":"Roberts","address":{"name":"Hoboken"}},{"lastName":"David","address":{"name":"New York"}},{"lastName":"Mark","address":{"name":"New York"}},{"lastName":"Allen","address":{"name":"Hoboken"}},{"lastName":"gayle","address":{"name":"New York"}},{"lastName":"Plesis","address":{"name":"Hoboken"}},{"lastName":"Shock","address":{"name":"Dalas"}}]}]',
  $result
  );
}

###Mapping
import meta::relational::tests::mapping::union::*;
import meta::relational::tests::model::simple::*;


                      //       F1              U       F2
                      //     /    \                  /    \
                      //    P1     P2              P1     P2
                      //   / \     /  \          / \     /  \
                      //  A1  A2  A1  A2        A1  A2  A1  A2
Mapping meta::relational::graphFetch::tests::union::propertyLevel::Mapping1
(
  *Firm : Operation
  {
    meta::pure::router::operations::special_union_OperationSetImplementation_1__SetImplementation_MANY_(firm_set1, firm_set2)   
  }

  *Person : Operation
  {
    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(person_set1, person_set2)   
  }

  *Address : Operation
  {
    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(a_set1, a_set2)
  }   

  Person[person_set1] : Relational
  {
      lastName : [myDB]PersonSet1.lastName_s1,
      address[a_set1] : [myDB]@PersonSet1AddressSet1_ADDRESSID,
      address[a_set2] : [myDB]@PersonSet1AddressSet2_ADDRESSID
  }
          
  Person[person_set2] : Relational
  {
      lastName : [myDB]PersonSet2.lastName_s2,
      address[a_set1] : [myDB]@PersonSet2AddressSet1_ADDRESSID,
      address[a_set2] : [myDB]@PersonSet2AddressSet2_ADDRESSID
  }
          
  Firm[firm_set1] : Relational
  {
      legalName : [myDB]FirmSet1.name,
      employees[person_set1]:[myDB]@firm1_person1_join,
      employees[person_set2]:[myDB]@firm1_person2_join
  }

  Firm[firm_set2]  : Relational
  {
      legalName : [myDB]FirmSet2.name,
      employees[person_set1]:[myDB]@firm2_person1_join,
      employees[person_set2]:[myDB]@firm2_person2_join
  }

  Address[a_set1] : Relational
  {
    name : [myDB]AddressSet1.name
  }

  Address[a_set2] : Relational
  {
    name : [myDB]AddressSet2.name
  }   
)

                      //      F
                      //     / \
                      //    P1  P2
                      //   /     \
                      //  A1      A2
Mapping meta::relational::graphFetch::tests::union::propertyLevel::Mapping2
(
  *Person : Operation
  {
    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(person_set1, person_set2)   
  }
   
  *Address : Operation
  {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(a_set1, a_set2)
  } 

  Person[person_set1] : Relational
  {
    lastName : [myDB]PersonSet1.lastName_s1,
    address[a_set1] : [myDB]@PersonSet1AddressSet1_ADDRESSID
  }
            
  Person[person_set2] : Relational
  {
    lastName : [myDB]PersonSet2.lastName_s2,
    address[a_set2] : [myDB]@PersonSet2AddressSet2_ADDRESSID
  }
            
  Firm : Relational
  {
    legalName : [myDB]Firm.name,
    employees[person_set1]:[myDB]@firmPersonSet1,
    employees[person_set2]:[myDB]@firmPersonSet2
  }
   
  Address[a_set1] : Relational
  {
    name : [myDB]AddressSet1.name
  }

  Address[a_set2] : Relational
  {
    name : [myDB]AddressSet2.name
  }   
)

                      //       F              
                      //     /    \              
                      //    P1     P2            
                      //   / \     /  \         
                      //  A1  A2  A1  A2        
Mapping meta::relational::graphFetch::tests::union::propertyLevel::Mapping3
(
  *Person : Operation
  {
    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(person_set1, person_set2)   
  }

  *Address : Operation
  {
    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(a_set1, a_set2)
  }

  Person[person_set1] : Relational
  {
      lastName : [myDB]PersonSet1.lastName_s1,
      address[a_set1] : [myDB]@PersonSet1AddressSet1_ADDRESSID,
      address[a_set2] : [myDB]@PersonSet1AddressSet2_ADDRESSID
  }
          
  Person[person_set2] : Relational
  {
      lastName : [myDB]PersonSet2.lastName_s2,
      address[a_set1] : [myDB]@PersonSet2AddressSet1_ADDRESSID,
      address[a_set2] : [myDB]@PersonSet2AddressSet2_ADDRESSID
  }
  
  Firm : Relational
  {
      legalName : [myDB]Firm.name,
      employees[person_set1]:[myDB]@firmPersonSet1,
      employees[person_set2]:[myDB]@firmPersonSet2
  }
  
  Address[a_set1] : Relational
  {
    name : [myDB]AddressSet1.name
  }

  Address[a_set2] : Relational
  {
    name : [myDB]AddressSet2.name
  }   
)

                      //       F1              U        F2
                      //       |                        |
                      //       P1                       P2
                      //      / \                      /  \
                      //     A1  A2                   A1  A2
Mapping meta::relational::graphFetch::tests::union::propertyLevel::Mapping4
(
  *Firm : Operation
  {
      meta::pure::router::operations::special_union_OperationSetImplementation_1__SetImplementation_MANY_(firm_set1, firm_set2)   
  }

  *Person : Operation
  {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(person_set1, person_set2)   
  }

  *Address : Operation
  {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(a_set1, a_set2)
  }

  Person[person_set1] : Relational
  {
      lastName : [myDB]PersonSet1.lastName_s1,
      address[a_set1] : [myDB]@PersonSet1AddressSet1_ADDRESSID,
      address[a_set2] : [myDB]@PersonSet1AddressSet2_ADDRESSID
  }
          
  Person[person_set2] : Relational
  {
      lastName : [myDB]PersonSet2.lastName_s2,
      address[a_set1] : [myDB]@PersonSet2AddressSet1_ADDRESSID,
      address[a_set2] : [myDB]@PersonSet2AddressSet2_ADDRESSID
  }
          
  Firm[firm_set1] : Relational
  {
      legalName : [myDB]FirmSet1.name,
      employees[person_set1]:[myDB]@firm1_person1_join
  }

  Firm[firm_set2]  : Relational
  {
      legalName : [myDB]FirmSet2.name,
      employees[person_set2]:[myDB]@firm2_person2_join
  }
  
  Address[a_set1] : Relational
  {
    name : [myDB]AddressSet1.name
  }

  Address[a_set2] : Relational
  {
    name : [myDB]AddressSet2.name
  }   
)

                      //       F1              U       F2
                      //     /    \                  /    \
                      //    P1     P2              P1      P2
                      //   /        \             /         \
                      //  A1        A2           A1          A2
Mapping meta::relational::graphFetch::tests::union::propertyLevel::Mapping5
(
  *Firm : Operation
  {
      meta::pure::router::operations::special_union_OperationSetImplementation_1__SetImplementation_MANY_(firm_set1, firm_set2)   
  }

  *Person : Operation
  {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(person_set1, person_set2)   
  }

  *Address : Operation
  {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(a_set1, a_set2)
  }

  Person[person_set1] : Relational
  {
      lastName : [myDB]PersonSet1.lastName_s1,
      address[a_set1] : [myDB]@PersonSet1AddressSet1_ADDRESSID
  }
          
  Person[person_set2] : Relational
  {
      lastName : [myDB]PersonSet2.lastName_s2,
      address[a_set2] : [myDB]@PersonSet2AddressSet2_ADDRESSID
  }
          
  Firm[firm_set1] : Relational
  {
      legalName : [myDB]FirmSet1.name,
      employees[person_set1]:[myDB]@firm1_person1_join,
      employees[person_set2]:[myDB]@firm1_person2_join
  }

  Firm[firm_set2]  : Relational
  {
      legalName : [myDB]FirmSet2.name,
      employees[person_set1]:[myDB]@firm2_person1_join,
      employees[person_set2]:[myDB]@firm2_person2_join
  }
  
  Address[a_set1] : Relational
  {
    name : [myDB]AddressSet1.name
  }

  Address[a_set2] : Relational
  {
    name : [myDB]AddressSet2.name
  }   
)

                      //       F1              U       F2                    // with 3 sets of each
                      //     /    \                  /    \
                      //    P1     P2              P1     P2
                      //   / \     /  \          / \     /  \
                      //  A1  A2  A1  A2        A1  A2  A1  A2
Mapping meta::relational::graphFetch::tests::union::propertyLevel::Mapping6
(
  *Firm : Operation
  {
    meta::pure::router::operations::special_union_OperationSetImplementation_1__SetImplementation_MANY_(firm_set1, firm_set2, firm_set3)   
  }

  *Person : Operation
  {
    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(person_set1, person_set2, person_set3)   
  }

  *Address : Operation
  {
    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(a_set1, a_set2, a_set3)
  }   

  Person[person_set1] : Relational
  {
      lastName : [myDB]PersonSet1.lastName_s1,
      address[a_set1] : [myDB]@PersonSet1AddressSet1_ADDRESSID,
      address[a_set2] : [myDB]@PersonSet1AddressSet2_ADDRESSID,
      address[a_set3] : [myDB]@PersonSet1AddressSet3_ADDRESSID
  }
          
  Person[person_set2] : Relational
  {
      lastName : [myDB]PersonSet2.lastName_s2,
      address[a_set1] : [myDB]@PersonSet2AddressSet1_ADDRESSID,
      address[a_set2] : [myDB]@PersonSet2AddressSet2_ADDRESSID,
      address[a_set3] : [myDB]@PersonSet2AddressSet3_ADDRESSID
  }

  Person[person_set3] : Relational
  {
      lastName : [myDB]PersonSet3.lastName_s3,
      address[a_set1] : [myDB]@PersonSet3AddressSet1_ADDRESSID,
      address[a_set2] : [myDB]@PersonSet3AddressSet2_ADDRESSID,
      address[a_set3] : [myDB]@PersonSet3AddressSet3_ADDRESSID
  }
          
  Firm[firm_set1] : Relational
  {
      legalName : [myDB]FirmSet1.name,
      employees[person_set1]:[myDB]@firm1_person1_join,
      employees[person_set2]:[myDB]@firm1_person2_join,
      employees[person_set3]:[myDB]@firm1_person3_join
  }

  Firm[firm_set2]  : Relational
  {
      legalName : [myDB]FirmSet2.name,
      employees[person_set1]:[myDB]@firm2_person1_join,
      employees[person_set2]:[myDB]@firm2_person2_join,
      employees[person_set3]:[myDB]@firm2_person3_join
  }

  Firm[firm_set3]  : Relational
  {
      legalName : [myDB]FirmSet3.name,
      employees[person_set1]:[myDB]@firm3_person1_join,
      employees[person_set2]:[myDB]@firm3_person2_join,
      employees[person_set3]:[myDB]@firm3_person3_join
  }

  Address[a_set1] : Relational
  {
    name : [myDB]AddressSet1.name
  }

  Address[a_set2] : Relational
  {
    name : [myDB]AddressSet2.name
  } 

  Address[a_set3] : Relational
  {
    name : [myDB]AddressSet3.name
  }   
)
