// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::extension::*;
import meta::pure::functions::calendarAggregation::*;
import meta::pure::mapping::*;
import meta::relational::functions::pureToSqlQuery::*;
import meta::relational::functions::pureToSqlQuery::calendarAggregations::*;
import meta::relational::metamodel::*;
import meta::relational::metamodel::join::*;
import meta::relational::metamodel::operation::*;
import meta::relational::metamodel::relation::*;

function meta::relational::functions::pureToSqlQuery::calendarAggregations::insertCalendarJoins(dateColCursor:SelectWithCursor[1], endDate:RelationalOperationElement[1], calendarType:String[1], nodeId:String[1], operation:SelectWithCursor[1], state:State[1], context:DebugContext[1], extensions:Extension[*]):SelectWithCursor[1]
{
  let calendarTableName = $calendarType->cast(@String)+'_Calendar';
  assert(isNotEmpty(table(schema(CalendarDatabase,'LegendCalendarSchema')->toOne(),$calendarTableName)), | 'A new calendar type requires a table in meta::relational::functions::pureToSqlQuery::calendarAggregations::CalendarDatabase store, LegendCalendarSchema schema.');

  // build calendar select.
   let calendarSelect = ^SelectSQLQuery(
                          data = ^RootJoinTreeNode(
                            alias = ^TableAlias(
                              name = 'calendar',
                              relationalElement = meta::relational::functions::database::tableReference(CalendarDatabase,'LegendCalendarSchema',$calendarTableName)->toOne()
                            )
                          )
                        );

  // define table aliases for each side of the join.
   let leftAlias  = $dateColCursor.currentTreeNode.alias->toOne(); //  left side of the join (user class)
   let rightAlias = $calendarSelect.data.alias->toOne();           // right side of the join, 'Calendar'

  // define the calendar joins...
  // ... on userClass.dateCol == CalendarTable.date.
  let join    = ^Join(name='calendarJoin'   +$nodeId, aliases=[pair($leftAlias,$rightAlias),pair($rightAlias,$leftAlias)],
          operation=[^DynaFunction(name = 'equal',
                                   parameters=[ ^TableAliasColumn(alias=$leftAlias , column=$dateColCursor.select.columns->cast(@TableAliasColumn).column->toOne()),
                                                ^TableAliasColumn(alias=$rightAlias, column=^Column(name = 'date', type = ^meta::relational::metamodel::datatype::Date()) )
                                              ])
                    ]->cast(@Operation)->toOne('First parameter should be one date column.')
    );

  // ... on userClass.dateCol == CalendarTable.date and CalendarTable.date == $endDate.
  let joinEnd = ^Join(name='calendarEndJoin'+$endDate->buildUniqueName(true, $extensions)+$nodeId, aliases=[pair($leftAlias,$rightAlias),pair($rightAlias,$leftAlias)],
          operation=[^DynaFunction(name = 'equal',
                                  parameters=[ $endDate,
                                               ^TableAliasColumn(alias=$rightAlias, column=^Column(name = 'date', type = ^meta::relational::metamodel::datatype::Date()) )
                                             ])
                    ]->cast(@Operation)->toOne('First parameter should be one date column.')
    );

  // insert the joins in the tree.
  let child    = ^JoinTreeNode(alias=$rightAlias, join=$join   , joinType=JoinType.LEFT_OUTER, database=meta::relational::functions::pureToSqlQuery::calendarAggregations::CalendarDatabase, joinName='calendarJoin'   +$nodeId);
  let childEnd = ^JoinTreeNode(alias=$rightAlias, join=$joinEnd, joinType=JoinType.LEFT_OUTER, database=meta::relational::functions::pureToSqlQuery::calendarAggregations::CalendarDatabase, joinName='calendarEndJoin'+$nodeId);
  let treeWithCalendarJoin      = applyJoinInTree(       $dateColCursor.select.data->toOne(),        $dateColCursor.currentTreeNode->toOne(), $child   , $dateColCursor       , $nodeId       , JoinType.LEFT_OUTER, true, false, [], $state, $context, $extensions);
  let treeWithBothCalendarJoins = applyJoinInTree($treeWithCalendarJoin.select.data->toOne(), $treeWithCalendarJoin.currentTreeNode->toOne(), $childEnd, $treeWithCalendarJoin, $nodeId+'_end', JoinType.LEFT_OUTER, true, false, [], $state, $context, $extensions);
  $treeWithBothCalendarJoins;
}

function meta::relational::functions::pureToSqlQuery::calendarAggregations::processCalendarAggPureToSQL(expression:FunctionExpression[1], currentPropertyMapping:PropertyMapping[*], operation:SelectWithCursor[1], vars:Map<VariableExpression, ValueSpecification>[1], state:State[1], joinType:JoinType[1], nodeId:String[1], aggFromMap:List<ColumnGroup>[1], context:DebugContext[1], extensions:Extension[*]):RelationalOperationElement[1]
{
  // Extract Calendar arguments.
  let dateCol  = processValueSpecification($expression.parametersValues->at(0), $currentPropertyMapping, $operation, $vars, $state, $joinType, $nodeId, $aggFromMap, $context, $extensions)->toOne()->cast(@SelectWithCursor);
  let valueCol = processValueSpecification($expression.parametersValues->at(3), $currentPropertyMapping, $operation, $vars, $state, $joinType, $nodeId, $aggFromMap, $context, $extensions)->toOne()->cast(@SelectWithCursor);
  let calendarType = $expression->instanceValuesAtParameter(1, $vars, $state.inScopeVars)->cast(@String    )->toOne();
  let endDate = processValueSpecification($expression.parametersValues->at(2), $currentPropertyMapping, $operation, $vars, $state, $joinType, $nodeId, $aggFromMap, $context, $extensions)->toOne()->cast(@SelectWithCursor).select.columns->at(0);

  // Get the "synthetiseFooBarCaseCondition" corresponding to the fooBar function called by the user.
  let calendarFunction = getSupportedCalendarFunctions()->filter(x|$x.aggFunction == $expression.func);

  // Insert the two Calendar joins.
  let selectWithBothCalendarJoins = meta::relational::functions::pureToSqlQuery::calendarAggregations::insertCalendarJoins($dateCol,$endDate, $calendarType, $nodeId, $operation, $state, $context, $extensions);

  // Merge the 'calendarJoins' and 'valueCol' SQLs
  let sqlWithBothCalendarJoins = $selectWithBothCalendarJoins.select->concatenate($valueCol.select)->mergeSQLQueryData($nodeId, $state, $context, $extensions);

  // Generates: case when (caseCondition) then valueCol / normalisationFactor else null end.
  let calendarAlias    = $selectWithBothCalendarJoins->cast(@SelectWithCursor).currentTreeNode.childrenData->cast(@JoinTreeNode)->filter(x | $x.join.name == 'calendarJoin'   +$nodeId).alias->toOne();
  let calendarEndAlias = $selectWithBothCalendarJoins->cast(@SelectWithCursor).currentTreeNode.childrenData->cast(@JoinTreeNode)->filter(x | $x.join.name == 'calendarEndJoin'+$endDate->buildUniqueName(true, $extensions)+$nodeId).alias->toOne();
  let caseCondition = $calendarFunction.handler->toOne()->meta::pure::functions::lang::eval($calendarAlias, $calendarEndAlias,$sqlWithBothCalendarJoins.columns->toOne());

  // insert caseValue result into the tree.
  let sqlWithBothCalendarJoinsAndCaseCol = ^$sqlWithBothCalendarJoins(columns = $caseCondition);
  let selectWithBothCalendarJoinsAndCaseCol = ^$selectWithBothCalendarJoins(
    select = $sqlWithBothCalendarJoinsAndCaseCol,
    positionBeforeLastApplyJoinTreeNode = if($selectWithBothCalendarJoins.positionBeforeLastApplyJoinTreeNode->isEmpty(),|[],|$selectWithBothCalendarJoins.positionBeforeLastApplyJoinTreeNode->toOne()->findOneNode($selectWithBothCalendarJoins.select.data->toOne(), $sqlWithBothCalendarJoinsAndCaseCol.data->toOne())),
    currentTreeNode = $sqlWithBothCalendarJoinsAndCaseCol.data->toOne()
    );

  // Return the tree
  $selectWithBothCalendarJoinsAndCaseCol;
}
