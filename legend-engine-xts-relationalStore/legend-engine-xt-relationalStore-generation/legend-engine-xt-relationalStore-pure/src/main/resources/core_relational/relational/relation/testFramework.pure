// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::sqlQueryToString::*;
import meta::relational::metamodel::execute::*;
import meta::relational::metamodel::relation::*;
import meta::relational::runtime::*;
import meta::external::store::relational::runtime::*;
import meta::core::runtime::*;
import meta::relational::metamodel::*;
import meta::pure::mapping::*;
import meta::pure::store::*;
import meta::pure::metamodel::relation::*;
import meta::relational::relation::testUtils::*;

function meta::relational::relation::testUtils::reprocess(f:Function<{->Any[*]}>[1]):Pair<FunctionDefinition<{->Any[*]}>,List<Pair<TDS<Any>,RelationStoreAccessor<Any>>>>[1]
{  
  $f->match(
    [
      z:FunctionDefinition<{->Any[*]}>[1]|
            println('BEFORE: ' + meta::pure::metamodel::serialization::grammar::printFunctionDefinition($z, ''));

            // Init
            let initState = meta::relational::relation::testUtils::initState($z->openVariableValues());
            let db = $initState.database;
            let schema = $initState.schema;
            let runtime = $initState.runtime;

            // Reprocess the function replacing values with Database elements
            let reprocessed = $z.expressionSequence->evaluateAndDeactivate()->map(z|$z->reprocess($initState));

            // Add 'from'
            let returnGenericType = $z.expressionSequence->evaluateAndDeactivate()->last().genericType->toOne();
            let returnMultiplicity = $z.expressionSequence->evaluateAndDeactivate()->last().multiplicity->toOne();
            let result = pair(
                                ^$z
                                (
                                  expressionSequence =  ^SimpleFunctionExpression
                                                        (
                                                          importGroup=system::imports::coreImport,
                                                          func = if($reprocessed.mapping->isEmpty(),|from_T_m__Runtime_1__T_m_,|from_T_m__Mapping_1__Runtime_1__T_m_),
                                                          functionName = 'from',
                                                          genericType = $returnGenericType,
                                                          multiplicity = $returnMultiplicity,                                                        
                                                          parametersValues = 
                                                                                $reprocessed.current->toOne()->cast(@ValueSpecification)
                                                                                ->concatenate(if ($reprocessed.mapping->isEmpty(),
                                                                                              |[],
                                                                                              |^InstanceValue
                                                                                               (
                                                                                                  genericType = ^GenericType(rawType=Mapping),
                                                                                                  multiplicity = PureOne,
                                                                                                  values = $reprocessed.mapping
                                                                                               )
                                                                                             ))
                                                                                ->concatenate(^InstanceValue
                                                                                              (
                                                                                                genericType = ^GenericType(rawType=Runtime),
                                                                                                multiplicity = PureOne,
                                                                                                values = $runtime
                                                                                              )
                                                                                )
                                                                            ,
                                                          resolvedMultiplicityParameters = $returnMultiplicity,
                                                          resolvedTypeParameters = $returnGenericType
                                                        )                                                                
                                ),
                                list($reprocessed.replaced)
                          );

            println('AFTER: ' + meta::pure::metamodel::serialization::grammar::printFunctionDefinition($result.first, '') + '\n');  

            // Update the database
            let setUpSQLs = $reprocessed.csvs->joinStrings('\n-\n')->meta::alloy::service::execution::setUpDataSQLs($reprocessed.database->toOne());
            //println($setUpSQLs);

            // Count is here to ensure lazy execution is actually flushing...
            $setUpSQLs->map(sql | executeInDb($sql, $reprocessed.runtime.connectionStores.connection->toOne()->cast(@meta::external::store::relational::runtime::TestDatabaseConnection)))->count();

            $result;
    ]
  );
}

Class meta::relational::relation::testUtils::ProcessingState
{
   database : Database[1];
   schema : Schema[1];
   tables : Table[*];
   runtime : Runtime[1];
   mapping : Mapping[0..1];
   current : Any[0..1];
   replaced : Pair<TDS<Any>, RelationStoreAccessor<Any>>[*];
   openVars : Map<String,Any>[0..1];
   csvs : String[*];
}

function meta::relational::relation::testUtils::merge(s1:ProcessingState[1], s2:ProcessingState[1]):ProcessingState[1]
{
  ^$s1
  (
    tables += $s2.tables,
    mapping += $s2.mapping,
    replaced += $s2.replaced,
    csvs += $s2.csvs,
    openVars = if($s1.openVars->isEmpty(),|$s1.openVars,|$s2.openVars)
  );
}

function meta::relational::relation::testUtils::initState(openVars:Map<String,Any>[0..1]):ProcessingState[1]
{
  let db = ^Database
  (
    name = 'MyDatabase',
    package = meta::relational::relation::testUtils
  );

  let schema = ^Schema
  (
    name='default',
    database = $db
  );

  $db->mutateAdd('schemas', $schema);
  
  ^ProcessingState
  (
    database = $db,
    schema = $schema,
    openVars = $openVars,
    runtime =   ^Runtime
                (
                  connectionStores=^ConnectionStore
                                    (
                                      connection=^TestDatabaseConnection
                                                 (
                                                    type = DatabaseType.H2,
                                                    timeZone = 'GMT'
                                                 ),
                                      element = $db
                                    )
                )
  );
}


###Pure
import meta::relational::metamodel::execute::*;
import meta::relational::functions::database::*;
import meta::external::store::relational::runtime::*;
import meta::pure::mapping::*;
import meta::core::runtime::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::*;
import meta::pure::metamodel::relation::*;
import  meta::relational::relation::testUtils::*;
import meta::pure::store::*;

function meta::relational::relation::testUtils::reprocess(a:Any[1], state:ProcessingState[1]):ProcessingState[1]
{
  $a->match(
    [
      z:FunctionExpression[1]| if($z.func == new_Class_1__String_1__KeyExpression_MANY__T_1_,
                                | meta::relational::relation::testUtils::reprocessNew($z->reactivate()->evaluateAndDeactivate(), $z.genericType.rawType->toOne()->cast(@Class<Any>), $state);,
                                | if (!$z.func->in(
                                              [
                                                  meta::pure::functions::relation::funcColSpecArray_FuncColSpec_MANY__P_1__FuncColSpecArray_1_,
                                                  meta::pure::functions::relation::funcColSpec_Function_1__String_1__T_1__FuncColSpec_1_,
                                                  meta::pure::functions::relation::aggColSpecArray_AggColSpec_MANY__P_1__AggColSpecArray_1_,
                                                  meta::pure::functions::relation::aggColSpec_Function_1__Function_1__String_1__T_1__AggColSpec_1_
                                              ]),
                                    | let repro = $z.parametersValues->evaluateAndDeactivate()->map(x|$x->reprocess($state));
                                      ^$state
                                      (
                                          current = ^$z(parametersValues = $repro.current->cast(@ValueSpecification))->evaluateAndDeactivate(),
                                          mapping = $repro.mapping->first(),
                                          replaced = $repro.replaced,
                                          tables = $repro.tables,
                                          csvs = $repro.csvs
                                      );,
                                    | ^$state
                                      (
                                        current = $z
                                      )
                                  )                                  
                               );,
      ix:InstanceValue[1]|
                          let i = $ix->evaluateAndDeactivate();
                          let type = $i.genericType.rawType->toOne();
                          if ($type->instanceOf(Class) && $type != LambdaFunction && $type != TDS && $type != Enumeration && $type != SortInfo,
                              |
                                let values = $i.values->map(
                                    x|$x->match([
                                                  v:ValueSpecification[1]|$v->reactivate()->evaluateAndDeactivate(),
                                                  a:Any[1]|$a
                                                ]
                                          )
                                );
                                meta::relational::relation::testUtils::reprocessNew($values, $type->cast(@Class<Any>), $state);,
                              |
                                let repro = $i.values->map(x|$x->reprocess($state));
                                ^$state
                                (
                                  current = ^$i
                                            (
                                              genericType = if($repro.current->genericType()->isEmpty(),|$i.genericType, |$repro.current->genericType()->first()->toOne()),
                                              values = $repro.current
                                            ),
                                  mapping = $repro.mapping->first(),
                                  replaced = $repro.replaced,
                                  tables = $repro.tables,
                                  csvs = $repro.csvs
                                );
                          );,
      z:LambdaFunction<Any>[1] | let repro = $z.expressionSequence->evaluateAndDeactivate()->map(z|$z->reprocess($state));
                                 ^$state
                                 (
                                    current=^$z(expressionSequence = $repro.current->cast(@ValueSpecification)->toOneMany()),
                                    mapping = $repro.mapping->first(),
                                    replaced=$repro.replaced,
                                    tables = $repro.tables,
                                    csvs = $repro.csvs
                                 );,
      v:VariableExpression[1] | let openVar = $state.openVars->toOne()->get($v.name);
                                if ($openVar->isEmpty(),
                                  |^$state
                                   (
                                      current = $v
                                   ),
                                  |reprocess(^InstanceValue
                                              (
                                                genericType = $openVar->toOne()->cast(@List<Any>).values->at(0)->genericType()->toOne(),
                                                multiplicity = PureOne,
                                                values = $openVar->toOne()->cast(@List<Any>).values
                                              ), $state)
                                  );,
      x:TDS<Any>[1] | processTDS($x, $state),
      e:Enumeration<Any>[1] | ^$state
                              (
                                current = $e
                              );,                      
      r:Integer[1] | ^$state
                     (
                      current = $r
                     );,
      s:String[1] |  ^$state
                     (
                      current = $s
                     );,
      x:Float[1] |  ^$state
                     (
                      current = $x
                     );
    ]
  );
}

function meta::relational::relation::testUtils::reprocessNew(values:Any[*], type:Class<Any>[1], state:ProcessingState[1]):ProcessingState[1]
{
    let newState = $state->merge(classesToDatabase($values, $state));      
    ^$newState
    (
        current = ^SimpleFunctionExpression
                  (
                    importGroup=system::imports::coreImport,
                    func = getAll_Class_1__T_MANY_,
                    functionName = 'getAll',
                    genericType = ^GenericType(rawType=$type),
                    multiplicity = ZeroMany,
                    parametersValues = [
                                          ^InstanceValue
                                          (
                                            genericType = ^GenericType(rawType=$type),
                                            multiplicity = PureOne,
                                            values = []
                                          )
                                      ]
                  )->evaluateAndDeactivate()
    );
}

function meta::relational::relation::testUtils::processTDS(tds:TDS<Any>[1], state:ProcessingState[1]):ProcessingState[1]
{
  let map = meta::relational::transform::fromPure::pureTypeToDataTypeMap();
  let table = ^Table
  (
    name = 'tb' + now()->toEpochValue(DurationUnit.MILLISECONDS)->toString(),
    columns = $tds->columns()->map(c|
                    ^meta::relational::metamodel::Column(
                        name=$c.name->toOne(),
                        type=$map->meta::pure::functions::collection::get($c->genericType().typeArguments->at(1).rawType->toOne())->toOne()
                    )
                  ),
    schema = $state.schema
  );

  $state.schema->mutateAdd('tables', $table);

  let relAccessor = ^RelationStoreAccessor<Any>
  (
    store = $state.database,
    sourceElement = $table
  );

  // Create CSV out of TDS data
  let cols = $tds->columns();
  let csv = $state.schema.name+'\n' + 
            $relAccessor.sourceElement->cast(@Table).name + '\n' +
            $cols->map(x|$x.name)->joinStrings(',' ) + '\n' +
            $tds->map(x|$cols->map(c|$c->eval($x)->toOne()->toString())->joinStrings(','))
            ->joinStrings('\n');

  ^$state
  (
    current = $relAccessor,
    replaced = pair($tds, $relAccessor),
    tables += $table,
    csvs += $csv
  );
}




function meta::relational::relation::testUtils::testTDSDatabaseRun(f:Function<{->Any[1]}>[1]):Any[1]
{
    // //For debug
    // meta::pure::executionPlan::executionPlan($f->meta::relational::relation::testUtils::reprocess().first, ^meta::pure::runtime::ExecutionContext(), meta::relational::extension::relationalExtensions(), debug());
    // [];

    let x = meta::legend::executeLegendQuery($f->meta::relational::relation::testUtils::reprocess().first, [], ^meta::pure::runtime::ExecutionContext(), meta::relational::extension::relationalExtensions());
    let res = $x->meta::json::fromJSON(meta::protocols::pure::vX_X_X::metamodel::invocation::execution::execute::RelationalTDSResult, ^meta::json::ExtendedJSONDeserializationConfig(typeKeyName='__TYPE', failOnUnknownProperties=true, nullReplacementInArray=TDSNull));

    let resultType = $f->functionReturnType().rawType;

    if ($resultType->toOne()->instanceOf(PrimitiveType),
      | $res.result.rows->at(0).values->at(0),
      | let tdsString = $res.result.columns->joinStrings(',') + '\n' +
                        $res.result.rows->map(x|
                            range($x.values->size())->map(z | if($x.values->at($z) == TDSNull,
                                                                  |let type = $res.builder->cast(@meta::protocols::pure::vX_X_X::metamodel::invocation::execution::execute::TDSBuilder).columns->at($z).type;
                                                                    if ([
                                                                        pair(|$type == 'Integer', |-2147483648),
                                                                        pair(|$type == 'String', |'null')
                                                                        ],
                                                                        |fail();0;
                                                                    );,
                                                                  |$x.values->at($z)
                                                              )
                                                      )->makeString(',')
                            )->joinStrings('\n');
          $tdsString->stringToTDS();
    );
}











###Pure
import meta::relational::metamodel::execute::*;
import meta::relational::functions::database::*;
import meta::external::store::relational::runtime::*;
import meta::relational::relation::testUtils::tests::*;
import meta::relational::relation::testUtils::*;
import meta::relational::metamodel::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::join::*;
import meta::relational::mapping::*;
import meta::pure::mapping::*;



function meta::relational::relation::testUtils::classesToDatabase(values:Any[*], givenState:ProcessingState[0..1]):ProcessingState[1]
{
  let _state = if ($givenState->isEmpty(),|initState([]),|$givenState)->toOne();
  let state = ^$_state(
                  mapping = ^Mapping
                            (
                              name = 'myMapping'
                            )
              );

  if (!$values->isEmpty(),
    | // Scan types
      let rootType = $values->genericType().rawType->first()->toOne()->cast(@Class<Any>);
      let allClasses = scanClass($rootType);

      // Build schema
      let tables = $allClasses->map(c|$c->classToTable($state.schema, $state.mapping->toOne()));
      let joins = $allClasses->map(c|$c->buildJoins($tables, $state.database));
      $state.schema->mutateAdd('tables', $tables.table);
      $state.database->mutateAdd('joins', $joins.join);

      buildCSV($values, $rootType, [], 1, $tables);
      let csvs = $tables->map(k|$k.csv->joinStrings('\n'));
      $state.mapping->toOne()->mutateAdd('classMappings', $tables.classMapping);

      let runtime = $state.runtime;
      let mapping = $state.mapping->toOne();

      ^$state
      (
        csvs += $csvs
      );,
    | $state
  );

}

function meta::relational::relation::testUtils::buildCSV(values:Any[*], class:Class<Any>[1], property:Property<Nil, Any|*>[0..1], parentId:Integer[1], maps:ClassTableMapping[*]):ClassTableMapping[*]
{
  let info = $maps->filter(c|$c.class == $class)->toOne();
  let header = $info.table.schema.name->toOne()+'\n'+
               $info.table.name+'\n'+
               $info.table.columns->cast(@Column).name->joinStrings(',');
  let rows = $values->map
  (
    v | let id = $values->indexOf($v) + $parentId*10;

        let r = $id
        ->concatenate($info.properties->map(p | $p->eval($v)))
        ->concatenate($info.parentProperties->map(p | if($p == $property,|$parentId,|'-1')))
        ->makeString(',');

        let props = $class.properties->filter(p|!$p->isPrimitiveValueProperty());
        $props->map(p|
                      let vals = $p->eval($v);
                      buildCSV($vals, $p->functionReturnType().rawType->toOne()->cast(@Class<Any>), $p, $id, $maps);
                );

        $r;

  )->joinStrings('\n');

  $info->mutateAdd('csv', if($info.csv->isEmpty(),
      |$header+'\n'+$rows,
      |$rows
  ));

  $maps;
}

Class meta::relational::relation::testUtils::ClassTableMapping
{
  class : Class<Any>[1];
  table : Table[1];
  properties : Property<Nil,Any|*>[*];
  parentProperties : Property<Nil,Any|*>[*];
  classMapping: RootRelationalInstanceSetImplementation[1];
  csv : String[*];
}

Class meta::relational::relation::testUtils::PropertyColumnMapping
{
  property : Property<Nil,Any|*>[1];
  column : Column[1];
}

function meta::relational::relation::testUtils::classToTable(class:Class<Any>[1], schema:Schema[1], mapping:Mapping[1]):ClassTableMapping[1]
{
  let map = meta::relational::transform::fromPure::pureTypeToDataTypeMap();
  let properties = $class.properties->filter(p|$p->isPrimitiveValueProperty());                
  let cols = $properties->map(p|^PropertyColumnMapping(property=$p, column=^Column(name=$p.name->toOne(), type=$map->get($p->functionReturnType().rawType->toOne())->toOne())));
  let idCol = ^Column(name='_pureId', type=^meta::relational::metamodel::datatype::Integer());
  let table = ^Table(name=$class.name->toOne(), schema=$schema, primaryKey=$idCol, columns=$idCol->concatenate($cols.column));
  let tableAlias = ^TableAlias(name=$table.name, relationalElement = $table);


  let set = ^RootRelationalInstanceSetImplementation
            (
                id = $class.name->toOne(),
                root = true,
                userDefinedPrimaryKey = true,
                primaryKey = ^TableAliasColumn(alias=$tableAlias, column=$idCol),
                parent = $mapping,
                class = $class,
                mainTableAlias = $tableAlias                     
            );

  let pmappings = $cols->map(c |
                ^RelationalPropertyMapping
                (
                  property = $c.property,
                  sourceSetImplementationId = $class.name->toOne(),
                  targetSetImplementationId = '',
                  owner = $set,
                  relationalOperationElement = ^TableAliasColumn
                                                (
                                                  columnName = $c.column.name,
                                                  alias = $tableAlias,
                                                  column = $c.column
                                                )
                )

      );

  $set->mutateAdd('propertyMappings', $pmappings);

  ^ClassTableMapping
  (
    class = $class,
    table = $table,
    properties = $properties,
    classMapping = $set
  );  
}

Class meta::relational::relation::testUtils::JoinRes
{
  join : Join[1];
  property : Property<Nil,Any|*>[1];
  fk : Column[1];
  propertyMapping : RelationalPropertyMapping[1];
}

function meta::relational::relation::testUtils::buildJoins(class:Class<Any>[1], classTableMappings:ClassTableMapping[*], db:Database[1]):meta::relational::relation::testUtils::JoinRes[*]
{
  let src = $classTableMappings->filter(ctm|$ctm.class == $class)->toOne();
  let cols = $class.properties
                ->filter(p|!$p->isPrimitiveValueProperty())
                ->map(p|
                        let targetType = $p->functionReturnType().rawType->toOne();
                        let target = $classTableMappings->filter(ctm|$ctm.class == $targetType)->toOne();
                        let srcColumn = $src.table.columns->cast(@Column)->filter(c|$c.name == '_pureId')->toOne();
                        let fkColumn = ^Column(name='_'+$class.name->toOne()+'_'+$p.name->toOne(), type=^meta::relational::metamodel::datatype::Integer());
                        let targetTable = $target.table;                        
                        $targetTable->mutateAdd('columns', $fkColumn);
                        let srcAlias = ^TableAlias(name='src', relationalElement=$src.table);
                        let targetAlias = ^TableAlias(name=$targetTable.name, relationalElement=$targetTable);
                        let join =  ^Join
                                    (
                                      name = $class.name->toOne() + '_' + $p.name->toOne(),
                                      aliases = [pair($srcAlias,$targetAlias),pair($targetAlias,$srcAlias)],
                                      operation = ^DynaFunction
                                                  (
                                                    name = 'equal',
                                                    parameters = [
                                                      ^TableAliasColumn(alias=$srcAlias, column=$srcColumn),
                                                      ^TableAliasColumn(alias=$targetAlias, column=$fkColumn)
                                                    ]
                                                  )
                                    );
                        $target->mutateAdd('parentProperties', $p);
                        let res = ^JoinRes
                        (
                          join = $join,
                          property = $p,
                          fk = $fkColumn,
                          propertyMapping = ^RelationalPropertyMapping
                                            (
                                              property = $p,
                                              sourceSetImplementationId = $class.name->toOne(),
                                              targetSetImplementationId = $targetType.name->toOne(),
                                              relationalOperationElement = ^RelationalOperationElementWithJoin
                                                                           (
                                                                            joinTreeNode = ^JoinTreeNode
                                                                                           (
                                                                                              joinName = $join.name,
                                                                                              database = $db,
                                                                                              alias = $srcAlias,
                                                                                              join = $join
                                                                                           )
                                                                           )
                                            )
                        );
                        $res.propertyMapping->mutateAdd('owner', $src.classMapping);
                        $res;
                );
  $src.classMapping->mutateAdd('propertyMappings', $cols.propertyMapping);
  $cols;
}



function meta::relational::relation::testUtils::scanClass(a:Class<Any>[1]):Class<Any>[*]
{
  $a->scanClass([])->removeDuplicates();
}

function meta::relational::relation::testUtils::scanClass(a:Class<Any>[1], visited:Class<Any>[*]):Class<Any>[*]
{
  let newVisited = $visited->concatenate($a);
  if ($a->in($visited),
    |[],
    | $a
        ->concatenate(
          $a.properties->map(p|$p.genericType.rawType)->filter(c|$c->instanceOf(Class))->cast(@Class<Any>)->map(x|$x->scanClass($newVisited))
        )->concatenate(
          $a.generalizations.general.rawType->filter(x|$x != Any && $x->instanceOf(Class))->cast(@Class<Any>)->map(x|$x->scanClass($newVisited))
        )
  );
}













###Pure
import meta::relational::mapping::*;
import meta::relational::relation::testUtils::tests::*;

Class meta::relational::relation::testUtils::tests::Firm
{
    legalName : String[1];
    employees : Person[*];
    address : Address[1];
}

Class meta::relational::relation::testUtils::tests::Person
{
    firstName : String[0..1];
    lastName : String[1];
    addresses : Address[*];
}

Class meta::relational::relation::testUtils::tests::Address
{
    zip : Integer[1];
}

function <<test.Test>> meta::relational::relation::testUtils::tests::testClassToDB():Boolean[1]
{
  let res = meta::relational::relation::testUtils::classesToDatabase(
    ^Firm
    (
      legalName = 'Goldman',
      employees = [
        ^Person
        (
          firstName = 'john',
          lastName = 'doe',
          addresses = [^Address(zip=1), ^Address(zip=2)]
        ),
        ^Person
        (
          firstName = 'billy',
          lastName = 'bob',
          addresses = [^Address(zip=3), ^Address(zip=4)]
        )
      ],
      address = ^Address
                (
                  zip = 1999
                )
    ),[]
  );

  assertEquals([
                'Firm',
                'Person',
                'Address'
               ], $res.schema.tables.name);

  assertEquals([
                'Firm_employees',
                'Firm_address',
                'Person_addresses'
               ], $res.database.joins.name);

  assertEquals([
                'Firm',
                'Person',
                'Address'
               ], $res.mapping.classMappings.class.name);

  assertEquals([
                'legalName',
                'employees',
                'address',
                'firstName',
                'lastName',
                'addresses',
                'zip'
               ], $res.mapping.classMappings->cast(@RootRelationalInstanceSetImplementation).propertyMappings.property.name);
}
