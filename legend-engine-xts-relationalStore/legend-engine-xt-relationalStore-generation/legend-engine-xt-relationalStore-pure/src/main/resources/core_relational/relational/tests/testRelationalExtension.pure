// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::metamodel::execute::tests::*;
import meta::pure::alloy::connections::*;
import meta::pure::runtime::*;
import meta::relational::translation::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::relational::runtime::*;
import meta::relational::tests::csv::*;
import meta::relational::metamodel::execute::*;
import meta::relational::metamodel::*;
import meta::pure::mapping::*;

function  meta::relational::metamodel::execute::tests::runRelationalRouterExtensionConnectionEquality(c1: RelationalDatabaseConnection[1],
    c2: RelationalDatabaseConnection[1]) : Boolean[1]
{
  let extensions = meta::relational::extension::relationalExtensions().routerExtensions();
  $c1->match(
              $extensions.connectionEquality->map(e | $e->eval($c2))->concatenate([
                  a:Connection[1]  | true
              ])->toOneMany());
}

function <<test.Test>> meta::relational::metamodel::execute::tests::testConnectionEqualityAllSameStatic() : Boolean[1]
{
  let c1 = ^RelationalDatabaseConnection(
    element = 'Store1',
    type = DatabaseType.SybaseIQ,
    datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::StaticDatasourceSpecification(host='host', port=8080, databaseName='db'),
    authenticationStrategy = ^meta::pure::alloy::connections::alloy::authentication::DefaultH2AuthenticationStrategy()
  );   

  let c2 = ^RelationalDatabaseConnection(
    element = '',
    type = DatabaseType.SybaseIQ,
    datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::StaticDatasourceSpecification(host='host', port=8080, databaseName='db'),
    authenticationStrategy = ^meta::pure::alloy::connections::alloy::authentication::DefaultH2AuthenticationStrategy()
  );     

  assert(runRelationalRouterExtensionConnectionEquality($c1, $c2));

}

function <<test.Test>> meta::relational::metamodel::execute::tests::testConnectionEqualityAllButOnePropertySame() : Boolean[1]
{
  let c1 = ^RelationalDatabaseConnection(
    element = 'Store1',
    type = DatabaseType.Snowflake,
    datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::StaticDatasourceSpecification(host='host', port=8090, databaseName='db'),
    authenticationStrategy = ^meta::pure::alloy::connections::alloy::authentication::DefaultH2AuthenticationStrategy()
  );   

  let c2 = ^RelationalDatabaseConnection(
    element = '',
    type = DatabaseType.Snowflake,
    datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::StaticDatasourceSpecification(host='host', port=8080, databaseName='db'),
    authenticationStrategy = ^meta::pure::alloy::connections::alloy::authentication::ApiTokenAuthenticationStrategy(apiToken='token')
  );      

  assert(!runRelationalRouterExtensionConnectionEquality($c1, $c2));

}

function <<test.Test>> meta::relational::metamodel::execute::tests::testConnectionEqualityTypeDiff() : Boolean[1]
{
  let c1 = ^RelationalDatabaseConnection(
    element = 'Store1',
    type = DatabaseType.H2,
    datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::LocalH2DatasourceSpecification(),
    authenticationStrategy = ^meta::pure::alloy::connections::alloy::authentication::DefaultH2AuthenticationStrategy()
  );   

  let c2 = ^RelationalDatabaseConnection(
    element = '',
    type = DatabaseType.Snowflake,
    datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::StaticDatasourceSpecification(host='host', port=8080, databaseName='db'),
    authenticationStrategy = ^meta::pure::alloy::connections::alloy::authentication::ApiTokenAuthenticationStrategy(apiToken='token')
  );      


  assert(!runRelationalRouterExtensionConnectionEquality($c1, $c2));

}


function <<test.Test>> meta::relational::metamodel::execute::tests::testConnectionEqualityTypeSameSpecDiff() : Boolean[1]
{
  let c1 = ^RelationalDatabaseConnection(
    element = 'Store1',
    type = DatabaseType.H2,
    datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::LocalH2DatasourceSpecification(),
    authenticationStrategy = ^meta::pure::alloy::connections::alloy::authentication::DefaultH2AuthenticationStrategy()
  );   

  let c2 = ^RelationalDatabaseConnection(
    element = '',
    type = DatabaseType.H2,
    datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::LocalH2DatasourceSpecification(testDataSetupCsv='something'),
    authenticationStrategy = ^meta::pure::alloy::connections::alloy::authentication::DefaultH2AuthenticationStrategy()
  );      


  assert(!runRelationalRouterExtensionConnectionEquality($c1, $c2));

}

function <<test.Test>> meta::relational::metamodel::execute::tests::testConnectionEqualityTypeSpecSameAuthDiff() : Boolean[1]
{
  let c1 = ^RelationalDatabaseConnection(
    element = 'Store1',
    type = DatabaseType.H2,
    datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::LocalH2DatasourceSpecification(),
    authenticationStrategy = ^meta::pure::alloy::connections::alloy::authentication::DefaultH2AuthenticationStrategy()
  );   

  let c2 = ^RelationalDatabaseConnection(
    element = '',
    type = DatabaseType.H2,
    datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::LocalH2DatasourceSpecification(),
    authenticationStrategy = ^meta::pure::alloy::connections::alloy::authentication::ApiTokenAuthenticationStrategy(apiToken='token')
  );      


  assert(!runRelationalRouterExtensionConnectionEquality($c1, $c2));

}

function <<test.Test>> meta::relational::metamodel::execute::tests::testExecuteInDbToTDS() : Boolean[1]
{
   let result = meta::relational::metamodel::execute::executeInDbToTDS('select 1 as "Count"', {|createTestDatabaseConnection()});
   
   assertEquals(1, $result.rows->at(0).get('Count'));
   
   assertEquals('Count\n1\n', $result->toCSV());
   
   true;
}

function <<test.Test>> meta::relational::tests::typeInference::testTranslateDbType():Boolean[1]
{
   let translator = {type: meta::relational::metamodel::datatype::DataType[1]| $type->match([
              v: meta::relational::metamodel::datatype::Varchar[1]| format('STRING(%d)', $v.size),
              a: meta::relational::metamodel::datatype::DataType[1]| []
           ])};
   let dType = translateCoreTypeToDbSpecificType(^meta::relational::metamodel::datatype::Varchar(size = 100), ^TranslationContext(coreTypeToDbSpecificSqlTranslator=$translator));
   
   assertEquals('STRING(100)', $dType->toOne()->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testTableAliasColumnInference():Boolean[1]
{
   let dType = meta::relational::tests::db.schemas->map(x|$x->view('interactionViewMaxTime'))->toOne()
                  .columnMappings->filter(x | $x.columnName == 'sourceId').relationalOperationElement->toOne()
                  ->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('INT', $dType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testRelOpWithJoinInference():Boolean[1]
{
   let dType = meta::relational::tests::db.schemas->map(x|$x->view('orderPnlView'))->toOne()
                  .columnMappings->filter(x | $x.columnName == 'supportContact').relationalOperationElement->toOne()
                  ->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('VARCHAR(200)', $dType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testMaxIntAggregationInference():Boolean[1]
{
   let dType = meta::relational::tests::db.schemas->map(x|$x->view('interactionViewMaxTime'))->toOne()
                  .columnMappings->filter(x | $x.columnName == 'maxTime').relationalOperationElement->toOne()
                  ->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('INT', $dType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testMaxDateAggregationInference():Boolean[1]
{
   let dType = meta::relational::tests::db.schemas->map(x|$x->view('tradeEventViewMaxTradeEventDate'))->toOne()
                  .columnMappings->filter(x | $x.columnName == 'maxTradeEventDate').relationalOperationElement->toOne()
                  ->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('DATE', $dType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testSumAggregationWithJoinInference():Boolean[1]
{
   let dType = meta::relational::tests::db.schemas->map(x|$x->view('accountOrderPnlView'))->toOne()
                  .columnMappings->filter(x | $x.columnName == 'orderPnl').relationalOperationElement->toOne()
                  ->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('DOUBLE', $dType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testDynaAndOrInference():Boolean[1]
{
   let dType = meta::relational::tests::simpleRelationalMappingWithBooleanExpression->rootClassMappingByClass(meta::relational::tests::model::simple::Person)->toOne()->cast(@meta::relational::mapping::RootRelationalInstanceSetImplementation)->propertyMappingsByPropertyName('activeEmployment')
                  ->cast(@meta::relational::mapping::RelationalPropertyMapping).relationalOperationElement->toOne()
                  ->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('BIT', $dType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testDynaCaseInference():Boolean[1]
{
   let dType = meta::relational::tests::simpleRelationalMappingWithBooleanExpression->rootClassMappingByClass(meta::relational::tests::model::simple::Address)->toOne()->cast(@meta::relational::mapping::RootRelationalInstanceSetImplementation)->propertyMappingsByPropertyName('comments')
                  ->cast(@meta::relational::mapping::RelationalPropertyMapping).relationalOperationElement->toOne()
                  ->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('VARCHAR(12)', $dType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testDynaCaseWithDecimalInference_Decimal_Integer():Boolean[1]
{
   let mapping = meta::relational::tests::runtime::typeInference::DecimalCompatibilityMapping1
      ->rootClassMappingByClass(meta::relational::tests::runtime::typeInference::DecimalCompatibilityModel)->toOne()
      ->cast(@meta::relational::mapping::RootRelationalInstanceSetImplementation);
      
   let intPropDType = $mapping->propertyMappingsByPropertyName('intProp')
                  ->cast(@meta::relational::mapping::RelationalPropertyMapping).relationalOperationElement->toOne()
                  ->meta::relational::functions::typeInference::inferRelationalType()->toOne();
 
   assertEquals('DECIMAL(3, 0)', $intPropDType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testDynaCaseWithDecimalInference_Decimal_Double():Boolean[1]
{
   let mapping = meta::relational::tests::runtime::typeInference::DecimalCompatibilityMapping1
      ->rootClassMappingByClass(meta::relational::tests::runtime::typeInference::DecimalCompatibilityModel)->toOne()
      ->cast(@meta::relational::mapping::RootRelationalInstanceSetImplementation);
      
   let floatPropDType = $mapping->propertyMappingsByPropertyName('floatProp')
                  ->cast(@meta::relational::mapping::RelationalPropertyMapping).relationalOperationElement->toOne()
                  ->meta::relational::functions::typeInference::inferRelationalType()->toOne();

   assertEquals('DECIMAL(4, 1)', $floatPropDType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testDynaCaseWithDecimalInference_Decimal_Numeric():Boolean[1]
{
   let mapping = meta::relational::tests::runtime::typeInference::DecimalCompatibilityMapping1
      ->rootClassMappingByClass(meta::relational::tests::runtime::typeInference::DecimalCompatibilityModel)->toOne()
      ->cast(@meta::relational::mapping::RootRelationalInstanceSetImplementation);
      
   let numericPropDType = $mapping->propertyMappingsByPropertyName('numericProp')
                  ->cast(@meta::relational::mapping::RelationalPropertyMapping).relationalOperationElement->toOne()
                  ->meta::relational::functions::typeInference::inferRelationalType()->toOne();                                    

   assertEquals('DECIMAL(7, 4)', $numericPropDType->meta::relational::metamodel::datatype::dataTypeToSqlText());   
}

function <<test.Test>> meta::relational::tests::typeInference::testDynaComplexInference1():Boolean[1]
{
   let dType = meta::relational::tests::mapping::propertyfunc::model::mapping::PropertyfuncMappingWithJoin->rootClassMappingByClass(meta::relational::tests::mapping::propertyfunc::model::domain::Person)->toOne()->cast(@meta::relational::mapping::RootRelationalInstanceSetImplementation)->propertyMappingsByPropertyName('firstName')
                  ->cast(@meta::relational::mapping::RelationalPropertyMapping).relationalOperationElement->toOne()
                  ->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('VARCHAR(200)', $dType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}


function <<test.Test>> meta::relational::tests::typeInference::testDynaComplexInference2():Boolean[1]
{
   let dType = meta::relational::tests::mapping::propertyfunc::model::mapping::PropertyfuncMappingWithJoin->rootClassMappingByClass(meta::relational::tests::mapping::propertyfunc::model::domain::Person)->toOne()->cast(@meta::relational::mapping::RootRelationalInstanceSetImplementation)->propertyMappingsByPropertyName('lastName')
                  ->cast(@meta::relational::mapping::RelationalPropertyMapping).relationalOperationElement->toOne()
                  ->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('VARCHAR(400)', $dType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}


function <<test.Test>> meta::relational::tests::typeInference::testViewOnViewInference():Boolean[1]
{
   let dType = meta::relational::tests::db.schemas->map(x|$x->view('orderNegativePnlViewOnView'))->toOne()
                  .columnMappings->filter(x | $x.columnName == 'pnl').relationalOperationElement->toOne()
                  ->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('FLOAT', $dType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testSQLNullTypeInference():Boolean[1]
{
   let dType = ^meta::relational::metamodel::DynaFunction(name = 'sqlNull')->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('OTHER', $dType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}


function <<test.Test>> meta::relational::tests::typeInference::testSQLNullWithinCaseTypeInference1():Boolean[1]
{
   let dType = meta::relational::transform::toPure::tests::SimpleDb1Mapping->rootClassMappingByClass(meta::relational::transform::toPure::tests::PersonTable)->cast(@meta::relational::mapping::RootRelationalInstanceSetImplementation)->map(x|$x->propertyMappingsByPropertyName('isValid'))
                 ->cast(@meta::relational::mapping::RelationalPropertyMapping).relationalOperationElement->toOne()
                 ->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('BIT', $dType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testSQLNullWithinCaseTypeInference2():Boolean[1]
{
   let dType1 = ^meta::relational::metamodel::DynaFunction(name = 'case', parameters = [^meta::relational::metamodel::Literal(value = true), ^meta::relational::metamodel::Literal(value = 'str'), ^meta::relational::metamodel::DynaFunction(name = 'sqlNull')])->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('VARCHAR(3)', $dType1->meta::relational::metamodel::datatype::dataTypeToSqlText());
   
   let dType2 = ^meta::relational::metamodel::DynaFunction(name = 'case', parameters = [^meta::relational::metamodel::Literal(value = true), ^meta::relational::metamodel::Literal(value = 'str'), ^meta::relational::metamodel::Literal(value = true), ^meta::relational::metamodel::Literal(value = 'str2'), ^meta::relational::metamodel::DynaFunction(name = 'sqlNull')])->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('VARCHAR(4)', $dType2->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testNotTypeInference():Boolean[1]
{
   let dType1 = ^meta::relational::metamodel::DynaFunction(name = 'not', parameters = [^meta::relational::metamodel::DynaFunction(name = 'equal', parameters = [^meta::relational::metamodel::Literal(value = 1), ^meta::relational::metamodel::Literal(value = 2)])])->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('BIT', $dType1->meta::relational::metamodel::datatype::dataTypeToSqlText());
   
   let dType2 = ^meta::relational::metamodel::DynaFunction(name = 'not', parameters = [^meta::relational::metamodel::DynaFunction(name = 'in', parameters = [^meta::relational::metamodel::Literal(value = 1), ^meta::relational::metamodel::LiteralList(values = [^meta::relational::metamodel::Literal(value = 2), ^meta::relational::metamodel::Literal(value = 3)])])])->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('BIT', $dType2->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

function <<test.Test>> meta::relational::tests::typeInference::testJoinStringsTypeInference():Boolean[1]
{
   let dType = ^meta::relational::metamodel::DynaFunction(
      name = 'joinStrings', 
      parameters = [
         meta::relational::tests::simpleRelationalMapping->rootClassMappingByClass(meta::relational::tests::model::simple::Person)->cast(@meta::relational::mapping::RootRelationalInstanceSetImplementation)->map(x|$x->propertyMappingsByPropertyName('firstName'))->cast(@meta::relational::mapping::RelationalPropertyMapping).relationalOperationElement->toOne(),
         ^meta::relational::metamodel::Literal(value = ',')
      ]
   )->meta::relational::functions::typeInference::inferRelationalType()->toOne();
   assertEquals('VARCHAR(4000)', $dType->meta::relational::metamodel::datatype::dataTypeToSqlText());
}

###Pure
Class meta::relational::tests::runtime::extractDBs::SubstitutionTestClass1
{
   prop1: Integer[1];
}

###Relational
Database meta::relational::tests::runtime::extractDBs::SubstitutionTestDB1_Inc
(
   Table testTable1(prop1 INT)
)

###Relational
Database meta::relational::tests::runtime::extractDBs::SubstitutionTestDB1
(
   include meta::relational::tests::runtime::extractDBs::SubstitutionTestDB1_Inc
)

###Mapping
Mapping meta::relational::tests::runtime::extractDBs::SubstitutionTestMappingLevel1
(
   meta::relational::tests::runtime::extractDBs::SubstitutionTestClass1 : Relational {
      prop1: [meta::relational::tests::runtime::extractDBs::SubstitutionTestDB1]testTable1.prop1
   }
)

###Pure
function <<test.Test>> meta::relational::tests::runtime::extractDBs::testExtractDBsWithSubstituition():Boolean[1]
{
   let dbs = meta::relational::tests::runtime::extractDBs::SubstitutionTestMappingLevel1->meta::relational::runtime::extractDBs();
   assertSize($dbs, 1);
   assert($dbs->at(0) == meta::relational::tests::runtime::extractDBs::SubstitutionTestDB1);
}

###Relational
Database meta::relational::tests::runtime::typeInference::DecimalCompatibilityDB
(
  Table DecimalCompatibilityTable(
    prop1 Decimal(3, 0),
    prop2 Decimal(4, 1),
    prop3 Numeric(4, 4),
    prop4 INTEGER,
    prop5 DOUBLE
  )
)

###Pure
Class meta::relational::tests::runtime::typeInference::DecimalCompatibilityModel
{
  intProp: Integer[1];
  floatProp: Float[1];
  numericProp: Decimal[1];
}

###Mapping
Mapping meta::relational::tests::runtime::typeInference::DecimalCompatibilityMapping1
(
   meta::relational::tests::runtime::typeInference::DecimalCompatibilityModel : Relational {
      intProp: case(isNotNull([meta::relational::tests::runtime::typeInference::DecimalCompatibilityDB]DecimalCompatibilityTable.prop1),
          [meta::relational::tests::runtime::typeInference::DecimalCompatibilityDB]DecimalCompatibilityTable.prop1, 
          [meta::relational::tests::runtime::typeInference::DecimalCompatibilityDB]DecimalCompatibilityTable.prop4
      ),
      floatProp: case(isNotNull([meta::relational::tests::runtime::typeInference::DecimalCompatibilityDB]DecimalCompatibilityTable.prop2),
          [meta::relational::tests::runtime::typeInference::DecimalCompatibilityDB]DecimalCompatibilityTable.prop2, 
          [meta::relational::tests::runtime::typeInference::DecimalCompatibilityDB]DecimalCompatibilityTable.prop5
      ),
      numericProp:  case(isNotNull([meta::relational::tests::runtime::typeInference::DecimalCompatibilityDB]DecimalCompatibilityTable.prop2),
          [meta::relational::tests::runtime::typeInference::DecimalCompatibilityDB]DecimalCompatibilityTable.prop2, 
          [meta::relational::tests::runtime::typeInference::DecimalCompatibilityDB]DecimalCompatibilityTable.prop3
      )
   }
)