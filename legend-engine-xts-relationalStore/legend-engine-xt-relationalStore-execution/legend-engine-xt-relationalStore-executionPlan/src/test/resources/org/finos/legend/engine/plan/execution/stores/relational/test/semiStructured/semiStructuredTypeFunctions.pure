// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class typeFunctions::model::Order
{
  orderId: Integer[1];
  orderName: String[1];
  customer: typeFunctions::model::Customer[1];
}

Class typeFunctions::model::Customer
{
  customerId: String[1];
  customerAddress: typeFunctions::model::CustomerAddress[1];
  transactionDetails: typeFunctions::model::TransactionDetails[1];
  products: typeFunctions::model::Product[*];
}

Class typeFunctions::model::CustomerAddress
{
  name: String[1];
}

Class typeFunctions::model::BillingAddress extends typeFunctions::model::CustomerAddress
{
  billAddress: String[1];
}

Class typeFunctions::model::ShippingAddress extends typeFunctions::model::CustomerAddress
{
  shipAddress: String[1];
}

Class typeFunctions::model::TransactionDetails
{
  payment: typeFunctions::model::Payment[1];
}

Class typeFunctions::model::Payment
{
  paymentId: String[1];
}

Class typeFunctions::model::CashOnDeliveryPayment extends typeFunctions::model::Payment
{
  amountToBePaid: Integer[1];
}

Class typeFunctions::model::PrepaidPayment extends typeFunctions::model::Payment
{
  amountPaid: Integer[1];
}

Class typeFunctions::model::WalletPrepaidPayment extends typeFunctions::model::PrepaidPayment
{
  walletTransactionAmount: Integer[1];
}

Class typeFunctions::model::CardPrepaidPayment extends typeFunctions::model::PrepaidPayment
{
  cardTransactionAmount: Integer[1];
}

Class typeFunctions::model::Product
{
  productId: Integer[1];
}

Class typeFunctions::model::ElectronicsProduct extends typeFunctions::model::Product
{
  brand: String[1];
}

Class typeFunctions::model::SportsProduct extends typeFunctions::model::Product
{
  sport: String[1];
}

###Relational
Database typeFunctions::store::H2DB
(
  Schema ORDER_SCHEMA
  (
    Table ORDER_TABLE
    (
      ORDERID INTEGER PRIMARY KEY,
      ORDERNAME VARCHAR(100),
      CUSTOMER VARCHAR(1000)
    )
  )
)

###ExternalFormat
Binding typeFunctions::store::CustomerBinding
{
  contentType: 'application/json';
  modelIncludes: [
    typeFunctions::model::Customer
  ];
}

###Mapping
Mapping typeFunctions::mapping::H2Mapping
(
  typeFunctions::model::Order: Relational
  {
    scope([typeFunctions::store::H2DB]ORDER_SCHEMA.ORDER_TABLE)
    (
      orderId: ORDERID,
      orderName: ORDERNAME,
      customer: Binding typeFunctions::store::CustomerBinding : CUSTOMER
    )
  }
)


###Runtime
Runtime typeFunctions::runtime::H2Runtime
{
    mappings :
    [
        typeFunctions::mapping::H2Mapping
    ];
    connections :
    [
        typeFunctions::store::H2DB :
        [
            connection_1 : #{
                RelationalDatabaseConnection {
                    store: typeFunctions::store::H2DB;
                    type: H2;
                    specification: LocalH2{
                        testDataSetupSqls: [
                            'DROP SCHEMA IF EXISTS ORDER_SCHEMA CASCADE;',
                            'CREATE SCHEMA ORDER_SCHEMA;',
                            'CREATE TABLE ORDER_SCHEMA.ORDER_TABLE(ORDERID INT PRIMARY KEY, ORDERNAME VARCHAR(100), CUSTOMER VARCHAR(1000));',
                            'INSERT INTO ORDER_SCHEMA.ORDER_TABLE(ORDERID,ORDERNAME,CUSTOMER) VALUES (1,\'Order1\',\'{"customerId": "Customer1", "customerAddress": {"@type":"BillingAddress","name": "A1","billAddress":"B1"},"transactionDetails": {"payment":{"@type":"CashOnDeliveryPayment","paymentId": "P1","amountToBePaid": 200}}, "products": [{"@type": "ElectronicsProduct", "productId": 1, "productName": "P1", "brand": "B1"}, {"@type": "SportsProduct", "productId": 2, "productName": "P2", "sport": "S1"}]}\');',
                            'INSERT INTO ORDER_SCHEMA.ORDER_TABLE(ORDERID,ORDERNAME,CUSTOMER) VALUES (2,\'Order2\',\'{"customerId": "Customer2", "customerAddress": {"@type":"BillingAddress","name": "A2","billAddress":"B2"},"transactionDetails": {"payment":{"@type":"CashOnDeliveryPayment","paymentId": "P2","amountToBePaid": 180}}, "products": [{"@type": "SportsProduct", "productId": 2, "productName": "P2", "sport": "S1"}]}\');',
                            'INSERT INTO ORDER_SCHEMA.ORDER_TABLE(ORDERID,ORDERNAME,CUSTOMER) VALUES (3,\'Order3\',\'{"customerId": "Customer3", "customerAddress": {"@type":"BillingAddress","name": "A3","billAddress":"B3"},"transactionDetails": {"payment":{"@type":"CashOnDeliveryPayment","paymentId": "P3","amountToBePaid": 290}}}\');',
                            'INSERT INTO ORDER_SCHEMA.ORDER_TABLE(ORDERID,ORDERNAME,CUSTOMER) VALUES (4,\'Order4\',\'{"customerId": "Customer4", "customerAddress": {"@type":"Address","name": "A4"},"transactionDetails": {"payment":{"@type":"PrepaidPayment","paymentId": "P4","amountPaid": 150}}}\');',
                            'INSERT INTO ORDER_SCHEMA.ORDER_TABLE(ORDERID,ORDERNAME,CUSTOMER) VALUES (6,\'Order6\',\'{"customerId": "Customer6", "customerAddress": {"@type":"ShippingAddress","name": "A6","shipAddress":"S2"},"transactionDetails": {"payment":{"@type":"PrepaidPayment","paymentId": "P6","amountPaid": 120}}}\')',
                            'INSERT INTO ORDER_SCHEMA.ORDER_TABLE(ORDERID,ORDERNAME,CUSTOMER) VALUES (5,\'Order5\',\'{"customerId": "Customer5", "customerAddress": {"@type":"ShippingAddress","name": "A5","shipAddress":"S1"},"transactionDetails": {"payment":{"@type":"PrepaidPayment","paymentId": "P5","amountPaid": 185}}}\')',
                            'INSERT INTO ORDER_SCHEMA.ORDER_TABLE(ORDERID,ORDERNAME,CUSTOMER) VALUES (7,\'Order7\',\'{"customerId": "Customer7", "customerAddress": {"@type":"ShippingAddress","name": "A7","shipAddress":"S3"},"transactionDetails": {"payment":{"@type":"WalletPrepaidPayment","paymentId": "P7","amountPaid": 180,"walletTransactionAmount":200}}}\')',
                            'INSERT INTO ORDER_SCHEMA.ORDER_TABLE(ORDERID,ORDERNAME,CUSTOMER) VALUES (8,\'Order8\',\'{"customerId": "Customer8", "customerAddress": {"@type":"ShippingAddress","name": "A8","shipAddress":"S4"},"transactionDetails": {"payment":{"@type":"CardPrepaidPayment","paymentId": "P8","amountPaid": 160, "cardTransactionAmount":190}}}\')'

                        ];
                    };
                    auth: Test;
                }
            }#
        ]
    ];
}

###Pure
function typeFunctions::semiStructuredTypeNameFunctionUsageInProjectWithFunctions(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()->project(
        [
            x | $x.customer.customerAddress->typeName(),
            x | $x.customer.transactionDetails.payment->typeName()
        ],
        [
            'Customer Address Type',
            'Payment Type'
        ]
    );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageInProjectWithColSpecs(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()->project(
        [
            col(x | $x.customer.customerAddress->typeName(), 'Customer Address Type'),
            col(x | $x.customer.transactionDetails.payment->typeName(), 'Payment Type')
        ]
    );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageInFilter(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->filter(
            x | $x.customer.transactionDetails.payment->typeName() == 'CashOnDeliveryPayment'
        )
        ->project(
            [
                col(x | $x.orderId, 'Order Id'),
                col(x | $x.customer.customerAddress->typeName(), 'Customer Address Type')
            ]
        );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageAfterFlattenFunction(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->project(
            [
                x | $x.orderId,
                x | $x.customer.products->map(p | $p->typeName())
            ],
            [
                'Order Id',
                'Product Type'
            ]
        );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageAfterFlattenColSpec(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->project(
            [
                col(x | $x.orderId, 'Order Id'),
                col(x | $x.customer.products->map(p | $p->typeName()), 'Product Type')
            ]
        );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageAfterArrayElementAccess(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->project(
            [
                col(x | $x.orderId, 'Order Id'),
                col(x | $x.customer.products->at(0)->typeName(), 'Product 0 Type'),
                col(x | $x.customer.products->at(1)->typeName(), 'Product 1 Type')
            ]
        );
}
