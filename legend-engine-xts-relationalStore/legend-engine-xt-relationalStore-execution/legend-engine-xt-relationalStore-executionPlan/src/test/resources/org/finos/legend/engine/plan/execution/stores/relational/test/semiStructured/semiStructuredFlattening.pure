// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class flatten::model::Person
{
  firstName: String[1];
  lastName: String[1];
  firm: flatten::model::Firm[1];
  manager: flatten::model::Person[1];
}

Class flatten::model::Firm
{
  legalName: String[1];
  otherNames: String[*];
  addresses: flatten::model::Address[*];
}

Class flatten::model::Address
{
  name: String[1];
}

Class flatten::model::AddressWithLines extends flatten::model::Address
{
  lines: flatten::model::AddressLine[*];
}

Class flatten::model::AddressLine
{
  lineno: Integer[1];
}

Class flatten::model::StreetAddressLine extends flatten::model::AddressLine
{
  street: String[1];
}

Class flatten::model::CityAddressLine extends flatten::model::AddressLine
{
  city: String[1];
}

Class flatten::model::StateAddressLine extends flatten::model::AddressLine
{
  state: String[1];
}

###Relational
Database flatten::store::H2DB
(
  Schema PERSON_SCHEMA
  (
    Table PERSON_TABLE
    (
      ID INTEGER PRIMARY KEY,
      FIRSTNAME VARCHAR(100),
      LASTNAME VARCHAR(100),
      FIRM_DETAILS VARCHAR(1000),
      MANAGERID INTEGER
    )
  )

  Join manager(PERSON_SCHEMA.PERSON_TABLE.MANAGERID = {target}.ID)
)


###ExternalFormat
Binding flatten::store::FirmBinding
{
  contentType: 'application/json';
  modelIncludes: [
    flatten::model::Firm,
    flatten::model::Address,
    flatten::model::AddressWithLines,
    flatten::model::AddressLine,
    flatten::model::StreetAddressLine,
    flatten::model::CityAddressLine,
    flatten::model::StateAddressLine
  ];
}

###Mapping
Mapping flatten::mapping::H2Mapping
(
  flatten::model::Person: Relational
  {
    ~primaryKey
    (
      [flatten::store::H2DB]PERSON_SCHEMA.PERSON_TABLE.ID
    )
    ~mainTable [flatten::store::H2DB]PERSON_SCHEMA.PERSON_TABLE
    firstName: [flatten::store::H2DB]PERSON_SCHEMA.PERSON_TABLE.FIRSTNAME,
    lastName: [flatten::store::H2DB]PERSON_SCHEMA.PERSON_TABLE.LASTNAME,
    firm: Binding flatten::store::FirmBinding : [flatten::store::H2DB]PERSON_SCHEMA.PERSON_TABLE.FIRM_DETAILS,
    manager[flatten_model_Person]: [flatten::store::H2DB]@manager
  }
)

###Runtime
Runtime flatten::runtime::H2Runtime
{
    mappings :
    [
        flatten::mapping::H2Mapping
    ];
    connections :
    [
        flatten::store::H2DB :
        [
            connection_1 : #{
                RelationalDatabaseConnection {
                    store: flatten::store::H2DB;
                    type: H2;
                    specification: LocalH2{
                        testDataSetupSqls: [
                            'DROP SCHEMA IF EXISTS PERSON_SCHEMA CASCADE;',
                            'CREATE SCHEMA PERSON_SCHEMA;',
                            'CREATE TABLE PERSON_SCHEMA.PERSON_TABLE(ID INT PRIMARY KEY, FIRSTNAME VARCHAR(100), LASTNAME VARCHAR(100), FIRM_DETAILS VARCHAR(1000), MANAGERID INT);',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (1,\'Peter\',\'Smith\',\'{"legalName": "Firm X", "otherNames": ["O1", "O2"], "addresses": [{"name": "A1", "lines": [{"lineno": 1, "street": "S1"}, {"lineno": 2, "city": "C1"}]}, {"name": "A11", "lines": [{"lineno": 1, "street": "S1"}, {"lineno": 2, "city": "C2"}]}]}\',2);',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (2,\'John\',\'Johnson\',\'{"legalName": "Firm X", "otherNames": ["O1", "O2"], "addresses": [{"name": "A2", "lines": [{"lineno": 1, "street": "S2"}, {"lineno": 2, "city": "C2"}]}, {"name": "A22", "lines": [{"lineno": 1, "street": "S1"}, {"lineno": 2, "city": "C3"}]}]}\',4);',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (3,\'John\',\'Hill\',\'{"legalName": "Firm X", "otherNames": ["O1", "O2"], "addresses": [{"name": "A3", "lines": [{"lineno": 1, "street": "S3"}, {"lineno": 2, "city": "C1"}]}, {"name": "A32", "lines": [{"lineno": 1, "street": "S1"}, {"lineno": 2, "city": "C1"}]}]}\',2);',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (4,\'Anthony\',\'Allen\',\'{"legalName": "Firm X", "otherNames": ["O1", "O2"], "addresses": [{"name": "A4", "lines": [{"lineno": 1, "street": "S1"}, {"lineno": 2, "city": "C3"}]}]}\',null)',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (5,\'Fabrice\',\'Roberts\',\'{"legalName": "Firm A", "otherNames": ["O3", "O4"], "addresses": [{"name": "A5", "lines": [{"lineno": 1, "street": "S4"}, {"lineno": 2, "city": "C2"}]}, {"name": "A52", "lines": [{"lineno": 1, "street": "S1"}, {"lineno": 2, "city": "C4"}]}]}\',null)',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (6,\'Oliver\',\'Hill\',\'{"legalName": "Firm B", "otherNames": ["O5", "O6"], "addresses": [{"name": "A6", "lines": [{"lineno": 1, "street": "S5"}, {"lineno": 2, "city": "C4"}]}]}\',7)',
                            'INSERT INTO PERSON_SCHEMA.PERSON_TABLE(ID,FIRSTNAME,LASTNAME,FIRM_DETAILS,MANAGERID) VALUES (7,\'David\',\'Harris\',\'{"legalName": "Firm B", "otherNames": ["O5", "O6"], "addresses": [{"name": "A7", "lines": [{"lineno": 1, "street": "S1"}, {"lineno": 2, "city": "C1"}]}]}\',null)'
                        ];
                    };
                    auth: Test;
                }
            }#
        ]
    ];
}


###Pure
function flatten::semiStructuredPrimitivePropertyFlattening(): TabularDataSet[1]
{
    flatten::model::Person.all()->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name'),
        col(x | $x.firm.otherNames, 'Firm Other Name')

    ])
}

function flatten::semiStructuredComplexPropertyFlattening(): TabularDataSet[1]
{
    flatten::model::Person.all()->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name'),
        col(x | $x.firm.addresses.name, 'Firm Address Name')
    ])
}

function flatten::semiStructuredPrimitivePropertyArrayIndexing(): TabularDataSet[1]
{
    flatten::model::Person.all()->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name'),
        col(x | $x.firm.otherNames->at(0), 'Firm Other Name 0'),
        col(x | $x.firm.otherNames->at(2), 'Firm Other Name 2')
    ])
}

function flatten::semiStructuredComplexPropertyArrayIndexing(): TabularDataSet[1]
{
    flatten::model::Person.all()->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name'),
        col(x | $x.firm.addresses->at(0).name, 'Firm Address 0 Name'),
        col(x | $x.firm.addresses->at(2).name, 'Firm Address 2 Name')
    ])
}

function flatten::semiStructuredComplexPropertyFlatteningFollowedBySubType(): TabularDataSet[1]
{
    flatten::model::Person.all()->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name'),
        col(x | $x.firm.addresses->subType(@flatten::model::AddressWithLines)->map(a | $a.lines->at(0).lineno), 'Firm Address Line 0 Line No')
    ])
}

function flatten::semiStructuredComplexPropertyArrayIndexingFollowedBySubType(): TabularDataSet[1]
{
    flatten::model::Person.all()->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name'),
        col(x | $x.firm.addresses->at(0)->subType(@flatten::model::AddressWithLines).lines->at(0).lineno, 'Firm Address 0 Line 0 Line No')
    ])
}

function flatten::semiStructuredPrimitivePropertyFiltering(): TabularDataSet[1]
{
    flatten::model::Person.all()
    ->filter(x | $x.firm.otherNames->contains('A'))
    ->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name')
    ])
    ->distinct()
}

function flatten::semiStructuredPrimitivePropertyFilteringInProject(): TabularDataSet[1]
{
    flatten::model::Person.all()->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name'),
        col(x | $x.firm.otherNames->filter(x | $x->startsWith('A')), 'Firm Other Name')
    ])
}

function flatten::semiStructuredComplexPropertyFiltering(): TabularDataSet[1]
{
    flatten::model::Person.all()
    ->filter(p | $p.firm.addresses->exists(a | $a.name == 'B'))
    ->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name')
    ])
}

function flatten::semiStructuredComplexPropertyFilteringInProject(): TabularDataSet[1]
{
    flatten::model::Person.all()
    ->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name'),
        col(x | $x.firm.addresses->filter(a | $a.name == 'A').name, 'Firm Address Name 1'),
        col(x | $x.firm.addresses->filter(a | $a.name == 'B').name, 'Firm Address Name 2')
    ])
}

function flatten::semiStructuredComplexPropertyFilteringInProjectFollowedBySubType(): TabularDataSet[1]
{
    flatten::model::Person.all()
    ->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name'),
        col(x | $x.firm.addresses->filter(a | $a.name == 'A')->subType(@flatten::model::AddressWithLines).lines->at(0).lineno, 'Firm Address Name 1'),
        col(x | $x.firm.addresses->filter(a | $a.name == 'B').name, 'Firm Address Name 2')
    ])
}

function flatten::semiStructuredMultiLevelFlattening(): TabularDataSet[1]
{
    flatten::model::Person.all()
    ->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name'),
        col(x | $x.firm.addresses->filter(a | $a.name == 'A')->subType(@flatten::model::AddressWithLines).lines.lineno, 'Firm Address Name Line No')
    ])
}

function flatten::semiStructuredSubAggregation(): TabularDataSet[1]
{
    flatten::model::Person.all()
    ->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name'),
        col(x | $x.firm.addresses.name->joinStrings(';'), 'Firm Address Names')
    ])
}

function flatten::semiStructuredSubAggregationDeep(): TabularDataSet[1]
{
    flatten::model::Person.all()
    ->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.legalName, 'Firm Name'),
        col(x | $x.firm.addresses->subType(@flatten::model::AddressWithLines).lines.lineno->sum(), 'Firm Address Line No Sum')
    ])
}

function flatten::semiStructuredMultiFlatten(): TabularDataSet[1]
{
    flatten::model::Person.all()
    ->project([
        col(x | $x.firstName, 'First Name'),
        col(x | $x.firm.addresses.name, 'Firm Address Name'),
        col(x | $x.firm.addresses->subType(@flatten::model::AddressWithLines).lines->at(0).lineno, 'Firm Address Line 0 No'),
        col(x | $x.firm.otherNames, 'Firm Other Name')
    ])
}
