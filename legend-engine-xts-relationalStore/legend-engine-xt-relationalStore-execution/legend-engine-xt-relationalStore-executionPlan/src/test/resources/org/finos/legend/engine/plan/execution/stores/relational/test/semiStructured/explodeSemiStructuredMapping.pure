// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class simple::model::order
{
  id: String[1];
  identifier: String[1];
  quantity: Integer[1];
  side: String[1];
  price: Float[1];
  account: String[1];
  tradeId: String[1];
  product: simple::model::Product[1];
  block: simple::model::block[1];
}

Class simple::model::trade
{
  id: String[1];
  tradeSummary: simple::model::tradeSummary[1];
  status: String[1];
  block: simple::model::block[1];
}

Class simple::model::tradeSummary
{
  identifier: String[1];
  execQuantity: Integer[1];
  price: String[1];
  side: String[1];
  orderId: String[1];
}

Class simple::model::block
{
  id: String[1];
  account: String[1];
  blockData: simple::model::blockData[1];
  trades: simple::model::trade[*];
  orders: simple::model::order[*];
  products: String[*];
}

Class simple::model::relatedEntity
{
  tag: String[1];
  tagId: String[1];
}

Class simple::model::blockData
{
  relatedEntities: simple::model::relatedEntity[1..*];
  status: String[1];
}

Class simple::model::Product
{
  product: String[1];
  identifier: String[1];
  version: String[1];
}

###ExternalFormat
Binding simple::binding::binding
{
  contentType: 'application/json';
  modelIncludes: [
    simple::model::tradeSummary,
    simple::model::relatedEntity,
    simple::model::blockData
  ];
}

###Relational
Database simple::store::semistructured
(
  Schema Semistructured
  (
    Table Blocks
    (
      ID varchar(100) PRIMARY KEY,
      ACCOUNT varchar(100),
      BLOCKDATA SEMISTRUCTURED
    )
    Table Trades
    (
      ID varchar(100) PRIMARY KEY,
      STATUS varchar(100),
      TRADESUMMARY SEMISTRUCTURED
    )
    Table Orders
    (
      ID varchar(100) PRIMARY KEY,
      IDENTIFIER varchar(100),
      QUANTITY INTEGER,
      SIDE varchar(100),
      PRICE DOUBLE
    )
    Table Product
    (
      IDENTIFIER varchar(100) PRIMARY KEY,
      VERSION varchar(100) PRIMARY KEY,
      PRODUCT varchar(100)
    )
  )

  Join Block_Order(extractFromSemiStructured(explodeSemiStructured(Semistructured.Blocks.BLOCKDATA, 'relatedEntities', 'SEMISTRUCTURED'), 'tag', 'VARCHAR') = 'order'
    and extractFromSemiStructured(explodeSemiStructured(Semistructured.Blocks.BLOCKDATA, 'relatedEntities', 'SEMISTRUCTURED'), 'tagId', 'VARCHAR') = Semistructured.Orders.ID)
  Join Block_Trade(extractFromSemiStructured(explodeSemiStructured(Semistructured.Blocks.BLOCKDATA, 'relatedEntities', 'SEMISTRUCTURED'), 'tag', 'VARCHAR') = 'trade'
    and extractFromSemiStructured(explodeSemiStructured(Semistructured.Blocks.BLOCKDATA, 'relatedEntities', 'SEMISTRUCTURED'), 'tagId', 'VARCHAR') = Semistructured.Trades.ID)
  Join Order_Product(Semistructured.Orders.IDENTIFIER = Semistructured.Product.IDENTIFIER)
)

###Mapping
Mapping simple::mapping::semistructured
(
  *simple::model::block: Relational
  {
    ~primaryKey
    (
      [simple::store::semistructured]Semistructured.Blocks.ID
    )
    ~mainTable [simple::store::semistructured]Semistructured.Blocks
    id: [simple::store::semistructured]Semistructured.Blocks.ID,
    account: [simple::store::semistructured]Semistructured.Blocks.ACCOUNT,
    trades[simple_model_trade]: [simple::store::semistructured]@Block_Trade,
    orders[simple_model_order]: [simple::store::semistructured]@Block_Order,
    products: [simple::store::semistructured]@Block_Order > [simple::store::semistructured]@Order_Product | [simple::store::semistructured]Semistructured.Product.PRODUCT,
    blockData: Binding simple::binding::binding : [simple::store::semistructured]Semistructured.Blocks.BLOCKDATA
  }
  *simple::model::order: Relational
  {
    ~primaryKey
    (
      [simple::store::semistructured]Semistructured.Orders.ID
    )
    ~mainTable [simple::store::semistructured]Semistructured.Orders
    id: [simple::store::semistructured]Semistructured.Orders.ID,
    quantity: [simple::store::semistructured]Semistructured.Orders.QUANTITY,
    side: [simple::store::semistructured]Semistructured.Orders.SIDE,
    price: [simple::store::semistructured]Semistructured.Orders.PRICE,
    block[simple_model_block]: [simple::store::semistructured]@Block_Order,
    account: [simple::store::semistructured]@Block_Order | [simple::store::semistructured]Semistructured.Blocks.ACCOUNT,
    tradeId: [simple::store::semistructured]@Block_Order > [simple::store::semistructured]@Block_Trade | [simple::store::semistructured]Semistructured.Trades.ID,
    identifier: [simple::store::semistructured]Semistructured.Orders.IDENTIFIER,
    product: [simple::store::semistructured]@Order_Product
  }
  *simple::model::trade: Relational
  {
    ~primaryKey
    (
      [simple::store::semistructured]Semistructured.Trades.ID
    )
    ~mainTable [simple::store::semistructured]Semistructured.Trades
    id: [simple::store::semistructured]Semistructured.Trades.ID,
    status: [simple::store::semistructured]Semistructured.Trades.STATUS,
    block[simple_model_block]: [simple::store::semistructured]@Block_Trade,
    tradeSummary: Binding simple::binding::binding : [simple::store::semistructured]Semistructured.Trades.TRADESUMMARY
  }
  *simple::model::Product: Relational
  {
    ~primaryKey
    (
      [simple::store::semistructured]Semistructured.Product.IDENTIFIER
    )
    ~mainTable [simple::store::semistructured]Semistructured.Product
    identifier: [simple::store::semistructured]Semistructured.Product.IDENTIFIER,
    version: [simple::store::semistructured]Semistructured.Product.VERSION,
    product: [simple::store::semistructured]Semistructured.Product.PRODUCT
  }
)

###Connection
RelationalDatabaseConnection simple::connection::snowflake
{
  store: simple::store::semistructured;
  type: H2;
  specification: LocalH2
    {
         testDataSetupSqls:
             [
                'drop schema if exists semistructured cascade;',
                'create schema semistructured;',
                'create table if not exists semistructured.blocks ( id int primary key, account varchar(100), blockData varchar(1000) ) as values (1, \'a1\', \'{"status": "fulfilled", "relatedEntities": [{"tag": "trade", "tagId": "t1"}, {"tag": "order", "tagId": "o1"}]}\'), (2, \'a1\', \'{"status": "cancelled", "relatedEntities": [{"tag": "trade", "tagId": "t2"}, {"tag": "order", "tagId": "o2"}, {"tag": "order", "tagId": "o1"}]}\'), (3, \'a2\', \'{"status": "fulfilled", "relatedEntities": [{"tag": "trade", "tagId": "t3"}, {"tag": "trade", "tagId": "t4"}, {"tag": "order", "tagId": "o3"}]}\'), (4, \'a2\', \'{"status": "accepted", "relatedEntities": [{"tag": "trade", "tagId": "t5"}, {"tag": "trade", "tagId": "t6"}, {"tag": "order", "tagId": "o4"}]}\'), (5, \'a1\', \'{"status": "fulfilled", "relatedEntities": [{"tag": "trade", "tagId": "t7"}, {"tag": "order", "tagId": "o5"}, {"tag": "order", "tagId": "o6"}]}\'), (6, \'a3\', \'{"status": "rejected", "relatedEntities": []}\');',
                'create table if not exists semistructured.trades ( id varchar(100) primary key, status varchar(100), tradeSummary varchar(1000) ) as values (\'t1\', \'accepted\', \'{"identifier": "i1", "execQuantity": 100, "execPrice": 100, "side": "SELL"}\'), (\'t2\', \'rejected\', \'{"identifier": "i2", "execQuantity": 100, "execPrice": 10, "side": "BUY"}\'), (\'t3\', \'accepted\', \'{"identifier": "i3", "execQuantity": 100, "execPrice": 100, "side": "BUY"}\'), (\'t4\', \'accepted\', \'{"identifier": "i3", "execQuantity": 100, "execPrice": 105, "side": "BUY"}\'), (\'t5\', \'accepted\', \'{"identifier": "i1", "execQuantity": 70, "execPrice": 100, "side": "SELL"}\'), (\'t6\', \'rejected\', \'{"identifier": "i1", "execQuantity": 80, "execPrice": 90, "side": "SELL"}\'), (\'t7\', \'accepted\', \'{"identifier": "i4", "execQuantity": 60, "execPrice": 50, "side": "SELL"}\'), (\'t8\', \'invalid\', \'{"identifier": "i4", "execQuantity": 60, "execPrice": 50, "side": "SELL"}\');',
                'create table if not exists semistructured.orders ( id varchar(100) primary key, identifier varchar(100), quantity int, side varchar(10), price double ) as values (\'o1\', \'i1\', 100, \'SELL\', 100), (\'o2\', \'i2\', 100, \'BUY\', 10), (\'o3\', \'i3\', 200, \'BUY\', 100), (\'o4\', \'i1\', 150, \'SELL\', 100), (\'o5\', \'i4\', 60, \'SELL\', 50), (\'o6\', \'i4\', 60, \'SELL\', 50);',
                'create table if not exists semistructured.product ( product varchar(100), identifier varchar(100), version varchar(100)) as values (\'p1\', \'i1\', \'v1\'), (\'p2\', \'i2\', \'v1\'), (\'p3\', \'i3\', \'v1\'), (\'p1\', \'i4\', \'v1\');'
             ];
    };
  auth: Test;
}

###Runtime
Runtime simple::runtime::runtime
{
  mappings:
  [
    simple::mapping::semistructured
  ];
  connections:
  [
    simple::store::semistructured:
    [
      connection_1: simple::connection::snowflake
    ]
  ];
}

###Pure
function simple::query::getOrdersForBlock():TabularDataSet[1]
{
    simple::model::block.all()->project(
      [
        x|$x.id,
        x|$x.account,
        x|$x.orders.id,
        x|$x.orders.identifier,
        x|$x.orders.price
      ],
      [
        'Id',
        'Account',
        'Orders/Id',
        'Orders/Identifier',
        'Orders/Price'
      ]
    );
}

function simple::query::getBlockForTrade():TabularDataSet[1]
{
    simple::model::trade.all()->project(
      [
        x|$x.id,
        x|$x.status,
        x|$x.block.id,
        x|$x.block.account
      ],
      [
        'Id',
        'Status',
        'Block/Id',
        'Block/Account'
      ]
    );
}

function simple::query::getTradesForNonCancelledBlocks():TabularDataSet[1]
{
    simple::model::block.all()->filter(
      x|!($x.blockData.status == 'cancelled')
    )->project(
      [
        x|$x.id,
        x|$x.account,
        x|$x.trades.id,
        x|$x.trades.status
      ],
      [
        'Id',
        'Account',
        'Trades/Id',
        'Trades/Status'
      ]
    );
}

function simple::query::getNonCancelledBlocksForTrades():TabularDataSet[1]
{
    simple::model::trade.all()->filter(
      x|!($x.block.blockData.status == 'cancelled')
    )->project(
      [
        x|$x.id,
        x|$x.status,
        x|$x.block.id,
        x|$x.block.account
      ],
      [
        'Id',
        'Status',
        'Block/Id',
        'Block/Account'
      ]
    );
}

function simple::query::getNonCancelledBlocksForTradesNoProject():TabularDataSet[1]
{
    simple::model::trade.all()->filter(
      x|!($x.block.blockData.status == 'cancelled')
    )->project(
      [
        x|$x.id,
        x|$x.status
      ],
      [
        'Id',
        'Status'
      ]
    );
}

function simple::query::getOrdersAndRelatedEntitiesForBlock():TabularDataSet[1]
{
    simple::model::block.all()->project(
      [
        x|$x.id,
        x|$x.blockData.relatedEntities.tag,
        x|$x.blockData.relatedEntities.tagId,
        x|$x.orders.id
      ],
      [
        'Id',
        'Entity Tag',
        'Entity Tag Id',
        'Orders/Id'
      ]
    );
}

function simple::query::getBigBuyOrdersInBlock():TabularDataSet[1]
{
    simple::model::block.all()->project(
      [
        x|$x.id,
        x|$x.account,
        x|$x.orders->filter(
        x_1|($x_1.quantity >= 100) &&
          ($x_1.side == 'BUY')
      ).id,
        x|$x.orders.id
      ],
      [
        'Block/Id',
        'Block/Account',
        'Big Buy Orders',
        'Orders/Id'
      ]
    );
}

function simple::query::getTradeVolumeInBlock():TabularDataSet[1]
{
    simple::model::block.all()->groupBy(
      [
        x|$x.id,
        x|$x.account
      ],
      [
        agg(
          x|$x.trades.tradeSummary.execQuantity,
          x|$x->sum()
        )
      ],
      [
        'Id',
        'Account',
        'quantity'
      ]
    );
}

function simple::query::getTotalBuyOrderVolumeInBlock():TabularDataSet[1]
{
    simple::model::block.all()->project(
      [
        x|$x.id,
        x|$x.account,
        x|$x.orders->filter(
        x_1|$x_1.side == 'BUY'
      ).quantity->sum()
      ],
      [
        'Id',
        'Account',
        'Buy Order'
      ]
    );
}

function simple::query::getTradesAndOrdersInBlock():TabularDataSet[1]
{
    simple::model::block.all()->project(
      [
        x|$x.id,
        x|$x.account,
        x|$x.orders.id,
        x|$x.orders.identifier,
        x|$x.trades.id,
        x|$x.trades.status
      ],
      [
        'Id',
        'Account',
        'Orders/Id',
        'Orders/Identifier',
        'Trades/Id',
        'Trades/Status'
      ]
    );
}

function simple::query::getAccountForOrders():TabularDataSet[1]
{
    simple::model::order.all()->project(
      [
        x|$x.id,
        x|$x.account,
        x|$x.block.id
      ],
      [
        'Id',
        'Account',
        'Block/Id'
      ]
    );
}

function simple::query::getRelatedTradesForOrder():TabularDataSet[1]
{
    simple::model::order.all()->project(
      [
        x|$x.id,
        x|$x.tradeId
      ],
      [
        'Id',
        'Trade Id'
      ]
    );
}

function simple::query::getProductsForOrdersInBlock():TabularDataSet[1]
{
    simple::model::block.all()->project(
      [
        x|$x.products,
        x|$x.id
      ],
      [
        'Product',
        'Id'
      ]
    );
}