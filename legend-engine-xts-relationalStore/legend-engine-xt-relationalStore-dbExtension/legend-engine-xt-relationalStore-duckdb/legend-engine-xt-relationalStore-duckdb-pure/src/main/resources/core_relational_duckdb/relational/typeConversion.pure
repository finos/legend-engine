// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::protocols::pure::vX_X_X::metamodel::m3::valuespecification::constant::datatype::primitive::*;
import meta::protocols::pure::vX_X_X::metamodel::m3::valuespecification::constant::*;

function meta::relational::functions::typeConversion::duckDB::convert(genericType:meta::protocols::pure::vX_X_X::metamodel::m3::type::generics::GenericType[1]):meta::relational::metamodel::datatype::DataType[1]
{
    let path = $genericType.rawType->cast(@PackageableType).fullPath;
    let variables = $genericType.typeVariableValues;
    if (
        [
            pair(|$path == 'BigInt', |^meta::relational::metamodel::datatype::BigInt()),
            pair(|$path == 'Date', |^meta::relational::metamodel::datatype::Date()),
            pair(|$path == 'Decimal', |^meta::relational::metamodel::datatype::Decimal(precision=$variables->cast(@CInteger)->at(0).value, scale=$variables->cast(@CInteger)->at(1).value)),
            pair(|$path == 'Double', |^meta::relational::metamodel::datatype::Double()),
            pair(|$path == 'Float4', |^meta::relational::metamodel::datatype::Float()),
            pair(|$path == 'Int', |^meta::relational::metamodel::datatype::Integer()),
            pair(|$path == 'SmallInt', |^meta::relational::metamodel::datatype::SmallInt()),
            pair(|$path == 'Time', |fail('not supported yet!')),
            pair(|$path == 'Timestamp', |^meta::relational::metamodel::datatype::Timestamp()),
            pair(|$path == 'TinyInt', |^meta::relational::metamodel::datatype::TinyInt()),
            pair(|$path == 'UBigInt', |fail('not supported yet!')),
            pair(|$path == 'UInt', |fail('not supported yet!')),
            pair(|$path == 'USmallInt', |fail('not supported yet!')),
            pair(|$path == 'UTinyInt', |fail('not supported yet!')),
            pair(|$path == 'Varchar', |^meta::relational::metamodel::datatype::Varchar(size=$variables->cast(@CInteger).value->toOne()))
        ],
        | fail ($path + ' is not managed yet');
    )->cast(@meta::relational::metamodel::datatype::DataType);
}