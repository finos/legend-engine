// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::extension::*;
import meta::pure::alloy::connections::alloy::authentication::*;
import meta::external::store::relational::runtime::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::metamodel::*;
import meta::relational::runtime::*;

function meta::relational::functions::sqlQueryToString::duckDB::buildDummyConnection():RelationalDatabaseConnection[1]
{
    ^RelationalDatabaseConnection
    (
        type = DatabaseType.DuckDB,
        datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::DuckDBDatasourceSpecification(),
        authenticationStrategy = ^TestDatabaseAuthenticationStrategy()
    )
}

function meta::relational::functions::sqlQueryToString::duckDB::createView(createViewSQL:CreateViewSQL[1], dbConfig:DbConfig[1], extensions:Extension[*]):String[1]
{
    // Secure is not supported
    // Copy Grants is not supported
    'Create or Replace View ' +
    if($createViewSQL.schemaName->isEmpty(),|'',|$createViewSQL.schemaName->toOne() + '.') +
    $createViewSQL.name +
    ' as ' +
    $createViewSQL.generatedSQL +
    ';'
}

function meta::relational::functions::sqlQueryToString::duckDB::createFunction(createFunc:CreateFunctionSQL[1], dbConfig:DbConfig[1], extensions:Extension[*]):String[1]
{
    // Secure is not supported
    // Copy Grants is not supported
    'CREATE MACRO ' +
    if($createFunc.schemaName->isEmpty(),|'',|$createFunc.schemaName->toOne() + '.') +
    $createFunc.name +
    +'('+ $createFunc.parameters->meta::relational::functions::sqlQueryToString::duckDB::fixInputParams()+ ')'+ 
    +' AS TABLE\n'+
    '   '+$createFunc.generatedSQL
}

//TODO: change metamodel for param to relational operation element
function meta::relational::functions::sqlQueryToString::duckDB::fixInputParams(in:String[1]):String[1]
{
  $in->split(',')->map(v| $v->split(' ')->at(0)->trim())->joinStrings(' ')
}
