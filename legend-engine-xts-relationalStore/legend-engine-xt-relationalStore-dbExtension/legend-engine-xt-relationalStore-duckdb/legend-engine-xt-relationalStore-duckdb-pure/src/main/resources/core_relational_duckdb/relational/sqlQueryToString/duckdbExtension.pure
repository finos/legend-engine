import meta::relational::metamodel::join::*;
import meta::relational::functions::sqlQueryToString::duckDB::*;
import meta::relational::functions::sqlQueryToString::default::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::metamodel::operation::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::*;
import meta::external::store::relational::runtime::*;
import meta::relational::runtime::*;
import meta::pure::extension::*;
import meta::relational::extension::*;

function <<db.ExtensionLoader>> meta::relational::functions::sqlQueryToString::duckDB::dbExtensionLoaderForDuckDB():DbExtensionLoader[1]
{
  ^DbExtensionLoader(dbType = DatabaseType.DuckDB, loader = createDbExtensionForDuckDB__DbExtension_1_);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::createDbExtensionForDuckDB():DbExtension[1]
{
   let reservedWords = duckDBReservedWords()->map(kv|$kv->toLower());
   let literalProcessors = getDefaultLiteralProcessors()->putAll(getLiteralProcessorsForDuckDB());
   let literalProcessor = {type:Type[1]| $literalProcessors->get(if($type->instanceOf(Enumeration), | Enum, | $type))->toOne()};
   let dynaFuncDispatch = getDynaFunctionToSqlDefault($literalProcessor)->groupBy(d| $d.funcName)->putAll(
                              getDynaFunctionToSqlForDuckDB()->groupBy(d| $d.funcName))->getDynaFunctionDispatcher();

   ^DbExtension(
      isBooleanLiteralSupported = true,
      isDbReservedIdentifier = {str:String[1]| $str->toLower()->in($reservedWords); },                                          // check case insensitive
      windowColumnProcessor = processWindowColumn_WindowColumn_1__SqlGenerationContext_1__String_1_,
      joinStringsProcessor = processJoinStringsOperationForDuckDB_JoinStrings_1__SqlGenerationContext_1__String_1_,
      literalProcessor = $literalProcessor,
      joinProcessor = meta::relational::functions::sqlQueryToString::duckDB::processJoinForDuckDB_JoinTreeNode_1__DbConfig_1__Format_1__Extension_MANY__String_1_,
      selectSQLQueryProcessor = processSelectSQLQueryForDuckDB_SelectSQLQuery_1__SqlGenerationContext_1__Boolean_1__String_1_,
      commonTableExpressionsProcessor = processCommonTableExpressionsProcessorDefault_CommonTableExpression_MANY__SqlGenerationContext_1__Boolean_1__String_1_,
      columnNameToIdentifier = columnNameToIdentifierForDuckDB_String_1__DbConfig_1__String_1_,
      identifierProcessor = processIdentifierWithDoubleQuotes_String_1__DbConfig_1__String_1_,
      dynaFuncDispatch = $dynaFuncDispatch,
      ddlCommandsTranslator = getDDLCommandsTranslator()
   );
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::processJoinForDuckDB(j:JoinTreeNode[1], dbConfig : DbConfig[1], format:Format[1], extensions:Extension[*]):String[1]
{
    $j.join->match(
      [
        join : AsOfJoin[1] | 'asof left join ' + $j.alias->map(a|^$a(name = '"' + $a.name + '"'))->toOne()->processOperation($dbConfig, $format->indent(), $extensions) +
                             $format.separator() +
                             'on (' + processOperation($join.operation, $dbConfig, $format->indent(), ^Config(), $extensions) + ')',
        join : Join[1] |
                $j.joinType->map(jt|$jt->processJoinType($dbConfig, $format, $extensions))->orElse('')
                        + $j.alias->map(a|^$a(name = '"' + $a.name + '"')) //Not sure why this is necessary, but it's retained to keep the generated SQL the same as previously (and does no real harm)
                            ->toOne()->processOperation($dbConfig, $format->indent(), $extensions) + $format.separator()
                        + ' ' + 'on (' + processOperation($j.join.operation, $dbConfig, $format->indent(), ^Config(), $extensions) + ')'
      ]
    );
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::getDDLCommandsTranslator(): RelationalDDLCommandsTranslator[1]
{
  ^RelationalDDLCommandsTranslator(
                createSchema = translateCreateSchemaStatementDefault_CreateSchemaSQL_1__DbConfig_1__String_1_,
                dropSchema = translateDropSchemaStatementDefault_DropSchemaSQL_1__DbConfig_1__String_1_,
                createTable = translateCreateTableStatementDuckDB_CreateTableSQL_1__DbConfig_1__String_1_,
                dropTable = translateDropTableStatementDefault_DropTableSQL_1__DbConfig_1__String_1_,
                loadTable = loadValuesToDbTableDefault_LoadTableSQL_1__DbConfig_1__String_MANY_
              );
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::getLiteralProcessorsForDuckDB():Map<Type,LiteralProcessor>[1]
{
  let literalReplacementPairForString = ^LiteralReplacement(old = '\'', new = '\'\'');

   newMap([
      pair(StrictDate,     ^LiteralProcessor(format = '%s', transform = {d:StrictDate[1], dbTimeZone:String[0..1] | $d->convertDateToSqlStringDuckDB($dbTimeZone)})),
      pair(DateTime,       ^LiteralProcessor(format = '%s', transform = {d:DateTime[1], dbTimeZone:String[0..1] | $d->convertDateToSqlStringDuckDB($dbTimeZone)})),
      pair(Date,           ^LiteralProcessor(format = '%s', transform = {d:Date[1], dbTimeZone:String[0..1] | $d->convertDateToSqlStringDuckDB($dbTimeZone)})),
      pair(Boolean,        ^LiteralProcessor(format = '%s', transform = toString_Any_1__String_1_->literalTransform()))
   ]);
}

function meta::relational::functions::sqlQueryToString::duckDB::convertDateToSqlStringDuckDB(date:Date[1], dbTimeZone:String[0..1]):String[1]
{
   //Default to UTC, if timezone is not specified. GMT is the same as UTC, UTC is not actually a timezone
   let timeZone = if( $dbTimeZone->isEmpty(), | 'GMT', |  $dbTimeZone->toOne());
   if($date->hasSecond(),
      | if ($date->hasSubsecond(),
            | let d= format('%t{[' + $timeZone + ']yyyy-MM-dd HH:mm:ss.SSSSSS}', $date);
              format('TIMESTAMP \'%s\'',$d);,
            | let d= format('%t{[' + $timeZone + ']yyyy-MM-dd HH:mm:ss}', $date);
              format('TIMESTAMP_S \'%s\'',$d);
           ),
      | if ($date->hasMonth() || $date->hasDay(),
            | let d = format('%t{[' + $timeZone + ']yyyy-MM-dd}', $date);
              format('DATE \'%s\'',$d);,
            | fail('DuckDB doesn\'t support YEAR and YEAR-MONTH'); '';
          )
    );
}

function meta::relational::functions::sqlQueryToString::duckDB::translateCreateTableStatementDuckDB(createTableSQL:CreateTableSQL[1], dbConfig:DbConfig[1]) : String[1]
{
  let t= $createTableSQL.table;
  let applyConstraints = $createTableSQL.applyConstraints;
  'Create Table '+if($t.schema.name == 'default',|'',|$t.schema.name+'.')+$t.name+
      + '('
      + $t.columns->cast(@meta::relational::metamodel::Column)
         ->map(c | $c.name->processColumnName($dbConfig) + ' ' +  dataTypeToSqlTextDuckDB($c.type) + if($c.nullable->isEmpty() || $applyConstraints == false, | '', | if($c.nullable == true , | ' NULL', | ' NOT NULL' )))
        ->joinStrings(',')
      + if ($t.primaryKey->isEmpty() || $applyConstraints == false, | '', | ', PRIMARY KEY(' + $t.primaryKey->map(c | $c.name)->joinStrings(',') + ')')
      +');';
}


function meta::relational::functions::sqlQueryToString::duckDB::dataTypeToSqlTextDuckDB(type: meta::relational::metamodel::datatype::DataType[1]):String[1]
{
    $type->match([
       s : meta::relational::metamodel::datatype::SemiStructured[1] | 'VARCHAR(4000)',
        i : meta::relational::metamodel::datatype::Integer[1] | 'INT',
        f : meta::relational::metamodel::datatype::Float[1] | 'FLOAT',
        v : meta::relational::metamodel::datatype::Varchar[1] | format('VARCHAR(%d)', $v.size),
        c : meta::relational::metamodel::datatype::Char[1] | format('CHAR(%d)', $c.size),
        d : meta::relational::metamodel::datatype::Decimal[1] | format('DECIMAL(%d, %d)', [$d.precision, $d.scale]),
        t : meta::relational::metamodel::datatype::Timestamp[1] | 'TIMESTAMP',
        d : meta::relational::metamodel::datatype::Date[1] | 'DATE',
        b : meta::relational::metamodel::datatype::BigInt[1] | 'BIGINT',
        s : meta::relational::metamodel::datatype::SmallInt[1] | 'SMALLINT',
        t : meta::relational::metamodel::datatype::TinyInt[1] | 'TINYINT',
        d : meta::relational::metamodel::datatype::Double[1] | 'DOUBLE',
        n : meta::relational::metamodel::datatype::Numeric[1] | format('NUMERIC(%d, %d)', [$n.precision, $n.scale]),
        d : meta::relational::metamodel::datatype::Distinct[1] | 'DISTINCT',
        o : meta::relational::metamodel::datatype::Other[1] | 'OTHER',
        b : meta::relational::metamodel::datatype::Bit[1] | 'BIT',
        b : meta::relational::metamodel::datatype::Binary[1] | 'BINARY',
        r : meta::relational::metamodel::datatype::Real[1] | 'REAL',
        a : meta::relational::metamodel::datatype::Array[1] | 'ARRAY',
        v : meta::relational::metamodel::datatype::Varbinary[1] | 'VARBINARY',
        s : meta::relational::metamodel::datatype::SemiStructured[1] | 'SEMISTRUCTURED',
        j : meta::relational::metamodel::datatype::Json[1] | 'JSON',
        d : meta::relational::metamodel::datatype::DbSpecificDataType[1] | $d.dbSpecificSql
    ]);
}



function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::getDynaFunctionToSqlForDuckDB(): DynaFunctionToSql[*]
{
  let allStates = allGenerationStates();

  [
    dynaFnToSql('adjust',                 $allStates,            ^ToSql(format='date_add(%s)', transform={p:String[3] | $p->at(0) + ',' + constructIntervalFunction($p->at(2), $p->at(1)) })),
    dynaFnToSql('booland',                $allStates,            ^ToSql(format='bool_and(%s)')),   //aggregate function across rows (not and on conditions)
    dynaFnToSql('boolor',                 $allStates,            ^ToSql(format='bool_or(%s)')),
    dynaFnToSql('castBoolean',            $allStates,            ^ToSql(format='cast(%s as boolean)')),
    dynaFnToSql('chr',                    $allStates,            ^ToSql(format='char(%s)')),
    dynaFnToSql('concat',                 $allStates,            ^ToSql(format='concat%s', transform={p:String[*]|$p->joinStrings('(', ', ', ')')})),
    // dynaFnToSql('convertDate',            $allStates,            ^ToSql(format='%s', transform={p:String[*] | $p->convertToDateH2()})),
    // dynaFnToSql('convertDateTime',        $allStates,            ^ToSql(format='%s' , transform={p:String[*] | $p->convertToDateTimeH2()})),
    dynaFnToSql('convertVarchar128',      $allStates,            ^ToSql(format='convert(%s, VARCHAR)')),
    dynaFnToSql('dateDiff',               $allStates,            ^ToSql(format='datediff(\'%s\',%s,%s)', transform={p:String[*]|[$p->at(2)->replace('\'', '')->processDateDiffDurationUnitForDuckDB(),$p->at(0),$p->at(1)]})),
    dynaFnToSql('datePart',               $allStates,            ^ToSql(format='date_trunc(\'day\', %s)')),
    dynaFnToSql('dayOfMonth',             $allStates,            ^ToSql(format='day(%s)')),
    dynaFnToSql('dayOfWeek',              $allStates,            ^ToSql(format='dayname(%s)')),
    dynaFnToSql('dayOfWeekNumber',        $allStates,            ^ToSql(format='%s',transform=dayOfWeekNumberForDuckDB_String_$1_2$__String_1_)),
    dynaFnToSql('dayOfYear',              $allStates,            ^ToSql(format='day(%s)')),
    // dynaFnToSql('decodeBase64',           $allStates,            ^ToSql(format='legend_h2_extension_base64_decode(%s)')),
    // dynaFnToSql('encodeBase64',           $allStates,            ^ToSql(format='legend_h2_extension_base64_encode(%s)')),
    // dynaFnToSql('extractFromSemiStructured', $allStates,         ^ToSql(format='%s', transform={p:String[3]|$p->processExtractFromSemiStructuredParamsForH2()})),
    dynaFnToSql('first',                  $allStates,            ^ToSql(format='first(%s)')),
    dynaFnToSql('firstDayOfMonth',        $allStates,            ^ToSql(format='date_trunc(\'month\', %s)', transform={p:String[1] | $p->repeat(1)})),
    dynaFnToSql('firstDayOfQuarter',      $allStates,            ^ToSql(format='date_trunc(\'quarter\', %s)', transform={p:String[1] | $p->repeat(1)})),
    dynaFnToSql('firstDayOfThisMonth',    $allStates,            ^ToSql(format='date_trunc(\'month\', now())')),
    dynaFnToSql('firstDayOfThisQuarter',  $allStates,            ^ToSql(format='date_trunc(\'quarter\', now())')),
    dynaFnToSql('firstDayOfThisYear',     $allStates,            ^ToSql(format='date_trunc(\'year\',now())')),
    dynaFnToSql('firstDayOfWeek',         $allStates,            ^ToSql(format='date_add(%s, to_days(cast(-(isodow(%s)-1) as integer)))', transform={p:String[1] | $p->repeat(2)})),
    dynaFnToSql('firstDayOfYear',         $allStates,            ^ToSql(format='date_trunc(\'year\', %s)', transform={p:String[1] | $p->repeat(1)})),
    dynaFnToSql('firstHourOfDay',         $allStates,            ^ToSql(format='CAST(date_trunc(\'day\', %s) AS TIMESTAMP_S)', transform={p:String[1] | $p->repeat(1)})),
    dynaFnToSql('firstMillisecondOfSecond',$allStates,           ^ToSql(format='date_trunc(\'second\', %s)', transform={p:String[1] | $p->repeat(1)})),
    dynaFnToSql('firstMinuteOfHour',      $allStates,            ^ToSql(format='date_trunc(\'hour\', %s)', transform={p:String[1] | $p->repeat(1)})),
    dynaFnToSql('firstSecondOfMinute',    $allStates,            ^ToSql(format='date_trunc(\'minute\', %s)', transform={p:String[1] | $p->repeat(1)})),
    dynaFnToSql('hour',                   $allStates,            ^ToSql(format='hour(%s)')),
    dynaFnToSql('indexOf',                $allStates,            ^ToSql(format='instr(%s, %s)', transform={p:String[2] | [$p->at(0), $p->at(1)]})),  // TODO - pure uses 0-based indexing,  duck db returns location with 1-based index , keeping this as H2 also returns 1-based currently, many user tests need to be fixed
    dynaFnToSql('isNumeric',              $allStates,            ^ToSql(format='(lower(%s) = upper(%s))')),
    dynaFnToSql('isAlphaNumeric',         $allStates,            ^ToSql(format='regexp_matches(%s,\'^[a-zA-Z0-9]*$\')', transform={p:String[1]|$p})),
    dynaFnToSql('joinStrings',            $allStates,            ^ToSql(format='string_agg(%s,%s)')),
    dynaFnToSql('last',                   $allStates,            ^ToSql(format='last(%s)')),
    dynaFnToSql('length',                 $allStates,            ^ToSql(format='length(%s)')),
    dynaFnToSql('lpad',                   $allStates,            ^ToSql(format='lpad(%s,%s,%s)', transform=processPaddingParams_String_MANY__String_MANY_)),
    dynaFnToSql('matches',                $allStates,            ^ToSql(format= 'regexp_matches(%s,%s)', transform={p:String[2]|$p})),
    dynaFnToSql('md5',                    $allStates,            ^ToSql(format='md5(%s)')),
    dynaFnToSql('minute',                 $allStates,            ^ToSql(format='minute(%s)')),
    dynaFnToSql('mod',                    $allStates,            ^ToSql(format='cast(fmod(%s,%s) as integer)')),
    dynaFnToSql('month',                  $allStates,            ^ToSql(format='month(%s)')),
    dynaFnToSql('monthNumber',            $allStates,            ^ToSql(format='month(%s)')),
    dynaFnToSql('monthName',              $allStates,            ^ToSql(format='monthname(%s)')),
    // dynaFnToSql('mostRecentDayOfWeek',    $allStates,            ^ToSql(format='date_add(DAY, case when %s - DAY_OF_WEEK(%s) > 0 then %s - DAY_OF_WEEK(%s) - 7 else %s - DAY_OF_WEEK(%s) end, %s)', transform={p:String[1..2] | $p->formatMostRecentH2('current_date()')}, parametersWithinWhenClause = [false, false])),
    dynaFnToSql('now',                    $allStates,            ^ToSql(format='cast(now() as timestamp)')),
    // dynaFnToSql('parseDate',              $allStates,            ^ToSql(format='parsedatetime(%s,%s)')),
    dynaFnToSql('parseDecimal',           $allStates,            ^ToSql(format='cast(%s as decimal)')),
    dynaFnToSql('parseFloat',             $allStates,            ^ToSql(format='cast(%s as float)')),
    dynaFnToSql('parseInteger',           $allStates,            ^ToSql(format='cast(%s as integer)')),
    // dynaFnToSql('parseJson',              $allStates,            ^ToSql(format='legend_h2_extension_json_parse(%s)')),
    dynaFnToSql('position',               $allStates,            ^ToSql(format='position(%s IN %s)')),
    // dynaFnToSql('previousDayOfWeek',      $allStates,            ^ToSql(format='date_add(DAY, case when %s - DAY_OF_WEEK(%s) >= 0 then %s - DAY_OF_WEEK(%s) - 7 else %s - DAY_OF_WEEK(%s) end, %s)', transform={p:String[1..2] | $p->formatMostRecentH2('current_date()')}, parametersWithinWhenClause = [false, false])),
    dynaFnToSql('quarter',                $allStates,            ^ToSql(format='quarter(%s)')),
    dynaFnToSql('quarterNumber',          $allStates,            ^ToSql(format='quarter(%s)')),
    dynaFnToSql('reverseString',          $allStates,            ^ToSql(format='reverse(%s)')),
    dynaFnToSql('round',                  $allStates,            ^ToSql(format='round(%s, %s)', transform=transformRound_String_MANY__String_MANY_)),
    dynaFnToSql('rpad',                   $allStates,            ^ToSql(format='rpad(%s,%s,%s)', transform=processPaddingParams_String_MANY__String_MANY_)),
    dynaFnToSql('second',                 $allStates,            ^ToSql(format='second(%s)')),
    dynaFnToSql('sha1',                   $allStates,            ^ToSql(format='sha1(%s)')),
    dynaFnToSql('sha256',                 $allStates,            ^ToSql(format='sha256(%s)')),
    dynaFnToSql('splitPart',              $allStates,            ^ToSql(format='split_part(%s, %s, %s)')),
    dynaFnToSql('substring',              $allStates,            ^ToSql(format='substring%s', transform={p:String[*]|$p->joinStrings('(', ', ', ')')})),  // TODO - pure uses 0-based indexing,  duck db returns location with 1-based index , keeping this as H2 also returns 1-based currently, many user tests need to be fixed
    dynaFnToSql('stdDevPopulation',       $allStates,            ^ToSql(format='stddev_pop(%s)')),
    dynaFnToSql('stdDevSample',           $allStates,            ^ToSql(format='stddev_samp(%s)')),
    dynaFnToSql('today',                  $allStates,            ^ToSql(format='cast(today() as timestamp_s)')),
    dynaFnToSql('toDecimal',              $allStates,            ^ToSql(format='cast(%s as decimal)')),
    dynaFnToSql('toFloat',                $allStates,            ^ToSql(format='cast(%s as double)')),
    dynaFnToSql('toString',               $allStates,            ^ToSql(format='cast(%s as varchar)')),
    // dynaFnToSql('toTimestamp',            $allStates,            ^ToSql(format='%s', transform={p:String[2] | $p->transformToTimestampH2()})),
    dynaFnToSql('weekOfYear',             $allStates,            ^ToSql(format='week(%s)')),
    dynaFnToSql('year',                   $allStates,            ^ToSql(format='year(%s)')),
    dynaFnToSql('jaroWinklerSimilarity',  $allStates,            ^ToSql(format='jaro_winkler_similarity(%s, %s)')),
    dynaFnToSql('levenshteinDistance',    $allStates,            ^ToSql(format='levenshtein(%s, %s)')),
    dynaFnToSql('varianceSample',         $allStates,            ^ToSql(format='%s', transform={p:String[*] | if($p->size() == 1,|'var_samp('+$p->toOne()+')',|'list_var_samp('+$p->joinStrings('[',',',']')+')'); })),
    dynaFnToSql('variancePopulation',     $allStates,            ^ToSql(format='%s', transform={p:String[*] | if($p->size() == 1,|'var_pop('+$p->toOne()+')',|'list_var_pop('+$p->joinStrings('[',',',']')+')'); })),
    dynaFnToSql('variance',               $allStates,            ^ToSql(format='%s', transform={p:String[*]| if ($p->last() == 'true', | 'list_var_samp', |'list_var_pop') + '('+$p->init()->joinStrings('[', ',', ']')+')'}))
  ];
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::dayOfWeekNumberForDuckDB(dayOfWeek: String[1..2]):String[1]
{
  if($dayOfWeek->size()==1,
   | 'dayofweek('+$dayOfWeek->at(0)+') +1',            //dayofweek(date) gives (Sunday = 0, Saturday = 6) >> we need from 1 to 7
   | assert(or($dayOfWeek->at(1)=='\'Sunday\'',$dayOfWeek->at(1)=='\'Monday\''),'DayOfWeekNumber Function requires either Sunday or Monday as First Day of Week');
     if($dayOfWeek->at(1)=='\'Sunday\'',
      |'dayofweek('+$dayOfWeek->at(0)+')+1',
      |'isodow('+$dayOfWeek->at(0)+')'                           // (Monday = 1, Sunday = 7).
     );
  );
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::processPaddingParams(p:String[*]):String[*]
{
   if($p->size()==2,| $p->concatenate('\' \''),| $p);    //pad with empty spaces by default
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::processDateDiffDurationUnitForDuckDB(durationUnit:String[1]):String[1]
{
   let durationEnumNames = [DurationUnit.YEARS,DurationUnit.MONTHS,DurationUnit.WEEKS,DurationUnit.DAYS,DurationUnit.HOURS,DurationUnit.MINUTES,DurationUnit.SECONDS,DurationUnit.MILLISECONDS]->map(e|$e->toString());
   let durationDbNames = ['year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
   $durationEnumNames->zip($durationDbNames)->filter(h | $h.first == $durationUnit).second->toOne();
}

function meta::relational::functions::sqlQueryToString::duckDB::constructIntervalFunction(unit:String[1], i:String[1]):String[1]
{
   let unitWithoutQuotes = $unit->removeQuotesIfExist();

   let interval_func= [
      pair(DurationUnit.YEARS->toString(), 'to_years'),
      pair(DurationUnit.MONTHS->toString(), 'to_months'),
      pair(DurationUnit.WEEKS->toString(), 'to_weeks'),
      pair(DurationUnit.DAYS->toString(), 'to_days'),
      pair(DurationUnit.HOURS->toString(), 'to_hours'),
      pair(DurationUnit.MINUTES->toString(), 'to_minutes'),
      pair(DurationUnit.SECONDS->toString(), 'to_seconds'),
      pair(DurationUnit.MILLISECONDS->toString(), 'to_milliseconds'),
      pair(DurationUnit.MICROSECONDS->toString(), 'to_microseconds')
   ]->filter(p | $p.first == $unitWithoutQuotes).second->toOne('Unit not found: ' + $unitWithoutQuotes);

   $interval_func +'(' + $i +')';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::processSelectSQLQueryForDuckDB(s:SelectSQLQuery[1], sgc:SqlGenerationContext[1], isSubSelect:Boolean[1]):String[1]
{
   $s->processSelectSQLQueryForDuckDB($sgc.dbConfig, $sgc.format, $sgc.config, $isSubSelect, $sgc.extensions);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::processSelectSQLQueryForDuckDB(s:SelectSQLQuery[1], dbConfig : DbConfig[1], format:Format[1], config:Config[1], isSubSelect : Boolean[1], extensions:Extension[*]):String[1]
{
  let opStr = if($s.filteringOperation->isEmpty(), |'', |$s.filteringOperation->map(s|$s->processOperation($dbConfig, $format->indent(), ^$config(callingFromFilter = true), $extensions))->filter(s|$s != '')->joinStrings(' <||> '));
  let havingStr = if($s.havingOperation->isEmpty(), |'', |$s.havingOperation->map(s|$s->processOperation($dbConfig, $format->indent(), $config, $extensions))->filter(s|$s != '')->joinStrings(' <||> '));

  $format.separator + 'select ' + if($s.distinct == true,|'distinct ',|'') +
  processSelectColumns($s.columns, $dbConfig, $format->indent(), true, $extensions) +
  if($s.data == [],
    | '',
    | ' ' + $format.separator + 'from ' + if($s.pivot->isEmpty(),
                                  | $s.data->toOne()->processJoinTreeNode([], $dbConfig, $format->indent(), [], $extensions),
                                  | '(' + $s->processPivotForDuckDB($s.pivot->toOne(), $dbConfig, $format, ^$config(useUnqualifiedColumnNameInPivot = true), $extensions) + ')'
                                )
  ) +
  if (eq($opStr, ''), |'', | ' ' + $format.separator + 'where ' + $opStr) +
  if ($s.groupBy->isEmpty(),|'',| ' ' + $format.separator + 'group by '+$s.groupBy->processGroupByColumns($dbConfig, $format->indent(), true, $extensions)->makeString(',')) +
  if (eq($havingStr, ''), |'', | ' ' + $format.separator + 'having ' + $havingStr) +
  if ($s.orderBy->isEmpty(),|'',| ' ' + $format.separator + 'order by '+ $s.orderBy->processOrderBy($dbConfig, $format->indent(), $config, $extensions)->makeString(',')) +
  processLimit($s, $dbConfig, $format, $extensions, processTakeDefault_SelectSQLQuery_1__Format_1__DbConfig_1__Extension_MANY__String_1_, processSliceOrDropForDuckDB_SelectSQLQuery_1__Format_1__DbConfig_1__Extension_MANY__Any_1__String_1_);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::processPivotForDuckDB(s:SelectSQLQuery[1], p:Pivot[1], dbConfig : DbConfig[1], format:Format[1], config:Config[1], extensions:Extension[*]):String[1]
{
  $format.separator + 'pivot ' + $s.data->toOne()->processJoinTreeNode([], $dbConfig, $format->indent(), [], $extensions) +
  ' ' + $format.separator + 'on ' + processSelectColumns($p.pivotColumns, $dbConfig, $format->indent(), $config, ' || \'' + pivotColumnDelimeter() + '\' || ', false, $extensions) +
  ' ' + $format.separator + 'using ' + processSelectColumns($p.aggColumns->cast(@Alias)->map(col|^$col(name='"_|__' + $col.name->substring(1))), $dbConfig, $format->indent(), $config, true, $extensions);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::processSliceOrDropForDuckDB(s:SelectSQLQuery[1], format:Format[1],dbConfig : DbConfig[1], extensions:Extension[*], size:Any[1]):String[1]
{
   '%s offset %s'->format([$format.separator, $s.fromRow->toOne()->getValueForTake($format, $dbConfig, $extensions)]) + if ($size == -1, | '', | ' limit %s'->format($size));
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::columnNameToIdentifierForDuckDB(columnName: String[1], dbConfig: DbConfig[1]): String[1]
{
   if(
    $dbConfig.isDbReservedIdentifier($columnName->toLower()) ||
    // TODO: the way we handle quoting right now is not systematic, i.e. we allow so many way to interject custom logic
    // as such, for duckdb, to keep it simple, we will not use the default implementation of converting column name to identifier
    (!$columnName->startsWith('"') && (
      $columnName->contains(' ') ||
      $columnName->contains('/') ||
      $columnName->contains('|')
    )),
    |'"' + $columnName + '"',
    |$columnName
  );
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::duckDBReservedWords():String[*]
{
    //https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/grammar/keywords/reserved_keywords.list
    [
      'ALL', 'ANALYSE', 'ANALYZE', 'AND', 'ANY', 'ARRAY', 'AS', 'ASC_P', 'ASYMMETRIC', 'BOTH', 'CASE', 'CAST', 'CHECK_P',
      'COLLATE', 'COLUMN', 'CONSTRAINT', 'CREATE_P', 'DEFAULT', 'DEFERRABLE', 'DESC_P', 'DESCRIBE', 'DISTINCT', 'DO', 'ELSE',
      'END_P', 'EXCEPT', 'FALSE_P', 'FETCH','FOR', 'FOREIGN', 'FROM', 'GRANT', 'GROUP_P', 'HAVING', 'QUALIFY', 'IN_P', 'INITIALLY',
      'INTERSECT', 'INTO', 'LATERAL_P', 'LEADING', 'LIMIT', 'NOT', 'NULL_P', 'OFFSET', 'ON', 'ONLY', 'OR', 'ORDER', 'PIVOT',
      'PIVOT_WIDER', 'PIVOT_LONGER', 'PLACING', 'PRIMARY', 'REFERENCES', 'RETURNING', 'SELECT', 'SHOW', 'SOME', 'SUMMARIZE',
      'SYMMETRIC', 'TABLE', 'THEN', 'TO', 'TRAILING', 'TRUE_P', 'UNION', 'UNIQUE', 'UNPIVOT', 'USING', 'VARIADIC', 'WHEN',
      'WHERE', 'WINDOW', 'WITH'
    ];
}

function meta::relational::functions::sqlQueryToString::duckDB::processJoinStringsOperationForDuckDB(js:JoinStrings[1], sgc:SqlGenerationContext[1]): String[1]
{
  processJoinStringsOperation($js, $sgc, {col, sep| 'group_concat(' + $col + if($sep == '\'\'', |'', |',' + $sep) + ' )'},
                                        {strs, sep| $strs->joinStrings('concat(', if('\'\'' == $sep, |', ', |',' + $sep + ',') , ')')});
}
