import meta::relational::functions::sqlQueryToString::duckDB::*;
import meta::relational::functions::sqlQueryToString::default::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::metamodel::operation::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::*;
import meta::external::store::relational::runtime::*;
import meta::relational::runtime::*;
import meta::pure::extension::*;
import meta::relational::extension::*;

function <<db.ExtensionLoader>> meta::relational::functions::sqlQueryToString::duckDB::dbExtensionLoaderForDuckDB():DbExtensionLoader[1]
{
  ^DbExtensionLoader(dbType = DatabaseType.DuckDB, loader = createDbExtensionForDuckDB__DbExtension_1_);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::createDbExtensionForDuckDB():DbExtension[1]
{
   let reservedWords = duckDBReservedWords();
   let literalProcessors = getDefaultLiteralProcessors()->putAll(getLiteralProcessorsForDuckDB());
   let literalProcessor = {type:Type[1]| $literalProcessors->get(if($type->instanceOf(Enumeration), | Enum, | $type))->toOne()};
   let dynaFuncDispatch = getDynaFunctionToSqlDefault($literalProcessor)->groupBy(d| $d.funcName)->putAll(
                              getDynaFunctionToSqlForDuckDB()->groupBy(d| $d.funcName))->getDynaFunctionDispatcher();
   ^DbExtension(
      isBooleanLiteralSupported = true,
      isDbReservedIdentifier = {str:String[1]| $str->in($reservedWords)},
      joinStringsProcessor = processJoinStringsOperationWithConcatCall_JoinStrings_1__SqlGenerationContext_1__String_1_,
      literalProcessor = $literalProcessor,
      selectSQLQueryProcessor = processSelectSQLQueryForDuckDB_SelectSQLQuery_1__SqlGenerationContext_1__Boolean_1__String_1_,
      identifierProcessor = processIdentifierWithDoubleQuotes_String_1__DbConfig_1__String_1_,
      dynaFuncDispatch = $dynaFuncDispatch
   );
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::getLiteralProcessorsForDuckDB():Map<Type,LiteralProcessor>[1]
{
   newMap([
   ]->cast(@Pair<Type,LiteralProcessor>))
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::getDynaFunctionToSqlForDuckDB(): DynaFunctionToSql[*]
{
  let allStates = allGenerationStates();
  [
  ];
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::processSelectSQLQueryForDuckDB(s:SelectSQLQuery[1], sgc:SqlGenerationContext[1], isSubSelect:Boolean[1]):String[1]
{
   $s->processSelectSQLQueryForDuckDB($sgc.dbConfig, $sgc.format, $sgc.config, $isSubSelect, $sgc.extensions);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::processSelectSQLQueryForDuckDB(s:SelectSQLQuery[1], dbConfig : DbConfig[1], format:Format[1], config:Config[1], isSubSelect : Boolean[1], extensions:Extension[*]):String[1]
{
      let opStr = if($s.filteringOperation->isEmpty(), |'', |$s.filteringOperation->map(s|$s->processOperation($dbConfig, $format->indent(), ^$config(callingFromFilter = true), $extensions))->filter(s|$s != '')->joinStrings(' <||> '));
      let havingStr = if($s.havingOperation->isEmpty(), |'', |$s.havingOperation->map(s|$s->processOperation($dbConfig, $format->indent(), $config, $extensions))->filter(s|$s != '')->joinStrings(' <||> '));

      $format.separator + 'select ' + if($s.distinct == true,|'distinct ',|'') +
      processSelectColumns($s.columns, $dbConfig, $format->indent(), true, $extensions) +
      if($s.data == [],|'',| ' ' + $format.separator + 'from ' + $s.data->toOne()->processJoinTreeNode([], $dbConfig, $format->indent(), [], $extensions)) +
      if (eq($opStr, ''), |'', | ' ' + $format.separator + 'where ' + $opStr) +
      if ($s.groupBy->isEmpty(),|'',| ' ' + $format.separator + 'group by '+$s.groupBy->processGroupByColumns($dbConfig, $format->indent(), true, $extensions)->makeString(','))+
      if (eq($havingStr, ''), |'', | ' ' + $format.separator + 'having ' + $havingStr) +
      if ($s.orderBy->isEmpty(),|'',| ' ' + $format.separator + 'order by '+ $s.orderBy->processOrderBy($dbConfig, $format->indent(), $config, $extensions)->makeString(','))+
      + processLimit($s, $dbConfig, $format, $extensions, processTakeDefault_SelectSQLQuery_1__Format_1__DbConfig_1__Extension_MANY__String_1_, processSliceOrDropForDuckDB_SelectSQLQuery_1__Format_1__DbConfig_1__Extension_MANY__Any_1__String_1_);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::processSliceOrDropForDuckDB(s:SelectSQLQuery[1], format:Format[1],dbConfig : DbConfig[1], extensions:Extension[*], size:Any[1]):String[1]
{
   '%s offset %s'->format([$format.separator, $s.fromRow->toOne()->getValueForTake($format, $dbConfig, $extensions)]) + if ($size == -1, | '', | ' limit %s'->format($size));
}

function <<access.private>> meta::relational::functions::sqlQueryToString::duckDB::duckDBReservedWords():String[*]
{
    //https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/grammar/keywords/reserved_keywords.list
    [
      'ALL', 'ANALYSE', 'ANALYZE', 'AND', 'ANY', 'ARRAY', 'AS', 'ASC_P', 'ASYMMETRIC', 'BOTH', 'CASE', 'CAST', 'CHECK_P',
      'COLLATE', 'COLUMN', 'CONSTRAINT', 'CREATE_P', 'DEFAULT', 'DEFERRABLE', 'DESC_P', 'DESCRIBE', 'DISTINCT', 'DO', 'ELSE',
      'END_P', 'EXCEPT', 'FALSE_P', 'FETCH','FOR', 'FOREIGN', 'FROM', 'GRANT', 'GROUP_P', 'HAVING', 'QUALIFY', 'IN_P', 'INITIALLY',
      'INTERSECT', 'INTO', 'LATERAL_P', 'LEADING', 'LIMIT', 'NOT', 'NULL_P', 'OFFSET', 'ON', 'ONLY', 'OR', 'ORDER', 'PIVOT',
      'PIVOT_WIDER', 'PIVOT_LONGER', 'PLACING', 'PRIMARY', 'REFERENCES', 'RETURNING', 'SELECT', 'SHOW', 'SOME', 'SUMMARIZE',
      'SYMMETRIC', 'TABLE', 'THEN', 'TO', 'TRAILING', 'TRUE_P', 'UNION', 'UNIQUE', 'UNPIVOT', 'USING', 'VARIADIC', 'WHEN',
      'WHERE', 'WINDOW', 'WITH'
    ];
}
