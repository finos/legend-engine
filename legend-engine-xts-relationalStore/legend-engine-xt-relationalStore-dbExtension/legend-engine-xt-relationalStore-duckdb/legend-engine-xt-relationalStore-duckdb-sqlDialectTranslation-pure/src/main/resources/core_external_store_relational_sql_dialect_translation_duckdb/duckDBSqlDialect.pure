// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::boolean::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::temporal::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::string::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::misc::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::window::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::temporal::*;
import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::defaults::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::aggregate::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::aggregate::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::aggregate::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::boolean::aggregate::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::conditional::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::numeric::*;
import meta::external::store::relational::sqlDialectTranslation::duckDB::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::typeInference::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;
import meta::pure::extension::*;
import meta::external::query::sql::metamodel::extension::*;

function meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBSqlDialect(): SqlDialect[1]
{
  ^SqlDialect
  (
    dbType = 'DuckDB',
    identifierQuoteConfig = duckDBIdentifierQuoteConfiguration(),
    literalQuoteConfig = duckDBLiteralQuoteConfiguration(),
    nodeProcessors = duckDBDialectNodeProcessors(),
    identifierProcessor = duckDBIdentifierProcessor(),
    expressionPrecedenceComparator = duckDBExpressionPrecedenceComparator(),
    keywords = duckDBKeywords(),
    functionProcessorMap = duckDBFunctionProcessorMap(),
    variablePlaceholderPrefixSuffixMap = duckDBVariablePlaceholderPrefixSuffixMap(),
    expectedSqlDialectTestErrors = duckDBExpectedSqlDialectTestErrors()
  )
}

function meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBSqlDialectExtension(): Extension[1]
{
  ^Extension
  (
    type = 'DuckDBSqlDialectExtension',
    moduleExtensions = [
      ^SqlDialectTranslationModuleExtension
      (
        module = sqlDialectTranslationModuleExtensionName(),
        extraSqlDialects = duckDBSqlDialect()
      )
    ]
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBExpectedSqlDialectTestErrors(): Map<String, String>[1]
{
  [
    pair('FuncTests - sha1(0/1)', 'DuckDB SQL Dialect does not support the function - sha1'),
    pair('FuncTests - sha1(1/1)', 'DuckDB SQL Dialect does not support the function - sha1'),
    pair('FuncTests - sha256(0/1)', 'DuckDB SQL Dialect does not support the function - sha256'),
    pair('FuncTests - sha256(1/1)', 'DuckDB SQL Dialect does not support the function - sha256'),
    pair('FuncTests - average_rank(0/0)', 'DuckDB SQL Dialect does not support the function - average_rank'),
    pair('FuncTests - parseJson(0/0)', 'DuckDB SQL Dialect does not support the function - parseJson'),
    pair('FuncTests - cosh(0/3)', 'DuckDB SQL Dialect does not support the function - cosh'),
    pair('FuncTests - cosh(1/3)', 'DuckDB SQL Dialect does not support the function - cosh'),
    pair('FuncTests - cosh(2/3)', 'DuckDB SQL Dialect does not support the function - cosh'),
    pair('FuncTests - cosh(3/3)', 'DuckDB SQL Dialect does not support the function - cosh'),
    pair(
      'FuncTests - sinh(0/3)',
      'DuckDB SQL Dialect does not support the function - sinh'
    ),
    pair(
      'FuncTests - sinh(1/3)',
      'DuckDB SQL Dialect does not support the function - sinh'
    ),
    pair(
      'FuncTests - sinh(2/3)',
      'DuckDB SQL Dialect does not support the function - sinh'
    ),
    pair(
      'FuncTests - sinh(3/3)',
      'DuckDB SQL Dialect does not support the function - sinh'
    ),
    pair(
      'FuncTests - tanh(0/3)',
      'DuckDB SQL Dialect does not support the function - tanh'
    ),
    pair(
      'FuncTests - tanh(1/3)',
      'DuckDB SQL Dialect does not support the function - tanh'
    ),
    pair(
      'FuncTests - tanh(2/3)',
      'DuckDB SQL Dialect does not support the function - tanh'
    ),
    pair(
      'FuncTests - tanh(3/3)',
      'DuckDB SQL Dialect does not support the function - tanh'
    ),
    pair(
      'FuncTests - encode_base64(0/1)',
      'DuckDB SQL Dialect does not support the function - encode_base64'
    ),
    pair(
      'FuncTests - encode_base64(1/1)',
      'DuckDB SQL Dialect does not support the function - encode_base64'
    ),
    pair(
      'FuncTests - decode_base64(0/1)',
      'DuckDB SQL Dialect does not support the function - decode_base64'
    ),
    pair(
      'FuncTests - decode_base64(1/1)',
      'DuckDB SQL Dialect does not support the function - decode_base64'
    )        
  
  ]->newMap()->cast(@Map<String, String>)
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBIdentifierQuoteConfiguration(): QuoteConfiguration[1]
{
  ^QuoteConfiguration
  (
    start = '"',
    end = '"',
    escape = '""'
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBLiteralQuoteConfiguration(): QuoteConfiguration[1]
{
  ^QuoteConfiguration
  (
    start = '\'',
    end = '\'',
    escape = '\'\''
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectNodeProcessors(): Map<Class<Node>, NodeProcessor<Node>>[1]
{
  newMap(
    duckDBDialectStatementProcessors()
    ->concatenate(
      duckDBDialectRelationProcessors()
    )
    ->concatenate(
      duckDBDialectExpressionProcessors()
    )
    ->concatenate(
      duckDBDialectLiteralProcessors()
    )
    ->concatenate(
      duckDBDialectSelectItemProcessors()
    )
    ->concatenate(
      duckDBDialectOtherNodeProcessors()
    )
    ->concatenate(
      duckDBDialectDDLProcessors()
    )
    ->map(n | pair($n.nodeType, $n))
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectStatementProcessors(): NodeProcessor<Statement>[*]
{
  [
    queryProcessor_default(),
    windowProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectRelationProcessors(): NodeProcessor<Relation>[*]
{
  [
    tableProcessor_default(),
    aliasedRelationProcessor_default(),
    joinProcessor_default(),
    asOfJoinProcessorForDuckDB(),
    querySpecificationProcessor_default(),
    unionProcessor_default(),
    tableSubqueryProcessor_default(),
    tablePlaceholderProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectExpressionProcessors(): NodeProcessor<meta::external::query::sql::metamodel::Expression>[*]
{
  [
    comparisonExpressionNodeProcessor_default(),
    logicalBinaryExpressionNodeProcessor_default(),
    notExpressionNodeProcessor_default(),
    arithmeticExpressionNodeProcessor_duckDB(),
    qualifiedNameReferenceNodeProcessor_default(),
    isNullPredicateNodeProcessor_default(),
    isNotNullPredicateNodeProcessor_default(),
    negativeNodeProcessor_default(),
    currentTimeNodeProcessor_default(),
    whenClauseNodeProcessor_default(),
    searchedCaseExpressionNodeProcessor_default(),
    columnTypeProcessor_default(),
    castProcessor_default(),
    inListExpressionProcessor_default(),
    inPredicateProcessor_default(),
    existsPredicateProcessor_default(),
    extractProcessor_default(),
    betweenPredicateProcessor_default(),
    functionCallProcessor_default(),
    subQueryExpressionProcessor_default(),
    trimProcessor_default(),
    likePredicateProcessor_default(),
    allColumnsReferenceNodeProcessor_default(),
    inClauseVariablePlaceholderProcessor_default(),
    variablePlaceholderProcessor_default(),
    freeMarkerOperationProcessor_default(),
    bitwiseBinaryExpressionNodeProcessorForDuckDB(),
    bitwiseNotExpressionNodeProcessor_default(),
    bitwiseShiftExpressionNodeProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectLiteralProcessors(): NodeProcessor<Literal>[*]
{
  [
    integerLiteralNodeProcessor_default(),
    stringLiteralNodeProcessor_default(),
    booleanLiteralNodeProcessor_default(),
    longLiteralNodeProcessor_default(),
    doubleLiteralNodeProcessor_default(),
    decimalLiteralNodeProcessor_default(),
    dateLiteralNodeProcessorForDuckDB(),
    timestampLiteralNodeProcessorForDuckDB(),
    partialDateLiteralNodeProcessor_default(),
    nullLiteralNodeProcessor_default(),
    processedStringLiteralNodeProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectSelectItemProcessors(): NodeProcessor<SelectItem>[*]
{
  [
    allColumnsNodeProcessor_default(),
    singleColumnNodeProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectOtherNodeProcessors(): NodeProcessor<Node>[*]
{
  [
    sortItemProcessor_default(),
    selectProcessor_default(),
    withQueryProcessor_default(),
    windowFrameProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectDDLProcessors(): NodeProcessor<Node>[*]
{
  [
    createTestTableProcessor_default(),
    dropTestTableProcessor_default(),
    insertIntoTestTableProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBIdentifierProcessor(): IdentifierProcessor[1]
{
  identifierProcessor_default()
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBExpressionPrecedenceComparator(): ExpressionPrecedenceComparator[1]
{
  ^ExpressionPrecedenceComparator(
    findOperatorType = findOperatorType_default_Expression_1__String_1_,
    operatorPrecedence = operatorPrecedence_default()
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBKeywords(): String[*]
{
  [
    'all',
    'analyse',
    'analyze',
    'and',
    'any',
    'array',
    'as',
    'asc_p',
    'asymmetric',
    'both',
    'case',
    'cast',
    'check_p',
    'collate',
    'column',
    'constraint',
    'create_p',
    'default',
    'deferrable',
    'desc_p',
    'describe',
    'distinct',
    'do',
    'else',
    'end_p',
    'except',
    'false_p',
    'fetch',
    'for',
    'foreign',
    'from',
    'grant',
    'group_p',
    'having',
    'qualify',
    'in_p',
    'initially',
    'intersect',
    'into',
    'lateral_p',
    'leading',
    'limit',
    'not',
    'null_p',
    'offset',
    'on',
    'only',
    'or',
    'order',
    'pivot',
    'pivot_wider',
    'pivot_longer',
    'placing',
    'primary',
    'references',
    'returning',
    'select',
    'show',
    'some',
    'summarize',
    'symmetric',
    'table',
    'then',
    'to',
    'trailing',
    'true_p',
    'union',
    'unique',
    'unpivot',
    'using',
    'variadic',
    'when',
    'where',
    'window',
    'with'
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::arithmeticExpressionNodeProcessor_duckDB(): NodeProcessor<ArithmeticExpression>[1]
{
  nodeProcessor(
    ArithmeticExpression,
    {sqlDialect, a, state, config |
      let leftExpr = $sqlDialect->executeNodeProcessor($a.left, $a, $state, $config);
      let rightExpr = $sqlDialect->executeNodeProcessor($a.right, $a, $state, $config);
      let operator = if(
        [
          pair(|$a.type == ArithmeticType.ADD, | '+'),
          pair(|$a.type == ArithmeticType.SUBTRACT, | '-'),
          pair(|$a.type == ArithmeticType.MULTIPLY, | '*'),
          pair(|$a.type == ArithmeticType.DIVIDE, | '//'),
          pair(|$a.type == ArithmeticType.MODULUS, | '%'),
          pair(|$a.type == ArithmeticType.POWER, | '^')
        ],
        | failWithMessage('Unhandled arithmetic operator type: ' + $a.type->toString())
      );

      $leftExpr + ' ' + $operator + ' ' + $rightExpr;
    }
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::asOfJoinProcessorForDuckDB(): NodeProcessor<AsOfJoin>[1]
{
  nodeProcessor(
    AsOfJoin,
    {sqlDialect, j, state, config |
      let sep0 = $state.separator(0, $config);
      let sep1 = $state.separator(1, $config);
      let left = $sqlDialect->executeNodeProcessor($j.left, $state, $config);
      let right = $sqlDialect->executeNodeProcessor($j.right, $state->increaseLevel(), $config);

      $left + $sep0 + 'asof left join' + $sep1 + $right + $j.criteria->joinCriteriaProcessor_default($sqlDialect, $state, $config);
    },
    {n: AsOfJoin[1] | true}
  );
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBFunctionProcessorMap(): Map<Class<SqlFunction>, FunctionProcessor>[1]
{
  newMap([
    // Numeric
    pair(Abs, simpleFunctionProcessor('abs')),
    pair(Cbrt, simpleFunctionProcessor('cbrt')),
    pair(Ceil, simpleFunctionProcessor('ceil')),
    pair(Ceiling, simpleFunctionProcessor('ceiling')),
    pair(Degrees, simpleFunctionProcessor('degrees')),
    pair(Exp, simpleFunctionProcessor('exp')),
    pair(Ln, simpleFunctionProcessor('ln')),
    pair(Log, simpleFunctionProcessor('log')),
    pair(Log10, simpleFunctionProcessor('log10')),
    pair(Sqrt, simpleFunctionProcessor('sqrt')),
    pair(Acos, simpleFunctionProcessor('acos')),
    pair(Asin, simpleFunctionProcessor('asin')),
    pair(Atan, simpleFunctionProcessor('atan')),
    pair(Atan2, simpleFunctionProcessor('atan2')),
    pair(Cos, simpleFunctionProcessor('cos')),
    pair(Cot, simpleFunctionProcessor('cot')),
    pair(Sin, simpleFunctionProcessor('sin')),
    pair(Tan, simpleFunctionProcessor('tan')),
    pair(Power, simpleFunctionProcessor('power')),
    pair(Sign, simpleFunctionProcessor('sign')),
    pair(Mod, simpleFunctionProcessor('mod')),
    pair(Round, simpleFunctionProcessor('round')),
    pair(Greatest, simpleFunctionProcessor('greatest')),
    pair(Least, simpleFunctionProcessor('least')),
    pair(Floor, simpleFunctionProcessor('floor')),
    pair(Sum, simpleFunctionProcessor('sum')),
    pair(Average, simpleFunctionProcessor('avg')),
    pair(Count, simpleFunctionProcessor('count')),
    pair(Correlation, simpleFunctionProcessor('corr')),
    pair(CovarianceSample, simpleFunctionProcessor('covar_samp')),
    pair(CovariancePopulation, simpleFunctionProcessor('covar_pop')),
    pair(VarianceSample, simpleFunctionProcessor('var_samp')),
    pair(VariancePopulation, simpleFunctionProcessor('var_pop')),
    pair(StdDevSample, simpleFunctionProcessor('stddev_samp')),
    pair(StdDevPopulation, simpleFunctionProcessor('stddev_pop')),
    pair(Rank, simpleFunctionProcessor('rank')),
    pair(DenseRank, simpleFunctionProcessor('dense_rank')),
    pair(PercentRank, simpleFunctionProcessor('percent_rank')),
    pair(RowNumber, simpleFunctionProcessor('row_number')),
    pair(CumulativeDistribution, simpleFunctionProcessor('cume_dist')),
    pair(Ntile, simpleFunctionProcessor('ntile')),
    pair(EditDistance, simpleFunctionProcessor('levenshtein')),
    pair(JaroWinklerSimilarity, simpleFunctionProcessor('jaro_winkler_similarity')),
    pair(PercentileContinuous, simpleFunctionProcessor('percentile_cont')),
    pair(PercentileDiscrete, simpleFunctionProcessor('percentile_disc')), 

    // String
    pair(Lpad, argTransformFunctionProcessor('lpad', {n:Node[*]| if($n->size() == 2, |$n->concatenate(^StringLiteral(value = ' ')), |$n)})),
    pair(Rpad, argTransformFunctionProcessor('rpad', {n:Node[*]| if($n->size() == 2, |$n->concatenate(^StringLiteral(value = ' ')), |$n)})),
    pair(Ltrim, simpleFunctionProcessor('ltrim')),
    pair(Rtrim, simpleFunctionProcessor('rtrim')),
    pair(Ascii, simpleFunctionProcessor('ascii')),
    pair(Lower, simpleFunctionProcessor('lower')),
    pair(Upper, simpleFunctionProcessor('upper')),
    pair(Repeat, simpleFunctionProcessor('repeat')),
    pair(Replace, simpleFunctionProcessor('replace')),
    pair(Md5, simpleFunctionProcessor('md5')),
    pair(CharLength, simpleFunctionProcessor('length')),
    pair(Chr, simpleFunctionProcessor('chr')),
    pair(Reverse, simpleFunctionProcessor('reverse')),
    pair(SplitPart, simpleFunctionProcessor('split_part')),
    pair(Substring, simpleFunctionProcessor('substring')),
    pair(Left, simpleFunctionProcessor('left')),
    pair(Right, simpleFunctionProcessor('right')),
    pair(StrPos, simpleFunctionProcessor('strpos')),
    pair(StringAgg, simpleFunctionProcessor('string_agg')),
    pair(Concat, simpleFunctionProcessor('concat')),
    pair(UuidV4, customFunctionProcessor(processorForUuidV4DuckDB_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(StartsWith, customFunctionProcessor(processorForStartsWithDuckDB_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(EndsWith, customFunctionProcessor(processorForEndsWithDuckDB_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(Contains, customFunctionProcessor(processorForContainsDuckDB_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),

    // Boolean
    pair(RegexpLike, customFunctionProcessor(processorForRegexpLike_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(BoolAnd, simpleFunctionProcessor('bool_and')),
    pair(BoolOr, simpleFunctionProcessor('bool_or')),

    // Temporal
    pair(DateTrunc, customFunctionProcessor(processorForDateTrunc_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(DatePart, simpleFunctionProcessor('date_part')),
    pair(Now, simpleFunctionProcessor('now')),
    pair(MakeDate, simpleFunctionProcessor('make_date')),
    pair(MakeTimestamp, simpleFunctionProcessor('make_timestamp')),
    pair(meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::Date, customFunctionProcessor(processorForDate_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(ToDate, customFunctionProcessor(processorForToDate_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(ToTimestamp, customFunctionProcessor(processorForToTimestamp_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(ToChar, customFunctionProcessor(processorForToChar_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(DateDiff, customFunctionProcessor(processorForDateDiff_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(DateAdd, customFunctionProcessor(processorForDateAdd_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(TimeBucket, customFunctionProcessor(processorForTimeBucket_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(ConvertTimeZone,customFunctionProcessor(processorForConvertTimeZone_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),

    // Miscellaneous
    pair(Coalesce, simpleFunctionProcessor('coalesce')),
    pair(Min, simpleFunctionProcessor('min')),
    pair(Max, simpleFunctionProcessor('max')),
    pair(Lag, simpleFunctionProcessor('lag')),
    pair(Lead, simpleFunctionProcessor('lead')),
    pair(FirstValue, simpleFunctionProcessor('first_value')),
    pair(LastValue, simpleFunctionProcessor('last_value')),
    pair(NthValue, simpleFunctionProcessor('nth_value')),
    pair(Mode, simpleFunctionProcessor('mode'))
    
  ])
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForUuidV4DuckDB(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let dateTrunc = simpleFunctionProcessor('gen_random_uuid').processFunction->toOne()->eval($sqlDialect, $f, $state, $config);
  $sqlDialect->generateCast($dateTrunc, 'varchar', $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForStartsWithDuckDB(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  processorForStartsWith($f, '\\', $sqlDialect, $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForEndsWithDuckDB(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  processorForEndsWith($f, '\\', $sqlDialect, $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForContainsDuckDB(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  processorForContains($f, '\\', $sqlDialect, $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForDateTrunc(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let dateTrunc = simpleFunctionProcessor('date_trunc').processFunction->toOne()->eval($sqlDialect, $f, $state, $config);
  $sqlDialect->generateCast($dateTrunc, 'timestamp', $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForDate(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let processedArgs = $sqlDialect->processFunctionArgs($f.arguments, $state, $config);
  generateFunctionCallWithArgs($sqlDialect, 'date_trunc', ['\'day\'', $processedArgs->at(0)], [], $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForToDate(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let processedArgs = $sqlDialect->processFunctionArgs($f.arguments, $state, $config);
  let toDateCall = $sqlDialect->strptimeCall($processedArgs, $state, $config);
  $sqlDialect->generateCast($toDateCall, 'date', $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForToTimestamp(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let processedArgs = $sqlDialect->processFunctionArgs($f.arguments, $state, $config);
  if($processedArgs->size() == 2,
    | $sqlDialect->strptimeCall($processedArgs, $state, $config),
    | let epochSeconds = $sqlDialect->generateCast($processedArgs->at(0), 'bigint', $state, $config);
      let epochMilliseconds = $epochSeconds + ' * 1000';
      generateFunctionCallWithArgs($sqlDialect, 'epoch_ms', $epochMilliseconds, [], $state, $config);
  );
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::strptimeCall(sqlDialect:SqlDialect[1], args:String[*], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let dateFormat = $args->at(1)->dateFormatSpecifierForDuckDB();
  generateFunctionCallWithArgs($sqlDialect, 'strptime', [$args->at(0), $dateFormat], [], $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForToChar(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let processedArgs = $sqlDialect->processFunctionArgs($f.arguments, $state, $config);
  let toCharCall = $sqlDialect->strftimeCall($processedArgs, $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::strftimeCall(sqlDialect:SqlDialect[1], args:String[*], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let dateFormat = $args->at(1)->dateFormatSpecifierForDuckDB();
  generateFunctionCallWithArgs($sqlDialect, 'strftime', [$args->at(0), $dateFormat], [], $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForConvertTimeZone(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let processedArgs = $sqlDialect->processFunctionArgs($f.arguments, $state, $config);
  let srcTimeZone = '\''+ if($config.dbConfig.dbTimeZone->isEmpty(), | 'GMT', |  $config.dbConfig.dbTimeZone->toOne()) + '\'';
  let timeZoneArg = $processedArgs->at(0) + ' AT TIME ZONE '+ $srcTimeZone +' AT TIME ZONE ' + $processedArgs->at(1);
  $sqlDialect->generateFunctionCallWithArgs('strftime', [$timeZoneArg, $processedArgs->at(2)->dateFormatSpecifierForDuckDB()], [], $state, $config);
  // $sqlDialect->generateFunctionCallWithArgs('convert_from', [$decodeCall, '\'utf8\''], [], $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForDateDiff(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let processedArgs = $sqlDialect->processFunctionArgs($f.arguments, $state, $config);
  if($processedArgs->at(0)->removeQuotes($sqlDialect)=='week',
   |$sqlDialect->generateCast(generateFunctionCallWithArgs($sqlDialect, 'datediff', ['\'day\'',$processedArgs->at(1), $processedArgs->at(2)], [], $state, $config)+'//7', 'integer', $state, $config), 
   |generateFunctionCallWithArgs($sqlDialect, 'datediff', [$processedArgs->at(0),$processedArgs->at(1), $processedArgs->at(2)], [], $state, $config));
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForDateAdd(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let processedArgs = $sqlDialect->processFunctionArgs($f.arguments, $state, $config);
  let intervalString='INTERVAL '+$processedArgs->at(1) +' '+$processedArgs->at(2)->removeQuotes($sqlDialect);
  let dateAddCall = generateFunctionCallWithArgs($sqlDialect, 'date_add', [$processedArgs->at(0),$intervalString->removeQuotes($sqlDialect)], [], $state, $config);
  let dateUnit = $processedArgs->at(2)->removeQuotes($sqlDialect);
  if($dateUnit == 'DAY' || $dateUnit == 'MONTH' || $dateUnit == 'YEAR' || $dateUnit == 'WEEK' ,
    |$sqlDialect->generateCast($dateAddCall, 'date', $state, $config),
    |$dateAddCall
   );
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::dateFormatSpecifierForDuckDB(f:String[1]): String[1]
{
  let formatSubs = [
    pair('Month', '%B'),
    pair('Day', '%A'),
    pair('YYYY', '%Y'),
    pair('MM', '%m'),
    pair('DD', '%d'),
    pair('Mon', '%b'),
    pair('HH24', '%H'),
    pair('HH12', '%I'),
    pair('HH', '%I'),
    pair('MI', '%M'),
    pair('SS', '%S'),
    pair('MS', '%g'),
    pair('US', '%f')
    // TODO: Handle more format specifiers
  ];

  $formatSubs->fold({i, a|$a->replace($i.first, $i.second)}, $f);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::dateLiteralNodeProcessorForDuckDB(): NodeProcessor<DateLiteral>[1]
{
  nodeProcessor(
    DateLiteral,
    {sqlDialect, d, state, config |
      $d.value->convertDateToSqlStringForDuckDB($config.dbConfig.dbTimeZone)
    },
    {n | true}
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::timestampLiteralNodeProcessorForDuckDB(): NodeProcessor<TimestampLiteral>[1]
{
  nodeProcessor(
    TimestampLiteral,
    {sqlDialect, t, state, config |
      $t.value->convertDateToSqlStringForDuckDB($config.dbConfig.dbTimeZone)
    },
    {n | true}
  )
}

// Overridden because xor is handled differently
function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::bitwiseBinaryExpressionNodeProcessorForDuckDB(): NodeProcessor<BitwiseBinaryExpression>[1]
{
  nodeProcessor(
    BitwiseBinaryExpression,
    {sqlDialect, b, state, config |
      let leftExpr = $sqlDialect->executeNodeProcessor($b.left, $b, $state, $config);
      let rightExpr = $sqlDialect->executeNodeProcessor($b.right, $b, $state, $config);
      if(
        [
          pair(| $b.operator == BitwiseBinaryOperator.AND, | $leftExpr + ' & ' + $rightExpr;),
          pair(| $b.operator == BitwiseBinaryOperator.OR, | $leftExpr + ' | ' + $rightExpr),
          pair(| $b.operator == BitwiseBinaryOperator.XOR, | generateFunctionCallWithArgs($sqlDialect, 'xor', [$leftExpr, $rightExpr], $state, $config))
        ],
        | failWithMessage('Unhandled bitwise binary operator type: ' + $b.operator->toString()); '';
      );
    }
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::convertDateToSqlStringForDuckDB(date:Date[1], dbTimeZone:String[0..1]):String[1]
{
  //Default to UTC, if timezone is not specified. GMT is the same as UTC, UTC is not actually a timezone
  let timeZone = if( $dbTimeZone->isEmpty(), | 'GMT', |  $dbTimeZone->toOne());
  if($date->hasSecond(),
    | if ($date->hasSubsecond(),
        | let d= format('%t{[' + $timeZone + ']yyyy-MM-dd HH:mm:ss.SSSSSS}', $date);
          format('TIMESTAMP \'%s\'',$d);,
        | let d= format('%t{[' + $timeZone + ']yyyy-MM-dd HH:mm:ss}', $date);
          format('TIMESTAMP_S \'%s\'',$d);
        ),
    | if ($date->hasMonth() || $date->hasDay(),
        | let d = format('%t{[' + $timeZone + ']yyyy-MM-dd}', $date);
          format('DATE \'%s\'',$d);,
        | fail('DuckDB doesn\'t support YEAR and YEAR-MONTH'); '';
      )
  );
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForTimeBucket(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let processedArgs = $sqlDialect->processFunctionArgs($f.arguments, $state, $config);
  let unit = $processedArgs->at(2);
  let unitWithoutQuotes = $unit->removeQuotes($sqlDialect);
  let interval_func= [
      pair(DurationUnit.YEARS->toString(), 'to_years'),
      pair(DurationUnit.MONTHS->toString(), 'to_months'),
      pair(DurationUnit.WEEKS->toString(), 'to_weeks'),
      pair(DurationUnit.DAYS->toString(), 'to_days'),
      pair(DurationUnit.HOURS->toString(), 'to_hours'),
      pair(DurationUnit.MINUTES->toString(), 'to_minutes'),
      pair(DurationUnit.SECONDS->toString(), 'to_seconds'),
      pair(DurationUnit.MILLISECONDS->toString(), 'to_milliseconds'),
      pair(DurationUnit.MICROSECONDS->toString(), 'to_microseconds')
  ]->filter(p | $p.first == $unitWithoutQuotes).second->toOne();
  let intervalFuncCall = generateFunctionCallWithArgs($sqlDialect, $interval_func, [$processedArgs->at(1)], [], $state, $config);
  let ISOMondayEpochOffset = 'timestamp \'1969-12-29 00:00:00\'';
  let EpochOffset = 'timestamp \'1970-01-01 00:00:00\'';
  let offset = [
      pair(DurationUnit.YEARS->toString(), $EpochOffset),
      pair(DurationUnit.MONTHS->toString(), $EpochOffset),
      pair(DurationUnit.WEEKS->toString(), $ISOMondayEpochOffset),
      pair(DurationUnit.DAYS->toString(), $EpochOffset),
      pair(DurationUnit.HOURS->toString(), $EpochOffset),
      pair(DurationUnit.MINUTES->toString(), $EpochOffset),
      pair(DurationUnit.SECONDS->toString(), $EpochOffset)
  ]->filter(p | $p.first == $unitWithoutQuotes).second->toOne();
  generateFunctionCallWithArgs($sqlDialect, 'time_bucket', [$intervalFuncCall,$processedArgs->at(0), $offset], [], $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBVariablePlaceholderPrefixSuffixMap(): Map<String, Pair<String, String>>[1]
{
  [
    pair('String',      pair('\'', '\'')),
    pair('Integer',     pair('', '')),
    pair('Decimal',     pair('', '')),
    pair('Number',      pair('', '')),
    pair('SQLNull',     pair('', '')),
    pair('Float',       pair('', '')),
    pair('StrictDate',  pair('DATE \'', '\'')),
    pair('DateTime',    pair('TIMESTAMP \'', '\'')),
    pair('Date',        pair('TIMESTAMP \'', '\'')),
    pair('Boolean',     pair('', '')),
    pair('Enum',        pair('', ''))
  ]->newMap();
}

// --------------------------------------------------------------------------