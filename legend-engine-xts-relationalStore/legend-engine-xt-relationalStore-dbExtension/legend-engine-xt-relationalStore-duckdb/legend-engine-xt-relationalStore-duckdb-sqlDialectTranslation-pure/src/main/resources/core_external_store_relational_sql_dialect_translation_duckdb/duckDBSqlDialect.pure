// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::temporal::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::temporal::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::boolean::*;
import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::defaults::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::numeric::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::string::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::postgresNativeFunctions::boolean::*;
import meta::external::store::relational::sqlDialectTranslation::functionRegistry::extensionFunctions::numeric::*;
import meta::external::store::relational::sqlDialectTranslation::duckDB::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::typeInference::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;
import meta::pure::extension::*;

function meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBSqlDialect(): SqlDialect[1]
{
  ^SqlDialect
  (
    dbType = 'DuckDB',
    quoteConfig = duckDBQuoteConfiguration(),
    nodeProcessors = duckDBDialectNodeProcessors(),
    identifierProcessor = duckDBIdentifierProcessor(),
    expressionPrecedenceComparator = duckDBExpressionPrecedenceComparator(),
    keywords = duckDBKeywords(),
    functionProcessorMap = functionProcessorMap()
  )
}

function meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBSqlDialectExtension(): Extension[1]
{
  ^Extension
  (
    type = 'DuckDBSqlDialectExtension',
    moduleExtensions = [
      ^SqlDialectTranslationModuleExtension
      (
        module = sqlDialectTranslationModuleExtensionName(),
        extraSqlDialects = duckDBSqlDialect()
      )
    ]
  )
}

function meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBFunctionTestsExpectedErrors(): Map<String, String>[1]
{
  [
   
  ]->newMap()->cast(@Map<String, String>)
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBQuoteConfiguration(): QuoteConfiguration[1]
{
  ^QuoteConfiguration
  (
    start = '"',
    end = '"',
    escape = '""'
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectNodeProcessors(): Map<Class<Node>, NodeProcessor<Node>>[1]
{
  newMap(
    duckDBDialectStatementProcessors()
    ->concatenate(
      duckDBDialectRelationProcessors()
    )
    ->concatenate(
      duckDBDialectExpressionProcessors()
    )
    ->concatenate(
      duckDBDialectLiteralProcessors()
    )
    ->concatenate(
      duckDBDialectSelectItemProcessors()
    )
    ->concatenate(
      duckDBDialectOtherNodeProcessors()
    )
    ->map(n | pair($n.nodeType, $n))
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectStatementProcessors(): NodeProcessor<Statement>[*]
{
  [
    queryProcessor_default(),
    windowProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectRelationProcessors(): NodeProcessor<Relation>[*]
{
  [
    tableProcessor_default(),
    aliasedRelationProcessor_default(),
    joinProcessor_default(),
    querySpecificationProcessor_default(),
    unionProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectExpressionProcessors(): NodeProcessor<meta::external::query::sql::metamodel::Expression>[*]
{
  [
    comparisonExpressionNodeProcessor_default(),
    logicalBinaryExpressionNodeProcessor_default(),
    notExpressionNodeProcessor_default(),
    arithmeticExpressionNodeProcessor_duckDB(),
    columnTypeProcessor_default(),
    castProcessor_default(),
    negativeNodeProcessor_default(),
    functionCallProcessor_default(),
    whenClauseNodeProcessor_default(),
    searchedCaseExpressionNodeProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectLiteralProcessors(): NodeProcessor<Literal>[*]
{
  [
    integerLiteralNodeProcessor_default(),
    stringLiteralNodeProcessor_default(),
    booleanLiteralNodeProcessor_default(),
    longLiteralNodeProcessor_default(),
    doubleLiteralNodeProcessor_default(),
    nullLiteralNodeProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectSelectItemProcessors(): NodeProcessor<SelectItem>[*]
{
  [
    allColumnsNodeProcessor_default(),
    singleColumnNodeProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBDialectOtherNodeProcessors(): NodeProcessor<Node>[*]
{
  [
    sortItemProcessor_default(),
    selectProcessor_default()
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBIdentifierProcessor(): IdentifierProcessor[1]
{
  identifierProcessor_default()
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBExpressionPrecedenceComparator(): ExpressionPrecedenceComparator[1]
{
  ^ExpressionPrecedenceComparator(
    findOperatorType = findOperatorType_default_Expression_1__String_1_,
    operatorPrecedence = operatorPrecedence_default()
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::duckDBKeywords(): String[*]
{
  [ 
    'all',
    'analyse',
    'analyze',
    'and',
    'any',
    'array',
    'as',
    'asc_p',
    'asymmetric',
    'both',
    'case',
    'cast',
    'check_p',
    'collate',
    'column',
    'constraint',
    'create_p',
    'default',
    'deferrable',
    'desc_p',
    'describe',
    'distinct',
    'do',
    'else',
    'end_p',
    'except',
    'false_p',
    'fetch',
    'for',
    'foreign',
    'from',
    'grant',
    'group_p',
    'having',
    'qualify',
    'in_p',
    'initially',
    'intersect',
    'into',
    'lateral_p',
    'leading',
    'limit',
    'not',
    'null_p',
    'offset',
    'on',
    'only',
    'or',
    'order',
    'pivot',
    'pivot_wider',
    'pivot_longer',
    'placing',
    'primary',
    'references',
    'returning',
    'select',
    'show',
    'some',
    'summarize',
    'symmetric',
    'table',
    'then',
    'to',
    'trailing',
    'true_p',
    'union',
    'unique',
    'unpivot',
    'using',
    'variadic',
    'when',
    'where',
    'window',
    'with' 
  ]
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::arithmeticExpressionNodeProcessor_duckDB(): NodeProcessor<ArithmeticExpression>[1]
{
  nodeProcessor(
    ArithmeticExpression,
    {sqlDialect, a, state, config |
      let leftExpr = $sqlDialect->executeNodeProcessor($a.left, $a, $state, $config);
      let rightExpr = $sqlDialect->executeNodeProcessor($a.right, $a, $state, $config);
      let operator = if(
        [
          pair(|$a.type == ArithmeticType.ADD, | '+'),
          pair(|$a.type == ArithmeticType.SUBTRACT, | '-'),
          pair(|$a.type == ArithmeticType.MULTIPLY, | '*'),
          pair(|$a.type == ArithmeticType.DIVIDE, | '//'),
          pair(|$a.type == ArithmeticType.MODULUS, | '%'),
          pair(|$a.type == ArithmeticType.POWER, | '^')
        ],
        | failWithMessage('Unhandled arithmetic operator type: ' + $a.type->toString())
      );

      $leftExpr + ' ' + $operator + ' ' + $rightExpr;
    }
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::functionProcessorMap(): Map<Class<SqlFunction>, FunctionProcessor>[1]
{
  newMap([
    // Numeric
    pair(Abs, simpleFunctionProcessor('abs')),
    pair(Cbrt, simpleFunctionProcessor('cbrt')),
    pair(Ceil, simpleFunctionProcessor('ceil')),
    pair(Ceiling, simpleFunctionProcessor('ceiling')),
    pair(Degrees, simpleFunctionProcessor('degrees')),
    pair(Exp, simpleFunctionProcessor('exp')),
    pair(Ln, simpleFunctionProcessor('ln')),
    pair(Log, simpleFunctionProcessor('log')),
    pair(Log10, simpleFunctionProcessor('log10')),
    pair(Sqrt, simpleFunctionProcessor('sqrt')),
    pair(Acos, simpleFunctionProcessor('acos')),
    pair(Asin, simpleFunctionProcessor('asin')),
    pair(Atan, simpleFunctionProcessor('atan')),
    pair(Atan2, simpleFunctionProcessor('atan2')),
    pair(Cos, simpleFunctionProcessor('cos')),
    pair(Cot, simpleFunctionProcessor('cot')),
    pair(Sin, simpleFunctionProcessor('sin')),
    pair(Tan, simpleFunctionProcessor('tan')),

    // String
    pair(Lpad, argTransformFunctionProcessor('lpad', {n:Node[*]| if($n->size() == 2, |$n->concatenate(^StringLiteral(value = ' ')), |$n)})),
    pair(Rpad, argTransformFunctionProcessor('rpad', {n:Node[*]| if($n->size() == 2, |$n->concatenate(^StringLiteral(value = ' ')), |$n)})),
    pair(Ltrim, simpleFunctionProcessor('ltrim')),
    pair(Rtrim, simpleFunctionProcessor('rtrim')),
    pair(Ascii, simpleFunctionProcessor('ascii')),

    // Boolean
    pair(RegexpLike, customFunctionProcessor(processorForRegexpLike_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),

    // Temporal
    pair(DateTrunc, customFunctionProcessor(processorForDateTrunc_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(DatePart, simpleFunctionProcessor('date_part')),
    pair(Now, simpleFunctionProcessor('now')),
    pair(ToDate, customFunctionProcessor(processorForToDate_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_)),
    pair(ToTimestamp, customFunctionProcessor(processorForToTimestamp_FunctionCall_1__SqlDialect_1__SqlDialectTranslationState_1__SqlDialectTranslationConfig_1__String_1_))
  ])
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForDateTrunc(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let dateTrunc = simpleFunctionProcessor('date_trunc').processFunction->toOne()->eval($sqlDialect, $f, $state, $config);
  $sqlDialect->generateCast($dateTrunc, 'timestamp', $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForToDate(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let processedArgs = $sqlDialect->processFunctionArgs($f.arguments, $state, $config);
  let toDateCall = $sqlDialect->strptimeCall($processedArgs, $state, $config);
  $sqlDialect->generateCast($toDateCall, 'date', $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::processorForToTimestamp(f:FunctionCall[1], sqlDialect:SqlDialect[1], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let processedArgs = $sqlDialect->processFunctionArgs($f.arguments, $state, $config);
  if($processedArgs->size() == 2,
    | $sqlDialect->strptimeCall($processedArgs, $state, $config),
    | let epochSeconds = $sqlDialect->generateCast($processedArgs->at(0), 'bigint', $state, $config);
      let epochMilliseconds = $epochSeconds + ' * 1000';
      generateFunctionCallWithArgs($sqlDialect, 'epoch_ms', $epochMilliseconds, [], $state, $config);
  );
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::strptimeCall(sqlDialect:SqlDialect[1], args:String[*], state:SqlDialectTranslationState[1], config:SqlDialectTranslationConfig[1]): String[1]
{
  let dateFormat = $args->at(1)->dateFormatSpecifierForDuckDB();
  generateFunctionCallWithArgs($sqlDialect, 'strptime', [$args->at(0), $dateFormat], [], $state, $config);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::duckDB::dateFormatSpecifierForDuckDB(f:String[1]): String[1]
{
  let formatSubs = [
    pair('YYYY', '%Y'),
    pair('MM', '%m'),
    pair('DD', '%d'),
    pair('Mon', '%b'),
    pair('HH24', '%H'),
    pair('HH12', '%I'),
    pair('HH', '%I'),
    pair('MI','%M'),
    pair('SS', '%S'),
    pair('MS', '%g'),
    pair('US', '%f')
    // TODO: Handle more format specifiers
  ];

  $formatSubs->fold({i,a|$a->replace($i.first, $i.second)}, $f);
}

// --------------------------------------------------------------------------