// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::sqlstring::*;
import meta::pure::executionPlan::profiles::*;
import meta::relational::tests::mapping::sqlFunction::model::domain::*;
import meta::relational::tests::mapping::sqlFunction::model::store::*;
import meta::relational::tests::mapping::sqlFunction::model::mapping::*;

import meta::pure::profiles::*;
import meta::pure::tds::*;

import meta::relational::metamodel::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::join::*;
import meta::relational::metamodel::execute::*;
import meta::relational::functions::toDDL::*;
import meta::relational::mapping::*;
import meta::relational::tests::*;

import meta::pure::runtime::*;
import meta::relational::runtime::*;
import meta::relational::runtime::authentication::*;

function <<test.BeforePackage>> meta::relational::tests::mapping::function::snowflake::setUp():Boolean[1]
{
    let connection = testDataTypeMappingRuntime().connectionByElement(myDB)->cast(@TestDatabaseConnection);

    dropAndCreateTableInDb(myDB, 'dataTable', $connection);

    executeInDb('insert into dataTable (int1, string1, string2, string3, dateTime, float1,string2float,string2Decimal,string2date,stringDateFormat,stringDateTimeFormat,stringUserDefinedDateFormat, stringToInt, alphaNumericString ) values (1, \'Joe\', \' Bloggs \', 10, \'2003-07-19 00:00:00\', 1.1,\'123.456\',\'123.450021\', \'2016-06-23 00:00:00.123\',\'2016-06-23\',\'2016-06-23 13:00:00.123\', \'Nov1995\', \'33\', \'loremipsum33\' )', $connection);
    executeInDb('insert into dataTable (int1, string1, string2, string3, dateTime, float1,string2float,string2Decimal,string2date,stringDateFormat,stringDateTimeFormat,stringUserDefinedDateFormat, stringToInt, alphaNumericString ) values (2, \'Mrs\', \'Smith\', 11, \'2003-07-20 00:00:00\', 1.8,\'100.001\', \'0100.009\',\'2016-06-23 00:00:00.345\',\'2016-02-23\',\'2016-02-23 23:00:00.1345\', \'Nov1995\', \'42\', \'lorem42ipsum\')', $connection);
    true;
}


function <<test.Test>> meta::relational::tests::mapping::function::snowflake::testProject():Boolean[1]
{
    let result = execute(|SqlFunctionDemo.all()->project([s | $s.concatResult], ['concat']), testMapping, testDataTypeMappingRuntime(), meta::relational::extension::relationalExtensions());
    assertEquals(['Joe Bloggs ', 'MrsSmith'], $result.values->at(0).rows.values);
    assertEquals('select concat("root".string1, "root".string2) as "concat" from dataTable as "root"',$result->sqlRemoveFormatting());
   
    let snowflakeSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.concatResult], ['concat']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
    assertEquals('select concat("root".string1, "root".string2) as "concat" from dataTable as "root"',$snowflakeSql);
}

function <<test.Test>> meta::relational::tests::mapping::function::snowflake::testToSQLStringConcatSnowflake():Boolean[1]
{
   let snowflakeSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.concatResult], ['concat']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select concat("root".string1, "root".string2) as "concat" from dataTable as "root"',$snowflakeSql);
}

function  <<meta::pure::profiles::test.Test>> meta::relational::tests::mapping::function::snowflake::testToSQLStringLenSnowflake():Boolean[1]
{
   let snowflakeSql = toSQLString(|SqlFunctionDemo.all()->project([s | length($s.concatResult)], ['len']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select length(concat("root".string1, "root".string2)) as "len" from dataTable as "root"',$snowflakeSql);
}

function <<test.Test>> meta::relational::tests::mapping::function::snowflake::testFilter():Boolean[1]
{
    let result = execute(|SqlFunctionDemo.all()->filter(s | $s.concatResult == 'Joe Bloggs ')->project([s | $s.concatResult], ['concat']), testMapping, testDataTypeMappingRuntime(), meta::relational::extension::relationalExtensions());
    assertEquals(['Joe Bloggs '], $result.values->at(0).rows.values);
    assertEquals('select concat("root".string1, "root".string2) as "concat" from dataTable as "root" where concat("root".string1, "root".string2) = \'Joe Bloggs \'',$result->sqlRemoveFormatting());
    
    let snowflakeSql = toSQLString(|SqlFunctionDemo.all()->filter(s | $s.concatResult == 'Joe Bloggs ')->project([s | $s.concatResult], ['concat']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
    assertEquals('select concat("root".string1, "root".string2) as "concat" from dataTable as "root" where concat("root".string1, "root".string2) = \'Joe Bloggs \'',$snowflakeSql);
}

function <<test.Test>> meta::relational::tests::mapping::function::snowflake::testToSQLStringjoinStringsMappingSnowflake():Boolean[1]
{
    let snowflakeSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.joinStringsResult], ['aggregatedCol']), testMapping, meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
    assertEquals('select listagg("root".string1, \':\') as "aggregatedCol" from dataTable as "root"',$snowflakeSql);
}

function <<test.Test>> meta::relational::tests::mapping::function::snowflake::testToSQLStringjoinStringsExpressionSnowflake():Boolean[1]
{
    let stringVals = ['Joe Bloggs', 'Mrs.Smith', 'John'];
    let separator = ':';
    let snowflakeSql = toSQLString(|SqlFunctionDemo.all()->project([s|joinStrings($stringVals, $separator)], ['concatenatedCOL']),testMapping, meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
    assertEquals('select concat(\'Joe Bloggs\', \':\', \'Mrs.Smith\', \':\', \'John\') as "concatenatedCOL" from dataTable as "root"',$snowflakeSql);
}

function <<test.Test>> meta::relational::tests::mapping::function::snowflake::testTriminNotSybaseASE():Boolean[1]{

   let sSnowflake = toSQLString(|SqlFunctionDemo.all()->project([s | $s.trimResult], ['trim']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());

   assertEquals('select trim("root".string2) as "trim" from dataTable as "root"',$sSnowflake);
}

function <<test.Test>> meta::relational::tests::mapping::function::snowflake::testToSQLStringDateDiffInSnowflake():Boolean[1]
{
   let da = %2013-03-01T19:09:20;
   let db = %2017-03-01T20:08:08;
  
   let test = toSQLString(|SqlFunctionDemo.all()->project([s|dateDiff($da, $db, DurationUnit.YEARS), 
                                                           s|dateDiff($da, $db, DurationUnit.MONTHS), 
                                                           s|dateDiff($da, $db, DurationUnit.WEEKS), 
                                                           s|dateDiff($da, $db, DurationUnit.DAYS),
                                                           s|dateDiff($da, $db, DurationUnit.HOURS),
                                                           s|dateDiff($da, $db, DurationUnit.MINUTES),
                                                           s|dateDiff($da, $db, DurationUnit.SECONDS)],
                                                           ['dateDiffYears','dateDiffMonths','dateDiffWeeks','dateDiffDays','dateDiffHours','dateDiffMinutes','dateDiffSeconds']),
                                                   testMapping,
                                                   meta::relational::runtime::DatabaseType.Snowflake,
                                                   meta::relational::extension::relationalExtensions());
   assertEquals('select datediff(year,\'2013-03-01 19:09:20\'::timestamp,\'2017-03-01 20:08:08\'::timestamp) as "dateDiffYears",'+
                ' datediff(month,\'2013-03-01 19:09:20\'::timestamp,\'2017-03-01 20:08:08\'::timestamp) as "dateDiffMonths",'+
                ' datediff(week,\'2013-03-01 19:09:20\'::timestamp,\'2017-03-01 20:08:08\'::timestamp) as "dateDiffWeeks",'+
                ' datediff(day,\'2013-03-01 19:09:20\'::timestamp,\'2017-03-01 20:08:08\'::timestamp) as "dateDiffDays",'+
                ' datediff(hour,\'2013-03-01 19:09:20\'::timestamp,\'2017-03-01 20:08:08\'::timestamp) as "dateDiffHours",'+
                ' datediff(minute,\'2013-03-01 19:09:20\'::timestamp,\'2017-03-01 20:08:08\'::timestamp) as "dateDiffMinutes",'+
                ' datediff(second,\'2013-03-01 19:09:20\'::timestamp,\'2017-03-01 20:08:08\'::timestamp) as "dateDiffSeconds"'+ ' from dataTable as "root"',$test);
}

function <<test.Test>> meta::relational::tests::mapping::function::snowflake::testToSQLStringConvertVarchar128InSnowflake():Boolean[1]
{

   let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.convertVarchar128], ['convertVarchar128']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select to_char("root".int1) as "convertVarchar128" from dataTable as "root"', $s);

}

function <<test.Test>> meta::relational::tests::mapping::function::snowflake::testToSQLStringconvertToDateinSnowflake():Boolean[1]
{

   let s =toSQLString(|SqlFunctionDemo.all()->project([s | $s.convertToDate], ['convertToDate']),
                                                       testMapping,
                                                       meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());

   assertEquals('select to_date("root".stringDateFormat,\'yyyy-MM-dd\') as "convertToDate" from dataTable as "root"', $s);
}

function <<test.Test>> meta::relational::tests::mapping::function::snowflake::testToSQLStringconvertToDateinSnowflakeUserDefinedFormatStartsWithYear():Boolean[1]
{

   let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.convertToDateUserDefinedFormat2], ['convertToDateUserDefinedFormat']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select to_date("root".stringUserDefinedDateFormat,\'YYYY/MM/DD\') as "convertToDateUserDefinedFormat" from dataTable as "root"', $s);
}

function <<test.Test>> meta::relational::tests::mapping::function::snowflake::testToSQLStringconvertToDateinSnowflakeUserDefinedFormatStartsWithDay():Boolean[1]
{

   let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.convertToDateUserDefinedFormat3], ['convertToDateUserDefinedFormat']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select to_date("root".stringUserDefinedDateFormat,\'DD/MM/YYYY\') as "convertToDateUserDefinedFormat" from dataTable as "root"', $s);
}

function <<test.Test>> meta::relational::tests::mapping::function::snowflake::testToSQLStringconvertToDateTimeinSnowFlake():Boolean[1]
{
   let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.convertToDateTimeUserDefinedFormat], ['convertToDateTime']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select to_timestamp("root".stringDateTimeFormat,\'YYYY-MM-DDTHH:MI:SS\') as "convertToDateTime" from dataTable as "root"',$s);
}

function <<test.Test>> meta::relational::tests::mapping::function::snowflake::testToSQLStringconvertToDateTimeWithMilliSecondsinSnowFlake():Boolean[1]
{
   let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.convertToDateTimeUserDefinedFormat1], ['convertToDateTime']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select to_timestamp("root".stringDateTimeFormat,\'YYYY-MM-DDTHH:MI:SS.FF\') as "convertToDateTime" from dataTable as "root"',$s);
}
