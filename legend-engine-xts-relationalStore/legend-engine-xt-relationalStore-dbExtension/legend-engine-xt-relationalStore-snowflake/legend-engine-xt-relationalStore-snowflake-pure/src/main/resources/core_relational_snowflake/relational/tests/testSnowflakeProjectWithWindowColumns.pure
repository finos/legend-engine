// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::mapping::distinct::model::mapping::*;
import meta::relational::tests::mapping::distinct::model::domain::*;
import meta::pure::functions::math::olap::*;
import meta::relational::runtime::*;
import meta::external::store::relational::runtime::*;
import meta::relational::functions::sqlstring::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::external::store::relational::tests::*;

function <<test.Test>> meta::relational::tests::projection::snowflake::testProjectWindowColumnSnowflake():Boolean[1]
{
   let func = {|
      meta::relational::tests::model::simple::Person.all()
         ->project([
            col(p|$p.lastName, 'lastName'),
            col(window(p|$p.firstName), sortAsc(p|$p.lastName), func(p|$p.age->toOne(), y|$y->average()), 'ageAverageWindow')
         ])
   };
   let result = toSQLString($func, simpleRelationalMappingInc, DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LASTNAME as "lastName", avg(1.0 * "root".AGE) OVER (Partition By "root".FIRSTNAME Order By "root".LASTNAME ASC) as "ageAverageWindow" from personTable as "root"', $result);
}
