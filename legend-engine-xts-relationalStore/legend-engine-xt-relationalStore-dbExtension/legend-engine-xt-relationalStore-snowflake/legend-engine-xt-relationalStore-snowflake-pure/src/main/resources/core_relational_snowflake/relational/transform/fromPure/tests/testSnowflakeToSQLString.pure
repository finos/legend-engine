// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::functions::sqlstring::*;
import meta::pure::mapping::*;
import meta::relational::functions::asserts::*;
import meta::relational::mapping::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
import meta::pure::profiles::*;
import meta::relational::functions::sqlstring::*;
import meta::relational::runtime::*;

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testToSQLStringWithAggregationSnowflake():Boolean[1]
{
   let s = toSQLString(|Person.all()->groupBy([p:Person[1]|$p.firstName], 
                                                agg(e|$e.age, y|$y->sum()),
                                                ['firstName', 'age']), 
                                                meta::relational::tests::simpleRelationalMapping, 
                                                meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".FIRSTNAME as "firstName", sum("root".AGE) as "age" from personTable as "root" group by "firstName"', $s);
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testToSQLStringWithOrderbySnowflake():Boolean[1]
{
   let s = toSQLString(|Person.all()->groupBy([p:Person[1]|$p.firstName], 
                                                agg(e|$e.age, y|$y->sum()),
                                                ['firstName', 'age'])->sort(asc('age'))->limit(5), 
                                                meta::relational::tests::simpleRelationalMapping, 
                                                meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".FIRSTNAME as "firstName", sum("root".AGE) as "age" from personTable as "root" group by "firstName" order by "age" limit 5', $s);
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testToSqlGenerationIndexOf():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Snowflake, 'select CHARINDEX(\'Jo\', "root".FIRSTNAME) as "index" from personTable as "root"')
   ];
   
   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;
               
      let result = toSQLString(
         |meta::relational::tests::model::simple::Person.all()->project(p|$p.firstName->indexOf('Jo'), 'index'),
         simpleRelationalMapping, 
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testDayOfYear():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Snowflake, 'select DAYOFYEAR("root".tradeDate) as "doy" from tradeTable as "root"')
   ];
   
   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;
               
      let result = toSQLString(
         |Trade.all()
            ->project(col(t|$t.date->dayOfYear(), 'doy')),
         simpleRelationalMapping, 
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testToSqlGenerationFirstDayOfTimePeriod():Boolean[1]
{
    let result = toSQLString(
     |Trade.all()
        ->project([
          col(t|$t.date->firstHourOfDay(), 'day'),
          col(t|$t.date->firstMinuteOfHour(), 'hour'),
          col(t|$t.date->firstSecondOfMinute(), 'minute'),
          col(t|$t.date->firstMillisecondOfSecond(), 'second')
        ]), simpleRelationalMapping, DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());

    assertEquals('select DATE_TRUNC(\'DAY\', "root".tradeDate) as "day", DATE_TRUNC(\'HOUR\', "root".tradeDate) as "hour", DATE_TRUNC(\'MINUTE\', "root".tradeDate) as "minute", DATE_TRUNC(\'SECOND\', "root".tradeDate) as "second" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testToSQLStringToNumericCasts():Boolean[1]
{
    let result = toSQLString(
     |Trade.all()
        ->project([
          col(t|$t.quantity->toDecimal(), 'decimal'),
          col(t|$t.quantity->toFloat(), 'float')
        ]), simpleRelationalMapping, DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());

    assertEquals('select to_decimal("root".quantity) as "decimal", to_double("root".quantity) as "float" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testTrim():Boolean[1]
{
  let common = 'select ltrim("root".FIRSTNAME) as "ltrim", trim("root".FIRSTNAME) as "trim", rtrim("root".FIRSTNAME) as "rtrim" from personTable as "root"';

   let expected = [
    pair(DatabaseType.Snowflake, $common)
  ];
   
   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;
               
      let result = toSQLString(
        |Person.all()->project([
          a | $a.firstName->ltrim(),
          a | $a.firstName->trim(),
          a | $a.firstName->rtrim()
         ],
         ['ltrim', 'trim', 'rtrim']),
         simpleRelationalMapping, 
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testCbrt():Boolean[1]
{
  let common = 'select cbrt("root".quantity) as "cbrt" from tradeTable as "root"';

   let expected = [
    pair(DatabaseType.Snowflake, $common)
   ];
   
   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;
               
      let result = toSQLString(
        |Trade.all()->project([
          a | $a.quantity->cbrt()
         ],
         ['cbrt']),
         simpleRelationalMapping, 
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testToSQLStringWithQuoteIdentifiersFlag():Boolean[1]
{
   let runtime = ^meta::pure::runtime::Runtime(connections = ^TestDatabaseConnection(element = meta::relational::tests::db,
                                                                                     type = DatabaseType.Snowflake,
                                                                                     quoteIdentifiers = true
                                                                                  ));

   let result = toSQLStringPretty(|Synonym.all()->filter(s | $s.type != 'ISIN')->project([s | $s.name],['name']),
                                  simpleRelationalMappingWithEnumConstant, $runtime, meta::relational::extension::relationalExtensions());
   
   assertEquals('select 	"root"."NAME" as "name" from "productSchema"."synonymTable" as "root" where (\'CUSIP\' <> \'ISIN\')', $result->replace('\n', ''));
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testToSQLStringWithQuoteIdentifiersFlagInColumnName():Boolean[1]
{
   let runtime = ^meta::pure::runtime::Runtime(connections = ^TestDatabaseConnection(element = meta::relational::tests::db,
                                                                                     type = DatabaseType.Snowflake,
                                                                                     quoteIdentifiers = true
                                                                                  ));

   let result = toSQLStringPretty(|Product.all()->project([#/Product/name!prodName#])->sort(asc('prodName'))->drop(2)->limit(5),
                                   simpleRelationalMapping, $runtime, meta::relational::extension::relationalExtensions());
   
   assertEquals('select 	"prodName" as "prodName" from (		select 			"root"."NAME" as "prodName" 		from "productSchema"."productTable" as "root" 		order by "prodName"		 limit \'\' offset 2) as "subselect" limit 5', $result->replace('\n', ''));
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testJoinStringsSnowflake():Boolean[1]
{
   let fn = {|Firm.all()->project([f|$f.legalName, f|$f.employees.firstName->joinStrings('')], ['legalName', 'employeesFirstName'])};
   let snowflakeSql = toSQLString($fn, meta::relational::tests::simpleRelationalMapping, meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LEGALNAME as "legalName", "gen_firmTable_Firm_Person_d_m2".aggCol as "employeesFirstName" from firmTable as "root" left outer join (select "gen_firmTable_Firm_Person".ID as ID, listagg("personTable_d#5".FIRSTNAME) as aggCol from firmTable as "gen_firmTable_Firm_Person" left outer join personTable as "personTable_d#5" on ("gen_firmTable_Firm_Person".ID = "personTable_d#5".FIRMID) group by "gen_firmTable_Firm_Person".ID) as "gen_firmTable_Firm_Person_d_m2" on ("root".ID = "gen_firmTable_Firm_Person_d_m2".ID)', $snowflakeSql);
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testJoinStringsSnowflakeWithSeparator():Boolean[1]
{
   let fn = {|Firm.all()->project([f|$f.legalName, f|$f.employees.firstName->joinStrings('*')], ['legalName', 'employeesFirstName'])};
   let snowflakeSql = toSQLString($fn, meta::relational::tests::simpleRelationalMapping, meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LEGALNAME as "legalName", "gen_firmTable_Firm_Person_d_m2".aggCol as "employeesFirstName" from firmTable as "root" left outer join (select "gen_firmTable_Firm_Person".ID as ID, listagg("personTable_d#5".FIRSTNAME, \'*\') as aggCol from firmTable as "gen_firmTable_Firm_Person" left outer join personTable as "personTable_d#5" on ("gen_firmTable_Firm_Person".ID = "personTable_d#5".FIRMID) group by "gen_firmTable_Firm_Person".ID) as "gen_firmTable_Firm_Person_d_m2" on ("root".ID = "gen_firmTable_Firm_Person_d_m2".ID)', $snowflakeSql);
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testJoinStringsArray():Boolean[1]
{
   let fn = {|Firm.all()->project([f|$f.legalName, f|['A', 'B', 'C']->joinStrings('')], ['legalName', 'employeesFirstName'])};
   let snowflakeSql = toSQLString($fn, meta::relational::tests::simpleRelationalMapping, meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LEGALNAME as "legalName", concat(\'A\', \'B\', \'C\') as "employeesFirstName" from firmTable as "root"', $snowflakeSql);
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::testJoinStringsArrayWithSeparator():Boolean[1]
{
   let fn = {|Firm.all()->project([f|$f.legalName, f|['A', 'B', 'C']->joinStrings('*')], ['legalName', 'employeesFirstName'])};
   let snowflakeSql = toSQLString($fn, meta::relational::tests::simpleRelationalMapping, meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LEGALNAME as "legalName", concat(\'A\', \'*\', \'B\', \'*\', \'C\') as "employeesFirstName" from firmTable as "root"', $snowflakeSql);
}

function <<test.Test>> meta::relational::tests::sqlToString::snowflake::simpleGroupByOnNumberColumnName():Boolean[1]
{
  let fn = {|Trade.all()
          ->project([t|$t.quantity, t|$t.product.name], ['quantity',  '90.01'])
          ->groupBy('90.01', agg('cnt', x|$x, y| $y->count()))};

 let snowflakeSql = toSQLString($fn, meta::relational::tests::simpleRelationalMapping, meta::relational::runtime::DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select "productTable_d#5_d#2_m2".NAME as "90.01", count(*) as "cnt" from tradeTable as "root" left outer join productSchema.productTable as "productTable_d#5_d#2_m2" on ("root".prodId = "productTable_d#5_d#2_m2".ID) group by "90.01"', $snowflakeSql);
}
