// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::extension::*;
import meta::pure::alloy::connections::alloy::authentication::*;
import meta::external::store::relational::runtime::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::metamodel::*;
import meta::relational::runtime::*;

function meta::relational::functions::sqlQueryToString::snowflake::buildDummyConnection():RelationalDatabaseConnection[1]
{
    ^RelationalDatabaseConnection
    (
        type = DatabaseType.Snowflake,
        datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::SnowflakeDatasourceSpecification(
                                    accountName = 'test',
                                    region = 'test',
                                    warehouseName = 'test',
                                    databaseName = 'test'
                                  ),
        authenticationStrategy = ^TestDatabaseAuthenticationStrategy()
    )
}

function meta::relational::functions::sqlQueryToString::snowflake::createView(createViewSQL:CreateViewSQL[1], dbConfig:DbConfig[1],  extensions:Extension[*]):String[1]
{
    'Create or Replace ' +
    if($createViewSQL.secure, |'SECURE ',|'') +
    'View ' +
    if($createViewSQL.schemaName->isEmpty(),|'',|$createViewSQL.schemaName->toOne() + '.') +
    $createViewSQL.name +
    if($createViewSQL.copyGrants, |' COPY GRANTS',|'') +
    ' as ' +
    $createViewSQL.generatedSQL +
    ';'
}

function meta::relational::functions::sqlQueryToString::snowflake::createProcedure(createProc:CreateProcedureSQL[1], dbConfig:DbConfig[1], extensions:Extension[*]):String[1]
{
    'CREATE OR REPLACE ' +
    if($createProc.secure, |'SECURE ',|'') +
    'PROCEDURE ' +
    if($createProc.schemaName->isEmpty(),|'',|$createProc.schemaName->toOne() + '.') +
    $createProc.name +
    +'('+ $createProc.parameters+ ')'+ 
    +'\nRETURNS TABLE('+ $createProc.return+ ')\nLANGUAGE SQL'+
    if($createProc.copyGrants, |' COPY GRANTS',|'') +
    '\nEXECUTE AS CALLER'+
    '\nAS $$\n' +
    ' DECLARE\n    ' +
    $createProc.declarations->map(v| $v.name+ ' '+ $v.type->toOne())->joinStrings('',';\n    ', ';') +
    '\n    finalResult RESULTSET;'+
    '\n BEGIN\n'+
    '   '+$createProc.declarations->map(v| $v->meta::relational::functions::sqlQueryToString::processOperation($dbConfig.dbType, $extensions))->joinStrings('',';\n   ',';') +
    '\n   finalResult := ('+ $createProc.generatedSQL+ ');'+
    '\n RETURN\n    TABLE(finalResult);'+
    '\n END\n'+
    '$$;'
}

function meta::relational::functions::sqlQueryToString::snowflake::createFunction(createFunc:CreateFunctionSQL[1], dbConfig:DbConfig[1], extensions:Extension[*]):String[1]
{
    'CREATE OR REPLACE ' +
    if($createFunc.secure, |'SECURE ',|'') +
    'Function ' +
    if($createFunc.schemaName->isEmpty(),|'',|$createFunc.schemaName->toOne() + '.') +
    $createFunc.name +
    +'('+ $createFunc.parameters+ ')\n'+ 
    if($createFunc.copyGrants, |'COPY GRANTS',|'') +
    +'\nRETURNS TABLE('+ $createFunc.return+ ')\n'+
    'LANGUAGE SQL'+
    '\nAS $$\n' +
     $createFunc.generatedSQL+
    ' $$;'
}
