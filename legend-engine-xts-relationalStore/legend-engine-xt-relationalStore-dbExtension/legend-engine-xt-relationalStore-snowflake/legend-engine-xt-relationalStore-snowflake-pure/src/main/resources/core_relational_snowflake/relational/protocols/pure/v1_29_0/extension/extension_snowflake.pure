// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function <<meta::protocols::pure::v1_29_0::extension::RelationalModule.SerializerExtension>>
meta::protocols::pure::v1_29_0::transformation::fromPureGraph::connection::snowflakeSerializerExtension(): meta::protocols::pure::v1_29_0::extension::RelationalModuleSerializerExtension[1]
{
  ^meta::protocols::pure::v1_29_0::extension::RelationalModuleSerializerExtension(
    module = 'snowflake',
    transfers_connection_transformAuthenticationStrategy = [
        s:meta::pure::alloy::connections::alloy::authentication::SnowflakePublicAuthenticationStrategy[1] |
                  ^meta::protocols::pure::v1_29_0::metamodel::store::relational::connection::alloy::authentication::SnowflakePublicAuthenticationStrategy(
                      _type = 'snowflakePublic',
                      privateKeyVaultReference = $s.privateKeyVaultReference,
                      passPhraseVaultReference = $s.passPhraseVaultReference,
                      publicUserName = $s.publicUserName
                  )
    ],
    transfers_connection_transformDatasourceSpecification = [
        s:meta::pure::alloy::connections::alloy::specification::SnowflakeDatasourceSpecification[1] |
                  ^meta::protocols::pure::v1_29_0::metamodel::store::relational::connection::alloy::specification::SnowflakeDatasourceSpecification(
                     _type = 'snowflake',
                     accountName = $s.accountName,
                     region = $s.region,
                     warehouseName = $s.warehouseName,
                     databaseName = $s.databaseName,
                     cloudType = $s.cloudType,
                     quotedIdentifiersIgnoreCase = $s.quotedIdentifiersIgnoreCase,
                     proxyHost = $s.proxyHost,
                     proxyPort = $s.proxyPort,
                     nonProxyHosts = $s.nonProxyHosts,
                     accountType = if($s.accountType->isEmpty(),|[],|$s.accountType->toOne()->toString()),
                     organization = $s.organization,
                     role = $s.role
                 )
    ],
    reverse_transfers_typeLookups = [
     pair('snowflake', 'SnowflakeDatasourceSpecification'),
     pair('snowflakePublic', 'SnowflakePublicAuthenticationStrategy')
    ],
    reverse_transfers_connection_transformAuthenticationStrategy = [
      s:meta::protocols::pure::v1_29_0::metamodel::store::relational::connection::alloy::authentication::SnowflakePublicAuthenticationStrategy[1] |
        ^meta::pure::alloy::connections::alloy::authentication::SnowflakePublicAuthenticationStrategy(
            privateKeyVaultReference = $s.privateKeyVaultReference,
            passPhraseVaultReference = $s.passPhraseVaultReference,
            publicUserName = $s.publicUserName
        )
    ],
    reverse_transfers_connection_transformDatasourceSpecification = [
    s:meta::protocols::pure::v1_29_0::metamodel::store::relational::connection::alloy::specification::SnowflakeDatasourceSpecification[1] |
            ^meta::pure::alloy::connections::alloy::specification::SnowflakeDatasourceSpecification(
                accountName = $s.accountName,
                region = $s.region,
                warehouseName = $s.warehouseName,
                databaseName = $s.databaseName,
                cloudType = $s.cloudType,
                quotedIdentifiersIgnoreCase = $s.quotedIdentifiersIgnoreCase,
                proxyHost = $s.proxyHost,
                proxyPort = $s.proxyPort,
                nonProxyHosts = $s.nonProxyHosts,
                accountType = if($s.accountType->isEmpty(),|[],
                                 |extractEnumValue(meta::pure::alloy::connections::alloy::specification::SnowflakeAccountType, $s.accountType->toOne())),
                organization = $s.organization,
                role = $s.role
            )
    ]
  )
}
