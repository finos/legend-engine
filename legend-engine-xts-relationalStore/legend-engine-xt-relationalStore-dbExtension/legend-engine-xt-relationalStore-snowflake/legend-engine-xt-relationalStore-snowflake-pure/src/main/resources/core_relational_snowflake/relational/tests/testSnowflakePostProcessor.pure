// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::math::olap::*;
import meta::relational::functions::asserts::*;
import meta::relational::mapping::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::relational::runtime::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::*;
import meta::relational::tests::postProcessor::*;
import meta::relational::metamodel::join::*;
import meta::relational::postProcessor::*;
import meta::relational::tests::postProcessor::nonExecutable::*;


function <<test.BeforePackage>> meta::relational::tests::postProcessor::snowflake::setUp():Boolean[1]
{
    createTablesAndFillDb();
}

function <<test.Test>> meta::relational::tests::postProcessor::snowflake::testSnowflakeColumnRename():Boolean[1]
{
   let runtime = ^meta::pure::runtime::Runtime(connections = ^TestDatabaseConnection(element = meta::relational::tests::mapping::union::myDB, type = DatabaseType.Snowflake));
   let result = meta::relational::functions::sqlstring::toSQL(|Person.all()->project([p|$p.lastName], ['name']), meta::relational::tests::mapping::union::unionMappingWithLongPropertyMapping, $runtime, meta::relational::extension::relationalExtensions()).sqlQueries->at(0)->cast(@SelectSQLQuery)->meta::relational::postProcessor::reAliasColumnName::trimColumnName($runtime).values->meta::relational::functions::sqlQueryToString::sqlQueryToString(DatabaseType.Snowflake, '', [], meta::relational::extension::relationalExtensions());
   assertEquals('select "unionBase"."concat_thisStringIsThisLongMakeTheGeneratedAliasExplodePastTheDb2limitOf128Characters_concat_ForTestPurposesOnly_PersonSet1lastName_s1_concat_thisStringIsThisLongMakeTheGeneratedAliasExplodePastTheDb2limitOf128Characters____6ce98e09e89aabde27805_0" as "name" from (select "root".ID as "pk_0_0", null as "pk_0_1", concat(\'thisStringIsThisLongMakeTheGeneratedAliasExplodePastTheDb2limitOf128Characters\', concat(\'ForTestPurposesOnly\', "root".lastName_s1)) as "concat_thisStringIsThisLongMakeTheGeneratedAliasExplodePastTheDb2limitOf128Characters_concat_ForTestPurposesOnly_PersonSet1lastName_s1_concat_thisStringIsThisLongMakeTheGeneratedAliasExplodePastTheDb2limitOf128Characters____6ce98e09e89aabde27805_0" from PersonSet1 as "root" UNION ALL select null as "pk_0_0", "root".ID as "pk_0_1", concat(\'thisStringIsThisLongMakeTheGeneratedAliasExplodePastTheDb2limitOf128Characters\', concat(\'ForTestPurposesOnly\', "root".lastName_s2)) as "concat_thisStringIsThisLongMakeTheGeneratedAliasExplodePastTheDb2limitOf128Characters_concat_ForTestPurposesOnly_PersonSet1lastName_s1_concat_thisStringIsThisLongMakeTheGeneratedAliasExplodePastTheDb2limitOf128Characters____6ce98e09e89aabde27805_0" from PersonSet2 as "root") as "unionBase"',$result);
}

function <<test.Test>> meta::relational::tests::postProcessor::snowflake::testPostProcessingOfGroupByAndHavingOp():Boolean[1]
{
   let runtime = testRuntime();
   let conn = $runtime.connections->at(0)->cast(@TestDatabaseConnection);
   let postProcessFunction = {rel: RelationalOperationElement[1] |
      $rel->match([
         t: TableAliasColumn[1] | if($t.column.type->instanceOf(meta::relational::metamodel::datatype::Varchar), | ^DynaFunction(name = 'toUpper', parameters = ^$t(column = $t.column->map(c | ^$c(type = ^meta::relational::metamodel::datatype::DataType())))), | $t),
         r: RelationalOperationElement[1] | $r
      ])
   };
   let runtimeWithPostProcessor = ^$runtime(connections = ^$conn(sqlQueryPostProcessors= [{query:meta::relational::metamodel::relation::SelectSQLQuery[1] | $query->meta::relational::postProcessor::postprocess($postProcessFunction)}]));

   let result = meta::relational::functions::sqlstring::toSQL(
      {|Trade.all()->groupBy([x|$x.product.name], [agg(x|$x.quantity, y|$y->sum())], ['ProductName', 'QuantitySum'])->filter(r | $r.getString('ProductName')->in(['ABC', 'DEF']))->sort(['ProductName'])},
      simpleRelationalMapping,
      $runtimeWithPostProcessor,
      meta::relational::extension::relationalExtensions()
   ).sqlQueries->at(0)->cast(@SelectSQLQuery)->meta::relational::functions::sqlQueryToString::sqlQueryToString(DatabaseType.Snowflake, '', [], meta::relational::extension::relationalExtensions());

   assertEquals('select upper("producttable_0".NAME) as "ProductName", sum("root".quantity) as "QuantitySum" from tradeTable as "root" left outer join productSchema.productTable as "producttable_0" on ("root".prodId = "producttable_0".ID) group by upper("producttable_0".NAME) having upper("producttable_0".NAME) in (\'ABC\', \'DEF\') order by "ProductName"', $result);
}

function <<test.Test>> meta::relational::tests::postProcessor::snowflake::testPostProcessingOfGroupByAndHavingOpCachedTransform():Boolean[1]
{
   let runtime = testRuntime();
   let conn = $runtime.connections->at(0)->cast(@TestDatabaseConnection);
   let postProcessFunction = {rel: RelationalOperationElement[1] |
      $rel->match([
         t: TableAliasColumn[1] | if($t.column.type->instanceOf(meta::relational::metamodel::datatype::Varchar), | ^DynaFunction(name = 'toUpper', parameters = ^$t(column = $t.column->map(c | ^$c(type = ^meta::relational::metamodel::datatype::DataType())))), | $t),
         r: RelationalOperationElement[1] | $r
      ])
   };
   let runtimeWithPostProcessor = ^$runtime(connections = ^$conn(sqlQueryPostProcessors= [{query:meta::relational::metamodel::relation::SelectSQLQuery[1] | ^meta::pure::mapping::Result<SelectSQLQuery|1>(values=$query->transform($postProcessFunction)->cast(@SelectSQLQuery))}]));

   let result = meta::relational::functions::sqlstring::toSQL(
      {|Trade.all()->groupBy([x|$x.product.name], [agg(x|$x.quantity, y|$y->sum())], ['ProductName', 'QuantitySum'])->filter(r | $r.getString('ProductName')->in(['ABC', 'DEF']))->sort(['ProductName'])},
      simpleRelationalMapping,
      $runtimeWithPostProcessor,
      meta::relational::extension::relationalExtensions()
   ).sqlQueries->at(0)->cast(@SelectSQLQuery)->meta::relational::functions::sqlQueryToString::sqlQueryToString(DatabaseType.Snowflake, '', [], meta::relational::extension::relationalExtensions());

   assertEquals('select upper("producttable_0".NAME) as "ProductName", sum("root".quantity) as "QuantitySum" from tradeTable as "root" left outer join productSchema.productTable as "producttable_0" on ("root".prodId = "producttable_0".ID) group by upper("producttable_0".NAME) having upper("producttable_0".NAME) in (\'ABC\', \'DEF\') order by "ProductName"', $result);
}
