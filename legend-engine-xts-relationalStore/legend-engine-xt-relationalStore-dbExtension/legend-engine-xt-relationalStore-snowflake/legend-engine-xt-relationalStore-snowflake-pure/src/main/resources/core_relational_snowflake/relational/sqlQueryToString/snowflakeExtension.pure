// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::pureToSqlQuery::metamodel::*;
import meta::relational::metamodel::join::*;
import meta::pure::alloy::connections::*;
import meta::external::store::relational::runtime::*;
import meta::relational::functions::sqlQueryToString::snowflake::*;
import meta::relational::functions::sqlQueryToString::default::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::metamodel::operation::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::*;
import meta::external::store::relational::runtime::*;
import meta::relational::runtime::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::pure::alloy::connections::alloy::specification::*;

function <<db.ExtensionLoader>> meta::relational::functions::sqlQueryToString::snowflake::dbExtensionLoaderForSnowflake():DbExtensionLoader[1]
{
  ^DbExtensionLoader(dbType = DatabaseType.Snowflake, loader = createDbExtensionForSnowflake__DbExtension_1_);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::createDbExtensionForSnowflake():DbExtension[1]
{
   let reservedWords = snowflakeReservedWords();
   let literalProcessors = getDefaultLiteralProcessors()->putAll(getLiteralProcessorsForSnowflake());
   let literalProcessor = {type:Type[1]| $literalProcessors->get(if($type->instanceOf(Enumeration), | Enum, | $type))->toOne()};
   let dynaFuncDispatch = getDynaFunctionToSqlDefault($literalProcessor)->groupBy(d| $d.funcName)->putAll(
     getDynaFunctionToSqlForSnowflake()->groupBy(d| $d.funcName))->getDynaFunctionDispatcher();

   ^DbExtension(
      isBooleanLiteralSupported = true,
      collectionThresholdLimit = 16348,
      extraTempTableCreationLogicSupplierForIn = {varName:String[1] | 'instanceOf(' + $varName + ', "StreamingResult")'},
      aliasLimit = 255,
      isDbReservedIdentifier = {str:String[1]| $str->toLower()->in($reservedWords)},
      literalProcessor = $literalProcessor,
      windowColumnProcessor = processWindowColumn_WindowColumn_1__SqlGenerationContext_1__String_1_,
      semiStructuredElementProcessor = processSemiStructuredElementForSnowflake_RelationalOperationElement_1__SqlGenerationContext_1__String_1_,
      tableFunctionParamProcessor = processTableFunctionParamPlaceHolder_RelationalOperationElement_1__SqlGenerationContext_1__String_1_,
      tabularFunctionProcessor = meta::relational::functions::sqlQueryToString::snowflake::tabularFunctionProcessor_String_1__String_1__String_1_,
      lateralJoinProcessor = processJoinTreeNodeWithLateralJoinForSnowflake_JoinTreeNode_1__DbConfig_1__Format_1__Extension_MANY__String_1_,
      joinProcessor = meta::relational::functions::sqlQueryToString::snowflake::processJoinForSnowflake_JoinTreeNode_1__DbConfig_1__Format_1__Extension_MANY__String_1_,
      joinStringsProcessor = processJoinStringsOperationForSnowflake_JoinStrings_1__SqlGenerationContext_1__String_1_,
      selectSQLQueryProcessor = processSelectSQLQueryForSnowflake_SelectSQLQuery_1__SqlGenerationContext_1__Boolean_1__String_1_,
      commonTableExpressionsProcessor = processCommonTableExpressionsProcessorDefault_CommonTableExpression_MANY__SqlGenerationContext_1__Boolean_1__String_1_,
      schemaIdentifierToString = meta::relational::functions::sqlQueryToString::snowflake::schemaIdentifierToString_String_1__DbConfig_1__String_1_,
      columnNameToIdentifier = columnNameToIdentifierDefault_String_1__DbConfig_1__String_1_,
      identifierProcessor = processIdentifierWithDoubleQuotes_String_1__DbConfig_1__String_1_,
      dynaFuncDispatch = $dynaFuncDispatch,
      preAndFinallyExecutionSQLQuery = preAndFinallyExecutionSQLQueryForSnowflake_DbConfig_1__DatabaseConnection_1__PreAndFinallyExecutionSQLQuery_MANY_,
      ddlCommandsTranslator = getDDLCommandsTranslator(),
      processTempTableName = processTempTableNameSnowflake_String_1__DatabaseConnection_1__String_1_
   );
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::processJoinForSnowflake(j:JoinTreeNode[1], dbConfig : DbConfig[1], format:Format[1], extensions:Extension[*]):String[1]
{
    $j.join->match(
      [
        join : AsOfJoin[1] | assert($join.operation->instanceOf(DynaFunction), |'Error the "asof join" operation is not a dynaFunction');
                             let dFunc = $join.operation->cast(@DynaFunction);
                             'asof join ' + $j.alias->map(a|^$a(name = '"' + $a.name + '"'))->toOne()->processOperation($dbConfig, $format->indent(), $extensions) +
                             $format.separator() +
                             if (
                                [
                                  pair(
                                    |['lessThan', 'lessThanEqual', 'greaterThan', 'greaterThanEqual']->contains($dFunc.name),
                                    |'MATCH_CONDITION (' + processOperation($dFunc, $dbConfig, $format->indent(), ^Config(), $extensions) + ')'
                                  ),
                                  pair(
                                    |$dFunc.name == 'and',
                                    |'MATCH_CONDITION (' + processOperation($dFunc.parameters->at(0), $dbConfig, $format->indent(), ^Config(), $extensions) + ')' +
                                     'ON ('+ processOperation($dFunc.parameters->at(1), $dbConfig, $format->indent(), ^Config(), $extensions) +')'
                                  )
                                ],
                                | fail('The operation '+$dFunc.name+' is not supported in asOf joins'); '';
                             );
                             ,
        join : Join[1] |
                $j.joinType->map(jt|$jt->processJoinType($dbConfig, $format, $extensions))->orElse('')
                        + $j.alias->map(a|^$a(name = '"' + $a.name + '"'))
                            ->toOne()->processOperation($dbConfig, $format->indent(), $extensions) + $format.separator()
                        + ' ' + 'on (' + processOperation($j.join.operation, $dbConfig, $format->indent(), ^Config(), $extensions) + ')'
      ]
    );
}

function meta::relational::functions::sqlQueryToString::snowflake::tabularFunctionProcessor(schema:String[1], functionName: String[1]):String[1]
{
   'table('+ if($schema=='', | $functionName,| $schema+'.'+$functionName) + '())';
}

function meta::relational::functions::sqlQueryToString::snowflake::schemaIdentifierToString(identifier:String[1], dbConfig: DbConfig[1]):String[1]
{
   $identifier->split('.')->map(s|$s->processIdentifierWithQuoteChar('"', $dbConfig))->joinStrings('.');
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::getLiteralProcessorsForSnowflake():Map<Type,LiteralProcessor>[1]
{
   newMap([
      pair(StrictDate, ^LiteralProcessor(format = '\'%s\'::date', transform = {d:StrictDate[1], dbTimeZone:String[0..1] | $d->convertDateToSqlString($dbTimeZone)})),
      pair(DateTime,   ^LiteralProcessor(format = '\'%s\'::timestamp', transform = {d:DateTime[1], dbTimeZone:String[0..1] | $d->convertDateToSqlString($dbTimeZone)})),
      pair(Date,       ^LiteralProcessor(format = '\'%s\'::timestamp', transform = {d:Date[1], dbTimeZone:String[0..1] | $d->convertDateToSqlString($dbTimeZone)})),
      pair(Boolean,    ^LiteralProcessor(format = '%s', transform = toString_Any_1__String_1_->literalTransform()))
   ])
}


function meta::relational::functions::sqlQueryToString::snowflake::getDDLCommandsTranslator(): RelationalDDLCommandsTranslator[1]
{
  ^RelationalDDLCommandsTranslator(
                createSchema = translateCreateSchemaStatementForSnowflake_CreateSchemaSQL_1__DbConfig_1__String_$0_1$_,
                dropSchema =  translateDropSchemaStatementDefault_DropSchemaSQL_1__DbConfig_1__String_1_,
                createTable = translateCreateTableStatementForSnowflake_CreateTableSQL_1__DbConfig_1__String_1_,
                dropTable = translateDropTableStatementForSnowflake_DropTableSQL_1__DbConfig_1__String_1_,
                loadTable = loadValuesToDbTableForSnowflake_LoadTableSQL_1__DbConfig_1__String_MANY_
              );
}

function meta::relational::functions::sqlQueryToString::snowflake::processTempTableNameSnowflake(tempTableName: String[1], dc: meta::external::store::relational::runtime::DatabaseConnection[1]): String[1]
{
   let dataSourceSpec = if($dc->instanceOf(RelationalDatabaseConnection),| $dc->cast(@RelationalDatabaseConnection).datasourceSpecification->cast(@SnowflakeDatasourceSpecification),| []);
   let dbConfig = meta::relational::functions::sqlQueryToString::createDbConfig($dc);

   if($dataSourceSpec->isNotEmpty() &&
      $dataSourceSpec.tempTableDb->isNotEmpty() &&
      $dataSourceSpec.tempTableSchema->isNotEmpty(),
   |
    $dbConfig.identifierProcessor($dataSourceSpec.tempTableDb->toOne()) + '.' + $dbConfig.identifierProcessor($dataSourceSpec.tempTableSchema->toOne()) + '.' + $dbConfig.identifierProcessor($tempTableName);,
   |
    assert($dataSourceSpec.tempTableDb->isEmpty() && $dataSourceSpec.tempTableSchema->isEmpty(), 'One of Database name and schema name for temp tables is missing. Please specify both.');
    $dbConfig.identifierProcessor('LEGEND_TEMP_DB') +'.' + $dbConfig.identifierProcessor('LEGEND_TEMP_SCHEMA') + '.' + $dbConfig.identifierProcessor($tempTableName);
   );
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::translateCreateSchemaStatementForSnowflake(createSchemaSQL:CreateSchemaSQL[1], dbConfig:DbConfig[1]) : String[0..1]
{
   if($createSchemaSQL.schema.name == 'default', 
    | [], 
    | 'Create Schema if not exists ' + $createSchemaSQL.schema.name);
}

function meta::relational::functions::sqlQueryToString::snowflake::translateCreateTableStatementForSnowflake(c:CreateTableSQL[1], dbConfig: DbConfig[1]): String[1]
{
   if($c.isTempTable->isTrue(),| 'CREATE TEMPORARY TABLE ' + $c.table->tableToString($dbConfig) + '('+ $c.table.columns->map(r|$r->match([c:Column[1]| $c.name->processColumnName($dbConfig) + ' ' + getColumnTypeSqlTextDefault($c.type),
                                                                                                                                          r:RelationalOperationElement[1]| fail('Only \'Column\' types are supported when creating temporary tables, found: '+$r->type()->toOne()->elementToPath());'';]))->joinStrings(',') + ');'
                              ,| $c->meta::relational::functions::sqlQueryToString::default::translateCreateTableStatementDefault($dbConfig))

}

function meta::relational::functions::sqlQueryToString::snowflake::loadValuesToDbTableForSnowflake(l:LoadTableSQL[1], dbConfig: DbConfig[1]): String[*]
{
  if($l.absolutePathToFile->isNotEmpty(),|
                                 let createStage = 'CREATE OR REPLACE TEMPORARY STAGE LEGEND_TEMP_DB.LEGEND_TEMP_SCHEMA.LEGEND_TEMP_STAGE';
                                 let loadTempTableCommand = 'PUT file://'+$l.absolutePathToFile->toOne()->processOperation($dbConfig.dbType, []) + ' @LEGEND_TEMP_DB.LEGEND_TEMP_SCHEMA.LEGEND_TEMP_STAGE' + $l.absolutePathToFile->toOne()->processOperation($dbConfig.dbType, []) +  ' PARALLEL= 16 AUTO_COMPRESS=TRUE;';
                                 let copyIntoCommand = 'COPY INTO ' + $l.table->tableToString($dbConfig)->toOne() + ' FROM @LEGEND_TEMP_DB.LEGEND_TEMP_SCHEMA.LEGEND_TEMP_STAGE' + $l.absolutePathToFile->toOne()->processOperation($dbConfig.dbType, []) + ' file_format = (type= CSV field_optionally_enclosed_by= \'"\');';
                                 let dropStage = 'DROP STAGE LEGEND_TEMP_DB.LEGEND_TEMP_SCHEMA.LEGEND_TEMP_STAGE';
                                 [$createStage, $loadTempTableCommand, $copyIntoCommand, $dropStage];
                              ,| $l->meta::relational::functions::sqlQueryToString::default::loadValuesToDbTableDefault($dbConfig))
}

function meta::relational::functions::sqlQueryToString::snowflake::translateDropTableStatementForSnowflake(d:DropTableSQL[1], dbConfig: DbConfig[1]) : String[1]
{
  'Drop table if exists ' + $d.table->tableToString($dbConfig) + ';';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::getDynaFunctionToSqlForSnowflake(): DynaFunctionToSql[*]
{
  let allStates = allGenerationStates();

  [
    dynaFnToSql('adjust',                 $allStates,            ^ToSql(format='dateadd(%s)', transform={p:String[3] | $p->at(2)->mapToDBUnitType() + ', ' + $p->at(1) + ', ' + $p->at(0)})),
    dynaFnToSql('booland',                $allStates,            ^ToSql(format='booland(%s)')),
    dynaFnToSql('boolor',                 $allStates,            ^ToSql(format='boolor(%s)')),    
    dynaFnToSql('ceiling',                $allStates,            ^ToSql(format='ceil(%s)')),
    dynaFnToSql('concat',                 $allStates,            ^ToSql(format='concat%s', transform={p:String[*]|$p->joinStrings('(', ', ', ')')})),
    dynaFnToSql('convertDate',            $allStates,            ^ToSql(format='%s', transform={p:String[*] | $p->convertToDateSnowflake()})),
    dynaFnToSql('convertDateTime',        $allStates,            ^ToSql(format='%s' , transform={p:String[*] | $p->convertToDateTimeSnowflake()})),
    dynaFnToSql('convertVarchar128',      $allStates,            ^ToSql(format='to_char(%s)')),
    dynaFnToSql('contains',               $allStates,            ^ToSql(format='contains(%s,%s)', transform={p:String[2]|$p})),
    dynaFnToSql('dateDiff',               $allStates,            ^ToSql(format='datediff(%s,%s,%s)', transform={p:String[*]|[$p->at(2)->replace('\'', '')->processDateDiffDurationUnitForSnowflake(),$p->at(0),$p->at(1)]})),
    dynaFnToSql('datePart',               $allStates,            ^ToSql(format='Date(%s)')),
    dynaFnToSql('dayOfMonth',             $allStates,            ^ToSql(format='DAYOFMONTH(%s)')),
    dynaFnToSql('dayOfWeek',              $allStates,            ^ToSql(format='to_char(%s, \'DYDY\')')),
    dynaFnToSql('dayOfWeekNumber',        $allStates,            ^ToSql(format='DAYOFWEEKISO(%s)')),
    dynaFnToSql('dayOfYear',              $allStates,            ^ToSql(format='DAYOFYEAR(%s)')),
    dynaFnToSql('endsWith',               $allStates,            ^ToSql(format='endswith(%s,%s)', transform={p:String[2]|$p})),
    dynaFnToSql('decodeBase64',           $allStates,            ^ToSql(format='BASE64_DECODE_STRING(%s)')),
    dynaFnToSql('encodeBase64',           $allStates,            ^ToSql(format='BASE64_ENCODE(%s)')),
    dynaFnToSql('extractFromSemiStructured', $allStates,         ^ToSql(format='%s', transform={p:String[3]|$p->processExtractFromSemiStructuredParamsForSnowflake()})),
    dynaFnToSql('firstDayOfMonth',        $allStates,            ^ToSql(format='DATE_TRUNC(\'MONTH\', %s)')),
    dynaFnToSql('firstDayOfQuarter',      $allStates,            ^ToSql(format='DATE_TRUNC(\'QUARTER\', %s)')),
    dynaFnToSql('firstDayOfThisMonth',    $allStates,            ^ToSql(format='DATE_TRUNC(\'MONTH\', CURRENT_DATE)%s', transform={p:String[*] | ''})),
    dynaFnToSql('firstDayOfThisQuarter',  $allStates,            ^ToSql(format='DATE_TRUNC(\'QUARTER\', CURRENT_DATE)%s', transform={p:String[*] | ''})),
    dynaFnToSql('firstDayOfThisYear',     $allStates,            ^ToSql(format='DATE_TRUNC(\'YEAR\', CURRENT_DATE)%s', transform={p:String[*] | ''})),
    dynaFnToSql('firstDayOfWeek',         $allStates,            ^ToSql(format='DATE_TRUNC(\'WEEK\', %s)')),
    dynaFnToSql('firstDayOfYear',         $allStates,            ^ToSql(format='DATE_TRUNC(\'YEAR\', %s)')),
    dynaFnToSql('firstHourOfDay',         $allStates,            ^ToSql(format='DATE_TRUNC(\'DAY\', %s)')),
    dynaFnToSql('firstMillisecondOfSecond', $allStates,          ^ToSql(format='DATE_TRUNC(\'SECOND\', %s)')),
    dynaFnToSql('firstMinuteOfHour',      $allStates,            ^ToSql(format='DATE_TRUNC(\'HOUR\', %s)')),
    dynaFnToSql('firstSecondOfMinute',    $allStates,            ^ToSql(format='DATE_TRUNC(\'MINUTE\', %s)')),
    dynaFnToSql('hour',                   $allStates,            ^ToSql(format='date_part(\'hour\', %s)')),
    dynaFnToSql('indexOf',                $allStates,            ^ToSql(format='CHARINDEX(%s)', transform={p:String[2] | $p->at(1) + ', ' + $p->at(0)})),
    dynaFnToSql('isAlphaNumeric',         $allStates,            ^ToSql(format=regexpPattern('%s'), transform={p:String[1]|$p->transformAlphaNumericParamsDefault()})),
    dynaFnToSql('jaroWinklerSimilarity',  $allStates,            ^ToSql(format='(jarowinkler_similarity(%s, %s)/100)')),
    dynaFnToSql('joinStrings',            $allStates,            ^ToSql(format='listagg(%s, %s)')),
    dynaFnToSql('log10',                  $allStates,            ^ToSql(format='log(10, %s)')),
    dynaFnToSql('length',                 $allStates,            ^ToSql(format='length(%s)')),
    dynaFnToSql('levenshteinDistance',    $allStates,            ^ToSql(format='editdistance(%s, %s)')),
    dynaFnToSql('matches',                $allStates,            ^ToSql(format=regexpPattern('%s'), transform={p:String[2]|$p->transformRegexpParams()})),
    dynaFnToSql('minute',                 $allStates,            ^ToSql(format='minute(%s)')),
    dynaFnToSql('month',                  $allStates,            ^ToSql(format='MONTH(%s)')),
    dynaFnToSql('monthName',              $allStates,            ^ToSql(format='to_char(%s, \'MMMM\')')),
    dynaFnToSql('monthNumber',            $allStates,            ^ToSql(format='MONTH(%s)')),
    dynaFnToSql('mostRecentDayOfWeek',    $allStates,            ^ToSql(format='DATE_TRUNC(\'WEEK\', CURRENT_DATE)%s', transform={p:String[*] | ''})),
    dynaFnToSql('now',                    $allStates,            ^ToSql(format='current_timestamp')),
    dynaFnToSql('parseDate',              $allStates,            ^ToSql(format='%s', transform={p:String[*] | $p->convertToDateSnowflake()})),
    dynaFnToSql('parseFloat',             $allStates,            ^ToSql(format='cast(%s as float)')),
    dynaFnToSql('parseInteger',           $allStates,            ^ToSql(format='cast(%s as integer)')),
    dynaFnToSql('parseJson',              $allStates,            ^ToSql(format='parse_json(%s)')),
    dynaFnToSql('parseBoolean',           $allStates,            ^ToSql(format='to_boolean(%s)')),
    dynaFnToSql('position',               $allStates,            ^ToSql(format='position(%s in %s)')),
    dynaFnToSql('previousDayOfWeek',      $allStates,            ^ToSql(format='dateadd(DAY, case when %s - DAYOFWEEK(%s) +1  >= 0 then %s  - DAYOFWEEK(%s) -1 - 7 else %s - DAYOFWEEK(%s) -1 end, %s)', transform={p:String[1..2] | $p->formatMostRecentSnowflake('current_date')}, parametersWithinWhenClause = [false, false])),
    dynaFnToSql('quarter',                $allStates,            ^ToSql(format='quarter(%s)')),
    dynaFnToSql('quarterNumber',          $allStates,            ^ToSql(format='quarter(%s)')),
    dynaFnToSql('round',                  $allStates,            ^ToSql(format='round(%s, %s)', transform=transformRound_String_MANY__String_MANY_)),
    dynaFnToSql('startsWith',             $allStates,            ^ToSql(format='startswith(%s,%s)', transform={p:String[2]|$p})),
    dynaFnToSql('second',                 $allStates,            ^ToSql(format='second(%s)')),
    dynaFnToSql('sha256',                 $allStates,            ^ToSql(format='sha2(%s, 256)')),
    dynaFnToSql('substring',              $allStates,            ^ToSql(format='substring%s', transform={p:String[*]|$p->joinStrings('(', ', ', ')')})),
    dynaFnToSql('stdDevPopulation',       $allStates,            ^ToSql(format='stddev_pop(%s)')),
    dynaFnToSql('stdDevSample',           $allStates,            ^ToSql(format='stddev_samp(%s)')),
    dynaFnToSql('today',                  $allStates,            ^ToSql(format='current_date')),
    dynaFnToSql('toDecimal',              $allStates,            ^ToSql(format='to_decimal(%s)')),
    dynaFnToSql('toFloat',                $allStates,            ^ToSql(format='to_double(%s)')),
    dynaFnToSql('toString',               $allStates,            ^ToSql(format='cast(%s as varchar)')),
    dynaFnToSql('toTimestamp',            $allStates,            ^ToSql(format='%s' , transform={p:String[2] | $p->transformToTimestampSnowflake()})),
    dynaFnToSql('weekOfYear',             $allStates,            ^ToSql(format='WEEKOFYEAR(%s)')),
    dynaFnToSql('year',                   $allStates,            ^ToSql(format='year(%s)')),
    dynaFnToSql('convertTimeZone',            $allStates,           ^ToSql(format='%s', contextAwareTransform={p:String[3],s:SqlGenerationContext[1] | $p->transformConvertTimeZone($s)}))



  ];
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::processExtractFromSemiStructuredParamsForSnowflake(params:String[3]):String[1]
{
  let baseRelationalOp = $params->at(0);
  let pathNavigation = $params->at(1);
  let returnType = $params->at(2);

  // https://docs.snowflake.com/en/sql-reference/functions/get_path
  let elementAccess = format('get_path(%s, \'%s\')', [$baseRelationalOp, $pathNavigation]);

  if ($returnType->in(['CHAR', 'VARCHAR', 'STRING']), | 'to_varchar(' + $elementAccess + ')', |
  if ($returnType->in(['DATETIME', 'TIMESTAMP']), | 'to_timestamp(' + $elementAccess + ')', |
  if ($returnType == 'DATE', | 'to_date(' + $elementAccess + ')', |
  if ($returnType == 'BOOLEAN', | 'to_boolean(' + $elementAccess + ')', |
  if ($returnType == 'FLOAT', | 'to_double(' + $elementAccess + ')', |
  if ($returnType == 'INTEGER', | 'to_number(' + $elementAccess + ')', |
  $elementAccess))))));
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::convertToDateSnowflake(params:String[*]):String[1]
{
   assert(2 - $params->size()  >= 0,'Incorrect number of parameters for convertDate: convertDate(column,[dateformat])');
   assert($params->size()==1 || dateFormatsSnowFlake()->contains($params->at(1)->replace('\'', '')) , | $params->at(1) +' not supported ');
   let dateFormat = if( $params->size() == 1 ,|'\'YYYY-MM-DD\'',
                                              |//DDMMMYYYY is the same format as DDMONYYYY aligned with SybaseIQ, need to be removed and find better way for format translation
                                               if($params->at(1) == '\'ddMMMyyyy\'',| '\'ddMONyyyy\'',| $params->at(1));
                                              );
   //https://docs.snowflake.net/manuals/sql-reference/data-types-datetime.html
   'to_date('+$params->at(0)+','+$dateFormat +')';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::convertToDateTimeSnowflake(params:String[*]):String[1]
{
   assert(2 - $params->size()  >= 0,'Incorrect number of parameters for convertDateTime: convertDateTime(column,[dateTimeformat])');
   let supportedDateTimeFormat = if($params->size() == 2, |dateTimeFormatsSnowFlake()->get($params->at(1)->replace('\'', '')), |[]);
   assert($params->size() == 1 || $supportedDateTimeFormat->size() == 1 , | $params->at(1) +' not supported ');
   let dateTimeFormat = if( $params->size() == 1,|'\'YYYY-MM-DD HH24:MI:SS\'',| $params->at(1));
   //https://docs.snowflake.net/manuals/sql-reference/data-types-datetime.html
   'to_timestamp('+$params->at(0)+','+$dateTimeFormat +')';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::transformToTimestampSnowflake(params:String[2]):String[1]
{
  //Standardizing the format as per Postgres specification, will include mappings for the formats in future.
   assert($params->at(1)->replace('\'', '') == 'YYYY-MM-DD HH24:MI:SS', | $params->at(1) +' not supported ');
   let timestampFormat = $params->at(1);
   'to_timestamp('+$params->at(0)+','+$timestampFormat+')';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::dateFormatsSnowFlake():String[*]
{
   ['yyyy-MM-dd', 'MMMyyyy', 'yyyyMMdd', 'ddMMMyyyy', 'ddMONyyyy', 'DD/MM/YYYY', 'YYYY/MM/DD'];
}


function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::dateTimeFormatsSnowFlake():Map<String,Integer>[1]
{
   newMap([pair('yyyy-mm-dd hh:mi:ss',120),
           pair('yyyy-MM-dd hh:mm:ss',120),
           pair('yyyy-MM-dd hh:mm:ss.mmm',121),
           pair('YYYY-MM-DDTHH:MI:SS',120),
           pair('YYYY-MM-DDTHH:MI:SS.FF', 121)]);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::processDateDiffDurationUnitForSnowflake(durationUnit:String[1]):String[1]
{
   let durationEnumNames = [DurationUnit.YEARS,DurationUnit.MONTHS,DurationUnit.WEEKS,DurationUnit.DAYS,DurationUnit.HOURS,DurationUnit.MINUTES,DurationUnit.SECONDS,DurationUnit.MILLISECONDS]->map(e|$e->toString());
   let durationDbNames = ['year', 'month', 'week', 'day', 'hour', 'minute', 'second','millisecond'];
   $durationEnumNames->zip($durationDbNames)->filter(h | $h.first == $durationUnit).second->toOne();
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::formatMostRecentSnowflake(p:String[1..2], defaultDay:String[1]):String[*]
{
   let day = $p->last()->toOne()->mapToDBDayOfWeekNumber()->toString();
   let current = if ($p->size() == 2, | $p->first()->toOne(), | $defaultDay);
   [$day, $current, $day, $current, $day, $current, $current];
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::processSemiStructuredElementForSnowflake(s:RelationalOperationElement[1], sgc:SqlGenerationContext[1]): String[1]
{
   $s->match([
      o:SemiStructuredObjectNavigation[1] | $o->processSemiStructuredObjectNavigationForSnowflake($sgc),
      a:SemiStructuredArrayFlatten[1] | $a->processSemiStructuredArrayFlattenForSnowflake($sgc),
      a:SemiStructuredArrayFlattenOutput[1] | $a->processSemiStructuredArrayFlattenOutputForSnowflake($sgc)
   ])
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::processTableFunctionParamPlaceHolder(r:RelationalOperationElement[1], sgc: SqlGenerationContext[1]): String[1]
{
  assert($r->instanceOf(TableFunctionParamPlaceHolder), 'sqlQueryToString for relational element ' + $r->type().name->toOne() + ' has not been implemented yet for snowflake');
  $r->match([
    t: TableFunctionParamPlaceHolder[1] | $t.var->replaceVarPlaceHolderForAppGeneration($sgc)
  ]);
}

function <<access.private>>  meta::relational::functions::sqlQueryToString::snowflake::replaceVarPlaceHolderForAppGeneration(v:VarPlaceHolder[1], sgc:SqlGenerationContext[1]): String[1]
{
  assertEmpty($v.propertyPath, 'processing for variable with propertyPath access is not implemented');
  assertFalse($v->isCollectionPlaceHolder() || $v->isOptionalPlaceHolder(), 'only variables of multiplicity one can be used');

  $v.name;
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::processSemiStructuredObjectNavigationForSnowflake(s:SemiStructuredObjectNavigation[1], sgc:SqlGenerationContext[1]): String[1]
{
   // https://docs.snowflake.com/en/user-guide/querying-semistructured.html

   let processedOperand = $s.operand->processOperation($sgc);

   let elementAccess = $processedOperand + $s->match([
      p: SemiStructuredPropertyAccess[1]     | '[\'' + $p.property->cast(@Literal).value->cast(@String) + '\']' + if($p.index->isEmpty(),|'',|'['+ $p.index->toOne()->cast(@Literal).value->toString()+']'),
      a: SemiStructuredArrayElementAccess[1] | '[' + $a.index->cast(@Literal).value->toString() + ']'
   ]);

   if($s.avoidCastIfPrimitive == true, | $elementAccess, | $elementAccess + castSuffixForSnowflakeSemiStructuredData($s.returnType));
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::processSemiStructuredArrayFlattenForSnowflake(s:SemiStructuredArrayFlatten[1], sgc:SqlGenerationContext[1]): String[1]
{
   // https://docs.snowflake.com/en/sql-reference/functions/flatten.html

   let processedNavigation = $s.navigation->processOperation($sgc);
   'flatten(input => ' + $processedNavigation + ', outer => true, recursive => false, mode => \'array\')';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::processSemiStructuredArrayFlattenOutputForSnowflake(s:SemiStructuredArrayFlattenOutput[1], sgc:SqlGenerationContext[1]): String[1]
{
   // https://docs.snowflake.com/en/sql-reference/functions/flatten.html

   let doubleQuote = if($sgc.config.useQuotesForTableAliasColumn == false, |'', |'"');
   let processedIdentifier = $sgc.dbConfig.identifierProcessor($doubleQuote + $s.tableAliasColumn.alias.name->toOne() + $doubleQuote);
   $processedIdentifier + '.' + processColumnName('VALUE', $sgc.dbConfig) + castSuffixForSnowflakeSemiStructuredData($s.returnType);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::castSuffixForSnowflakeSemiStructuredData(type:Type[0..1]): String[1]
{
   if($type == String, | '::varchar', |
   if($type == StrictDate, | '::date', |
   if($type == Integer, | '::number', |
   if($type == Float, | '::float', |
   if($type == Boolean, | '::boolean', |
   if($type->isNotEmpty() && $type->toOne()->_subTypeOf(Date), | '::timestamp', |
   if($type->isNotEmpty() && $type->toOne()->instanceOf(Enumeration), | '::varchar', |
   '')))))));
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::processJoinStringsOperationForSnowflake(js:JoinStrings[1], sgc:SqlGenerationContext[1]): String[1]
{
   processJoinStringsOperation($js, $sgc, {col, sep| 'listagg(' + $col + if($sep == '\'\'', |'', |', ' + $sep) + ')'},
    {strs, sep| $strs->joinStrings('concat(', if('\'\'' == $sep, |', ', |', ' + $sep + ', ') , ')')});
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::processSelectSQLQueryForSnowflake(s:SelectSQLQuery[1], sgc:SqlGenerationContext[1], isSubSelect:Boolean[1]):String[1]
{
   $s->processSelectSQLQueryForSnowflake($sgc.dbConfig, $sgc.format, $sgc.config, $isSubSelect, $sgc.extensions);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::processSelectSQLQueryForSnowflake(s:SelectSQLQuery[1], dbConfig : DbConfig[1], format:Format[1], config:Config[1], isSubSelect : Boolean[1], extensions:Extension[*]):String[1]
{
  assertEmpty($s.pivot, 'pivot is not supported');
  let opStr = if($s.filteringOperation->isEmpty(), |'', |$s.filteringOperation->map(s|$s->processOperation($dbConfig, $format->indent(), ^$config(callingFromFilter = true), $extensions))->filter(s|$s != '')->joinStrings(' <||> '));
  let havingStr = if($s.havingOperation->isEmpty(), |'', |$s.havingOperation->map(s|$s->processOperation($dbConfig, $format->indent(), $config, $extensions))->filter(s|$s != '')->joinStrings(' <||> '));

  $format.separator + 'select ' + if($s.distinct == true,|'distinct ',|'') +
  processSelectColumns($s.columns, $dbConfig, $format->indent(), true, $extensions) +
  if($s.data == [],|'',| ' ' + $format.separator + 'from ' + $s.data->toOne()->processJoinTreeNode([], $dbConfig, $format->indent(), [], $extensions)) +
  if (eq($opStr, ''), |'', | ' ' + $format.separator + 'where ' + $opStr) +
  if ($s.groupBy->isEmpty(),|'',| ' ' + $format.separator + 'group by '+$s.groupBy->processGroupByColumns($dbConfig, $format->indent(), true, $extensions)->makeString(','))+
  if (eq($havingStr, ''), |'', | ' ' + $format.separator + 'having ' + $havingStr) +
  if ($s.orderBy->isEmpty(),|'',| ' ' + $format.separator + 'order by '+ $s.orderBy->processOrderBy($dbConfig, $format->indent(), $config, $extensions)->makeString(','))+
  + processLimit($s, $dbConfig, $format, $extensions, processTakeDefault_SelectSQLQuery_1__Format_1__DbConfig_1__Extension_MANY__String_1_, processSliceOrDropForSnowflake_SelectSQLQuery_1__Format_1__DbConfig_1__Extension_MANY__Any_1__String_1_);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::processJoinTreeNodeWithLateralJoinForSnowflake(j:JoinTreeNode[1], dbConfig : DbConfig[1], format:Format[1], extensions:Extension[*]):String[1]
{
   // https://docs.snowflake.com/release-notes/bcr-bundles/2023_04/bcr-1057
   assert(processOperation($j.join.operation, $dbConfig, $format->indent(), ^Config(), $extensions) == '1 = 1', | 'Filter in column projections is not supported. Use a Post Filter if filtering is necessary');

   assert($j.alias.relationalElement->instanceOf(SemiStructuredArrayFlatten), | 'Lateral join in Snowflake should be followed by flatten operation');

   // https://docs.snowflake.com/en/sql-reference/constructs/join-lateral#usage-notes
   ' ' + $format.separator() + 'inner join lateral '
   + $j.alias
         ->map(a|^$a(name = '"' + $a.name + '"'))
         ->toOne()->processOperation($dbConfig, $format->indent(), $extensions) + $format.separator();
}

function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::processSliceOrDropForSnowflake(s:SelectSQLQuery[1], format:Format[1],dbConfig : DbConfig[1], extensions:Extension[*], size:Any[1]):String[1]
{
   if ($s.fromRow->isNotEmpty(),
       | if ($size == -1,
             | '%s limit \'\' offset %s'->format([$format.separator, $s.fromRow->toOne()->getValueForTake($format, $dbConfig, $extensions)]),
             | '%s limit %s offset %s'->format([$format.separator, $size, $s.fromRow->toOne()->getValueForTake($format, $dbConfig, $extensions)])),
       | '%s limit %s'->format($size));
}

function meta::relational::functions::sqlQueryToString::snowflake::preAndFinallyExecutionSQLQueryForSnowflake(dbConfig:DbConfig[1], dc: DatabaseConnection[1]): meta::relational::mapping::PreAndFinallyExecutionSQLQuery[*]
{
  if(!($dc->instanceOf(RelationalDatabaseConnection) && $dc->cast(@RelationalDatabaseConnection).datasourceSpecification->instanceOf(SnowflakeDatasourceSpecification) && $dc->cast(@RelationalDatabaseConnection).datasourceSpecification->cast(@SnowflakeDatasourceSpecification).enableQueryTags == false),
    | let set = ^AlterSQL(object = ^Session(), operation = [^SetOperation(propertyName = 'QUERY_TAG', propertyValue = ^Literal(value = '{"executionTraceID" : "${execID}", "engineUser" : "${userId}", "referer" : "${referer}"}'))]);
      let setSQL =  $set.object->match([
                          s:Session[1] | 'ALTER SESSION SET ' + $set.operation->map(o | $o->cast(@SetOperation).propertyName + ' = ' + $o->cast(@SetOperation).propertyValue.value->processLiteralValue($dbConfig))->makeString('',', ', ';')
                      ]);

      let unset = ^AlterSQL(object = ^Session(), operation = [^UnSetOperation(propertyName = 'QUERY_TAG')]);
      let unsetSQL =  $unset.object->match([
                          s:Session[1] | 'ALTER SESSION UNSET ' + $unset.operation->map(o | $o->cast(@UnSetOperation).propertyName)->makeString('',', ', ';')
                      ]);

      ^meta::relational::mapping::PreAndFinallyExecutionSQLQuery(preQueryExecutionSQLQuery = $setSQL, finallyQueryExecutionSQLQuery = $unsetSQL);,
    | []
  );
}


function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::transformConvertTimeZone(params:String[3],context:SqlGenerationContext[1]):String[1]
{
  //https://docs.snowflake.com/en/sql-reference/functions/convert_timezone
  let unWrappedfmt =  $params->at(2)->substring(1, $params->at(2)->length()-1);
  assert($unWrappedfmt->validateDateTimeFormat(),'Found an invalid date format');
  let formatpairs = meta::relational::functions::sqlQueryToString::default::defaultJavaToSQLTimeParts();
  let format = $formatpairs->fold( {sub, date|  $date->toOne()->replace($sub.first,$sub.second)},$params->at(2));
  format('TO_CHAR(CONVERT_TIMEZONE(%s,%s),%s)',[$params->at(1),$params->at(0),$format]);
}





function <<access.private>> meta::relational::functions::sqlQueryToString::snowflake::snowflakeReservedWords():String[*]
{
  // Based on https://docs.snowflake.com/en/sql-reference/reserved-keywords
  [
    'alter',
    'and',
    'any',
    'as',
    'between',
    'by',
    'case',
    'cast',
    'check',
    'column',
    'connect',
    'constraint',
    'create',
    'cross',
    'current',
    'current_date',
    'current_time',
    'current_timestamp',
    'current_user',
    'database',
    'delete',
    'distinct',
    'drop',
    'else',
    'exists',
    'false',
    'following',
    'for',
    'from',
    'full',
    'grant',
    'group',
    'having',
    'ilike',
    'in',
    'increment',
    'inner',
    'insert',
    'intersect',
    'into',
    'is',
    'join',
    'lateral',
    'left',
    'like',
    'localtime',
    'localtimestamp',
    'minus',
    'natural',
    'not',
    'null',
    'of',
    'on',
    'or',
    'order',
    'qualify',
    'regexp',
    'revoke',
    'right',
    'rlike',
    'row',
    'rows',
    'sample',
    'select',
    'set',
    'some',
    'start',
    'table',
    'tablesample',
    'then',
    'to',
    'trigger',
    'true',
    'try_cast',
    'union',
    'unique',
    'update',
    'using',
    'values',
    'when',
    'whenever',
    'where',
    'with'
  ]
}

