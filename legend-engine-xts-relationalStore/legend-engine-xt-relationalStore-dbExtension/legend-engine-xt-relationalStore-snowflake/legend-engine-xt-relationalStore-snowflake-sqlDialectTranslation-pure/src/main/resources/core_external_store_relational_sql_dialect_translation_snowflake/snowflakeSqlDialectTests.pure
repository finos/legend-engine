// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::query::sql::metamodel::extension::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::snowflake::*;
import meta::external::store::relational::sqlDialectTranslation::snowflake::tests::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::typeInference::*;

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::snowflake::tests::testDialect(): SqlDialect[1]
{
  snowflakeSqlDialect()
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::snowflake::tests::testSqlDialectTranslationState(): SqlDialectTranslationState[1]
{
  ^SqlDialectTranslationState
  (
    level = 0
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::snowflake::tests::testSqlDialectTranslationConfig(pretty: Boolean[1]): SqlDialectTranslationConfig[1]
{
  meta::external::store::relational::sqlDialectTranslation::snowflake::tests::testSqlDialectTranslationConfig($pretty, false)
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::snowflake::tests::testSqlDialectTranslationConfig(pretty: Boolean[1], quoteIdentifiers: Boolean[1]): SqlDialectTranslationConfig[1]
{
  meta::external::store::relational::sqlDialectTranslation::snowflake::tests::testSqlDialectTranslationConfig($pretty, $quoteIdentifiers, []);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::snowflake::tests::testSqlDialectTranslationConfig(pretty: Boolean[1], quoteIdentifiers: Boolean[1], dbTimeZone:String[0..1]): SqlDialectTranslationConfig[1]
{
  ^SqlDialectTranslationConfig
  (
    dbConfig = ^DbConfig(dbType = 'H2', dbTimeZone = $dbTimeZone,      quoteIdentifiers = $quoteIdentifiers),
    formatConfig = ^FormatConfig(pretty = $pretty, upperCaseKeywords = true),
    functionRegistry = meta::external::store::relational::sqlDialectTranslation::functionRegistry::sqlFunctionRegistry()
  )
}

function <<test.Test>> meta::external::store::relational::sqlDialectTranslation::snowflake::tests::testQualifyQueryProcessingForSnowflake(): Boolean[1]
{
  let dialect = testDialect();
  let state = testSqlDialectTranslationState();
  let config = testSqlDialectTranslationConfig(false);

  assertEquals('SELECT dept, sum(id) OVER (PARTITION BY dept) AS sumCol FROM testTable QUALIFY sum(id) OVER (PARTITION BY dept) > 3', $dialect->executeNodeProcessor(
    ^Query(
      queryBody = ^ExtendedQuerySpecification(
        select = ^Select(
          distinct = false,
          selectItems = [
            ^SingleColumn(expression = ^QualifiedNameReference(name = ^QualifiedName(parts = 'dept'))),
            ^SingleColumn(
              expression = ^FunctionCall(
                arguments = ^QualifiedNameReference(name = ^QualifiedName(parts = 'id')),
                distinct = false,
                name = ^QualifiedName(parts = 'sum'),
                window = ^meta::external::query::sql::metamodel::Window(partitions = ^QualifiedNameReference(name = ^QualifiedName(parts = 'dept')))
              ),
              alias = 'sumCol'
            )
        ]),
        from = ^Table(name = ^QualifiedName(parts = 'testTable')),
        qualify = ^ComparisonExpression(
          left = ^FunctionCall(
            arguments = ^QualifiedNameReference(name = ^QualifiedName(parts = 'id')),
            distinct = false,
            name = ^QualifiedName(parts = 'sum'),
            window = ^meta::external::query::sql::metamodel::Window(partitions = ^QualifiedNameReference(name = ^QualifiedName(parts = 'dept')))
          ),
          operator = ComparisonOperator.GREATER_THAN,
          right = literal(3)
        )
      )
    )->inferTypes($config.functionRegistry), $state, $config)
  );
}