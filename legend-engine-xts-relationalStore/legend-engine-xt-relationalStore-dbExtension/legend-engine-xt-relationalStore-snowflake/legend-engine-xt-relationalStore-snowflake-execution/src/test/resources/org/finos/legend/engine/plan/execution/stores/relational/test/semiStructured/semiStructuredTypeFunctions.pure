// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class typeFunctions::model::Order
{
  orderId: Integer[1];
  orderName: String[1];
  customer: typeFunctions::model::Customer[1];
}

Class typeFunctions::model::Customer
{
  customerId: String[1];
  customerAddress: typeFunctions::model::CustomerAddress[1];
  transactionDetails: typeFunctions::model::TransactionDetails[1];
  products: typeFunctions::model::Product[*];
}

Class typeFunctions::model::CustomerAddress
{
  name: String[1];
}

Class typeFunctions::model::BillingAddress extends typeFunctions::model::CustomerAddress
{
  billAddress: String[1];
}

Class typeFunctions::model::ShippingAddress extends typeFunctions::model::CustomerAddress
{
  shipAddress: String[1];
}

Class typeFunctions::model::TransactionDetails
{
  payment: typeFunctions::model::Payment[1];
}

Class typeFunctions::model::Payment
{
  paymentId: String[1];
}

Class typeFunctions::model::CashOnDeliveryPayment extends typeFunctions::model::Payment
{
  amountToBePaid: Integer[1];
}

Class typeFunctions::model::PrepaidPayment extends typeFunctions::model::Payment
{
  amountPaid: Integer[1];
}

Class typeFunctions::model::WalletPrepaidPayment extends typeFunctions::model::PrepaidPayment
{
  walletTransactionAmount: Integer[1];
}

Class typeFunctions::model::CardPrepaidPayment extends typeFunctions::model::PrepaidPayment
{
  cardTransactionAmount: Integer[1];
}

Class typeFunctions::model::Product
{
  productId: Integer[1];
}

Class typeFunctions::model::ElectronicsProduct extends typeFunctions::model::Product
{
  brand: String[1];
}

Class typeFunctions::model::SportsProduct extends typeFunctions::model::Product
{
  sport: String[1];
}

###Relational
Database typeFunctions::store::SnowflakeDB
(
  Schema ORDER_SCHEMA
  (
    Table ORDER_TABLE
    (
      ORDERID INTEGER PRIMARY KEY,
      ORDERNAME VARCHAR(100),
      CUSTOMER VARCHAR(1000)
    )
  )
)

###ExternalFormat
Binding typeFunctions::store::CustomerBinding
{
  contentType: 'application/json';
  modelIncludes: [
    typeFunctions::model::Customer
  ];
}

###Mapping
Mapping typeFunctions::mapping::SnowflakeMapping
(
  typeFunctions::model::Order: Relational
  {
     scope([typeFunctions::store::SnowflakeDB]ORDER_SCHEMA.ORDER_TABLE)
     (
       orderId: ORDERID,
       orderName: ORDERNAME,
       customer: Binding typeFunctions::store::CustomerBinding : CUSTOMER
     )
  }
)

###Runtime
Runtime typeFunctions::runtime::SnowflakeRuntime
{
    mappings :
    [
        typeFunctions::mapping::SnowflakeMapping
    ];
    connections :
    [
        typeFunctions::store::SnowflakeDB :
        [
            connection_1 : #{
                RelationalDatabaseConnection {
                    store: typeFunctions::store::SnowflakeDB;
                    type: Snowflake;
                    specification: LocalH2{};
                    auth: Test;
                }
            }#
        ]
    ];
}

###Pure
function typeFunctions::semiStructuredTypeNameFunctionUsageInProjectWithFunctions(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()->project(
        [
            x | $x.customer.customerAddress->typeName(),
            x | $x.customer.transactionDetails.payment->typeName()
        ],
        [
            'Customer Address Type',
            'Payment Type'
        ]
    );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageInProjectWithColSpecs(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()->project(
        [
            col(x | $x.customer.customerAddress->typeName(), 'Customer Address Type'),
            col(x | $x.customer.transactionDetails.payment->typeName(), 'Payment Type')
        ]
    );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageInFilter(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->filter(
            x | $x.customer.transactionDetails.payment->typeName() == 'CashOnDeliveryPayment'
        )
        ->project(
            [
                col(x | $x.orderId, 'Order Id'),
                col(x | $x.customer.customerAddress->typeName(), 'Customer Address Type')
            ]
        );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageAfterFlattenFunction(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->project(
            [
                x | $x.orderId,
                x | $x.customer.products->map(p | $p->typeName())
            ],
            [
                'Order Id',
                'Product Type'
            ]
        );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageAfterFlattenColSpec(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->project(
            [
                col(x | $x.orderId, 'Order Id'),
                col(x | $x.customer.products->map(p | $p->typeName()), 'Product Type')
            ]
        );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageAfterArrayElementAccess(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->project(
            [
                col(x | $x.orderId, 'Order Id'),
                col(x | $x.customer.products->at(0)->typeName(), 'Product 0 Type'),
                col(x | $x.customer.products->at(1)->typeName(), 'Product 1 Type')
            ]
        );
}
