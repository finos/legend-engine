// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class typeFunctions::model::Order
{
  orderId: Integer[1];
  orderName: String[1];
  customer: typeFunctions::model::Customer[1];
}

Class typeFunctions::model::Customer
{
  customerId: String[1];
  customerAddress: typeFunctions::model::CustomerAddress[1];
  transactionDetails: typeFunctions::model::TransactionDetails[1];
  products: typeFunctions::model::Product[*];
}

Class typeFunctions::model::CustomerAddress
{
  name: String[1];
}

Class typeFunctions::model::BillingAddress extends typeFunctions::model::CustomerAddress
{
  billAddress: String[1];
}

Class typeFunctions::model::ShippingAddress extends typeFunctions::model::CustomerAddress
{
  shipAddress: String[1];
}

Class typeFunctions::model::TransactionDetails
{
  payment: typeFunctions::model::Payment[1];
}

Class typeFunctions::model::Payment
{
  paymentId: String[1];
}

Class typeFunctions::model::CashOnDeliveryPayment extends typeFunctions::model::Payment
{
  amountToBePaid: Integer[1];
}

Class typeFunctions::model::PrepaidPayment extends typeFunctions::model::Payment
{
  amountPaid: Integer[1];
}

Class typeFunctions::model::WalletPrepaidPayment extends typeFunctions::model::PrepaidPayment
{
  walletTransactionAmount: Integer[1];
}

Class typeFunctions::model::CardPrepaidPayment extends typeFunctions::model::PrepaidPayment
{
  cardTransactionAmount: Integer[1];
}

Class typeFunctions::model::Product
{
  productId: Integer[1];
}

Class typeFunctions::model::ElectronicsProduct extends typeFunctions::model::Product
{
  brand: String[1];
}

Class typeFunctions::model::SportsProduct extends typeFunctions::model::Product
{
  sport: String[1];
}

###Relational
Database typeFunctions::store::SnowflakeDB
(
  Schema ORDER_SCHEMA
  (
    Table ORDER_TABLE
    (
      ORDERID INTEGER PRIMARY KEY,
      ORDERNAME VARCHAR(100),
      CUSTOMER VARCHAR(1000)
    )
  )
)

###ExternalFormat
Binding typeFunctions::store::CustomerBinding
{
  contentType: 'application/json';
  modelIncludes: [
    typeFunctions::model::Customer
  ];
}

Binding typeFunctions::store::CustomerBindingWithMinimalLegendJsonSchema
{
  schemaSet: typeFunctions::schema::Customer_v_MinimalLegendJson;
  schemaId: Customer;
  contentType: 'application/json';
  modelIncludes: [
    typeFunctions::model::Customer
  ];
}

Binding typeFunctions::store::CustomerBindingWithLegendJsonSchema
{
  schemaSet: typeFunctions::schema::Customer_v_LegendJson;
  schemaId: Customer;
  contentType: 'application/json';
  modelIncludes: [
    typeFunctions::model::Customer,
    typeFunctions::model::CashOnDeliveryPayment,
    typeFunctions::model::TransactionDetails,
    typeFunctions::model::CustomerAddress,
    typeFunctions::model::CardPrepaidPayment,
    typeFunctions::model::WalletPrepaidPayment,
    typeFunctions::model::PrepaidPayment,
    typeFunctions::model::Payment,
    typeFunctions::model::ShippingAddress,
    typeFunctions::model::BillingAddress,
    typeFunctions::model::ElectronicsProduct,
    typeFunctions::model::SportsProduct,
    typeFunctions::model::Product
  ];
}

SchemaSet typeFunctions::schema::Customer_v07
{
  format: JSON;
  schemas: [
    {
      id: Customer;
      location: 'Customer.json';
      content: '{\n  "$schema": "http://json-schema.org/draft-07/schema#",\n  "title": "typeFunctions::model::Customer",\n  "type": "object",\n  "properties": {\n    "customerId": {\n      "type": "string"\n    },\n    "customerAddress": {\n      "oneOf": [\n        {\n          "$ref": "#/definitions/typeFunctions::model::BillingAddress"\n        },\n        {\n          "$ref": "#/definitions/typeFunctions::model::CustomerAddress"\n        },\n        {\n          "$ref": "#/definitions/typeFunctions::model::ShippingAddress"\n        }\n      ]\n    },\n    "transactionDetails": {\n      "$ref": "#/definitions/typeFunctions::model::TransactionDetails"\n    },\n    "products": {\n      "type": "array",\n      "items": {\n        "oneOf": [\n          {\n            "$ref": "#/definitions/typeFunctions::model::ElectronicsProduct"\n          },\n          {\n            "$ref": "#/definitions/typeFunctions::model::Product"\n          },\n          {\n            "$ref": "#/definitions/typeFunctions::model::SportsProduct"\n          }\n        ]\n      }\n    }\n  },\n  "required": [\n    "customerId",\n    "customerAddress",\n    "transactionDetails"\n  ],\n  "definitions": {\n    "typeFunctions::model::BillingAddress": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "typeFunctions::model::BillingAddress",\n      "allOf": [\n        {\n          "$ref": "#/definitions/typeFunctions::model::CustomerAddress"\n        }\n      ],\n      "type": "object",\n      "properties": {\n        "billAddress": {\n          "type": "string"\n        }\n      },\n      "required": [\n        "billAddress"\n      ]\n    },\n    "typeFunctions::model::CardPrepaidPayment": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "typeFunctions::model::CardPrepaidPayment",\n      "allOf": [\n        {\n          "$ref": "#/definitions/typeFunctions::model::PrepaidPayment"\n        }\n      ],\n      "type": "object",\n      "properties": {\n        "cardTransactionAmount": {\n          "type": "integer"\n        }\n      },\n      "required": [\n        "cardTransactionAmount"\n      ]\n    },\n    "typeFunctions::model::CashOnDeliveryPayment": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "typeFunctions::model::CashOnDeliveryPayment",\n      "allOf": [\n        {\n          "$ref": "#/definitions/typeFunctions::model::Payment"\n        }\n      ],\n      "type": "object",\n      "properties": {\n        "amountToBePaid": {\n          "type": "integer"\n        }\n      },\n      "required": [\n        "amountToBePaid"\n      ]\n    },\n    "typeFunctions::model::CustomerAddress": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "typeFunctions::model::CustomerAddress",\n      "type": "object",\n      "properties": {\n        "name": {\n          "type": "string"\n        }\n      },\n      "required": [\n        "name"\n      ]\n    },\n    "typeFunctions::model::ElectronicsProduct": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "typeFunctions::model::ElectronicsProduct",\n      "allOf": [\n        {\n          "$ref": "#/definitions/typeFunctions::model::Product"\n        }\n      ],\n      "type": "object",\n      "properties": {\n        "brand": {\n          "type": "string"\n        }\n      },\n      "required": [\n        "brand"\n      ]\n    },\n    "typeFunctions::model::Payment": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "typeFunctions::model::Payment",\n      "type": "object",\n      "properties": {\n        "paymentId": {\n          "type": "string"\n        }\n      },\n      "required": [\n        "paymentId"\n      ]\n    },\n    "typeFunctions::model::PrepaidPayment": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "typeFunctions::model::PrepaidPayment",\n      "allOf": [\n        {\n          "$ref": "#/definitions/typeFunctions::model::Payment"\n        }\n      ],\n      "type": "object",\n      "properties": {\n        "amountPaid": {\n          "type": "integer"\n        }\n      },\n      "required": [\n        "amountPaid"\n      ]\n    },\n    "typeFunctions::model::Product": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "typeFunctions::model::Product",\n      "type": "object",\n      "properties": {\n        "productId": {\n          "type": "integer"\n        }\n      },\n      "required": [\n        "productId"\n      ]\n    },\n    "typeFunctions::model::ShippingAddress": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "typeFunctions::model::ShippingAddress",\n      "allOf": [\n        {\n          "$ref": "#/definitions/typeFunctions::model::CustomerAddress"\n        }\n      ],\n      "type": "object",\n      "properties": {\n        "shipAddress": {\n          "type": "string"\n        }\n      },\n      "required": [\n        "shipAddress"\n      ]\n    },\n    "typeFunctions::model::SportsProduct": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "typeFunctions::model::SportsProduct",\n      "allOf": [\n        {\n          "$ref": "#/definitions/typeFunctions::model::Product"\n        }\n      ],\n      "type": "object",\n      "properties": {\n        "sport": {\n          "type": "string"\n        }\n      },\n      "required": [\n        "sport"\n      ]\n    },\n    "typeFunctions::model::TransactionDetails": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "typeFunctions::model::TransactionDetails",\n      "type": "object",\n      "properties": {\n        "payment": {\n          "oneOf": [\n            {\n              "$ref": "#/definitions/typeFunctions::model::CardPrepaidPayment"\n            },\n            {\n              "$ref": "#/definitions/typeFunctions::model::CashOnDeliveryPayment"\n            },\n            {\n              "$ref": "#/definitions/typeFunctions::model::Payment"\n            },\n            {\n              "$ref": "#/definitions/typeFunctions::model::PrepaidPayment"\n            },\n            {\n              "$ref": "#/definitions/typeFunctions::model::WalletPrepaidPayment"\n            }\n          ]\n        }\n      },\n      "required": [\n        "payment"\n      ]\n    },\n    "typeFunctions::model::WalletPrepaidPayment": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "typeFunctions::model::WalletPrepaidPayment",\n      "allOf": [\n        {\n          "$ref": "#/definitions/typeFunctions::model::PrepaidPayment"\n        }\n      ],\n      "type": "object",\n      "properties": {\n        "walletTransactionAmount": {\n          "type": "integer"\n        }\n      },\n      "required": [\n        "walletTransactionAmount"\n      ]\n    }\n  }\n}';
    }
  ];
}

SchemaSet typeFunctions::schema::Customer_v_MinimalLegendJson
{
  format: JSON;
  schemas: [
    {
      id: Customer;
      location: 'Customer.json';
      content: '{\n  "$schema": "LEGEND_JSON",\n  "typeConfig": {\n    "typeKeyName": "_type",\n    "fullyQualifiedTypePath": true  }\n}';
    }
  ];
}

SchemaSet typeFunctions::schema::Customer_v_LegendJson
{
  format: JSON;
  schemas: [
    {
      id: Customer;
      location: 'Customer.json';
      content: '{\n  "$schema": "LEGEND_JSON",\n  "typeConfig": {\n    "typeKeyName": "_type",\n    "fullyQualifiedTypePath": false,\n    "fullyQualifiedTypeNameOverride": {\n      "typeFunctions::model::CustomerAddress": "CustomCustomerAddress",\n      "typeFunctions::model::WalletPrepaidPayment": "Wallet"\n     }\n  },\n  "innerSchema": {\n    "$schema": "http://json-schema.org/draft-07/schema#",\n    "title": "typeFunctions::model::Customer",\n    "type": "object",\n    "properties": {\n      "customerId": {\n        "type": "string"\n      },\n      "customerAddress": {\n        "oneOf": [\n          {\n            "$ref": "#/definitions/typeFunctions::model::BillingAddress"\n          },\n          {\n            "$ref": "#/definitions/typeFunctions::model::CustomerAddress"\n          },\n          {\n            "$ref": "#/definitions/typeFunctions::model::ShippingAddress"\n          }\n        ]\n      },\n      "transactionDetails": {\n        "$ref": "#/definitions/typeFunctions::model::TransactionDetails"\n      },\n      "products": {\n        "type": "array",\n        "items": {\n          "oneOf": [\n            {\n              "$ref": "#/definitions/typeFunctions::model::ElectronicsProduct"\n            },\n            {\n              "$ref": "#/definitions/typeFunctions::model::Product"\n            },\n            {\n              "$ref": "#/definitions/typeFunctions::model::SportsProduct"\n            }\n          ]\n        }\n      }\n    },\n    "required": [\n      "customerId",\n      "customerAddress",\n      "transactionDetails"\n    ],\n    "definitions": {\n      "typeFunctions::model::BillingAddress": {\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "title": "typeFunctions::model::BillingAddress",\n        "allOf": [\n          {\n            "$ref": "#/definitions/typeFunctions::model::CustomerAddress"\n          }\n        ],\n        "type": "object",\n        "properties": {\n          "billAddress": {\n            "type": "string"\n          }\n        },\n        "required": [\n          "billAddress"\n        ]\n      },\n      "typeFunctions::model::CardPrepaidPayment": {\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "title": "typeFunctions::model::CardPrepaidPayment",\n        "allOf": [\n          {\n            "$ref": "#/definitions/typeFunctions::model::PrepaidPayment"\n          }\n        ],\n        "type": "object",\n        "properties": {\n          "cardTransactionAmount": {\n            "type": "integer"\n          }\n        },\n        "required": [\n          "cardTransactionAmount"\n        ]\n      },\n      "typeFunctions::model::CashOnDeliveryPayment": {\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "title": "typeFunctions::model::CashOnDeliveryPayment",\n        "allOf": [\n          {\n            "$ref": "#/definitions/typeFunctions::model::Payment"\n          }\n        ],\n        "type": "object",\n        "properties": {\n          "amountToBePaid": {\n            "type": "integer"\n          }\n        },\n        "required": [\n          "amountToBePaid"\n        ]\n      },\n      "typeFunctions::model::CustomerAddress": {\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "title": "typeFunctions::model::CustomerAddress",\n        "type": "object",\n        "properties": {\n          "name": {\n            "type": "string"\n          }\n        },\n        "required": [\n          "name"\n        ]\n      },\n      "typeFunctions::model::ElectronicsProduct": {\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "title": "typeFunctions::model::ElectronicsProduct",\n        "allOf": [\n          {\n            "$ref": "#/definitions/typeFunctions::model::Product"\n          }\n        ],\n        "type": "object",\n        "properties": {\n          "brand": {\n            "type": "string"\n          }\n        },\n        "required": [\n          "brand"\n        ]\n      },\n      "typeFunctions::model::Payment": {\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "title": "typeFunctions::model::Payment",\n        "type": "object",\n        "properties": {\n          "paymentId": {\n            "type": "string"\n          }\n        },\n        "required": [\n          "paymentId"\n        ]\n      },\n      "typeFunctions::model::PrepaidPayment": {\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "title": "typeFunctions::model::PrepaidPayment",\n        "allOf": [\n          {\n            "$ref": "#/definitions/typeFunctions::model::Payment"\n          }\n        ],\n        "type": "object",\n        "properties": {\n          "amountPaid": {\n            "type": "integer"\n          }\n        },\n        "required": [\n          "amountPaid"\n        ]\n      },\n      "typeFunctions::model::Product": {\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "title": "typeFunctions::model::Product",\n        "type": "object",\n        "properties": {\n          "productId": {\n            "type": "integer"\n          }\n        },\n        "required": [\n          "productId"\n        ]\n      },\n      "typeFunctions::model::ShippingAddress": {\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "title": "typeFunctions::model::ShippingAddress",\n        "allOf": [\n          {\n            "$ref": "#/definitions/typeFunctions::model::CustomerAddress"\n          }\n        ],\n        "type": "object",\n        "properties": {\n          "shipAddress": {\n            "type": "string"\n          }\n        },\n        "required": [\n          "shipAddress"\n        ]\n      },\n      "typeFunctions::model::SportsProduct": {\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "title": "typeFunctions::model::SportsProduct",\n        "allOf": [\n          {\n            "$ref": "#/definitions/typeFunctions::model::Product"\n          }\n        ],\n        "type": "object",\n        "properties": {\n          "sport": {\n            "type": "string"\n          }\n        },\n        "required": [\n          "sport"\n        ]\n      },\n      "typeFunctions::model::TransactionDetails": {\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "title": "typeFunctions::model::TransactionDetails",\n        "type": "object",\n        "properties": {\n          "payment": {\n            "oneOf": [\n              {\n                "$ref": "#/definitions/typeFunctions::model::CardPrepaidPayment"\n              },\n              {\n                "$ref": "#/definitions/typeFunctions::model::CashOnDeliveryPayment"\n              },\n              {\n                "$ref": "#/definitions/typeFunctions::model::Payment"\n              },\n              {\n                "$ref": "#/definitions/typeFunctions::model::PrepaidPayment"\n              },\n              {\n                "$ref": "#/definitions/typeFunctions::model::WalletPrepaidPayment"\n              }\n            ]\n          }\n        },\n        "required": [\n          "payment"\n        ]\n      },\n      "typeFunctions::model::WalletPrepaidPayment": {\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "title": "typeFunctions::model::WalletPrepaidPayment",\n        "allOf": [\n          {\n            "$ref": "#/definitions/typeFunctions::model::PrepaidPayment"\n          }\n        ],\n        "type": "object",\n        "properties": {\n          "walletTransactionAmount": {\n            "type": "integer"\n          }\n        },\n        "required": [\n          "walletTransactionAmount"\n        ]\n      }\n    }\n  }\n}';
    }
  ];
}

###Mapping
Mapping typeFunctions::mapping::SnowflakeMapping
(
  typeFunctions::model::Order: Relational
  {
     scope([typeFunctions::store::SnowflakeDB]ORDER_SCHEMA.ORDER_TABLE)
     (
       orderId: ORDERID,
       orderName: ORDERNAME,
       customer: Binding typeFunctions::store::CustomerBinding : CUSTOMER
     )
  }
)

Mapping typeFunctions::mapping::SnowflakeMappingWithMinimalLegendJsonSchema
(
  typeFunctions::model::Order: Relational
  {
     scope([typeFunctions::store::SnowflakeDB]ORDER_SCHEMA.ORDER_TABLE)
     (
       orderId: ORDERID,
       orderName: ORDERNAME,
       customer: Binding typeFunctions::store::CustomerBindingWithMinimalLegendJsonSchema : CUSTOMER
     )
  }
)

Mapping typeFunctions::mapping::SnowflakeMappingWithLegendJsonSchema
(
  typeFunctions::model::Order: Relational
  {
     scope([typeFunctions::store::SnowflakeDB]ORDER_SCHEMA.ORDER_TABLE)
     (
       orderId: ORDERID,
       orderName: ORDERNAME,
       customer: Binding typeFunctions::store::CustomerBindingWithLegendJsonSchema : CUSTOMER
     )
  }
)

###Runtime
Runtime typeFunctions::runtime::SnowflakeRuntime
{
    mappings :
    [
        typeFunctions::mapping::SnowflakeMapping
    ];
    connections :
    [
        typeFunctions::store::SnowflakeDB :
        [
            connection_1 : #{
                RelationalDatabaseConnection {
                    store: typeFunctions::store::SnowflakeDB;
                    type: Snowflake;
                    specification: LocalH2{};
                    auth: Test;
                }
            }#
        ]
    ];
}

###Pure
function typeFunctions::semiStructuredTypeNameFunctionUsageInProjectWithFunctions(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()->project(
        [
            x | $x.customer.customerAddress->typeName(),
            x | $x.customer.transactionDetails.payment->typeName()
        ],
        [
            'Customer Address Type',
            'Payment Type'
        ]
    );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageInProjectWithColSpecs(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()->project(
        [
            col(x | $x.customer.customerAddress->typeName(), 'Customer Address Type'),
            col(x | $x.customer.transactionDetails.payment->typeName(), 'Payment Type')
        ]
    );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageInFilter(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->filter(
            x | $x.customer.transactionDetails.payment->typeName() == 'CashOnDeliveryPayment'
        )
        ->project(
            [
                col(x | $x.orderId, 'Order Id'),
                col(x | $x.customer.customerAddress->typeName(), 'Customer Address Type')
            ]
        );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageAfterFlattenFunction(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->project(
            [
                x | $x.orderId,
                x | $x.customer.products->map(p | $p->typeName())
            ],
            [
                'Order Id',
                'Product Type'
            ]
        );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageAfterFlattenColSpec(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->project(
            [
                col(x | $x.orderId, 'Order Id'),
                col(x | $x.customer.products->map(p | $p->typeName()), 'Product Type')
            ]
        );
}

function typeFunctions::semiStructuredTypeNameFunctionUsageAfterArrayElementAccess(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->project(
            [
                col(x | $x.orderId, 'Order Id'),
                col(x | $x.customer.products->at(0)->typeName(), 'Product 0 Type'),
                col(x | $x.customer.products->at(1)->typeName(), 'Product 1 Type')
            ]
        );
}

function typeFunctions::semiStructuredTypePathFunctionUsageInProjectWithFunctions(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()->project(
        [
            x | $x.customer.customerAddress->typePath(),
            x | $x.customer.transactionDetails.payment->typePath()
        ],
        [
            'Customer Address Type',
            'Payment Type'
        ]
    );
}

function typeFunctions::semiStructuredTypePathFunctionUsageInProjectWithColSpecs(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()->project(
        [
            col(x | $x.customer.customerAddress->typePath(), 'Customer Address Type'),
            col(x | $x.customer.transactionDetails.payment->typePath(), 'Payment Type')
        ]
    );
}

function typeFunctions::semiStructuredTypePathFunctionUsageInFilter(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->filter(
            x | $x.customer.transactionDetails.payment->typePath() == 'CashOnDeliveryPayment'
        )
        ->project(
            [
                col(x | $x.orderId, 'Order Id'),
                col(x | $x.customer.customerAddress->typePath(), 'Customer Address Type')
            ]
        );
}

function typeFunctions::semiStructuredTypePathFunctionUsageAfterFlattenFunction(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->project(
            [
                x | $x.orderId,
                x | $x.customer.products->map(p | $p->typePath())
            ],
            [
                'Order Id',
                'Product Type'
            ]
        );
}

function typeFunctions::semiStructuredTypePathFunctionUsageAfterFlattenColSpec(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->project(
            [
                col(x | $x.orderId, 'Order Id'),
                col(x | $x.customer.products->map(p | $p->typePath()), 'Product Type')
            ]
        );
}

function typeFunctions::semiStructuredTypePathFunctionUsageAfterArrayElementAccess(): TabularDataSet[1]
{
    typeFunctions::model::Order.all()
        ->project(
            [
                col(x | $x.orderId, 'Order Id'),
                col(x | $x.customer.products->at(0)->typePath(), 'Product 0 Type'),
                col(x | $x.customer.products->at(1)->typePath(), 'Product 1 Type')
            ]
        );
}
