// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific languameta::protocols::pure::vX_X_X::metamodel::store::relational::connection::alloy::specification::SpannerDatasourceSpecification governing permissions and
// limitations under the License.

import meta::relational::functions::sqlQueryToString::spanner::*;
import meta::relational::functions::sqlQueryToString::default::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::metamodel::operation::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::*;
import meta::external::store::relational::runtime::*;
import meta::relational::runtime::*;
import meta::pure::extension::*;
import meta::relational::extension::*;

function <<db.ExtensionLoader>> meta::relational::functions::sqlQueryToString::spanner::dbExtensionLoaderForSpanner():DbExtensionLoader[1]
{
  ^DbExtensionLoader(dbType = DatabaseType.Spanner, loader = createDbExtensionForSpanner__DbExtension_1_);
}

function meta::relational::functions::sqlQueryToString::spanner::createDbExtensionForSpanner():DbExtension[1]
{
   let reservedWords = spannerReservedWords();
   let literalProcessors = getDefaultLiteralProcessors()->putAll(getLiteralProcessorsForSpanner());
   let literalProcessor = {type:Type[1]| $literalProcessors->get(if($type->instanceOf(Enumeration), | Enum, | $type))->toOne()};

   let dynaFuncDispatch = getDynaFunctionToSqlDefault($literalProcessor)->groupBy(d| $d.funcName)->putAll(
     getDynaFunctionToSqlForSpanner($literalProcessor)->groupBy(d| $d.funcName))->getDynaFunctionDispatcher();   

   ^DbExtension(
      isBooleanLiteralSupported = true,
      isDbReservedIdentifier = {str:String[1]| $str->in($reservedWords)},
      literalProcessor = $literalProcessor,
      joinStringsProcessor = processJoinStringsOperationForSpanner_JoinStrings_1__SqlGenerationContext_1__String_1_,
      selectSQLQueryProcessor = processSelectSQLQueryForSpanner_SelectSQLQuery_1__SqlGenerationContext_1__Boolean_1__String_1_,
      identifierProcessor = processIdentifierWithDoubleQuotes_String_1__DbConfig_1__String_1_,
      schemaNameToIdentifier = schemaNameToIdentifierForSpanner_String_1__DbConfig_1__String_1_,
      dynaFuncDispatch = $dynaFuncDispatch,
      ddlCommandsTranslator = getSpannerDDLCommandsTranslator()
   );
}

function <<access.private>> meta::relational::functions::sqlQueryToString::spanner::spannerReservedWords():String[*]
{
  [];
}

function <<access.private>> meta::relational::functions::sqlQueryToString::spanner::getLiteralProcessorsForSpanner():Map<Type,LiteralProcessor>[1]
{
   let literalReplacementPairForString = ^LiteralReplacement(old = '\'', new = '\'\'');

   newMap([
      pair(Enum,           ^LiteralProcessor(format = 'Text%s',          transform = toString_Any_1__String_1_->literalTransform())),
      pair(String,         ^LiteralProcessor(format = 'Text\'%s\'',      transform = convertStringToSQLString($literalReplacementPairForString)->literalTransform(), literalReplacements = $literalReplacementPairForString)),
      pair(Boolean,        ^LiteralProcessor(format = 'Boolean\'%s\'',   transform = toString_Any_1__String_1_->literalTransform())),
      pair(StrictDate,     ^LiteralProcessor(format = 'Date\'%s\'',      transform = {d:StrictDate[1], dbTimeZone:String[0..1] | $d->convertDateToSqlString($dbTimeZone)})),
      pair(DateTime,       ^LiteralProcessor(format = 'Timestamp\'%s\'', transform = {d:DateTime[1], dbTimeZone:String[0..1] | $d->convertDateToSqlString($dbTimeZone)})),
      pair(Date,           ^LiteralProcessor(format = 'Timestamp\'%s\'', transform = {d:Date[1], dbTimeZone:String[0..1] | $d->convertDateToSqlString($dbTimeZone)}))
   ]);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::spanner::getDynaFunctionToSqlForSpanner(literalProcessor: meta::pure::metamodel::function::Function<{Type[1] -> LiteralProcessor[1]}>[1]): DynaFunctionToSql[*]
{
  let allStates = allGenerationStates();

  [
    dynaFnToSql('and',                    $allStates,            ^ToSql(format='%s', transform={p:String[*]|$p->makeString(' and ')})),
    dynaFnToSql('ascii',                  $allStates,            ^ToSql(format='array_first(to_code_points(%s))')),
    dynaFnToSql('booland',                $allStates,            ^ToSql(format='logical_and(%s)')),
    dynaFnToSql('boolor',                 $allStates,            ^ToSql(format='logical_or(%s)')), 
    dynaFnToSql('char',                   $allStates,            ^ToSql(format='code_points_to_string(%s)')),
    dynaFnToSql('coalesce',               $allStates,            ^ToSql(format='coalesce%s', transform={p:String[*]|$p->joinStrings('(', ', ', ')')})),
    dynaFnToSql('concat',                 $allStates,            ^ToSql(format='concat(%s)', transform={p:String[*]|$p->joinStrings(', ')})),
    dynaFnToSql('contains',               $allStates,            ^ToSql(format=likePattern('%%%s%%'), transform={p:String[2]|$p->transformLikeParamsDefault()})),
    dynaFnToSql('count',                  $allStates,            ^ToSql(format='count(%s)', transform={p:String[*]|if($p->isEmpty(),|'*',|$p)})),
    dynaFnToSql('datePart',               $allStates,            ^ToSql(format='date(%s)')),
    dynaFnToSql('dayOfMonth',             $allStates,            ^ToSql(format='extract(day from %s)')),
    dynaFnToSql('dayOfWeek',              $allStates,            ^ToSql(format='format_datetime("%%A", DATETIME(%s))')),
    dynaFnToSql('dayOfWeekNumber',        $allStates,            ^ToSql(format='extract(dayofweek from %s)')),
    dynaFnToSql('dayOfYear',              $allStates,            ^ToSql(format='extract(dayofyear from %s)')),
    dynaFnToSql('decodeBase64',           $allStates,            ^ToSql(format='safe_convert_bytes_to_string(from_base64(%s))')),
    dynaFnToSql('encodeBase64',           $allStates,            ^ToSql(format='to_base64(%s)')),    
    // dynaFnToSql('dateDiff',               $allStates,            ^ToSql(format='%s', transform={p:String[*]|generateDateDiffExpressionForSpanner($p)})),
    // dynaFnToSql('distinct',               $allStates,            ^ToSql(format='distinct(%s)', transform={p:String[*]|if($p->isEmpty(),|'*',|$p)})),
    dynaFnToSql('endsWith',               $allStates,            ^ToSql(format=likePattern('%%%s'), transform={p:String[2]|$p->transformLikeParamsDefault()})),
    dynaFnToSql('exp',                    $allStates,            ^ToSql(format='exp(%s::float)')),
    dynaFnToSql('in',                     $allStates,            ^ToSql(format='%s in %s', transform={p:String[2] | if($p->at(1)->startsWith('(') && $p->at(1)->endsWith(')'), | $p, | [$p->at(0), ('(' + $p->at(1) + ')')])})),
    dynaFnToSql('indexOf',                $allStates,            ^ToSql(format='strpos(%s, %s)')),
    dynaFnToSql('firstDayOfMonth',        $allStates,            ^ToSql(format='date(timestamp_trunc(%s, month))')),
    dynaFnToSql('firstDayOfQuarter',      $allStates,            ^ToSql(format='date(timestamp_trunc(%s, quarter))')),
    dynaFnToSql('firstDayOfThisMonth',    $allStates,            ^ToSql(format='date_trunc(current_date, month)%s', transform={p:String[*] | ''})),
    dynaFnToSql('firstDayOfThisQuarter',  $allStates,            ^ToSql(format='date_trunc(current_date, quarter)%s', transform={p:String[*] | ''})),
    dynaFnToSql('firstDayOfThisYear',     $allStates,            ^ToSql(format='date_trunc(current_date, year)%s', transform={p:String[*] | ''})),
    dynaFnToSql('firstDayOfWeek',         $allStates,            ^ToSql(format='date(timestamp_trunc(%s, week)')),
    dynaFnToSql('firstDayOfYear',         $allStates,            ^ToSql(format='timestamp_trunc(%s, year)')),
    dynaFnToSql('firstHourOfDay',         $allStates,            ^ToSql(format='timestamp_trunc(%s, day)')),
    dynaFnToSql('firstMillisecondOfSecond', $allStates,          ^ToSql(format='timestamp_trunc(%s, second)')),
    dynaFnToSql('firstMinuteOfHour',      $allStates,            ^ToSql(format='timestamp_trunc(%s, hour)')),
    dynaFnToSql('firstSecondOfMinute',    $allStates,            ^ToSql(format='timestamp_trunc(%s, minute)')),        
    // dynaFnToSql('isNotEmpty',             $allStates,            ^ToSql(format='%s is not null')),
    // dynaFnToSql('isNull',                 $allStates,            ^ToSql(format='%s is null')),
    dynaFnToSql('hour',                   $allStates,            ^ToSql(format='extract(hour from %s)')),
    dynaFnToSql('joinStrings',            $allStates,            ^ToSql(format='string_agg(%s, %s)')),
    dynaFnToSql('left',                   $allStates,            ^ToSql(format='substr(%s, 1, %s)')),
    dynaFnToSql('length',                 $allStates,            ^ToSql(format='length(%s)')),
    dynaFnToSql('log',                    $allStates,            ^ToSql(format='ln(%s::float)')),
    dynaFnToSql('minute',                 $allStates,            ^ToSql(format='extract(minute from %s)')),
    dynaFnToSql('month',                  $allStates,            ^ToSql(format='extract(month from %s)')),
    dynaFnToSql('monthNumber',            $allStates,            ^ToSql(format='extract(month from %s)')),
    dynaFnToSql('now',                    $allStates,            ^ToSql(format='now()')),
    dynaFnToSql('or',                     $allStates,            ^ToSql(format='%s', transform={p:String[*]|$p->makeString(' or ')})),
    // dynaFnToSql('parseFloat',             $allStates,            ^ToSql(format='cast(%s as float)')),
    // dynaFnToSql('parseInteger',           $allStates,            ^ToSql(format='cast(%s as integer)')),
    // dynaFnToSql('position',               $allStates,            ^ToSql(format='position(%s in %s)')),
    dynaFnToSql('plus',                   $allStates,            ^ToSql(format='%s', transform=getTransformForAddPlus())),
    dynaFnToSql('pow',                    $allStates,            ^ToSql(format='dpow(%s, %s)')),
    // dynaFnToSql('quarter',                $allStates,            ^ToSql(format='quarter(%s)')),
    dynaFnToSql('quarterNumber',          $allStates,            ^ToSql(format='extract(quarter from %s)')),
    dynaFnToSql('right',                  $allStates,            ^ToSql(format='%s', transform={p:String[2] | 'substr(' + $p->at(0) + ', length(' + $p->at(0) + ') + (1 - ' + $p->at(1) + '))'})),
    dynaFnToSql('round',                  $allStates,            ^ToSql(format='round(%s::float)')),
    dynaFnToSql('second',                 $allStates,            ^ToSql(format='extract(second from %s)')),
    dynaFnToSql('size',                   $allStates,            ^ToSql(format='count(%s)', transform={p:String[*]|if($p->isEmpty(),|'*',|$p)})),
    dynaFnToSql('splitPart',              $allStates,            ^ToSql(format='split(%s, %s)[ORDINAL(%s)]', transform={p:String[*]|if($p->isEmpty(),|'*',|$p)})),
    dynaFnToSql('sqlFalse',               $allStates,            ^ToSql(format='%s', transform={p:String[*]|processLiteralValue(false, [], $literalProcessor)})),
    // dynaFnToSql('sqlNull',                $allStates,            ^ToSql(format='null')),
    dynaFnToSql('sqlTrue',                $allStates,            ^ToSql(format='%s', transform={p:String[*]|processLiteralValue(true, [], $literalProcessor)})),
    dynaFnToSql('startsWith',             $allStates,            ^ToSql(format=likePattern('%s%%'), transform={p:String[2]|$p->transformLikeParamsDefault()})),
    // dynaFnToSql('second',                 $allStates,            ^ToSql(format='second(%s)')),
    dynaFnToSql('substring',              $allStates,            ^ToSql(format='substring%s', transform={p:String[*]|$p->joinStrings('(', ', ', ')')})),
    // dynaFnToSql('toOne',                  $allStates,            ^ToSql(format='%s')),
    // dynaFnToSql('stdDevPopulation',       $allStates,            ^ToSql(format='stddev_pop(%s)')),
    dynaFnToSql('stdDevSample',           $allStates,            ^ToSql(format='stddev_samp(%s)')),
    dynaFnToSql('today',                  $allStates,            ^ToSql(format='current_date')),
    dynaFnToSql('weekOfYear',             $allStates,            ^ToSql(format='extract(week from %s)')),
    dynaFnToSql('year',                   $allStates,            ^ToSql(format='extract(year from %s)'))    
    // dynaFnToSql('toString',               $allStates,            ^ToSql(format='cast(%s as varchar)')),
  ];
}

function <<access.private>> meta::relational::functions::sqlQueryToString::spanner::generateDateDiffExpressionForSpanner(params:String[*]):String[1]
{
  let enumList = [DurationUnit.YEARS,DurationUnit.MONTHS,DurationUnit.WEEKS,DurationUnit.DAYS,DurationUnit.HOURS,DurationUnit.MINUTES,DurationUnit.SECONDS,DurationUnit.MILLISECONDS]->map(e|$e->toString());

  let indexOfDiff = $enumList->indexOf($params->at(2)->replace('\'', '')->replace('Text', ''));

  let dbSpecificUnits = [

     { | format('(%s)', [
        'DATE_PART(\'year\', %s) - DATE_PART(\'year\', %s)'
     ])},
     {| format('(%s * 12 + (%s))', [
        generateDateDiffExpressionForSpanner([$params->at(0), $params->at(1), DurationUnit.YEARS->toString()]),
        'DATE_PART(\'month\', %s) - DATE_PART(\'month\', %s)'
     ])},
     {| format('(%s)', [
        'TRUNC(DATE_PART(\'day\', %s - %s)/7)'
     ])},
     {| format('(%s)', [
        'DATE_PART(\'day\', %s - %s)'
     ])},
     {| format('(%s * 24 + (%s))', [
        generateDateDiffExpressionForSpanner([$params->at(0), $params->at(1), DurationUnit.DAYS->toString()]),
        'DATE_PART(\'hour\', %s - %s)'
     ])},
     {| format('(%s * 60 + (%s))', [
        generateDateDiffExpressionForSpanner([$params->at(0), $params->at(1), DurationUnit.HOURS->toString()]),
        'DATE_PART(\'minute\', %s - %s)'
     ])},
     {| format('(%s * 60 + (%s))', [
        generateDateDiffExpressionForSpanner([$params->at(0), $params->at(1), DurationUnit.MINUTES->toString()]),
        'DATE_PART(\'second\', %s - %s)'
     ])},
     {| format('(%s * 1000 + (%s))', [
        generateDateDiffExpressionForSpanner([$params->at(0), $params->at(1), DurationUnit.SECONDS->toString()]),
        'DATE_PART(\'milliseconds\', %s - %s)'
     ])}
  ];

  format($dbSpecificUnits->at($indexOfDiff)->eval(), [$params->at(0), $params->at(1)]);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::spanner::processJoinStringsOperationForSpanner(js:JoinStrings[1], sgc:SqlGenerationContext[1]): String[1]
{
   processJoinStringsOperation($js, $sgc, [], {strs, sep| $strs->joinStrings('concat(', if('Text\'\'' == $sep, |', ', |',' + $sep + ',') , ')')});
}

function <<access.private>> meta::relational::functions::sqlQueryToString::spanner::processSelectSQLQueryForSpanner(s:SelectSQLQuery[1], sgc:SqlGenerationContext[1], isSubSelect:Boolean[1]):String[1]
{
   $s->processSelectSQLQueryForSpanner($sgc.dbConfig, $sgc.format, $sgc.config, $isSubSelect, $sgc.extensions);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::spanner::processSelectSQLQueryForSpanner(s:SelectSQLQuery[1], dbConfig : DbConfig[1], format:Format[1], config:Config[1], isSubSelect : Boolean[1], extensions:Extension[*]):String[1]
{
  let opStr = if($s.filteringOperation->isEmpty(), |'', |$s.filteringOperation->map(s|$s->processOperation($dbConfig, $format->indent(), ^$config(callingFromFilter = true), $extensions))->filter(s|$s != '')->joinStrings(' <||> '));
  let havingStr = if($s.havingOperation->isEmpty(), |'', |$s.havingOperation->map(s|$s->processOperation($dbConfig, $format->indent(), $config, $extensions))->filter(s|$s != '')->joinStrings(' <||> '));

  $format.separator + 'select ' + if($s.distinct == true,|'distinct ',|'') +
  processSelectColumns($s.columns, $dbConfig, $format->indent(), true, $extensions) +
  if($s.data == [],|'',| ' ' + $format.separator + 'from ' + $s.data->toOne()->processJoinTreeNode([], $dbConfig, $format->indent(), [], $extensions)) +
  if (eq($opStr, ''), |'', | ' ' + $format.separator + 'where ' + $opStr) +
  if ($s.groupBy->isEmpty(),|'',| ' ' + $format.separator + 'group by '+$s.groupBy->processGroupByColumns($dbConfig, $format->indent(), true, $extensions)->makeString(','))+
  if (eq($havingStr, ''), |'', | ' ' + $format.separator + 'having ' + $havingStr) +
  if ($s.orderBy->isEmpty(),|'',| ' ' + $format.separator + 'order by '+ $s.orderBy->processOrderBy($dbConfig, $format->indent(), $config, $extensions)->makeString(','))+
  + processLimit($s, $dbConfig, $format, $extensions, processTakeDefault_SelectSQLQuery_1__Format_1__DbConfig_1__Extension_MANY__String_1_, processSliceOrDropForSpanner_SelectSQLQuery_1__Format_1__DbConfig_1__Extension_MANY__Any_1__String_1_);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::spanner::processSliceOrDropForSpanner(s:SelectSQLQuery[1], format:Format[1],dbConfig : DbConfig[1], extensions:Extension[*], size:Any[1]):String[1]
{
   '%s offset %s'->format([$format.separator, $s.fromRow->toOne()->getValueForTake($format, $dbConfig, $extensions)]) + if ($size == -1, | '', | ' limit %s'->format($size));
}

function meta::relational::functions::sqlQueryToString::spanner::getSpannerDDLCommandsTranslator(): RelationalDDLCommandsTranslator[1]
{
  ^RelationalDDLCommandsTranslator(
                createSchema = translateCreateSchemaStatementSpanner_CreateSchemaSQL_1__DbConfig_1__String_MANY_,
                dropSchema =  translateDropSchemaStatementSpanner_DropSchemaSQL_1__DbConfig_1__String_MANY_,
                createTable =  translateCreateTableStatementSpanner_CreateTableSQL_1__DbConfig_1__String_1_,
                dropTable = translateDropTableStatementSpanner_DropTableSQL_1__DbConfig_1__String_1_,
                loadTable =  loadValuesToDbTableForSpanner_LoadTableSQL_1__DbConfig_1__String_MANY_
              );
}

function <<access.private>>  meta::relational::functions::sqlQueryToString::spanner::translateCreateSchemaStatementSpanner(createSchemaSQL:CreateSchemaSQL[1], dbConfig:DbConfig[1]) : String[*]
{
   [];
}

function <<access.private>>  meta::relational::functions::sqlQueryToString::spanner::translateDropSchemaStatementSpanner(dropSchemaSQL:DropSchemaSQL[1], dbConfig:DbConfig[1]) : String[*]
{
   [];
}

function meta::relational::functions::sqlQueryToString::spanner::translateDropTableStatementSpanner(dropTableSQL:DropTableSQL[1], dbConfig:DbConfig[1]) : String[1]
{
  '[Drop table '+$dropTableSQL.table.name+';]';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::spanner::schemaNameToIdentifierForSpanner(schemaName: String[1], dbConfig: DbConfig[1]): String[1]
{
   'default';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::spanner::translateCreateTableStatementSpanner(createTableSQL:CreateTableSQL[1], dbConfig:DbConfig[1]) : String[1]
{
  let table = $createTableSQL.table;
  let applyConstraints = $createTableSQL.applyConstraints;
  'Create Table '+$table.name+
        + '('
        + $table.columns->cast(@meta::relational::metamodel::Column)
          ->map(c | $c.name->processColumnName($dbConfig) + ' ' +  getColumnTypeSqlTextSpanner($c.type) + if($c.nullable->isEmpty() || $applyConstraints == false, | '', | if($c.nullable == true , | ' NULL', | ' NOT NULL' )))
          ->joinStrings(',')
        + if ($table.primaryKey->isEmpty() || $applyConstraints == false, | '', | ', PRIMARY KEY(' + $table.primaryKey->map(c | $c.name)->joinStrings(',') + ')')
        +');';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::spanner::getColumnTypeSqlTextSpanner(columnType:meta::relational::metamodel::datatype::DataType[1]):String[1]
{
   $columnType->match([
      s : meta::relational::metamodel::datatype::Timestamp[1] | 'timestamptz',
      a : Any[*] | meta::relational::metamodel::datatype::dataTypeToSqlText($columnType)
   ])
}

function meta::relational::functions::sqlQueryToString::spanner::loadValuesToDbTableForSpanner(loadTableSQL:LoadTableSQL[1] , dbConfig: DbConfig[1]) : String[*]
{
    $loadTableSQL.parsedData.values->map(row |  let sql = 'insert into ' + $loadTableSQL.table.name + ' ('
            + $loadTableSQL.columnsToLoad.name->map(colName | $colName->processColumnName($dbConfig))->joinStrings(',')
            +') '
            + 'values ('
            + $row.values->meta::relational::functions::database::testDataSQLgeneration::convertValuesToCsv($loadTableSQL.columnsToLoad.type)
            + ');';
   );
}
