// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::sqlQueryToString::athena::*;
import meta::relational::functions::sqlQueryToString::default::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::metamodel::operation::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::*;
import meta::external::store::relational::runtime::*;
import meta::relational::runtime::*;
import meta::pure::extension::*;
import meta::relational::extension::*;

function <<db.ExtensionLoader>> meta::relational::functions::sqlQueryToString::athena::dbExtensionLoaderForAthena():DbExtensionLoader[1]
{
  ^DbExtensionLoader(dbType = DatabaseType.Athena, loader = createDbExtensionForAthena__DbExtension_1_);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::createDbExtensionForAthena():DbExtension[1]
{
   let reservedWords = defaultReservedWords();
   let literalProcessors = getDefaultLiteralProcessors()->putAll(getLiteralProcessorsForAthena());
   let literalProcessor = {type:Type[1]| $literalProcessors->get(if($type->instanceOf(Enumeration), | Enum, | $type))->toOne()};

   let dynaFuncDispatch = getDynaFunctionToSqlDefault($literalProcessor)->groupBy(d| $d.funcName)->putAll(
     getDynaFunctionToSqlForAthena()->groupBy(d| $d.funcName))->getDynaFunctionDispatcher();   

   ^DbExtension(
      isBooleanLiteralSupported = true,
      isDbReservedIdentifier = {str:String[1]| $str->in($reservedWords)},
      literalProcessor = $literalProcessor,
      selectSQLQueryProcessor = processSelectSQLQueryForAthena_SelectSQLQuery_1__SqlGenerationContext_1__Boolean_1__String_1_,
      identifierProcessor = processIdentifierForAthena_String_1__DbConfig_1__String_1_,
      dynaFuncDispatch = $dynaFuncDispatch,
      ddlCommandsTranslator = getDDLCommandsTranslatorForAthena()
   );
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::processIdentifierForAthena(identifier:String[1], dbConfig: DbConfig[1]):String[1]
{
   assert($identifier->matches('[a-zA-Z0-9_"]*'), '[unsupported-api] special chars are not supported in table/column names');
   $identifier->processIdentifierWithQuoteChar('"', $dbConfig);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::getDDLCommandsTranslatorForAthena(): RelationalDDLCommandsTranslator[1]
{
  ^RelationalDDLCommandsTranslator(
                createSchema = translateCreateSchemaStatementForAthena_CreateSchemaSQL_1__DbConfig_1__String_MANY_,
                dropSchema =  translateDropSchemaStatementForAthena_DropSchemaSQL_1__DbConfig_1__String_MANY_,
                createTable =  translateCreateTableStatementForAthena_CreateTableSQL_1__DbConfig_1__String_MANY_,
                dropTable = translateDropTableStatementForAthena_DropTableSQL_1__DbConfig_1__String_MANY_,
                loadTable =  loadValuesToDbTableForAthena_LoadTableSQL_1__DbConfig_1__String_MANY_
              );
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::translateCreateSchemaStatementForAthena(createSchemaSQL:CreateSchemaSQL[1], dbConfig:DbConfig[1]) : String[*]
{
   if($createSchemaSQL.schema.name == 'default', |[], |'[Create Schema ' + $createSchemaSQL.schema.name + ';]');
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::translateDropSchemaStatementForAthena(dropSchemaSQL:DropSchemaSQL[1], dbConfig:DbConfig[1]) : String[*]
{
   [];
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::translateDropTableStatementForAthena(dropTableSQL:DropTableSQL[1], dbConfig:DbConfig[1]) : String[*]
{
  let t = $dropTableSQL.table;
  'Drop table if exists '+if($t.schema.name == 'default',|'',|$t.schema.name+'.')+$t.name+';';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::translateCreateTableStatementForAthena(createTableSQL:CreateTableSQL[1], dbConfig:DbConfig[1]) : String[*]
{
  let t = $createTableSQL.table;
  let tableName = if($t.schema.name == 'default',|'',|$t.schema.name+'.')+$t.name;
  let currentTimeKey = now()->toString()->chunk(1)->filter(x | $x->matches('[0-9]'))->makeString();
  let tableKey = $tableName->chunk(1)->filter(x | $x->matches('[a-zA-Z0-9]'))->makeString();
  let tableLocationKey = $tableKey + $currentTimeKey;
  'Create External Table '+ $tableName +
      + '('
      + $t.columns->cast(@meta::relational::metamodel::Column)
         ->map(c | $c.name->processColumnName($dbConfig) + ' ' +  getColumnTypeSqlTextForAthena($c.type))
        ->joinStrings(',')
      +') Location \'s3://aws-athena-query-results-finos/' + $tableLocationKey + '/\';';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::getColumnTypeSqlTextForAthena(columnType:meta::relational::metamodel::datatype::DataType[1]):String[1]
{
   $columnType->match([
      a : Any[*] | meta::relational::metamodel::datatype::dataTypeToSqlText($columnType)
   ])
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::loadValuesToDbTableForAthena(loadTableSQL:LoadTableSQL[1] , dbConfig: DbConfig[1]) : String[*]
{

  'insert into ' + if($loadTableSQL.table.schema.name=='default', |'' ,|$loadTableSQL.table.schema.name + '.') + $loadTableSQL.table.name + ' ('
        + $loadTableSQL.columnsToLoad.name->map(colName | $colName->processColumnName($dbConfig))->joinStrings(',')
        +') values '
        + $loadTableSQL.parsedData.values->map(row | '('
          + $row.values->convertValuesToCsvForAthena($loadTableSQL.columnsToLoad.type)
          + ')')->makeString(', ');
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::convertValuesToCsvForAthena(strs : String[*], types : Any[*]): String[1]
{
  range($types->size())->map(x |
    let literalStr = $strs->at($x)->meta::relational::functions::database::testDataSQLgeneration::convertValuesToCsv($types->at($x));
    $types->at($x)->match([
      d:meta::relational::metamodel::datatype::Date[1] | 'Date ' +  $literalStr,
      t:meta::relational::metamodel::datatype::Timestamp[1] | 'Timestamp ' + $literalStr,
      a:Any[1] | $literalStr
    ]);)->makeString(', ');
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::getLiteralProcessorsForAthena():Map<Type,LiteralProcessor>[1]
{
   newMap([
      pair(StrictDate,     ^LiteralProcessor(format = 'Date(\'%s\')',      transform = {d:StrictDate[1], dbTimeZone:String[0..1] | $d->convertDateToSqlString($dbTimeZone)})),
      pair(DateTime,       ^LiteralProcessor(format = 'Timestamp\'%s\'', transform = {d:DateTime[1], dbTimeZone:String[0..1] | $d->convertDateToSqlString($dbTimeZone)})),
      pair(Date,           ^LiteralProcessor(format = 'Timestamp\'%s\'', transform = {d:Date[1], dbTimeZone:String[0..1] | $d->convertDateToSqlString($dbTimeZone)})),
      pair(Boolean,        ^LiteralProcessor(format = '%s', transform = toString_Any_1__String_1_->literalTransform()))
   ])
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::getDynaFunctionToSqlForAthena(): DynaFunctionToSql[*]
{
  let allStates = allGenerationStates();

  [
    dynaFnToSql('and',                    $allStates,            ^ToSql(format='%s', transform={p:String[*]|$p->makeString(' and ')})),
    dynaFnToSql('booland',                $allStates,            ^ToSql(format='bool_and(%s)')),
    dynaFnToSql('boolor',                 $allStates,            ^ToSql(format='bool_or(%s)')),      
    dynaFnToSql('concat',                 $allStates,            ^ToSql(format='concat%s', transform={p:String[*]|$p->joinStrings('(', ', ', ')')})),
    dynaFnToSql('convertVarchar128',      $allStates,            ^ToSql(format='cast(%s as VARCHAR(128))')),
    dynaFnToSql('count',                  $allStates,            ^ToSql(format='count(%s)', transform={p:String[*]|if($p->isEmpty(),|'*',|$p)})),
    dynaFnToSql('dateDiff',               $allStates,            ^ToSql(format='date_diff(%s,%s,%s)', transform={p:String[*]|[$p->at(2)->replace('\'', '')->processDateDiffDurationUnitForAthena(),$p->at(0),$p->at(1)]})),
    dynaFnToSql('datePart',               $allStates,            ^ToSql(format='date(%s)')),
    dynaFnToSql('dayOfWeekNumber',        $allStates,            ^ToSql(format='mod(day_of_week(%s),7)+1')),
    dynaFnToSql('firstDayOfMonth',        $allStates,            ^ToSql(format='date_trunc(\'month\', %s)')),
    dynaFnToSql('firstDayOfQuarter',      $allStates,            ^ToSql(format='date_trunc(\'quarter\', %s)')),
    dynaFnToSql('firstDayOfThisMonth',    $allStates,            ^ToSql(format='cast(date_trunc(\'month\', current_date) as timestamp)%s', transform={p:String[*] | ''})),
    dynaFnToSql('firstDayOfThisQuarter',  $allStates,            ^ToSql(format='cast(date_trunc(\'quarter\', current_date) as timestamp)%s', transform={p:String[*] | ''})),
    dynaFnToSql('firstDayOfThisYear',     $allStates,            ^ToSql(format='cast(date_trunc(\'year\', current_date) as timestamp)%s', transform={p:String[*] | ''})),
    dynaFnToSql('firstDayOfWeek',         $allStates,            ^ToSql(format='date_trunc(\'week\', %s)')),
    dynaFnToSql('firstDayOfYear',         $allStates,            ^ToSql(format='date_trunc(\'year\', %s)')),
    dynaFnToSql('hour',                   $allStates,            ^ToSql(format='hour(%s)')),
    dynaFnToSql('in',                     $allStates,            ^ToSql(format='%s in %s', transform={p:String[2] | if($p->at(1)->startsWith('(') && $p->at(1)->endsWith(')'), | $p, | [$p->at(0), ('(' + $p->at(1) + ')')])})),
    dynaFnToSql('indexOf',                $allStates,            ^ToSql(format='strpos(%s)', transform={p:String[2] | $p->at(0) + ', ' + $p->at(1)})),
    dynaFnToSql('left',                   $allStates,            ^ToSql(format='substr(%s,1,%s)')),
    dynaFnToSql('length',                 $allStates,            ^ToSql(format='length(%s)')),
    dynaFnToSql('matches',                $allStates,            ^ToSql(format=regexpLikePattern('%s','%s'), transform={p:String[2]|$p->transformRegexpParams()})),
    dynaFnToSql('minute',                 $allStates,            ^ToSql(format='minute(%s)')),
    dynaFnToSql('month',                  $allStates,            ^ToSql(format='month(%s)')),
    dynaFnToSql('monthNumber',            $allStates,            ^ToSql(format='month(%s)')),
    dynaFnToSql('now',                    $allStates,            ^ToSql(format='current_timestamp')),
    dynaFnToSql('or',                     $allStates,            ^ToSql(format='%s', transform={p:String[*]|$p->makeString(' or ')})),
    dynaFnToSql('parseDate',              $allStates,            ^ToSql(format='date_parse(%s,%s)')),
    dynaFnToSql('parseFloat',             $allStates,            ^ToSql(format='cast(%s as double)')),
    dynaFnToSql('parseInteger',           $allStates,            ^ToSql(format='cast(%s as integer)')),
    dynaFnToSql('position',               $allStates,            ^ToSql(format='position(%s in %s)')),
    dynaFnToSql('quarter',                $allStates,            ^ToSql(format='quarter(%s)')),
    dynaFnToSql('quarterNumber',          $allStates,            ^ToSql(format='quarter(%s)')),
    dynaFnToSql('right',                  $allStates,            ^ToSql(format='substr(%s,-1,%s)')),
    dynaFnToSql('round',                  $allStates,            ^ToSql(format='round(%s, %s)', transform=transformRound_String_MANY__String_MANY_)),
    dynaFnToSql('second',                 $allStates,            ^ToSql(format='second(%s)')),
    dynaFnToSql('substring',              $allStates,            ^ToSql(format='substring%s', transform={p:String[*]|$p->joinStrings('(', ', ', ')')})),
    dynaFnToSql('stdDevPopulation',       $allStates,            ^ToSql(format='stddev_pop(%s)')),
    dynaFnToSql('stdDevSample',           $allStates,            ^ToSql(format='stddev_samp(%s)')),
    dynaFnToSql('today',                  $allStates,            ^ToSql(format='cast(current_date as timestamp)')),
    dynaFnToSql('toString',               $allStates,            ^ToSql(format='cast(%s as varchar)')),
    dynaFnToSql('weekOfYear',             $allStates,            ^ToSql(format='week(%s)')),
    dynaFnToSql('year',                   $allStates,            ^ToSql(format='year(%s)'))    
  ];
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::processSelectSQLQueryForAthena(s:SelectSQLQuery[1], sgc:SqlGenerationContext[1], isSubSelect:Boolean[1]):String[1]
{
   $s->processSelectSQLQueryForAthena($sgc.dbConfig, $sgc.format, $sgc.config, $isSubSelect, $sgc.extensions);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::processSelectSQLQueryForAthena(s:SelectSQLQuery[1], dbConfig : DbConfig[1], format:Format[1], config:Config[1], isSubSelect : Boolean[1], extensions:Extension[*]):String[1]
{
  let opStr = if($s.filteringOperation->isEmpty(), |'', |$s.filteringOperation->map(s|$s->processOperation($dbConfig, $format->indent(), ^$config(callingFromFilter = true), $extensions))->filter(s|$s != '')->joinStrings(' <||> '));
  let havingStr = if($s.havingOperation->isEmpty(), |'', |$s.havingOperation->map(s|$s->processOperation($dbConfig, $format->indent(), $config, $extensions))->filter(s|$s != '')->joinStrings(' <||> '));

  assert($s.fromRow == [] && $s.toRow == [], '[unsupported-api] slice/limit operations are not implemented');
  assert($s.groupBy == [] && $havingStr == '', '[unsupported-api] groupBy/having operations are not implemented');

  $format.separator + 'select ' + if($s.distinct == true,|'distinct ',|'') +
  processSelectColumns($s.columns, $dbConfig, $format->indent(), true, $extensions) +
  if($s.data == [],|'',| ' ' + $format.separator + 'from ' + $s.data->toOne()->processJoinTreeNode([], $dbConfig, $format->indent(), [], $extensions)) +
  if (eq($opStr, ''), |'', | ' ' + $format.separator + 'where ' + $opStr) +
  if ($s.orderBy->isEmpty(),|'',| ' ' + $format.separator + 'order by '+ $s.orderBy->processOrderBy($dbConfig, $format->indent(), $config, $extensions)->makeString(','));
}

function <<access.private>> meta::relational::functions::sqlQueryToString::athena::processDateDiffDurationUnitForAthena(durationUnit:String[1]):String[1]
{
   let durationEnumNames = [DurationUnit.YEARS,DurationUnit.MONTHS,DurationUnit.WEEKS,DurationUnit.DAYS,DurationUnit.HOURS,DurationUnit.MINUTES,DurationUnit.SECONDS,DurationUnit.MILLISECONDS]->map(e|$e->toString());
   let durationDbNames = ['\'year\'', '\'month\'', '\'week\'', '\'day\'', '\'hour\'', '\'minute\'', '\'second\'', '\'millisecond\''];
   $durationEnumNames->zip($durationDbNames)->filter(h | $h.first == $durationUnit).second->toOne();
}