// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::functions::sqlstring::*;
import meta::pure::mapping::*;
import meta::relational::functions::asserts::*;
import meta::relational::mapping::*;
import meta::relational::tests::*;
import meta::external::store::relational::tests::*;
import meta::relational::tests::model::simple::*;
import meta::pure::profiles::*;
import meta::relational::functions::sqlstring::*;
import meta::relational::runtime::*;
import meta::external::store::relational::runtime::*;

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSQLStringPrestoSchemaNameShouldContainCatalogName():Boolean[1]
{
   let s = toSQLString(|Person.all(), meta::relational::tests::simpleRelationalMappingPersonForPresto, meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".LASTNAME as "lastName", "root".AGE as "age" from catalog.schema.personTable as "root"', $s);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSQLStringJoinStringsSimpleConcat():Boolean[1]
{
   let fn = {|Person.all()->project([p | $p.firstName + '_' + $p.lastName], ['firstName_lastName'])};

   let prestoSql = toSQLString($fn, meta::relational::tests::simpleRelationalMapping, meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select concat("root".FIRSTNAME, \'_\', "root".LASTNAME) as "firstName_lastName" from personTable as "root"', $prestoSql);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testProcessLiteralForPresto():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | %2016-03-01,
                                                      b | %2016-03-01T12:18:18.976+0200,
                                                      c | true
                                                   ],
                                                   ['a','b','c'])->take(0),
                              simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   print($result);
   assertEquals('select Date(\'2016-03-01\') as "a", Timestamp\'2016-03-01 10:18:18.976\' as "b", true as "c" from personTable as "root" limit 0', $result);
   true;
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSQLStringWithLength():Boolean[1]
{
   let presto = toSQLString(|Person.all()->project(p|length($p.firstName), 'nameLength'), simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select length("root".FIRSTNAME) as "nameLength" from personTable as "root"', $presto);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSQLStringWithPosition():Boolean[1]
{
   let prestoSql = toSQLString(
              |meta::relational::tests::mapping::propertyfunc::model::domain::Person.all()->project(p|$p.firstName, 'firstName'),
               meta::relational::tests::mapping::propertyfunc::model::mapping::PropertyfuncMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());

   assertEquals('select substring("root".FULLNAME, 0, position(\',\' in "root".FULLNAME)-1) as "firstName" from personTable as "root"', $prestoSql);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSQLStringWithStdDevSample():Boolean[1]
{
   [DatabaseType.Presto]->map(db|
      let s = toSQLString(
              |meta::relational::tests::mapping::sqlFunction::model::domain::SqlFunctionDemo.all()->project(p|$p.float1StdDevSample, 'stdDevSample'),
               meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping, $db, meta::relational::extension::relationalExtensions());

      assertEquals('select stddev_samp("root".int1) as "stdDevSample" from dataTable as "root"', $s);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSQLStringWithStdDevPopulation():Boolean[1]
{
   [DatabaseType.Presto]->map(db|
      let s = toSQLString(
              |meta::relational::tests::mapping::sqlFunction::model::domain::SqlFunctionDemo.all()->project(p|$p.float1StdDevPopulation, 'stdDevPopulation'),
               meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping, $db, meta::relational::extension::relationalExtensions());

      assertEquals('select stddev_pop("root".int1) as "stdDevPopulation" from dataTable as "root"', $s);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testGenerateDateDiffExpressionForPrestoForDifferenceInYears():Boolean[1]
{
   let result = toSQLString(|Trade.all()->project([
                                                     t | dateDiff($t.settlementDateTime, now(), DurationUnit.YEARS)
                                                  ],
                                                  ['DiffYears']),
                            simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select date_diff(\'year\',"root".settlementDateTime,current_timestamp) as "DiffYears" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testGenerateDateDiffExpressionForPrestoForDifferenceInMonths():Boolean[1]
{
   let result = toSQLString(|Trade.all()->project([
                                                     t | dateDiff($t.settlementDateTime, now(), DurationUnit.MONTHS)
                                                  ],
                                                  ['DiffMonths']),
                            simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select date_diff(\'month\',"root".settlementDateTime,current_timestamp) as "DiffMonths" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testGenerateDateDiffExpressionForPrestoForDifferenceInWeeks():Boolean[1]
{
   let result = toSQLString(|Trade.all()->project([
                                                     t | dateDiff($t.settlementDateTime, now(), DurationUnit.WEEKS)
                                                  ],
                                                  ['DiffWeeks']),
                            simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select date_diff(\'week\',"root".settlementDateTime,current_timestamp) as "DiffWeeks" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testGenerateDateDiffExpressionForPrestoForDifferenceInDays():Boolean[1]
{
   let result = toSQLString(|Trade.all()->project([
                                                     t | dateDiff($t.settlementDateTime, now(), DurationUnit.DAYS)
                                                  ],
                                                  ['DiffDays']),
                            simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select date_diff(\'day\',"root".settlementDateTime,current_timestamp) as "DiffDays" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSqlGenerationFirstDayOfTimePeriod():Boolean[1]
{
    let result = toSQLString(
             |Trade.all()
                ->project([
                  col(t|$t.date->firstHourOfDay(), 'day'),
                  col(t|$t.date->firstMinuteOfHour(), 'hour'),
                  col(t|$t.date->firstSecondOfMinute(), 'minute'),
                  col(t|$t.date->firstMillisecondOfSecond(), 'second')
                ]),
             simpleRelationalMapping,
             DatabaseType.Presto, meta::relational::extension::relationalExtensions());

    assertEquals('select date_trunc(\'day\', "root".tradeDate) as "day", date_trunc(\'hour\', "root".tradeDate) as "hour", date_trunc(\'minute\', "root".tradeDate) as "minute", date_trunc(\'second\', "root".tradeDate) as "second" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testGenerateDateDiffExpressionForPrestoForDifferenceInHours():Boolean[1]
{
   let result = toSQLString(|Trade.all()->project([
                                                     t | dateDiff($t.settlementDateTime, now(), DurationUnit.HOURS)
                                                  ],
                                                  ['DiffHours']),
                            simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select date_diff(\'hour\',"root".settlementDateTime,current_timestamp) as "DiffHours" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testGenerateDateDiffExpressionForPrestoForDifferenceInMinutes():Boolean[1]
{
   let result = toSQLString(|Trade.all()->project([
                                                     t | dateDiff($t.settlementDateTime, now(), DurationUnit.MINUTES)
                                                  ],
                                                  ['DiffMinutes']),
                            simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select date_diff(\'minute\',"root".settlementDateTime,current_timestamp) as "DiffMinutes" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testGenerateDateDiffExpressionForPrestoForDifferenceInSeconds():Boolean[1]
{
   let result = toSQLString(|Trade.all()->project([
                                                     t | dateDiff($t.settlementDateTime, now(), DurationUnit.SECONDS)
                                                  ],
                                                  ['DiffSeconds']),
                            simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select date_diff(\'second\',"root".settlementDateTime,current_timestamp) as "DiffSeconds" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testGenerateDateDiffExpressionForPrestoForDifferenceInMilliseconds():Boolean[1]
{
   let result = toSQLString(|Trade.all()->project([
                                                     t | dateDiff($t.settlementDateTime, now(), DurationUnit.MILLISECONDS)
                                                  ],
                                                  ['DiffMilliseconds']),
                            simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select date_diff(\'millisecond\',"root".settlementDateTime,current_timestamp) as "DiffMilliseconds" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testDayOfWeekNumber():Boolean[1]
{
   let result = toSQLString(|Trade.all()->project([
                                                     t | dayOfWeekNumber($t.date)
                                                  ],
                                                  ['DayOfWeekNumber']),
                            simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select day_of_week("root".tradeDate) as "DayOfWeekNumber" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testDayOfYear():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Presto, 'select day_of_year("root".tradeDate) as "doy" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|$t.date->dayOfYear(), 'doy')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testTrim():Boolean[1]
{
  let common = 'select ltrim("root".FIRSTNAME) as "ltrim", trim("root".FIRSTNAME) as "trim", rtrim("root".FIRSTNAME) as "rtrim" from personTable as "root"';

   let expected = [
    pair(DatabaseType.Presto, $common)
  ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
        |Person.all()->project([
          a | $a.firstName->ltrim(),
          a | $a.firstName->trim(),
          a | $a.firstName->rtrim()
         ],
         ['ltrim', 'trim', 'rtrim']),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testCbrt():Boolean[1]
{
  let common = 'select cbrt("root".quantity) as "cbrt" from tradeTable as "root"';

   let expected = [
    pair(DatabaseType.Presto, $common)
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
        |Trade.all()->project([
          a | $a.quantity->cbrt()
         ],
         ['cbrt']),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testSqlGenerationForAdjustStrictDateUsageInProjectionForPresto():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | adjust(%2011-12-30, 2, DurationUnit.DAYS)
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select date_add(\'DAY\', 2, Date(\'2011-12-30\')) as "a" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testSqlGenerationForAdjustTimestampUsageInProjectionForPresto():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | adjust(%2011-12-30T08:55:12, 3, DurationUnit.MINUTES)
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select date_add(\'MINUTE\', 3, Timestamp\'2011-12-30 08:55:12\') as "a" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testSqlGenerationForAdjustStrictDateUsageInFiltersForPresto():Boolean[1]
{
   let result = toSQLString(|Trade.all()->filter(it| adjust(%2011-12-30, 2, DurationUnit.DAYS) > %2011-12-30)->project([
                                                      a | 'a'
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select \'a\' as "a" from tradeTable as "root" where date_add(\'DAY\', 2, Date(\'2011-12-30\')) > Date(\'2011-12-30\')', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testSqlGenerationForPreviousDayOfWeekForPresto():Boolean[1]
{
   let result = toSQLString(|Trade.all()->filter(d | $d.date == previousDayOfWeek(DayOfWeek.Friday))->project(x | $x.date, 'date'),
                              simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".tradeDate as "date" from tradeTable as "root" where "root".tradeDate = date_add(\'day\', case when 5 - day_of_week(current_date) >= 0 then 5 - day_of_week(current_date) - 7 else 5 - day_of_week(current_date) end, current_date)', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testSqlGenerationForMostRecentDayOfWeekForPresto():Boolean[1]
{
   let result = toSQLString(|Trade.all()->filter(d | $d.date == mostRecentDayOfWeek(DayOfWeek.Wednesday))->project(x | $x.date, 'date'),
                              simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".tradeDate as "date" from tradeTable as "root" where "root".tradeDate = date_add(\'day\', case when 3 - day_of_week(current_date) > 0 then 3 - day_of_week(current_date) - 7 else 3 - day_of_week(current_date) end, current_date)', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSqlGenerationFirstDayOfMonth():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Presto, 'select date_trunc(\'month\', "root".tradeDate) as "date" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|$t.date->firstDayOfMonth(), 'date')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSqlGenerationFirstDayOfThisMonth():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Presto, 'select date_trunc(\'month\', current_date) as "date" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|firstDayOfThisMonth(), 'date')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSqlGenerationFirstDayOfYear():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Presto, 'select date_trunc(\'year\', "root".tradeDate) as "date" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|$t.date->firstDayOfYear(), 'date')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSqlGenerationFirstDayOfThisYear():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Presto, 'select date_trunc(\'year\', current_date) as "date" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|firstDayOfThisYear(), 'date')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSqlGenerationFirstDayOfThisQuarter():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Presto, 'select date_trunc(\'quarter\', current_date) as "date" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|firstDayOfThisQuarter(), 'date')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSqlGenerationFirstDayOfQuarter_Presto():Boolean[1]
{
   testToSqlGenerationFirstDayOfQuarter(DatabaseType.Presto, 'select date_trunc(\'quarter\', "root".tradeDate) as "date" from tradeTable as "root"');
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSqlGenerationFirstDayOfWeek():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Presto, 'select date_trunc(\'week\', "root".tradeDate) as "date" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|$t.date->firstDayOfWeek(), 'date')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testPrestoDistinctTake():Boolean[1]
{
   let presto = meta::relational::functions::sqlstring::toSQLString(|Person.all()->project(f|$f.firstName, 'firstName')->distinct()->take(10), simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());

   let sql = 'select distinct "root".FIRSTNAME as "firstName" from personTable as "root" limit 10';

   assertSameSQL($sql, $presto);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::presto::testToSQLStringToNumericCasts():Boolean[1]
{
    let result = toSQLString(
     |Trade.all()
        ->project([
          col(t|$t.quantity->toDecimal(), 'decimal'),
          col(t|$t.quantity->toFloat(), 'float')
        ]), simpleRelationalMapping, DatabaseType.Presto, meta::relational::extension::relationalExtensions());

    assertEquals('select cast("root".quantity as decimal) as "decimal", cast("root".quantity as double) as "float" from tradeTable as "root"', $result);
}
