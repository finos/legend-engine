// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::sqlstring::*;
import meta::pure::executionPlan::profiles::*;
import meta::relational::tests::mapping::sqlFunction::model::domain::*;
import meta::relational::tests::mapping::sqlFunction::model::store::*;
import meta::relational::tests::mapping::sqlFunction::model::mapping::*;

import meta::pure::profiles::*;
import meta::pure::tds::*;

import meta::relational::metamodel::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::join::*;
import meta::relational::metamodel::execute::*;
import meta::relational::functions::toDDL::*;
import meta::relational::mapping::*;

import meta::relational::tests::*;
import meta::external::store::relational::tests::*;

import meta::pure::runtime::*;
import meta::core::runtime::*;
import meta::relational::runtime::*;
import meta::external::store::relational::runtime::*;
import meta::relational::runtime::authentication::*;

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::parseDate::testToSQLStringWithParseDateInQueryForPresto():Boolean[1]
{
  let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.string2TimestampStr->parseDate()], ['timestamp']), testMapping, meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
  assertEquals('select date_parse("root".string2date,\'%Y-%m-%d %H:%i:%s\') as "timestamp" from dataTable as "root"',$prestoSql->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::parseDate::testToSQLStringParseDateForPresto():Boolean[1]
{
  let prestoSQL = toSQLString(|SqlFunctionDemo.all()->project([s | $s.string2TimestampFormat], ['timestamp']), testMapping, meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
  assertEquals('select date_parse("root".stringDateTimeFormat,\'%Y-%m-%d %H:%i:%s\') as "timestamp" from dataTable as "root"',$prestoSQL->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::concat::testToSQLStringConcatPresto():Boolean[1]
{
   let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.concatResult], ['concat']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select concat("root".string1, "root".string2) as "concat" from dataTable as "root"',$prestoSql);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::rtrim::testToSQLStringRtrimPresto():Boolean[1]
{
   let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.rtrimResult], ['rtrim']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select rtrim("root".string2) as "rtrim" from dataTable as "root"',$prestoSql);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::ltrim::testToSQLStringLtrimPresto():Boolean[1]
{
   let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.ltrimResult], ['ltrim']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select ltrim("root".string2) as "ltrim" from dataTable as "root"',$prestoSql);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::trim::testTriminNotSybaseASE():Boolean[1]{

   let sPresto = toSQLString(|SqlFunctionDemo.all()->project([s | $s.trimResult], ['trim']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());

   assertEquals('select trim("root".string2) as "trim" from dataTable as "root"',$sPresto);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::left::testToSQLStringLeftPresto():Boolean[1]
{
   let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.string1Left], ['left']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select substr("root".string1,1,2) as "left" from dataTable as "root"',$prestoSql);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::right::testToSQLStringRightPresto():Boolean[1]
{
   let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.string1Right], ['right']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select substr("root".string1,-1,2) as "right" from dataTable as "root"',$prestoSql);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::round::testToSQLStringRoundPresto():Boolean[1]
{
   let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.float1Round], ['round']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select round("root".float1, 0) as "round" from dataTable as "root"',$prestoSql);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::stddev::sample::testToSQLStringStdDevSamplePresto():Boolean[1]
{
   let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.float1StdDevSample], ['stdDevSample']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select stddev_samp("root".int1) as "stdDevSample" from dataTable as "root"',$prestoSql);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::atan2::testToSQLStringAtan2Presto():Boolean[1]
{
   let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.floatATan2Result], ['atan2']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select atan2("root".float1,"root".int1) as "atan2" from dataTable as "root"',$prestoSql);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::mod::testToSQLStringModPresto():Boolean[1]
{
   let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.floatModResult], ['mod']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select mod("root".int1,2) as "mod" from dataTable as "root"',$prestoSql);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::stddev::population::testToSQLStringStdDevPopPresto():Boolean[1]
{
   let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.float1StdDevPopulation], ['stdDevPopulation']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select stddev_pop("root".int1) as "stdDevPopulation" from dataTable as "root"',$prestoSql);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::stringToFloat::testToSQLStringStringToFloatPresto():Boolean[1]
{
   let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.string2Float], ['string2Float']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select cast("root".string2float as double) as "string2Float" from dataTable as "root"',$prestoSql);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::toString::testToSQLStringToStringPresto():Boolean[1]
{
   let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.int1String], ['toString']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select cast("root".int1 as varchar) as "toString" from dataTable as "root"',$prestoSql);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::parseInteger::testToSQLStringParseIntegerinPresto():Boolean[1]
{
   let prestoSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.string2Integer], ['parseInteger']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select cast("root".string2Integer as integer) as "parseInteger" from dataTable as "root"',$prestoSql);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::parseInteger::testToSQLStringDateDiffInPresto():Boolean[1]
{

   let da = meta::pure::functions::date::date(2017,3,1);
   let db = meta::pure::functions::date::date(2017,4,1);
   let s = toSQLString(|SqlFunctionDemo.all()->project([s | dateDiff($da, $db, DurationUnit.DAYS)], ['dateDiff']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select date_diff(\'day\',Date(\'2017-03-01\'),Date(\'2017-04-01\')) as "dateDiff" from dataTable as "root"',$s);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::parseInteger::testToSQLStringConvertVarchar128InPrestoSQL():Boolean[1]
{
   let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.convertVarchar128], ['convertVarchar128']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select cast("root".int1 as VARCHAR(128)) as "convertVarchar128" from dataTable as "root"',$s);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::stringToDate::testToSQLStringconvertToDateinPresto():Boolean[1]
{

   let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.convertToDate1], ['convertToDate']),
                                                       testMapping,
                                                       meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());

   assertEquals('select date( date_parse("root".stringDateFormat,\'%Y-%m-%d\') ) as "convertToDate" from dataTable as "root"', $s);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::stringToDate::testToSQLStringconvertToDateinPrestoUserDefinedFormat():Boolean[1]
{

   let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.convertToDateUserDefinedFormat1], ['convertToDateUserDefinedFormat']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select date( date_parse("root".stringUserDefinedDateFormat,\'MMMYYYY\') ) as "convertToDateUserDefinedFormat" from dataTable as "root"', $s);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::stringToDate::testToSQLStringconvertToDateTimeinPresto():Boolean[1]
{
   let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.convertToDateTime], ['convertToDateTime']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
   assertEquals('select date_parse("root".stringDateTimeFormat,\'yyyy-MM-dd hh:mm:ss.mmm\') as "convertToDateTime" from dataTable as "root"',$s);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::indexOf::testToSQLStringIndexOfinPresto():Boolean[1]
{
    let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.indexOfResult], ['indexOf']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
    assertEquals('select strpos(\'String Random\', \'o\') as "indexOf" from dataTable as "root"',$s);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::hour::testToSQLStringHourinPresto():Boolean[1]
{
    let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.hour], ['hour']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
    assertEquals('select hour("root".dateTime) as "hour" from dataTable as "root"',$s);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::month::testToSQLStringMonthNumberinPresto():Boolean[1]
{
    let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.month], ['month']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
    assertEquals('select month("root".dateTime) as "month" from dataTable as "root"',$s);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::week::testToSQLStringWeekOfYearinPresto():Boolean[1]
{
    let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.week], ['week']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
    assertEquals('select week("root".dateTime) as "week" from dataTable as "root"',$s);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::date::testToSQLStringDatePartinPresto():Boolean[1]
{
    let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.date], ['date']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Presto, meta::relational::extension::relationalExtensions());
    assertEquals('select Date("root".dateTime) as "date" from dataTable as "root"',$s);
}

function <<test.Test>> meta::relational::tests::mapping::sqlFunction::presto::testAdjustDateTranslationInMappingAndQuery():Boolean[1]
{
   let toAssertDbTypes = [DatabaseType.Presto];

   $toAssertDbTypes->map({db |
      let s1 = toSQLString(|SqlFunctionDemo.all()->project([p | $p.adjustDate], ['Dt']), testMapping, $db, meta::relational::extension::relationalExtensions());
      let s2 = toSQLString(|SqlFunctionDemo.all()->project([p | $p.dateTime->adjust(-7, DurationUnit.DAYS)], ['Dt']), testMapping, $db, meta::relational::extension::relationalExtensions());
      assert($s1 == $s2);
   });

   let result = execute(
      |SqlFunctionDemo.all()->project([s | $s.adjustDate], ['Dt']),
      testMapping,
      testDataTypeMappingRuntime(), meta::relational::extension::relationalExtensions());

   assertEquals([%2003-07-12T00:00:00.000000000+0000, %2003-07-13T00:00:00.000000000+0000], $result.values->at(0).rows.values);
   meta::relational::functions::asserts::assertSameSQL('select dateadd(DAY, -7, "root".dateTime) as "Dt" from dataTable as "root"', $result);
}
