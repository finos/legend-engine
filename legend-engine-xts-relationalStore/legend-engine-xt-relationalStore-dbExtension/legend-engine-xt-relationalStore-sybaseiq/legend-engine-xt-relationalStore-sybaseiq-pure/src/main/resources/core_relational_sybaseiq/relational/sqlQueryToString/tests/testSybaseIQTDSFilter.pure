// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::sqlstring::*;
import meta::relational::mapping::*;
import meta::relational::runtime::*;
import meta::external::store::relational::runtime::*;
import meta::relational::tests::*;
import meta::external::store::relational::tests::*;
import meta::pure::metamodel::tds::*;
import meta::pure::profiles::*;
import meta::relational::tests::model::simple::*;

function <<test.Test>> meta::relational::tests::tds::sybaseIQ::testFilterOnDatesSybase():Boolean[1]
{

   let dt = %2015-01-01T00:00:00.000;
   let sql = toSQLString(|Trade.all()->project(t | $t.settlementDateTime, 'settlementDateTime')->filter(r | $r.getDateTime('settlementDateTime') < $dt),
                              simpleRelationalMapping, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".settlementDateTime as "settlementDateTime" from tradeTable as "root" where "root".settlementDateTime < convert(DATETIME, \'2015-01-01 00:00:00.000\', 121)', $sql);
}

function <<test.Test>> meta::relational::tests::tds::sybaseIQ::testFirstNotNullFunction():Boolean[1]
{
   let sql =toSQLString(|Person.all()->project(p|$p.firstName,'firstName')->filter(p | meta::pure::tds::extensions::firstNotNull([$p.getString('firstName')->in(['John','Peter','Anthony']), false]) != false),
      simpleRelationalMapping, meta::relational::runtime::DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".FIRSTNAME as "firstName" from personTable as "root" where (coalesce(case when "root".FIRSTNAME in (\'John\', \'Peter\', \'Anthony\') then \'true\' else \'false\' end, \'false\') <> \'false\' OR coalesce(case when "root".FIRSTNAME in (\'John\', \'Peter\', \'Anthony\') then \'true\' else \'false\' end, \'false\') is null)', $sql);
}

function <<test.Test>> meta::relational::tests::tds::sybaseIQ::testFirstNotNullFunctionWithinWhenClause():Boolean[1]
{
   let sql =toSQLString(|Person.all()->project(p|$p.firstName,'firstName')->filter(p | 
    if(meta::pure::tds::extensions::firstNotNull([$p.getString('firstName')->in(['John','Peter','Anthony']),false ])->toOne(), | true,| false)), simpleRelationalMapping, meta::relational::runtime::DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".FIRSTNAME as "firstName" from personTable as "root" where case when coalesce(case when "root".FIRSTNAME in (\'John\', \'Peter\', \'Anthony\') then \'true\' else \'false\' end, \'false\') = \'true\' then \'true\' else \'false\' end = \'true\'', $sql);
}