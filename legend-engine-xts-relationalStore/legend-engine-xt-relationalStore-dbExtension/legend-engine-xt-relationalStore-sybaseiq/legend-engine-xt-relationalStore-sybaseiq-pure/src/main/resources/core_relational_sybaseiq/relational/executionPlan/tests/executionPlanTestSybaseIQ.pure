// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::alloy::connections::alloy::authentication::*;
import meta::pure::alloy::connections::alloy::specification::*;
import meta::pure::alloy::connections::*;
import meta::external::store::relational::runtime::*;
import meta::pure::mapping::modelToModel::test::createInstances::*;
import meta::relational::postProcessor::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::pure::mapping::modelToModel::test::shared::*;
import meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::mapping::*;
import meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::*;
import meta::pure::mapping::modelToModel::test::enumeration::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::executionPlan::tests::datetime::*;
import meta::relational::tests::tds::tabletds::*;
import meta::pure::mapping::*;
import meta::relational::mapping::*;
import meta::relational::runtime::*;
import meta::external::store::relational::runtime::*;
import meta::relational::tests::mapping::inheritance::relational::*;
import meta::relational::metamodel::join::*;
import meta::relational::tests::tds::tdsJoin::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::executionPlan::tests::*;
import meta::relational::tests::groupBy::datePeriods::mapping::*;
import meta::relational::tests::groupBy::datePeriods::*;
import meta::relational::tests::groupBy::datePeriods::domain::*;
import meta::pure::executionPlan::*;
import meta::relational::tests::*;
import meta::external::store::relational::tests::*;
import meta::relational::tests::model::simple::*;
import meta::pure::runtime::*;
import meta::core::runtime::*;
import meta::pure::mapping::modelToModel::test::shared::src::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::functions::collection::*;
import meta::pure::executionPlan::tests::sybaseIQ::*;

function <<test.Test>> meta::pure::executionPlan::tests::sybaseIQ::testFilterEqualsWithOptionalParameter_SybaseIQ():Boolean[1]
{
   let expectedPlan ='Sequence\n'+
                     '(\n'+
                     '  type = TDS[(Time, Integer, INT, "")]\n'+
                     '  (\n'+
                     '    FunctionParametersValidationNode\n'+
                     '    (\n'+
                     '      functionParameters = [optionalID:String[0..1], optionalActive:Boolean[0..1]]\n'+
                     '    )\n'+
                     '    Relational\n'+
                     '    (\n'+
                     '      type = TDS[(Time, Integer, INT, "")]\n'+
                     '      resultColumns = [("Time", INT)]\n'+
                     '      sql = select "root"."time" as "Time" from interactionTable as "root" where ((${optionalVarPlaceHolderOperationSelector(optionalID![], \'"root".ID = ${varPlaceHolderToString(optionalID![] "\\\'" "\\\'" {"\\\'" : "\\\'\\\'"} "null")}\', \'"root".ID is null\')}) and (${optionalVarPlaceHolderOperationSelector(optionalActive![], \'case when "root"."active" = \\\'Y\\\' then \\\'true\\\' else \\\'false\\\' end = ${varPlaceHolderToString(optionalActive![] "\\\'" "\\\'" {} "null")}\', \'case when "root"."active" = \\\'Y\\\' then \\\'true\\\' else \\\'false\\\' end is null\')}))\n'+
                     '      connection = DatabaseConnection(type = "SybaseIQ")\n'+
                     '    )\n'+
                     '  )\n'+
                     ')\n';
   assertPlanGenerationForOptionalParameter(DatabaseType.SybaseIQ, $expectedPlan);
}

function <<test.Test>> meta::pure::executionPlan::tests::sybaseIQ::testGreaterThanLessThanEqualsWithOptionalParameter_SybaseIQ():Boolean[1]
{
   let func = {optionalAgeLowerLimit: Integer[0..1], optionalAgeHigherLimit: Integer[0..1]|Person.all()->filter(p|$p.age>$optionalAgeLowerLimit && ($p.age<=$optionalAgeHigherLimit))->project(col(a|$a.firstName, 'firstName'))};
   let expectedPlan ='Sequence\n'+
                     '(\n'+
                     '  type = TDS[(firstName, String, VARCHAR(200), "")]\n'+
                     '  (\n'+
                     '    FunctionParametersValidationNode\n'+
                     '    (\n'+
                     '      functionParameters = [optionalAgeLowerLimit:Integer[0..1], optionalAgeHigherLimit:Integer[0..1]]\n'+
                     '    )\n'+
                     '    Relational\n'+
                     '    (\n'+
                     '      type = TDS[(firstName, String, VARCHAR(200), "")]\n'+
                     '      resultColumns = [("firstName", VARCHAR(200))]\n'+
                     '      sql = select "root".FIRSTNAME as "firstName" from personTable as "root" where ((("root".AGE is not null and ${varPlaceHolderToString(optionalAgeLowerLimit![] "" "" {} "null")} is not null) and "root".AGE > ${varPlaceHolderToString(optionalAgeLowerLimit![] "" "" {} "null")}) and (("root".AGE is not null and ${varPlaceHolderToString(optionalAgeHigherLimit![] "" "" {} "null")} is not null) and "root".AGE <= ${varPlaceHolderToString(optionalAgeHigherLimit![] "" "" {} "null")}))\n'+
                     '      connection = DatabaseConnection(type = "SybaseIQ")\n'+
                     '    )\n'+
                     '  )\n'+
                     ')\n';
   assertPlanGenerationForOptionalParameterWithGreaterThanLessThan($func, DatabaseType.SybaseIQ, $expectedPlan);
}


function <<test.Test>> meta::pure::executionPlan::tests::sybaseIQ::testLessThanGreaterThanEqualsWithOptionalParameter_SybaseIQ():Boolean[1]
{
   let func = {optionalAgeLowerLimit: Integer[0..1], optionalAgeHigherLimit: Integer[0..1]|Person.all()->filter(p|$p.age<$optionalAgeLowerLimit && ($p.age>=$optionalAgeHigherLimit))->project(col(a|$a.firstName, 'firstName'))};
   let expectedPlan ='Sequence\n'+
                     '(\n'+
                     '  type = TDS[(firstName, String, VARCHAR(200), "")]\n'+
                     '  (\n'+
                     '    FunctionParametersValidationNode\n'+
                     '    (\n'+
                     '      functionParameters = [optionalAgeLowerLimit:Integer[0..1], optionalAgeHigherLimit:Integer[0..1]]\n'+
                     '    )\n'+
                     '    Relational\n'+
                     '    (\n'+
                     '      type = TDS[(firstName, String, VARCHAR(200), "")]\n'+
                     '      resultColumns = [("firstName", VARCHAR(200))]\n'+
                     '      sql = select "root".FIRSTNAME as "firstName" from personTable as "root" where ((("root".AGE is not null and ${varPlaceHolderToString(optionalAgeLowerLimit![] "" "" {} "null")} is not null) and "root".AGE < ${varPlaceHolderToString(optionalAgeLowerLimit![] "" "" {} "null")}) and (("root".AGE is not null and ${varPlaceHolderToString(optionalAgeHigherLimit![] "" "" {} "null")} is not null) and "root".AGE >= ${varPlaceHolderToString(optionalAgeHigherLimit![] "" "" {} "null")}))\n'+
                     '      connection = DatabaseConnection(type = "SybaseIQ")\n'+
                     '    )\n'+
                     '  )\n'+
                     ')\n';
   assertPlanGenerationForOptionalParameterWithGreaterThanLessThan($func, DatabaseType.SybaseIQ, $expectedPlan);
}

function meta::pure::executionPlan::tests::sybaseIQ::twoDBRunTimeSybaseIQ():meta::core::runtime::Runtime[1]
{
   ^meta::core::runtime::Runtime
   (
      connectionStores = [^meta::core::runtime::ConnectionStore(
                        element = dbInc,
                        connection=^TestDatabaseConnection(
                        type=DatabaseType.SybaseIQ
                    )),^meta::core::runtime::ConnectionStore(
                        element = database2,
                        connection=^TestDatabaseConnection(
                        type=DatabaseType.SybaseIQ
                    ))]
   );
}

function <<test.Test>> meta::pure::executionPlan::tests::sybaseIQ::twoDBTestSpaceIdentifierSybaseIQ():Boolean[1]
{
    let result = executionPlan({|
        testJoinTDS_Person.all()->meta::pure::tds::project([col(p|$p.firstName, 'first name'), col(p|$p.employerID, 'eID')])->join(testJoinTDS_Firm.all()->project([col(p|$p.firmID, 'fID'),
        col(p|$p.legalName, 'legalName')]), JoinType.INNER, {a,b|$a.getInteger('eID') == $b.getInteger('fID');})->filter( f| $f.getString('first name')=='Adam' &&   $f.getString('legalName')=='Firm X')
        ;}, meta::relational::tests::tds::tdsJoin::testJoinTDSMappingTwoDatabase, twoDBRunTimeSybaseIQ(), meta::relational::extension::relationalExtensions());

    assertEquals('Sequence\n'+
    '(\n'+
     '  type = TDS[(first name, String, VARCHAR(200), \"\"), (eID, Integer, INT, \"\"), (fID, Integer, INT, \"\"), (legalName, String, VARCHAR(200), \"\")]\n'+
     '  (\n'+
     '    Allocation\n'+
     '    (\n'+
     '      type = TDS[(first name, String, VARCHAR(200), \"\"), (eID, Integer, INT, \"\")]\n'+
     '      name = tdsVar_0\n'+
     '      value = \n'+
     '        (\n'+
     '          Relational\n'+
     '          (\n'+
     '            type = TDS[(first name, String, VARCHAR(200), \"\"), (eID, Integer, INT, \"\")]\n'+
     '            resultColumns = [("first name", VARCHAR(200)), ("eID", INT)]\n'+
     '            sql = select \"root\".FIRSTNAME as \"first name\", \"root\".FIRMID as \"eID\" from personTable as \"root\"\n'+
     '            connection = TestDatabaseConnection(type = \"SybaseIQ\")\n'+
     '          )\n'+
     '        )\n'+
     '    )\n'+
     '    Relational\n'+
     '    (\n'+
     '      type = TDS[(first name, String, VARCHAR(200), \"\"), (eID, Integer, INT, \"\"), (fID, Integer, INT, \"\"), (legalName, String, VARCHAR(200), \"\")]\n'+
     '      resultColumns = [("first name", INT), ("eID", INT), ("fID", INT), ("legalName", VARCHAR(200))]\n'+
     '      sql = select "tdsvar_0_0"."first name" as "first name", "tdsvar_0_0".eID as "eID", "tdsvar_0_0"."fID" as "fID", "tdsvar_0_0"."legalName" as "legalName" from (select * from (${tdsVar_0}) as "tdsvar_0_1" inner join (select "root".ID as "fID", "root".LEGALNAME as "legalName" from firmTable as "root") as "firmtable_0" on ("tdsvar_0_1".eID = "firmtable_0"."fID")) as "tdsvar_0_0" where ("tdsvar_0_0"."first name" = \'Adam\' and "tdsvar_0_0"."legalName" = \'Firm X\')\n'+
     '      connection = TestDatabaseConnection(type = \"SybaseIQ\")\n'+
     '    )\n'+
     '  )\n'+
    ')\n'
    , $result->planToString(meta::relational::extension::relationalExtensions()));
}

function <<test.Test>> meta::pure::executionPlan::tests::sybaseIQ::twoDBTestSlashSybaseIQ():Boolean[1]
{
    let result = executionPlan({|
        testJoinTDS_Person.all()->meta::pure::tds::project([col(p|$p.firstName, 'first/name'), col(p|$p.employerID, 'eID')])->join(testJoinTDS_Firm.all()->project([col(p|$p.firmID, 'fID'),
        col(p|$p.legalName, 'legalName')]), JoinType.INNER, {a,b|$a.getInteger('eID') == $b.getInteger('fID');})->filter( f| $f.getString('first/name')=='Adam' &&   $f.getString('legalName')=='Firm X')
        ;}, meta::relational::tests::tds::tdsJoin::testJoinTDSMappingTwoDatabase, twoDBRunTimeSybaseIQ(), meta::relational::extension::relationalExtensions());

    assertEquals('Sequence\n'+
    '(\n'+
     '  type = TDS[(first/name, String, VARCHAR(200), \"\"), (eID, Integer, INT, \"\"), (fID, Integer, INT, \"\"), (legalName, String, VARCHAR(200), \"\")]\n'+
     '  (\n'+
     '    Allocation\n'+
     '    (\n'+
     '      type = TDS[(first/name, String, VARCHAR(200), \"\"), (eID, Integer, INT, \"\")]\n'+
     '      name = tdsVar_0\n'+
     '      value = \n'+
     '        (\n'+
     '          Relational\n'+
     '          (\n'+
     '            type = TDS[(first/name, String, VARCHAR(200), \"\"), (eID, Integer, INT, \"\")]\n'+
     '            resultColumns = [("first/name", VARCHAR(200)), ("eID", INT)]\n'+
     '            sql = select \"root\".FIRSTNAME as \"first/name\", \"root\".FIRMID as \"eID\" from personTable as \"root\"\n'+
     '            connection = TestDatabaseConnection(type = \"SybaseIQ\")\n'+
     '          )\n'+
     '        )\n'+
     '    )\n'+
     '    Relational\n'+
     '    (\n'+
     '      type = TDS[(first/name, String, VARCHAR(200), \"\"), (eID, Integer, INT, \"\"), (fID, Integer, INT, \"\"), (legalName, String, VARCHAR(200), \"\")]\n'+
     '      resultColumns = [("first/name", INT), ("eID", INT), ("fID", INT), ("legalName", VARCHAR(200))]\n'+
     '      sql = select "tdsvar_0_0"."first/name" as "first/name", "tdsvar_0_0".eID as "eID", "tdsvar_0_0"."fID" as "fID", "tdsvar_0_0"."legalName" as "legalName" from (select * from (${tdsVar_0}) as "tdsvar_0_1" inner join (select "root".ID as "fID", "root".LEGALNAME as "legalName" from firmTable as "root") as "firmtable_0" on ("tdsvar_0_1".eID = "firmtable_0"."fID")) as "tdsvar_0_0" where ("tdsvar_0_0"."first/name" = \'Adam\' and "tdsvar_0_0"."legalName" = \'Firm X\')\n'+
     '      connection = TestDatabaseConnection(type = \"SybaseIQ\")\n'+
     '    )\n'+
     '  )\n'+
    ')\n'
    , $result->planToString(meta::relational::extension::relationalExtensions()));
}

function <<test.Test>> meta::pure::executionPlan::tests::sybaseIQ::testExecutionPlanGenerationForMultipleInWithCollectionAndConstantInputs() : Boolean[1]
{
   let res = executionPlan(
      {name:String[*] |_Person.all()->filter(x | $x.fullName->in($name))->filter(x | $x.fullName->in(['A', 'B']))->project([x | $x.fullName], ['fullName']);},
      meta::pure::mapping::modelToModel::test::shared::relationalMapping, ^Runtime(connectionStores=^ConnectionStore(element = relationalDB, connection=^DatabaseConnection(type=DatabaseType.SybaseIQ))), meta::relational::extension::relationalExtensions()
   );
   let expected = 'RelationalBlockExecutionNode(type=TDS[(fullName,String,VARCHAR(1000),"")](FunctionParametersValidationNode(functionParameters=[name:String[*]])Allocation(type=Stringname=inFilterClause_namevalue=(FreeMarkerConditionalExecutionNode(type=Stringcondition=${(instanceOf(name,"Stream")||((collectionSize(name![])?number)>250000))?c}trueBlock=(Sequence(type=String(CreateAndPopulateTempTable(type=VoidinputVarNames=[name]tempTableName=tempTableForIn_nametempTableColumns=[(ColumnForStoringInCollection,VARCHAR(200))]connection=DatabaseConnection(type="SybaseIQ"))Constant(type=Stringvalues=[select"temptableforin_name_0".ColumnForStoringInCollectionasColumnForStoringInCollectionfromtempTableForIn_nameas"temptableforin_name_0"]))))falseBlock=(Constant(type=Stringvalues=[${renderCollection(name![]",""\'""\'"{"\'":"\'\'"}"null")}])))))Relational(type=TDS[(fullName,String,VARCHAR(1000),"")]resultColumns=[("fullName",VARCHAR(1000))]sql=select"root".fullnameas"fullName"fromPersonas"root"where"root".fullnamein(${inFilterClause_name})and"root".fullnamein(\'A\',\'B\')connection=DatabaseConnection(type="SybaseIQ"))))';
   assertEquals($expected, $res->planToStringWithoutFormatting(meta::relational::extension::relationalExtensions()));
}
