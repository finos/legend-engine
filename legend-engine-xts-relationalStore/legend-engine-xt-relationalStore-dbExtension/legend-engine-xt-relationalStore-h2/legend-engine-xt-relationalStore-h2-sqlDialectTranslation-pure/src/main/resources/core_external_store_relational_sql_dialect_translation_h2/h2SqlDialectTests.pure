// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::query::sql::metamodel::extension::*;
import meta::external::store::relational::sqlDialectTranslation::*;
import meta::external::store::relational::sqlDialectTranslation::h2::*;
import meta::external::store::relational::sqlDialectTranslation::h2::tests::*;
import meta::external::store::relational::sqlDialectTranslation::h2::*;
import meta::external::store::relational::sqlDialectTranslation::utils::*;
import meta::external::store::relational::sqlDialectTranslation::sqlTyping::typeInference::*;

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::h2::tests::testDialect(): SqlDialect[1]
{
  h2SqlDialect()
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::h2::tests::testSqlDialectTranslationState(): SqlDialectTranslationState[1]
{
  ^SqlDialectTranslationState
  (
    level = 0
  )
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::h2::tests::testSqlDialectTranslationConfig(pretty: Boolean[1]): SqlDialectTranslationConfig[1]
{
  meta::external::store::relational::sqlDialectTranslation::h2::tests::testSqlDialectTranslationConfig($pretty, false)
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::h2::tests::testSqlDialectTranslationConfig(pretty: Boolean[1], quoteIdentifiers: Boolean[1]): SqlDialectTranslationConfig[1]
{
  meta::external::store::relational::sqlDialectTranslation::h2::tests::testSqlDialectTranslationConfig($pretty, $quoteIdentifiers, []);
}

function <<access.private>> meta::external::store::relational::sqlDialectTranslation::h2::tests::testSqlDialectTranslationConfig(pretty: Boolean[1], quoteIdentifiers: Boolean[1], dbTimeZone:String[0..1]): SqlDialectTranslationConfig[1]
{
  ^SqlDialectTranslationConfig
  (
    dbConfig = ^DbConfig(dbType = 'H2', dbTimeZone = $dbTimeZone,      quoteIdentifiers = $quoteIdentifiers),
    formatConfig = ^FormatConfig(pretty = $pretty, upperCaseKeywords = true),
    functionRegistry = meta::external::store::relational::sqlDialectTranslation::functionRegistry::sqlFunctionRegistry()
  )
}

function <<test.Test>> meta::external::store::relational::sqlDialectTranslation::h2::tests::testQuerySpecificationProcessingForH2(): Boolean[1]
{
  let dialect = testDialect();
  let state = testSqlDialectTranslationState();
  let config = testSqlDialectTranslationConfig(false);

  let q1 = ^ExtendedQuerySpecification(
    select = ^Select(selectItems = [^SingleColumn(expression = ^ArithmeticExpression(left = literal(101), right = literal(102), type = ArithmeticType.ADD))])
  );
  assertEquals('SELECT 101 + 102', $dialect->executeNodeProcessor($q1, $state, $config));

  let tblA = ^AliasedRelation(relation = ^Table(name = ^QualifiedName(parts = ['db', 'schema', 'table_a'])), alias = '"root"');
  let tblB = ^AliasedRelation(relation = ^Table(name = ^QualifiedName(parts = ['db', 'schema', 'table_b'])), alias = '"t_b"');
  let rel = ^Join(left = $tblA, right = $tblB, type = JoinType.INNER, criteria = ^JoinOn(expression = ^ComparisonExpression(left = literal(101), right = literal(102), operator = ComparisonOperator.LESS_THAN)));

  let q2 = ^$q1(
    select = ^Select(selectItems = [^AllColumns(prefix = '"root"')]),
    from = $rel
  );
  assertEquals(
    'SELECT "root".* FROM db.schema.table_a AS "root" INNER JOIN db.schema.table_b AS "t_b" ON (101 < 102)',
    $dialect->executeNodeProcessor($q2, $state, $config)
  );

	let q3 = ^$q2(where = ^ComparisonExpression(left = literal(103), right = literal(104), operator = ComparisonOperator.LESS_THAN));
	assertEquals(
    'SELECT "root".* FROM db.schema.table_a AS "root" INNER JOIN db.schema.table_b AS "t_b" ON (101 < 102) WHERE 103 < 104',
    $dialect->executeNodeProcessor($q3, $state, $config)
  );	

	let q4 = ^$q3(
    groupBy = [
      ^QualifiedNameReference(name = ^QualifiedName(parts = ['"root"', 'c1'])),
      ^QualifiedNameReference(name = ^QualifiedName(parts = ['"root"', 'c2']))
    ]
  );
	assertEquals(
    'SELECT "root".* FROM db.schema.table_a AS "root" INNER JOIN db.schema.table_b AS "t_b" ON (101 < 102) WHERE 103 < 104 ' +
    'GROUP BY "root".c1, "root".c2',
    $dialect->executeNodeProcessor($q4, $state, $config)
  );	

	let q5 = ^$q4(having = ^IsNotNullPredicate(value = ^QualifiedNameReference(name = ^QualifiedName(parts = ['c1']))));
	assertEquals(
    'SELECT "root".* FROM db.schema.table_a AS "root" INNER JOIN db.schema.table_b AS "t_b" ON (101 < 102) WHERE 103 < 104 ' +
    'GROUP BY "root".c1, "root".c2 HAVING c1 IS NOT NULL',
    $dialect->executeNodeProcessor($q5, $state, $config)
  );	

	let q6 = ^$q5(
    orderBy = [
      ^SortItem(sortKey = ^QualifiedNameReference(name = ^QualifiedName(parts = ['c1'])), ordering = SortItemOrdering.DESCENDING, nullOrdering = SortItemNullOrdering.FIRST),
      ^SortItem(sortKey = ^QualifiedNameReference(name = ^QualifiedName(parts = ['c2'])), ordering = SortItemOrdering.ASCENDING, nullOrdering = SortItemNullOrdering.LAST)
    ]
  );
	assertEquals(
    'SELECT "root".* FROM db.schema.table_a AS "root" INNER JOIN db.schema.table_b AS "t_b" ON (101 < 102) WHERE 103 < 104 ' +
    'GROUP BY "root".c1, "root".c2 HAVING c1 IS NOT NULL ' +
    'ORDER BY c1 DESC NULLS FIRST, c2 ASC NULLS LAST',
    $dialect->executeNodeProcessor($q6, $state, $config)
  );	

	let q7 = ^$q6(limit = literal(10));
	assertEquals(
    'SELECT TOP 10 "root".* FROM db.schema.table_a AS "root" INNER JOIN db.schema.table_b AS "t_b" ON (101 < 102) WHERE 103 < 104 ' +
    'GROUP BY "root".c1, "root".c2 HAVING c1 IS NOT NULL ' +
    'ORDER BY c1 DESC NULLS FIRST, c2 ASC NULLS LAST',
    $dialect->executeNodeProcessor($q7, $state, $config)
  );	

	let q8 = ^$q7(offset = literal(5));
	assertEquals(
    'SELECT "root".* FROM db.schema.table_a AS "root" INNER JOIN db.schema.table_b AS "t_b" ON (101 < 102) WHERE 103 < 104 ' +
    'GROUP BY "root".c1, "root".c2 HAVING c1 IS NOT NULL ' +
    'ORDER BY c1 DESC NULLS FIRST, c2 ASC NULLS LAST OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY',
    $dialect->executeNodeProcessor($q8, $state, $config)
  );

  let q9 = ^$q6(offset = literal(5));
	assertEquals(
    'SELECT "root".* FROM db.schema.table_a AS "root" INNER JOIN db.schema.table_b AS "t_b" ON (101 < 102) WHERE 103 < 104 ' +
    'GROUP BY "root".c1, "root".c2 HAVING c1 IS NOT NULL ' +
    'ORDER BY c1 DESC NULLS FIRST, c2 ASC NULLS LAST OFFSET 5 ROWS',
    $dialect->executeNodeProcessor($q9, $state, $config)
  );
}

function <<test.Test>> meta::external::store::relational::sqlDialectTranslation::h2::tests::testLeftForH2(): Boolean[1]
{
  let dialect = testDialect();
  let state = testSqlDialectTranslationState();
  let config = testSqlDialectTranslationConfig(false);
  assertEquals('left(\'abcd\', char_length(\'xy\'))', $dialect->executeNodeProcessor(
    ^FunctionCall(
      name = ^QualifiedName(parts = 'left'),
      arguments = [
        literal('abcd'),
        ^FunctionCall(
          name = ^QualifiedName(parts = 'char_length'),
          arguments = [literal('xy')]
        )
      ]
    )->inferTypes($config.functionRegistry), $state, $config));
}

function <<test.Test>> meta::external::store::relational::sqlDialectTranslation::h2::tests::testRightForH2(): Boolean[1]
{
  let dialect = testDialect();
  let state = testSqlDialectTranslationState();
  let config = testSqlDialectTranslationConfig(false);
  assertEquals('right(\'defgh\', char_length(\'ghij\'))', $dialect->executeNodeProcessor(
    ^FunctionCall(
      name = ^QualifiedName(parts = 'right'),
      arguments = [
        literal('defgh'),
        ^FunctionCall(
          name = ^QualifiedName(parts = 'char_length'),
          arguments = [literal('ghij')]
        )
      ]
    )->inferTypes($config.functionRegistry), $state, $config));
}

function <<test.Test>> meta::external::store::relational::sqlDialectTranslation::h2::tests::testQualifyQueryProcessingForH2(): Boolean[1]
{
  let dialect = testDialect();
  let state = testSqlDialectTranslationState();
  let config = testSqlDialectTranslationConfig(false);

  assertEquals('SELECT dept, sum(id) OVER (PARTITION BY dept) AS sumCol FROM testTable QUALIFY sum(id) OVER (PARTITION BY dept) > 3', $dialect->executeNodeProcessor(
    ^Query(
      queryBody = ^ExtendedQuerySpecification(
        select = ^Select(
          distinct = false,
          selectItems = [
            ^SingleColumn(expression = ^QualifiedNameReference(name = ^QualifiedName(parts = 'dept'))),
            ^SingleColumn(
              expression = ^FunctionCall(
                arguments = ^QualifiedNameReference(name = ^QualifiedName(parts = 'id')),
                distinct = false,
                name = ^QualifiedName(parts = 'sum'),
                window = ^meta::external::query::sql::metamodel::Window(partitions = ^QualifiedNameReference(name = ^QualifiedName(parts = 'dept')))
              ),
              alias = 'sumCol'
            )
        ]),
        from = ^Table(name = ^QualifiedName(parts = 'testTable')),
        qualify = ^ComparisonExpression(
          left = ^FunctionCall(
            arguments = ^QualifiedNameReference(name = ^QualifiedName(parts = 'id')),
            distinct = false,
            name = ^QualifiedName(parts = 'sum'),
            window = ^meta::external::query::sql::metamodel::Window(partitions = ^QualifiedNameReference(name = ^QualifiedName(parts = 'dept')))
          ),
          operator = ComparisonOperator.GREATER_THAN,
          right = literal(3)
        )
      )
    )->inferTypes($config.functionRegistry), $state, $config)
  );
}
