// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::functions::sqlstring::*;
import meta::pure::mapping::*;
import meta::relational::functions::asserts::*;
import meta::relational::mapping::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
import meta::pure::profiles::*;
import meta::relational::functions::sqlstring::*;
import meta::relational::runtime::*;

function <<test.Test>> meta::relational::tests::functions::sqlstring::sparkSQL::testProcessLiteralForSpark():Boolean[1]
{
  let result = toSQLString(|Person.all()->project([
                                                     a | 'String',
                                                     b | %2016-03-01,
                                                     c | %2016-03-01T12:18:18.976+0200,
                                                     d | 1,
                                                     e | 1.1
                                                  ],
                                                  ['a','b','c','d', 'e'])->take(0),
                             simpleRelationalMapping, DatabaseType.SparkSQL, meta::relational::extension::relationalExtensions());
  assertEquals('select top 0 \'String\' as "a", convert(DATE, \'2016-03-01\', 121) as "b", convert(DATETIME, \'2016-03-01 10:18:18.976\', 121) as "c", 1 as "d", 1.1 as "e" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::functions::sqlstring::sparkSQL::testToSQLStringWithLength():Boolean[1]
{
  [DatabaseType.SparkSQL]->map(db|
     let s = toSQLString(|Person.all()->project(p|length($p.firstName), 'nameLength'), simpleRelationalMapping, $db, meta::relational::extension::relationalExtensions());
     assertEquals('select char_length("root".FIRSTNAME) as "nameLength" from personTable as "root"', $s);
  );
}
