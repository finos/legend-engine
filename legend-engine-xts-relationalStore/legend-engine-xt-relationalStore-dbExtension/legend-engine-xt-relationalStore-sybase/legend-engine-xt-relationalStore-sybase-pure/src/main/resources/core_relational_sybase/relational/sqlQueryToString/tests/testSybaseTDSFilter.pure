// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::sqlstring::*;
import meta::relational::mapping::*;
import meta::relational::runtime::*;
import meta::external::store::relational::runtime::*;
import meta::relational::tests::*;
import meta::external::store::relational::tests::*;
import meta::pure::metamodel::tds::*;
import meta::pure::profiles::*;
import meta::relational::tests::model::simple::*;

function <<test.Test>> meta::relational::tests::tds::sybase::testFilterAfterGroupByWithSameColForGroupByAggAndFilterOnRootClassSybase():Boolean[1]
{
   let f = {|Person.all()->groupBy([p|$p.firstName->length()],agg(x|$x.firstName,y|$y->joinStrings(',')),['firstNameLength', 'firstNamesWithSameLength'])->filter({l|$l.getInteger('firstNameLength') == 7})};
   let sql = toSQLString($f,simpleRelationalMapping,DatabaseType.Sybase, meta::relational::extension::relationalExtensions());
   assertEquals('select char_length("root".FIRSTNAME) as "firstNameLength", list("root".FIRSTNAME,\',\') as "firstNamesWithSameLength" from personTable as "root" group by char_length("root".FIRSTNAME) having char_length("root".FIRSTNAME) = 7', $sql);
}

function <<test.Test>> meta::relational::tests::tds::sybase::testFilterAfterGroupByWithFilterOnAllProjectColumnsSybase():Boolean[1]
{
   let f = {|Person.all()->groupBy([p|$p.firstName->length()],agg(x|$x.firstName,y|$y->joinStrings(',')),['firstNameLength', 'firstNamesWithSameLength'])->filter({l|$l.getInteger('firstNameLength') == 7 || $l.getString('firstNamesWithSameLength')->contains('David')})};
   let sql = toSQLString($f,simpleRelationalMapping,DatabaseType.Sybase, meta::relational::extension::relationalExtensions());
   assertEquals('select char_length("root".FIRSTNAME) as "firstNameLength", list("root".FIRSTNAME,\',\') as "firstNamesWithSameLength" from personTable as "root" group by char_length("root".FIRSTNAME) having (char_length("root".FIRSTNAME) = 7 or list("root".FIRSTNAME,\',\') like \'%David%\')', $sql);
}
