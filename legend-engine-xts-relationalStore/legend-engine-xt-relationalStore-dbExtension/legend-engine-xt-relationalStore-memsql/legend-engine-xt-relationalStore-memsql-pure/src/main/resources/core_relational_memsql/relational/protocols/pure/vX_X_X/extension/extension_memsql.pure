// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function <<meta::protocols::pure::vX_X_X::extension::RelationalModule.SerializerExtension>>
meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::memsqlSerializerExtension(): meta::protocols::pure::vX_X_X::extension::RelationalModuleSerializerExtension[1]
{
  ^meta::protocols::pure::vX_X_X::extension::RelationalModuleSerializerExtension(
    module = 'memsql',
    transfers_connection_transformAuthenticationStrategy = [
        s:meta::pure::alloy::connections::alloy::authentication::MemsqlPublicAuthenticationStrategy[1] |
                  ^meta::protocols::pure::vX_X_X::metamodel::store::relational::connection::alloy::authentication::MemsqlPublicAuthenticationStrategy(
                      _type = 'memsqlPublic',
                      privateKeyVaultReference = $s.privateKeyVaultReference,
                      passPhraseVaultReference = $s.passPhraseVaultReference,
                      publicUserName = $s.publicUserName
                  )
    ],
    transfers_connection_transformDatasourceSpecification = [
        s:meta::pure::alloy::connections::alloy::specification::MemsqlDatasourceSpecification[1] |
                  ^meta::protocols::pure::vX_X_X::metamodel::store::relational::connection::alloy::specification::MemsqlDatasourceSpecification(
                     _type = 'memsql',
                     host = $s.host,
                     port = $s.port,
                     databaseName = $s.databaseName,
                     useSsl = $s.useSsl
                 )
    ],
    reverse_transfers_typeLookups = [
     pair('memsql', 'MemsqlDatasourceSpecification'),
     pair('memsqlPublic', 'MemsqlPublicAuthenticationStrategy')
    ],
    reverse_transfers_connection_transformAuthenticationStrategy = [
      s:meta::protocols::pure::vX_X_X::metamodel::store::relational::connection::alloy::authentication::MemsqlPublicAuthenticationStrategy[1] |
        ^meta::pure::alloy::connections::alloy::authentication::MemsqlPublicAuthenticationStrategy(
            privateKeyVaultReference = $s.privateKeyVaultReference,
            passPhraseVaultReference = $s.passPhraseVaultReference,
            publicUserName = $s.publicUserName
        )
    ],
    reverse_transfers_connection_transformDatasourceSpecification = [
    s:meta::protocols::pure::vX_X_X::metamodel::store::relational::connection::alloy::specification::MemsqlDatasourceSpecification[1] |
            ^meta::pure::alloy::connections::alloy::specification::MemsqlDatasourceSpecification(
                     host = $s.host,
                     port = $s.port,
                     databaseName = $s.databaseName,
                     useSsl = $s.useSsl
            )
    ]
  )
}
