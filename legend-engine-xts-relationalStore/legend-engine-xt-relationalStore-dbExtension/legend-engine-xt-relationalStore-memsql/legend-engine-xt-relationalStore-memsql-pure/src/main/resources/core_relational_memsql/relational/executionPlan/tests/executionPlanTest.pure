// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::memsql::tests::executionPlan::*;
import meta::relational::tests::model::simple::*;
import meta::core::runtime::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::tests::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::mapping::modelToModel::test::shared::*;
import meta::pure::mapping::modelToModel::test::shared::src::*;
import meta::external::store::relational::runtime::*;
import meta::relational::runtime::*;

function <<test.Test>> meta::relational::memsql::tests::executionPlan::testFilterEqualsWithOptionalParameter_MemSQL():Boolean[1]
{
   let expectedPlan ='Sequence\n'+
                     '(\n'+
                     '  type = TDS[(Time, Integer, INT, "")]\n'+
                     '  (\n'+
                     '    FunctionParametersValidationNode\n'+
                     '    (\n'+
                     '      functionParameters = [optionalID:String[0..1], optionalActive:Boolean[0..1]]\n'+
                     '    )\n'+
                     '    Relational\n'+
                     '    (\n'+
                     '      type = TDS[(Time, Integer, INT, "")]\n'+
                     '      resultColumns = [("Time", INT)]\n'+
                     '      sql = select `root`.time as `Time` from interactionTable as `root` where ((${optionalVarPlaceHolderOperationSelector(optionalID![], \'`root`.ID = ${varPlaceHolderToString(optionalID![] "\\\'" "\\\'" {"\\\'" : "\\\'\\\'"} "null")}\', \'`root`.ID is null\')}) and (${optionalVarPlaceHolderOperationSelector(optionalActive![], \'case when `root`.active = \\\'Y\\\' then \\\'true\\\' else \\\'false\\\' end = ${varPlaceHolderToString(optionalActive![] "\\\'" "\\\'" {} "null")}\', \'case when `root`.active = \\\'Y\\\' then \\\'true\\\' else \\\'false\\\' end is null\')}))\n'+
                     '      connection = DatabaseConnection(type = "MemSQL")\n'+
                     '    )\n'+
                     '  )\n'+
                     ')\n';
   assertPlanGenerationForOptionalParameter(DatabaseType.MemSQL, $expectedPlan);
}

function <<test.Test>> meta::relational::memsql::tests::executionPlan::testExecutionPlanGenerationForInWithCollectionInput_MemSQL() : Boolean[1]
{
   let res = executionPlan(
      {name:String[*] |_Person.all()->filter(x | $x.fullName->in($name))->project([x | $x.fullName], ['fullName']);},
      meta::pure::mapping::modelToModel::test::shared::relationalMapping, ^Runtime(connectionStores=^ConnectionStore(element = relationalDB, connection=^meta::external::store::relational::runtime::DatabaseConnection(type=DatabaseType.MemSQL))), meta::relational::extension::relationalExtensions()
   );
   let expected = 'RelationalBlockExecutionNode(type=TDS[(fullName,String,VARCHAR(1000),"")](FunctionParametersValidationNode(functionParameters=[name:String[*]])Allocation(type=Stringname=inFilterClause_namevalue=(FreeMarkerConditionalExecutionNode(type=Stringcondition=${(instanceOf(name,"Stream")||instanceOf(name,"StreamingResult")||((collectionSize(name![])?number)>1048576))?c}trueBlock=(Sequence(type=String(CreateAndPopulateTempTable(type=VoidinputVarNames=[name]tempTableName=tempTableForIn_nametempTableColumns=[(ColumnForStoringInCollection,VARCHAR(1024))]connection=DatabaseConnection(type="MemSQL"))Constant(type=Stringvalues=[select`temptableforin_name_0`.ColumnForStoringInCollectionasColumnForStoringInCollectionfromtempTableForIn_nameas`temptableforin_name_0`]))))falseBlock=(Constant(type=Stringvalues=[${renderCollection(name![]",""\'""\'"{"\'":"\'\'"}"null")}])))))Relational(type=TDS[(fullName,String,VARCHAR(1000),"")]resultColumns=[("fullName",VARCHAR(1000))]sql=select`root`.fullnameas`fullName`fromPersonas`root`where`root`.fullnamein(${inFilterClause_name})connection=DatabaseConnection(type="MemSQL"))))';
   assertEquals($expected, $res->planToStringWithoutFormatting(meta::relational::extension::relationalExtensions()));
}

function <<test.Test>> meta::relational::memsql::tests::executionPlan::testExecutionPlanGenerationForInWithCollectionIntegerInput_MemSQL():Boolean[1]
{
   let res = executionPlan(
      {lengths:Integer[*] |_Person.all()->filter(x | $x.fullName->length()->in($lengths))->project([x | $x.fullName], ['fullName']);},
      meta::pure::mapping::modelToModel::test::shared::relationalMapping, ^Runtime(connectionStores=^ConnectionStore(element = relationalDB, connection=^meta::external::store::relational::runtime::DatabaseConnection(type=DatabaseType.MemSQL))), meta::relational::extension::relationalExtensions()
   );
   let expected = 'RelationalBlockExecutionNode(type=TDS[(fullName,String,VARCHAR(1000),"")](FunctionParametersValidationNode(functionParameters=[lengths:Integer[*]])Allocation(type=Stringname=inFilterClause_lengthsvalue=(FreeMarkerConditionalExecutionNode(type=Stringcondition=${(instanceOf(lengths,"Stream")||instanceOf(lengths,"StreamingResult")||((collectionSize(lengths![])?number)>1048576))?c}trueBlock=(Sequence(type=String(CreateAndPopulateTempTable(type=VoidinputVarNames=[lengths]tempTableName=tempTableForIn_lengthstempTableColumns=[(ColumnForStoringInCollection,INT)]connection=DatabaseConnection(type="MemSQL"))Constant(type=Stringvalues=[select`temptableforin_lengths_0`.ColumnForStoringInCollectionasColumnForStoringInCollectionfromtempTableForIn_lengthsas`temptableforin_lengths_0`]))))falseBlock=(Constant(type=Stringvalues=[${renderCollection(lengths![]","""""{}"null")}])))))Relational(type=TDS[(fullName,String,VARCHAR(1000),"")]resultColumns=[("fullName",VARCHAR(1000))]sql=select`root`.fullnameas`fullName`fromPersonas`root`wherechar_length(`root`.fullname)in(${inFilterClause_lengths})connection=DatabaseConnection(type="MemSQL"))))';
   assertEquals($expected, $res->planToStringWithoutFormatting(meta::relational::extension::relationalExtensions()));
}

function <<access.private>> meta::relational::memsql::tests::executionPlan::runMemSQLPlanTest(func:FunctionDefinition<Any>[1], expected:String[1]): Boolean[1]
{
  runPlanTest($func, $expected, DatabaseType.MemSQL)
}

function <<test.Test>> meta::relational::memsql::tests::executionPlan::testSliceLimitTakeDropWithVariables(): Boolean[1]
{
  let f1 = {i:Integer[1] | Product.all()->project(p|$p.name, 'Name')->slice($i, 5)};
  let expected1 = 'Sequence(type=TDS[(Name,String,VARCHAR(200),"")](FunctionParametersValidationNode(functionParameters=[i:Integer[1]])Relational(type=TDS[(Name,String,VARCHAR(200),"")]resultColumns=[("Name",VARCHAR(200))]sql=select`root`.NAMEas`Name`fromproductSchema.productTableas`root`limit${i},${(5?number-i?number)}connection=DatabaseConnection(type="MemSQL"))))';
  runMemSQLPlanTest($f1, $expected1);

  let f2 = {i:Integer[1] | Product.all()->project(p|$p.name, 'Name')->slice(4, $i)};
  let expected2 = 'Sequence(type=TDS[(Name,String,VARCHAR(200),"")](FunctionParametersValidationNode(functionParameters=[i:Integer[1]])Relational(type=TDS[(Name,String,VARCHAR(200),"")]resultColumns=[("Name",VARCHAR(200))]sql=select`root`.NAMEas`Name`fromproductSchema.productTableas`root`limit4,${(i?number-4?number)}connection=DatabaseConnection(type="MemSQL"))))';
  runMemSQLPlanTest($f2, $expected2);

  let f3 = {i1:Integer[1], i2:Integer[1] | Product.all()->project(p|$p.name, 'Name')->slice($i1, $i2)};
  let expected3 = 'Sequence(type=TDS[(Name,String,VARCHAR(200),"")](FunctionParametersValidationNode(functionParameters=[i1:Integer[1],i2:Integer[1]])Relational(type=TDS[(Name,String,VARCHAR(200),"")]resultColumns=[("Name",VARCHAR(200))]sql=select`root`.NAMEas`Name`fromproductSchema.productTableas`root`limit${i1},${(i2?number-i1?number)}connection=DatabaseConnection(type="MemSQL"))))';
  runMemSQLPlanTest($f3, $expected3);

  let f4 = {i:Integer[1] | Product.all()->project(p|$p.name, 'Name')->drop($i)};
  let expected4 = 'Sequence(type=TDS[(Name,String,VARCHAR(200),"")](FunctionParametersValidationNode(functionParameters=[i:Integer[1]])Relational(type=TDS[(Name,String,VARCHAR(200),"")]resultColumns=[("Name",VARCHAR(200))]sql=select`limitoffset_via_window_subquery`.`Name`as`Name`from(select`root`.NAMEas`Name`,row_number()OVER(OrderBy`root`.NAME)as`row_number`fromproductSchema.productTableas`root`)as`limitoffset_via_window_subquery`where`limitoffset_via_window_subquery`.row_number>${i}connection=DatabaseConnection(type="MemSQL"))))';
  runMemSQLPlanTest($f4, $expected4);

  let f5 = {i:Integer[1] | Product.all()->project(p|$p.name, 'Name')->take($i)};
  let expected5 = 'Sequence(type=TDS[(Name,String,VARCHAR(200),"")](FunctionParametersValidationNode(functionParameters=[i:Integer[1]])Relational(type=TDS[(Name,String,VARCHAR(200),"")]resultColumns=[("Name",VARCHAR(200))]sql=select`root`.NAMEas`Name`fromproductSchema.productTableas`root`limit${i}connection=DatabaseConnection(type="MemSQL"))))';
  runMemSQLPlanTest($f5, $expected5);

  let f6 = {i:Integer[1] | Product.all()->project(p|$p.name, 'Name')->limit($i)};
  let expected6 = 'Sequence(type=TDS[(Name,String,VARCHAR(200),"")](FunctionParametersValidationNode(functionParameters=[i:Integer[1]])Relational(type=TDS[(Name,String,VARCHAR(200),"")]resultColumns=[("Name",VARCHAR(200))]sql=select`root`.NAMEas`Name`fromproductSchema.productTableas`root`limit${i}connection=DatabaseConnection(type="MemSQL"))))';
  runMemSQLPlanTest($f6, $expected6);
}

function <<test.Test>> meta::relational::memsql::tests::executionPlan::testPaginatedWithVariables(): Boolean[1]
{
  let f1 = {i:Integer[1] | Product.all()->sortBy(p | $p.name)->paginated($i, 4)};
  let expected1 = 'Sequence(type=Class[impls=(meta::relational::tests::model::simple::Product|simpleRelationalMapping.meta_relational_tests_model_simple_Product)]asmeta::relational::tests::model::simple::ProductresultSizeRange=*(FunctionParametersValidationNode(functionParameters=[i:Integer[1]])Relational(type=Class[impls=(meta::relational::tests::model::simple::Product|simpleRelationalMapping.meta_relational_tests_model_simple_Product)]asmeta::relational::tests::model::simple::ProductresultSizeRange=*resultColumns=[("pk_0",INT),("name",VARCHAR(200))]sql=select`root`.IDas`pk_0`,`root`.NAMEas`name`fromproductSchema.productTableas`root`orderby`root`.NAMElimit${((i?number-1?number)?number*4?number)},${((i?number*4?number)?number-((i?number-1?number)?number*4?number)?number)}connection=DatabaseConnection(type="MemSQL"))))';
  runMemSQLPlanTest($f1, $expected1);

  let f2 = {i:Integer[1] | Product.all()->sortBy(p | $p.name)->paginated(1, $i)};
  let expected2 = 'Sequence(type=Class[impls=(meta::relational::tests::model::simple::Product|simpleRelationalMapping.meta_relational_tests_model_simple_Product)]asmeta::relational::tests::model::simple::ProductresultSizeRange=*(FunctionParametersValidationNode(functionParameters=[i:Integer[1]])Relational(type=Class[impls=(meta::relational::tests::model::simple::Product|simpleRelationalMapping.meta_relational_tests_model_simple_Product)]asmeta::relational::tests::model::simple::ProductresultSizeRange=*resultColumns=[("pk_0",INT),("name",VARCHAR(200))]sql=select`root`.IDas`pk_0`,`root`.NAMEas`name`fromproductSchema.productTableas`root`orderby`root`.NAMElimit${((1?number-1?number)?number*i?number)},${((1?number*i?number)?number-((1?number-1?number)?number*i?number)?number)}connection=DatabaseConnection(type="MemSQL"))))';
  runMemSQLPlanTest($f2, $expected2);

  let f3 = {i1:Integer[1], i2:Integer[1] | Product.all()->sortBy(p | $p.name)->paginated($i1, $i2)};
  let expected3 = 'Sequence(type=Class[impls=(meta::relational::tests::model::simple::Product|simpleRelationalMapping.meta_relational_tests_model_simple_Product)]asmeta::relational::tests::model::simple::ProductresultSizeRange=*(FunctionParametersValidationNode(functionParameters=[i1:Integer[1],i2:Integer[1]])Relational(type=Class[impls=(meta::relational::tests::model::simple::Product|simpleRelationalMapping.meta_relational_tests_model_simple_Product)]asmeta::relational::tests::model::simple::ProductresultSizeRange=*resultColumns=[("pk_0",INT),("name",VARCHAR(200))]sql=select`root`.IDas`pk_0`,`root`.NAMEas`name`fromproductSchema.productTableas`root`orderby`root`.NAMElimit${((i1?number-1?number)?number*i2?number)},${((i1?number*i2?number)?number-((i1?number-1?number)?number*i2?number)?number)}connection=DatabaseConnection(type="MemSQL"))))';
  runMemSQLPlanTest($f3, $expected3);
}
