// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::sqlstring::*;
import meta::pure::executionPlan::profiles::*;
import meta::relational::tests::mapping::sqlFunction::model::domain::*;
import meta::relational::tests::mapping::sqlFunction::model::store::*;
import meta::relational::tests::mapping::sqlFunction::model::mapping::*;

import meta::pure::profiles::*;
import meta::pure::tds::*;

import meta::relational::metamodel::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::join::*;
import meta::relational::metamodel::execute::*;
import meta::relational::functions::toDDL::*;
import meta::relational::mapping::*;

import meta::relational::tests::*;

import meta::pure::runtime::*;
import meta::relational::runtime::*;
import meta::relational::runtime::authentication::*;

function <<test.Test>> meta::relational::tests::mapping::function::postgres::testTriminNotSybaseASE():Boolean[1]{
   let sPostgre = toSQLString(|SqlFunctionDemo.all()->project([s | $s.trimResult], ['trim']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Postgres, meta::relational::extension::relationalExtensions());

   assertEquals('select trim("root".string2) as "trim" from dataTable as "root"',$sPostgre);
}

function <<test.Test>> meta::relational::tests::mapping::function::postgres::testToSQLStringParseIntegerinPostgres():Boolean[1]
{
   let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.string2Integer], ['parseInteger']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select cast("root".string2Integer as integer) as "parseInteger" from dataTable as "root"',$s);

}
