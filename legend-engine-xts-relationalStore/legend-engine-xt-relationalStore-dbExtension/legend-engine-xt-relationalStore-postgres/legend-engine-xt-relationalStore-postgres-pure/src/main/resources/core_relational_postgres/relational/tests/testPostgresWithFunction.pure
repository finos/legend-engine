// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::asserts::*;
import meta::relational::mapping::*;
import meta::relational::runtime::*;
import meta::external::store::relational::runtime::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::external::store::relational::tests::*;
import meta::pure::profiles::*;
import meta::relational::functions::sqlstring::*;

function <<test.Test>> meta::relational::tests::query::function::postgres::testSupportForTrimFunction():Boolean[1]
{
let result = toSQLString(|Person.all()
      ->filter({row| $row.firstName->trim() != ''})
      ->project([#/Person/firstName#, #/Person/firm/legalName#]), simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
 assertEquals('select "root".FIRSTNAME as "firstName", "firmTable_d_1_d_m2".LEGALNAME as "legalName" from personTable as "root" left outer join firmTable as "firmTable_d_1_d_m2" on ("firmTable_d_1_d_m2".ID = "root".FIRMID) where (trim("root".FIRSTNAME) <> Text\'\' OR trim("root".FIRSTNAME) is null)', $result);
}

function <<test.Test>> meta::relational::tests::query::function::postgres::testSupportForLTrimFunction():Boolean[1]
{
let result = toSQLString(|Person.all()
      ->filter({row| $row.firstName->ltrim() != ''})
      ->project([#/Person/firstName#, #/Person/firm/legalName#]), simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
 assertEquals('select "root".FIRSTNAME as "firstName", "firmTable_d_1_d_m2".LEGALNAME as "legalName" from personTable as "root" left outer join firmTable as "firmTable_d_1_d_m2" on ("firmTable_d_1_d_m2".ID = "root".FIRMID) where (ltrim("root".FIRSTNAME) <> Text\'\' OR ltrim("root".FIRSTNAME) is null)', $result);
}

function <<test.Test>> meta::relational::tests::query::function::postgres::testSupportForRTrimFunction():Boolean[1]
{
let result = toSQLString(|Person.all()
      ->filter({row| $row.firstName->rtrim() != ''})
      ->project([#/Person/firstName#, #/Person/firm/legalName#]), simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
 assertEquals('select "root".FIRSTNAME as "firstName", "firmTable_d_1_d_m2".LEGALNAME as "legalName" from personTable as "root" left outer join firmTable as "firmTable_d_1_d_m2" on ("firmTable_d_1_d_m2".ID = "root".FIRMID) where (rtrim("root".FIRSTNAME) <> Text\'\' OR rtrim("root".FIRSTNAME) is null)', $result);
}
