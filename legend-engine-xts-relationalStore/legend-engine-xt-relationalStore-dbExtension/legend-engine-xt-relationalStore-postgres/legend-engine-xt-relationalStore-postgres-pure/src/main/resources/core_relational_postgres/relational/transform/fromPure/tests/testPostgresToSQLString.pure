// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::functions::sqlstring::*;
import meta::relational::functions::sqlToString::postgres::*;
import meta::pure::mapping::*;
import meta::relational::functions::asserts::*;
import meta::relational::mapping::*;
import meta::relational::tests::*;
import meta::external::store::relational::tests::*;
import meta::relational::tests::model::simple::*;
import meta::pure::profiles::*;
import meta::relational::functions::sqlstring::*;
import meta::relational::runtime::*;
import meta::external::store::relational::runtime::*;

function meta::relational::functions::sqlToString::postgres::runTestCaseById(testCaseId: String[1]): Boolean[1]
{
   let filtered = meta::relational::functions::sqlToString::postgres::testCasesForDocGeneration()->filter(c|$c.id==$testCaseId);
   assert($filtered->size()==1, 'Number of test cases found is not 1.');
   let testCase = $filtered->toOne();

   let result = toSQLString($testCase.query, $testCase.mapping, $testCase.dbType, meta::relational::extension::relationalExtensions());
   assertEquals($testCase.expectedSql, $result, '\nSQL not as expected for \'%s\'\n\nexpected: %s\nactual:   %s', [$testCase.id, $testCase.expectedSql, $result]);
}

function meta::relational::functions::sqlToString::postgres::testCasesForDocGeneration():TestCase[*]
{
   [
      ^TestCase(
         id ='testTakePostgres',
         query = |Person.all()->project([#/Person/firstName!name#])->take(0),
         mapping = meta::relational::tests::simpleRelationalMapping,
         dbType = meta::relational::runtime::DatabaseType.Postgres,
         expectedSql = 'select "root".FIRSTNAME as "name" from personTable as "root" limit 0',
         generateUsageFor = [meta::pure::tds::take_TabularDataSet_1__Integer_1__TabularDataSet_1_]
      )

   ]
}
function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSQLStringJoinStrings():Boolean[1]
{
   let fn = {|Firm.all()->groupBy([f|$f.legalName],
                                     agg(x|$x.employees.firstName,y|$y->joinStrings('*')),
                                     ['legalName', 'employeesFirstName']
                                  )};

   let postGresSql = toSQLString($fn, meta::relational::tests::simpleRelationalMapping, meta::relational::runtime::DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LEGALNAME as "legalName", string_agg("personTable_d#4_d_m1".FIRSTNAME, Text\'*\') as "employeesFirstName" from firmTable as "root" left outer join personTable as "personTable_d#4_d_m1" on ("root".ID = "personTable_d#4_d_m1".FIRMID) group by "legalName"', $postGresSql);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSQLStringJoinStringsSimpleConcat():Boolean[1]
{
   let fn = {|Person.all()->project([p | $p.firstName + '_' + $p.lastName], ['firstName_lastName'])};
   let postGresSql = toSQLString($fn, meta::relational::tests::simpleRelationalMapping, meta::relational::runtime::DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select concat(Text\'\', "root".FIRSTNAME, Text\'_\', "root".LASTNAME, Text\'\') as "firstName_lastName" from personTable as "root"', $postGresSql);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSQLStringConcatPostgres():Boolean[1]
{
   let s = toSQLString(|Person.all()->filter(p|$p.firstName == 'John')
                                    ->project(p|$p.firstName + ' ' + $p.lastName, 'fullName'),
                                    meta::relational::tests::simpleRelationalMapping,
                                    meta::relational::runtime::DatabaseType.Postgres, meta::relational::extension::relationalExtensions());

   assertEquals('select concat(Text\'\', "root".FIRSTNAME, Text\' \', "root".LASTNAME, Text\'\') as "fullName" from personTable as "root" where "root".FIRSTNAME = Text\'John\'', $s);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testTakePostgres():Boolean[1]
{
   meta::relational::functions::sqlToString::postgres::runTestCaseById('testTakePostgres');
}


function <<test.Test>> meta::relational::functions::sqlToString::postgres::testProcessLiteralForPostgres():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | 'String',
                                                      b | %2016-03-01,
                                                      c | %2016-03-01T12:18:18.976+0200,
                                                      d | 1,
                                                      e | 1.1
                                                   ],
                                                   ['a','b','c','d', 'e'])->take(0),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   print($result);
   assertEquals('select Text\'String\' as "a", Date\'2016-03-01\' as "b", Timestamp\'2016-03-01 10:18:18.976\' as "c", 1 as "d", 1.1 as "e" from personTable as "root" limit 0', $result);
   true;
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testRoundPostgres():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([p | round($p.age->toOne() / 100)], ['round']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select round((((1.0 * "root".AGE) / 100))::numeric, 0) as "round" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testRoundToDecimalsPostgres():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([p | round(cast($p.age->toOne() / 100, @Decimal), 2)], ['round']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select round((((1.0 * "root".AGE) / 100))::numeric, 2) as "round" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSQLStringWithLength():Boolean[1]
{
   [DatabaseType.Postgres]->map(db|
      let s = toSQLString(|Person.all()->project(p|length($p.firstName), 'nameLength'), simpleRelationalMapping, $db, meta::relational::extension::relationalExtensions());
      assertEquals('select char_length("root".FIRSTNAME) as "nameLength" from personTable as "root"', $s);
   );
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSQLStringWithPosition():Boolean[1]
{
   let postgresSql = toSQLString(
              |meta::relational::tests::mapping::propertyfunc::model::domain::Person.all()->project(p|$p.firstName, 'firstName'),
               meta::relational::tests::mapping::propertyfunc::model::mapping::PropertyfuncMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());

   assertEquals('select substring("root".FULLNAME, 0, position(Text\',\' in "root".FULLNAME)-1) as "firstName" from personTable as "root"', $postgresSql);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSqlGenerationIndexOf():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Postgres, 'select strpos("root".FIRSTNAME, Text\'Jo\') as "index" from personTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |meta::relational::tests::model::simple::Person.all()->project(p|$p.firstName->indexOf('Jo'), 'index'),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSQLStringWithStdDevSample():Boolean[1]
{
   [DatabaseType.Postgres]->map(db|
      let s = toSQLString(
              |meta::relational::tests::mapping::sqlFunction::model::domain::SqlFunctionDemo.all()->project(p|$p.float1StdDevSample, 'stdDevSample'),
               meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping, $db, meta::relational::extension::relationalExtensions());

      assertEquals('select stddev_samp("root".int1) as "stdDevSample" from dataTable as "root"', $s);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSQLStringWithStdDevPopulation():Boolean[1]
{
   [DatabaseType.Postgres]->map(db|
      let s = toSQLString(
              |meta::relational::tests::mapping::sqlFunction::model::domain::SqlFunctionDemo.all()->project(p|$p.float1StdDevPopulation, 'stdDevPopulation'),
               meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping, $db, meta::relational::extension::relationalExtensions());

      assertEquals('select stddev_pop("root".int1) as "stdDevPopulation" from dataTable as "root"', $s);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testGenerateDateDiffExpressionForPostgresForDifferenceInYears():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | dateDiff(%2012-01-01, %2011-10-02, DurationUnit.YEARS)
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select (DATE_PART(\'year\', Date\'2012-01-01\') - DATE_PART(\'year\', Date\'2011-10-02\')) as "a" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testGenerateDateDiffExpressionForPostgresForDifferenceInMonths():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | dateDiff(%2012-01-01, %2011-10-02, DurationUnit.MONTHS)
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select ((DATE_PART(\'year\', Date\'2012-01-01\') - DATE_PART(\'year\', Date\'2011-10-02\')) * 12 + (DATE_PART(\'month\', Date\'2012-01-01\') - DATE_PART(\'month\', Date\'2011-10-02\'))) as "a" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testGenerateDateDiffExpressionForPostgresForDifferenceInWeeks():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | dateDiff(%2012-01-01, %2011-10-02, DurationUnit.WEEKS)
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select (TRUNC(DATE_PART(\'day\', Date\'2012-01-01\' - Date\'2011-10-02\')/7)) as "a" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testGenerateDateDiffExpressionForPostgresForDifferenceInDays():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | dateDiff(%2011-12-31T01:00:00.0, %2011-12-29T23:00:00.0, DurationUnit.DAYS)
                                                   ],
                                                  ['a']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select (DATE_PART(\'day\', Timestamp\'2011-12-31 01:00:00.0\' - Timestamp\'2011-12-29 23:00:00.0\')) as "a" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testGenerateDateDiffExpressionForPostgresForDifferenceInHours():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | dateDiff(%2011-12-30T08:55:00.0, %2011-12-30T09:05:00.0, DurationUnit.HOURS)
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select ((DATE_PART(\'day\', Timestamp\'2011-12-30 08:55:00.0\' - Timestamp\'2011-12-30 09:05:00.0\')) * 24 + (DATE_PART(\'hour\', Timestamp\'2011-12-30 08:55:00.0\' - Timestamp\'2011-12-30 09:05:00.0\'))) as "a" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testGenerateDateDiffExpressionForPostgresForDifferenceInMinutes():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | dateDiff(%2011-12-30T08:55:00.0, %2011-12-30T09:05:00.0, DurationUnit.MINUTES)
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select (((DATE_PART(\'day\', Timestamp\'2011-12-30 08:55:00.0\' - Timestamp\'2011-12-30 09:05:00.0\')) * 24 + (DATE_PART(\'hour\', Timestamp\'2011-12-30 08:55:00.0\' - Timestamp\'2011-12-30 09:05:00.0\'))) * 60 + (DATE_PART(\'minute\', Timestamp\'2011-12-30 08:55:00.0\' - Timestamp\'2011-12-30 09:05:00.0\'))) as "a" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testGenerateDateDiffExpressionForPostgresForDifferenceInSeconds():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | dateDiff(%2011-12-30T08:55:00.0, %2011-12-30T09:05:00.0, DurationUnit.SECONDS)
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select ((((DATE_PART(\'day\', Timestamp\'2011-12-30 08:55:00.0\' - Timestamp\'2011-12-30 09:05:00.0\')) * 24 + (DATE_PART(\'hour\', Timestamp\'2011-12-30 08:55:00.0\' - Timestamp\'2011-12-30 09:05:00.0\'))) * 60 + (DATE_PART(\'minute\', Timestamp\'2011-12-30 08:55:00.0\' - Timestamp\'2011-12-30 09:05:00.0\'))) * 60 + (DATE_PART(\'second\', Timestamp\'2011-12-30 08:55:00.0\' - Timestamp\'2011-12-30 09:05:00.0\'))) as "a" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testGenerateDateDiffExpressionForPostgresForDifferenceInMilliseconds():Boolean[1]
{
   let result = toSQLString(|Trade.all()->project([
                                                     t | dateDiff($t.settlementDateTime, now(), DurationUnit.MILLISECONDS)
                                                  ],
                                                  ['DiffMilliseconds']),
                            simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select (((((DATE_PART(\'day\', "root".settlementDateTime - now())) * 24 + (DATE_PART(\'hour\', "root".settlementDateTime - now()))) * 60 + (DATE_PART(\'minute\', "root".settlementDateTime - now()))) * 60 + (DATE_PART(\'second\', "root".settlementDateTime - now()))) * 1000 + (DATE_PART(\'milliseconds\', "root".settlementDateTime - now()))) as "DiffMilliseconds" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testDayOfYear():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Postgres, 'select date_part(\'doy\', "root".tradeDate) as "doy" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|$t.date->dayOfYear(), 'doy')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testTrim():Boolean[1]
{
  let common = 'select ltrim("root".FIRSTNAME) as "ltrim", trim("root".FIRSTNAME) as "trim", rtrim("root".FIRSTNAME) as "rtrim" from personTable as "root"';

   let expected = [
    pair(DatabaseType.Postgres, $common)
  ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
        |Person.all()->project([
          a | $a.firstName->ltrim(),
          a | $a.firstName->trim(),
          a | $a.firstName->rtrim()
         ],
         ['ltrim', 'trim', 'rtrim']),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testCbrt():Boolean[1]
{
  let common = 'select cbrt("root".quantity) as "cbrt" from tradeTable as "root"';

   let expected = [
    pair(DatabaseType.Postgres, $common)
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
        |Trade.all()->project([
          a | $a.quantity->cbrt()
         ],
         ['cbrt']),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}


function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSqlGenerationForStartsWithFunctionForPostgres():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | $a.firstName->startsWith('tri')
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".FIRSTNAME like \'tri%\' as "a" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testSqlGenerationForAdjustFunctionUsageInProjectionForPostgres():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | adjust(%2011-12-30T08:55:00.0, 1, DurationUnit.SECONDS)
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select (Timestamp\'2011-12-30 08:55:00.0\' + (INTERVAL \'1 SECONDS\' * 1)) as "a" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testSqlGenerationForAdjustFunctionWithHourForPostgres():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | adjust(%2011-12-30T08:55:00.0->datePart(), %2011-12-30T08:55:00.0->hour(), DurationUnit.HOURS)
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select (Date(Timestamp\'2011-12-30 08:55:00.0\') + (INTERVAL \'1 HOURS\' * date_part(\'hour\', Timestamp\'2011-12-30 08:55:00.0\'))) as "a" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testSqlGenerationForAdjustStrictDateUsageInProjectionForPostgres():Boolean[1]
{
   let result = toSQLString(|Person.all()->project([
                                                      a | adjust(%2011-12-30, 86400, DurationUnit.SECONDS)
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select (Date\'2011-12-30\' + (INTERVAL \'1 SECONDS\' * 86400)) as "a" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testSqlGenerationForAdjustStrictDateUsageInFiltersForPostgres():Boolean[1]
{
   let result = toSQLString(|Trade.all()->filter(it| adjust(%2011-12-30, 86400, DurationUnit.SECONDS) > %2011-12-30)->project([
                                                      a | 'a'
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select Text\'a\' as "a" from tradeTable as "root" where (Date\'2011-12-30\' + (INTERVAL \'1 SECONDS\' * 86400)) > Date\'2011-12-30\'', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testSqlGenerationForAdjustFunctionUsageInFiltersForPostgres():Boolean[1]
{
   let result = toSQLString(|Trade.all()->filter(it| adjust(%2011-12-30T08:55:00.0, 1, DurationUnit.DAYS) > %2011-12-30T08:55:00.0)->project([
                                                      a | 'a'
                                                   ],
                                                   ['a']),
                              simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertEquals('select Text\'a\' as "a" from tradeTable as "root" where (Timestamp\'2011-12-30 08:55:00.0\' + (INTERVAL \'1 DAYS\' * 1)) > Timestamp\'2011-12-30 08:55:00.0\'', $result);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSqlGenerationFirstDayOfMonth():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Postgres, 'select date_trunc(\'month\', "root".tradeDate) as "date" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|$t.date->firstDayOfMonth(), 'date')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSqlGenerationFirstDayOfThisMonth():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Postgres, 'select date_trunc(\'month\', CURRENT_DATE) as "date" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|firstDayOfThisMonth(), 'date')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSqlGenerationFirstDayOfYear():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Postgres, 'select date_trunc(\'year\', "root".tradeDate) as "date" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|$t.date->firstDayOfYear(), 'date')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSqlGenerationFirstDayOfThisYear():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Postgres, 'select date_trunc(\'year\', CURRENT_DATE) as "date" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|firstDayOfThisYear(), 'date')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSqlGenerationFirstDayOfThisQuarter():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Postgres, 'select date_trunc(\'quarter\', CURRENT_DATE) as "date" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|firstDayOfThisQuarter(), 'date')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSqlGenerationFirstDayOfQuarter_Postgres():Boolean[1]
{
   testToSqlGenerationFirstDayOfQuarter(DatabaseType.Postgres, 'select date_trunc(\'quarter\', "root".tradeDate) as "date" from tradeTable as "root"');
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSqlGenerationFirstDayOfWeek():Boolean[1]
{
   let expected = [
      pair(DatabaseType.Postgres, 'select date_trunc(\'week\', "root".tradeDate) as "date" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()
            ->project(col(t|$t.date->firstDayOfWeek(), 'date')),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToSqlGenerationMinuteSecond():Boolean[1]
{
   let expected = [
   pair(DatabaseType.Postgres, 'select date_part(\'minute\', "root".settlementDateTime) as "settlementDateTimeMinute", date_part(\'second\', "root".settlementDateTime) as "settlementDateTimeSecond" from tradeTable as "root"')
   ];

   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;

      let result = toSQLString(
         |Trade.all()->project([
                                                     t | $t.settlementDateTime->cast(@Date)->toOne()->minute(),
                                                     t | $t.settlementDateTime->cast(@Date)->toOne()->second()
                                                  ],
                                                  ['settlementDateTimeMinute', 'settlementDateTimeSecond']),
         simpleRelationalMapping,
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testSqlGenerationDivide_AllDBs():Boolean[1]
{
   let query = {|Trade.all()->filter(t | $t.id == 2)->map(t | $t.quantity->divide(1000000))};
   let expectedSQL = 'select ((1.0 * "root".quantity) / 1000000) from tradeTable as "root" left outer join (select "root".trade_id as trade_id, max("root".eventDate) as maxTradeEventDate from tradeEventTable as "root" group by "root".trade_id) as "tradeEventViewMaxTradeEventDate_d#4_d#4_m5" on ("root".ID = "tradeEventViewMaxTradeEventDate_d#4_d#4_m5".trade_id) where "root".ID = 2';

   let resultPostgresSQL = meta::relational::functions::sqlstring::toSQLString($query, simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertSameSQL($expectedSQL, $resultPostgresSQL);
}

function <<test.Test>> meta::relational::functions::sqlToString::postgres::testToStringOnPostgres():Boolean[1]
{
   let func = {|Person.all()->project([col(x | $x.firstName, 'FirstName'), col(x | $x.age->toOne()->toString()->toUpper(), 'AgeString')])};
   let sql = toSQLString($func, simpleRelationalMapping, DatabaseType.Postgres, meta::relational::extension::relationalExtensions());
   assertSameSQL('select "root".FIRSTNAME as "FirstName", upper(cast("root".AGE as varchar)) as "AgeString" from personTable as "root"', $sql);
}
