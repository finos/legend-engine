// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::sqlQueryToString::postgres::*;

function {doc.doc='Given the platform (ie DB agnostic) data types, convert to DB specific type'} meta::relational::functions::sqlQueryToString::postgres::dataTypeToSqlTextPostgres(type: meta::relational::metamodel::datatype::DataType[1]):String[1]
{
    $type->match([
        b : meta::relational::metamodel::datatype::Boolean[1] | 'BOOLEAN',
        i : meta::relational::metamodel::datatype::Integer[1] | 'INT',
        f : meta::relational::metamodel::datatype::Float[1] | 'FLOAT4',
        v : meta::relational::metamodel::datatype::Varchar[1] | format('VARCHAR(%d)', $v.size),
        c : meta::relational::metamodel::datatype::Char[1] | format('CHAR(%d)', $c.size),
        d : meta::relational::metamodel::datatype::Decimal[1] | format('DECIMAL(%d, %d)', [$d.precision, $d.scale]),
        t : meta::relational::metamodel::datatype::Timestamp[1] | 'TIMESTAMP(3)',
        d : meta::relational::metamodel::datatype::Date[1] | 'DATE',
        b : meta::relational::metamodel::datatype::BigInt[1] | 'BIGINT',
        s : meta::relational::metamodel::datatype::SmallInt[1] | 'SMALLINT',        
        d : meta::relational::metamodel::datatype::Double[1] | 'FLOAT8',
        n : meta::relational::metamodel::datatype::Numeric[1] | format('NUMERIC(%d, %d)', [$n.precision, $n.scale]),
        a : meta::relational::metamodel::datatype::Array[1] | 'JSON',//if($a.type->isEmpty(), |'JSON[]', |$a.type->toOne()->dataTypeToSqlTextPostgres() + '[]'),
        o : meta::relational::metamodel::datatype::Object[1] | 'JSON', // 'MAP(%s, %s)'->format([$o.keyType->dataTypeToSqlTextPostgres(), $o.valueType->dataTypeToSqlTextPostgres()]),
        s : meta::relational::metamodel::datatype::SemiStructured[1] | 'JSON',
        s : meta::relational::metamodel::datatype::Json[1] | 'JSON'
    ]);
}
