# Copyright 2022 Goldman Sachs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build CI

env:
  CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
  CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# Cancel running jobs from previous pipelines of the same workflow on PR to save resource when commits are pushed quickly
# NOTE: we don't want this behavior on default branch
# See https://stackoverflow.com/a/68422069
concurrency:
  group: ${{ github.ref == 'refs/heads/master' && format('ci-default-branch-{0}-{1}', github.sha, github.workflow) || format('ci-pr-{0}-{1}', github.ref, github.workflow) }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    # NOTE: Only run this when not in fork as those likely do not have access to larger runners and will fail on normal runner due to resource limitation
    # Also, skip this build for release commits
    if: "!contains(github.event.head_commit.message, '[maven-release-plugin]') && github.repository == 'finos/legend-engine'"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        env:
          cache-name: cache-mvn-deps
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: ossrh
          server-username: CI_DEPLOY_USERNAME
          server-password: CI_DEPLOY_PASSWORD

      - name: Check Java version
        run: java -version

      - name: Configure git
        run: |
          git config --global committer.email "infra@finos.org"
          git config --global committer.name "FINOS Admin"
          git config --global author.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global author.name "${GITHUB_ACTOR}"

      - name: Download deps and plugins
        run: mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies

      - name: Collect Workflow Telemetry
        uses: runforesight/workflow-telemetry-action@v1
        with:
          theme: dark

      - name: Build (PR)
        if: github.ref != 'refs/heads/master'
        env:
          MAVEN_OPTS: "-Xmx10g"
        run: |
          mvn -B -e -DskipTests=true install

      - name: Build (with Maven Deploy + Docker Snapshot)
        if: github.ref == 'refs/heads/master'
        env:
          DOCKER_USERNAME: finos
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          MAVEN_OPTS: "-Xmx10g"
        # NOTE: here we publish snapshot to a staging Maven registry
        # some registry like Maven Central requires javadoc, but for now we
        # don't need to, if we do, call javadoc:jar goal instead of javadoc:javadoc
        # as the latter binds to generate-sources which runs before compile phase
        # and can cause problem with some code generators
        # See https://github.com/finos/legend-engine/pull/924
        run: |
          mvn -B -e -DskipTests=true deploy -P docker-snapshot

      - name: Cache build output artifacts
        uses: actions/cache/save@v4
        with:
          path: "**/target/"
          key: target-outputs-${{ runner.os }}-${{ github.run_id }}

      - name: Upload CI Event
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: event-file
          path: ${{ github.event_path }}

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Before Test
        uses: ./.github/workflows/actions/before-test

      - name: Test
        env:
          MAVEN_OPTS: "-Xmx6g"
        # exclude some modules by -pl !_MODULE_, as these modules are tested in other parallel jobs
        run: |
          mvn -B -e surefire:test -pl '!org.finos.legend.engine:legend-engine-server-http-server,!org.finos.legend.engine:legend-engine-xt-javaPlatformBinding-PCT,!org.finos.legend.engine:legend-engine-xt-relationalStore-h2-PCT,!org.finos.legend.engine:legend-engine-xt-relationalStore-duckdb-PCT,!org.finos.legend.engine:legend-engine-xt-relationalStore-postgres-PCT' -DargLine="-XX:MaxRAMPercentage=70.0" -Dsurefire.reports.directory=${GITHUB_WORKSPACE}/surefire-reports-aggregate

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ github.workspace }}/surefire-reports-aggregate/*.xml

  test-http-server:
    name: Run Http Server Integration Tests
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Before Test
        uses: ./.github/workflows/actions/before-test

      - name: Test
        env:
          MAVEN_OPTS: "-Xmx6g"
        run: |
          mvn -B -e surefire:test -pl org.finos.legend.engine:legend-engine-server-http-server -DargLine="-XX:MaxRAMPercentage=70.0" -Dsurefire.reports.directory=${GITHUB_WORKSPACE}/surefire-reports-aggregate

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-http-server
          path: ${{ github.workspace }}/surefire-reports-aggregate/*.xml

  sdt:
    name: SDT - ${{ matrix.test.name }}
    runs-on: ubuntu-latest
    needs:
      - build

    strategy:
      matrix:
        test:
          - name: Postgres
            module: legend-engine-xt-relationalStore-SDT-pure
            test-class: Test_Postgres_SDT

          - name: DuckDB
            module: legend-engine-xt-relationalStore-duckdb-sqlDialectTranslation-pure
            test-class: Test_DuckDB_SDT

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Before Test
        uses: ./.github/workflows/actions/before-test

      - name: Test
        uses: ./.github/workflows/actions/sdt-test
        with:
          check-name:  ${{ matrix.test.name }}
          module:  ${{ matrix.test.module }}
          test-class: ${{ matrix.test.test-class }}

  pct:
    name: PCT - ${{ matrix.test.name }}
    runs-on: ubuntu-latest
    needs:
      - build

    strategy:
      matrix:
        test:
          - name: Platform - Java
            module: legend-engine-xt-javaPlatformBinding-PCT

          - name: Relational - H2
            module: legend-engine-xt-relationalStore-h2-PCT

          - name: Relational - DuckDB
            module: legend-engine-xt-relationalStore-duckdb-PCT

          - name: Relational - Postgres
            module: legend-engine-xt-relationalStore-postgres-PCT

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Before Test
        uses: ./.github/workflows/actions/before-test

      - name: Test
        uses: ./.github/workflows/actions/pct-test
        with:
          name: ${{ matrix.test.name }}
          module: ${{ matrix.test.module }}

  pct-cloud:
    if: false
    # if: github.repository == 'finos/legend-engine' # needs secrets...
    name: PCT - ${{ matrix.test.name }}
    runs-on: ubuntu-latest
    needs:
      - build
      - test
      - test-http-server
      - sdt
      - pct

    strategy:
      matrix:
        test:
          - name: Relational - Snowflake
            module: legend-engine-xt-relationalStore-snowflake-PCT

          - name: Relational - Databricks
            module: legend-engine-xt-relationalStore-databricks-PCT

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Before Test
        uses: ./.github/workflows/actions/before-test

      - name: Test
        uses: ./.github/workflows/actions/pct-test
        with:
          name: ${{ matrix.test.name }}
          module: ${{ matrix.test.module }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_INTEGRATION_USER1_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_INTEGRATION_USER1_SECRET_ACCESS_KEY }}
          DATABRICKS_API_TOKEN: ${{ secrets.DATABRICKS_API_TOKEN }}

  pct-report:
    name: PCT Reports
    runs-on: ubuntu-latest
    if: ${{ !cancelled() && !failure() }} # even if something is skipped like pct-cloud, run it
    needs:
      - build
      - pct
      - pct-cloud

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare for PCT Report Generation
        uses: ./.github/workflows/actions/before-test

      - name: Download PCT Reports Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./legend-engine-config/legend-engine-server/legend-engine-server-http-server/target/classes/pct-reports/
          pattern: pct-reports-*
          merge-multiple: true

      - name: Generate PCT Report
        run: |
          mvn exec:java -pl org.finos.legend.engine:legend-engine-server-http-server -Dexec.mainClass="org.finos.legend.engine.server.core.pct.PCT_to_SimpleHTML"

      - name: Upload PCT HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: pct-html-report
          path: target/ok.html

  cleanup:
    name: After Test
    runs-on: ubuntu-latest
    if: always()
    needs:
      - build
      - test
      - test-http-server
      - sdt
      - pct
      - pct-cloud
      - pct-report

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Cleanup build output artifact cache
        run: |
          gh cache delete $CACHE_KEY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CACHE_KEY: target-outputs-${{ runner.os }}-${{ github.run_id }}