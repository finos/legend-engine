import meta::external::store::rel::metamodel::*;
import meta::external::store::rel::metamodel::render::binding::*;
import meta::external::store::rel::metamodel::render::buffer::*;
import meta::external::store::rel::metamodel::render::constant::*;
import meta::external::store::rel::metamodel::render::expr::*;
import meta::external::store::rel::utils::*;
import meta::pure::functions::collection::*;


////////////////////////////////////////
// Rendering non-constant expressions //
////////////////////////////////////////

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], tuple: RelTuple[1]): RelQueryBuffer[1] {
  $buffer->append('(')->render($tuple.arguments)->append(')')
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], tuples: RelTuple[*]): RelQueryBuffer[1] {
  $buffer->append($tuples, '; ', {accum: RelQueryBuffer[1], t: RelTuple[1] | $accum->render($t)})
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], cons: RelRelationCons[1]): RelQueryBuffer[1] {
  if ($cons.arguments->isEmpty(),
    | $buffer->append('false'),
    | if ($cons.arguments->size() == 1 && $cons.arguments->at(0).arguments->isEmpty(),
        | $buffer->append('true'),
        | $buffer->append('{')->render($cons.arguments)->append('}')
        )
    )
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], rel: RelRelationName[1]): RelQueryBuffer[1] {
  $buffer->append($rel.identifier)
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], expr: RelHeadExpr[1]): RelQueryBuffer[1] {
  $expr->match([
    rel: RelRelationName[1]     | $buffer->render($rel),
    app: RelNamedApplication[1] | $buffer->render($app)
  ])
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], app: RelNamedApplication[1]): RelQueryBuffer[1] {
  $app->match([
    atom: RelNamedAtom[1]     | $buffer->render($atom),
    a: RelNamedApplication[1] |
      let newBuffer = $buffer->render($a.head);
      let renderedArguments =
        if (!$a.arguments->isEmpty(),
          | $newBuffer->append($a.arguments, '[', ', ', ']', {accum: RelQueryBuffer[1], e: RelExpr[1] | $accum->render($e)}),
          | $newBuffer
          );
  ])
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], atom: RelNamedAtom[1]): RelQueryBuffer[1] {
  let newBuffer = $buffer->render($atom.head);
  let renderedArguments =
    if (!$atom.arguments->isEmpty(),
      | $newBuffer->append($atom.arguments, '(', ', ', ')', {accum: RelQueryBuffer[1], e: RelExpr[1] | $accum->render($e)}),
      | $newBuffer
      );
  $renderedArguments;
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], atom: RelAtom[1]): RelQueryBuffer[1] {
  let newBuffer = $buffer->render($atom.head);
  let renderedArguments =
    if (!$atom.arguments->isEmpty(),
      | $newBuffer->append($atom.arguments, '(', ', ', ')', {accum: RelQueryBuffer[1], e: RelExpr[1] | $accum->render($e)}),
      | $newBuffer
      );
  $renderedArguments;
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], and: RelAnd[1]): RelQueryBuffer[1] {
  $buffer->append($and.conjuncts, ' and ', {
    accum: RelQueryBuffer[1], e: RelExpr[1] |
      if ( $e->isAtomic(),
         | $accum->render($e),
         | $accum->append('(')->newline()->render($e)->append(')')
         )
  })
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], or: RelOr[1]): RelQueryBuffer[1] {
  $buffer->append($or.disjuncts, ' or ', {accum: RelQueryBuffer[1], e: RelExpr[1] | $accum->render($e)})
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], not: RelNot[1]): RelQueryBuffer[1] {
  $buffer->append('not ')->render($not.inner)
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], empty: RelEmpty[1]): RelQueryBuffer[1] {
  $buffer->append('empty(')->render($empty.inner)->append(')')
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], implies: RelImplies[1]): RelQueryBuffer[1] {
  $buffer->render($implies.antecedence)->append(' implies ')->render($implies.consequence)
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], exists: RelExists[1]): RelQueryBuffer[1] {
  $buffer->append('exists(')->renderBinding($exists.bindings)->append(': ')->render($exists.inner)->append(')')
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], forAll: RelForAll[1]): RelQueryBuffer[1] {
  $buffer->append('forall(')->renderBinding($forAll.bindings)->append(': ')->render($forAll.inner)->append(')')
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], equals: RelEquals[1]): RelQueryBuffer[1] {
  $buffer->render($equals.left)->append(' = ')->render($equals.right)
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], app: RelApplication[1]): RelQueryBuffer[1] {
  $app->match([
    a: RelAtom[1] |
      $buffer->render($a),
    a: RelApplication[1] |
      let useParenthesis = !$app.head->canUnambigouslyApply();
      let newBuffer =
        if ($useParenthesis,
          | $buffer->append('(')->render($app.head)->append(')'),
          | $buffer->render($app.head)
          );
      if (!$app.arguments->isEmpty(),
        | $newBuffer->append($app.arguments, '[', ', ', ']', {accum: RelQueryBuffer[1], e: RelExpr[1] | $accum->render($e)}),
        | $newBuffer
        );
  ])
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], abstraction: RelAbstraction[1]): RelQueryBuffer[1] {
  $buffer->append('(')->renderBinding($abstraction.bindings)->append(': ')->render($abstraction.body)->append(')')
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], composition: RelComposition[1]): RelQueryBuffer[1] {
  $buffer->render($composition.from)->append('.')->render($composition.to)
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], from: RelFrom[1]): RelQueryBuffer[1] {
  $buffer->render($from.expr)->append(' from ')->renderBinding($from.bindings)
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], for: RelFor[1]): RelQueryBuffer[1] {
  $buffer->render($for.expr)->append(' for ')->renderBinding($for.bindings)
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], product: RelProduct[1]): RelQueryBuffer[1] {
  $buffer->append($product.exprs, ', ', {accum: RelQueryBuffer[1], e: RelExpr[1] | $accum->render($e)})
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], group: RelExprGroup[1]): RelQueryBuffer[1] {
  $buffer->append('(')->render($group.parent)->append(')')
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], union: RelUnion[1]): RelQueryBuffer[1] {
  $buffer->append($union.exprs, '; ', {accum: RelQueryBuffer[1], e: RelExpr[1] | $accum->render($e)})
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], intersection: RelIntersection[1]): RelQueryBuffer[1] {
  $buffer->append('intersect[')->renderMaybeParentheses($intersection.left)->append(', ')->renderMaybeParentheses($intersection.right)->append(']')
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], ifThenElse: RelIfThenElse[1]): RelQueryBuffer[1] {
  let elseBranch = $ifThenElse.else;
  let elseIsNestedConditional = $elseBranch->instanceOf(RelIfThenElse);
  $buffer
    ->append('if ')->render($ifThenElse.condition)->append(' then')
    ->newlineOrSpace()->indent()->render($ifThenElse.then)
    ->newlineOrSpace()->unindent()->append('else')->map(buffer: RelQueryBuffer[1] |
      if ( $elseIsNestedConditional,
         | $buffer
             ->space()->render($elseBranch)->append(' end'),
         | $buffer
             ->newlineOrSpace()->indent()->render($elseBranch)
             ->newlineOrSpace()->unindent()->append('end')
         )
    );
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], expr: RelExpr[1]): RelQueryBuffer[1] {
  $expr->match([
    e: RelFragment[1]         | $buffer->append($e.code),
    e: RelAbstraction[1]      | $buffer->render($e),
    e: RelAnd[1]              | $buffer->render($e),
    e: RelApplication[1]      | $buffer->render($e),
    e: RelAtom[1]             | $buffer->render($e),
    e: RelComposition[1]      | $buffer->render($e),
    e: RelConstant[1]         | $buffer->append($e->toRelLiteral()),
    e: RelDontCare[1]         | $buffer->append('_'), // FIXME
    e: RelEquals[1]           | $buffer->render($e),
    e: RelExists[1]           | $buffer->render($e),
    e: RelExprGroup[1]        | $buffer->render($e),
    e: RelFor[1]              | $buffer->render($e),
    e: RelForAll[1]           | $buffer->render($e),
    e: RelFrom[1]             | $buffer->render($e),
    e: RelHeadExpr[1]         | $buffer->render($e),
    e: RelIfThenElse[1]       | $buffer->render($e),
    e: RelImplies[1]          | $buffer->render($e),
    e: RelNamedApplication[1] | $buffer->render($e),
    e: RelNamedAtom[1]        | $buffer->render($e),
    e: RelNot[1]              | $buffer->render($e),
    e: RelEmpty[1]            | $buffer->render($e),
    e: RelOr[1]               | $buffer->render($e),
    e: RelProduct[1]          | $buffer->render($e),
    e: RelRelationCons[1]     | $buffer->render($e),
    e: RelTuple[1]            | $buffer->render($e),
    e: RelUnion[1]            | $buffer->render($e),
    e: RelIntersection[1]     | $buffer->render($e),
    e: RelVariable[1]         | $buffer->renderBinding($e),
    e: RelVariables[1]        | $buffer->renderBinding($e)
  ]);
}

function meta::external::store::rel::metamodel::render::expr::render(buffer: RelQueryBuffer[1], exprs: RelExpr[*]): RelQueryBuffer[1] {
  $buffer->append($exprs, ', ', {accum: RelQueryBuffer[1], e: RelExpr[1] | $accum->render($e)})
}

//////////////////////////////////////////////////////
// Rendering entry point when not providing a state //
//////////////////////////////////////////////////////

function meta::external::store::rel::metamodel::render::expr::renderExpr(expr: RelExpr[1]): String[1] {
  emptyBufferSingleLine()->render($expr)->toString()
}

function meta::external::store::rel::metamodel::render::expr::renderExprs(exprs: RelExpr[*]): String[1] {
  emptyBufferSingleLine()->render($exprs)->toString()
}

///////////////////////
// Utility functions //
///////////////////////

function <<access.private>> meta::external::store::rel::metamodel::render::expr::canUnambigouslyApply(expr: RelExpr[1]): Boolean[1] {
  $expr->match([
    e: RelAbstraction[1]      | true,
    e: RelApplication[1]      | true,
    e: RelComposition[1]      | true,
    e: RelConstant[1]         | true,
    e: RelDontCare[1]         | true,
    e: RelExprGroup[1]        | true,
    e: RelHeadExpr[1]         | true,
    e: RelNamedApplication[1] | true,
    e: RelProduct[1]          | true,
    e: RelRelationCons[1]     | true,
    e: RelTuple[1]            | true,
    e: RelUnion[1]            | true,
    e: RelIntersection[1]     | true,
    e: RelVariable[1]         | true,
    e: RelVariables[1]        | true,
    e: RelFor[1]              | false,
    e: RelFrom[1]             | false,
    e: RelNot[1]              | false
  ])
}

/**
  * Render the given expression, and if the expression is non-atomic, then render this expression in parentheses.
  */
function <<access.private>> meta::external::store::rel::metamodel::render::expr::renderMaybeParentheses(buffer: RelQueryBuffer[1], expr: RelExpr[1]): RelQueryBuffer[1] {
  if ( $expr->isAtomic(),
     | $buffer->render($expr),
     | $buffer->append('(')->render($expr)->append(')')
     )
}