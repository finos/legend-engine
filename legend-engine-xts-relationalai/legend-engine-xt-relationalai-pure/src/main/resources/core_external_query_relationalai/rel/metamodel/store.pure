import meta::rel::metamodel::store::*;
import meta::rel::metamodel::*;
import meta::rel::utils::*;

Class meta::rel::metamodel::store::RAIDatabase extends meta::pure::store::Store {
  // In the case of relational databases, we find schema definitions here (tables, joins).
  // In the case of RAI, we specify schemas of relations. Those relations are assumed to
  // be installed.
  declarations: RelationDeclaration[*];

  program: Program[0..1];

  // TODO: This is just a hack, as calls in the router component call `elementToPath`. Since our
  // manually instantiated object of this type do _not_ have a package path, calls to 
  // `elementToPath` error out without this attribute. 
  // Reported via https://github.com/finos/legend-pure/issues/424
  name: String[0..1];
}

/**
  * Abstract type representing the declaration of a relation.
  */
Class <<typemodifiers.abstract>> meta::rel::metamodel::store::RelationDeclaration { }

Class meta::rel::metamodel::store::NamedRelationDeclaration extends RelationDeclaration {
  name: String[1];
  type: RelationType[1];
}

Class meta::rel::metamodel::store::NestedRelationDeclaration extends RelationDeclaration {
  parent: RelationDeclaration[1];
  this: RelationDeclaration[1];
}


/////////////////////////
/// Constructor methods
/////////////////////////

function meta::rel::metamodel::store::RAIDatabase(declarations: RelationDeclaration[*], program: Program[0..1], name: String[0..1]): RAIDatabase[1] {
  ^RAIDatabase(declarations=$declarations, program=$program, name=$name);
}

function meta::rel::metamodel::store::RAIDatabase(declarations: RelationDeclaration[*], name: String[0..1]): RAIDatabase[1] {
  RAIDatabase($declarations, [], $name);
}

function meta::rel::metamodel::store::RAIDatabase(declarations: RelationDeclaration[*]): RAIDatabase[1] {
  RAIDatabase($declarations, []);
}

function meta::rel::metamodel::store::relation(name: String[1], type: RelationType[1]): NamedRelationDeclaration[1] {
  ^NamedRelationDeclaration(name=$name, type=$type);
}

function meta::rel::metamodel::store::relation(name: String[1], arguments: ConstType[1..*]): NamedRelationDeclaration[1] {
  relation($name, relationType($arguments));
}

function meta::rel::metamodel::store::nestedRelation(parent: RelationDeclaration[1], this: RelationDeclaration[1]): NestedRelationDeclaration[1] {
  ^NestedRelationDeclaration(parent=$parent, this=$this);
}

function meta::rel::metamodel::store::with(database: RAIDatabase[1], declarations: RelationDeclaration[*]): RAIDatabase[1] {
  $database->mutateAdd('declarations', $declarations);
}

/////////////////////////
/// API methods
/////////////////////////

function meta::rel::metamodel::store::name(decl: RelationDeclaration[1]): String[1] {
  $decl->match([
    {named: NamedRelationDeclaration[1] | $named.name},
    {nested: NestedRelationDeclaration[1] | format('%s:%s', [$nested.parent->name(), $nested.this->name()])}
  ]);
}

/////////////////////////
/// Misc methods
/////////////////////////

function meta::rel::metamodel::store::toString(rel: NamedRelationDeclaration[1]): String[1] {
  $rel.name + '(' + $rel.type->toString() + ')';
}

function meta::rel::metamodel::store::toString(db: RAIDatabase[1]): String[1] {
  $db.declarations->stringify(e | $e->toString(), '\n');
}