import meta::rel::utils::lang::*;
import meta::rel::utils::*;

Class meta::rel::utils::lang::CaseExpr<T|m> {
  cond: Boolean[1];
  logic: FunctionDefinition<{->T[m]}>[1];
}

function meta::rel::utils::lang::case<T|m>(
  cond: Boolean[1], logic: FunctionDefinition<{->T[m]}>[1]
): CaseExpr<T|m>[1] {
  ^CaseExpr<T|m>(cond=$cond, logic=$logic);
}

function <<access.private>> meta::rel::utils::lang::switch<T|m>(
  from: Integer[1], 
  cases: CaseExpr<T|m>[*],
  default: FunctionDefinition<{->T[m]}>[1]
): T[m]  {
  if ($from >= $cases->size(), 
    | $default->eval(), 
    {|
      let eval =
        $cases
          ->at($from)
          ->map(case | if($case.cond, | $case.logic->eval(), | []));
      if ($eval->isEmpty(), | switch($from + 1, $cases, $default), | $eval); 
    }
  );
}

function meta::rel::utils::lang::switch<T|m>(cases: CaseExpr<T|m>[*], default: FunctionDefinition<{->T[m]}>[1]): T[m] {
  switch(0, $cases, $default);
}
