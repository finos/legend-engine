import meta::rel::utils::*;


Class meta::rel::utils::Result<T|n> { 
  <<equality.Key>> values: T[n];
  <<equality.Key>> errors: Any[*];
}

function meta::rel::utils::okOrElse<T|m>(value: T[m], else: FunctionDefinition<{->Result<T|m>[1]}>[1]): Result<T|m>[1] {
  if ($value->isEmpty(), 
    | $else->eval(), 
    {|
      ^Result<T|m>(
        values=if($value->size() > 1, | $value->toOneMany(), | $value->toOne())
      );
    }
  );
}

function meta::rel::utils::okOr<T|m>(value: T[m], message: FunctionDefinition<{->String[1]}>[1]): Result<T|m>[1] {
  $value->okOrElse(| ^Result<T|m>(errors=[error($message)]));
}

function meta::rel::utils::ok<T>(value: T[1]): Result<T|0..1>[1] {
  ^Result<T|0..1>(values=$value);
}

function meta::rel::utils::okm<T>(values: T[*]): Result<T|*>[1] {
  ^Result<T|*>(values=$values);
}

function meta::rel::utils::error(errors: Any[*]): Result<Nil|0..1>[1] {
  ^Result<Nil|0..1>(errors=$errors);
}

function meta::rel::utils::andThen<S,T|n>(result: Result<S|0..1>[1], fn: FunctionDefinition<{S[1]->Result<T|n>[1]}>[1]): Result<T|n>[1] {
  if($result.errors->isEmpty(), 
    | $fn->eval($result.values->evaluateAndDeactivate()), 
    | ^Result<T|n>(errors=$result.errors)
  );
}

function meta::rel::utils::andMany<S,T|n>(result: Result<S|0..1>[1], fn: FunctionDefinition<{S[1]->Result<T|n>[*]}>[1]): Result<T|n>[*] {
  if($result.errors->isEmpty(), 
    | $fn->eval($result.values->evaluateAndDeactivate()), 
    | ^Result<T|n>(errors=$result.errors)
  );
}

function meta::rel::utils::andThem<S,T|n>(result: Result<S|*>[1], fn: FunctionDefinition<{S[*]->Result<T|n>[1]}>[1]): Result<T|n>[1] {
  if($result.errors->isEmpty(), 
    | $fn->eval($result.values->evaluateAndDeactivate()), 
    | ^Result<T|n>(errors=$result.errors)
  );
}

function meta::rel::utils::then<S,T|n>(result: Result<S|0..1>[1], fn: FunctionDefinition<{S[1]->T[n]}>[1]): Result<T|n>[1] {
  if($result.errors->isEmpty(), 
    | ^Result<T|n>(values=$fn->eval($result.values->evaluateAndDeactivate()->toOne())), 
    | ^Result<T|n>(errors=$result.errors)
  );
}

function meta::rel::utils::them<S,T|n>(result: Result<S|*>[1], fn: FunctionDefinition<{S[*]->T[n]}>[1]): Result<T|n>[1] {
  if($result.errors->isEmpty(), 
    | ^Result<T|n>(values=$fn->eval($result.values->evaluateAndDeactivate())), 
    | ^Result<T|n>(errors=$result.errors)
  );
}

function meta::rel::utils::inspect<T|m>(result: Result<T|m>[1], fn: FunctionDefinition<{T[m]->Any[*]}>[1]): Result<T|m>[1] {
  if($result.errors->isEmpty(), 
    {| $fn->eval($result.values->evaluateAndDeactivate()); $result;}, 
    | $result
  );
}

function meta::rel::utils::else<S|m>(result: Result<S|m>[1], else: FunctionDefinition<{Any[*]->Result<S|m>[1]}>[1]): Result<S|m>[1] {
  if($result.errors->isEmpty(), | $result, | $else->eval($result.errors));
}

function meta::rel::utils::unwrap<T>(result: Result<T|0..1>[1]): T[1] {
  if($result.errors->isEmpty(), 
    | $result.values->toOne(), 
    | fail(
        $result
          .errors
          ->map(e | $e->toString())
          ->joinStrings()
      )
  );
}

function meta::rel::utils::unwrapm<T>(result: Result<T|*>[1]): T[*] {
  if($result.errors->isEmpty(), 
    | $result.values, 
    | fail(
        $result
          .errors
          ->map(e | $e->toString())
          ->joinStrings()
      )
  );
}

function meta::rel::utils::isOk<T|n>(result: Result<T|n>[1]): Boolean[1] {
  $result.errors->isEmpty();
}

function meta::rel::utils::isErr<T|n>(result: Result<T|n>[1]): Boolean[1] {
  !$result->isOk();
}

function meta::rel::utils::collect<T>(results: Result<T|0..1>[*]): Result<T|*>[1] {
  $results->fold({r: Result<T|0..1>[1], accum: Result<T|*>[1] |
    if($r->isOk(), | 
      ^Result<T|*>(
        values=if ($accum.errors->isEmpty(), | $accum.values->concatenate($r.values), | []), 
        errors=$accum.errors
      ), 
    | 
      ^Result<T|*>(errors=$accum.errors->concatenate($r.errors), values=[])
    )
  }, okm([])->cast(@Result<T|*>));
}

function meta::rel::utils::expand<T>(result: Result<T|*>[1]): Result<T|0..1>[*] {
  if ($result.errors->isEmpty(),
    | $result.values->map(v | ok($v)),
    | $result.errors->map(e | error($e))
  );
}

function meta::rel::utils::tryCast<T>(source: Any[1], object: T[1]): Result<T|0..1>[1] {
  if ($source->instanceOf($object->type()), 
    | ^Result<T|0..1>(values=$source->cast($object)), 
    {|
      let error = 'Cannot cast object of type ' +
        $source->type().name->orElse('<<unknown>>') + 
        ' into class ' + 
        $object->type().name->orElse('<<unknown>>');
      ^Result<T|0..1>(errors=[$error]);
    }
  );
}

function meta::rel::utils::tryCastm<T>(source: Any[*], object: T[1]): Result<T|*>[1] {
  $source
    ->map(o | $o->tryCast($object))
    ->collect();
}

function meta::rel::utils::tryCast<T>(result: Result<Any|0..1>[1], object: T[1]): Result<T|0..1>[1] {
  $result->andThen(inner: Any[1] | $inner->tryCast($object));
}

function meta::rel::utils::tryCastm<T>(result: Result<Any|*>[1], object: T[1]): Result<T|*>[1] {
  $result->andThem(inner: Any[*] | $inner->tryCastm($object));
}

function meta::rel::utils::test<T>(
  result: Result<T|0..1>[1], 
  check: FunctionDefinition<{T[1]->Boolean[1]}>[1],
  else: FunctionDefinition<{T[1]->Result<T|0..1>[1]}>[1]
): Result<T|0..1>[1] {
  $result->andThen({inner: T[1] | 
    if ($check->eval($inner), | $result, | $else->eval($inner));
  });
}

function meta::rel::utils::test<T>(
  object: T[1], 
  check: FunctionDefinition<{T[1]->Boolean[1]}>[1],
  else: FunctionDefinition<{T[1]->Result<T|0..1>[1]}>[1]
): Result<T|0..1>[1] {
  $object->ok()->test($check, $else);
}

function meta::rel::utils::testm<T>(
  result: Result<T|*>[1], 
  check: FunctionDefinition<{T[*]->Boolean[1]}>[1],
  else: FunctionDefinition<{->Result<T|*>[1]}>[1]
): Result<T|*>[1] {
  $result->andThem({inner: T[*] | 
    if ($check->eval($inner), | $result, | $else->eval());
  });
}
