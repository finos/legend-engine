import meta::external::store::rel::mapping::*;
import meta::pure::mapping::*;
import meta::pure::store::*;
import meta::external::store::rel::metamodel::*;
import meta::external::store::rel::utils::*;


Class meta::external::store::rel::mapping::RelSetImplementation extends InstanceSetImplementation {
  // We demand an expression that defines the class we are implementing.
  classExpr: Expr[1];
}

function meta::external::store::rel::mapping::relInstanceSet<T>(
  owner: Mapping[1],
  sourceClass: Class<T>[1], 
  classExpr: Expr[1]
): RelSetImplementation[1] {
  ^RelSetImplementation(
    id=$sourceClass->elementToPath('_'),
    root=true,
    class=$sourceClass,
    parent=$owner,
    stores=[],
    classExpr=$classExpr
  );
}

Class meta::external::store::rel::mapping::RelPropertyMapping extends PropertyMapping {
  target: Expr[1];
}

/////////////////////////
/// Constructor methods
/////////////////////////

function <<access.private>> meta::external::store::rel::mapping::propertyMapping(
  property: Property<Nil,Any|*>[1], 
  target: Expr[1],
  owner: RelSetImplementation[0..1],
  store: Store[0..1]
): RelPropertyMapping[1] {
  let targetSetImplementationId = 
    if ($property->isPrimitiveValueProperty(), 
      | [],
      | $property.name
          ->map(n: String[1] |
            if ($property.owner->instanceOf(Association), {| 
              $property.owner
                  ->cast(@Association)
                  ->propertyByName($n)
                  ->map(property | 
                    $property.genericType.rawType
                      ->map(type | $type->elementToPath('_')));
            },
            {|
              //$property->ownerClass()->elementToPath('_');
              $property.genericType.rawType->toOne()->elementToPath('_')
            })
          )
    );

  ^RelPropertyMapping(
    targetSetImplementationId=$targetSetImplementationId->else(| ''),
    sourceSetImplementationId=$property->ownerClass()->elementToPath('_'),
    property=$property,
    target=$target,
    store=$store,
    owner=$owner
  );
}

function meta::external::store::rel::mapping::propertyMapping<T>(
  sourceClass: Class<T>[1], 
  property: String[1], 
  target: Expr[1],
  owner: RelSetImplementation[0..1],
  store: Store[0..1]
): RelPropertyMapping[0..1] {
  $sourceClass
    ->propertyByName($property)
    ->map(prop | 
      propertyMapping(
        $prop->cast(@Property<Nil,Any|*>),
        $target,
        $owner,
        $store
      )
    )
}

function <<access.private>> meta::external::store::rel::mapping::withPropertyMapping(
  setImpl: RelSetImplementation[1],
  propertyMapping: RelPropertyMapping[1]
): RelSetImplementation[1] {
  $setImpl->mutateAdd(
    'propertyMappings',
    $propertyMapping
  );

  if (!$propertyMapping.store->in($setImpl.stores),
    | $setImpl->mutateAdd('stores', $propertyMapping.store),
    | $setImpl
  );
}

function meta::external::store::rel::mapping::withPropertyMapping(
  setImpl: RelSetImplementation[1],
  source: Property<Nil,Any|*>[1], 
  target: Expr[1],
  store: Store[0..1]
): RelSetImplementation[1] {
  $setImpl->withPropertyMapping(propertyMapping($source, $target, $setImpl, $store));
}

function meta::external::store::rel::mapping::addSetImplementation(
  mapping: Mapping[1],
  setImpl: RelSetImplementation[1]
): Mapping[1] {
  assert($setImpl.parent == $mapping, 'Cannot add a set implementation that is owned by another mapping.');
  $mapping->mutateAdd('classMappings', $setImpl);
  $mapping;
}