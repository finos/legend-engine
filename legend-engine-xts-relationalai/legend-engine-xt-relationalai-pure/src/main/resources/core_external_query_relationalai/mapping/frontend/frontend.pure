import meta::external::store::rel::mapping::frontend::*;
import meta::external::store::rel::mapping::*;
import meta::pure::mapping::*;
import meta::external::store::rel::metamodel::*;
import meta::external::store::rel::utils::*;
import meta::external::store::rel::utils::meta::*;
import meta::pure::store::*;
import meta::external::store::rel::metamodel::store::*;
import meta::external::store::rel::utils::collection::*;
import meta::external::store::rel::utils::lang::*;
import meta::external::store::rel::compile::utils::*;
import meta::external::store::rel::runtime::*;
import meta::external::store::rel::execute::*;
import meta::external::store::rel::utils::visitor::*;

Class meta::external::store::rel::mapping::frontend::RAISchema {
  mapping: Mapping[1];
  store: RAIDatabase[1];

  insertFns: Map<Class<Any>, FunctionDefinition<{Any[1..*]->Rule[*]}>>[1];
}

function meta::external::store::rel::mapping::frontend::RAISchema(name: String[1]): RAISchema[1] {
  ^RAISchema(
    mapping=^Mapping(), 
    store=RAIDatabase([], $name), 
    insertFns=^Map<Class<Any>, FunctionDefinition<{Any[1]->Rule[*]}>>()
  )
}

function meta::external::store::rel::mapping::frontend::schema(class: Class<Any>[1]): RelationDeclaration[1] {
  $class.name
    ->toOne()
    ->relation([entityType($class)])
}

function meta::external::store::rel::mapping::frontend::schema(property: Property<Nil,Any|*>[1]): RelationDeclaration[1] {
  $property->schema(
    $property
      .owner
      ->cast(@Class<Any>)
  )
}

function meta::external::store::rel::mapping::frontend::schema(property: Property<Nil,Any|*>[1], parent: Class<Any>[0..1]): RelationDeclaration[1] {
  let name = $property.name->toOne();
  let rawType = $property->type();

  let type = switch([
    case($rawType == String,          | stringType()),
    case($rawType == Integer,         | integerType()),
    case($rawType == Float,           | floatType()),
    case($rawType->instanceOf(Class), | entityType($rawType->cast(@Class<Any>)))
  ], {| 
    fail(format('Unknown type for property %s', $name));
    entityType(Any);
  });

  $parent
    ->map({class: Class<Any>[1] | 
      format('%s:%s', [$class.name->toOne(), $name])
      ->relation([entityType($class), $type])
    })
    ->orElse($name->relation([hashValueType(), $type]));
}

function meta::external::store::rel::mapping::frontend::includeClass(schema: RAISchema[1], class: Class<Any>[1]): RAISchema[1] {
  /*
   * If the schema already includes a mapping for the given class then this function does nothing.
   */
  if (!$schema.mapping->_classMappingByClass($class)->isEmpty(), | $schema, {|
    let classRelation = $class->schema();

    let properties = $class
      ->meta::pure::functions::meta::hierarchicalProperties()
      ->concatenate(
        $class->meta::pure::functions::meta::hierarchicalPropertiesFromAssociations()
      )
      ->map({p |         
        let owner = 
          if($p.owner->instanceOf(Association), {|
            let assoc = $p.owner->cast(@Association);
            let left = $assoc.properties->at(0);
            let right = $assoc.properties->at(1);

            let ref = if ($p == $left, | $right, | $left );
            $ref.genericType.rawType->toOne()->cast(@Class<Any>);
          }, | $p.owner->cast(@Class<Any>));

        let relation = $p->schema($owner);
        pair($p->cast(@Property<Nil, Any|*>), $relation);
      });
    
    let augmentedStore = 
      $properties.second
        ->fold({decl, accum |
          $accum->with($decl);
        }, $schema.store)
      ->with($classRelation);

    /*
     * The Rel expression that corresponds to the Pure class.
     */
    let classExpr = $classRelation->name()->rel();

    let instanceSetInitial = $schema.mapping->relInstanceSet($class, $classExpr);

    let instanceSetComplete =
      $properties
        ->fold({property: Pair<Property<Nil, Any|*>, RelationDeclaration>[1], accum: RelSetImplementation[1] |
          $accum->withPropertyMapping($property.first, $property.second->name()->rel(), $augmentedStore);
        }, $instanceSetInitial);

    let augmentedMapping =
      $schema.mapping
        ->addSetImplementation($instanceSetComplete);

    let augmentedSchema = 
      ^$schema(
        mapping=$augmentedMapping, 
        store=$augmentedStore, 
        insertFns=$schema.insertFns->put($class, $class->insertFunction())
      );
      
    $class
      .propertiesFromAssociations
      ->filter(property | $property->type()->instanceOf(Class))
      ->fold({property: Property<Nil, Any|*>[1], accum |
        let associated = $property
          .genericType
          .rawType
          ->toOne()
          ->cast(@Class<Any>);
        $accum->includeClass($associated);
      }, $augmentedSchema);
  });
}

function meta::external::store::rel::mapping::frontend::includeClassRecursive(schema: RAISchema[1], class: Class<Any>[1]): RAISchema[1] {
  // TODO: Do we need all specializations / generalizations?
  let subclasses = meta::pure::functions::meta::findAllSpecializations($class);
  let superclasses = meta::pure::functions::meta::hierarchicalAllGeneralizations($class);
  $subclasses->concatenate($superclasses)->fold({c: Class<Any>[1], s: RAISchema[1] |
    $s->includeClass($c)
  }, $schema->includeClass($class));
}

function meta::external::store::rel::mapping::frontend::insertFunction(
  class: Class<Any>[1]
): FunctionDefinition<{Any[1..*]->Rule[*]}>[1] {
  {objects: Any[1..*] |
    $class
      ->insertFunction(^Visited<Rule>(explored=^Map<Any,Any>()))
      ->eval($objects)
      .values
  }
}

function <<access.private>> meta::external::store::rel::mapping::frontend::insertFunction(
  class: Class<Any>[1],
  visited: Visited<Rule>[1]
): FunctionDefinition<{Any[1..*]->Visited<Rule>[1]}>[1] {
  let classRelation = $class->schema();
  let factory = ^IdentifierFactory();
  
  {objects: Any[1..*] |
    $objects->fold({object, visited |
      if (!$visited->hasVisited($object), {|
        let entityVar = var('id');
        // Fetch associated properties
        let associated = $class
          ->complexProperties()
          ->toIndexed()
          ->map({pair: Pair<Integer, Property<Nil,Any|*>>[1] |
            let index = $pair.first;
            let property = $pair.second;

            $property
              ->rawEvalProperty($object)
              ->map({value |
                // Introduce a bound variable for each associated property
                triple($property.name->toOne()->label(), $value, $factory->next()->var())
              });
          });

        let rule = 
          rel('insert')
          ->appl($classRelation->name()->label())
          ->def(
            $entityVar
              ->concatenate(
                // Create tuples of the form `(:property, #, value)`, where `#` is the 
                // (variable bound to) the hash value of `$object`
                $class
                  ->primitiveProperties()
                  ->map({property |
                    $property
                      ->rawEvalProperty($object)
                      ->map({value: Any[1] |
                        [$property.name->toOne()->label(), $entityVar, const($value)]
                          ->tuple()
                      })
                  })
              )
              ->concatenate(
                // Add insertion records for associated properties
                $associated
                  ->map({triple |
                    [$triple.first, $entityVar, $triple.third]->tuple();
                  })
              )
              ->toOneMany()
              ->union()
              ->from(
                $entityVar
                  ->concatenate($associated.third)
                  ->toOneMany()
                  ->where(
                    $associated
                      ->fold({assoc, accum |
                        $accum->and(
                          $assoc.third->equals(
                            // TODO maybe externalize this functionality
                            rel('pure_hash')->appl(entityRecord($assoc.second))
                          )
                        );
                      }, $entityVar->equals(
                        rel('pure_hash')->appl(entityRecord($object))
                      ))
                  )
              )
          );
          
        $associated
          ->fold({triple, accum |
            insertFunction($triple.second->class(), $accum)
              ->eval($triple.second)
              ->report($accum);
          }, $visited->report($object))
          ->with($rule);
      }, | $visited);
    }, $visited);
  };
}

function <<access.private>> meta::external::store::rel::mapping::frontend::entityRecord(object: Any[1]): Expr[1] {
  let class = $object->class();

  $class
    ->primitiveProperties()
    ->map({property |
      $property
        ->rawEvalProperty($object)
        ->map({value |
          [$property.name->toOne()->label(), const($value)]
            ->tuple()
        })
    })
    ->relation();
}
