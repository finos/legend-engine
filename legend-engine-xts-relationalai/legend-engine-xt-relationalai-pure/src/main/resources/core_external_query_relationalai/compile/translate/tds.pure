import meta::rel::compile::*;
import meta::rel::compile::utils::*;
import meta::rel::compile::ir::*;
import meta::rel::compile::ir::tds::*;
import meta::rel::utils::*;
import meta::rel::metamodel::*;

function meta::rel::compile::tds::compile(
  join: Join[1], 
  callback: FunctionDefinition<{Any[1]->Result<Expr|0..1>[1]}>[1],
  state: CompilationState[1]
): Result<CompilationState|0..1>[1] {
  $join.left
    ->compile($callback, $state)
    ->andThen({leftState: CompilationState[1] |
      let left = $leftState.current->toOne();

      $join.right
        ->compile($callback, $leftState)
        ->andThen({rightState: CompilationState[1] |
          let right = $rightState.current->toOne();
          
          let leftVar = $join.condition.variables->at(0);
          let rightVar = $join.condition.variables->at(1);

          let target = $leftState.relFactory->next('tbl');
          let vi = var('i');
          let vj = var('j');

          $join.condition
            ->compile({a: Any[1] |
              $a->tryCast(@ColumnAccess)
                ->then({access: ColumnAccess[1] |
                  let var = $access
                    ->root()
                    ->cast(@VariablePlaceholder);

                  if ($var.identifier == $leftVar, {|
                    $left->appl([label($access.column), $vi]);
                  }, {|
                    $right->appl([label($access.column), $vj]);
                  });
                });
            }, $rightState)
            ->then({joinedState: CompilationState[1] |
              let joined = $joinedState.current->toOne();

              let joinRule = def(
                rel($target)
                  ->appl(label('base')),
                rel('sort')->appl(
                  $joined->for(vars([$vi, $vj]))
                )
              );

              let projections = 
                $leftState.cols.names
                  ->map({col: String[1] |
                    def(
                      $target
                        ->appl(label($col)),
                      [
                        var('k'),
                        $left->appl([label($col), var('i')]),
                        $target->appl([label('base'), var('k'), var('i'), dontCare()])
                      ]
                      ->product()
                      ->from(vars(['i', 'k']))
                    );
                  })
                  ->concatenate(
                    $rightState.cols.names
                      ->map({col: String[1] |
                        def(
                          $target
                            ->appl(label($col)),
                          [
                            var('k'),
                            $right->appl([label($col), var('i')]),
                            $target->appl([label('base'), var('k'), dontCare(), var('i')])
                          ]
                          ->product()
                          ->from(vars(['i', 'k']))
                        );
                      })
                  );

              ^$joinedState(
                program=$joinedState.program->with($joinRule->concatenate($projections)),
                cols=columns($leftState.cols.names->concatenate($rightState.cols.names)),
                current=rel($target)
              );
            });
        });
    });
}

function meta::rel::compile::tds::compile(
  filter: TDSFilter[1],
  callback: FunctionDefinition<{Any[1]->Result<Expr|0..1>[1]}>[1],
  state: CompilationState[1]
): Result<CompilationState|0..1>[1] {
  $filter.parent
    ->compile($callback, $state)
    ->andThen({parentState: CompilationState[1] |
      let parent = $parentState.current->toOne();
      let vx = var('x');
      
      $filter.predicate
        ->compile({a: Any[1] |
          $a->tryCast(@ColumnAccess)
            ->andThen({access: ColumnAccess[1] |
              let var = $access
                ->root()
                ->cast(@VariablePlaceholder)
                .identifier;

              if ($var == $filter.predicate.variables, {|
                $parent
                  ->appl([label($access.column), $vx])
                  ->ok();
              }, | $callback->eval($a));
            });
        }, $parentState)
        ->then({next: CompilationState[1] |
          let table = $next.relFactory->next('tbl');
          let predicate = $next.current->toOne();

          let vc = var('c');

          let head = rel($table);
          let rule = 
            $head
              ->appl([$vc, $vx])
              ->def([
                $parent->appl([$vc, $vx]),
                $predicate
              ]);

          ^$next(
            current=$head,
            program=$next.program->with($rule)
          );
        });
    });
}