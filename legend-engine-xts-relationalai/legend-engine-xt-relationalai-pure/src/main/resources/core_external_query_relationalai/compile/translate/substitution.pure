/*
 * Implementation of variable substitutions for P-Expressions.
 */

import meta::external::store::rel::compile::ir::*;
import meta::external::store::rel::compile::substitution::*;
import meta::external::store::rel::metamodel::*;
import meta::external::store::rel::trace::*;
import meta::external::store::rel::utils::*;

Class meta::external::store::rel::compile::substitution::VariableSubstitution {
  /** The mapping from variables names to expressions. The trace is for debugging only. */
  function: FunctionDefinition<{String[1],Trace[1]->Result<Expr|0..1>[1]}>[1];
}

Class meta::external::store::rel::compile::substitution::ColumnAccessRewrite {
  /** The mapping from column expressions to column expressions. The trace is for debugging only. */
  function: FunctionDefinition<{PExprColumnAccess[1],Trace[1]->Result<Expr|0..1>[1]}>[1]; // TODO: Make the return type PExprColumnAccess
}

function meta::external::store::rel::compile::substitution::emptySubstitution(): VariableSubstitution[1] {
  ^VariableSubstitution(function={var: String[1], trace: Trace[1] | error(format('No binding in substitution for variable `%s`.', $var), $trace) })
}

function meta::external::store::rel::compile::substitution::emptyColumnAccessRewrite(): ColumnAccessRewrite[1] {
  ^ColumnAccessRewrite(function={_expr: PExprColumnAccess[1], trace: Trace[1] | error('No binding in column access rewrite for given expression.', $trace) })
}

/**
  * Add a mapping to the expression rewriting, where the target expression is lazily evaluated.
  */
function meta::external::store::rel::compile::substitution::newColumnAccessRewrite(
  function: FunctionDefinition<{PExprColumnAccess[1],Trace[1]->Result<Expr|0..1>[1]}>[1] // TODO: Can we map only to PExprColumnAccess?
): ColumnAccessRewrite[1] {
  ^ColumnAccessRewrite(function=$function)
}


function meta::external::store::rel::compile::substitution::addBinding(
  substitution: VariableSubstitution[1],
  key: String[1],
  value: Variable[1]
): VariableSubstitution[1] {
  /*
   * Add the mapping `key -> value` to the callback function.
   */
  ^VariableSubstitution(function={var: String[1], trace: Trace[1] |
    if ($var == $key, 
      | ok($value), 
      | $substitution.function->eval($var, $trace)
    )
  })
}

/**
  * Add a mapping to the substitution, where the target expression is lazily evaluated.
  */
function meta::external::store::rel::compile::substitution::addBinding(
  substitution: VariableSubstitution[1],
  key: String[1],
  expr: FunctionDefinition<{->Result<Expr|0..1>[1]}>[1]
): VariableSubstitution[1] {
  /*
   * Add the mapping `key -> value` to the substitution function.
   */
  ^VariableSubstitution(function={var: String[1], trace: Trace[1] |
    if ($var == $key, 
      | $expr->eval(),
      | $substitution.function->eval($var, $trace)
    )
  })
}

function meta::external::store::rel::compile::substitution::apply(
  substitution: VariableSubstitution[1],
  key: String[1],
  trace: Trace[1]
): Result<Expr|0..1>[1] {
  $substitution.function->eval($key, $trace);
}

function meta::external::store::rel::compile::substitution::apply(
  mapping: ColumnAccessRewrite[1],
  key: PExprColumnAccess[1],
  trace: Trace[1]
): Result<Expr|0..1>[1] {
  $mapping.function->eval($key, $trace);
}