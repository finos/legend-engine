import meta::rel::utils::collection::*;
import meta::rel::compile::*;
import meta::rel::metamodel::*;
import meta::rel::compile::utils::*;
import meta::rel::utils::*;


/**
  * Type that tracks the state of compilation.
  */
Class meta::rel::compile::CompilationState {
  // The program generated thus far.
  program: Program[1];
  // The current expression. This expression is used to
  // indicate the output of the subsequent step. This is a
  // convenient helper attribute so that steps do not have to 
  // manually inspect `program` to retrieve the relevant result
  // of the previous compilation step.
  current: Expr[0..1];
  // A variable factory for generating unique identifiers.
  variableFactory: IdentifierFactory[1];

  // Factory used for producing relation names
  relFactory: IdentifierFactory[1];

  // Column names of the output
  cols: Columns[1];
  debugContext: DebugContext[1];

  // TODO: We can use this field to implement custom output
  // serialization as used in, e.g., `graphFetch`.
  serializers: Any[*];
}

function meta::rel::compile::CompilationState(debugContext: DebugContext[1]): CompilationState[1] {
  ^CompilationState(
    program=program('compiled', []),
    variableFactory=^IdentifierFactory(),
    relFactory=^IdentifierFactory(),
    debugContext=$debugContext,
    cols=columns()
  );
}

function meta::rel::compile::step(
  state: Result<CompilationState|0..1>[1],
  logic: FunctionDefinition<{Expr[1]->Result<Expr|0..1>[1]}>[1]
): Result<CompilationState|0..1>[1] {
  $state->andThen({inner: CompilationState[1] |
    $inner.current
      ->okOr(| 'Expected expression in current state.')
      ->andThen($logic)
      ->then({expr: Expr[1] | ^$inner(current=$expr)});
  });
}

function meta::rel::compile::current(state: Result<CompilationState|0..1>[1]): Result<Expr|0..1>[1] {
  $state->andThen(inner: CompilationState[1] | $inner->current());
}

function meta::rel::compile::current(state: CompilationState[1]): Result<Expr|0..1>[1] {
  $state.current->okOr(| 'Current expression empty.');
}
