import meta::external::store::rel::compile::ir::*;
import meta::external::store::rel::compile::ir::tds::*;
import meta::external::store::rel::compile::ir::typeinfo::*;
import meta::external::store::rel::compile::ir::utils::*;
import meta::external::store::rel::mapping::*;
import meta::external::store::rel::trace::*;
import meta::external::store::rel::utils::*;
import meta::external::store::rel::utils::lang::*;
import meta::pure::router::metamodel::*;
import meta::pure::router::store::metamodel::*;

function <<access.private>> meta::external::store::rel::compile::ir::handleCaseProject1(
  func: FunctionExpression[1],
  typeInfo: TranspileTypeInfo[1],
  trace: Trace[1]
): Result<PExprProject|0..1>[1] {
  assert($func.func == project_T_MANY__Path_MANY__TabularDataSet_1_);

  let newTrace = $trace->stage('handleCaseProject1(FunctionExpression[1],Trace[1])');

  let param0 = $func.parametersValues->at(0);
  // Second argument is the path.
  let param1 = $func.parametersValues->at(1);

  $param0
    ->valueSpecToPExpr($typeInfo, $trace)
    ->andThen({parent: PExpr[1] |
      switch([
        case($param1->instanceOf(ExtendedRoutedValueSpecification),
          | $param1
              ->cast(@ExtendedRoutedValueSpecification)
              .value
              ->cast(@InstanceValue)
              .values
              ->cast(@meta::pure::metamodel::path::Path<Nil,Any|1>)
        ),
        case($param1->instanceOf(InstanceValue), |
          $param1
            ->cast(@InstanceValue)
            .values
            ->cast(@meta::pure::metamodel::path::Path<Nil,Any|1>)
        )
      ], {| $param1->reactivate(); })
      ->okOr(| errorTrace('Encountered unknown argument during compilation of `project_T_MANY__Path_MANY__TabularDataSet_1_`.', $newTrace))
      ->andThem({paths: meta::pure::metamodel::path::Path<Nil,Any|1>[*] |
        $parent
          ->set()
          ->okOr(| errorTrace('Expected set in parent expression of `project_T_MANY__Path_MANY__TabularDataSet_1_`.', $newTrace))
          ->andThen({set: RelSetImplementation[1] |
            $paths
              ->map({path |
                $path.path
                  ->fold({element, accum |
                    $accum
                      ->andThen({expr: PExpr[1] |
                        $element
                          ->tryCast(@meta::pure::metamodel::path::PropertyPathElement, $newTrace)
                          ->andThen(p: meta::pure::metamodel::path::PropertyPathElement[1] | $p.property->tryCast(@Property<Nil,Any|*>, $newTrace))
                          ->andThen({property: Property<Nil,Any|*>[1] |
                            $typeInfo
                              ->mappingForProperty($property)
                              ->okOr(|
                                errorTrace(format('No mapping for property `%s`.', $property.name), $newTrace)
                              )
                              ->then(propertyMapping: RelPropertyMapping[1] |
                                $expr->propertyAccess($propertyMapping);
                              )
                          });
                      });
                  }, ok(setAccess($set, 'x')))
                  ->then(expr: PExpr[1] |
                    let name =
                      if ($path.name->isEmpty() || $path.name == '', {|
                        $path.path
                          ->last()
                          ->map({last |
                            if ($last->instanceOf(meta::pure::metamodel::path::PropertyPathElement), {|
                              $last
                                ->cast(@meta::pure::metamodel::path::PropertyPathElement)
                                .property
                                .name
                                ->orElse('')
                            }, | '')
                          })
                          ->orElse('');
                      }, | $path.name)
                      ->orElse('');

                    pair($name, $expr->scopeUntyped('x')->withParent($parent));
                  );
              })
              ->collect()
              ->them({pairs: Pair<String, PExprScope>[*] |
                $parent->project($pairs);
              });
          });
      });
    });
}

function <<access.private>> meta::external::store::rel::compile::ir::handleCaseProject2(
  func: FunctionExpression[1],
  typeInfo: TranspileTypeInfo[1],
  trace: Trace[1]
): Result<PExprProject|0..1>[1] {
  assert($func.func == project_T_MANY__ColumnSpecification_MANY__TabularDataSet_1_ ||
         $func.func == project_TabularDataSet_1__ColumnSpecification_MANY__TabularDataSet_1_);

  let newTrace = $trace->stage('handleCaseProject1(FunctionExpression[1],Trace[1])');

  let param0 = $func.parametersValues->at(0);
  // Second argument is the column specification.
  let param1 = $func.parametersValues->at(1);

  $param0
    ->valueSpecToPExpr($typeInfo, $trace)
    ->andThen({parent: PExpr[1] |
      $param1
        ->tryCast(@InstanceValue, $newTrace)
        ->andThen({params: InstanceValue[1] |
          $params.values
            ->map({v |
              $v->tryCast(@InstanceValue, $newTrace)
                ->then(i: InstanceValue[1] |
                  // Values guaranteed by function signature
                  $i.values
                    ->toOne()
                    ->cast(@BasicColumnSpecification<Any>)
                );
            })
            ->collect()
            ->andThem({columns: BasicColumnSpecification<Any>[*] |
              $columns.func
                ->map(f |
                  $f->tryCast(@FunctionDefinition<Any>, $newTrace)
                    ->andThen(fexpr: FunctionDefinition<Any>[1] | $fexpr->functionDefToUntypedScoped($typeInfo, $parent, $trace))
                )
                ->collect()
                ->them(fexprs: PExprScope[*] | $parent->project($columns.name->zip($fexprs)));
            });
        });
    });
}

function <<access.private>> meta::external::store::rel::compile::ir::handleCaseProject3(
  func: FunctionExpression[1],
  typeInfo: TranspileTypeInfo[1],
  trace: Trace[1]
): Result<PExprProject|0..1>[1] {
  assert($func.func == project_K_MANY__Function_MANY__String_MANY__TabularDataSet_1_);

  let newTrace = $trace->stage('handleCaseProject3(FunctionExpression[1],Trace[1])');

  let param0 = $func.parametersValues->at(0);
  // Second argument is the function. (TODO: document what this is.)
  let param1 = $func.parametersValues->at(1);
  // Third argument is the column names.
  let param2 = $func.parametersValues->at(2);

  $param0
    ->valueSpecToPExpr($typeInfo, $newTrace)
    ->andThen({parent: PExpr[1] |
      $param1->match([
        {
          v: InstanceValue[1] |
            $v.values
              ->map( v |
                $v->tryCast(@FunctionRoutedValueSpecification, $newTrace)
                  ->then(s: FunctionRoutedValueSpecification[1] |
                    // CHECK: Is value type guarenteed?
                    $s.value->cast(@InstanceValue)
                  )
              )
              ->collect()
        },
        {
          v: StoreMappingRoutedValueSpecification[1] |
            $v.value
              ->cast(@FunctionRoutedValueSpecification)
              .value
              ->tryCast(@InstanceValue, $newTrace)
        },
        {
          v: FunctionRoutedValueSpecification[1] |
            $v.value->tryCast(@InstanceValue, $newTrace)
        },
        {
          a: Any[1] |
            let message =
              'Encountered unknown type: ' +
                $a
                  ->type()
                  ->elementToPath()
                  ->else(| '<<unknown>>')
                  ->quote();
            error($message, $newTrace);
        }
      ])
      ->andThem({i: InstanceValue[*] |
        $i.values
          ->map(v |
            // Type Result<Project>
            $v->tryCast(@FunctionDefinition<Any>, $newTrace)
              ->andThen(fexpr: FunctionDefinition<Any>[1] | $fexpr->functionDefToUntypedScoped($typeInfo, $parent, $newTrace))
          )
          ->collect()
          ->andThem(fexprs: PExprScope[*] |
            // Type Result<Project>
            $param2->tryCast(@InstanceValue, $newTrace)->then(param: InstanceValue[1] |
              // Type guaranteed by function signature.
              let columnNames = $param.values->cast(@String);
              $parent->project($columnNames->zip($fexprs));
            )
          )
      });
  });
}

function <<access.private>> meta::external::store::rel::compile::ir::handleCaseRestrict(
  func: FunctionExpression[1],
  typeInfo: TranspileTypeInfo[1],
  trace: Trace[1]
): Result<PExpr|0..1>[1] {
  assert($func.func == restrict_TabularDataSet_1__String_MANY__TabularDataSet_1_);

  let newTrace =
    $trace
      ->stage('handleCaseRestrict(FunctionExpression[1],TranspileTypeInfo[1],Trace[1])')
      ->detailLazy('typeInfo', $typeInfo->describeLazy());

  // First argument is the table.
  let param0 = $func.parametersValues->at(0);
  // Second argument is the column specification.
  let param1 = $func.parametersValues->at(1);


  $param0
    ->valueSpecToPExpr($typeInfo, $newTrace)
    ->andThen(parent: PExpr[1] |
      $param1->tryCast(@InstanceValue, $newTrace)->then(param: InstanceValue[1] |
        // Type guaranteed by function signature.
        let columnNames = $param.values->cast(@String);

        /*
         * Here we eagerly push restricts inwards to avoid generating intermediate tables
         * with more columns than necessary in order to be certain that we do not materialize
         * a column in an intermediate table which is not later used.
         *
         * An alternative design would be to have an optimization phase, to rewrite the PExpr
         * AST, which would do the same operation, and also remove other unused columns from
         * intermediate tables where possible.
         */
        $parent->match([
          { project: PExprProject[1] |
              /*
               * Handle simple case of a `restrict` immediately following a `project` by
               * pushing the restriction into the projection.
               */
              let newProjections = $project.projections->filter(p: Pair<String,PExprScope>[1] |
                $columnNames->contains($p.first)
              );
              ^$project(projections=$newProjections);
          },
          {
            join: PExprTDSJoin[1] |
              /*
               * If a `join` is immediately followed by a `restrict` then the `restrict` is
               * used to specify the output columns of the join. 
               */
              ^$join(columnNames=$columnNames);
          },
          { other: PExpr[1] |
            /*
             * All other cases are handled by projecting out columns in the final output.
             */
            $parent->restrict($columnNames)
          }
        ]);
      )
    );
}