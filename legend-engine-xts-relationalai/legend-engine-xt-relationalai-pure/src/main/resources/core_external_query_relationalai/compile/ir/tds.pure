import meta::rel::compile::ir::*;
import meta::rel::compile::ir::tds::*;
import meta::rel::utils::*;
import meta::rel::utils::lang::*;

Class meta::rel::compile::ir::tds::Join extends PExpr {
  type: meta::relational::metamodel::join::JoinType[1];
  condition: Scoped[1];
  left: PExpr[1];
  right: PExpr[1];
}

Class meta::rel::compile::ir::tds::TDSFilter extends PExpr {
  parent: PExpr[1];
  predicate: Scoped[1];
}

function meta::rel::compile::ir::tds::join(
  left: PExpr[1], 
  right: PExpr[1], 
  type: meta::relational::metamodel::join::JoinType[1],
  condition: Scoped[1]
): Join[1] {
  ^Join(type=$type, condition=$condition, left=$left, right=$right);
}

function meta::rel::compile::ir::tds::filter(parent: PExpr[1], predicate: Scoped[1]): TDSFilter[1] {
  ^TDSFilter(parent=$parent, predicate=$predicate);
}

function meta::rel::compile::ir::tds::intoPExpr(func: FunctionExpression[1]): Result<PExpr|0..1>[1] {
  switch([
    case($func.func == meta::pure::tds::join_TabularDataSet_1__TabularDataSet_1__JoinType_1__Function_1__TabularDataSet_1_, {|
      $func.parametersValues
        ->at(0)
        ->meta::rel::compile::ir::intoPExpr()
        ->andThen({left: PExpr[1] |
          $func.parametersValues
            ->at(1)
            ->meta::rel::compile::ir::intoPExpr()
            ->andThen({right: PExpr[1] | 
              $func.parametersValues
                ->at(2)
                ->reactivate(^Map<String, List<Any>>())
                ->tryCastm(@meta::relational::metamodel::join::JoinType)
                ->them({js | $js->toOne()})
                ->andThen({joinType: meta::relational::metamodel::join::JoinType[1] |
                  $func.parametersValues
                    ->at(3)
                    ->intoScoped()
                    ->then(condition: Scoped[1] | join($left, $right, $joinType, $condition));
                });
            });
        });
    }),
    case($func.func == meta::pure::tds::filter_TabularDataSet_1__Function_1__TabularDataSet_1_, {|
      $func.parametersValues
        ->at(0)
        ->meta::rel::compile::ir::intoPExpr()
        ->andThen({parent: PExpr[1] |
          $func.parametersValues
            ->at(1)
            ->meta::rel::compile::ir::intoScoped()
            ->then({predicate: Scoped[1] |
              meta::rel::compile::ir::tds::filter($parent, $predicate);
            });
        });
    })
  ], {| 
    let error = error(| 
      'Encountered unknown instance while translating: ' +
        $func.func
          ->elementToPath()
          ->else(| '<<unknown>>')
          ->quote();
    );
    error($error);
  })
}