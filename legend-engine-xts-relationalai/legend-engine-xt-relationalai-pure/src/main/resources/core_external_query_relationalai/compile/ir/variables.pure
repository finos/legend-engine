import meta::pure::router::metamodel::*;
import meta::pure::router::store::metamodel::*;
import meta::external::store::rel::compile::ir::*;
import meta::external::store::rel::mapping::*;
import meta::external::store::rel::trace::*;
import meta::external::store::rel::utils::*;

/////////////////////////////////////////////////////////////////////////////
// Shared implementation for creation of typed and untyped variable scopes //
/////////////////////////////////////////////////////////////////////////////

function <<access.private>> meta::external::store::rel::compile::ir::handleCaseValueSpecToScopes(
  spec: ValueSpecification[1],
  requireType: Boolean[1],
  parent: PExpr[0..1],
  trace: Trace[1]
): Result<PExprScope|0..1>[*] {
  let newTrace = $trace->stage('handleCaseValueSpecToScopes(ValueSpecification[1],Boolean[1],PExpr[1],Trace[1])');
  $spec->match([
    spec: InstanceValue[1] | 
      $spec.values
        ->map(v | 
          $v->map(f: ValueSpecification[1] | $f->handleCaseValueSpecToScoped($requireType, $parent, $newTrace))
        ),
    spec: ExtendedRoutedValueSpecification[1] | $spec.value->handleCaseValueSpecToScopes($requireType, $parent, $newTrace),
    other: ValueSpecification[1] | $other->handleCaseValueSpecToScoped($requireType, $parent, $newTrace)
  ]);
}

function <<access.private>> meta::external::store::rel::compile::ir::handleCaseValueSpecToScoped(
  spec: ValueSpecification[1],
  requireType: Boolean[1],
  parent: PExpr[0..1],
  trace: Trace[1]
): Result<PExprScope|0..1>[1] {
  let newTrace = $trace->stage('handleCaseValueSpecToScoped(ValueSpecification[1],Boolean[1],PExpr[0..1],Trace[1])');
  $spec->match([
    {spec: InstanceValue[1] |
      $spec.values
        ->first()
        ->okOr(| errorTrace('Expected one value in `InstanceValue`.', $newTrace))
        ->tryCast(@FunctionRoutedValueSpecification, $newTrace)
        ->andThen(func: FunctionRoutedValueSpecification[1] |
          $func->handleCaseValueSpecToScoped($requireType, $parent, $newTrace)
        )
    },
    {spec: FunctionRoutedValueSpecification[1] |
      $spec.value
        ->tryCast(@InstanceValue, $newTrace)
        ->andThen(value: InstanceValue[1] |
          $value.values
            ->first()
            ->okOr(| errorTrace('Expected one value in `InstanceValue`.', $newTrace))
            ->tryCast(@FunctionDefinition<Any>, $newTrace)
            ->andThen(func: FunctionDefinition<Any>[1] |
              $func->handleCaseFunctionDefToScoped($requireType, $parent, $newTrace)
            )
        )
    },
    {spec: RoutedValueSpecification[1] |
      $spec.value
        ->tryCast(@FunctionRoutedValueSpecification, $newTrace)
        ->andThen(inner: FunctionRoutedValueSpecification[1] |
          $inner->handleCaseValueSpecToScoped($requireType, $parent, $newTrace)
        )
    }
  ]);
}

/**
  * Case handling actual creation of variable scopes, which can either be typed or untyped.
  */
function <<access.private>> meta::external::store::rel::compile::ir::handleCaseFunctionDefToScoped(
  func: FunctionDefinition<Any>[1],
  requireType: Boolean[1],
  parent: PExpr[0..1],
  trace: Trace[1]
): Result<PExprScope|0..1>[1] {
  let newTrace = $trace->stage('handleCaseFunctionDefToScoped(FunctionDefinition<Any>[1],Boolean[1],PExpr[0..1],Trace[1])');
  let functionParams = $func->functionType().parameters;

  $func.expressionSequence
    ->evaluateAndDeactivate()
    ->okOr(| errorTrace('Encountered empty function body while evaluating expression.', $newTrace))
    ->andThem(exprs: ValueSpecification[*] |
      if ($exprs->size() != 1,
        | error('More than one expression in function body not supported yet.', $newTrace),
        | $exprs->toOne()->ok()
      )
    )
    ->andThen(spec: ValueSpecification[1] |
      /*
       * If `spec` is a StoreMappingRoutedValueSpecification, then annotate the
       * variable scope introduced with the type given by the RelSetImplementation
       * of the value specification. Otherwise, introduce the variable scope
       * without type annotation.
       *
       * FIXME: In the typed case we only have one variable, whereas in the typed
       * case we can have more than one variable (e.g., in the case of joins).
       */
     
     $spec
        ->valueSpecToPExpr($newTrace)
        ->andThen(inner: PExpr[1] |
          $functionParams
            ->evaluateAndDeactivate()
            ->tryCastm(@VariableExpression, $newTrace)
            ->andThem(vars: VariableExpression[*] |
              if (!$requireType,
                {| $inner->scopeUntyped($vars.name, $parent)->ok()},
                {|
                  $spec->match([
                    { spec: StoreMappingRoutedValueSpecification[1] |
                        $spec
                          ->storeMappingRoutedValueSpecToRelSet($newTrace)
                          ->andThen(set: RelSetImplementation[0..1] |
                            if ($set->isEmpty() || $vars->size() != 1,
                              | error('Expected exactly one set.', $newTrace),
                              | $inner->scopeTyped($vars->toOne().name, exprType($set->toOne()), $parent)->ok()
                            );
                          )
                    },
                    {
                      spec: VariableExpression[1] |
                        let primitiveType = $spec.genericType.rawType;
                        if ($primitiveType->isEmpty(),
                          | error('No type given.', $newTrace),
                          | $inner->scopeTyped($vars->toOne().name, exprType($primitiveType->toOne()), $parent)->ok()
                        );
                    }
                  ])
                }
              )
            )
        )
    );
}

//////////////////////////////////////////////////
// Handling creation of untyped variable scopes //
//////////////////////////////////////////////////

function meta::external::store::rel::compile::ir::valueSpecToUntypedScopes(
  spec: ValueSpecification[1],
  parent: PExpr[0..1],
  trace: Trace[1]
): Result<PExprScope|0..1>[*] {
  let newTrace = $trace->stage('valueSpecToUntypedScopes(ValueSpecification[1],Trace[1])');
  handleCaseValueSpecToScopes($spec, false, $parent, $trace);
}

function meta::external::store::rel::compile::ir::valueSpecToUntypedScoped(
  spec: ValueSpecification[1],
  trace: Trace[1]
): Result<PExprScope|0..1>[1] {
  let newTrace = $trace->stage('valueSpecToUntypedScoped(ValueSpecification[1],Trace[1])');
  handleCaseValueSpecToScoped($spec, false, [], $trace);
}

function meta::external::store::rel::compile::ir::valueSpecToUntypedScoped(
  spec: ValueSpecification[1],
  parent: PExpr[0..1],
  trace: Trace[1]
): Result<PExprScope|0..1>[1] {
  let newTrace = $trace->stage('valueSpecToUntypedScoped(ValueSpecification[1],Trace[1])');
  handleCaseValueSpecToScoped($spec, false, $parent, $trace);
}

function meta::external::store::rel::compile::ir::functionDefToUntypedScoped(
  func: FunctionDefinition<Any>[1],
  parent: PExpr[0..1],
  trace: Trace[1]
): Result<PExprScope|0..1>[1] {
  let newTrace = $trace->stage('functionDefToUntypedScoped(ValueSpecification[1],Trace[1])');
  handleCaseFunctionDefToScoped($func, false, $parent, $trace);
}

////////////////////////////////////////////////
// Handling creation of typed variable scopes //
////////////////////////////////////////////////

function meta::external::store::rel::compile::ir::valueSpecToTypedScopes(
  spec: ValueSpecification[1],
  trace: Trace[1]
): Result<PExprScopeTyped|0..1>[*] {
  let newTrace = $trace->stage('valueSpecToTypedScopes(ValueSpecification[1],Trace[1])');
  $spec->valueSpecToTypedScopes([], $newTrace);
}

function meta::external::store::rel::compile::ir::valueSpecToTypedScopes(
  spec: ValueSpecification[1],
  parent: PExpr[0..1],
  trace: Trace[1]
): Result<PExprScopeTyped|0..1>[*] {
  /*
   * To try to avoid repetition, instead of unpacking the value specification in a
   * similar way in order to obtain a typed variable, we instead attempt to cast at
   * the end. We prefer to construct typed variables where possible, and this cast
   * will succeed if a typed variable has been constructed.
   */
  let newTrace = $trace->stage('valueSpecToTypedScopes(ValueSpecification[1],PExpr[1],Trace[1])');
  handleCaseValueSpecToScopes($spec, true, $parent, $newTrace)
    ->map(result: Result<PExprScope|0..1>[1] |
      $result->tryCast(@PExprScopeTyped, $newTrace);
    );
}
