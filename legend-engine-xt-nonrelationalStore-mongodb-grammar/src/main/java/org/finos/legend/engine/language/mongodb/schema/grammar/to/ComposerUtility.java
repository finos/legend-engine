// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package org.finos.legend.engine.language.mongodb.schema.grammar.to;

import org.apache.commons.text.StringEscapeUtils;

public class ComposerUtility
{
    public static final String TAB = "  ";

    public static int getTabSize()
    {
        return TAB.length();
    }

    public static int getTabSize(int repeat)
    {
        return repeat * getTabSize();
    }

    public static String getTabString()
    {
        return TAB;
    }

    public static String getTabString(int repeat)
    {
        return (repeat == 1) ? getTabString() : appendTabString(new StringBuilder(getTabSize(repeat)), repeat).toString();
    }

    public static StringBuilder appendTabString(StringBuilder builder)
    {
        return builder.append(getTabString());
    }

    /**
     * NOTE: This is a more efficient way than just chaining append() as it lessens the potential number of resize to the internal
     * array maintained by StringBuilder
     */
    public static StringBuilder appendTabString(StringBuilder builder, int repeat)
    {
        if (repeat == 1)
        {
            return appendTabString(builder);
        }
        builder.ensureCapacity(builder.length() + getTabSize(repeat));
        for (int i = 0; i < repeat; i++)
        {
            appendTabString(builder);
        }
        return builder;
    }

    /**
     * Convert string in the graph to string in the transformed grammar
     *
     * @param val    the string to be converted
     * @param escape whether to escape the string or not, usually we should escape the string as stuffs like `\r\n`
     *               if not escaped would become actual new line character in the string generated by the transformer
     *               but we also have to be mindful that there are strings which contain escaped quotes, such as JSON
     *               string. For these, if we escape them, we will accidentally add extra escape character to already
     *               escaped characters. Also remember that the transformer is symmetrical to the parser, if in the
     *               parser we do not unescape, we should not escape in the transformer as well.
     */
    public static String convertString(String val, boolean escape)
    {
        return convertString(val, escape, false);
    }

    public static String convertToStringWithQuotes(String val)
    {
        StringBuilder builder = new StringBuilder();
        appendStringWithQuotes(val, builder);
        return builder.toString();
    }

    public static void appendStringWithQuotes(String val, StringBuilder builder)
    {
        builder.append("\"");
        builder.append(val);
        builder.append("\"");
    }

    public static String convertString(String val, boolean escape, boolean doubleQuotes)
    {
        StringBuilder builder = new StringBuilder();
        if (doubleQuotes)
        {
            builder.append("\"");

            if (escape)
            {
                // since Pure grammar is syntactically close to Java, we use `escapeJava`
                // so that `\r\n` in strings are properly escaped, but this method also escape quotes and because
                // Pure uses single quotes for string, we have to do some further processing
                val = StringEscapeUtils.escapeJava(val);
                // since Pure grammar uses single quotes to surround string, we need to handle quotes in a special way
                //val = val.replace("'", "\\'");
            }
            builder.append(val);

            builder.append("\"");
        }
        else
        {
            builder.append("'");

            if (escape)
            {
                // since Pure grammar is syntactically close to Java, we use `escapeJava`
                // so that `\r\n` in strings are properly escaped, but this method also escape quotes and because
                // Pure uses single quotes for string, we have to do some further processing
                val = StringEscapeUtils.escapeJava(val);
                // since Pure grammar uses single quotes to surround string, we need to handle quotes in a special way
                //val = val.replace("'", "\\'");
                //val = val.replace("\\\"", "\"");
            }
            builder.append(val);

            builder.append("'");
        }

        return builder.toString();
    }


    public static void appendJsonKey(String val, StringBuilder builder)
    {
        appendStringWithQuotes(val, builder);
        builder.append(": ");
    }

    public static void appendJsonArrayKey(String val, StringBuilder builder)
    {
        appendJsonKey(val, builder);
        //builder.append("[\n");
    }

    public static void appendJsonObjectKey(String val, StringBuilder builder)
    {
        appendJsonKey(val, builder);
        //builder.append("{\n");
    }

    public static StringBuilder removeLastChar(StringBuilder builder)
    {
        if (builder.length() > 0)
        {
            builder.setLength(builder.length() - 1);
        }
        return builder;
    }
}
