// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::protocols::generation::java::tests::jsonParams::model::*;
import meta::protocols::generation::java::*;

Class meta::protocols::generation::java::tests::jsonParams::model::TopClass
{

}

Class meta::protocols::generation::java::tests::jsonParams::model::SubClassA extends TopClass
{
  {JSON.name='my-property'} myProperty : String[1];
}

Class {JSON.name='subB'} meta::protocols::generation::java::tests::jsonParams::model::SubClassB extends TopClass
{
}

Enum meta::protocols::generation::java::tests::jsonParams::model::ZEnum
{
  {JSON.name='my-a'} myA,
  myB
}

function <<test.Test>> meta::protocols::generation::java::tests::jsonParams::testJsonParams():Boolean[1]
{
  let config = ^meta::protocols::generation::java::translation::Configuration(
    purePackage = 'meta::protocols::generation::java::tests::jsonParams::model',
    javaPackage  = 'org.finos'
  )->meta::json::toJSON();

  let sources = meta::protocols::generation::java::generateProtocolProject($config, [])
        ->map(p | $p->meta::external::language::java::metamodel::project::allClasses()
        ->sortBy(c | $c.simpleName)
        ->map(cl | meta::external::language::java::serialization::newStringifier($p)->meta::external::language::java::serialization::ofClass($cl->meta::external::language::java::factory::inferImports())));

  assertEquals(5, $sources->size());

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import com.fasterxml.jackson.annotation.JsonProperty;\n'+
                '\n'+
                'public class SubClassA extends TopClass\n'+
                '{\n'+
                '    @JsonProperty("my-property")\n'+
                '    public String myProperty;\n'+
                '\n'+
                '    public SubClassA _myProperty(String myProperty)\n'+
                '    {\n'+
                '        this.myProperty = myProperty;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+                
                '    public <T> T accept(TopClassVisitor<T> visitor)\n'+
                '    {\n'+
                '        return visitor.visit(this);\n'+
                '    }\n'+
                '}', $sources->at(0));


  assertEquals( 'package org.finos;\n'+
                '\n'+
                'public class SubClassB extends TopClass\n'+
                '{\n'+
                '    public <T> T accept(TopClassVisitor<T> visitor)\n'+
                '    {\n'+
                '        return visitor.visit(this);\n'+
                '    }\n'+
                '}', $sources->at(1));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import com.fasterxml.jackson.annotation.JsonSubTypes;\n'+
                'import com.fasterxml.jackson.annotation.JsonTypeInfo;\n'+
                '\n'+
                '@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, property="_type")\n'+
                '@JsonSubTypes({@JsonSubTypes.Type(value=org.finos.SubClassA.class, name="subClassA"), @JsonSubTypes.Type(value=org.finos.SubClassB.class, name="subB")})\n'+
                'public abstract class TopClass\n'+
                '{\n'+
                '    public abstract <T> T accept(TopClassVisitor<T> visitor);\n'+
                '}', $sources->at(2));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'public interface TopClassVisitor<T>\n'+
                '{\n'+
                '    T visit(SubClassA val);\n'+
                '    T visit(SubClassB val);\n'+
                '}' , $sources->at(3));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import com.fasterxml.jackson.annotation.JsonProperty;\n'+
                '\n'+
                'public enum ZEnum\n'+
                '{\n'+
                '    @JsonProperty("my-a")\n'+
                '    myA,\n'+
                '\n'+
                '    myB;\n'+
                '\n'+
                '    public String getName()\n'+
                '    {\n'+
                '        return this.name();\n'+
                '    }\n'+
                '\n'+
                '    public static ZEnum getEnumFromPureName(String pureName)\n'+
                '    {\n'+
                '        return ZEnum.valueOf(pureName);\n'+
                '    }\n'+                
                '}', $sources->at(4));
}

function <<test.Test>> meta::protocols::generation::java::tests::jsonParams::testJsonParamsDisable():Boolean[1]
{
  let config = ^meta::protocols::generation::java::translation::Configuration(
    purePackage = 'meta::protocols::generation::java::tests::jsonParams::model',
    javaPackage  = 'org.finos',
    json = ^meta::protocols::generation::java::translation::JSONConfiguration(generateJSONAnnotations=false)
  )->meta::json::toJSON();

  let sources = meta::protocols::generation::java::generateProtocolProject($config, [])
        ->map(p | $p->meta::external::language::java::metamodel::project::allClasses()
        ->sortBy(c | $c.simpleName)
        ->map(cl | meta::external::language::java::serialization::newStringifier($p)->meta::external::language::java::serialization::ofClass($cl->meta::external::language::java::factory::inferImports())));

  assertEquals(5, $sources->size());

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'public class SubClassA extends TopClass\n'+
                '{\n'+
                '    public String myProperty;\n'+
                '\n'+
                '    public SubClassA _myProperty(String myProperty)\n'+
                '    {\n'+
                '        this.myProperty = myProperty;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+
                '    public <T> T accept(TopClassVisitor<T> visitor)\n'+
                '    {\n'+
                '        return visitor.visit(this);\n'+
                '    }\n'+
                '}', $sources->at(0));


  assertEquals( 'package org.finos;\n'+
                '\n'+
                'public class SubClassB extends TopClass\n'+
                '{\n'+
                '    public <T> T accept(TopClassVisitor<T> visitor)\n'+
                '    {\n'+
                '        return visitor.visit(this);\n'+
                '    }\n'+
                '}', $sources->at(1));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'public abstract class TopClass\n'+
                '{\n'+
                '    public abstract <T> T accept(TopClassVisitor<T> visitor);\n'+
                '}', $sources->at(2));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'public interface TopClassVisitor<T>\n'+
                '{\n'+
                '    T visit(SubClassA val);\n'+
                '    T visit(SubClassB val);\n'+
                '}' , $sources->at(3));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'public enum ZEnum\n'+
                '{\n'+
                '    myA,\n'+
                '    myB;\n'+
                '\n'+
                '    public String getName()\n'+
                '    {\n'+
                '        return this.name();\n'+
                '    }\n'+
                '\n'+
                '    public static ZEnum getEnumFromPureName(String pureName)\n'+
                '    {\n'+
                '        return ZEnum.valueOf(pureName);\n'+
                '    }\n'+
                '}', $sources->at(4));
}

function <<test.Test>> meta::protocols::generation::java::tests::jsonParams::testJsonParamsTypeKeyWord():Boolean[1]
{
  let config = ^meta::protocols::generation::java::translation::Configuration(
    purePackage = 'meta::protocols::generation::java::tests::jsonParams::model',
    javaPackage  = 'org.finos',
    json = ^meta::protocols::generation::java::translation::JSONConfiguration(typeKeyword='@Type')
  )->meta::json::toJSON();

  let sources = meta::protocols::generation::java::generateProtocolProject($config, [])
        ->map(p | $p->meta::external::language::java::metamodel::project::allClasses()
        ->sortBy(c | $c.simpleName)
        ->map(cl | meta::external::language::java::serialization::newStringifier($p)->meta::external::language::java::serialization::ofClass($cl->meta::external::language::java::factory::inferImports())));

  assertEquals(5, $sources->size());

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import com.fasterxml.jackson.annotation.JsonProperty;\n'+
                '\n'+
                'public class SubClassA extends TopClass\n'+
                '{\n'+
                '    @JsonProperty("my-property")\n'+
                '    public String myProperty;\n'+
                '\n'+
                '    public SubClassA _myProperty(String myProperty)\n'+
                '    {\n'+
                '        this.myProperty = myProperty;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+                
                '    public <T> T accept(TopClassVisitor<T> visitor)\n'+
                '    {\n'+
                '        return visitor.visit(this);\n'+
                '    }\n'+
                '}', $sources->at(0));


  assertEquals( 'package org.finos;\n'+
                '\n'+
                'public class SubClassB extends TopClass\n'+
                '{\n'+
                '    public <T> T accept(TopClassVisitor<T> visitor)\n'+
                '    {\n'+
                '        return visitor.visit(this);\n'+
                '    }\n'+
                '}', $sources->at(1));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import com.fasterxml.jackson.annotation.JsonSubTypes;\n'+
                'import com.fasterxml.jackson.annotation.JsonTypeInfo;\n'+
                '\n'+
                '@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, property="@Type")\n'+
                '@JsonSubTypes({@JsonSubTypes.Type(value=org.finos.SubClassA.class, name="subClassA"), @JsonSubTypes.Type(value=org.finos.SubClassB.class, name="subB")})\n'+
                'public abstract class TopClass\n'+
                '{\n'+
                '    public abstract <T> T accept(TopClassVisitor<T> visitor);\n'+
                '}', $sources->at(2));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'public interface TopClassVisitor<T>\n'+
                '{\n'+
                '    T visit(SubClassA val);\n'+
                '    T visit(SubClassB val);\n'+
                '}' , $sources->at(3));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import com.fasterxml.jackson.annotation.JsonProperty;\n'+
                '\n'+
                'public enum ZEnum\n'+
                '{\n'+
                '    @JsonProperty("my-a")\n'+
                '    myA,\n'+
                '\n'+
                '    myB;\n'+
                '\n'+
                '    public String getName()\n'+
                '    {\n'+
                '        return this.name();\n'+
                '    }\n'+
                '\n'+
                '    public static ZEnum getEnumFromPureName(String pureName)\n'+
                '    {\n'+
                '        return ZEnum.valueOf(pureName);\n'+
                '    }\n'+
                '}', $sources->at(4));
}

function <<test.Test>> meta::protocols::generation::java::tests::jsonParams::testJsonSubTypeOnTopType():Boolean[1]
{
  let config = ^meta::protocols::generation::java::translation::Configuration(
    purePackage = 'meta::protocols::generation::java::tests::jsonParams::model',
    javaPackage  = 'org.finos',
    json = ^meta::protocols::generation::java::translation::JSONConfiguration(subTypeOnTopType=false)
  )->meta::json::toJSON();

  let sources = meta::protocols::generation::java::generateProtocolProject($config, [])
        ->map(p | $p->meta::external::language::java::metamodel::project::allClasses()
        ->sortBy(c | $c.simpleName)
        ->map(cl | meta::external::language::java::serialization::newStringifier($p)->meta::external::language::java::serialization::ofClass($cl->meta::external::language::java::factory::inferImports())));

  assertEquals(6, $sources->size());

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import com.fasterxml.jackson.annotation.JsonProperty;\n'+
                'import com.fasterxml.jackson.annotation.JsonSubTypes;\n'+
                '\n'+
                '@JsonSubTypes({@JsonSubTypes.Type(value=org.finos.SubClassA.class, name="subClassA")})\n'+
                'public class SubClassA extends TopClass\n'+
                '{\n'+
                '    @JsonProperty("my-property")\n'+
                '    public String myProperty;\n'+
                '\n'+
                '    public SubClassA _myProperty(String myProperty)\n'+
                '    {\n'+
                '        this.myProperty = myProperty;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+                
                '    public <T> T accept(TopClassVisitor<T> visitor)\n'+
                '    {\n'+
                '        return visitor.visit(this);\n'+
                '    }\n'+
                '}', $sources->at(0));


  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import com.fasterxml.jackson.annotation.JsonSubTypes;\n'+
                '\n'+
                '@JsonSubTypes({@JsonSubTypes.Type(value=org.finos.SubClassB.class, name="subB")})\n'+
                'public class SubClassB extends TopClass\n'+
                '{\n'+
                '    public <T> T accept(TopClassVisitor<T> visitor)\n'+
                '    {\n'+
                '        return visitor.visit(this);\n'+
                '    }\n'+
                '}', $sources->at(1));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import com.fasterxml.jackson.annotation.JsonTypeInfo;\n'+
                '\n'+
                '@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, property="_type")\n'+
                'public abstract class TopClass\n'+
                '{\n'+
                '    public abstract <T> T accept(TopClassVisitor<T> visitor);\n'+
                '}', $sources->at(2));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'public interface TopClassVisitor<T>\n'+
                '{\n'+
                '    T visit(SubClassA val);\n'+
                '    T visit(SubClassB val);\n'+
                '}' , $sources->at(3));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import com.fasterxml.jackson.annotation.JsonProperty;\n'+
                '\n'+
                'public enum ZEnum\n'+
                '{\n'+
                '    @JsonProperty("my-a")\n'+
                '    myA,\n'+
                '\n'+
                '    myB;\n'+
                '\n'+
                '    public String getName()\n'+
                '    {\n'+
                '        return this.name();\n'+
                '    }\n'+
                '\n'+
                '    public static ZEnum getEnumFromPureName(String pureName)\n'+
                '    {\n'+
                '        return ZEnum.valueOf(pureName);\n'+
                '    }\n'+                
                '}', $sources->at(4));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import com.fasterxml.jackson.databind.ObjectMapper;\n'+
                '\n'+
                'public class __SubTypeRegitration\n'+
                '{\n'+
                '    public static void registerSubTypes(ObjectMapper mapper)\n'+
                '    {\n'+
                '        mapper.registerSubtypes(SubClassA.class, SubClassB.class);\n'+
                '    }\n'+
                '}', $sources->at(5));
}