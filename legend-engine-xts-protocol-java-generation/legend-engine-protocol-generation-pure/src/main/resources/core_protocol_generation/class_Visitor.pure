// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::external::language::java::transform::*;
import meta::external::language::java::factory::*;
import meta::external::language::java::metamodel::*;
import meta::protocols::generation::java::translation::*;
import meta::protocols::generation::java::*;

function meta::protocols::generation::java::buildVisitorClass(taxonomy : Taxonomy[1], typeVariable:TypeVariable[1], conventions:Conventions[1]):meta::external::language::java::metamodel::Class[1]
{
  javaClass(['public', 'interface'], $typeVariable, $conventions.typeAndPackageNameStrategy->toOne()->eval($taxonomy.topClass, $conventions).first->javaPackage(), $taxonomy.topClass.name->toOne()+'Visitor')
}

function meta::protocols::generation::java::generateVisitor(taxonomy : Taxonomy[1], rootPack:meta::external::language::java::metamodel::Package[1], conventions:Conventions[1]):meta::external::language::java::metamodel::Class[1]
{
  let typeParam = javaTypeVar('T');
  buildVisitorClass($taxonomy, $typeParam, $conventions)
      ->addMethods($taxonomy.children
                                  ->sortBy(a|$a.name->toOne())
                                  ->distinct()
                                  ->map(c| javaMethod($typeParam, 'visit', j_parameter(pureTypeToJavaType($conventions, $c, PureOne), 'val')))
  );
}

function meta::protocols::generation::java::buildAccept(base:meta::external::language::java::metamodel::Class[1], c:meta::pure::metamodel::type::Class<Any>[1], taxonomy:Taxonomy[1], context:Context[1]):Method[1]
{
  let abstract = $base.modifiers->contains(Modifier.Abstract);
  let typeParam = javaTypeVar('T');
  let boundType = javaParameterizedType($context.visitorByTaxonomy->toOne()->get($taxonomy->toOne())->toOne(), $typeParam);
  let visitor   = j_parameter($boundType, 'visitor');
  if ($abstract,
    | javaMethod(['public', 'abstract'], $typeParam, $typeParam, 'accept', $visitor),
    | javaMethod(['public'], $typeParam, $typeParam, 'accept', $visitor, j_return(j_invoke($visitor, 'visit', [j_this($base)], $typeParam)))
    );
}