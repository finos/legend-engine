// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::external::language::java::factory::*;
import meta::external::language::java::transform::*;
import meta::protocols::generation::java::*;

Profile meta::protocols::generation::java::JSON
{
  tags : [name];
}

Class meta::protocols::generation::java::translation::JSONConfiguration
{
  generateJSONAnnotations : Boolean[1] = true;
  typeKeyword : String[1] = '_type';
  subTypeOnTopType : Boolean[1] = true;
}

function <<access.private>> meta::protocols::generation::java::generateClassSubtypeAnnotation(context : Context[1]):meta::external::language::java::metamodel::Class[0..1]
{
  if (!$context.configuration.json.subTypeOnTopType && $context.taxonomies->isNotEmpty(),
    | let typeAndPackages = $context.conventions.typeAndPackageNameStrategy->toOne()->eval($context.taxonomies->at(0).topClass, $context.conventions);
      let parameter = j_parameter(javaClass('com.fasterxml.jackson.databind.ObjectMapper'), 'mapper');
      javaClass(['public'], [], $typeAndPackages.first->javaPackage(), '__SubTypeRegitration')
      ->addMethod(javaMethod(['public', 'static'], javaVoid(), 'registerSubTypes', [$parameter],
                    [
                      j_invoke($parameter, 'registerSubtypes', $context.taxonomies.children->map(c|j_field(pureTypeToJavaType($context.conventions, $c, PureOne),'class',javaClass('java.lang.Class'))), javaVoid())
                    ])
      );,
    |[]
  )
}

function <<access.private>> meta::protocols::generation::java::generateClassSubtypeAnnotation(c:meta::pure::metamodel::type::Class<Any>[1], conventions:Conventions[1]):meta::external::language::java::metamodel::annotations::json::JsonSubType[1]
{
  let javaType = pureTypeToJavaType($conventions, $c, PureOne);
  let jsonName = $c->value4Tag('name', JSON);
  ^meta::external::language::java::metamodel::annotations::json::JsonSubType(
      value=$javaType->cast(@meta::external::language::java::metamodel::Class)->meta::external::language::java::serialization::qualifiedClassName(),
      name=if($jsonName->isEmpty(),|$c.name->meta::pure::functions::string::toLowerFirstCharacter()->toOne(),|$jsonName.value->toOne())
  );
}