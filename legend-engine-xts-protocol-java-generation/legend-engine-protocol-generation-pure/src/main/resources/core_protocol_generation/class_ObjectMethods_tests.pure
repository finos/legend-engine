// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::protocols::generation::java::tests::objectMethodsImpl::model::*;

Class meta::protocols::generation::java::tests::objectMethodsImpl::model::ClassWithNotProperties
{

}

Class meta::protocols::generation::java::tests::objectMethodsImpl::model::ClassWithPrimitiveProperties
{
    value : Integer[1];
    otherValue : Integer[0..1];
    myBoolean : Boolean[1];
}

Class meta::protocols::generation::java::tests::objectMethodsImpl::model::ClassWithCollectionPrimitiveProperties
{
    myBoolean : Boolean[*];
}

Class meta::protocols::generation::java::tests::objectMethodsImpl::model::ClassWithClassProperties
{
    maybeOther: OtherClass[0..1];
    other : OtherClass[1];
    others: OtherClass[*];
}

Class meta::protocols::generation::java::tests::objectMethodsImpl::model::OtherClass
{
    value : Integer[1];
}

Class meta::protocols::generation::java::tests::objectMethodsImpl::model::SuperType
{
  prop : Integer[1];
}

Class meta::protocols::generation::java::tests::objectMethodsImpl::model::SubType extends meta::protocols::generation::java::tests::objectMethodsImpl::model::SuperType
{
  other : String[1];
}


function <<test.Test>> meta::protocols::generation::java::tests::objectMethodsImpl::testObjectMethodsImpl():Boolean[1]
{
  let config = ^meta::protocols::generation::java::translation::Configuration(
    purePackage = 'meta::protocols::generation::java::tests::objectMethodsImpl::model',
    javaPackage  = 'org.finos',
    makeAllSuperTypesAbstract = true,
    generateEqualsHashCodeAndToString = true
  )->meta::json::toJSON();

  let sources = meta::protocols::generation::java::generateProtocolProject($config, [])
        ->map(p | $p->meta::external::language::java::metamodel::project::allClasses()
        ->sortBy(c | $c.simpleName)
        ->map(cl | meta::external::language::java::serialization::newStringifier($p)->meta::external::language::java::serialization::ofClass($cl->meta::external::language::java::factory::inferImports())));

  assertEquals(8, $sources->size());

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import java.util.Collections;\n'+
                'import java.util.List;\n'+
                'import java.util.Objects;\n'+
                '\n'+
                'public class ClassWithClassProperties\n'+
                '{\n'+
                '    public OtherClass maybeOther;\n'+
                '    public OtherClass other;\n'+
                '    public List<OtherClass> others = Collections.<OtherClass>emptyList();\n'+
                '\n'+
                '    public ClassWithClassProperties _maybeOther(OtherClass maybeOther)\n'+
                '    {\n'+
                '        this.maybeOther = maybeOther;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+
                '    public ClassWithClassProperties _other(OtherClass other)\n'+
                '    {\n'+
                '        this.other = other;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+
                '    public ClassWithClassProperties _others(List<OtherClass> others)\n'+
                '    {\n'+
                '        this.others = others;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+
                '    public boolean equals(Object obj)\n'+
                '    {\n'+
                '        if (this == obj)\n'+
                '        {\n'+
                '            return true;\n'+
                '        }\n'+
                '        if (obj == null || this.getClass() != obj.getClass())\n'+
                '        {\n'+
                '            return false;\n'+
                '        }\n'+
                '        ClassWithClassProperties that = (ClassWithClassProperties) obj;\n'+
                '        return Objects.equals(this.others, that.others) && Objects\n'+
                '                      .equals(this.other, that.other) && Objects\n'+
                '                      .equals(this.maybeOther, that.maybeOther);\n'+
                '    }\n'+
                '\n'+
                '    public String toString()\n'+
                '    {\n'+
                '        StringBuilder stringBuilder = new StringBuilder();\n'+
                '        stringBuilder.append(String.format("maybeOther: %s,", this.maybeOther));\n'+
                '        stringBuilder.append(String.format("other: %s,", this.other));\n'+
                '        stringBuilder.append(String.format("others: %s,", this.others));\n'+
                '        return String.format("%s:[%s]",\n'+
                '                             this.getClass().getSimpleName(),\n'+
                '                             stringBuilder.toString());\n'+
                '    }\n'+
                '\n'+
                '    public int hashCode()\n'+
                '    {\n'+
                '        return Objects.hash(this.maybeOther, this.other, this.others);\n'+
                '    }\n'+
                '}' , $sources->at(0));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import java.util.Collections;\n'+
                'import java.util.List;\n'+
                'import java.util.Objects;\n'+
                '\n'+
                'public class ClassWithCollectionPrimitiveProperties\n'+
                '{\n'+
                '    public List<Boolean> myBoolean = Collections.<Boolean>emptyList();\n'+
                '\n'+
                '    public ClassWithCollectionPrimitiveProperties _myBoolean(List<Boolean> myBoolean)\n'+
                '    {\n'+
                '        this.myBoolean = myBoolean;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+
                '    public boolean equals(Object obj)\n'+
                '    {\n'+
                '        if (this == obj)\n'+
                '        {\n'+
                '            return true;\n'+
                '        }\n'+
                '        if (obj == null || this.getClass() != obj.getClass())\n'+
                '        {\n'+
                '            return false;\n'+
                '        }\n'+
                '        ClassWithCollectionPrimitiveProperties that = (ClassWithCollectionPrimitiveProperties) obj;\n'+
                '        return Objects.equals(this.myBoolean, that.myBoolean);\n'+
                '    }\n'+
                '\n'+
                '    public String toString()\n'+
                '    {\n'+
                '        StringBuilder stringBuilder = new StringBuilder();\n'+
                '        stringBuilder.append(String.format("myBoolean: %s,", this.myBoolean));\n'+
                '        return String.format("%s:[%s]",\n'+
                '                             this.getClass().getSimpleName(),\n'+
                '                             stringBuilder.toString());\n'+
                '    }\n'+
                '\n'+
                '    public int hashCode()\n'+
                '    {\n'+
                '        return Objects.hash(this.myBoolean);\n'+
                '    }\n'+
                '}', $sources->at(1));

  assertEquals( 'package org.finos;\n\n'+
                'public class ClassWithNotProperties\n'+
                '{\n'+
                '    public boolean equals(Object obj)\n'+
                '    {\n'+
                '        if (this == obj)\n'+
                '        {\n'+
                '            return true;\n'+
                '        }\n'+
                '        return obj != null && this.getClass() == obj.getClass();\n'+
                '    }\n'+
                '\n'+
                '    public String toString()\n'+
                '    {\n'+
                '        return String.format("%s", this.getClass().getSimpleName());\n'+
                '    }\n'+
                '\n'+
                '    public int hashCode()\n'+
                '    {\n'+
                '        return ClassWithNotProperties.class.hashCode();\n'+
                '    }\n'+
                '}', $sources->at(2));

  assertEquals( 'package org.finos;\n\n'+
                'import java.util.Objects;\n\n'+
                'public class ClassWithPrimitiveProperties\n'+
                '{\n'+
                '    public Long value;\n'+
                '    public Long otherValue;\n'+
                '    public Boolean myBoolean;\n'+
                '\n'+
                '    public ClassWithPrimitiveProperties _value(Long value)\n'+
                '    {\n'+
                '        this.value = value;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+
                '    public ClassWithPrimitiveProperties _otherValue(Long otherValue)\n'+
                '    {\n'+
                '        this.otherValue = otherValue;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+
                '    public ClassWithPrimitiveProperties _myBoolean(Boolean myBoolean)\n'+
                '    {\n'+
                '        this.myBoolean = myBoolean;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+
                '    public boolean equals(Object obj)\n'+
                '    {\n'+
                '        if (this == obj)\n'+
                '        {\n'+
                '            return true;\n'+
                '        }\n'+
                '        if (obj == null || this.getClass() != obj.getClass())\n'+
                '        {\n'+
                '            return false;\n'+
                '        }\n'+
                '        ClassWithPrimitiveProperties that = (ClassWithPrimitiveProperties) obj;\n'+
                '        return Objects.equals(this.myBoolean, that.myBoolean) && Objects\n'+
                '                      .equals(this.otherValue, that.otherValue) && Objects\n'+
                '                      .equals(this.value, that.value);\n'+
                '    }\n'+
                '\n'+
                '    public String toString()\n'+
                '    {\n'+
                '        StringBuilder stringBuilder = new StringBuilder();\n'+
                '        stringBuilder.append(String.format("value: %s,", this.value));\n'+
                '        stringBuilder.append(String.format("otherValue: %s,", this.otherValue));\n'+
                '        stringBuilder.append(String.format("myBoolean: %s,", this.myBoolean));\n'+
                '        return String.format("%s:[%s]",\n'+
                '                             this.getClass().getSimpleName(),\n'+
                '                             stringBuilder.toString());\n'+
                '    }\n'+
                '\n'+
                '    public int hashCode()\n'+
                '    {\n'+
                '        return Objects.hash(this.value, this.otherValue, this.myBoolean);\n'+
                '    }\n'+
                '}', $sources->at(3));

  assertEquals(
                'package org.finos;\n'+
                '\n'+
                'import java.util.Objects;\n'+
                '\n'+
                'public class OtherClass\n'+
                '{\n'+
                '    public Long value;\n'+
                '\n'+
                '    public OtherClass _value(Long value)\n'+
                '    {\n'+
                '        this.value = value;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+
                '    public boolean equals(Object obj)\n'+
                '    {\n'+
                '        if (this == obj)\n'+
                '        {\n'+
                '            return true;\n'+
                '        }\n'+
                '        if (obj == null || this.getClass() != obj.getClass())\n'+
                '        {\n'+
                '            return false;\n'+
                '        }\n'+
                '        OtherClass that = (OtherClass) obj;\n'+
                '        return Objects.equals(this.value, that.value);\n'+
                '    }\n'+
                '\n'+
                '    public String toString()\n'+
                '    {\n'+
                '        StringBuilder stringBuilder = new StringBuilder();\n'+
                '        stringBuilder.append(String.format("value: %s,", this.value));\n'+
                '        return String.format("%s:[%s]",\n'+
                '                             this.getClass().getSimpleName(),\n'+
                '                             stringBuilder.toString());\n'+
                '    }\n'+
                '\n'+
                '    public int hashCode()\n'+
                '    {\n'+
                '        return Objects.hash(this.value);\n'+
                '    }\n'+
                '}', $sources->at(4));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import java.util.Objects;\n'+
                '\n'+
                'public class SubType extends SuperType\n'+
                '{\n'+
                '    public String other;\n'+
                '\n'+
                '    public SubType _other(String other)\n'+
                '    {\n'+
                '        this.other = other;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+
                '    public <T> T accept(SuperTypeVisitor<T> visitor)\n'+
                '    {\n'+
                '        return visitor.visit(this);\n'+
                '    }\n'+
                '\n'+
                '    public boolean equals(Object obj)\n'+
                '    {\n'+
                '        if (this == obj)\n'+
                '        {\n'+
                '            return true;\n'+
                '        }\n'+
                '        if (obj == null || this.getClass() != obj.getClass())\n'+
                '        {\n'+
                '            return false;\n'+
                '        }\n'+
                '        SubType that = (SubType) obj;\n'+
                '        return Objects.equals(this.prop, that.prop) && Objects.equals(this.other, that.other);\n'+
                '    }\n'+
                '\n'+
                '    public String toString()\n'+
                '    {\n'+
                '        StringBuilder stringBuilder = new StringBuilder();\n'+
                '        stringBuilder.append(String.format("other: %s,", this.other));\n'+
                '        stringBuilder.append(String.format("prop: %s,", this.prop));\n'+
                '        return String.format("%s:[%s]",\n'+
                '                             this.getClass().getSimpleName(),\n'+
                '                             stringBuilder.toString());\n'+
                '    }\n'+
                '\n'+
                '    public int hashCode()\n'+
                '    {\n'+
                '        return Objects.hash(this.other, this.prop);\n'+
                '    }\n'+
                '}', $sources->at(5));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'import com.fasterxml.jackson.annotation.JsonSubTypes;\n'+
                'import com.fasterxml.jackson.annotation.JsonTypeInfo;\n'+
                '\n'+
                '@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, property="_type")\n'+
                '@JsonSubTypes({@JsonSubTypes.Type(value=org.finos.SubType.class, name="subType")})\n'+
                'public abstract class SuperType\n'+
                '{\n'+
                '    public Long prop;\n'+
                '\n'+
                '    public SuperType _prop(Long prop)\n'+
                '    {\n'+
                '        this.prop = prop;\n'+
                '        return this;\n'+
                '    }\n'+
                '\n'+
                '    public abstract <T> T accept(SuperTypeVisitor<T> visitor);\n'+
                '}', $sources->at(6));

  assertEquals( 'package org.finos;\n'+
                '\n'+
                'public interface SuperTypeVisitor<T>\n'+
                '{\n'+
                '    T visit(SubType val);\n'+
                '}', $sources->at(7));
}
