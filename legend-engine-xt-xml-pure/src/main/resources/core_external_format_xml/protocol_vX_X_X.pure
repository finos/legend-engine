// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::protocols::pure::vX_X_X::metamodel::executionPlan::*;
import meta::protocols::pure::vX_X_X::metamodel::executionPlan::external::format::xml::*;
import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::external::format::xml::*;
import meta::pure::mapping::*;
import meta::pure::router::extension::*;

function meta::protocols::pure::vX_X_X::external::format::xml::serializerExtension(type:String[1]): meta::pure::router::extension::SerializerExtension[1]
{
   ^meta::protocols::pure::vX_X_X::extension::SerializerExtension_vX_X_X(
      transfers_executionPlan_transformNode = 
         {mapping:Mapping[1], extensions:RouterExtension[*] |
            [
               s:meta::external::format::xml::executionPlan::XmlSerializeExecutionNode[1]   | transformSerializeNode($s, $mapping, $extensions),
               d:meta::external::format::xml::executionPlan::XmlDeserializeExecutionNode[1] | transformDeserializeNode($d, $mapping, $extensions)
            ]
         }   
   );
}

Class meta::protocols::pure::vX_X_X::metamodel::external::format::xml::executionPlan::XmlSerializeExecutionNode extends ExecutionNode
{
   
}

Class meta::protocols::pure::vX_X_X::metamodel::external::format::xml::executionPlan::XmlDeserializeExecutionNode extends meta::protocols::pure::vX_X_X::metamodel::external::shared::format::executionPlan::ExternalFormatDeserializeExecutionNode
{
   binding : String[1];
   tree    : meta::protocols::pure::vX_X_X::metamodel::valueSpecification::raw::RootGraphFetchTree[0..1];
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::external::format::xml::transformSerializeNode(node:meta::external::format::xml::executionPlan::XmlSerializeExecutionNode[1], mapping:meta::pure::mapping::Mapping[1], extensions:RouterExtension[*]): ExecutionNode[1]
{
   ^meta::protocols::pure::vX_X_X::metamodel::external::format::xml::executionPlan::XmlSerializeExecutionNode(
      _type           = 'xmlSerialize',
      resultType      = $node.resultType->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::executionPlan::transformResultType($mapping, $extensions),
      resultSizeRange = $node.resultSizeRange->map(s| $s->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformMultiplicity())
   );
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::external::format::xml::transformDeserializeNode(node:meta::external::format::xml::executionPlan::XmlDeserializeExecutionNode[1], mapping:meta::pure::mapping::Mapping[1], extensions:RouterExtension[*]): ExecutionNode[1]
{
   ^meta::protocols::pure::vX_X_X::metamodel::external::format::xml::executionPlan::XmlDeserializeExecutionNode(
      _type           = 'xmlDeserialize',
      resultType      = $node.resultType->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::executionPlan::transformResultType($mapping, $extensions),
      resultSizeRange = $node.resultSizeRange->map(s| $s->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformMultiplicity()),
      binding         = $node.binding->elementToPath(),
      tree            = $node.tree->map(t| $t->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::valueSpecification::transformGraphFetchTree([], ^Map<String,List<Any>>(), $extensions))->cast(@meta::protocols::pure::vX_X_X::metamodel::valueSpecification::raw::RootGraphFetchTree)
   );
}
