// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::xsd::tests::toPure::*;
import meta::external::format::xml::executionPlan::test::*;
import meta::external::format::xml::metamodel::xml::*;
import meta::external::format::xml::metamodel::xsd::*;
import meta::external::shared::format::binding::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::functions::*;
import meta::external::shared::functions::*;
import meta::external::shared::format::metamodel::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::model::unit::*;
import meta::pure::runtime::*;

Class meta::external::format::xml::executionPlan::test::Person
{
   firstName : String[1];
   lastName  : String[1];
}

function <<meta::pure::profiles::test.Test>> meta::external::format::xml::executionPlan::test::xmlNodes(): Boolean[1]
{
   let extensions = meta::external::shared::format::externalFormatExtension()->concatenate(meta::external::format::xml::extension::xsdFormatExtension());
   
   let schemaSet = ^SchemaSet(
      name    = 'TestSchema',
      package = meta::external::format::xml::executionPlan::test,
      format  = 'XSD',
      schemas = ^Schema(
         id      = 'default.xsd',
         detail  = ^XsdSchema(
            items = [
               ^XsdElement(
                  name=^QName(localPart='person', namespace=''),
                  minOccurs=1,
                  maxOccurs=1,
                  type=^XsdComplexType(
                     particle=^XsdSequence(
                        minOccurs=1,
                        maxOccurs=1,
                        items = [
                           ^XsdElement(name=^QName(localPart='firstName', namespace=''), typeName=xsType('string'), minOccurs=1, maxOccurs=1),
                           ^XsdElement(name=^QName(localPart='lastName', namespace=''), typeName=xsType('string'), minOccurs=1, maxOccurs=1)
                        ]
                     )
                  )
               )
            ]
         )
      )
   );
   
   let binding = ^Binding(
      name      = 'TestBinding',
      package   = meta::external::format::xml::executionPlan::test,
      schemaSet = $schemaSet,
      contentType = 'application/xml',
      modelUnit = newModelUnit()->include(Person)
   );
   
   let tree = #{Person {firstName, lastName}}#;

   let plan = executionPlan(
      data:ByteStream[1]|Person->internalize($binding, $data)->graphFetchChecked($tree)->externalize($binding),
      ^ExecutionContext(),
      $extensions,
      noDebug()
   );

   let planString = $plan->planToString(false, $extensions);
   
   let expected = 'Sequence\n' +
                  '(\n' +
                  '  type = String\n' +
                  '  resultSizeRange = 1\n' +
                  '  (\n' +
                  '    FunctionParametersValidationNode\n' +
                  '    (\n' +
                  '      functionParameters = [data:ByteStream[1]]\n' +
                  '    )\n' +
                  '    ExternalFormat_Externalize\n' +
                  '    (\n' +
                  '      type = String\n' +
                  '      resultSizeRange = 1\n' +
                  '      checked = true\n' +
                  '      binding = meta::external::format::xml::executionPlan::test::TestBinding\n' +
                  '\n' +
                  '      (\n' +
                  '        ExternalFormat_Internalize\n' +
                  '        (\n' +
                  '          type = Class[impls=]\n' +
                  '          resultSizeRange = *\n' +
                  '          binding = meta::external::format::xml::executionPlan::test::TestBinding[application/xml]\n' +
                  '          enableConstraints = true\n' +
                  '          checked = true\n' +
                  '          graphFetchTree = #{meta::external::format::xml::executionPlan::test::Person{firstName,lastName}}#\n' +
                  '\n' +
                  '          (\n' +
                  '            VariableResolution\n' +
                  '            (\n' +
                  '              type = ByteStream\n' +
                  '              varName = data\n' +
                  '\n' +
                  '            )\n' +
                  '          )\n' +
                  '        )\n' +
                  '      )\n' +
                  '    )\n' +
                  '  )\n' +
                  ')\n';

   assertEquals($expected, $planString);   
}

function meta::external::format::xml::executionPlan::test::xsType(type: String[1]): QName[1]
{
   ^QName(localPart=$type, namespace='http://www.w3.org/2001/XMLSchema');
}