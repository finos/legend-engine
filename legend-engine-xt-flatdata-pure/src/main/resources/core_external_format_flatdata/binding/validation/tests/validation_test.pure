
import meta::external::format::flatdata::executionPlan::test::*;
import meta::external::format::flatdata::metamodel::*;
import meta::external::format::flatdata::binding::validation::*;

import meta::external::shared::format::binding::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::functions::*;
import meta::pure::executionPlan::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::model::unit::*;
import meta::pure::runtime::*;
import meta::external::format::flatdata::binding::validation::test::*;

Class meta::external::format::flatdata::binding::validation::test::WholeFile {}

Class meta::external::format::flatdata::binding::validation::test::Target
{
  id : Integer[1];
  value : String[1];
  date : StrictDate[1];
}

Class meta::external::format::flatdata::binding::validation::test::Header
{
  date:StrictDate[1];
}

Class meta::external::format::flatdata::binding::validation::test::Row
{
  id : Integer[1];
  value : String[1];
}

Association meta::external::format::flatdata::binding::validation::test::FileHeader
{
  file : WholeFile[1];
  header : Header[1];
}

Association meta::external::format::flatdata::binding::validation::test::FileRow
{
  file : WholeFile[1];
  row : Row[*];
}

function <<meta::pure::profiles::test.Test>> meta::external::format::flatdata::binding::validation::test::testFlatDataSchemaBindingWithImmaterialFooter():Boolean[1]
{
  let schemaSet = ^SchemaSet(
    name = 'TestSchema',
    package = meta::external::format::flatdata::binding::validation::test,
    format = 'FlatData',
    schemas = ^Schema(
                id = 'default.flatdata',
                detail = ^FlatData(
                          sections = [
                            ^FlatDataSection(
                              name = 'Header',
                              driverId = 'DelimitedWithoutHeadings',
                              sectionProperties = [
                                ^FlatDataProperty(name = 'delimiter', value = ' '),
                                ^FlatDataProperty(name = 'scope.forNumberOfLines', value = 1)
                              ],
                              recordType = ^FlatDataRecordType(
                                              fields = [
                                                ^FlatDataRecordField(label = 'date', address = '3', type = ^FlatDataDate(format = 'yyyyMMdd', optional=false))
                                              ]
                              )
                            ),
                            ^FlatDataSection(
                              name = 'Row', 
                              driverId = 'DelimitedWithoutHeadings',
                              sectionProperties = [
                                ^FlatDataProperty(name = 'delimiter', value = '~'),
                                ^FlatDataProperty(name = 'scope.default', value = true),
                                ^FlatDataProperty(name = 'recordSeparator', value = '\r\n')
                              ],
                              recordType = ^FlatDataRecordType(
                                fields = [
                                  ^FlatDataRecordField(label = 'id', address = '1', type = ^FlatDataInteger(optional = false)),
                                  ^FlatDataRecordField(label = 'value', address = '2', type = ^FlatDataString(optional = false))
                                ]
                              )
                            ),
                            ^FlatDataSection(
                              name = 'footer', 
                              driverId = 'ImmaterialLines',
                              sectionProperties = [
                                ^FlatDataProperty(name = 'scope.forNumberOfLines', value = 1)
                              ]
                            )

                          ]
                        )
              )
  );

  let binding = ^Binding(
      name        = 'TestBinding',
      package     = meta::external::format::flatdata::executionPlan::test,
      schemaSet   = $schemaSet,
      contentType = 'application/x.flatdata',
      modelUnit   = newModelUnit()->include([Header, Row, FileHeader, FileRow, WholeFile])
   );

  let b = meta::external::format::flatdata::binding::validation::bindDetails($binding)->cast(@FlatDataBindingDetail);

  assertNotEmpty($b.schemaBindingDetail);

  let headerSectionToProperty = $b.schemaBindingDetail.details->filter(secToProp | $secToProp.property.name == 'header');
  assertNotEmpty($headerSectionToProperty);
  assert($headerSectionToProperty->toOne().section.name == 'Header');

  let rowSectionToProperty = $b.schemaBindingDetail.details->filter(secToProp | $secToProp.property.name == 'row');
  assertNotEmpty($rowSectionToProperty);
  assert($rowSectionToProperty->toOne().section.name == 'Row');
} 