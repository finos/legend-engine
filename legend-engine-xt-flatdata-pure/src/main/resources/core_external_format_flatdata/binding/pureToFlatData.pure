// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::format::binding::*;
import meta::external::shared::format::binding::toString::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::format::utils::*;
import meta::external::format::flatdata::metamodel::*;
import meta::external::format::flatdata::binding::fromPure::*;
import meta::pure::generation::metamodel::*;
import meta::pure::model::unit::*;

// ========================================================================================================================================================
// Entry points 
// ========================================================================================================================================================

function meta::external::format::flatdata::binding::fromPure::pureToFlatData(config:ModelToFlatDataConfiguration[1]): Binding[1]
{
   pureToFlatData($config, noDebug());
}

function meta::external::format::flatdata::binding::fromPure::pureToFlatDataWithDebug(config:ModelToFlatDataConfiguration[1]): Binding[1]
{
   pureToFlatData($config, debug());
}

function meta::external::format::flatdata::binding::fromPure::pureToFlatData(config:ModelToFlatDataConfiguration[1], debug:DebugContext[1]): Binding[1]
{
   let generatedFlatData = generate($config, $debug);
   let result            = createBinding($generatedFlatData, $config);
      
   $debug->log(|'\nGenerated the following:\n\n'+$result->bindingToString());
   $result;
}

// ========================================================================================================================================================
// Configuration 
// ========================================================================================================================================================

Class meta::external::format::flatdata::binding::fromPure::ModelToFlatDataConfiguration extends meta::external::shared::format::binding::fromPure::ModelToSchemaConfiguration
{
}

function meta::external::format::flatdata::binding::fromPure::defaultConfig(): ModelToFlatDataConfiguration[1]
{
  ^ModelToFlatDataConfiguration(targetSchemaSet='target::package::GeneratedSchemaSet', targetBinding='target::package::GeneratedBinding');
}

function <<Generation.Configuration>>  meta::external::format::flatdata::binding::fromPure::describeConfiguration(): GenerationParameter[*]
{  
  meta::pure::generation::describeConfiguration(ModelToFlatDataConfiguration, meta::external::format::flatdata::binding::fromPure::defaultConfig__ModelToFlatDataConfiguration_1_, []);
}

// ========================================================================================================================================================
// generation
// ========================================================================================================================================================

function <<access.private>> meta::external::format::flatdata::binding::fromPure::generate(config:ModelToFlatDataConfiguration[1], debug:DebugContext[1]): FlatData[1]
{
   assert($config.sourceModel->size() == 1 && $config.sourceModel->at(0)->instanceOf(Class), |'Only single source class supported');
   let cls     = $config.sourceModel->at(0)->cast(@Class<Any>);
   
   let fields  = $cls->hierarchicalProperties()
      ->filter(p| $p.multiplicity == PureOne || $p.multiplicity == ZeroOne)
      ->map(p|
         let label      = $p.name->toOne();
         let optional   = $p.multiplicity == ZeroOne;
         let returnType = $p->functionReturnType().rawType->toOne();
         if($returnType == String || $returnType->instanceOf(Enumeration),
            | ^FlatDataRecordField(label=$label, type=^FlatDataString(optional=$optional)),
            |
         if($returnType == Boolean,
            | ^FlatDataRecordField(label=$label, type=^FlatDataBoolean(optional=$optional)),
            |
         if($returnType == Integer,
            | ^FlatDataRecordField(label=$label, type=^FlatDataInteger(optional=$optional)),
            |
         if($returnType == Float || $returnType == Decimal,
            | ^FlatDataRecordField(label=$label, type=^FlatDataDecimal(optional=$optional)),
            |
         if($returnType == StrictDate,
            | ^FlatDataRecordField(label=$label, type=^FlatDataDate(optional=$optional)),
            |
         if($returnType == DateTime,
            | ^FlatDataRecordField(label=$label, type=^FlatDataDateTime(optional=$optional)),
            | []
         ))))));
      );
   
   let section = ^FlatDataSection(
      name              = $cls.name->toOne(),
      driverId          = 'DelimitedWithHeadings',
      sectionProperties = [^FlatDataProperty(name = 'scope.untilEof', value=true), ^FlatDataProperty(name = 'delimiter', value=',')],
      recordType        = ^FlatDataRecordType(fields=$fields)
   );
   ^FlatData(sections = $section);
}

function <<access.private>> meta::external::format::flatdata::binding::fromPure::createBinding(flatData:FlatData[1], config:ModelToFlatDataConfiguration[1]): Binding[1]
{
   let schemaSetSepPos  = $config.targetSchemaSet->lastIndexOf('::');
   let schemaSetPkgName = $config.targetSchemaSet->substring(0, $schemaSetSepPos);
   
   let schemaSet = ^SchemaSet(
      package = pathToPackage($schemaSetPkgName, true),
      name    = $config.targetSchemaSet->substring($schemaSetSepPos+2),
      format  = 'FlatData',
      schemas = ^Schema(                   
         id     = 'default.flatdata',
         detail = $flatData
      )
   );
      
   let opSepPos  = $config.targetBinding->lastIndexOf('::');
   let opPkgName = $config.targetBinding->substring(0, $opSepPos);
   
   ^Binding(
      package     = pathToPackage($opPkgName, true),
      name        = $config.targetBinding->substring($opSepPos+2),
      schemaSet   = $schemaSet, 
      contentType = 'application/x.flatdata',
      modelUnit   = newModelUnit()->include($config.sourceModel)
   );
}

