// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::flatdata::metamodel::*;
import meta::external::format::flatdata::transformation::fromPure::*;

import meta::external::shared::format::*;
import meta::external::shared::format::transformation::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::format::utils::*;

import meta::pure::generation::metamodel::*;

import meta::pure::model::unit::*;

// ========================================================================================================================================================
// Descriptor 
// ========================================================================================================================================================

function meta::external::format::flatdata::transformation::fromPure::flatDataFromPureDescriptor(): ExternalFormatFromPureDescriptor<ModelToFlatDataConfiguration>[1]
{
  ^ExternalFormatFromPureDescriptor<ModelToFlatDataConfiguration>
  (
    configuration        = ModelToFlatDataConfiguration,
    generator            = pureToFlatData_ModelUnit_1__ModelToFlatDataConfiguration_1__SchemaSet_1_,
    generatorWithDebug   = pureToFlatDataWithDebug_ModelUnit_1__ModelToFlatDataConfiguration_1__SchemaSet_1_,
    defaultConfig        = defaultConfig()
  )
}

// ========================================================================================================================================================
// Configuration 
// ========================================================================================================================================================

Class meta::external::format::flatdata::transformation::fromPure::ModelToFlatDataConfiguration extends meta::external::shared::format::transformation::fromPure::ModelToSchemaConfiguration
{
}

function <<access.private>> meta::external::format::flatdata::transformation::fromPure::defaultConfig(): ModelToFlatDataConfiguration[1]
{
  ^ModelToFlatDataConfiguration(format='FlatData', targetSchemaSet='target::package::GeneratedSchemaSet');
}

// ========================================================================================================================================================
// generation
// ========================================================================================================================================================

function <<access.private>> meta::external::format::flatdata::transformation::fromPure::pureToFlatData(modelUnit:ModelUnit[1], config:ModelToFlatDataConfiguration[1]): SchemaSet[1]
{
   pureToFlatData($modelUnit, $config, noDebug());
}

function <<access.private>> meta::external::format::flatdata::transformation::fromPure::pureToFlatDataWithDebug(modelUnit:ModelUnit[1], config:ModelToFlatDataConfiguration[1]): SchemaSet[1]
{
   pureToFlatData($modelUnit, $config, debug());
}

function <<access.private>> meta::external::format::flatdata::transformation::fromPure::pureToFlatData(modelUnit:ModelUnit[1], config:ModelToFlatDataConfiguration[1], debug:DebugContext[1]): SchemaSet[1]
{
   let sourceModels      = $modelUnit->resolve().classes();
   let generatedFlatData = generate($sourceModels, $config, $debug);
   createSchemaSet($generatedFlatData, $config);
}

function <<access.private>> meta::external::format::flatdata::transformation::fromPure::generate(sourceModels:Class<Any>[*], config:ModelToFlatDataConfiguration[1], debug:DebugContext[1]): FlatData[1]
{
   assert($sourceModels->size() == 1, |'Only single source class supported');
   let cls     = $sourceModels->toOne();
   
   let fields  = $cls->hierarchicalProperties()
      ->filter(p| $p.multiplicity == PureOne || $p.multiplicity == ZeroOne)
      ->map(p|
         let label      = $p.name->toOne();
         let optional   = $p.multiplicity == ZeroOne;
         let returnType = $p->functionReturnType().rawType->toOne();
         if($returnType == String || $returnType->instanceOf(Enumeration),
            | ^FlatDataRecordField(label=$label, type=^FlatDataString(optional=$optional)),
            |
         if($returnType == Boolean,
            | ^FlatDataRecordField(label=$label, type=^FlatDataBoolean(optional=$optional)),
            |
         if($returnType == Integer,
            | ^FlatDataRecordField(label=$label, type=^FlatDataInteger(optional=$optional)),
            |
         if($returnType == Float || $returnType == Decimal,
            | ^FlatDataRecordField(label=$label, type=^FlatDataDecimal(optional=$optional)),
            |
         if($returnType == StrictDate,
            | ^FlatDataRecordField(label=$label, type=^FlatDataDate(optional=$optional)),
            |
         if($returnType == DateTime,
            | ^FlatDataRecordField(label=$label, type=^FlatDataDateTime(optional=$optional)),
            | []
         ))))));
      );
   
   let section = ^FlatDataSection(
      name              = $cls.name->toOne(),
      driverId          = 'DelimitedWithHeadings',
      sectionProperties = [^FlatDataProperty(name = 'scope.untilEof', values=true), ^FlatDataProperty(name = 'delimiter', values=',')],
      recordType        = ^FlatDataRecordType(fields=$fields)
   );
   ^FlatData(sections = $section);
}

function <<access.private>> meta::external::format::flatdata::transformation::fromPure::createSchemaSet(flatData:FlatData[1], config:ModelToFlatDataConfiguration[1]): SchemaSet[1]
{
   let schemaSetSepPos  = $config.targetSchemaSet->lastIndexOf('::');
   let schemaSetPkgName = $config.targetSchemaSet->substring(0, $schemaSetSepPos);
   
   ^SchemaSet(
      package = pathToPackage($schemaSetPkgName, true),
      name    = $config.targetSchemaSet->substring($schemaSetSepPos+2),
      format  = 'FlatData',
      schemas = ^Schema(                   
         id     = 'default.flatdata',
         detail = $flatData
      )
   );
}

