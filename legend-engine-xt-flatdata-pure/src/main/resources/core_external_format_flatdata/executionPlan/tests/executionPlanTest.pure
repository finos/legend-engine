// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::flatdata::executionPlan::test::*;
import meta::external::format::flatdata::metamodel::*;
import meta::external::shared::format::binding::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::tests::*;
import meta::external::shared::format::functions::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::functions::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::model::unit::*;
import meta::pure::runtime::*;

Class meta::external::format::flatdata::executionPlan::test::Person
[
   $this.firstName->length() > 1
]
{
   firstName : String[1];
   lastName  : String[1];
}

function meta::external::format::flatdata::executionPlan::test::getTestBinding():Binding[1]
{
   let schemaSet = ^SchemaSet(
         name    = 'TestSchema',
         package = meta::external::format::flatdata::executionPlan::test,
         format  = 'FlatData',
         schemas = ^Schema(
            id = 'default.flatdata',
            detail  = ^FlatData(
               sections = ^FlatDataSection(
                  name              = 'Person',
                  driverId          = 'DelimitedWithHeadings',
                  sectionProperties = [
                     ^FlatDataProperty(name='scope.untilEof', value=true),
                     ^FlatDataProperty(name='delimiter', value=',')
                  ],
                  recordType        = ^FlatDataRecordType(
                     fields = [
                        ^FlatDataRecordField(label='First Name', type=^FlatDataString(optional=false)),
                        ^FlatDataRecordField(label='Last Name',  type=^FlatDataString(optional=false))
                     ]
                  )
               )
            )
         )
      );

   ^Binding(
      name        = 'TestBinding',
      package     = meta::external::format::flatdata::executionPlan::test,
      schemaSet   = $schemaSet,
      contentType = 'application/x.flatdata',
      modelUnit   = newModelUnit()->include(meta::external::format::flatdata::executionPlan::test::Person)
   );
}

function <<meta::pure::profiles::test.Test>> meta::external::format::flatdata::executionPlan::test::flatDataNodesChecked(): Boolean[1]
{
   let extensions = meta::external::shared::format::externalFormatExtension();

   let binding = getTestBinding();

   let tree = #{meta::external::format::flatdata::executionPlan::test::Person {firstName, lastName}}#;

   let plan = executionPlan(
      data:ByteStream[1]|meta::external::format::flatdata::executionPlan::test::Person->internalize($binding, $data)->graphFetchChecked($tree)->externalize($binding),
      ^ExecutionContext(),
      $extensions,
      noDebug()
   );

   let planString = $plan->planToString(false, $extensions);

   let expected = 
        'Sequence\n' +
        '(\n' +
        '  type = String\n' +
        '  resultSizeRange = 1\n' +
        '  (\n' +
        '    FunctionParametersValidationNode\n' +
        '    (\n' +
        '      functionParameters = [data:ByteStream[1]]\n' +
        '    )\n' +
        '    ExternalFormat_Externalize\n' +
        '    (\n' +
        '      type = String\n' +
        '      resultSizeRange = 1\n' +
        '      checked = true\n' +
        '      binding = meta::external::format::flatdata::executionPlan::test::TestBinding\n' +
        '\n' +
        '      (\n' +
        '        ExternalFormat_Internalize\n' +
        '        (\n' +
        '          type = Class[impls=]\n' +
        '          resultSizeRange = *\n' +
        '          binding = meta::external::format::flatdata::executionPlan::test::TestBinding[application/x.flatdata]\n' +
        '          enableConstraints = true\n' +
        '          checked = true\n' +
        '          graphFetchTree = #{meta::external::format::flatdata::executionPlan::test::Person{firstName,lastName}}#\n' +
        '\n' +
        '          (\n' +
        '            VariableResolution\n' +
        '            (\n' +
        '              type = ByteStream\n' +
        '              varName = data\n' +
        '\n' +
        '            )\n' +
        '          )\n' +
        '        )\n' +
        '      )\n' +
        '    )\n' +
        '  )\n' +
        ')\n';

   assertEquals($expected, $planString);
}
