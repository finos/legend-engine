[
  {
    "content": "{\"dqRules\":[{\"constraintGrammar\":\"($this.age >= 18)\",\"constraintName\":\"mustBeOfLegalAge\",\"constraintType\":\"Alloy_Constraint_Validation\",\"propertyPath\":\"Person\"},{\"constraintGrammar\":\"Class\",\"constraintName\":\"Person\",\"constraintType\":\"Alloy_Class_Validation\",\"propertyPath\":\"Person\"},{\"constraintGrammar\":\"1\",\"constraintName\":\"name\",\"constraintType\":\"Alloy_Structural_Validation\",\"propertyPath\":\"Person::name\"},{\"constraintGrammar\":\"1\",\"constraintName\":\"age\",\"constraintType\":\"Alloy_Structural_Validation\",\"propertyPath\":\"Person::age\"}]}",
    "format": "json",
    "path": "dataQualityRulesMetadata.json"
  },
  {
    "content": "{\"_type\":\"simple\",\"authDependent\":false,\"globalImplementationSupport\":{\"_type\":\"java\",\"classes\":[{\"name\":\"Person\",\"package\":\"_pure.app.meta.dataquality\",\"source\":\"package _pure.app.meta.dataquality;\\n\\nimport java.math.*;\\nimport java.util.*;\\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\\n\\npublic interface Person extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\\n{\\n    default String typeName$()\\n    {\\n        return \\\"Person\\\";\\n    }\\n\\n    default String typePath$()\\n    {\\n        return \\\"meta::dataquality::Person\\\";\\n    }\\n\\n    String getName();\\n    long getAge();\\n    String getAlloyStoreObjectReference$();\\n}\"},{\"name\":\"Serialize\",\"package\":\"_pure.plan.root\",\"source\":\"package _pure.plan.root;\\n\\nimport org.finos.legend.engine.plan.dependencies.store.platform.IGraphSerializer;\\nimport org.finos.legend.engine.plan.dependencies.store.platform.IPlatformPureExpressionExecutionNodeSerializeSpecifics;\\nimport org.finos.legend.engine.plan.dependencies.store.platform.ISerializationWriter;\\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\\n\\npublic class Serialize implements IPlatformPureExpressionExecutionNodeSerializeSpecifics\\n{\\n    public IGraphSerializer<?> serializer(ISerializationWriter writer,\\n                                          IExecutionNodeContext context)\\n    {\\n        return new Serializer(writer, context);\\n    }\\n}\"},{\"name\":\"Serializer\",\"package\":\"_pure.plan.root\",\"source\":\"package _pure.plan.root;\\n\\nimport _pure.app.meta.dataquality.Person;\\nimport java.util.List;\\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.EnforcementLevel;\\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked;\\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect;\\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode;\\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RuleType;\\nimport org.finos.legend.engine.plan.dependencies.store.platform.IGraphSerializer;\\nimport org.finos.legend.engine.plan.dependencies.store.platform.ISerializationWriter;\\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\\n\\npublic class Serializer implements IGraphSerializer<IChecked>\\n{\\n    private ISerializationWriter writer;\\n    private IExecutionNodeContext context;\\n\\n    Serializer(ISerializationWriter writer, IExecutionNodeContext context)\\n    {\\n        this.writer = writer;\\n        this.context = context;\\n    }\\n\\n    public void serialize(IChecked value)\\n    {\\n        this.writer.startObject(\\\"meta::pure::dataQuality::Checked\\\");\\n        this.writer\\n            .writeComplexProperty(\\\"defects\\\",\\n                                  value.getDefects(),\\n                                  this::writeIDefect_defects);\\n        this.writer\\n            .writeComplexProperty(\\\"value\\\",\\n                                  (Person) value.getValue(),\\n                                  this::writePerson_value);\\n        this.writer.endObject();\\n    }\\n\\n    public void writeIDefect_defects(IDefect value)\\n    {\\n        this.writer.startObject(\\\"meta::pure::dataQuality::Defect\\\");\\n        this.writer.writeStringProperty(\\\"id\\\", value.getId());\\n        this.writer.writeStringProperty(\\\"externalId\\\", value.getExternalId());\\n        this.writer.writeStringProperty(\\\"message\\\", value.getMessage());\\n        this.writer\\n            .writeEnumProperty(\\\"enforcementLevel\\\",\\n                               \\\"meta::pure::dataQuality::EnforcementLevel\\\",\\n                               value.getEnforcementLevel() == null\\n                                    ? null\\n                                    : value.getEnforcementLevel().getName());\\n        this.writer\\n            .writeEnumProperty(\\\"ruleType\\\",\\n                               \\\"meta::pure::dataQuality::RuleType\\\",\\n                               value.getRuleType() == null\\n                                    ? null\\n                                    : value.getRuleType().getName());\\n        this.writer\\n            .writeStringProperty(\\\"ruleDefinerPath\\\",\\n                                 value.getRuleDefinerPath());\\n        this.writer\\n            .writeComplexProperty(\\\"path\\\",\\n                                  value.getPath(),\\n                                  this::writeRelativePathNode_defects_path);\\n        this.writer.endObject();\\n    }\\n\\n    public void writeRelativePathNode_defects_path(RelativePathNode value)\\n    {\\n        this.writer.startObject(\\\"meta::pure::dataQuality::RelativePathNode\\\");\\n        this.writer\\n            .writeStringProperty(\\\"propertyName\\\",\\n                                 value.getPropertyName());\\n        this.writer.writeIntegerProperty(\\\"index\\\", value.getIndex());\\n        this.writer.endObject();\\n    }\\n\\n    public void writePerson_value(Person value)\\n    {\\n        if (value instanceof IReferencedObject)\\n        {\\n            this.writer\\n                .startObject(value.typePath$(),\\n                             ((IReferencedObject) value).getAlloyStoreObjectReference$());\\n        }\\n        else\\n        {\\n            this.writer.startObject(value.typePath$());\\n        }\\n        this.writer.writeStringProperty(\\\"name\\\", value.getName());\\n        this.writer.writeIntegerProperty(\\\"age\\\", value.getAge());\\n        this.writer.endObject();\\n    }\\n}\"},{\"name\":\"Execute\",\"package\":\"_pure.plan.root.n1.localGraph\",\"source\":\"package _pure.plan.root.n1.localGraph;\\n\\nimport java.lang.reflect.Method;\\nimport java.sql.ResultSet;\\nimport java.util.*;\\nimport java.util.function.*;\\nimport java.util.stream.*;\\nimport org.eclipse.collections.api.tuple.Pair;\\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\\nimport org.finos.legend.engine.plan.dependencies.store.relational.graphFetch.IRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics;\\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\\n\\npublic class Execute implements IRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics\\n{\\n    private Specifics specifics;\\n\\n    public Execute()\\n    {\\n        this.specifics = new Specifics();\\n    }\\n\\n    public void prepare(ResultSet resultSet, String databaseTimeZone, String databaseConnection)\\n    {\\n        this.specifics.prepare(resultSet, databaseTimeZone, databaseConnection);\\n    }\\n\\n    public IGraphInstance<? extends IReferencedObject> nextGraphInstance()\\n    {\\n        return this.specifics.nextGraphInstance();\\n    }\\n\\n    public List<Method> primaryKeyGetters()\\n    {\\n        return this.specifics.primaryKeyGetters();\\n    }\\n\\n    public List<Pair<String, String>> allInstanceSetImplementations()\\n    {\\n        return this.specifics.allInstanceSetImplementations();\\n    }\\n\\n    public List<String> primaryKeyColumns(int setIndex)\\n    {\\n        return this.specifics.primaryKeyColumns(setIndex);\\n    }\\n\\n    public boolean supportsCaching()\\n    {\\n        return true;\\n    }\\n}\"},{\"name\":\"GraphFetch_Node0_Person_Impl\",\"package\":\"_pure.plan.root.n1.localGraph\",\"source\":\"package _pure.plan.root.n1.localGraph;\\n\\nimport java.math.*;\\nimport java.util.*;\\nimport java.util.function.*;\\nimport java.util.stream.*;\\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\\nimport org.finos.legend.engine.plan.dependencies.util.Library;\\nimport com.fasterxml.jackson.annotation.JsonInclude;\\nimport com.fasterxml.jackson.core.JsonGenerator;\\nimport com.fasterxml.jackson.databind.JsonSerializer;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.fasterxml.jackson.databind.SerializerProvider;\\nimport com.fasterxml.jackson.databind.module.SimpleModule;\\nimport java.io.IOException;\\n\\npublic class GraphFetch_Node0_Person_Impl implements _pure.app.meta.dataquality.Person, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.dataquality.Person>, java.io.Serializable\\n{\\n    private String name;\\n    private long age;\\n    private Object pk$_0;\\n    private static final ObjectMapper objectMapper$ = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL).registerModule(new SimpleModule().addSerializer(PureDate.class, new JsonSerializer<PureDate>() { @Override public void serialize(PureDate value, JsonGenerator gen, SerializerProvider serializers) throws IOException { gen.writeRawValue(\\\"\\\\\\\"\\\" + value.toString() + \\\"\\\\\\\"\\\"); } }));\\n    private String setId$;\\n    public static String databaseConnection$;\\n    private String alloyStoreObjectReference$;\\n    private static final long serialVersionUID = 1461153389L;\\n\\n    public String getName()\\n    {\\n        return this.name;\\n    }\\n\\n    public void setName(String name)\\n    {\\n        this.name = name;\\n    }\\n\\n    public void addName(String object)\\n    {\\n        if ((Object) this.name != null)\\n        {\\n            throw new IllegalStateException(\\\"Found multiple objects for property 'name' of multiplicity with bound 1\\\");\\n        }\\n        this.name = object;\\n    }\\n\\n    public long getAge()\\n    {\\n        return this.age;\\n    }\\n\\n    public void setAge(long age)\\n    {\\n        this.age = age;\\n    }\\n\\n    public void addAge(long object)\\n    {\\n        if ((Object) new Long(this.age) != null)\\n        {\\n            throw new IllegalStateException(\\\"Found multiple objects for property 'age' of multiplicity with bound 1\\\");\\n        }\\n        this.age = object;\\n    }\\n\\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\\n    {\\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\\n    }\\n\\n    public _pure.app.meta.dataquality.Person withConstraintsApplied()\\n    {\\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\\n        if (!defects.isEmpty())\\n        {\\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\\\"\\\\n\\\")));\\n        }\\n        return this;\\n    }\\n\\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.dataquality.Person> toChecked()\\n    {\\n        return this.toChecked(null, true);\\n    }\\n\\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.dataquality.Person> toChecked(boolean applyConstraints)\\n    {\\n        return this.toChecked(null, applyConstraints);\\n    }\\n\\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.dataquality.Person> toChecked(Object source)\\n    {\\n        return this.toChecked(source, true);\\n    }\\n\\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.dataquality.Person> toChecked(Object source,\\n                                                                                                                              boolean applyConstraints)\\n    {\\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.dataquality.Person>() {\\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\\n            public Object getSource() { return source; }\\n            public _pure.app.meta.dataquality.Person getValue() { return GraphFetch_Node0_Person_Impl.this; }\\n        };\\n    }\\n\\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\\n    {\\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\\n        if (!context.visited.contains(this))\\n        {\\n            context.visited.add(this);\\n            this.constraint_mustBeOfLegalAge().ifPresent(result::add);\\n        }\\n        return result;\\n    }\\n\\n    public Optional<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> constraint_mustBeOfLegalAge()\\n    {\\n        try\\n        {\\n            if (!(this.getAge() >= 18L))\\n            {\\n                String message = \\\"Constraint :[mustBeOfLegalAge] violated in the Class Person\\\";\\n                return Optional.of(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newConstraintDefect(\\\"mustBeOfLegalAge\\\",\\n                                                                                                                                null,\\n                                                                                                                                message,\\n                                                                                                                                org.finos.legend.engine.plan.dependencies.domain.dataQuality.EnforcementLevel.Error,\\n                                                                                                                                \\\"meta::dataquality::Person\\\"));\\n            }\\n            return Optional.empty();\\n        }\\n        catch (Exception e)\\n        {\\n            String message = \\\"Unable to evaluate constraint [mustBeOfLegalAge]: \\\" + (e.getMessage() == null\\n                                                                                      ? \\\"data not available - check your mappings\\\"\\n                                                                                      : e.getMessage());\\n            return Optional.of(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newConstraintDefect(\\\"mustBeOfLegalAge\\\",\\n                                                                                                                            null,\\n                                                                                                                            message,\\n                                                                                                                            org.finos.legend.engine.plan.dependencies.domain.dataQuality.EnforcementLevel.Error,\\n                                                                                                                            \\\"meta::dataquality::Person\\\"));\\n        }\\n    }\\n\\n    public Object getPk$_0()\\n    {\\n        return this.pk$_0;\\n    }\\n\\n    public void setPk$_0(Object pk$_0)\\n    {\\n        this.pk$_0 = pk$_0;\\n    }\\n\\n    public String getSetId$()\\n    {\\n        return this.setId$;\\n    }\\n\\n    public void setSetId$(String setId)\\n    {\\n        this.setId$ = setId;\\n    }\\n\\n    public String getAlloyStoreObjectReference$()\\n    {\\n        if (this.alloyStoreObjectReference$ == null)\\n        {\\n            try\\n            {\\n                StringBuilder referenceBuilder = new StringBuilder();\\n                referenceBuilder.append(\\\"001:\\\");\\n                referenceBuilder.append(\\\"010:\\\");\\n\\n                referenceBuilder.append(\\\"0000000010:\\\");\\n                referenceBuilder.append(\\\"Relational:\\\");\\n\\n                referenceBuilder.append(\\\"0000000038:\\\");\\n                referenceBuilder.append(\\\"meta::dataquality::dataqualitymappings:\\\");\\n\\n                referenceBuilder.append(\\\"0000000023:\\\");\\n                referenceBuilder.append(\\\"meta_dataquality_Person:\\\");\\n\\n                String setId = this.getSetId$();\\n                referenceBuilder.append(String.format(\\\"%010d\\\", setId.length()));\\n                referenceBuilder.append(\\\":\\\");\\n                referenceBuilder.append(setId);\\n                referenceBuilder.append(\\\":\\\");\\n\\n                String databaseConnectionString = _pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl.databaseConnection$;\\n                referenceBuilder.append(String.format(\\\"%010d\\\", databaseConnectionString.length()));\\n                referenceBuilder.append(\\\":\\\");\\n                referenceBuilder.append(databaseConnectionString);\\n                referenceBuilder.append(\\\":\\\");\\n\\n                Map<String, Object> pkMap = new HashMap<>();\\n\\n                pkMap.put(\\\"pk$_0\\\", this.getPk$_0());\\n                String pkMapString = objectMapper$.writeValueAsString(pkMap);\\n                referenceBuilder.append(String.format(\\\"%010d\\\", pkMapString.length()));\\n                referenceBuilder.append(\\\":\\\");\\n                referenceBuilder.append(pkMapString);\\n\\n                this.alloyStoreObjectReference$ = \\\"ASOR:\\\" + org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(referenceBuilder.toString().getBytes());\\n            }\\n            catch (Exception e)\\n            {\\n               throw new RuntimeException(e);\\n            }\\n        }\\n\\n        return this.alloyStoreObjectReference$;\\n    }\\n\\n    public void setAlloyStoreObjectReference$(String reference)\\n    {\\n        this.alloyStoreObjectReference$ = reference;\\n    }\\n\\n    private static long getClassSize$()\\n    {\\n        return 116L;\\n    }\\n\\n    public long getInstanceSize$()\\n    {\\n        long size = GraphFetch_Node0_Person_Impl.getClassSize$();\\n        if (this.name != null)\\n        {\\n            size = size + this.name.length();\\n        }\\n        if (this.setId$ != null)\\n        {\\n            size = size + this.setId$.length();\\n        }\\n        if (this.alloyStoreObjectReference$ != null)\\n        {\\n            size = size + this.alloyStoreObjectReference$.length();\\n        }\\n        return size;\\n    }\\n}\"},{\"name\":\"Specifics\",\"package\":\"_pure.plan.root.n1.localGraph\",\"source\":\"package _pure.plan.root.n1.localGraph;\\n\\nimport java.lang.reflect.Method;\\nimport java.sql.JDBCType;\\nimport java.sql.ResultSet;\\nimport java.sql.ResultSetMetaData;\\nimport java.sql.Types;\\nimport java.util.*;\\nimport java.util.function.*;\\nimport java.util.stream.*;\\nimport org.eclipse.collections.api.tuple.Pair;\\nimport org.eclipse.collections.impl.tuple.Tuples;\\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\\nimport org.finos.legend.engine.plan.dependencies.store.shared.IConstantResult;\\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\\n\\nclass Specifics\\n{\\n    private static final List<Integer> STRING_TYPES = Arrays.asList(Types.CHAR, Types.VARCHAR, Types.LONGVARCHAR, Types.NCHAR, Types.NVARCHAR, Types.LONGNVARCHAR, Types.OTHER, Types.NULL);\\n    private static final List<Integer> INT_TYPES = Arrays.asList(Types.TINYINT, Types.SMALLINT, Types.INTEGER, Types.BIGINT, Types.NULL);\\n    private static final List<Integer> FLOAT_TYPES = Arrays.asList(Types.REAL, Types.FLOAT, Types.DOUBLE, Types.DECIMAL, Types.NUMERIC, Types.NULL);\\n    private static final List<Integer> DECIMAL_TYPES = Arrays.asList(Types.DECIMAL, Types.NUMERIC, Types.NULL);\\n    private static final List<Integer> BOOL_TYPES = Arrays.asList(Types.BIT, Types.BOOLEAN, Types.NULL);\\n    private static final List<Integer> STRICT_DATE_TYPES = Arrays.asList(Types.DATE, Types.NULL);\\n    private static final List<Integer> DATE_TIME_TYPES = Arrays.asList(Types.TIMESTAMP, Types.NULL);\\n    private ResultSet resultSet;\\n    private String databaseTimeZone;\\n    private String databaseConnection;\\n    private List<Integer> columnTypes;\\n    private List<List<Integer>> propertyIndices;\\n    private List<List<Supplier<Object>>> propertyGetters;\\n    private Calendar calendar;\\n    private Method parentPropertyAdder;\\n    private Method parentEdgePointPropertyAdder;\\n\\n    private Object getAlloyNativeValueFromResultSet(ResultSet resultSet,\\n                                                    int columnIndex,\\n                                                    int columnType)\\n    {\\n        try\\n        {\\n            Object result = null;\\n            switch (columnType)\\n            {\\n                case Types.DATE:\\n                {\\n                    java.sql.Date date = resultSet.getDate(columnIndex);\\n                    if (date != null)\\n                    {\\n                        result = PureDate.fromSQLDate(date);\\n                    }\\n                    break;\\n                }\\n                case Types.TIMESTAMP:\\n                {\\n                    java.sql.Timestamp timestamp = resultSet.getTimestamp(columnIndex, this.calendar);\\n                    if (timestamp != null)\\n                    {\\n                        result = PureDate.fromSQLTimestamp(timestamp);\\n                    }\\n                    break;\\n                }\\n                case Types.TINYINT:\\n                case Types.SMALLINT:\\n                case Types.INTEGER:\\n                case Types.BIGINT:\\n                {\\n                    long num = resultSet.getLong(columnIndex);\\n                    if (!resultSet.wasNull())\\n                    {\\n                        result = Long.valueOf(num);\\n                    }\\n                    break;\\n                }\\n                case Types.REAL:\\n                case Types.FLOAT:\\n                case Types.DOUBLE:\\n                {\\n                    double num = resultSet.getDouble(columnIndex);\\n                    if (!resultSet.wasNull())\\n                    {\\n                        result = Double.valueOf(num);\\n                    }\\n                    break;\\n                }\\n                case Types.DECIMAL:\\n                case Types.NUMERIC:\\n                {\\n                    result = resultSet.getBigDecimal(columnIndex);\\n                    break;\\n                }\\n                case Types.CHAR:\\n                case Types.VARCHAR:\\n                case Types.LONGVARCHAR:\\n                case Types.NCHAR:\\n                case Types.NVARCHAR:\\n                case Types.LONGNVARCHAR:\\n                case Types.OTHER:\\n                {\\n                    result = resultSet.getString(columnIndex);\\n                    break;\\n                }\\n                case Types.BIT:\\n                case Types.BOOLEAN:\\n                {\\n                    boolean bool = resultSet.getBoolean(columnIndex);\\n                    if (!resultSet.wasNull())\\n                    {\\n                        result = Boolean.valueOf(bool);\\n                    }\\n                    break;\\n                }\\n                case Types.BINARY:\\n                case Types.VARBINARY:\\n                case Types.LONGVARBINARY:\\n                {\\n                    byte[] bytes = resultSet.getBytes(columnIndex);\\n                    if (bytes != null)\\n                    {\\n                        result = this.encodeHex(bytes);\\n                    }\\n                    break;\\n                }\\n                case Types.NULL:\\n                {\\n                    // do nothing: value is already assigned to null\\n                    break;\\n                }\\n                default:\\n                {\\n                    result = resultSet.getObject(columnIndex);\\n                }\\n            }\\n            return result;}\\n        catch (Exception e)\\n        {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n\\n    private String encodeHex(byte[] data)\\n    {\\n        final char[] DIGITS_LOWER = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\\n        final int l = data.length;\\n        final char[] out = new char[l << 1];\\n        for (int i = 0, j = 0; i < l; i++)\\n        {\\n            out[j++] = DIGITS_LOWER[(0xF0 & data[i]) >>> 4];\\n            out[j++] = DIGITS_LOWER[0x0F & data[i]];\\n        }\\n        return new String(out);\\n    }\\n\\n    private Supplier<Object> getResultSetPropertyGetterForStringProperty(ResultSet resultSet,\\n                                                                         int columnIndex,\\n                                                                         int columnType,\\n                                                                         String propertyName)\\n    {\\n        if (STRING_TYPES.contains(columnType))\\n        {\\n           return () -> {\\n                try\\n                {\\n                    return resultSet.getString(columnIndex);\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        else\\n        {\\n            throw new RuntimeException(\\\"Error reading in property '\\\" + propertyName + \\\"' of type String from SQL column of type '\\\" + JDBCType.valueOf(columnType) + \\\"'.\\\");\\n        }\\n    }\\n\\n    private Supplier<Object> getResultSetPropertyGetterForIntegerProperty(ResultSet resultSet,\\n                                                                          int columnIndex,\\n                                                                          int columnType,\\n                                                                          String propertyName)\\n    {\\n        if (INT_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    Long res = null;\\n                    long r = resultSet.getLong(columnIndex);\\n                    if (!resultSet.wasNull())\\n                    {\\n                        res = Long.valueOf(r);\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        throw new RuntimeException(\\\"Error reading in property '\\\" + propertyName + \\\"' of type Integer from SQL column of type '\\\" + JDBCType.valueOf(columnType) + \\\"'.\\\");\\n    }\\n\\n    private Supplier<Object> getResultSetPropertyGetterForFloatProperty(ResultSet resultSet,\\n                                                                        int columnIndex,\\n                                                                        int columnType,\\n                                                                        String propertyName)\\n    {\\n        if (FLOAT_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    Double res = null;\\n                    double r = resultSet.getDouble(columnIndex);\\n                    if (!resultSet.wasNull())\\n                    {\\n                        res = Double.valueOf(r);\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        if (INT_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    Double res = null;\\n                    long r = resultSet.getLong(columnIndex);\\n                    if (!resultSet.wasNull())\\n                    {\\n                        res = Double.valueOf(r);\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        throw new RuntimeException(\\\"Error reading in property '\\\" + propertyName + \\\"' of type Float from SQL column of type '\\\" + JDBCType.valueOf(columnType) + \\\"'.\\\");\\n    }\\n\\n    private Supplier<Object> getResultSetPropertyGetterForDecimalProperty(ResultSet resultSet,\\n                                                                          int columnIndex,\\n                                                                          int columnType,\\n                                                                          String propertyName)\\n    {\\n        if (DECIMAL_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    return resultSet.getBigDecimal(columnIndex);\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        if (FLOAT_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    java.math.BigDecimal res = null;\\n                    double r = resultSet.getDouble(columnIndex);\\n                    if (!resultSet.wasNull())\\n                    {\\n                        res = java.math.BigDecimal.valueOf(r);\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        if (INT_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    java.math.BigDecimal res = null;\\n                    long r = resultSet.getLong(columnIndex);\\n                    if (!resultSet.wasNull())\\n                    {\\n                        res = java.math.BigDecimal.valueOf(r);\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        throw new RuntimeException(\\\"Error reading in property '\\\" + propertyName + \\\"' of type Decimal from SQL column of type '\\\" + JDBCType.valueOf(columnType) + \\\"'.\\\");\\n    }\\n\\n    private Supplier<Object> getResultSetPropertyGetterForBooleanProperty(ResultSet resultSet,\\n                                                                          int columnIndex,\\n                                                                          int columnType,\\n                                                                          String propertyName)\\n    {\\n        if (BOOL_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    Boolean res = null;\\n                    boolean r = resultSet.getBoolean(columnIndex);\\n                    if (!resultSet.wasNull())\\n                    {\\n                        res = Boolean.valueOf(r);\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        if (STRING_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    Boolean res = null;\\n                    String r = resultSet.getString(columnIndex);\\n                    if (!resultSet.wasNull())\\n                    {\\n                        res = Boolean.valueOf(r);\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        if (INT_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    Boolean res = null;\\n                    long r = resultSet.getLong(columnIndex);\\n                    if (!resultSet.wasNull())\\n                    {\\n                        res = Boolean.valueOf(r == 1);\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        throw new RuntimeException(\\\"Error reading in property '\\\" + propertyName + \\\"' of type Boolean from SQL column of type '\\\" + JDBCType.valueOf(columnType) + \\\"'.\\\");\\n    }\\n\\n    private Supplier<Object> getResultSetPropertyGetterForStrictDateProperty(ResultSet resultSet,\\n                                                                             int columnIndex,\\n                                                                             int columnType,\\n                                                                             String propertyName)\\n    {\\n        if (STRICT_DATE_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    PureDate res = null;\\n                    java.sql.Date r = resultSet.getDate(columnIndex);\\n                    if (r != null)\\n                    {\\n                        res = PureDate.fromSQLDate(r);\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        if (STRING_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    PureDate res = null;\\n                    String r = resultSet.getString(columnIndex);\\n                    if (r != null)\\n                    {\\n                        try\\n                        {\\n                            res = PureDate.parsePureDate(r);\\n                        }\\n                        catch (java.lang.IllegalArgumentException dateTimeParseException)\\n                        {\\n                            res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\\n                        }\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        throw new RuntimeException(\\\"Error reading in property '\\\" + propertyName + \\\"' of type StrictDate from SQL column of type '\\\" + JDBCType.valueOf(columnType) + \\\"'.\\\");\\n    }\\n\\n    private Supplier<Object> getResultSetPropertyGetterForDateTimeProperty(ResultSet resultSet,\\n                                                                           int columnIndex,\\n                                                                           int columnType,\\n                                                                           String propertyName)\\n    {\\n        if (DATE_TIME_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    PureDate res = null;\\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\\n                    if (r != null)\\n                    {\\n                        res = PureDate.fromSQLTimestamp(r);\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        if (STRING_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    PureDate res = null;\\n                    String r = resultSet.getString(columnIndex);\\n                    if (r != null)\\n                    {\\n                        try\\n                        {\\n                            res = PureDate.parsePureDate(r);\\n                        }\\n                        catch (java.lang.IllegalArgumentException dateTimeParseException)\\n                        {\\n                            res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\\n                        }\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        throw new RuntimeException(\\\"Error reading in property '\\\" + propertyName + \\\"' of type DateTime from SQL column of type '\\\" + JDBCType.valueOf(columnType) + \\\"'.\\\");\\n    }\\n\\n    private Supplier<Object> getResultSetPropertyGetterForDateProperty(ResultSet resultSet,\\n                                                                       int columnIndex,\\n                                                                       int columnType,\\n                                                                       String propertyName)\\n    {\\n        if (STRICT_DATE_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    PureDate res = null;\\n                    java.sql.Date r = resultSet.getDate(columnIndex);\\n                    if (r != null)\\n                    {\\n                        res = PureDate.fromSQLDate(r);\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        if (DATE_TIME_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    PureDate res = null;\\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\\n                    if (r != null)\\n                    {\\n                        res = PureDate.fromSQLTimestamp(r);\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        if (STRING_TYPES.contains(columnType))\\n        {\\n            return () -> {\\n                try\\n                {\\n                    PureDate res = null;\\n                    String r = resultSet.getString(columnIndex);\\n                    if (r != null)\\n                    {\\n                        try\\n                        {\\n                            res = PureDate.parsePureDate(r);\\n                        }\\n                        catch (java.lang.IllegalArgumentException dateTimeParseException1)\\n                        {\\n                            try\\n                            {\\n                                res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\\n                            }\\n                            catch (java.time.format.DateTimeParseException dateTimeParseException2)\\n                            {\\n                                res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\\n                            }\\n                        }\\n                    }\\n                    return res;\\n                }\\n                catch (Exception e)\\n                {\\n                    throw new RuntimeException(e);\\n                }\\n            };\\n        }\\n        throw new RuntimeException(\\\"Error reading in property '\\\" + propertyName + \\\"' of type Date from SQL column of type '\\\" + JDBCType.valueOf(columnType) + \\\"'.\\\");\\n    }\\n\\n    void prepare(ResultSet resultSet, String databaseTimeZone, String databaseConnection)\\n    {\\n        try\\n        {\\n            this.resultSet = resultSet;\\n            this.databaseTimeZone = databaseTimeZone;\\n            this.databaseConnection = databaseConnection;\\n            this.calendar = new GregorianCalendar(TimeZone.getTimeZone(this.databaseTimeZone));\\n            ResultSetMetaData resultSetMetaData = this.resultSet.getMetaData();\\n            int columnCount = resultSetMetaData.getColumnCount();\\n            this.columnTypes = new ArrayList<Integer>();\\n            List<String> columnNames = new ArrayList<String>();\\n            for (int i = 1; i <= columnCount; i++)\\n            {\\n                String columnLabel = resultSetMetaData.getColumnLabel(i);\\n                columnNames.add(columnLabel.startsWith(\\\"\\\\\\\"\\\") && columnLabel\\n                                           .endsWith(\\\"\\\\\\\"\\\")\\n                                           ? columnLabel.substring(1, columnLabel.length() - 1)\\n                                                        .toUpperCase()\\n                                           : columnLabel.toUpperCase());\\n                this.columnTypes.add(resultSetMetaData.getColumnType(i));\\n            }\\n            this.propertyIndices = new ArrayList<List<Integer>>();\\n            List<Integer> index_0 = new ArrayList<Integer>();\\n            index_0.add(columnNames.indexOf(\\\"NAME\\\") + 1);\\n            index_0.add(columnNames.indexOf(\\\"AGE\\\") + 1);\\n            index_0.add(columnNames.indexOf(\\\"PK_0\\\") + 1);\\n            this.propertyIndices.add(index_0);\\n            GraphFetch_Node0_Person_Impl.databaseConnection$ = databaseConnection;\\n            this.propertyGetters = new ArrayList<List<Supplier<Object>>>();\\n            int propertyIndex;\\n            Supplier<Object> propertyGetter = null;\\n            List<Supplier<Object>> propertyGetter_0 = new ArrayList<Supplier<Object>>();\\n            propertyIndex = this.propertyIndices.get(0).get(0);\\n            propertyGetter = this.getResultSetPropertyGetterForStringProperty(this.resultSet,\\n                                                                              propertyIndex,\\n                                                                              resultSetMetaData.getColumnType(propertyIndex),\\n                                                                              \\\"name\\\");\\n            propertyGetter_0.add(propertyGetter);\\n            propertyIndex = this.propertyIndices.get(0).get(1);\\n            propertyGetter = this.getResultSetPropertyGetterForIntegerProperty(this.resultSet,\\n                                                                               propertyIndex,\\n                                                                               resultSetMetaData.getColumnType(propertyIndex),\\n                                                                               \\\"age\\\");\\n            propertyGetter_0.add(propertyGetter);\\n            this.propertyGetters.add(propertyGetter_0);\\n        }\\n        catch (RuntimeException e)\\n        {\\n            throw e;\\n        }\\n        catch (Exception e)\\n        {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n\\n    IGraphInstance<? extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject> nextGraphInstance()\\n    {\\n        try\\n        {\\n            final GraphFetch_Node0_Person_Impl object = new GraphFetch_Node0_Person_Impl();\\n            object.setSetId$(\\\"meta_dataquality_Person\\\");\\n            int pkColIndex;\\n            int propertyIndex;\\n            pkColIndex = this.propertyIndices.get(0).get(2);\\n            Object pk$_0 = this.getAlloyNativeValueFromResultSet(resultSet,\\n                                                                 pkColIndex,\\n                                                                 this.columnTypes.get(pkColIndex - 1));\\n            object.setPk$_0(pk$_0);\\n            propertyIndex = this.propertyIndices.get(0).get(0);\\n            {\\n                String res = (String) this.propertyGetters.get(0).get(0).get();\\n                if (res == null)\\n                {\\n                    throw new RuntimeException(\\\"Error reading in property 'name'. Property of multiplicity [1] can not be null\\\");\\n                }\\n                object.setName(res);\\n            }\\n            propertyIndex = this.propertyIndices.get(0).get(1);\\n            {\\n                Long res = (Long) this.propertyGetters.get(0).get(1).get();\\n                if (res == null)\\n                {\\n                    throw new RuntimeException(\\\"Error reading in property 'age'. Property of multiplicity [1] can not be null\\\");\\n                }\\n                object.setAge(res);\\n            }\\n            return new IGraphInstance<GraphFetch_Node0_Person_Impl>()\\n            {\\n                public GraphFetch_Node0_Person_Impl getValue()\\n                {\\n                    return object;\\n                }\\n                public long instanceSize()\\n                {\\n                    return object.getInstanceSize$();\\n                }\\n            };\\n        }\\n        catch (RuntimeException e)\\n        {\\n            throw e;\\n        }\\n        catch (Exception e)\\n        {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n\\n    List<Method> primaryKeyGetters()\\n    {\\n        try\\n        {\\n            return Arrays.asList(GraphFetch_Node0_Person_Impl.class.getMethod(\\\"getPk$_0\\\"));\\n        }\\n        catch (Exception e)\\n        {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n\\n    List<Pair<String, String>> allInstanceSetImplementations()\\n    {\\n        return Arrays.asList(Tuples.pair(\\\"meta::dataquality::dataqualitymappings\\\",\\n                                         \\\"meta_dataquality_Person\\\"));\\n    }\\n\\n    List<String> primaryKeyColumns(int setIndex)\\n    {\\n        if (setIndex == 0)\\n        {\\n            return Arrays.asList(\\\"pk_0\\\");\\n        }\\n        return null;\\n    }\\n}\"}]},\"rootExecutionNode\":{\"_type\":\"platform\",\"authDependent\":false,\"executionNodes\":[{\"_type\":\"storeMappingGlobalGraphFetchExecutionNode\",\"authDependent\":false,\"checked\":true,\"enableConstraints\":true,\"executionNodes\":[],\"graphFetchTree\":{\"_type\":\"rootGraphFetchTree\",\"_type\":\"rootGraphFetchTree\",\"class\":\"meta::dataquality::Person\",\"subTrees\":[{\"_type\":\"propertyGraphFetchTree\",\"_type\":\"propertyGraphFetchTree\",\"parameters\":[],\"property\":\"name\",\"subTrees\":[],\"subTypeTrees\":[]},{\"_type\":\"propertyGraphFetchTree\",\"_type\":\"propertyGraphFetchTree\",\"parameters\":[],\"property\":\"age\",\"subTrees\":[],\"subTypeTrees\":[]}],\"subTypeTrees\":[]},\"localGraphFetchExecutionNode\":{\"_type\":\"relationalRootQueryTempTableGraphFetch\",\"authDependent\":false,\"checked\":true,\"columns\":[{\"dataType\":\"INTEGER\",\"label\":\"pk_0\"}],\"executionNodes\":[{\"_type\":\"sql\",\"authDependent\":false,\"connection\":{\"_type\":\"RelationalDatabaseConnection\",\"authenticationStrategy\":{\"_type\":\"h2Default\"},\"datasourceSpecification\":{\"_type\":\"h2Local\"},\"element\":\"\",\"postProcessorWithParameter\":[],\"postProcessors\":[],\"type\":\"H2\"},\"executionNodes\":[],\"resultColumns\":[{\"dataType\":\"INTEGER\",\"label\":\"\\\"pk_0\\\"\"},{\"dataType\":\"VARCHAR(200)\",\"label\":\"\\\"name\\\"\"},{\"dataType\":\"INTEGER\",\"label\":\"\\\"age\\\"\"}],\"resultType\":{\"_type\":\"dataType\",\"dataType\":\"meta::pure::metamodel::type::Any\"},\"sqlComment\":\"-- \\\"executionTraceID\\\" : \\\"${execID}\\\"\",\"sqlQuery\":\"select \\\"root\\\".ID as \\\"pk_0\\\", \\\"root\\\".FIRSTNAME as \\\"name\\\", \\\"root\\\".AGE as \\\"age\\\" from personTable as \\\"root\\\" where \\\"root\\\".FIRSTNAME = 'John' and not \\\"root\\\".AGE >= 18\"}],\"graphFetchTree\":{\"_type\":\"rootGraphFetchTree\",\"_type\":\"rootGraphFetchTree\",\"class\":\"meta::dataquality::Person\",\"subTrees\":[{\"_type\":\"propertyGraphFetchTree\",\"_type\":\"propertyGraphFetchTree\",\"parameters\":[],\"property\":\"name\",\"subTrees\":[],\"subTypeTrees\":[]},{\"_type\":\"propertyGraphFetchTree\",\"_type\":\"propertyGraphFetchTree\",\"parameters\":[],\"property\":\"age\",\"subTrees\":[],\"subTypeTrees\":[]}],\"subTypeTrees\":[]},\"implementation\":{\"_type\":\"java\",\"executionClassFullName\":\"_pure.plan.root.n1.localGraph.Execute\"},\"nodeIndex\":0,\"processedTempTableName\":\"temp_table_node_0\",\"resultType\":{\"_type\":\"partialClass\",\"class\":\"meta::dataquality::Person\",\"propertiesWithParameters\":[{\"property\":\"name\"},{\"property\":\"age\"}],\"setImplementations\":[{\"class\":\"meta::dataquality::Person\",\"id\":\"meta_dataquality_Person\",\"mapping\":\"meta::dataquality::dataqualitymappings\",\"propertyMappings\":[{\"enumMapping\":{},\"property\":\"name\",\"type\":\"String\"},{\"enumMapping\":{},\"property\":\"age\",\"type\":\"Integer\"}]}]},\"tempTableName\":\"temp_table_node_0\"},\"localTreeIndices\":[0,1,2],\"resultSizeRange\":{\"lowerBound\":0},\"resultType\":{\"_type\":\"partialClass\",\"class\":\"meta::dataquality::Person\",\"propertiesWithParameters\":[{\"property\":\"name\"},{\"property\":\"age\"}],\"setImplementations\":[{\"class\":\"meta::dataquality::Person\",\"id\":\"meta_dataquality_Person\",\"mapping\":\"meta::dataquality::dataqualitymappings\",\"propertyMappings\":[{\"enumMapping\":{},\"property\":\"name\",\"type\":\"String\"},{\"enumMapping\":{},\"property\":\"age\",\"type\":\"Integer\"}]}]},\"store\":\"meta::dataquality::db\"}],\"implementation\":{\"_type\":\"java\",\"executionClassFullName\":\"_pure.plan.root.Serialize\"},\"pure\":{\"_type\":\"func\",\"fControl\":\"serialize_T_MANY__RootGraphFetchTree_1__String_1_\",\"function\":\"serialize\",\"parameters\":[{\"_type\":\"collection\",\"multiplicity\":{\"lowerBound\":0},\"values\":[]},{\"_type\":\"classInstance\",\"type\":\"rootGraphFetchTree\",\"value\":{\"_type\":\"rootGraphFetchTree\",\"class\":\"meta::dataquality::Person\",\"subTrees\":[{\"_type\":\"propertyGraphFetchTree\",\"_type\":\"propertyGraphFetchTree\",\"parameters\":[],\"property\":\"name\",\"subTrees\":[],\"subTypeTrees\":[]},{\"_type\":\"propertyGraphFetchTree\",\"_type\":\"propertyGraphFetchTree\",\"parameters\":[],\"property\":\"age\",\"subTrees\":[],\"subTypeTrees\":[]}],\"subTypeTrees\":[]}}]},\"resultType\":{\"_type\":\"dataType\",\"dataType\":\"String\"}},\"serializer\":{\"name\":\"pure\",\"version\":\"vX_X_X\"},\"templateFunctions\":[\"<#function renderCollection collection separator prefix suffix replacementMap defaultValue><#if collection?size == 0><#return defaultValue></#if><#assign newCollection = collection><#list replacementMap as oldValue, newValue>   <#assign newCollection = collection?map(ele -> ele?replace(oldValue, newValue))></#list><#return prefix + newCollection?join(suffix + separator + prefix) + suffix></#function>\",\"<#function collectionSize collection> <#return collection?size?c> </#function>\",\"<#function optionalVarPlaceHolderOperationSelector optionalParameter trueClause falseClause><#if optionalParameter?has_content || optionalParameter?is_string><#return trueClause><#else><#return falseClause></#if></#function>\",\"<#function varPlaceHolderToString optionalParameter prefix suffix replacementMap defaultValue><#if optionalParameter?is_enumerable && !optionalParameter?has_content><#return defaultValue><#else><#assign newParam = optionalParameter><#list replacementMap as oldValue, newValue>   <#assign newParam = newParam?replace(oldValue, newValue)></#list><#return prefix + newParam + suffix></#if></#function>\",\"<#function equalEnumOperationSelector enumVal inDyna equalDyna><#assign enumList = enumVal?split(\\\",\\\")><#if enumList?size = 1><#return equalDyna><#else><#return inDyna></#if></#function>\"]}",
    "format": "json",
    "path": "dataQualityValidationExecutionPlan.json"
  }
]