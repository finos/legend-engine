import meta::pure::graphFetch::execution::*;
import meta::external::dataquality::tests::*;
import meta::external::dataquality::tests::domain::*;

function <<test.Test>> meta::external::dataquality::tests::testLambdaGenerationMultipleConstraints():Boolean[1]
{
  doTest('$[' +
    '      meta::external::dataquality::tests::domain::Person<mustBeOfLegalAge,validNameLength,ageMustBePositive>{' +
    '        name,' +
    '        addresses{' +
    '         addressId' +
    '        }' +
    '      }' +
    '    ]$', {|Person.all()
                ->filter(x|(!(($x.age >= 0)) || (!(($x.age >= 18)) || !(($x.name->length() < 1000)))))
                ->graphFetchChecked(#{
                  Person {
                    addresses {
                      addressId
                    },
                    age,
                    name
                  }
                }#)->serialize(#{
                  Person {
                    addresses {
                      addressId
                    },
                    age,
                    name
                  }
                }#)
    }, true, false)
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGenerationNonTemporalToBusinessTemporal():Boolean[1]
{
  doTest('$[' +
    '      meta::external::dataquality::tests::domain::NonTemporal{' +
    '        name,' +
    '        businessTemporal{' +
    '         name' +
    '        }' +
    '      }' +
    '    ]$', {businessDate:Date[1] | meta::external::dataquality::tests::domain::NonTemporal.all()
                ->graphFetchChecked(#{
                  NonTemporal {
                    name,
                    businessTemporal($businessDate) {
                      name
                    }
                  }
                }#)->serialize(#{
                  NonTemporal {
                    name,
                    businessTemporal($businessDate) {
                      name
                    }
                  }
                }#)
    })
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGenerationNonTemporalToProcessingTemporal():Boolean[1]
{
  doTest('$[' +
    '      meta::external::dataquality::tests::domain::NonTemporal{' +
    '        name,' +
    '        processingTemporal{' +
    '         name' +
    '        }' +
    '      }' +
    '    ]$', {processingDate:Date[1] | meta::external::dataquality::tests::domain::NonTemporal.all()
                ->graphFetchChecked(#{
                  NonTemporal {
                    name,
                    processingTemporal($processingDate) {
                      name
                    }
                  }
                }#)->serialize(#{
                  NonTemporal {
                    name,
                    processingTemporal($processingDate) {
                      name
                    }
                  }
                }#)
    })
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGenerationNonTemporalToBusinessAndProcessingTemporal():Boolean[1]
{
  doTest('$[' +
    '      meta::external::dataquality::tests::domain::NonTemporal{' +
    '        name,' +
    '        processingTemporal{' +
    '         name' +
    '        },' +
    '        businessTemporal{' +
    '         name' +
    '        }' +    
    '      }' +
    '    ]$', {processingDate:Date[1], businessDate:Date[1] | meta::external::dataquality::tests::domain::NonTemporal.all()
                ->graphFetchChecked(#{
                  NonTemporal {
                    name,
                    processingTemporal($processingDate) {
                      name
                    },
                    businessTemporal($businessDate) {
                      name
                    }                    
                  }
                }#)->serialize(#{
                  NonTemporal {
                    name,
                    processingTemporal($processingDate) {
                      name
                    },
                    businessTemporal($businessDate) {
                      name
                    }                        
                  }
                }#)
    })
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGenerationNonTemporalToBiTemporal():Boolean[1]
{
  doTest('$[' +
    '      meta::external::dataquality::tests::domain::NonTemporal{' +
    '        name,' +
    '        biTemporal{' +
    '         name' +
    '        }' +   
    '      }' +
    '    ]$', {processingDate:Date[1], businessDate:Date[1] | meta::external::dataquality::tests::domain::NonTemporal.all()
                ->graphFetchChecked(#{
                  NonTemporal {
                    name,
                    biTemporal($processingDate, $businessDate) {
                      name
                    }                 
                  }
                }#)->serialize(#{
                  NonTemporal {
                    name,
                    biTemporal($processingDate, $businessDate) {
                      name
                    }                     
                  }
                }#)
    })
}

function <<test.Test>> meta::external::dataquality::tests::testMetadata():Boolean[1]
{
  let dq = meta::external::dataquality::tests::loadDataQuality('$[' +
    '      meta::external::dataquality::tests::domain::NonTemporal<nameLength>{' +
    '        name,' +
    '        biTemporal{' +
    '         name' +
    '        }' +   
    '      }' +
    '    ]$');


    let metadata = meta::external::dataquality::generateDQMetaDataForDQValidation($dq);
    
    //TODO assert on structure.
    assert($metadata->isNotEmpty());
}