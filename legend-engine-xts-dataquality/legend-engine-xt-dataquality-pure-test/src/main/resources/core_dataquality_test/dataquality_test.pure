import meta::pure::precisePrimitives::*;
import meta::pure::functions::string::generation::*;
import meta::pure::graphFetch::execution::*;
import meta::external::dataquality::tests::*;
import meta::external::dataquality::tests::domain::*;

function <<test.Test>> meta::external::dataquality::tests::testLambdaGenerationMultipleConstraints():Boolean[1]
{
  doTest('$[' +
    '      meta::external::dataquality::tests::domain::Person<mustBeOfLegalAge,validNameLength,ageMustBePositive>{' +
    '        name,' +
    '        addresses{' +
    '         addressId' +
    '        }' +
    '      }' +
    '    ]$', {|Person.all()
                ->filter(x|(!(($x.age >= 0)) || (!(($x.age >= 18)) || !(($x.name->length() < 1000)))))
                ->graphFetchChecked(#{
                  Person {
                    addresses {
                      addressId
                    },
                    age,
                    name
                  }
                }#)->serialize(#{
                  Person {
                    addresses {
                      addressId
                    },
                    age,
                    name
                  }
                }#)
    }, true, false)
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGenerationNonTemporalToBusinessTemporal():Boolean[1]
{
  doTest('$[' +
    '      meta::external::dataquality::tests::domain::NonTemporal{' +
    '        name,' +
    '        businessTemporal{' +
    '         name' +
    '        }' +
    '      }' +
    '    ]$', {businessDate:Date[1] | meta::external::dataquality::tests::domain::NonTemporal.all()
                ->graphFetchChecked(#{
                  NonTemporal {
                    name,
                    businessTemporal($businessDate) {
                      name
                    }
                  }
                }#)->serialize(#{
                  NonTemporal {
                    name,
                    businessTemporal($businessDate) {
                      name
                    }
                  }
                }#)
    })
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGenerationNonTemporalToProcessingTemporal():Boolean[1]
{
  doTest('$[' +
    '      meta::external::dataquality::tests::domain::NonTemporal{' +
    '        name,' +
    '        processingTemporal{' +
    '         name' +
    '        }' +
    '      }' +
    '    ]$', {processingDate:Date[1] | meta::external::dataquality::tests::domain::NonTemporal.all()
                ->graphFetchChecked(#{
                  NonTemporal {
                    name,
                    processingTemporal($processingDate) {
                      name
                    }
                  }
                }#)->serialize(#{
                  NonTemporal {
                    name,
                    processingTemporal($processingDate) {
                      name
                    }
                  }
                }#)
    })
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGenerationNonTemporalToBusinessAndProcessingTemporal():Boolean[1]
{
  doTest('$[' +
    '      meta::external::dataquality::tests::domain::NonTemporal{' +
    '        name,' +
    '        processingTemporal{' +
    '         name' +
    '        },' +
    '        businessTemporal{' +
    '         name' +
    '        }' +    
    '      }' +
    '    ]$', {processingDate:Date[1], businessDate:Date[1] | meta::external::dataquality::tests::domain::NonTemporal.all()
                ->graphFetchChecked(#{
                  NonTemporal {
                    name,
                    processingTemporal($processingDate) {
                      name
                    },
                    businessTemporal($businessDate) {
                      name
                    }                    
                  }
                }#)->serialize(#{
                  NonTemporal {
                    name,
                    processingTemporal($processingDate) {
                      name
                    },
                    businessTemporal($businessDate) {
                      name
                    }                        
                  }
                }#)
    })
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGenerationNonTemporalToBiTemporal():Boolean[1]
{
  doTest('$[' +
    '      meta::external::dataquality::tests::domain::NonTemporal{' +
    '        name,' +
    '        biTemporal{' +
    '         name' +
    '        }' +   
    '      }' +
    '    ]$', {processingDate:Date[1], businessDate:Date[1] | meta::external::dataquality::tests::domain::NonTemporal.all()
                ->graphFetchChecked(#{
                  NonTemporal {
                    name,
                    biTemporal($processingDate, $businessDate) {
                      name
                    }                 
                  }
                }#)->serialize(#{
                  NonTemporal {
                    name,
                    biTemporal($processingDate, $businessDate) {
                      name
                    }                     
                  }
                }#)
    })
}

function <<test.Test>> meta::external::dataquality::tests::testMetadata():Boolean[1]
{
  let dq = meta::external::dataquality::tests::loadDataQuality('$[' +
    '      meta::external::dataquality::tests::domain::NonTemporal<nameLength>{' +
    '        name,' +
    '        biTemporal{' +
    '         name' +
    '        }' +   
    '      }' +
    '    ]$');


    let metadata = meta::external::dataquality::generateDQMetaDataForDQValidation($dq);
    
    //TODO assert on structure.
    assert($metadata->isNotEmpty());
}

// ----------------------- row level tests for backward compatibility ---------------------------------------------------------------------------------------------------
function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidation_row_level():Boolean[1]
{
  doRelationTest(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->extend(~fullname:x|[$x.FIRSTNAME->toOne(), $x.LASTNAME->toOne()]->joinStrings())->from(meta::external::dataquality::tests::domain::DataQualityRuntime);' +
    '        validations: [' +
    '          {' +
    '             name: \'validFirstName\';' +
    '             description: \'first name should not be empty\';' +
    '             assertion: row2|$row2.FIRSTNAME->isNotEmpty();' +
    '             type: ROW_LEVEL;' +
    '          }' +
    '         ];' +
    '      }',
    'validFirstName',
    {|#>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->extend(~fullname:x|[$x.FIRSTNAME->meta::pure::functions::multiplicity::toOne(), $x.LASTNAME->meta::pure::functions::multiplicity::toOne()]->joinStrings())
                                                    ->filter(row2|$row2.FIRSTNAME->meta::pure::functions::collection::isNotEmpty()->meta::pure::functions::boolean::not())
                                                    ->extend(~DQ_LOGICAL_DEFECT_ID: row | meta::pure::functions::hash::hash(if($row.FIRSTNAME->isEmpty(), | '', |$row.FIRSTNAME->toOne()->toString()) + if($row.LASTNAME->isEmpty(), | '', |$row.LASTNAME->toOne()->toString()) + if($row.fullname->isEmpty(), | '', |$row.fullname->toOne()->toString()), meta::pure::functions::hash::HashType.MD5))
                                                    ->extend(~DQ_DEFECT_ID: row | generateGuid())
                                                    ->extend(~DQ_RULE_NAME: row | 'validFirstName')},
    'meta::external::dataquality::tests::domain::DataQualityRuntime'
    )
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidation_row_levelWithFromAndCasting():Boolean[1]
{
  //we currently have the assertion as string as the pure compiler is not inferring varchar size correctly
  let expected = '|#>{meta::external::dataquality::tests::domain::db.personTable}#' + 
                      '->meta::pure::functions::relation::select(~[FIRSTNAME,LASTNAME])' + 
                      '->meta::pure::functions::relation::extend(~fullname:x: (FIRSTNAME:meta::pure::precisePrimitives::Varchar(200), LASTNAME:meta::pure::precisePrimitives::Varchar(200))[1]|[$x.FIRSTNAME->meta::pure::functions::multiplicity::toOne(), $x.LASTNAME->meta::pure::functions::multiplicity::toOne()]->meta::pure::functions::string::joinStrings())' + 
                      '->meta::pure::functions::relation::filter(row2: (FIRSTNAME:meta::pure::precisePrimitives::Varchar(200), LASTNAME:meta::pure::precisePrimitives::Varchar(200), fullname:String)[1]|$row2.FIRSTNAME->meta::pure::functions::collection::isNotEmpty()->meta::pure::functions::boolean::not())' + 
                      '->meta::pure::functions::relation::extend(~DQ_LOGICAL_DEFECT_ID:row: (FIRSTNAME:meta::pure::precisePrimitives::Varchar(200), LASTNAME:meta::pure::precisePrimitives::Varchar(200), fullname:String)[1]|meta::pure::functions::hash::hash($row.FIRSTNAME->meta::pure::functions::collection::isEmpty()->meta::pure::functions::lang::if(|\'\', |$row.FIRSTNAME->meta::pure::functions::multiplicity::toOne()->meta::pure::functions::string::toString()) + $row.LASTNAME->meta::pure::functions::collection::isEmpty()->meta::pure::functions::lang::if(|\'\', |$row.LASTNAME->meta::pure::functions::multiplicity::toOne()->meta::pure::functions::string::toString()) + $row.fullname->meta::pure::functions::collection::isEmpty()->meta::pure::functions::lang::if(|\'\', |$row.fullname->meta::pure::functions::multiplicity::toOne()->meta::pure::functions::string::toString()), meta::pure::functions::hash::HashType.MD5)->meta::pure::functions::lang::cast(@meta::pure::precisePrimitives::Varchar(32)))' + 
                      '->meta::pure::functions::relation::extend(~DQ_DEFECT_ID:row: (FIRSTNAME:meta::pure::precisePrimitives::Varchar(200), LASTNAME:meta::pure::precisePrimitives::Varchar(200), fullname:String, DQ_LOGICAL_DEFECT_ID:meta::pure::precisePrimitives::Varchar(32))[1]|meta::pure::functions::string::generation::generateGuid()->meta::pure::functions::lang::cast(@meta::pure::precisePrimitives::Varchar(36)))' + 
                      '->meta::pure::functions::relation::extend(~DQ_RULE_NAME:row: (FIRSTNAME:meta::pure::precisePrimitives::Varchar(200), LASTNAME:meta::pure::precisePrimitives::Varchar(200), fullname:String, DQ_LOGICAL_DEFECT_ID:meta::pure::precisePrimitives::Varchar(32), DQ_DEFECT_ID:meta::pure::precisePrimitives::Varchar(36))[1]|\'validFirstName\'->meta::pure::functions::lang::cast(@meta::pure::precisePrimitives::Varchar(255)))';


  doRelationTest(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->extend(~fullname:x|[$x.FIRSTNAME->toOne(), $x.LASTNAME->toOne()]->joinStrings())->from(meta::external::dataquality::tests::domain::DataQualityRuntime);' +
    '        validations: [' +
    '          {' +
    '             name: \'validFirstName\';' +
    '             description: \'first name should not be empty\';' +
    '             assertion: row2|$row2.FIRSTNAME->isNotEmpty();' +
    '             type: ROW_LEVEL;' +
    '          }' +
    '         ];' +
    '      }',
    'validFirstName',
    $expected,
    'meta::external::dataquality::tests::domain::DataQualityRuntime', true, true
    );
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_parameterized_relationValidation_row_level():Boolean[1]
{
  doRelationTest(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: name:String[1] | #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~FIRSTNAME)->filter(n|$n == $name)->groupBy(~[FIRSTNAME], ~[count: x | $x.FIRSTNAME : y | $y->count()])->from(meta::external::dataquality::tests::domain::DataQualityRuntime);' +
    '        validations: [' +
    '          {' +
    '             name: \'validFirstName\';' +
    '             description: \'first name should not exceed 100 chars\';' +
    '             assertion: row2|$row2.FIRSTNAME->size() <= 100;' +
    '             type: ROW_LEVEL;' +
    '          }' +
    '         ];' +
    '      }',
    'validFirstName',
    {name:String[1]|#>{meta::external::dataquality::tests::domain::db.personTable}#->select(~FIRSTNAME)->filter({n|($n == $name)})->groupBy(~[FIRSTNAME], ~[count:{x|$x.FIRSTNAME}:{y|$y->meta::pure::functions::collection::count()}])
                                                    ->filter(row2|meta::pure::functions::boolean::not(($row2.FIRSTNAME->meta::pure::functions::collection::size() <= 100)))
                                                    ->extend(~DQ_LOGICAL_DEFECT_ID: row | meta::pure::functions::hash::hash(if($row.FIRSTNAME->isEmpty(), | '', |$row.FIRSTNAME->toOne()->toString()) + if($row.count->isEmpty(), | '', |$row.count->toOne()->toString()),  meta::pure::functions::hash::HashType.MD5))
                                                    ->extend(~DQ_DEFECT_ID: row | generateGuid())
                                                    ->extend(~DQ_RULE_NAME: row | 'validFirstName')},
    'meta::external::dataquality::tests::domain::DataQualityRuntime'                                                  
    )
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidation_withLimit_row_level():Boolean[1]
{
  doRelationTestWithLimit(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->extend(~fullname:x|[$x.FIRSTNAME->toOne(), $x.LASTNAME->toOne()]->joinStrings())->from(meta::external::dataquality::tests::domain::DataQualityRuntime);' +
    '        validations: [' +
    '          {' +
    '             name: \'validFirstName\';' +
    '             description: \'first name should not be empty\';' +
    '             assertion: row2|$row2.FIRSTNAME->isNotEmpty();' +
    '             type: ROW_LEVEL;' +
    '          }' +
    '         ];' +
    '      }',
    'validFirstName',
    {|#>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->extend(~fullname:x|[$x.FIRSTNAME->meta::pure::functions::multiplicity::toOne(), $x.LASTNAME->meta::pure::functions::multiplicity::toOne()]->joinStrings())
                   ->filter(row2|$row2.FIRSTNAME->meta::pure::functions::collection::isNotEmpty()->meta::pure::functions::boolean::not())
                   ->extend(~DQ_LOGICAL_DEFECT_ID: row | meta::pure::functions::hash::hash(if($row.FIRSTNAME->isEmpty(), | '', |$row.FIRSTNAME->toOne()->toString()) + if($row.LASTNAME->isEmpty(), | '', |$row.LASTNAME->toOne()->toString()) + if($row.fullname->isEmpty(), | '', |$row.fullname->toOne()->toString()), meta::pure::functions::hash::HashType.MD5))
                   ->extend(~DQ_DEFECT_ID: row | generateGuid())
                   ->extend(~DQ_RULE_NAME: row | 'validFirstName')
                   ->take(100)},
    100,
    'meta::external::dataquality::tests::domain::DataQualityRuntime'
    )
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_main_query_row_count_row_level():Boolean[1]
{
  doRelationRowCountTest(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->extend(~fullname:x|[$x.FIRSTNAME->toOne(), $x.LASTNAME->toOne()]->joinStrings())->from(meta::external::dataquality::tests::domain::DataQualityRuntime);' +
    '        validations: [' +
    '          {' +
    '             name: \'validFirstName\';' +
    '             description: \'first name should not be empty\';' +
    '             assertion: row2|$row2.FIRSTNAME->isNotEmpty();' +
    '             type: ROW_LEVEL;' +
    '          }' +
    '         ];' +
    '      }',
    'validFirstName',
    {|#>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->extend(~fullname:x|[$x.FIRSTNAME->toOne(), $x.LASTNAME->toOne()]->joinStrings())->meta::pure::functions::relation::size()},
    'meta::external::dataquality::tests::domain::DataQualityRuntime'        
    );
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidation_row_level_withoutDQColumns():Boolean[1]
{
  doRelationTestWithoutDQColumns(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->extend(~fullname:x|[$x.FIRSTNAME->toOne(), $x.LASTNAME->toOne()]->joinStrings())->from(meta::external::dataquality::tests::domain::DataQualityRuntime);' +
    '        validations: [' +
    '          {' +
    '             name: \'validFirstName\';' +
    '             description: \'first name should not be empty\';' +
    '             assertion: row2|$row2.FIRSTNAME->isNotEmpty();' +
    '             type: ROW_LEVEL;' +
    '          }' +
    '         ];' +
    '      }',
    'validFirstName',
    {|#>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->extend(~fullname:x|[$x.FIRSTNAME->meta::pure::functions::multiplicity::toOne(), $x.LASTNAME->meta::pure::functions::multiplicity::toOne()]->joinStrings())
                                                    ->filter(row2|$row2.FIRSTNAME->meta::pure::functions::collection::isNotEmpty()->meta::pure::functions::boolean::not())
                                                    },
    'meta::external::dataquality::tests::domain::DataQualityRuntime'
    )
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidation_row_level_all_validations():Boolean[1]
{
  doRelationTestWithoutDQColumns(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->extend(~fullname:x|[$x.FIRSTNAME->toOne(), $x.LASTNAME->toOne()]->joinStrings())->from(meta::external::dataquality::tests::domain::DataQualityRuntime);' +
    '        validations: [' +
    '          {' +
    '             name: \'validFirstName\';' +
    '             description: \'first name should not be empty\';' +
    '             assertion: row2|$row2.FIRSTNAME->isNotEmpty();' +
    '             type: ROW_LEVEL;' +
    '          },' +
    '          {' +
    '             name: \'validLastName\';' +
    '             description: \'last name should not be empty\';' +
    '             assertion: row2|$row2.LASTNAME->isNotEmpty();' +
    '             type: ROW_LEVEL;' +
    '          }' +    
    '         ];' +
    '      }',
    [],
    {|#>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->extend(~fullname:x|[$x.FIRSTNAME->meta::pure::functions::multiplicity::toOne(), $x.LASTNAME->meta::pure::functions::multiplicity::toOne()]->joinStrings())
                                                    ->filter(row2|$row2.LASTNAME->meta::pure::functions::collection::isNotEmpty()->meta::pure::functions::boolean::not())->concatenate(
      #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->extend(~fullname:x|[$x.FIRSTNAME->meta::pure::functions::multiplicity::toOne(), $x.LASTNAME->meta::pure::functions::multiplicity::toOne()]->joinStrings())
                                                    ->filter(row2|$row2.FIRSTNAME->meta::pure::functions::collection::isNotEmpty()->meta::pure::functions::boolean::not()))
                                                    },
    'meta::external::dataquality::tests::domain::DataQualityRuntime'
    )
}
// --------------------------------------   row level tests for backward compatibility end ------------------------------------------------------------------------------------------------


function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidationwithAssertRelationNotEmpty():Boolean[1]
{
  doRelationTest(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->from(meta::external::dataquality::tests::domain::DataQualityRuntime);' +
    '        validations: [' +
    '          {' +
    '             name: \'nonEmptyDataset\';' +
    '             description: \'dataset should not be empty\';' +
    '             assertion: rel|$rel->meta::external::dataquality::assertRelationNotEmpty();' +
    '          }' +
    '         ];' +
    '      }',
          'nonEmptyDataset',
          {|{rel: meta::pure::metamodel::relation::Relation<(FIRSTNAME:meta::pure::precisePrimitives::Varchar(200), LASTNAME:meta::pure::precisePrimitives::Varchar(200))>[1] |
                    $rel->aggregate(~COUNT : x | 1 : y | $y->count())->filter(row|$row.COUNT == 0)
                        ->extend(~DQ_LOGICAL_DEFECT_ID: row | meta::pure::functions::hash::hash(if($row.COUNT->isEmpty(), | '', |$row.COUNT->toOne()->toString()), meta::pure::functions::hash::HashType.MD5))
                        ->extend(~DQ_DEFECT_ID: row | generateGuid())
                        ->extend(~DQ_RULE_NAME: row | 'nonEmptyDataset')
            }
            ->meta::pure::functions::lang::eval(#>{meta::external::dataquality::tests::domain::db.personTable}#->meta::pure::functions::relation::select(~[FIRSTNAME,LASTNAME]));},
            'meta::external::dataquality::tests::domain::DataQualityRuntime'        
    );
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidation_withParametersInAssertion():Boolean[1]
{
  doRelationTest(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: {firstName:String[1], age:Integer[1] | #>{meta::external::dataquality::tests::domain::db.personTable}#->filter(row|$row.AGE >= $age)->select(~[FIRSTNAME, LASTNAME])->from(meta::external::dataquality::tests::domain::DataQualityRuntime)};' +
    '        validations: [' +
    '          {' +
    '             name: \'invalidFirstName\';' +
    '             description: \'invalid first name\';' +
    '             assertion: {firstName:String[1], rel|$rel->filter(row|$row.FIRSTNAME==$firstName)->meta::external::dataquality::assertRelationEmpty(~[FIRSTNAME,LASTNAME])};' +
    '          }' +
    '         ];' +
    '      }',
          'invalidFirstName',
          {firstName:String[1], age:Integer[1] | 
                {rel: meta::pure::metamodel::relation::Relation<(FIRSTNAME:meta::pure::precisePrimitives::Varchar(200), LASTNAME:meta::pure::precisePrimitives::Varchar(200))>[1] |
                    $rel->filter(row|$row.FIRSTNAME==$firstName)->select(~[FIRSTNAME,LASTNAME])->extend(~DQ_LOGICAL_DEFECT_ID: row | meta::pure::functions::hash::hash(if($row.FIRSTNAME->isEmpty(), | '', |$row.FIRSTNAME->toOne()->toString()) + if($row.LASTNAME->isEmpty(), | '', |$row.LASTNAME->toOne()->toString()), meta::pure::functions::hash::HashType.MD5))
                        ->extend(~DQ_DEFECT_ID: row | generateGuid())
                        ->extend(~DQ_RULE_NAME: row | 'invalidFirstName')
            }
            ->meta::pure::functions::lang::eval(#>{meta::external::dataquality::tests::domain::db.personTable}#->filter(row|$row.AGE >= $age)->meta::pure::functions::relation::select(~[FIRSTNAME,LASTNAME]));},
          'meta::external::dataquality::tests::domain::DataQualityRuntime'        
    );
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidation_withLimit():Boolean[1]
{
  doRelationTestWithLimit(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME, AGE])->from(meta::external::dataquality::tests::domain::DataQualityRuntime);' +
    '        validations: [' +
    '          {' +
    '             name: \'firstNameMissing\';' +
    '             description: \'First name should not be empty\';' +
    '             assertion: rel|$rel->filter(row|$row.FIRSTNAME->isEmpty())->meta::external::dataquality::assertRelationEmpty(~[FIRSTNAME,LASTNAME,AGE]);' +
    '          }' +
    '         ];' +
    '      }',
          'firstNameMissing',
          {|{rel: meta::pure::metamodel::relation::Relation<(FIRSTNAME:meta::pure::precisePrimitives::Varchar(200), LASTNAME:meta::pure::precisePrimitives::Varchar(200), AGE:meta::pure::precisePrimitives::Int)>[1] |
                  $rel->filter(row|$row.FIRSTNAME->isEmpty())
                    ->select(~[FIRSTNAME,LASTNAME,AGE])
                    ->extend(~DQ_LOGICAL_DEFECT_ID: row | meta::pure::functions::hash::hash(if($row.FIRSTNAME->isEmpty(), | '', |$row.FIRSTNAME->toOne()->toString()) + if($row.LASTNAME->isEmpty(), | '', |$row.LASTNAME->toOne()->toString()) + if($row.AGE->isEmpty(), | '', |$row.AGE->toOne()->toString()), meta::pure::functions::hash::HashType.MD5))
                    ->extend(~DQ_DEFECT_ID: row | generateGuid())
                    ->extend(~DQ_RULE_NAME: row | 'firstNameMissing')}
                  ->meta::pure::functions::lang::eval(#>{meta::external::dataquality::tests::domain::db.personTable}#->meta::pure::functions::relation::select(~[FIRSTNAME,LASTNAME,AGE])
                    ->meta::pure::functions::relation::limit(100));},
          100,
          'meta::external::dataquality::tests::domain::DataQualityRuntime'
    );

}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidation_withLimit_and_parametersInAssertion():Boolean[1]
{
    doRelationTestWithLimit(
      '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: {age:Integer[1] | #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME, AGE])->from(meta::external::dataquality::tests::domain::DataQualityRuntime)};' +
    '        validations: [' +
    '          {' +
    '             name: \'invalidAge\';' +
    '             description: \'Age is invalid\';' +
    '             assertion: {age:Integer[1], rel|$rel->filter(row|$row.AGE >= $age)->meta::external::dataquality::assertRelationEmpty(~[FIRSTNAME,AGE])};' +
    '          }' +
    '         ];' +
    '      }',
          'invalidAge',
          {age:Integer[1]|{rel: meta::pure::metamodel::relation::Relation<(FIRSTNAME:meta::pure::precisePrimitives::Varchar(200), LASTNAME:meta::pure::precisePrimitives::Varchar(200), AGE:meta::pure::precisePrimitives::Int)>[1] |
                  $rel->filter(row| $row.AGE >= $age)
                    ->select(~[FIRSTNAME,AGE])
                    ->extend(~DQ_LOGICAL_DEFECT_ID: row | meta::pure::functions::hash::hash(if($row.FIRSTNAME->isEmpty(), | '', |$row.FIRSTNAME->toOne()->toString()) + if($row.AGE->isEmpty(), | '', |$row.AGE->toOne()->toString()), meta::pure::functions::hash::HashType.MD5))
                    ->extend(~DQ_DEFECT_ID: row | generateGuid())
                    ->extend(~DQ_RULE_NAME: row | 'invalidAge')}
                  ->meta::pure::functions::lang::eval(#>{meta::external::dataquality::tests::domain::db.personTable}#->meta::pure::functions::relation::select(~[FIRSTNAME,LASTNAME,AGE])
                    ->meta::pure::functions::relation::limit(100));},
          100,
          'meta::external::dataquality::tests::domain::DataQualityRuntime'
    );

}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidation_single_column():Boolean[1]
{
  doRelationTest(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->from(meta::external::dataquality::tests::domain::DataQualityRuntime);' +
    '        validations: [' +
    '          {' +
    '             name: \'invalidFirstName\';' +
    '             description: \'first name is not valid\';' +
    '             assertion: rel|$rel->filter(row|$row.FIRSTNAME == \'invalid\')->meta::external::dataquality::assertRelationEmpty(~[FIRSTNAME]);' +
    '             type: AGGREGATE;' +
    '          }' +
    '         ];' +
    '      }',
          'invalidFirstName',
          {|{rel: meta::pure::metamodel::relation::Relation<(FIRSTNAME:meta::pure::precisePrimitives::Varchar(200),LASTNAME:meta::pure::precisePrimitives::Varchar(200))>[1] |
                $rel->filter(row|$row.FIRSTNAME == 'invalid')
                    ->select(~[FIRSTNAME])
                    ->extend(~DQ_LOGICAL_DEFECT_ID: row | meta::pure::functions::hash::hash(if($row.FIRSTNAME->isEmpty(), | '', |$row.FIRSTNAME->toOne()->toString()), meta::pure::functions::hash::HashType.MD5))
                    ->extend(~DQ_DEFECT_ID: row | generateGuid())
                    ->extend(~DQ_RULE_NAME: row | 'invalidFirstName')}
                ->meta::pure::functions::lang::eval(#>{meta::external::dataquality::tests::domain::db.personTable}#->meta::pure::functions::relation::select(~[FIRSTNAME,LASTNAME]));},
          'meta::external::dataquality::tests::domain::DataQualityRuntime'        
    )
}


function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidationwithAssertRelationNotEmpty_withoutDQColumns():Boolean[1]
{
  doRelationTestWithoutDQColumns(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->from(meta::external::dataquality::tests::domain::DataQualityRuntime);' +
    '        validations: [' +
    '          {' +
    '             name: \'nonEmptyDataset\';' +
    '             description: \'dataset should not be empty\';' +
    '             assertion: rel|$rel->meta::external::dataquality::assertRelationNotEmpty();' +
    '          },' +
    '          {' +
    '             name: \'nameNotEmpty\';' +
    '             description: \'dataset should have name\';' +
    '             assertion: rel|$rel->meta::external::dataquality::assertRelationEmpty(~[FIRSTNAME,LASTNAME]);' +
    '          }' +    
    '         ];' +
    '      }',
          'nonEmptyDataset',
          {|{rel: meta::pure::metamodel::relation::Relation<(FIRSTNAME:meta::pure::precisePrimitives::Varchar(200), LASTNAME:meta::pure::precisePrimitives::Varchar(200))>[1] |
                    $rel->aggregate(~COUNT : x | 1 : y | $y->count())->filter(row|$row.COUNT == 0)
            }
            ->meta::pure::functions::lang::eval(#>{meta::external::dataquality::tests::domain::db.personTable}#->meta::pure::functions::relation::select(~[FIRSTNAME,LASTNAME]));},
            'meta::external::dataquality::tests::domain::DataQualityRuntime'        
    );
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidation_withParametersInAssertion_withoutDQColumns():Boolean[1]
{
  doRelationTestWithoutDQColumns(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: {firstName:String[1], age:Integer[1] | #>{meta::external::dataquality::tests::domain::db.personTable}#->filter(row|$row.AGE >= $age)->select(~[FIRSTNAME, LASTNAME])->from(meta::external::dataquality::tests::domain::DataQualityRuntime)};' +
    '        validations: [' +
    '          {' +
    '             name: \'invalidFirstName\';' +
    '             description: \'invalid first name\';' +
    '             assertion: {firstName:String[1], rel|$rel->filter(row|$row.FIRSTNAME==$firstName)->meta::external::dataquality::assertRelationEmpty(~[FIRSTNAME,LASTNAME])};' +
    '          }' +
    '         ];' +
    '      }',
          'invalidFirstName',
          {firstName:String[1], age:Integer[1] | 
                {rel: meta::pure::metamodel::relation::Relation<(FIRSTNAME:meta::pure::precisePrimitives::Varchar(200), LASTNAME:meta::pure::precisePrimitives::Varchar(200))>[1] |
                    $rel->filter(row|$row.FIRSTNAME==$firstName)->select(~[FIRSTNAME,LASTNAME])
            }
            ->meta::pure::functions::lang::eval(#>{meta::external::dataquality::tests::domain::db.personTable}#->filter(row|$row.AGE >= $age)->meta::pure::functions::relation::select(~[FIRSTNAME,LASTNAME]));},
          'meta::external::dataquality::tests::domain::DataQualityRuntime'        
    );
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidation_some_validations():Boolean[1]
{
  doRelationTest(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->from(meta::external::dataquality::tests::domain::DataQualityRuntime);' +
    '        validations: [' +
    '          {' +
    '             name: \'notEmpty\';' +
    '             description: \'data is not empty\';' +
    '             assertion: rel|$rel->meta::external::dataquality::assertRelationNotEmpty();' +
    '          },' +
    '          {' +
    '             name: \'invalidFirstName\';' +
    '             description: \'first name is not valid\';' +
    '             assertion: rel|$rel->filter(row|$row.FIRSTNAME == \'invalid\')->meta::external::dataquality::assertRelationEmpty(~[FIRSTNAME]);' +
    '          },' +
    '          {' +
    '             name: \'invalidLastName\';' +
    '             description: \'last name is not valid\';' +
    '             assertion: rel|$rel->filter(row|$row.LASTNAME == \'invalid\')->meta::external::dataquality::assertRelationEmpty(~[FIRSTNAME,LASTNAME]);' +
    '             type: AGGREGATE;' +
    '          }' +        
    '         ];' +
    '      }',
          ['notEmpty', 'invalidFirstName'],
          {|{rel: meta::pure::metamodel::relation::Relation<(FIRSTNAME:meta::pure::precisePrimitives::Varchar(200),LASTNAME:meta::pure::precisePrimitives::Varchar(200))>[1] |
                $rel->filter(row|$row.FIRSTNAME == 'invalid')
                    ->select(~[FIRSTNAME])
                    ->extend(~DQ_LOGICAL_DEFECT_ID: row | meta::pure::functions::hash::hash(if($row.FIRSTNAME->isEmpty(), | '', |$row.FIRSTNAME->toOne()->toString()), meta::pure::functions::hash::HashType.MD5))
                    ->extend(~DQ_DEFECT_ID: row | generateGuid())
                    ->extend(~DQ_RULE_NAME: row | 'invalidFirstName')}
                ->meta::pure::functions::lang::eval(#>{meta::external::dataquality::tests::domain::db.personTable}#->meta::pure::functions::relation::select(~[FIRSTNAME,LASTNAME]))->concatenate(
            {rel: meta::pure::metamodel::relation::Relation<(FIRSTNAME:meta::pure::precisePrimitives::Varchar(200),LASTNAME:meta::pure::precisePrimitives::Varchar(200))>[1] |
                $rel->aggregate(~COUNT : x | 1 : y | $y->count())->filter(row|$row.COUNT == 0)
                    ->extend(~DQ_LOGICAL_DEFECT_ID: row | meta::pure::functions::hash::hash(if($row.COUNT->isEmpty(), | '', |$row.COUNT->toOne()->toString()), meta::pure::functions::hash::HashType.MD5))
                    ->extend(~DQ_DEFECT_ID: row | generateGuid())
                    ->extend(~DQ_RULE_NAME: row | 'notEmpty')}
                ->meta::pure::functions::lang::eval(#>{meta::external::dataquality::tests::domain::db.personTable}#->meta::pure::functions::relation::select(~[FIRSTNAME,LASTNAME])));},
          'meta::external::dataquality::tests::domain::DataQualityRuntime'        
    )
}

function <<test.Test>> meta::external::dataquality::tests::testLambdaGeneration_relationValidation_all_validations():Boolean[1]
{
  doRelationTest(
    '###DataQualityValidation' +
    '      DataQualityRelationValidation meta::external::dataquality::tests::domain::RelationValidation' +
    '      {' +
    '        query: #>{meta::external::dataquality::tests::domain::db.personTable}#->select(~[FIRSTNAME, LASTNAME])->from(meta::external::dataquality::tests::domain::DataQualityRuntime);' +
    '        validations: [' +
    '          {' +
    '             name: \'notEmpty\';' +
    '             description: \'data is not empty\';' +
    '             assertion: rel|$rel->meta::external::dataquality::assertRelationNotEmpty();' +
    '          },' +
    '          {' +
    '             name: \'invalidFirstName\';' +
    '             description: \'first name is not valid\';' +
    '             assertion: rel|$rel->filter(row|$row.FIRSTNAME == \'invalid\')->meta::external::dataquality::assertRelationEmpty(~[FIRSTNAME]);' +
    '          },' +
    '          {' +
    '             name: \'invalidLastName\';' +
    '             description: \'last name is not valid\';' +
    '             assertion: rel|$rel->filter(row|$row.LASTNAME == \'invalid\')->meta::external::dataquality::assertRelationEmpty(~[FIRSTNAME,LASTNAME]);' +
    '             type: AGGREGATE;' +
    '          }' +        
    '         ];' +
    '      }',
          [],
          {|{rel: meta::pure::metamodel::relation::Relation<(FIRSTNAME:meta::pure::precisePrimitives::Varchar(200),LASTNAME:meta::pure::precisePrimitives::Varchar(200))>[1] |
                $rel->filter(row|$row.LASTNAME == 'invalid')
                    ->select(~[FIRSTNAME,LASTNAME])
                    ->extend(~DQ_LOGICAL_DEFECT_ID: row | meta::pure::functions::hash::hash(if($row.FIRSTNAME->isEmpty(), | '', |$row.FIRSTNAME->toOne()->toString()) + if($row.LASTNAME->isEmpty(), | '', |$row.LASTNAME->toOne()->toString()), meta::pure::functions::hash::HashType.MD5))
                    ->extend(~DQ_DEFECT_ID: row | generateGuid())
                    ->extend(~DQ_RULE_NAME: row | 'invalidLastName')}
                ->meta::pure::functions::lang::eval(#>{meta::external::dataquality::tests::domain::db.personTable}#->meta::pure::functions::relation::select(~[FIRSTNAME,LASTNAME]))->concatenate(
            {rel: meta::pure::metamodel::relation::Relation<(FIRSTNAME:meta::pure::precisePrimitives::Varchar(200),LASTNAME:meta::pure::precisePrimitives::Varchar(200))>[1] |
                $rel->filter(row|$row.FIRSTNAME == 'invalid')
                    ->select(~[FIRSTNAME])
                    ->extend(~DQ_LOGICAL_DEFECT_ID: row | meta::pure::functions::hash::hash(if($row.FIRSTNAME->isEmpty(), | '', |$row.FIRSTNAME->toOne()->toString()), meta::pure::functions::hash::HashType.MD5))
                    ->extend(~DQ_DEFECT_ID: row | generateGuid())
                    ->extend(~DQ_RULE_NAME: row | 'invalidFirstName')}
                ->meta::pure::functions::lang::eval(#>{meta::external::dataquality::tests::domain::db.personTable}#->meta::pure::functions::relation::select(~[FIRSTNAME,LASTNAME]))->concatenate(
            {rel: meta::pure::metamodel::relation::Relation<(FIRSTNAME:meta::pure::precisePrimitives::Varchar(200),LASTNAME:meta::pure::precisePrimitives::Varchar(200))>[1] |
                $rel->aggregate(~COUNT : x | 1 : y | $y->count())->filter(row|$row.COUNT == 0)
                    ->extend(~DQ_LOGICAL_DEFECT_ID: row | meta::pure::functions::hash::hash(if($row.COUNT->isEmpty(), | '', |$row.COUNT->toOne()->toString()), meta::pure::functions::hash::HashType.MD5))
                    ->extend(~DQ_DEFECT_ID: row | generateGuid())
                    ->extend(~DQ_RULE_NAME: row | 'notEmpty')}
                ->meta::pure::functions::lang::eval(#>{meta::external::dataquality::tests::domain::db.personTable}#->meta::pure::functions::relation::select(~[FIRSTNAME,LASTNAME]))));},
          'meta::external::dataquality::tests::domain::DataQualityRuntime'        
    )
}

function <<test.Test>> meta::external::dataquality::tests::testFromFunctionListIsComplete():Boolean[1]
{
  let funcs = meta::external::dataquality::fromFunctions();

  let actualFromFuncs = meta::pure::mapping.children->map(pe|$pe->match([
    f:Function<Any>[1]|if($f.functionName == 'from', | $f, | []), 
    a:Any[*]|[]
    ]));
     
  let missingFuncs = $actualFromFuncs
    ->removeAll($funcs)
    //TODO: Need to review for if these should be ignored, or if this module 
    //needs a depdenecy to the core_service module to be able to reference them 

    ->filter(pe|[
      'meta::pure::mapping::from_T_m__SingleExecutionParameters_1__T_m_', 
      'meta::pure::mapping::from_T_m__ExecutionEnvironmentInstance_1__T_m_'
      ]->contains($pe->elementToPath()) == false);

  assertEmpty($missingFuncs->map(pe|$pe->elementToPath()));
}
