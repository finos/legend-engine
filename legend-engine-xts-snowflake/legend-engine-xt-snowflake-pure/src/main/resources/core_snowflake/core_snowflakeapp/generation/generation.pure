import meta::relational::metamodel::*;
import meta::pure::metamodel::relation::*;
import meta::pure::runtime::*;
import meta::relational::runtime::*;
import meta::external::function::activator::snowflakeApp::generation::*;
import meta::relational::mapping::*;
import meta::pure::executionPlan::*;
import meta::analytics::lineage::*;

Class meta::external::function::activator::snowflakeApp::SnowFlakeAppExecutionContext extends FunctionActivatorExecutionContext 
{
}

Class meta::external::function::activator::snowflakeApp::generation::Artifact
{
  createQuery:String[1];
  grantStatement:String[0..1];
  utilDDLs:String[*];
  tables: String[*];
}

function meta::external::function::activator::snowflakeApp::generation::defaultDeploymentSchema():String[1]
{
  'LEGEND_NATIVE_APPS'
}

function meta::external::function::activator::snowflakeApp::generation::generateFullArtifact(s: meta::external::function::activator::snowflakeApp::SnowflakeApp[1], extensions:meta::pure::extension::Extension[*]):Artifact[1]
{
  let inputParamsStub = generateInputParamsStub($s.function, true);
  let deploymentSchema = if($s.deploymentSchema->isNotEmpty(),
                           | $s.deploymentSchema->toOne(),
                           | defaultDeploymentSchema()
                          );

  let context = ^meta::external::function::activator::snowflakeApp::SnowFlakeAppExecutionContext(postProcessor = [meta::relational::postProcessor::ReplaceFreeMarkerWithTableFunctionParamHolder_SQLQuery_1__PostProcessorResult_1_, meta::relational::postProcessor::HandleTimestampMismatch_SQLQuery_1__PostProcessorResult_1_]);
  let contextWithEnumPushDown = $context->meta::pure::executionPlan::featureFlag::addFlagToContext(meta::pure::executionPlan::features::Feature.PUSH_DOWN_ENUM_TRANSFORM);  

  let plan =  meta::pure::executionPlan::executionPlan($s.function->cast(@ConcreteFunctionDefinition<Any>), $contextWithEnumPushDown, $extensions, noDebug());
  let variables = $plan.rootExecutionNode.childNodes->filter(n| $n->instanceOf(ConstantExecutionNode) && $n->cast(@ConstantExecutionNode).values->type()==VariableDeclaration)->cast(@ConstantExecutionNode)->first().values->cast(@VariableDeclaration);
  let resultStub = if($s.function->functionReturnType().rawType==Relation,
      | let resultStub = relationGenerateResultTypeStub($s.function);,
      | let resultStub = generateResultTypeStub($plan.rootExecutionNode.resultType->cast(@TDSResultType), $extensions);
    );
  let generatedQueryNode = $plan.rootExecutionNode->allNodes($extensions)->filter(n|$n->instanceOf(SQLExecutionNode))->cast(@SQLExecutionNode)->filter(node|$node.sqlQuery->toLower()->startsWith('select'))->last()->toOne('candidate query not found');
  let usedTables =  $generatedQueryNode.metadata->filter(m| $m->instanceOf(TableInfo))->cast(@TableInfo)->toOne('No table info found').info->map(i|$i.schema+'.'+$i.table);
  if($variables->isEmpty(),
    |
      let query = 'CREATE OR REPLACE SECURE FUNCTION ${catalogSchemaName}.' + $deploymentSchema + '.' +$s.applicationName->toUpper() +'('+ $inputParamsStub + ') RETURNS TABLE ('+ $resultStub+ ') LANGUAGE SQL AS $$ '+ $generatedQueryNode.sqlQuery +' $$;';
      if($s.usageRole->isNotEmpty(),
        |let grant = 'GRANT USAGE ON FUNCTION %S.' + $deploymentSchema + '.'+ $s.applicationName->toUpper() + '(' + generateInputParamsStub($s.function, false) +  ') to role '+ $s.usageRole->toOne()->toUpper() +';' ; 
          ^Artifact(createQuery = $query, grantStatement = $grant, tables = $usedTables);,
        | ^Artifact(createQuery = $query, tables = $usedTables);
      );,
    |
      let procedure =  ^CreateProcedureSQL(
                          parameters =$inputParamsStub->replace('"',''),
                          return = $resultStub,
                          declarations = $variables,
                          schemaName = '${catalogSchemaName}.'+$deploymentSchema,
                          name = $s.applicationName,
                          generatedSQL= $generatedQueryNode.sqlQuery,
                          secure = true,
                          copyGrants = false
                        );
      let query = transformToString($procedure, $extensions);
      if($s.usageRole->isNotEmpty(),
        |let grant = 'GRANT USAGE ON PROCEDURE %S.' + $deploymentSchema + '.'+ $s.applicationName->toUpper()+ '(' + generateInputParamsStub($s.function, false) +  ') to role '+ $s.usageRole->toOne()->toUpper()+';' ; 
          ^Artifact(createQuery = $query, grantStatement = $grant, utilDDLs = utilFunction($deploymentSchema, $s.usageRole->toOne()), tables = $usedTables);,
        | ^Artifact(createQuery = $query, utilDDLs = utilFunction($deploymentSchema), tables = $usedTables);
      );
    );
}


function  meta::external::function::activator::snowflakeApp::generation::transformToString(element: CreateProcedureSQL[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
   let dbExtension = meta::relational::functions::sqlQueryToString::loadDbExtension(DatabaseType.Snowflake);
   let config = ^meta::relational::functions::sqlQueryToString::DbConfig(
        quoteIdentifiers = false,
        dbType=DatabaseType.Snowflake,
        dbExtension = $dbExtension
      );
  $dbExtension.ddlCommandsTranslator.createProcedure->toOne()->eval($element, $config, $extensions)->toOne();
}

function meta::external::function::activator::snowflakeApp::generation::generateArtifact(s: meta::external::function::activator::snowflakeApp::SnowflakeApp[1]):String[1]
{
  let extensions = meta::external::format::shared::externalFormatExtension()->concatenate(meta::relational::extension::relationalExtensions());
  meta::external::function::activator::snowflakeApp::generation::generateArtifact($s, $extensions);
}

function meta::external::function::activator::snowflakeApp::generation::generateFullArtifact(s: meta::external::function::activator::snowflakeApp::SnowflakeApp[1]):Artifact[1]
{
  let extensions = meta::external::format::shared::externalFormatExtension()->concatenate(meta::relational::extension::relationalExtensions());
  meta::external::function::activator::snowflakeApp::generation::generateFullArtifact($s, $extensions);
}

function  meta::external::function::activator::snowflakeApp::generation::generateArtifact(s: meta::external::function::activator::snowflakeApp::SnowflakeApp[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
  meta::external::function::activator::snowflakeApp::generation::generateFullArtifact($s, $extensions).createQuery;
  
}

function  meta::external::function::activator::snowflakeApp::generation::relationGenerateResultTypeStub(f:Function<Any>[1]):String[1]
{
  let dbExtension = meta::relational::functions::sqlQueryToString::loadDbExtension(DatabaseType.Snowflake);
  $f->functionReturnType().typeArguments.rawType->cast(@meta::pure::metamodel::relation::RelationType<Any>).classifierGenericType.typeArguments.rawType->cast(@meta::pure::metamodel::relation::RelationType<Any>).columns->map(c|
    let colName = $c.name->toOne()->toUpper();
    let returnArg = $c.classifierGenericType->toOne().typeArguments->at(1);
    let returnType = $dbExtension.dataTypeToSqlText->toOne()->eval($dbExtension.pureTypeToDatabaseTypeConverter->toOne()->eval($returnArg));
    '"' + $colName + '" ' + $returnType;
  )->joinStrings(', ');
}

function  meta::external::function::activator::snowflakeApp::generation::generateResultTypeStub(r: TDSResultType[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
  $r.tdsColumns->map(c|'"'+ $c.name->toUpper() + '" '+ 
                        pureTypeToSnowflakeTypeMatcher($c)) ->joinStrings(',');
}

function  meta::external::function::activator::snowflakeApp::generation::generateInputParamsStub(f:Function<Any>[1], includeParamName:Boolean[1]):String[1]
{  
  let params = $f->functionType().parameters->evaluateAndDeactivate();
    let typeMap = inputTypeMap();

     $params->map(p |
          let baseType = if($p.genericType.rawType->toOne()->instanceOf(Enumeration),
                       | 'VARCHAR',
                       | $typeMap->get($p.genericType.rawType->toOne())->toOne('Relational type missing for type: ' + $p.genericType.rawType->toOne()->toString())
          );
          let sqlType = if($p.multiplicity == PureOne,
                      | $baseType,
                      | 'ARRAY'
          );
          (if($includeParamName, | '"' + $p.name + '" ', | '') + $sqlType);
    )->joinStrings(',') ;
}


function <<access.private>>  meta::external::function::activator::snowflakeApp::generation::inputTypeMap():Map<PrimitiveType, String>[1]
{
  [
    pair(Integer, 'INTEGER'),
    pair(Float, 'FLOAT'),
    pair(Number, 'NUMBER'),
    pair(String, 'VARCHAR'),
    pair(Date, 'DATE'),
    pair(DateTime, 'TIMESTAMP'),
    pair(StrictDate, 'DATE'),
    pair(Boolean, 'BOOLEAN'),
    pair(Decimal, 'DECIMAL')
  ]->newMap()
}

function <<access.private>>  meta::external::function::activator::snowflakeApp::generation::returnTypeMap():Map<PrimitiveType, Function<{TDSColumn[1] ->String[1]}>>[1]
{
  [
    pair(Integer, {col:TDSColumn[1]|'INTEGER'}),
    pair(Float, {col:TDSColumn[1]| if($col.sourceDataType->isNotEmpty(),| $col->meta::external::function::activator::snowflakeApp::generation::matchDBType(),|'DECIMAL');}),
    pair(Number, {col:TDSColumn[1]|'NUMBER'}),
    pair(String, {col:TDSColumn[1]|'VARCHAR'}),
    pair(Date, {col:TDSColumn[1]|'DATE'}),
    pair(DateTime, {col:TDSColumn[1]|'TIMESTAMP'}),
    pair(StrictDate, {col:TDSColumn[1]|'DATE'}),
    pair(Boolean, {col:TDSColumn[1]|'BOOLEAN'}),
    pair(Decimal, {col:TDSColumn[1]| if($col.sourceDataType->isNotEmpty(),| $col->meta::external::function::activator::snowflakeApp::generation::matchDBType(),|'DECIMAL');})
  ]->newMap()
}

function <<access.private>>  meta::external::function::activator::snowflakeApp::generation::pureTypeToSnowflakeTypeMatcher(c:meta::pure::tds::TDSColumn[1]):String[1]
{
  let tdsTypeToRelationalTypeMap = returnTypeMap();
  if($c.type->isNotEmpty(),
    | 
     $tdsTypeToRelationalTypeMap->get($c.type->toOne())->toOne('Relational type missing for type: '+ $c.type->toOne()->toString())->eval($c);,
    | $c.sourceDataType->toOne('Source Data Type Missing for column: '+ +$c.name)
      ->match(
        [
          v:meta::relational::metamodel::datatype::Varchar[1] | 'VARCHAR',
          b:meta::relational::metamodel::datatype::Bit[1]|'BOOLEAN',
          all:meta::relational::metamodel::datatype::DataType[1]| $all->meta::relational::metamodel::datatype::dataTypeToSqlText()
        ])
  );
 
}

function <<access.private>>  meta::external::function::activator::snowflakeApp::generation::matchDBType(c:meta::pure::tds::TDSColumn[1]):String[1]
{
  $c.sourceDataType->toOne()->match(
        [
          v:meta::relational::metamodel::datatype::Varchar[1] | 'VARCHAR',
          b:meta::relational::metamodel::datatype::Bit[1]|'BOOLEAN',
          all:meta::relational::metamodel::datatype::DataType[1]| $all->meta::relational::metamodel::datatype::dataTypeToSqlText()
        ]);
}

function meta::external::function::activator::snowflakeApp::generation::computeLineage(s: meta::external::function::activator::snowflakeApp::SnowflakeApp[1], extensions:meta::pure::extension::Extension[*]): String[1]
{
  let fullAnalytics  = meta::external::function::activator::lineage::computeLineage($s.function, $extensions);
  meta::alloy::metadataServer::alloyToJSON($fullAnalytics);
}

function meta::external::function::activator::snowflakeApp::generation::utilFunction(schema:String[1]):String[*]
{
  'CREATE OR REPLACE FUNCTION ${catalogSchemaName}.'+ $schema + '.formatVector(data VARIANT)\n'+
  '   RETURNS object\n'+
  '   LANGUAGE JAVASCRIPT\n'+
  ' AS\n'+
  ' $$\n'+
  '   const result = {};\n'+
  '   DATA.forEach(item => {\n'+
  '               const storeData = result[item.storeName.toLowerCase()] ?? {};\n'+
  '               storeData[item.datasetName.toLowerCase()] = {lowBatch: item.lowBatch, highBatch: item.highBatch};\n'+
  '               result[item.storeName.toLowerCase()] = storeData;\n'+
                '});\n'+
  '   return result;\n'+
  ' $$;'
}

function meta::external::function::activator::snowflakeApp::generation::utilFunction(schema:String[1], usageRole:String[1]):String[*]
{
  utilFunction($schema)->concatenate('GRANT USAGE ON FUNCTION ${catalogSchemaName}.'+ $schema + '.formatVector(VARIANT) to role ' + $usageRole + ';' )
}