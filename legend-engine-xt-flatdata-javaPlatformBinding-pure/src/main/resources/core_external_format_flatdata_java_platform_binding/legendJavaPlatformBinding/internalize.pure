// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::flatdata::binding::validation::*;
import meta::external::format::flatdata::executionPlan::model::*;
import meta::external::format::flatdata::executionPlan::platformBinding::legendJava::*;
import meta::external::format::flatdata::executionPlan::platformBinding::legendJava::internalize::*;
import meta::external::format::flatdata::metamodel::*;

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::transform::*;

import meta::external::shared::format::binding::*;
import meta::external::shared::format::binding::validation::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::engine::*;
import meta::external::shared::format::executionPlan::platformBinding::legendJava::*;
import meta::external::shared::format::metamodel::*;

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::constraints::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::dataQuality::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::naming::*;
import meta::pure::executionPlan::platformBinding::typeInfo::*;

import meta::pure::extension::*;

import meta::pure::graphFetch::*;

import meta::pure::metamodel::serialization::grammar::*;


// ========================================================================================================================================================
// Descriptor 
// ========================================================================================================================================================

function meta::external::format::flatdata::executionPlan::platformBinding::legendJava::internalize::getExternalFormatInternalizeJavaBindingDescriptor(): ExternalFormatInternalizeBindingDescriptor[1]
{
  ^ExternalFormatInternalizeBindingDescriptor
  (
    internalizeGenerator  = {node:ExternalFormatInternalizeExecutionNode[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]| generateForInternalize($node, $path, $context, $debug)}
  );
}

// ========================================================================================================================================================
// Generate 
// ========================================================================================================================================================

Class <<access.private>> meta::external::format::flatdata::executionPlan::platformBinding::legendJava::internalize::SchemaPropertyDetails
{
   property          : AbstractProperty<Any>[1];
   fieldName         : String[1];
   stateFieldName    : String[1];
   sizeFieldName     : String[1];
   propType          : meta::pure::metamodel::type::Type[1];
   javaType          : meta::external::language::java::metamodel::Type[1];
   itemType          : meta::external::language::java::metamodel::Type[1];
   getterName        : String[1];
   adderName         : String[1];
   adderParam        : Code[1];
   finisherName      : String[1];
   
   name() {$this.property.name->toOne()}: String[1];
   isViaAssociation() {$this.property.owner->instanceOf(Association)}: Boolean[1];
}

function <<access.private>> meta::external::format::flatdata::executionPlan::platformBinding::legendJava::internalize::generateForInternalize(node:ExternalFormatInternalizeExecutionNode[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]): GeneratedCode[1]
{
   print(if($debug.debug,|$debug.space+'('+$path+') generate ExternalFormatInternalizeExecutionNode for FlatData \n', |''));

   let bindingDetail    = $context->nodeInfosForPath($path).data->toOne();
   assert($bindingDetail->instanceOf(FlatDataBindingDetail), | 'Detailed binding failed: ' + $bindingDetail->cast(@FailedBindingDetail).errorMessages->joinStrings('\n'));
   let pureClass        = $node.resultType.type->cast(@meta::pure::metamodel::type::Class<Any>)->toOne();
   let schemaClass      = $bindingDetail->cast(@FlatDataBindingDetail).schemaBindingDetail.class;
   let dependentClass   = $context.typeInfos->classDependenciesViaPropertiesWithSubTypes($pureClass)->filter(c | $c != $schemaClass);

   // it is safe to throw error as we don't allow checked queries on schema
   assert(!($schemaClass == $pureClass && $node.checked), |'Querying on schema class with checked functionality is not supported !!');

   let baseProject      = if($schemaClass == $pureClass,
                            | let mainClassProject = $pureClass->createSchemaDataClass($path, $context, ^ConstraintCheckingGenerationContext(enableConstraints=$node.enableConstraints, topLevelOnly=$node.tree->isEmpty(), graphFetchTree=$node.tree), $debug->indent());
                              let dependentProjects = $dependentClass->map(dc | $dc->createDataClassesProject($bindingDetail->cast(@FlatDataBindingDetail), $path, $context, ^ConstraintCheckingGenerationContext(enableConstraints=false, topLevelOnly=true), $debug->indent()));
                              $mainClassProject->concatenate($dependentProjects)->toOneMany()->mergeProjects();,
                            | let mainClassProject  = $pureClass->createDataClassesProject($bindingDetail->cast(@FlatDataBindingDetail), $path, $context, ^ConstraintCheckingGenerationContext(enableConstraints=$node.enableConstraints, topLevelOnly=$node.tree->isEmpty(), graphFetchTree=$node.tree), $debug->indent());
                              let dependentProjects = $dependentClass->map(dc | $dc->createDataClassesProject($bindingDetail->cast(@FlatDataBindingDetail), $path, $context, ^ConstraintCheckingGenerationContext(enableConstraints=false, topLevelOnly=true), $debug->indent()));
                              let schemaDataClass   = $schemaClass->map(c| $c->createSchemaDataClass($path, $context, ^ConstraintCheckingGenerationContext(enableConstraints=false, topLevelOnly=true), $debug->indent()));
                              $mainClassProject->concatenate($dependentProjects)->concatenate($schemaDataClass)->toOneMany()->mergeProjects();
                          );

   let specificsClass   = createInternalizeSpecificsClass($node, $bindingDetail->cast(@FlatDataBindingDetail), $path, $context);

   $baseProject
      ->addClasses($specificsClass)
      ->generatedCode($specificsClass);  
}

function <<access.private>> meta::external::format::flatdata::executionPlan::platformBinding::legendJava::internalize::createInternalizeSpecificsClass(node:ExternalFormatInternalizeExecutionNode[1], bindingDetail:FlatDataBindingDetail[1], path:String[1], context:GenerationContext[1]): meta::external::language::java::metamodel::Class[1]
{
   let rootClass               = $node.resultType.type->cast(@meta::pure::metamodel::type::Class<Any>)->toOne();
   let schemaSet               = $node.binding.schemaSet->toOne();

   let conventions             = $context.conventions;
   let rootInterface           = $conventions->className($rootClass);
   let contextType             = javaParameterizedType($conventions->className(_FlatDataContext), $rootInterface);
   let factoryType             = javaParameterizedType($conventions->className(_ParsedFlatDataToObject), $rootInterface);
   let flatData                = $schemaSet.schemas->at(0).detail->cast(@FlatData);
   let maximumSchemaObjectSize = javaField('private', javaLong(), 'maximumSchemaObjectSize', j_long(0));

   $context.conventions->planNodeClass('public', $path, 'FlatDataDeserializeSpecifics')
      ->implements(javaParameterizedType($conventions->className(_IFlatDataDeserializeExecutionNodeSpecifics), $rootInterface))
      ->addField($maximumSchemaObjectSize)
      ->addMethod({cls|
         let param = j_parameter(javaLong(), 'maximumSchemaObjectSize');
         
         javaMethod('public', javaVoid(), 'setMaximumSchemaObjectSize', $param, j_this($cls)->j_field($maximumSchemaObjectSize)->j_assign($param));
      })
      ->addSectionMethods($flatData, $bindingDetail, [], $conventions)
      ->addMethods({cls|
         $flatData.sections->filter(s| $s.recordType->isNotEmpty())->map({section|
            /*
             * It may seem odd that the factory accepts a recordType when the recordType is already known.
             * This happens because the implementation passed at runtime can include driver-specific 
             * optimizations so when creating objects we use the driver-supplied record type details
             * to interrogate the parsed data values.
             */
            let recordTypeParam      = j_parameter($conventions->className(_FlatDataRecordType), 'recordType');         
            let sectionBindingDetail = $bindingDetail.sectionBindingDetails->filter(sc| $sc.section == $section)->toOne();
            let dataClass            = $conventions->dataClass($sectionBindingDetail.class, $path);
            let classTypeInfo        = $context.typeInfos->forClass($sectionBindingDetail.class);
            
            let fields               = $section.recordType.fields->filter(f| $classTypeInfo.properties->contains($sectionBindingDetail->propertyForField($f)));
            let fieldVars            = createFieldVars($fields, $recordTypeParam, $conventions);

            let adderVars            = $fields->toIndexed()->map({indexedField|
               let property  = $sectionBindingDetail.details->filter(c| $c.field == $indexedField.second).property->toOne();
               let propType  = $property->functionReturnType().rawType->toOne();
               let adderType = if($propType->instanceOf(meta::pure::metamodel::type::Enumeration),
                                  | javaParameterizedType($conventions->className(_ExternalDataObjectAdder), [$dataClass, $conventions->className($propType)]),
                                  |
                               if($propType == String,
                                  | javaParameterizedType($conventions->className(_ExternalDataObjectAdder), [$dataClass, javaString()]),
                                  |
                               if($propType == Boolean,
                                  | javaParameterizedType($conventions->className(_ExternalDataBooleanAdder), $dataClass),
                                  |
                               if($propType == Integer,
                                  | javaParameterizedType($conventions->className(_ExternalDataLongAdder), $dataClass),
                                  | 
                               if($propType == Float,
                                  | javaParameterizedType($conventions->className(_ExternalDataDoubleAdder), $dataClass),
                                  | 
                               if($propType == Decimal,
                                  | javaParameterizedType($conventions->className(_ExternalDataObjectAdder), [$dataClass, javaBigDecimal()]),
                                  | 
                               if($propType == StrictDate || $propType == DateTime,
                                  | javaParameterizedType($conventions->className(_ExternalDataObjectAdder), [$dataClass, javaTemporal()]),
                                  | fail('Unknown type'); javaVoid();
                               )))))));
               
               let var       = j_variable($adderType, 'adder' + $indexedField.first->toString());                                                            
               let declare   = $var->j_declare($dataClass->j_invoke('_getAdderForProperty', j_string($property.name->toOne()), $conventions->className(_ExternalDataAdder))->j_cast($adderType));
               pair($var, $declare);
            });
            
            let factoryType    = javaParameterizedType($conventions->className(_ParsedFlatDataToObject), $dataClass);
            let parsedFlatData = j_parameter($conventions->className(_ParsedFlatData), 'parsedFlatData');
            let resultVar      = j_variable($dataClass, 'result');
            let defects        = j_variable(javaList($conventions->defectClass()), 'defects');
            
            let addClauses     = $fields->toIndexed()->map({indexedField|
               let fieldVar  = $fieldVars->at($indexedField.first).first;
               let adderVar  = $adderVars->at($indexedField.first).first;               
               let property  = $sectionBindingDetail.details->filter(c| $c.field == $indexedField.second).property->toOne();
               let propType  = $property->functionReturnType().rawType->toOne();
               
               let ex      = j_parameter(javaException(),'e');
               let defectOnException = {code: Code[1]|
                  j_try(
                     $code,
                     j_catch($ex,
                        $defects->j_invoke('add', $conventions->newClassStructureDefect($ex->j_invoke('getMessage', []), j_string($sectionBindingDetail.class->elementToPath())))
                     )
                  )
               };
               
               if($propType->instanceOf(meta::pure::metamodel::type::Enumeration),
                  {| 
                     let javaType = $conventions->className($propType);
                     let all      = j_variable(javaEnumSet($javaType), 'allVs');
                     let text     = j_variable(javaString(), 'text');
                     let var      = j_variable(javaList($javaType), 'vs');
                     let v        = j_parameter($javaType, 'v');

                     let vName      = $v->j_invoke('getName', [], javaString());
                     let vNameClean = $vName->j_invoke('replaceAll', [j_string('[^\\p{L}\\p{N}]'), j_string('')]);
                     let textClean  = $text->j_invoke('replaceAll', [j_string('[^\\p{L}\\p{N}]'), j_string('')]);
                     let compare1   = j_lambda($v, $vName     ->j_invoke('equals',           $text));
                     let compare2   = j_lambda($v, $vName     ->j_invoke('equalsIgnoreCase', $text));
                     let compare3   = j_lambda($v, $vNameClean->j_invoke('equals',           $textClean));
                     let compare4   = j_lambda($v, $vNameClean->j_invoke('equalsIgnoreCase', $textClean));

                     let findEnumAndAdd =[
                        $text->j_declare($parsedFlatData->j_invoke('getString', $fieldVar)),
                        $all->j_declare(javaEnumSet()->j_invoke('allOf', $javaType->j_field('class'), $all.type)),
                        $var->j_declare($all->j_streamOf()->js_filter($compare1)->js_resolve($var.type)),
                        j_if($var->j_invoke('isEmpty', []),
                           $var->j_assign($all->j_streamOf()->js_filter($compare2)->js_resolve($var.type))
                        ),
                        j_if($var->j_invoke('isEmpty', []),
                           $var->j_assign($all->j_streamOf()->js_filter($compare3)->js_resolve($var.type))
                        ),
                        j_if($var->j_invoke('isEmpty', []),
                           $var->j_assign($all->j_streamOf()->js_filter($compare4)->js_resolve($var.type))
                        ),
                        j_if($var->j_invoke('isEmpty', []),
                           j_throw(j_new(javaIllegalArgumentException(), $text->j_plus(j_string(' does not match to any value in ' + $propType.name->toOne()))))
                        ),
                        j_if($var->j_invoke('size', [])->j_gt(j_int(1)),
                           j_throw(j_new(javaIllegalArgumentException(), $text->j_plus(j_string(' ambiguously matches to values in ' + $propType.name->toOne()))))
                        ),
                        $adderVar->j_invoke('addTo', [$resultVar, $var->j_invoke('get', j_int(0))])
                     ]->j_block();
                   
                     j_if($parsedFlatData->j_invoke('hasStringValue', $fieldVar),
                        $defectOnException->eval($findEnumAndAdd)
                    );
                  },
                  |
               if($propType == String,
                  | j_if($parsedFlatData->j_invoke('hasStringValue', $fieldVar),
                       $defectOnException->eval($adderVar->j_invoke('addTo', [$resultVar, $parsedFlatData->j_invoke('getString', $fieldVar)]))
                    ),
                  |
               if($propType == Boolean,
                  | j_if($parsedFlatData->j_invoke('hasBooleanValue', $fieldVar),
                       $defectOnException->eval($adderVar->j_invoke('addTo', [$resultVar, $parsedFlatData->j_invoke('getBoolean', $fieldVar)]))
                    ),
                  |
               if($propType == Integer,
                  | j_if($parsedFlatData->j_invoke('hasLongValue', $fieldVar),
                       $defectOnException->eval($adderVar->j_invoke('addTo', [$resultVar, $parsedFlatData->j_invoke('getLong', $fieldVar)]))
                    ),
                  | 
               if($propType == Float,
                  | j_if($parsedFlatData->j_invoke('hasDoubleValue', $fieldVar),
                       $defectOnException->eval($adderVar->j_invoke('addTo', [$resultVar, $parsedFlatData->j_invoke('getDouble', $fieldVar)]))
                    ),
                  | 
               if($propType == Decimal,
                  | j_if($parsedFlatData->j_invoke('hasBigDecimalValue', $fieldVar),
                       $defectOnException->eval($adderVar->j_invoke('addTo', [$resultVar, $parsedFlatData->j_invoke('getBigDecimal', $fieldVar)]))
                    ),
                  | 
               if($propType == StrictDate,
                  | j_if($parsedFlatData->j_invoke('hasLocalDateValue', $fieldVar),
                       $defectOnException->eval($adderVar->j_invoke('addTo', [$resultVar, $parsedFlatData->j_invoke('getLocalDate', $fieldVar)]))
                    ),
                  | 
               if($propType == DateTime,
                  | j_if($parsedFlatData->j_invoke('hasInstantValue', $fieldVar),
                       $defectOnException->eval($adderVar->j_invoke('addTo', [$resultVar, $parsedFlatData->j_invoke('getInstant', $fieldVar)]))
                    ),
                  | fail('Unknown type'); j_null();
               ))))))));
            });

            let isReturnableMethod = j_method('public',javaBoolean(), 'isReturnable', [],
                                        j_return(if($sectionBindingDetail.class == $rootClass, |j_true(), |j_false()))
                                     );

            let checkedType        = javaParameterizedType($conventions->checkedClass(), $dataClass);
            let checked            = j_variable($checkedType, 'checked');
            let d                  = j_parameter($conventions->defectClass(), 'd');
            let makeMethod         = j_method('public', $dataClass, 'make', $parsedFlatData,
                                        [
                                           $checked->j_declare(j_this(anonymousNestedClass(1))->j_invoke('makeChecked', $parsedFlatData, $checked.type)),
                                           j_if($conventions->checkedGetDefects($checked)->j_streamOf()->js_anyMatch(j_lambda($d, $conventions->defectGetEnforcemetLevel($d)->j_eq($conventions->elCritical()))),
                                              j_throw(j_new(javaIllegalStateException(), $conventions->checkedGetDefects($checked)->j_streamOf()->js_map(j_lambda($d, $conventions->defectGetMessage($d)))->js_joining(j_string('\n'))))
                                           ),
                                           j_return($conventions->checkedGetValue($checked))
                                        ]
                                     );
                                                                         
            let declareDefects = $defects->j_declare(j_new(javaArrayList($conventions->defectClass()), []));
            let returnChecked  = j_return($conventions->dynamicChecked($defects, $parsedFlatData, $resultVar));
         
            if($bindingDetail.schemaBindingDetail->isNotEmpty(),
               {|
                  let schemaObjectClass = $conventions->dataClass($bindingDetail.schemaBindingDetail.class->toOne(), $path);
                  let schemaObject      = j_parameter($schemaObjectClass, 'schemaObject');
                  let sectionProperty   = $bindingDetail.schemaBindingDetail.details->filter(d| $d.section == $section).property->toOne();

                  let anonResult = j_newAnon($factoryType, [], 
                     [
                        $makeMethod,
                        j_method('public', $checkedType, 'makeChecked', $parsedFlatData,
                           $declareDefects
                              ->concatenate($resultVar->j_declare(j_new($dataClass, [])))
                              ->concatenate($addClauses)
                              ->concatenate($schemaObject->j_invoke('_'+$conventions->fieldName($sectionProperty)+'Add', $resultVar, javaVoid()))
                              ->concatenate($returnChecked)
                              ->j_block()
                        ),
                        $isReturnableMethod,
                        j_method('public', javaVoid(), 'finished', [],
                           $schemaObject->j_invoke('_'+$conventions->fieldName($sectionProperty)+'SectionFinished', [], javaVoid())
                        )
                     ]
                  );
                  
                  javaMethod('public', javaFunction($recordTypeParam.type, javaParameterizedType($conventions->className(_ParsedFlatDataToObject), javaWildcard())), $section->sectionFactoryMethodName(), $schemaObject, 
                     j_return(j_lambda($recordTypeParam, $fieldVars.second->concatenate($adderVars.second)->concatenate(j_return($anonResult))->j_block()))
                  );
               },
               {|
                  let anonResult = j_newAnon($factoryType, [], 
                     [
                        $makeMethod,
                        j_method('public', $checkedType, 'makeChecked', $parsedFlatData,
                           $declareDefects
                              ->concatenate($resultVar->j_declare(j_new($dataClass, [])))
                              ->concatenate($addClauses)
                              ->concatenate($returnChecked)
                              ->j_block()
                        ),
                        $isReturnableMethod
                     ]
                  );

                  javaMethod('public', $factoryType, $section->sectionFactoryMethodName(), $recordTypeParam, 
                     $fieldVars.second->concatenate($adderVars.second)->concatenate(j_return($anonResult))
                  );
               }
            );
         });
      })
      ->addMethod({cls |
         let schemaVar  = j_variable($conventions->className(_FlatData), 'schema');
         let newContext = j_new($contextType, [$schemaVar, j_string($schemaSet->elementToPath())]);
         let maxSize    = j_this($cls)->j_field($maximumSchemaObjectSize);
         let sectionsToProcess = $flatData.sections->filter(s | $s.recordType->isNotEmpty());

         let body = if($bindingDetail.schemaBindingDetail->isNotEmpty(),
            {|
               let schemaObjectClass = $conventions->dataClass($bindingDetail.schemaBindingDetail.class->toOne(), $path);
               let schemaObject      = j_variable($schemaObjectClass, 'schemaObject');
               let contextWithSchemaObject =  if($bindingDetail.schemaBindingDetail.class == $rootClass, |$newContext->j_invoke('withSchemaObject', [$schemaObject], $contextType), |$newContext);
               let contextWithFactories = $sectionsToProcess->fold(
                  {section, code| 
                     let factoryRef = j_this($cls)->j_invoke($section->sectionFactoryMethodName(), $schemaObject);
                     $code->j_invoke('withSectionToObjectFactory', [j_string($section.name), $factoryRef], $contextType);
                  }, 
                  $contextWithSchemaObject
               );
               
               [
                  j_if($maxSize->j_eq(j_int(0)),
                     j_throw(j_new(javaIllegalStateException(), j_string('maximumSchemaObjectSize must be set before obtaining context')))
                  ),
                  $schemaObject->j_declare(j_new($schemaObjectClass, $maxSize))
               ]->concatenate(
                  $cls->createSchema($flatData, $schemaVar, $conventions)
               )->concatenate(
                  j_return($contextWithFactories)
               );
            },
            {|
               let contextWithFactories = $sectionsToProcess->fold(
                  {section, code| 
                     let factoryRef = j_this($cls)->j_methodReference($section->sectionFactoryMethodName(), javaFunctionType($conventions->className(_FlatDataRecordType), $conventions->className(_ParsedFlatDataToObject)));
                     $code->j_invoke('withSectionToObjectFactory', [j_string($section.name), $factoryRef], $contextType);
                  }, 
                  $newContext
               );
               
               $cls->createSchema($flatData, $schemaVar, $conventions)->concatenate(j_return($contextWithFactories));
            }
         );
         
         javaMethod('public', $contextType, 'createContext', [], $body);
      });
}

function <<access.private>> meta::external::format::flatdata::executionPlan::platformBinding::legendJava::internalize::propertyForField(bindingDetail:SectionBindingDetail[1], field:FlatDataRecordField[1]): AbstractProperty<Any>[1]
{
   $bindingDetail.details->filter(c| $c.field == $field).property->toOne();
}

function <<access.private>> meta::external::format::flatdata::executionPlan::platformBinding::legendJava::internalize::createSchemaDataClass(class:meta::pure::metamodel::type::Class<Any>[1], path:String[1], context:GenerationContext[1], constraintContext: ConstraintCheckingGenerationContext[1], debug:DebugContext[1]): Project[1]
{
   print(if($debug.debug,|$debug.space+'('+$path+') createFileDataClass for '+$class->elementToPath()+'\n', |''));

   let conventions           = $context.conventions;
   
   let stateNone             = javaField(['private', 'static'], javaInt(), 'STATE_NONE',      j_int(0));
   let stateBuilt            = javaField(['private', 'static'], javaInt(), 'STATE_BUILT',     j_int(1));
   let stateTooLarge         = javaField(['private', 'static'], javaInt(), 'STATE_TOO_LARGE', j_int(2));

   let maxSize               = javaField(['private', 'final'], javaLong(), 'maxSize');
   let maxSizeParam          = j_parameter(javaLong(), 'maxSize');
   let buildingSize          = javaField('private', javaLong(), 'buildingSize', j_long(0));
   let builtSize             = javaField('private', javaLong(), 'builtSize',    j_long(0));

   let baseClass = $conventions->dataClass($class, $path)->addModifiers('public')
      ->implements($conventions->className($class))
      ->addFields([$stateNone, $stateBuilt, $stateTooLarge])
      ->addFields([$maxSize, $buildingSize, $builtSize])
      ->addConstructor(c| javaConstructor('public', $maxSizeParam, j_this($c)->j_field($maxSize)->j_assign($maxSizeParam)));   
   
   let properties = $context.typeInfos->allProperties($class)->map(p|
      let fieldName     = $conventions->fieldName($p);
      let javaType      = $conventions->pureTypeToJavaType($p);
      let propType      = $p->functionReturnType().rawType->toOne();
      let itemType      = if($javaType->isJavaList(), |$javaType->elementType(), |$javaType)->toUnboxed();
                                                                                                                                      
      ^SchemaPropertyDetails(
         property          = $p,
         fieldName         = $fieldName,
         stateFieldName    = $fieldName+'State',
         sizeFieldName     = $fieldName+'Size',
         propType          = $propType,
         javaType          = $javaType,
         itemType          = $itemType,
         getterName        = $conventions->getterName($p),
         adderName         = '_'+$fieldName+'Add',
         adderParam        = j_parameter($conventions->dataClass($propType->cast(@meta::pure::metamodel::type::Class<Any>), $path), 'value'),
         finisherName      = '_'+$fieldName+'SectionFinished'
      );
   );

   let withPropertyMethods = $properties->fold(
      {p, jc|
         let stBuilt    = j_this($jc)->j_field($stateBuilt);
         let stTooLarge = j_this($jc)->j_field($stateTooLarge);
         
         $jc->addField(if($p.javaType->isJavaList(), 
                          |javaField('private', $p.javaType, $p.fieldName, javaArrayList($p.itemType)->j_new([])),
                          |javaField('private', $p.javaType, $p.fieldName)
                       )
            )
            ->addField(javaField('private', javaInt(), $p.sizeFieldName, j_int(0)))
            ->addField(javaField('private', javaInt(), $p.stateFieldName, j_this($jc)->j_field($stateNone)))
            ->addMethod({c|
               let field = j_this($c)->j_field($p.fieldName);
               let state = j_this($c)->j_field($p.stateFieldName);
               
               javaMethod('public', $p.javaType, $p.getterName, [],
                  j_if(
                     list([
                        pair($state->j_bitwiseAnd($stBuilt)->j_ne($stBuilt), j_throw(j_new(javaIllegalStateException(), j_string('Cannot access ' + $p.name + ' before section is completed')))),
                        pair($state->j_bitwiseAnd($stTooLarge)->j_eq($stTooLarge), j_throw(j_new(javaIllegalStateException(), j_string('Cannot access ' + $p.name + ', data too large for in memory operation'))))
                     ]),
                     j_return($field)
                  )
               );
            })
            ->addMethod({c|
               let field      = j_this($c)->j_field($p.fieldName);
               let size       = j_this($c)->j_field($p.sizeFieldName);
               let state      = j_this($c)->j_field($p.stateFieldName);
               let bldingSize = j_this($c)->j_field($buildingSize);
               let bltSize    = j_this($c)->j_field($builtSize);
               let addValue   = if($p.javaType->isJavaList(), 
                                   | $field->j_invoke('add', $p.adderParam),
                                   | $field->j_assign($p.adderParam)
                                );
               
               javaMethod('public', javaVoid(), $p.adderName, $p.adderParam,
                  [
                     j_if($state->j_bitwiseAnd($stBuilt)->j_eq($stBuilt), 
                        j_throw(j_new(javaIllegalStateException(), j_string('Cannot add to ' + $p.name + ' because section is complete')))
                     ),
                     j_if($state->j_bitwiseAnd($stTooLarge)->j_ne($stTooLarge),
                        [
                           $bldingSize->j_assign($bldingSize->j_plus($p.adderParam->j_invoke($conventions->getterName(instanceSizeIdentifier()), [], javaInt()))),
                           j_if($bltSize->j_plus($bldingSize)->j_gt(j_this($c)->j_field($maxSize)),
                              [
                                 $state->j_assign($state->j_bitwiseOr($stTooLarge)),
                                 $bldingSize->j_assign(j_int(0)),
                                 if($p.javaType->isJavaList(), 
                                    | $field->j_invoke('clear', [], javaVoid()),
                                    | $field->j_assign(j_null())
                                 )
                              ]
                           )
                        ]
                     ),
                     j_if($state->j_bitwiseAnd($stTooLarge)->j_ne($stTooLarge), 
                        $addValue
                     ),
                     $size->j_inc()
                  ]->concatenate(
                     if($p.isViaAssociation(),
                        {|
                           let otherProperty = $p.property.owner->cast(@Association).properties->filter(x | $x != $p.property)->toOne();
                           let otherImplName = '_' + $conventions->fieldName($otherProperty) + 'AddImpl';
                           $p.adderParam->j_invoke($otherImplName, j_this($c), javaVoid());
                        },
                        | []
                     )
                  )
               );
            })
            ->addMethod({c|
               javaMethod('public', javaVoid(), $p.adderName+'Impl', $p.adderParam,
                  j_throw(j_new(javaIllegalStateException(), j_string('Associated data should be assigned via the schema class')))
               );
            })
            ->addMethod({c|
               let field      = j_this($c)->j_field($p.fieldName);
               let size       = j_this($c)->j_field($p.sizeFieldName);
               let state      = j_this($c)->j_field($p.stateFieldName);
               let bldingSize = j_this($c)->j_field($buildingSize);
               let bltSize    = j_this($c)->j_field($builtSize);
               
               let multiplicity       = $p.property.multiplicity;
               let occurs             = occursFromMultiplicity($multiplicity);
               let lowerBoundClause   = $size->j_lt($occurs.first);
               let upperBoundClause   = $size->j_gt($occurs.second);
               let throwMultException = j_throw(j_new(javaIllegalStateException(), j_string('Invalid multiplicity for '+$p.name->toOne()+': expected ['+$multiplicity->printMultiplicity()+'] found [')->j_plus($size)->j_plus(j_string(']'))));
               let multiplicityCheck  = if($multiplicity->hasLowerBound() && $multiplicity->hasUpperBound(),
                                           | j_if($lowerBoundClause->j_or($upperBoundClause), $throwMultException),
                                           |
                                        if($multiplicity->hasLowerBound(),
                                           | j_if($lowerBoundClause, $throwMultException),
                                           |
                                        if($multiplicity->hasUpperBound(),
                                           | j_if($upperBoundClause, $throwMultException),
                                           | []
                                        )));
               
               javaMethod('public', javaVoid(), $p.finisherName, [],
                  [
                     j_if($state->j_bitwiseAnd($stBuilt)->j_eq($stBuilt),
                        j_throw(j_new(javaIllegalStateException(), j_string($p.name + ' section is already completed')))
                     )
                  ]
                  ->concatenate($multiplicityCheck)
                  ->concatenate([
                     $state->j_assign($state->j_bitwiseOr($stBuilt)),
                     $bltSize->j_assign($bltSize->j_plus($bldingSize)),
                     $bldingSize->j_assign(j_int(0))
                  ])
               );
            });          
      }, 
      $baseClass      
   );
   
   let schemaClass = $withPropertyMethods->addAlloyStoreObjectReferenceMethodsForClass($context);
   mergeProjects([
      newProject()->addClass($schemaClass),
      $schemaClass->createConstraintCheckingForClass($class, $path, $context, $constraintContext, $debug)
   ]);
}

