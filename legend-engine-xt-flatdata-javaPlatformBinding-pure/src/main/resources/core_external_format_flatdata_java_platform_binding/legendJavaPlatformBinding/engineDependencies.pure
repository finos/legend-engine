// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Generated extension externalFormatFlatdata class definitions: see org.finos.legend.engine.external.format.flatdata.FlatDataJavaCompilerExtension
 */

import meta::external::format::flatdata::executionPlan::platformBinding::legendJava::*;
import meta::external::language::java::factory::*;
import meta::external::language::java::transform::*;

Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_IFlatDataSerializeExecutionNodeSpecifics {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_IFlatDataDeserializeExecutionNodeSpecifics {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataContext {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_ParsedFlatData {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_ParsedFlatDataToObject {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_ObjectToParsedFlatData {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatData {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataSection {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataProperty {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataRecordType {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataRecordField {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataDataType {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataString {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataBoolean {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataInteger {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataDecimal {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataDate {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataDateTime {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataNumber {}
Class meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataTemporal {}

/*
 * This function should be assigned to the router extension:
 *
 *     plan_javaRuntime_enginePlatformDependencies_conventions = meta::external::format::flatdata::executionPlan::platformBinding::legendJava::extendJavaEngineDependencies_Conventions_1__Conventions_1_
 */
function meta::external::format::flatdata::executionPlan::platformBinding::legendJava::extendJavaEngineDependencies(conventions:Conventions[1]):Conventions[1]
{

   let jIChecked = $conventions->className(meta::pure::dataQuality::Checked);

   let jRawFlatDataValue = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.driver.spi.RawFlatDataValue')
      ->addMethod(javaMethod('public', javaObject(), 'getAddress', []))
      ->addMethod(javaMethod('public', javaString(), 'getRawValue', []));

   let jRawFlatData = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.driver.spi.RawFlatData')
      ->addMethod(javaMethod('public', javaLong(), 'getLineNumber', []))
      ->addMethod(javaMethod('public', javaLong(), 'getNumber', []))
      ->addMethod(javaMethod('public', javaString(), 'getRecord', []))
      ->addMethod(javaMethod('public', javaList($jRawFlatDataValue), 'getRecordValues', []));

   let jFlatData = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatData');

   let jFlatDataSection = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataSection');

   let jFlatDataProperty = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataProperty');

   let jFlatDataRecordType = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataRecordType');

   let jFlatDataRecordField = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataRecordField');

   let jParsedFlatData = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.driver.spi.ParsedFlatData')
      ->addMethod(javaMethod('public', javaBigDecimal(), 'getBigDecimal', [javaParam($jFlatDataRecordField, 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'getBoolean', [javaParam($jFlatDataRecordField, 'p0')]))
      ->addMethod(javaMethod('public', javaDouble(), 'getDouble', [javaParam($jFlatDataRecordField, 'p0')]))
      ->addMethod(javaMethod('public', javaInstant(), 'getInstant', [javaParam($jFlatDataRecordField, 'p0')]))
      ->addMethod(javaMethod('public', javaLocalDate(), 'getLocalDate', [javaParam($jFlatDataRecordField, 'p0')]))
      ->addMethod(javaMethod('public', javaLong(), 'getLong', [javaParam($jFlatDataRecordField, 'p0')]))
      ->addMethod(javaMethod('public', javaString(), 'getString', [javaParam($jFlatDataRecordField, 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'hasBigDecimalValue', [javaParam($jFlatDataRecordField, 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'hasBooleanValue', [javaParam($jFlatDataRecordField, 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'hasDoubleValue', [javaParam($jFlatDataRecordField, 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'hasInstantValue', [javaParam($jFlatDataRecordField, 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'hasLocalDateValue', [javaParam($jFlatDataRecordField, 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'hasLongValue', [javaParam($jFlatDataRecordField, 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'hasStringValue', [javaParam($jFlatDataRecordField, 'p0')]));

   let jParsedFlatDataToObject = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.driver.spi.ParsedFlatDataToObject')
      ->addMethod(javaMethod('public', javaVoid(), 'finished', []))
      ->addMethod(javaMethod('public', javaBoolean(), 'isReturnable', []))
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'make', [javaParam($jParsedFlatData, 'p0')]))
      ->addMethod(javaMethod('public', javaParameterizedType($jIChecked, [javaTypeVar('T')]), 'makeChecked', [javaParam($jParsedFlatData, 'p0')]));

   let jObjectToParsedFlatData = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.driver.spi.ObjectToParsedFlatData')
      ->addMethod(javaMethod('public', $jParsedFlatData, 'make', [javaParam(javaTypeVar('T'), 'p0')]));

   let jFlatDataContext = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.FlatDataContext')
      ->addMethod(javaMethod('public', javaParameterizedType(javaClass('org.finos.legend.engine.external.format.flatdata.driver.spi.FlatDataProcessor'), [javaTypeVar('T')]), 'createProcessor', []))
      ->addMethod(javaMethod('public', javaParameterizedType(javaClass('public', 'org.finos.legend.engine.external.format.flatdata.FlatDataContext'), [javaTypeVar('T')]), 'withSectionFromObjectFactory', [javaParam(javaString(), 'p0'), javaParam(javaFunction($jFlatDataRecordType, javaParameterizedType($jObjectToParsedFlatData, [javaWildcard()])), 'p1')]))
      ->addMethod(javaMethod('public', javaParameterizedType(javaClass('public', 'org.finos.legend.engine.external.format.flatdata.FlatDataContext'), [javaTypeVar('T')]), 'withSectionToObjectFactory', [javaParam(javaString(), 'p0'), javaParam(javaFunction($jFlatDataRecordType, javaParameterizedType($jParsedFlatDataToObject, [javaWildcard()])), 'p1')]));

   let jIFlatDataSerializeExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.write.IFlatDataSerializeExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaParameterizedType($jFlatDataContext, [javaTypeVar('T')]), 'createContext', []));

   let jIFlatDataDeserializeExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.read.IFlatDataDeserializeExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaParameterizedType($jFlatDataContext, [javaTypeVar('T')]), 'createContext', []))
      ->addMethod(javaMethod('public', javaVoid(), 'setMaximumSchemaObjectSize', [javaParam(javaLong(), 'p0')]));

   let jFlatDataDataType = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataDataType')
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'accept', [javaParam(javaParameterizedType(javaClass('org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataDataTypeVisitor'), [javaTypeVar('T')]), 'p0')]));

   let jFlatDataString = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataString')
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'accept', [javaParam(javaParameterizedType(javaClass('org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataDataTypeVisitor'), [javaTypeVar('T')]), 'p0')]));

   let jFlatDataBoolean = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataBoolean')
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'accept', [javaParam(javaParameterizedType(javaClass('org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataDataTypeVisitor'), [javaTypeVar('T')]), 'p0')]));

   let jFlatDataInteger = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataInteger')
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'accept', [javaParam(javaParameterizedType(javaClass('org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataDataTypeVisitor'), [javaTypeVar('T')]), 'p0')]));

   let jFlatDataDecimal = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataDecimal')
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'accept', [javaParam(javaParameterizedType(javaClass('org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataDataTypeVisitor'), [javaTypeVar('T')]), 'p0')]));

   let jFlatDataDate = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataDate')
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'accept', [javaParam(javaParameterizedType(javaClass('org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataDataTypeVisitor'), [javaTypeVar('T')]), 'p0')]));

   let jFlatDataDateTime = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataDateTime')
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'accept', [javaParam(javaParameterizedType(javaClass('org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataDataTypeVisitor'), [javaTypeVar('T')]), 'p0')]));

   let jFlatDataNumber = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataNumber')
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'accept', [javaParam(javaParameterizedType(javaClass('org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataDataTypeVisitor'), [javaTypeVar('T')]), 'p0')]));

   let jFlatDataTemporal = javaClass('public', 'org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataTemporal')
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'accept', [javaParam(javaParameterizedType(javaClass('org.finos.legend.engine.external.format.flatdata.metamodel.FlatDataDataTypeVisitor'), [javaTypeVar('T')]), 'p0')]));

   $conventions
      ->addProvidedType(meta::external::format::flatdata::executionPlan::model::RawFlatData, $jRawFlatData)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::model::RawFlatDataValue, $jRawFlatDataValue)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_IFlatDataSerializeExecutionNodeSpecifics, $jIFlatDataSerializeExecutionNodeSpecifics)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_IFlatDataDeserializeExecutionNodeSpecifics, $jIFlatDataDeserializeExecutionNodeSpecifics)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataContext, $jFlatDataContext)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_ParsedFlatData, $jParsedFlatData)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_ParsedFlatDataToObject, $jParsedFlatDataToObject)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_ObjectToParsedFlatData, $jObjectToParsedFlatData)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatData, $jFlatData)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataSection, $jFlatDataSection)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataProperty, $jFlatDataProperty)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataRecordType, $jFlatDataRecordType)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataRecordField, $jFlatDataRecordField)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataDataType, $jFlatDataDataType)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataString, $jFlatDataString)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataBoolean, $jFlatDataBoolean)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataInteger, $jFlatDataInteger)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataDecimal, $jFlatDataDecimal)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataDate, $jFlatDataDate)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataDateTime, $jFlatDataDateTime)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataNumber, $jFlatDataNumber)
      ->addProvidedType(meta::external::format::flatdata::executionPlan::platformBinding::legendJava::_FlatDataTemporal, $jFlatDataTemporal);
}