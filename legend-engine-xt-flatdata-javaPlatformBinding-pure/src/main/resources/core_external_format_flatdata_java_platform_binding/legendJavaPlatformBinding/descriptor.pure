// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::format::executionPlan::platformBinding::legendJava::*;

import meta::external::format::flatdata::contract::*;
import meta::external::format::flatdata::executionPlan::*;
import meta::external::format::flatdata::executionPlan::platformBinding::legendJava::*;
import meta::external::format::flatdata::executionPlan::platformBinding::legendJava::externalize::*;
import meta::external::format::flatdata::executionPlan::platformBinding::legendJava::internalize::*;

function meta::external::format::flatdata::executionPlan::platformBinding::legendJava::flatDataJavaBindingDescriptor():ExternalFormatLegendJavaPlatformBindingDescriptor[1]
{
  ^ExternalFormatLegendJavaPlatformBindingDescriptor
  (
    externalFormatContract     = flatDataFormatContract(),
    enginePlatformDependencies = meta::external::format::flatdata::executionPlan::platformBinding::legendJava::extendJavaEngineDependencies_Conventions_1__Conventions_1_,
    externalizeDescriptor      = getExternalFormatExternalizeJavaBindingDescriptor(),
    internalizeDescriptor      = getExternalFormatInternalizeJavaBindingDescriptor()
  )
}


###Pure

import meta::external::format::flatdata::executionPlan::platformBinding::legendJava::*;
import meta::external::shared::format::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::*;
import meta::pure::extension::*;
import meta::pure::executionPlan::platformBinding::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::localBinding::*;
import meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::*;

function <<LocalPlatformBinding.TestPlanBinder>> meta::external::format::flatdata::executionPlan::platformBinding::legendJava::bindFlatdataTestPlanToPlatform(): LocalPlatformBinder[1]
{
   ^LocalPlatformBinder
   (
      overrides = [],
      
      bindingFunction = {plan: ExecutionPlan[1], extensions: Extension[*] |
         
         let legendJavaPlatformBindings = [inMemoryLegendJavaPlatformBindingExtension(),
                                           bindingLegendJavaPlatformBindingExtension(flatDataJavaBindingDescriptor())];
         let extensionsWithPlatformBindings = $extensions->concatenate(platformBindingExtension([legendJavaPlatformBinding($legendJavaPlatformBindings)]));

         // Using LegendJava as the default for local platform binding
         generatePlatformCode($plan, legendJavaPlatformBindingId(), ^LegendJavaPlatformBindingConfig(), $extensionsWithPlatformBindings);
      
      }
   ) 
}
