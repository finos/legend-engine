###Pure
Class test::Person
{
  name: String[1];
}

Class test::ServiceResult
{
   ID: String[1];
   NAME: String[1];
}

###Mapping
Mapping test::Mapping ()

###Relational
Database test::TestDatabase
(
  Table personTable
  (
    ID INTEGER PRIMARY KEY,
    NAME VARCHAR(100)
  )
)
###Service
Service test::Service
{
  pattern : 'test';
  documentation : 'test';
  autoActivateUpdates: true;
  execution: Single
  {
    query: src: test::Person[1]|$src.name;
    mapping: test::Mapping;
    runtime:
    #{
      connections: [];
    }#;
  }
  test: Single
  {
    data: 'test';
    asserts: [];
  }
}

###Persistence
Persistence test::TestPersistence
{
  doc: 'This is test documentation.';
  trigger: Manual;
  service: test::Service;
  persister: Batch
  {
    sink: Relational
    {
      database: test::TestDatabase;
    }
    ingestMode: UnitemporalSnapshot
    {
      transactionMilestoning: BatchIdAndDateTime
      {
        batchIdInName: 'BATCH_IN';
        batchIdOutName: 'BATCH_OUT';
        dateTimeInName: 'IN_Z';
        dateTimeOutName: 'OUT_Z';
      }
    }
    targetShape: Flat
    {
      targetName: 'personTable';
      modelClass: test::ServiceResult;
    }
  }
  tests:
  [
   test1:
   {
     testBatches:
     [
       testBatch1:
       {
         data:
         {
           connection:
           {
             ExternalFormat
             #{
               contentType: 'application/json';
               data: '[{"ID":1, "NAME":"ANDY"},{"ID":2, "NAME":"BRAD"},{"ID":3, "NAME":"CATHY"}]';
             }#
           }
         }
         asserts:
         [
           assert1:
             EqualToJson
             #{
               expected:
                 ExternalFormat
                 #{
                   contentType: 'application/json';
                   data: '[{"ID":1, "NAME":"ANDY", "BATCH_IN":1, "BATCH_OUT":999999999},{"ID":2, "NAME":"BRAD", "BATCH_IN":1, "BATCH_OUT":999999999},{"ID":3, "NAME":"CATHY", "BATCH_IN":1, "BATCH_OUT":999999999}]';
                 }#;
             }#
         ]
       },
       testBatch2:
       {
         data:
         {
           connection:
           {
             ExternalFormat
             #{
               contentType: 'application/json';
               data: '[{"ID":1, "NAME":"ANDY"},{"ID":3, "NAME":"CATHERINE"},{"ID":4, "NAME":"TOM"}]';
             }#
           }
         }
         asserts:
         [
           assert1:
             EqualToJson
             #{
               expected :
                 ExternalFormat
                 #{
                   contentType: 'application/json';
                   data: '[{"ID":1, "NAME":"ANDY", "BATCH_IN":1, "BATCH_OUT":999999999},{"ID":2, "NAME":"BRAD", "BATCH_IN":1, "BATCH_OUT":1}, {"ID":3, "NAME":"CATHY", "BATCH_IN":1, "BATCH_OUT":1}, {"ID":3, "NAME":"CATHERINE", "BATCH_IN":2, "BATCH_OUT":999999999}, {"ID":4, "NAME":"TOM", "BATCH_IN":2, "BATCH_OUT":999999999}]';
                 }#;
             }#
         ]
       }
     ]
     isTestDataFromServiceOutput: true;
   }
  ]
}