//  Copyright 2024 Goldman Sachs
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

import meta::pure::changetoken::tests::custom::map::*;
import meta::pure::changetoken::tests::*;

function meta::pure::changetoken::tests::custom::map::setupSuite(): meta::external::language::java::metamodel::Class[1]
{
        let versions = meta::pure::changetoken::tests::getVersionsCustomMap();
        setupSuiteFromVersions($versions);
}

function <<test.Test>> meta::pure::changetoken::tests::custom::map::testUpcast(): Any[*]
{
        expect(setupSuite()->upcast('{\n' +
                        '  "version":"ftdm:abcdefg123", \n' +
                        '  "@type": "meta::pure::changetoken::tests::SampleClass",\n' +
                        '  "innerObject": {"@type": "meta::pure::changetoken::tests::SampleClass"},\n' +
                        '  "innerNestedArray":[\n' +
                        '    {"@type": "meta::pure::changetoken::tests::SampleClass"}, \n' +
                        '    [{"@type": "meta::pure::changetoken::tests::SampleClass"}]\n' +
                        '  ]\n' +
                        '}'),
                '{\n' +
                        '  "version":"ftdm:abcdefg456",\n' +
                        '  "@type": "meta::pure::changetoken::tests::SampleClass",\n' +
                        '  "innerObject": {"@type": "meta::pure::changetoken::tests::SampleClass", "abc": {"@type":"Custom", "restricted":true, "range":{"min":-1, "max":1, "@type":"intMinMax", "round":0.5}, "value":0}},\n' +
                        '  "innerNestedArray":[\n' +
                        '    {"@type": "meta::pure::changetoken::tests::SampleClass", "abc": {"@type":"Custom", "restricted":true, "range":{"min":-1, "max":1, "@type":"intMinMax", "round":0.5}, "value":0}},\n' +
                        '    [{"@type": "meta::pure::changetoken::tests::SampleClass", "abc": {"@type":"Custom", "restricted":true, "range":{"min":-1, "max":1, "@type":"intMinMax", "round":0.5}, "value":0}}]\n' +
                        '  ],\n' +
                        '  "abc": {"@type":"Custom", "restricted":true, "range":{"min":-1, "max":1, "@type":"intMinMax", "round":0.5}, "value":0}\n' +
                        '}\n');
}

function <<test.Test>> meta::pure::changetoken::tests::custom::map::testDowncast(): Any[*]
{
        expect(setupSuite()->downcast('{\n' +
                        '  "version":"ftdm:abcdefg456",\n' +
                        '  "@type": "meta::pure::changetoken::tests::SampleClass",\n' +
                        '  "innerObject": {"@type": "meta::pure::changetoken::tests::SampleClass", "abc": {"@type":"Custom", "restricted":true, "range":{"min":-1, "max":1, "@type":"intMinMax", "round":0.5}, "value":0}},\n' +
                        '  "innerNestedArray":[\n' +
                        '    {"@type": "meta::pure::changetoken::tests::SampleClass", "abc": {"@type":"Custom", "restricted":true, "range":{"min":-1, "max":1, "@type":"intMinMax", "round":0.5}, "value":0}},\n' +
                        '    [{"@type": "meta::pure::changetoken::tests::SampleClass", "abc": {"@type":"Custom", "restricted":true, "range":{"min":-1, "max":1, "@type":"intMinMax", "round":0.5}, "value":0}}]\n' +
                        '  ],\n' +
                        '  "abc": {"@type":"Custom", "restricted":true, "range":{"min":-1, "max":1, "@type":"intMinMax", "round":0.5}, "value":0}\n' +
                        '}', 'ftdm:abcdefg123'),
                '{\n' +
                        '  "version":"ftdm:abcdefg123", \n' +
                        '  "@type": "meta::pure::changetoken::tests::SampleClass",\n' +
                        '  "innerObject": {"@type": "meta::pure::changetoken::tests::SampleClass"},\n' +
                        '  "innerNestedArray":[\n' +
                        '    {"@type": "meta::pure::changetoken::tests::SampleClass"}, \n' +
                        '    [{"@type": "meta::pure::changetoken::tests::SampleClass"}]\n' +
                        '  ]\n' +
                        '}\n');
}

function <<test.Test>> meta::pure::changetoken::tests::custom::map::testDowncastNonDefault(): Any[*]
{
        exception(setupSuite()->downcast('{\n' +
                        '  "version":"ftdm:abcdefg456",\n' +
                        '  "@type": "meta::pure::changetoken::tests::SampleClass",\n' +
                        '  "innerObject": {"@type": "meta::pure::changetoken::tests::SampleClass", "abc": {"@type":"Custom", "restricted":true, "range":{"min":-1, "max":1, "@type":"intMinMax", "round":0.5}, "value":0}},\n' +
                        '  "innerNestedArray":[\n' +
                        '    {"@type": "meta::pure::changetoken::tests::SampleClass", "abc": {"@type":"Custom", "restricted":true, "range":{"min":-1, "max":1, "@type":"intMinMax", "round":0.5}, "value":0}},\n' +
                        '    [{"@type": "meta::pure::changetoken::tests::SampleClass", "abc": {"@type":"Custom", "restricted":true, "range":{"min":-1, "max":1, "@type":"intMinMax", "round":0.5}, "value":0}}]\n' +
                        '  ],\n' +
                        '  "abc": {"@type":"Custom", "restricted":true, "range":{"min":-1, "max":1, "@type":"intMinMax", "round":0.0}, "value":1}\n' +
                        '}', 'ftdm:abcdefg123'),
                'Cannot remove non-default value:{@type=Custom, restricted=true, range={min=-1, round=0.0, max=1, @type=intMinMax}, value=1}');
}
