// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::json::*;
import meta::pure::changetoken::*;
import meta::pure::changetoken::diff_generation::*;
import meta::pure::changetoken::tests::*;

Class <<access.private>> meta::pure::changetoken::tests::new::entities::vX_X_X::SampleClass
{
    abc : String[1] = 'UNKNOWN';
    def : meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass[1] = ^meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass(one = 'TWO', three = 4.5, four = meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum.D);
    ghi: Boolean[1] = true;
    jkl: Number[1] = 1.1;
    mno: Integer[1] = 1;
    pqr: Float[1] = 4.2;
    stu: Date[1] = %2024-01-15T21:30:00;
    vwx: StrictDate[1] = %2024-01-15;
    yyy: DateTime[1] = %2024-01-15T17:30:00;
    zzz: meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum[1] = meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum.B;
    zzz_complexOne: Integer[2] = [1, 0];
    zzz_objects: meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass[1..*] = ^meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass(one = 'ONE', three = 3.0, four = meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum.C);
    zzz_optional: meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass[0..1];
    zzz_many: meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass[*];
    zzz_two: meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass[2..2] = [
        ^meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass(one = 'TWO', three = 2.0, four = meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum.A, five = meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum.B),
        ^meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass(one = 'TWO', three = 0.2, four = meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum.A, six = meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum.B)
    ];
    zzz_zero_enum: meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum[0];
    zzz_zero_integer: Integer[0];
    zzz_zero_object: meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass[0];
    zzz_zero_string: String[0];
    version: String[0..1];
}

function <<test.Test>> meta::pure::changetoken::tests::testAddFieldWithDefaultValues(): Boolean[1]
{
    let oldVersions = ^Versions(versions = [^Version(version = 'da39a3ee5e6b4b0d3255bfef95601890afd80709')]);
    let newVersion = generateNewVersion($oldVersions, 'meta::pure::changetoken::tests::new::entities::vX_X_X', 'meta::pure::changetoken::tests::old::entities::vX_X_X', 'da39a3ee5e6b4b0d3255bfef95601890afd80709', '2cd40d56a9d4b72402a9846b613921217e624d6d', 20);
    let changeTokens = $newVersion.changeTokens;
    assertAddedClass($changeTokens, 0, 'meta::pure::changetoken::tests::SampleClass');
    assertAddField($changeTokens, 1, 'meta::pure::changetoken::tests::SampleClass', 'abc', 'String[1]', true, '"UNKNOWN"');
    assertAddField($changeTokens, 2, 'meta::pure::changetoken::tests::SampleClass', 'def', 'meta::pure::changetoken::tests::NestedClass[1]', true, '{"one":"TWO","@type":"meta::pure::changetoken::tests::NestedClass","three":4.5,"four":"meta::pure::changetoken::tests::SampleEnum.D","five":null,"six":[]}');
    assertAddField($changeTokens, 3, 'meta::pure::changetoken::tests::SampleClass', 'ghi', 'Boolean[1]', true, 'true');
    assertAddField($changeTokens, 4, 'meta::pure::changetoken::tests::SampleClass', 'jkl', 'Number[1]', true, '1.1');
    assertAddField($changeTokens, 5, 'meta::pure::changetoken::tests::SampleClass', 'mno', 'Integer[1]', true, '1');
    assertAddField($changeTokens, 6, 'meta::pure::changetoken::tests::SampleClass', 'pqr', 'Float[1]', true, '4.2');
    assertAddField($changeTokens, 7, 'meta::pure::changetoken::tests::SampleClass', 'stu', 'Date[1]', true, '"2024-01-15T21:30:00+0000"');
    assertAddField($changeTokens, 8, 'meta::pure::changetoken::tests::SampleClass', 'vwx', 'StrictDate[1]', true, '"2024-01-15"');
    assertAddField($changeTokens, 9, 'meta::pure::changetoken::tests::SampleClass', 'yyy', 'DateTime[1]', true, '"2024-01-15T17:30:00+0000"');
    assertAddField($changeTokens, 10, 'meta::pure::changetoken::tests::SampleClass', 'zzz', 'meta::pure::changetoken::tests::SampleEnum[1]', true, '"meta::pure::changetoken::tests::SampleEnum.B"');
    assertAddField($changeTokens, 11, 'meta::pure::changetoken::tests::SampleClass', 'zzz_complexOne', 'Integer[2]', true, '[1,0]');
    assertAddField($changeTokens, 12, 'meta::pure::changetoken::tests::SampleClass', 'zzz_many', 'meta::pure::changetoken::tests::NestedClass[*]', true, '[]');
    assertAddField($changeTokens, 13, 'meta::pure::changetoken::tests::SampleClass', 'zzz_objects', 'meta::pure::changetoken::tests::NestedClass[1..*]', true, '[{"one":"ONE","@type":"meta::pure::changetoken::tests::NestedClass","three":3.0,"four":"meta::pure::changetoken::tests::SampleEnum.C","five":null,"six":[]}]');
    assertAddField($changeTokens, 14, 'meta::pure::changetoken::tests::SampleClass', 'zzz_optional', 'meta::pure::changetoken::tests::NestedClass[0..1]', true, 'null');
    assertAddField($changeTokens, 15, 'meta::pure::changetoken::tests::SampleClass', 'zzz_two', 'meta::pure::changetoken::tests::NestedClass[2]', true, '[' +
        '{"one":"TWO","@type":"meta::pure::changetoken::tests::NestedClass","three":2.0,"four":"meta::pure::changetoken::tests::SampleEnum.A","five":"meta::pure::changetoken::tests::SampleEnum.B","six":[]}' +
        ',' +
        '{"one":"TWO","@type":"meta::pure::changetoken::tests::NestedClass","three":0.2,"four":"meta::pure::changetoken::tests::SampleEnum.A","five":null,"six":["meta::pure::changetoken::tests::SampleEnum.B"]}' +
    ']');
    assertAddField($changeTokens, 16, 'meta::pure::changetoken::tests::SampleClass', 'zzz_zero_enum', 'meta::pure::changetoken::tests::SampleEnum[0]', true, 'null');
    assertAddField($changeTokens, 17, 'meta::pure::changetoken::tests::SampleClass', 'zzz_zero_integer', 'Integer[0]', true, 'null');
    assertAddField($changeTokens, 18, 'meta::pure::changetoken::tests::SampleClass', 'zzz_zero_object', 'meta::pure::changetoken::tests::NestedClass[0]', true, 'null');
    assertAddField($changeTokens, 19, 'meta::pure::changetoken::tests::SampleClass', 'zzz_zero_string', 'String[0]', true, 'null');
}

Class <<access.private>> meta::pure::changetoken::tests::new::empty::vX_X_X::SampleClass
{
    abc : String[1];
    def : meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass[1];
    ghi: Boolean[1];
    jkl: Number[1];
    mno: Integer[1];
    pqr: Float[1];
    stu: Date[1];
    vwx: StrictDate[1];
    yyy: DateTime[1];
    zzz: meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum[1];
    zzz_complexZero: Integer[2];
    zzz_objects: meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass[1..*];
    zzz_optional: meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass[0..1];
    zzz_many: meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass[*];
    zzz_two: meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass[2..2];
    zzz_zero_enum: meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum[0];
    zzz_zero_integer: Integer[0];
    zzz_zero_object: meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass[0];
    zzz_zero_string: String[0];
    version: String[0..1];
}

function <<test.Test>> meta::pure::changetoken::tests::testAddFieldGenerateDefaultValues(): Boolean[1]
{
    let oldVersions = ^Versions(versions = [^Version(version = 'da39a3ee5e6b4b0d3255bfef95601890afd80709')]);
    let newVersion = generateNewVersion($oldVersions, 'meta::pure::changetoken::tests::new::empty::vX_X_X', 'meta::pure::changetoken::tests::old::invalid::vX_X_X', 'da39a3ee5e6b4b0d3255bfef95601890afd80709', 'd16c3496f6a1f89d467d6d7f9800055bda792e13', 20);
    let changeTokens = $newVersion.changeTokens;
    assertAddedClass($changeTokens, 0, 'meta::pure::changetoken::tests::SampleClass');
    assertAddField($changeTokens, 1, 'meta::pure::changetoken::tests::SampleClass', 'abc', 'String[1]', true, '""');
    assertAddField($changeTokens, 2, 'meta::pure::changetoken::tests::SampleClass', 'def', 'meta::pure::changetoken::tests::NestedClass[1]', true, '{"one":"","@type":"meta::pure::changetoken::tests::NestedClass","three":0.0,"four":"meta::pure::changetoken::tests::SampleEnum.A","five":null,"six":[]}');
    assertAddField($changeTokens, 3, 'meta::pure::changetoken::tests::SampleClass', 'ghi', 'Boolean[1]', true, 'false');
    assertAddField($changeTokens, 4, 'meta::pure::changetoken::tests::SampleClass', 'jkl', 'Number[1]', true, '0');
    assertAddField($changeTokens, 5, 'meta::pure::changetoken::tests::SampleClass', 'mno', 'Integer[1]', true, '0');
    assertAddField($changeTokens, 6, 'meta::pure::changetoken::tests::SampleClass', 'pqr', 'Float[1]', true, '0.0');
    assertAddField($changeTokens, 7, 'meta::pure::changetoken::tests::SampleClass', 'stu', 'Date[1]', true, '"1970-01-01T00:00:00.000+0000"');
    assertAddField($changeTokens, 8, 'meta::pure::changetoken::tests::SampleClass', 'vwx', 'StrictDate[1]', true, '"1970-01-01"');
    assertAddField($changeTokens, 9, 'meta::pure::changetoken::tests::SampleClass', 'yyy', 'DateTime[1]', true, '"1970-01-01T00:00:00.000+0000"');
    assertAddField($changeTokens, 10, 'meta::pure::changetoken::tests::SampleClass', 'zzz', 'meta::pure::changetoken::tests::SampleEnum[1]', true, '"meta::pure::changetoken::tests::SampleEnum.A"');
    assertAddField($changeTokens, 11, 'meta::pure::changetoken::tests::SampleClass', 'zzz_complexZero', 'Integer[2]', true, '[0,0]');
    assertAddField($changeTokens, 12, 'meta::pure::changetoken::tests::SampleClass', 'zzz_many', 'meta::pure::changetoken::tests::NestedClass[*]', true, '[]');
    assertAddField($changeTokens, 13, 'meta::pure::changetoken::tests::SampleClass', 'zzz_objects', 'meta::pure::changetoken::tests::NestedClass[1..*]', true, '[{"one":"","@type":"meta::pure::changetoken::tests::NestedClass","three":0.0,"four":"meta::pure::changetoken::tests::SampleEnum.A","five":null,"six":[]}]');
    assertAddField($changeTokens, 14, 'meta::pure::changetoken::tests::SampleClass', 'zzz_optional', 'meta::pure::changetoken::tests::NestedClass[0..1]', true, 'null');
    assertAddField($changeTokens, 15, 'meta::pure::changetoken::tests::SampleClass', 'zzz_two', 'meta::pure::changetoken::tests::NestedClass[2]', true, '[' +
        '{"one":"","@type":"meta::pure::changetoken::tests::NestedClass","three":0.0,"four":"meta::pure::changetoken::tests::SampleEnum.A","five":null,"six":[]}' +
        ',' +
        '{"one":"","@type":"meta::pure::changetoken::tests::NestedClass","three":0.0,"four":"meta::pure::changetoken::tests::SampleEnum.A","five":null,"six":[]}' +
    ']');
    assertAddField($changeTokens, 16, 'meta::pure::changetoken::tests::SampleClass', 'zzz_zero_enum', 'meta::pure::changetoken::tests::SampleEnum[0]', true, 'null');
    assertAddField($changeTokens, 17, 'meta::pure::changetoken::tests::SampleClass', 'zzz_zero_integer', 'Integer[0]', true, 'null');
    assertAddField($changeTokens, 18, 'meta::pure::changetoken::tests::SampleClass', 'zzz_zero_object', 'meta::pure::changetoken::tests::NestedClass[0]', true, 'null');
    assertAddField($changeTokens, 19, 'meta::pure::changetoken::tests::SampleClass', 'zzz_zero_string', 'String[0]', true, 'null');
}

Class <<access.private>> meta::pure::changetoken::tests::new::string::vX_X_X::SampleClass
{
    r: String[1..1];
    o: String[0..1];
    a: String[0..*];
    x: String[1..*];
    y: String[2..4];
    z: String[0..4];
}

function <<test.Test>> meta::pure::changetoken::tests::testAddFieldTestString(): Boolean[1]
{
    let oldVersions = ^Versions(versions = [^Version(version = 'da39a3ee5e6b4b0d3255bfef95601890afd80709')]);
    let newVersion = generateNewVersion($oldVersions, 'meta::pure::changetoken::tests::new::string::vX_X_X', 'meta::pure::changetoken::tests::invalid::entities::vX_X_X', 'da39a3ee5e6b4b0d3255bfef95601890afd80709', 'd324f9bf2e5ac7ed1bbbddf9426c6145185d1d65', 7);
    let changeTokens = $newVersion.changeTokens;
    assertAddedClass($changeTokens, 0, 'meta::pure::changetoken::tests::SampleClass');
    assertAddField($changeTokens, 1, 'meta::pure::changetoken::tests::SampleClass', 'a', 'String[*]', true, '[]');
    assertAddField($changeTokens, 2, 'meta::pure::changetoken::tests::SampleClass', 'o', 'String[0..1]', true, 'null');
    assertAddField($changeTokens, 3, 'meta::pure::changetoken::tests::SampleClass', 'r', 'String[1]', true, '""');
    assertAddField($changeTokens, 4, 'meta::pure::changetoken::tests::SampleClass', 'x', 'String[1..*]', true, '[""]');
    assertAddField($changeTokens, 5, 'meta::pure::changetoken::tests::SampleClass', 'y', 'String[2..4]', true, '["",""]');
    assertAddField($changeTokens, 6, 'meta::pure::changetoken::tests::SampleClass', 'z', 'String[0..4]', true, '[]');
}

Class <<access.private>> meta::pure::changetoken::tests::new::numeric::vX_X_X::SampleClass
{
    r: Integer[1..1];
    o: Integer[0..1];
    a: Float[0..*];
    x: Float[1..*];
    y: Decimal[2..4];
    z: Decimal[0..4];
}

function <<test.Test>> meta::pure::changetoken::tests::testAddFieldTestNumeric(): Boolean[1]
{
    let oldVersions = ^Versions(versions = [^Version(version = 'da39a3ee5e6b4b0d3255bfef95601890afd80709')]);
    let newVersion = generateNewVersion($oldVersions, 'meta::pure::changetoken::tests::new::numeric::vX_X_X', 'meta::pure::changetoken::tests::invalid::entities::vX_X_X', 'da39a3ee5e6b4b0d3255bfef95601890afd80709', '237d50e0306f1116c61efc87f4d216e0af3ae671', 7);
    let changeTokens = $newVersion.changeTokens;
    assertAddedClass($changeTokens, 0, 'meta::pure::changetoken::tests::SampleClass');
    assertAddField($changeTokens, 1, 'meta::pure::changetoken::tests::SampleClass', 'a', 'Float[*]', true, '[]');
    assertAddField($changeTokens, 2, 'meta::pure::changetoken::tests::SampleClass', 'o', 'Integer[0..1]', true, 'null');
    assertAddField($changeTokens, 3, 'meta::pure::changetoken::tests::SampleClass', 'r', 'Integer[1]', true, '0');
    assertAddField($changeTokens, 4, 'meta::pure::changetoken::tests::SampleClass', 'x', 'Float[1..*]', true, '[0.0]');
    assertAddField($changeTokens, 5, 'meta::pure::changetoken::tests::SampleClass', 'y', 'Decimal[2..4]', true, '[0,0]');
    assertAddField($changeTokens, 6, 'meta::pure::changetoken::tests::SampleClass', 'z', 'Decimal[0..4]', true, '[]');
}

Enum meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum
{
    A,
    B,
    C,
    D
}

Class meta::pure::changetoken::tests::new::dependencies::vX_X_X::NestedClass
{
    one : String[1];
    three : Float[1];
    four: meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum[1];
    five: meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum[0..1];
    six: meta::pure::changetoken::tests::new::entities::vX_X_X::SampleEnum[*];
    version: String[0..1];
}

Class <<access.private>> meta::pure::changetoken::tests::new::entities::vX_X_X::OldSampleClass
{
    xyz : String[1];
}

Class <<access.private>> meta::pure::changetoken::tests::old::entities::vX_X_X::OldSampleClass
{
    xyz : String[1];
}

function <<access.private>> meta::pure::changetoken::tests::generateNewVersion(oldVersions: Versions[1], newScope: String[1], oldScope: String[1], expectedPrevVersion: String[1], expectedVersion: String[1], expectedSize: Integer[1]): Version[1]
{
    let newVersions = $oldVersions->generateDiffFromVersionsAndScopes($newScope, $oldScope, [], [], [], '@type', 'version');
    let versions = $newVersions.versions;
    assertEquals(2, $versions->size());
    let oldVersion = $versions->at(0);
    assertOldVersion($oldVersion, $expectedPrevVersion);
    let newVersion = $versions->at(1);
    assertNewVersion($newVersion, $expectedPrevVersion, $expectedVersion, $expectedSize);
    $newVersion;
}

function <<access.private>> meta::pure::changetoken::tests::assertOldVersion(version: Version[1], expectedVersion: String[1]): Boolean[1]
{
    assertEmpty($version.prevVersion);
    assertEmpty($version.changeTokens);
    assertEquals($expectedVersion, $version.version);
}

function <<access.private>> meta::pure::changetoken::tests::assertNewVersion(version: Version[1], expectedPrevVersion: String[1], expectedVersion: String[1], expectedSize: Integer[1]): Boolean[1]
{
    assertEquals($expectedPrevVersion, $version.prevVersion);
    assertEquals($expectedVersion, $version.version);
    let changeTokens = $version.changeTokens;
    assertEquals($expectedSize, $changeTokens->size());
}

function <<access.private>> meta::pure::changetoken::tests::assertAddedClass(changeTokens: ChangeToken[*], index: Integer[1], expectedClass: String[1]): Boolean[1]
{
    let addedClass = $changeTokens->at($index)->cast(@AddedClass);
    assertEquals($expectedClass, $addedClass.class);
}

function <<access.private>> meta::pure::changetoken::tests::assertAddField(changeTokens: ChangeToken[*], index: Integer[1], expectedClass: String[1], expectedFieldName: String[1], expectedFieldType: String[1], expectedSafeCast: Boolean[1], expectedDefaultValue: String[1]): Boolean[1]
{
    let addField = $changeTokens->at($index)->cast(@AddField);
    assertEquals($expectedClass, $addField.class);
    assertEquals($expectedFieldName, $addField.fieldName);
    assertEquals($expectedFieldType, $addField.fieldType);
    assertEquals($expectedSafeCast, $addField.safeCast);
    let defaultValue = $addField.defaultValue->cast(@ConstValue);
    assertEquals($expectedDefaultValue->parseJSON()->sort()->toCompactJSONString(), $defaultValue.value->toOne()->cast(@JSONElement)->sort()->toCompactJSONString());
}

function <<test.Test>> meta::pure::changetoken::tests::testStripVersionQualifier(): Boolean[1]
{
    assertStripVersionQualifier('aa::bb::cc::ABC', 'aa::bb::cc::zz::yy::vX_X_X::ABC');
    assertStripVersionQualifier('aa::ABC', 'aa::zz::yy::vX_X_X::ABC');
    assertStripVersionQualifier('ABC', 'zz::yy::vX_X_X::ABC');
    assertStripVersionQualifier('yy::vX_X_X::ABC', 'yy::vX_X_X::ABC');
    assertStripVersionQualifier('', 'zz:yy::vX_X_X');
    assertStripVersionQualifier('nn', 'nn:zz:yy::vX_X_X');
    assertStripVersionQualifier('aa::ABC', 'aa::bb::cc::vX_X_X::zz::yy::vX_X_X::ABC');
    assertStripVersionQualifier('aa::nn::ABC', 'aa::bb::cc::vX_X_X::nn:zz::yy::vX_X_X::ABC');
    assertStripVersionQualifier('2024-01-19T18:30:00+0000', '2024-01-19T18:30:00+0000');
}

function <<access.private>> meta::pure::changetoken::tests::assertStripVersionQualifier(expected: String[1], input: String[1]): Boolean[1]
{
    assertEquals($expected, $input->stripVersionQualifier());
}

function <<test.Test>> meta::pure::changetoken::tests::testGetTokens(): Boolean[1]
{
    let classes = [meta::pure::changetoken::tests::old::entities::vX_X_X]->packageClassesRecursive();
    let tokens = getHashTokens($classes, 'version');
    assertEquals(['meta::pure::changetoken::tests::OldSampleClass', 'xyz', 'String[1]'], $tokens);
}
