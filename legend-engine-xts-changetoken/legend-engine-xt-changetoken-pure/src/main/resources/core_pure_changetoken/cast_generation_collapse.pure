// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::json::*;
import meta::pure::changetoken::cast_generation::collapse::*;

function meta::pure::changetoken::cast_generation::collapse::collapse(input: JSONElement[1], typeKeyName: String[1]): JSONElement[1]
{
    let o = $input->cast(@JSONObject);
    newJSONObject($o.keyValuePairs->map(kv | ^JSONKeyValue(key = $kv.key, value = if($kv.key.value == 'versions', | $kv.value->collapseVersions($typeKeyName), | $kv.value))));
}

function <<access.private>> meta::pure::changetoken::cast_generation::collapse::collapseVersions(input: JSONElement[1], typeKeyName: String[1]): JSONElement[1]
{
    let a = $input->cast(@JSONArray);
    ^JSONArray(values = $a.values->map(o | $o->collapseVersion($typeKeyName)));
}

function <<access.private>> meta::pure::changetoken::cast_generation::collapse::collapseVersion(input: JSONElement[1], typeKeyName: String[1]): JSONElement[1]
{
    let o = $input->cast(@JSONObject);
    newJSONObject($o.keyValuePairs->map(kv | ^JSONKeyValue(key = $kv.key, value = if($kv.key.value == 'changeTokens', | $kv.value->collapseChangeTokens($typeKeyName), | $kv.value))));
}

function <<access.private>> meta::pure::changetoken::cast_generation::collapse::collapseChangeTokens(input: JSONElement[1], typeKeyName: String[1]): JSONElement[1]
{
    let a = $input->cast(@JSONArray);
    ^JSONArray(values = $a.values->map(o | $o->collapseChangeToken($typeKeyName)));
}

function <<access.private>> meta::pure::changetoken::cast_generation::collapse::collapseChangeToken(input: JSONElement[1], typeKeyName: String[1]): JSONElement[1]
{
    let o = $input->cast(@JSONObject);
    newJSONObject($o.keyValuePairs->map(kv | ^JSONKeyValue(key = $kv.key, value = if($kv.key.value == 'defaultValue', | $kv.value->collapseDefaultValue($typeKeyName), | $kv.value))));
}

function <<access.private>> meta::pure::changetoken::cast_generation::collapse::collapseDefaultValue(input: JSONElement[1], typeKeyName: String[1]): JSONElement[1]
{
    let o = $input->cast(@JSONObject);
    newJSONObject($o.keyValuePairs->map(kv | ^JSONKeyValue(key = $kv.key, value = if($kv.key.value == 'value', | $kv.value->collapseValue($typeKeyName), | $kv.value))));
}

function meta::pure::changetoken::cast_generation::collapse::collapseValue(input: JSONElement[1], typeKeyName: String[1]): JSONElement[1]
{
    $input->fromJSON(JSONElement, ^JSONDeserializationConfig(typeKeyName = $typeKeyName, failOnUnknownProperties = true))->cast(@JSONElement)->toOne();
}
