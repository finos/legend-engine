// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::meta::external::query::sql::metamodel::*;

Class meta::external::query::sql::metamodel::Node
{
}

Class meta::external::query::sql::metamodel::Statement extends meta::external::query::sql::metamodel::Node
{
}

Class meta::external::query::sql::metamodel::Query extends meta::external::query::sql::metamodel::Statement
{
  queryBody: meta::external::query::sql::metamodel::QueryBody[1];
  limit: meta::external::query::sql::metamodel::Limit[0..1];
  orderBy: meta::external::query::sql::metamodel::OrderBy[0..1];
}

Class meta::external::query::sql::metamodel::Relation extends meta::external::query::sql::metamodel::Node
{
}

Class meta::external::query::sql::metamodel::QueryBody extends meta::external::query::sql::metamodel::Relation
{
}

Class meta::external::query::sql::metamodel::QuerySpecification extends meta::external::query::sql::metamodel::QueryBody
{
  select: meta::external::query::sql::metamodel::Select[1];
  from: meta::external::query::sql::metamodel::Relation[*];
  where: meta::external::query::sql::metamodel::Expression[0..1];
}

Class meta::external::query::sql::metamodel::Select extends meta::external::query::sql::metamodel::Node
{
  distinct: Boolean[1];
  selectItems: meta::external::query::sql::metamodel::SelectItem[*];
}

Class meta::external::query::sql::metamodel::SelectItem extends meta::external::query::sql::metamodel::Node
{
}

Class meta::external::query::sql::metamodel::AllColumns extends meta::external::query::sql::metamodel::SelectItem
{
  prefix: String[0..1];
}

Class meta::external::query::sql::metamodel::SingleColumn extends meta::external::query::sql::metamodel::SelectItem
{
  prefix: meta::external::query::sql::metamodel::Identifier[0..1];
  expression: meta::external::query::sql::metamodel::Expression[1];
}

Class meta::external::query::sql::metamodel::Table extends meta::external::query::sql::metamodel::QueryBody
{
  name: meta::external::query::sql::metamodel::Identifier[1..*];
}

Class meta::external::query::sql::metamodel::Expression extends meta::external::query::sql::metamodel::Node
{
}

Class meta::external::query::sql::metamodel::Identifier extends meta::external::query::sql::metamodel::Expression
{
  value: String[1];
  delimited: Boolean[1];
}

Class meta::external::query::sql::metamodel::Literal extends meta::external::query::sql::metamodel::Expression
{
}

Class meta::external::query::sql::metamodel::AllRows extends meta::external::query::sql::metamodel::Expression
{
}

Class meta::external::query::sql::metamodel::Limit extends meta::external::query::sql::metamodel::Node
{
  rowCount: meta::external::query::sql::metamodel::Expression[1];
}

Class meta::external::query::sql::metamodel::LongLiteral extends meta::external::query::sql::metamodel::Literal
{
  value: Integer[1];
}

Class meta::external::query::sql::metamodel::OrderBy extends meta::external::query::sql::metamodel::Node
{
  sortItems: meta::external::query::sql::metamodel::SortItem[*];
}

Class meta::external::query::sql::metamodel::SortItem extends meta::external::query::sql::metamodel::Node
{
  sortKey: meta::external::query::sql::metamodel::Expression[1];
  ordering: meta::external::query::sql::metamodel::SortItemOrdering[1];
  nullOrdering: meta::external::query::sql::metamodel::SortItemNullOrdering[1];
}

Class meta::external::query::sql::metamodel::ComparisonExpression extends meta::external::query::sql::metamodel::Expression
{
  left: meta::external::query::sql::metamodel::Expression[1];
  right: meta::external::query::sql::metamodel::Expression[1];
  operator: meta::external::query::sql::metamodel::ComparisonOperator[1];
}

Enum meta::external::query::sql::metamodel::SortItemOrdering
{
  ASCENDING,
  DESCENDING
}

Enum meta::external::query::sql::metamodel::SortItemNullOrdering
{
  FIRST,
  LAST,
  UNDEFINED
}

Enum meta::external::query::sql::metamodel::ComparisonOperator
{
  EQUAL,
  NOT_EQUAL,
  LESS_THAN,
  LESS_THAN_OR_EQUAL,
  GREATER_THAN,
  GREATER_THAN_OR_EQUAL
}
