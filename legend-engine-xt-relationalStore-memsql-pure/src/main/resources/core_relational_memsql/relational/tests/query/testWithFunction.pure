// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
import meta::relational::runtime::*;
import meta::relational::functions::sqlstring::*;

function <<test.Test>> meta::relational::memsql::tests::query::function::testJoinStringFunction_MemSQL():Boolean[1]
{
   let res3 = toSQLString(|Person.all()->filter(p|$p.firstName == 'John')->map(m|[$m.firstName, $m.lastName]->joinStrings('#') + ' ' + [$m.firstName, $m.lastName]->joinStrings()), simpleRelationalMapping, DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
   assertEquals('select concat(concat(`root`.FIRSTNAME,\'#\',`root`.LASTNAME), \' \', concat(`root`.FIRSTNAME, `root`.LASTNAME)) from personTable as `root` where `root`.FIRSTNAME = \'John\'', $res3);
}

function <<test.Test>> meta::relational::memsql::tests::query::function::testWrapReservedWord_MemSQL():Boolean[1]
{
   let fn = {|Person.all()->project([s | $s.age], ['KEY'])};
   let s = toSQLString($fn, simpleRelationalMappingPersonForMemSQL, meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
   assertEquals('select `personTable_d#2_d_m1`.`key` as `KEY` from personTable as `root` left outer join personTable as `personTable_d#2_d_m1` on (`root`.`key` = `personTable_d#2_d_m1`.`key`)',$s);
}
