// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::mapping::*;
import meta::relational::functions::sqlstring::*;
import meta::relational::tests::mapping::sqlFunction::model::domain::*;
import meta::relational::tests::mapping::sqlFunction::model::mapping::*;

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::parseDate::testToSQLStringWithParseDateInQuery_MemSQL():Boolean[1]
{
  let memSQLSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.string2TimestampStr->parseDate()], ['timestamp']), testMapping, meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());  
  assertEquals('select to_timestamp(`root`.string2date,\'YYYY-MM-DD HH24:MI:SS\') as `timestamp` from dataTable as `root`',$memSQLSql->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::parseDate::testToSQLStringParseDate_MemSQL():Boolean[1]
{
  let trialSQL = toSQLString(|SqlFunctionDemo.all()->project([s | $s.string2TimestampFormat], ['timestamp']), testMapping, meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
  assertEquals('select to_timestamp(`root`.stringDateTimeFormat,\'YYYY-MM-DD HH24:MI:SS\') as `timestamp` from dataTable as `root`',$trialSQL->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::rtrim::testToSQLStringRtrim_MemSQL():Boolean[1]
{
   let memSQLSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.rtrimResult], ['rtrim']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
   assertEquals('select rtrim(`root`.string2) as `rtrim` from dataTable as `root`',$memSQLSql);
}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::trim::testTrim_MemSQL():Boolean[1]
{
   let sMemsql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.trimResult], ['trim']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());

   assertEquals('select trim(`root`.string2) as `trim` from dataTable as `root`',$sMemsql);
}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::stringToFloat::testToSQLStringStringToFloat_MemSQL():Boolean[1]
{
   let memSql = toSQLString(|SqlFunctionDemo.all()->project([s | $s.string2Float], ['string2Float']),
                         testMapping,
                         meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
   assertEquals('select cast(`root`.string2float as decimal) as `string2Float` from dataTable as `root`',$memSql);
}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::toString::testToSQLStringToString_MemSQL():Boolean[1]
{
    let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.int1String], ['toString']),
                                                 testMapping,
                                                 meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
    assertEquals('select cast(`root`.int1 as char) as `toString` from dataTable as `root`',$s);
}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::parseInteger::testToSQLStringParseInteger_MemSQL():Boolean[1]
{
   let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.string2Integer], ['parseInteger']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
   assertEquals('select cast(`root`.string2Integer as signed integer) as `parseInteger` from dataTable as `root`',$s);

}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::parseInteger::testToSQLStringDateDiff_MemSQL():Boolean[1]
{

   let da = meta::pure::functions::date::date(2017,3,1);
   let db = meta::pure::functions::date::date(2017,4,1);
   let s = toSQLString(|SqlFunctionDemo.all()->project([s | dateDiff($da, $db, DurationUnit.DAYS)], ['dateDiff']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
   assertEquals('select (datediff(\'2017-04-01\' , \'2017-03-01\')) as `dateDiff` from dataTable as `root`',$s);
}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::parseInteger::testToSQLStringDateDiffInSeconds_MemSQL():Boolean[1]
{
   let da = %2017-03-01T19:09:20;
   let db = %2017-03-01T20:08:08;
   let s = toSQLString(|SqlFunctionDemo.all()->project([s | dateDiff($da, $db, DurationUnit.SECONDS)], ['dateDiff']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.MemSQL,
                                                meta::relational::extension::relationalExtensions());
   assertEquals('select (time_to_sec(timediff(\'2017-03-01 20:08:08\' , \'2017-03-01 19:09:20\'))) as `dateDiff` from dataTable as `root`',$s);
}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::parseInteger::testToSQLStringConvertVarchar128_MemSQL():Boolean[1]
{


   let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.convertVarchar128], ['convertVarchar128']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
   assertEquals('select convert(`root`.int1, CHAR) as `convertVarchar128` from dataTable as `root`',$s);

}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::stringToDate::testToSQLStringconvertToDate_MemSQL():Boolean[1]
{

   let s =toSQLString(|SqlFunctionDemo.all()->project([s | $s.convertToDate1], ['convertToDate']),
                                                       testMapping,
                                                       meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());

   assertEquals('select cast( to_date(`root`.stringDateFormat,\'YYYY-MM-DD\') as date) as `convertToDate` from dataTable as `root`', $s);
}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::stringToDate::testToSQLStringconvertToDateUserDefinedFormat_MemSQL():Boolean[1]
{

   let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.convertToDateUserDefinedFormat1], ['convertToDateUserDefinedFormat']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
   assertEquals('select cast( to_date(`root`.stringUserDefinedDateFormat,\'MMMYYYY\') as date) as `convertToDateUserDefinedFormat` from dataTable as `root`', $s);
}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::indexOf::testToSQLStringIndexOf_MemSQL():Boolean[1]
{
    let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.indexOfResult], ['indexOf']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
    assertEquals('select LOCATE(\'o\', \'String Random\') as `indexOf` from dataTable as `root`',$s);
}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::position::testToSQLStringPosition_MemSQL():Boolean[1]
{
    let s = toSQLString(|SqlFunctionDemo.all()->project([s | $s.indexOfResult], ['position']),
                                                testMapping,
                                                meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
    assertEquals('select LOCATE(\'o\', \'String Random\') as `position` from dataTable as `root`',$s);
}

function <<test.Test>> meta::relational::memsql::tests::mapping::sqlFunction::base64::testBase64_MemSQL():Boolean[1]
{
    let s = toSQLString(
      |SqlFunctionDemo.all()->project([s | $s.encodeBase64Result, s | $s.decodeBase64Result], ['res1', 'res2']),
      testMapping,
      meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
    assertEquals('select cast(to_base64(`root`.alphaNumericString) as char) as `res1`, cast(from_base64(cast(to_base64(`root`.alphaNumericString) as char)) as char) as `res2` from dataTable as `root`', $s);
}
