// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::functions::sqlstring::*;
import meta::relational::runtime::*;
import meta::relational::functions::asserts::*;
import meta::relational::functions::sqlstring::*;

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testToSQLStringWithAdjust_MemSQL():Boolean[1]
{
   let s1 = toSQLString(|Trade.all()->filter(t|$t.settlementDateTime > today()->adjust(10000000, DurationUnit.MICROSECONDS))->project([t| $t.id, t| $t.settlementDateTime] ,['id', 'settlementDateTime']), 
         meta::relational::tests::simpleRelationalMapping, 
         meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
   
   assertEquals('select `root`.ID as `id`, `root`.settlementDateTime as `settlementDateTime` from tradeTable as `root` where (`root`.settlementDateTime is not null and `root`.settlementDateTime > adddate(curdate(), INTERVAL 10000000 MICROSECOND))', $s1);
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testToSQLStringJoinStrings_MemSQL():Boolean[1]
{
   let fn = {|Firm.all()->groupBy([f|$f.legalName],
                                     agg(x|$x.employees.firstName,y|$y->joinStrings('*')),
                                     ['legalName', 'employeesFirstName']
                                  )};
   
   let memSqlSql = toSQLString($fn, meta::relational::tests::simpleRelationalMapping, meta::relational::runtime::DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
   assertEquals('select `root`.LEGALNAME as `legalName`, group_concat(`personTable_d#4_d_m1`.FIRSTNAME separator \'*\') as `employeesFirstName` from firmTable as `root` left outer join personTable as `personTable_d#4_d_m1` on (`root`.ID = `personTable_d#4_d_m1`.FIRMID) group by `legalName`', $memSqlSql);
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testToSQLStringWithLength_MemSQL():Boolean[1]
{
   let memsql = toSQLString(|Person.all()->project(p|length($p.firstName), 'nameLength'), simpleRelationalMapping, DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
   assertEquals('select char_length(`root`.FIRSTNAME) as `nameLength` from personTable as `root`', $memsql);
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testToSQLStringWithPosition_MemSQL():Boolean[1]
{
   let memsql = toSQLString(
              |meta::relational::tests::mapping::propertyfunc::model::domain::Person.all()->project(p|$p.firstName, 'firstName'),
               meta::relational::tests::mapping::propertyfunc::model::mapping::PropertyfuncMapping, DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());

   assertEquals('select substring(`root`.FULLNAME, 0, LOCATE(\',\', `root`.FULLNAME)-1) as `firstName` from personTable as `root`', $memsql);
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testToSQLStringWithStdDevSample_MemSQL():Boolean[1]
{
   let s1 = toSQLString(
           |meta::relational::tests::mapping::sqlFunction::model::domain::SqlFunctionDemo.all()->project(p|$p.float1StdDevSample, 'stdDevSample'),
            meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping, DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());

   assertEquals('select stddev_samp(`root`.int1) as `stdDevSample` from dataTable as `root`', $s1);
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testToSQLStringWithStdDevPopulation_MemSQL():Boolean[1]
{
   let s1 = toSQLString(
           |meta::relational::tests::mapping::sqlFunction::model::domain::SqlFunctionDemo.all()->project(p|$p.float1StdDevPopulation, 'stdDevPopulation'),
            meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping, DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
            
   assertEquals('select stddev_pop(`root`.int1) as `stdDevPopulation` from dataTable as `root`', $s1);
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testToSqlGenerationFirstDayOfMonth_MemSQL():Boolean[1]
{
   let expected = [
      pair(DatabaseType.MemSQL, 'select subdate(`root`.tradeDate, INTERVAL dayofmonth(`root`.tradeDate) - 1 DAY)  as `date` from tradeTable as `root`')
   ];
   
   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;
               
      let result = toSQLString(
         |Trade.all()
            ->project(col(t|$t.date->firstDayOfMonth(), 'date')),
         simpleRelationalMapping, 
         $driver, meta::relational::extension::relationalExtensions());

      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testToSqlGenerationFirstDayOfYear_MemSQL():Boolean[1]
{
   let expected = [
      pair(DatabaseType.MemSQL, 'select subdate(`root`.tradeDate, INTERVAL dayofyear(`root`.tradeDate) - 1 DAY) as `date` from tradeTable as `root`')
   ];
   
   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;
               
      let result = toSQLString(
         |Trade.all()
            ->project(col(t|$t.date->firstDayOfYear(), 'date')),
         simpleRelationalMapping, 
         $driver, meta::relational::extension::relationalExtensions());
   
      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testToSqlGenerationFirstDayOfThisYear_MemSQL():Boolean[1]
{
   let expected = [
      pair(DatabaseType.MemSQL, 'select subdate(curdate(), INTERVAL dayofyear(current_date()) - 1 DAY) as `date` from tradeTable as `root`')
   ];
   
   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;
               
      let result = toSQLString(
         |Trade.all()
            ->project(col(t|firstDayOfThisYear(), 'date')),
         simpleRelationalMapping, 
         $driver, meta::relational::extension::relationalExtensions());
   
      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testToSqlGenerationFirstDayOfThisQuarter_MemSQL():Boolean[1]
{
   let expected = [
      pair(DatabaseType.MemSQL, 'select adddate(subdate(curdate(), INTERVAL dayofyear(current_date()) - 1 DAY), INTERVAL (quarter(curdate()) -1) QUARTER) as `date` from tradeTable as `root`')
   ];
   
   $expected->map(p|
      let driver = $p.first;
      let expectedSql = $p.second;
               
      let result = toSQLString(
         |Trade.all()
            ->project(col(t|firstDayOfThisQuarter(), 'date')),
         simpleRelationalMapping, 
         $driver, meta::relational::extension::relationalExtensions());
   
      assertEquals($expectedSql, $result, '\nSQL not as expected for %s\n\nexpected: %s\nactual:   %s', [$driver, $expectedSql, $result]);
   )->distinct() == [true];
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testToSqlGenerationFirstDayOfQuarter_MemSQL():Boolean[1]
{
   testToSqlGenerationFirstDayOfQuarter(DatabaseType.MemSQL, 'select adddate(subdate(`root`.tradeDate, INTERVAL dayofyear(`root`.tradeDate) - 1 DAY), INTERVAL (quarter(date(`root`.tradeDate)) -1) QUARTER) as `date` from tradeTable as `root`');
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testSqlGenerationDivide_MemSQL():Boolean[1]
{
   let query = {|Trade.all()->filter(t | $t.id == 2)->map(t | $t.quantity->divide(1000000))};
   let expectedMemSQL = 'select ((1.0 * `root`.quantity) / 1000000) from tradeTable as `root` left outer join (select `root`.trade_id as trade_id, max(`root`.eventDate) as maxTradeEventDate from tradeEventTable as `root` group by `root`.trade_id) as `tradeEventViewMaxTradeEventDate_d#4_d#4_m5` on (`root`.ID = `tradeEventViewMaxTradeEventDate_d#4_d#4_m5`.trade_id) where `root`.ID = 2';
   
   let resultMemSQL = meta::relational::functions::sqlstring::toSQLString($query, simpleRelationalMapping, DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
   assertSameSQL($expectedMemSQL, $resultMemSQL);
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testSubstring_MemSQL() : Boolean[1]
{
  let runtime = ^meta::pure::runtime::Runtime(connections = ^TestDatabaseConnection(element = meta::relational::tests::db,type = DatabaseType.MemSQL));

   let result = toSQLStringPretty({|Firm.all()->project([
        c | $c.legalName,
        c | substring($c.legalName, 0, 5)
      ],
      [
        'legalName',
        'subname'
      ]
    )},simpleRelationalMapping, $runtime, meta::relational::extension::relationalExtensions());

   assertEquals('select 	`root`.LEGALNAME as `legalName`, 	substring(`root`.LEGALNAME, 0, 5) as `subname` from firmTable as `root`', $result->replace('\n', ''));
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testSubstringWithNonZeroIndex_MemSQL() : Boolean[1]
{
  let runtime = ^meta::pure::runtime::Runtime(connections = ^TestDatabaseConnection(element = meta::relational::tests::db,type = DatabaseType.MemSQL));

   let result = toSQLStringPretty({|Firm.all()->project([
        c | $c.legalName,
        c | substring($c.legalName, 2, 3)
      ],
      [
        'legalName',
        'subname'
      ]
    )},simpleRelationalMapping, $runtime, meta::relational::extension::relationalExtensions());

   assertEquals('select 	`root`.LEGALNAME as `legalName`, 	substring(`root`.LEGALNAME, 2, 3) as `subname` from firmTable as `root`', $result->replace('\n', ''));
}

function <<test.Test>> meta::relational::memsql::tests::functions::sqlstring::testIsDistinctSQLGeneration_MemSQL():Boolean[1]
{
   let func = {|Firm.all()->groupBy(
      [t|$t.legalName],
      [agg(x|$x.employees.firstName,y|$y->isDistinct())],
      ['LegalName', 'IsDistinctFirstName']
   )};

   let memSql = toSQLString($func, simpleRelationalMapping, DatabaseType.MemSQL, meta::relational::extension::relationalExtensions());
   assertSameSQL('select `root`.LEGALNAME as `LegalName`, count(distinct(`personTable_d#4_d_m1`.FIRSTNAME)) = count(`personTable_d#4_d_m1`.FIRSTNAME) as `IsDistinctFirstName` from firmTable as `root` left outer join personTable as `personTable_d#4_d_m1` on (`root`.ID = `personTable_d#4_d_m1`.FIRMID) group by `LegalName`', $memSql);
}
