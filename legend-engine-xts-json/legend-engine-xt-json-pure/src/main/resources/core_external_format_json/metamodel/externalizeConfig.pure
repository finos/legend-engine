// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::shared::*;

import meta::external::format::json::metamodel::externalize::*;

Class meta::external::format::json::metamodel::externalize::JsonSchemaExternalizeConfig extends ExternalFormatExternalizeConfig
{
  {doc.doc = 'Give a custom typeKey name. Defaults to @Type'}
  typeKeyName : String[1] = '@type';

  {doc.doc = 'Set to true to include type info of the serialized class'}
  includeType: Boolean[1] = false;

  {doc.doc = 'Set to True to include path to element for Enums'}
  includeEnumType: Boolean[1] = false;

  {doc.doc = 'Give a valid string of dateTime format to serialize the dateTime properties respectively'}
  dateTimeFormat: String[0..1];

  removePropertiesWithNullValues: Boolean[1] = false;
  removePropertiesWithEmptySets: Boolean[1] = false;

  {doc.doc = 'Set to true to include fully qualified type info of the serialized class'}
  fullyQualifiedTypePath: Boolean[1] = true;
}

function meta::external::format::json::metamodel::externalize::defaultExternalizeConfig(): JsonSchemaExternalizeConfig[1]
{
  ^JsonSchemaExternalizeConfig();
}