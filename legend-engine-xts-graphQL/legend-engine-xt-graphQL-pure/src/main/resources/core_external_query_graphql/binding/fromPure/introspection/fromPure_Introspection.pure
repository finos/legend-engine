###Pure
import meta::pure::functions::doc::*;
import meta::external::query::graphQL::metamodel::introspection::*;
import meta::external::query::graphQL::transformation::introspection::*;
import meta::external::query::graphQL::binding::fromPure::introspection::*;

function meta::external::query::graphQL::binding::fromPure::introspection::scanTypes(t:Type[1], processed:Type[*]):Type[*]
{
  let processedContainsType = $processed->contains($t);
  let np = if($processedContainsType, | $processed, | $processed->concatenate($t));
  if (!$processedContainsType && $t->instanceOf(Class),    
    | let propTypes = $t->cast(@Class<Any>)
                          ->allProperties().genericType.rawType
                          ->distinct()
                          ->concatenate($t->cast(@Class<Any>)->meta::pure::functions::meta::findAllSpecializations())
                          ->filter(t|($t->instanceOf(Class) || $t->instanceOf(meta::pure::metamodel::type::Enumeration)) && $t != Any)
                          ->distinct();
        $propTypes->fold(
          { type,accum | 
              $accum->concatenate(
                $type->meta::external::query::graphQL::binding::fromPure::introspection::scanTypes($accum)
              )->distinct();
          },$np
        );,
      | $np
  );
}

function meta::external::query::graphQL::binding::fromPure::introspection::buildGraphQLSchemaFromPureTypes(cl:Class<Any>[1]):BaseGraphQLType[1]
{
  let classes = $cl->scanTypes([]);
  let res = transformPureToGraphQL($classes);

  ^BaseGraphQLType(
    __schema = ^__Schema(
                  queryType = $res->filter(c|$c.name == $cl.name)->toOne(),
                  types = $res,
                  directives = [
                    ^__Directive(name='echo', description='A preliminary test directive to ensure the working of directives in a query',locations=[__DirectiveLocation.FIELD]),
                    ^__Directive(
                      name='totalCount', 
                      description='Directive to return total number of records for a field excluding any pagination i.e. limit, offset, pageNumber, pageSize, etc. parameters while computing but including all other specified filters such as name, age, country, etc. The directive is currently supported at a root level field.',
                      locations=[__DirectiveLocation.FIELD]
                    )
                  ]
                )
  );
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::transformPureToGraphQL(types:Type[*]):__Type[*]
{
  // PASS 1
  let res = $types->map(t|
    pair(
      $t.name->toOne(),
      $t->match([
        c:Class<Any>[1] | ^__Type(
                            kind = __TypeKind.OBJECT,
                            name = $c.name,
                            description = $c->cast(@AnnotatedElement)->getDocs()->joinStrings('\n')
                          ),
        e:Enumeration<Any>[1] | ^__Type(
                                kind = __TypeKind.ENUM,
                                name = $t.name->toOne(),
                                description = $e->cast(@AnnotatedElement)->getDocs()->joinStrings('\n')
                              )
      ])
    )
  )->concatenate(
    [
      pair('String',^__Type(kind = __TypeKind.SCALAR,name = 'String')),
      pair('Float',^__Type(kind = __TypeKind.SCALAR,name = 'Float')),
      pair('Integer',^__Type(kind = __TypeKind.SCALAR,name = 'Int')),
      pair('Boolean',^__Type(kind = __TypeKind.SCALAR,name = 'Boolean')),
      pair('Date',^__Type(kind = __TypeKind.SCALAR,name = 'Date')),
      pair('DateTime',^__Type(kind = __TypeKind.SCALAR,name = 'DateTime')),
      pair('Decimal',^__Type(kind = __TypeKind.SCALAR,name = 'BigDecimal')),
      pair('StrictDate',^__Type(kind = __TypeKind.SCALAR,name = 'StrictDate')),
      pair('Number',^__Type(kind = __TypeKind.SCALAR,name = 'Number'))
    ]
  )->newMap();

  // PASS 2
  $types->map(t|
    let type = $res->get($t.name->toOne())->toOne();
    $t->match(
      [
        c:Class<Any>[1] |
            let fields = $c->allProperties()->map(p|
                                      ^__Field
                                      (
                                        name = $p.name->toOne(),
                                        isDeprecated = false,
                                        type = buildType($p, $res),
                                        description = $p->cast(@AnnotatedElement)->getDocs()->joinStrings('\n'),
                                        args = if ($p->instanceOf(QualifiedProperty),
                                                    |$p->functionType().parameters->evaluateAndDeactivate()->tail()->map(parameter|
                                                                    ^__InputValue
                                                                    (
                                                                      name=$parameter.name,
                                                                      type=buildType($parameter,$res)
                                                                    );
                                                                  ),
                                                    |[]
                                               )
                                      );
                                   );
            $type->mutateAdd('fields', $fields);,
          e:Enumeration<Any>[1] |
            let values = $e->enumValues()->map(v|
              ^__EnumValue(
                isDeprecated=false,
                name = $v->toString(),
                description = $v->cast(@AnnotatedElement)->getDocs()->joinStrings('\n')
              )
            );
            $type->mutateAdd('enumValues',$values);
      ]
    );
    $type;
  );

  $res->values()->meta::pure::functions::collection::sortBy(t|$t.name->toOne());
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::buildType(parameter:VariableExpression[1], map:Map<String,__Type>[1]):__Type[1]
{
  let mul = $parameter.multiplicity;
  let type = $map->get($parameter.genericType.rawType.name->toOne())->toOne();
  if ($mul == ZeroOne,
    | $type,
    | if ($mul == PureOne,
      | wrap($type, __TypeKind.NON_NULL),
      | wrap($type, __TypeKind.LIST)
    )
  );
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::buildType(func:Function<Any>[1], map:Map<String,__Type>[1]):__Type[1]
{
  let mul = $func->functionReturnMultiplicity();
  let type = $map->get($func->functionReturnType().rawType.name->toOne())->toOne();
  if ($mul == ZeroOne,
    | $type,
    | if ($mul == PureOne,
      | wrap($type, __TypeKind.NON_NULL),
      | wrap($type, __TypeKind.LIST)
    )
  );
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::wrap(type:__Type[1], kind:__TypeKind[1]):__Type[1]
{
  ^__Type
  (
    kind = $kind,
    ofType = $type
  )
}
