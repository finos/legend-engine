###Pure
import meta::external::query::graphQL::binding::*;
import meta::pure::functions::doc::*;
import meta::external::query::graphQL::metamodel::introspection::*;
import meta::external::query::graphQL::transformation::introspection::*;
import meta::external::query::graphQL::binding::fromPure::introspection::*;

function meta::external::query::graphQL::binding::fromPure::introspection::scanTypes(t:Type[1], processed:Type[*]):Type[*]
{
  let processedContainsType = $processed->contains($t);
  let np = if($processedContainsType, | $processed, | $processed->concatenate($t));
  if (!$processedContainsType && $t->instanceOf(Class),    
    | let propTypes = $t->cast(@Class<Any>)
                          ->allProperties().genericType.rawType
                          ->distinct()
                          ->concatenate($t->cast(@Class<Any>)->meta::pure::functions::meta::findAllSpecializations())
                          ->filter(t|($t->instanceOf(Class) || $t->instanceOf(meta::pure::metamodel::type::Enumeration)) && $t != Any)
                          ->distinct();
        $propTypes->fold(
          { type,accum | 
              $accum->concatenate(
                $type->meta::external::query::graphQL::binding::fromPure::introspection::scanTypes($accum)
              )->distinct();
          },$np
        );,
      | $np
  );
}

function meta::external::query::graphQL::binding::fromPure::introspection::buildGraphQLSchemaFromPureTypes(cl:Class<Any>[1]):BaseGraphQLType[1]
{
  let classes = $cl->scanTypes([]);
  let res = transformPureToGraphQL($classes);

  ^BaseGraphQLType(
    __schema = ^__Schema(
                  queryType = $res->filter(c|$c.name == $cl.name)->toOne(),
                  types = $res,
                  directives = [
                    ^__Directive(name='echo', description='A preliminary test directive to ensure the working of directives in a query',locations=[__DirectiveLocation.FIELD]),
                    ^__Directive(
                      name='totalCount', 
                      description='Directive to return total number of records for a field excluding any pagination i.e. limit, offset, pageNumber, pageSize, etc. parameters while computing but including all other specified filters such as name, age, country, etc. The directive is currently supported at a root level field.',
                      locations=[__DirectiveLocation.FIELD]
                    )
                  ]
                )
  );
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::transformPureToGraphQL(types:Type[*]):__Type[*]
{
  // PASS 1
  let res = $types->map(t|
    pair(
      $t.name->toOne(),
      $t->match([
        c:Class<Any>[1] | ^__Type(
                            kind = __TypeKind.OBJECT,
                            name = $c.name,
                            description = $c->cast(@AnnotatedElement)->getDocs()->joinStrings('\n')
                          ),
        e:Enumeration<Any>[1] | ^__Type(
                                kind = __TypeKind.ENUM,
                                name = $t.name->toOne(),
                                description = $e->cast(@AnnotatedElement)->getDocs()->joinStrings('\n')
                              )
      ])
    )
  )->concatenate(
    $types->map(t|
      if($t->instanceOf(Class) && !$t->hasGraphQLStereotype('Query'),
        | pair(
            $t.name->toOne() + '_bool_exp',
            ^__Type(
              kind = __TypeKind.INPUT_OBJECT,
              name = $t->cast(@Class<Any>).name->toOne() + '_bool_exp',
              description = 'A logical extension of ' + $t.name->toOne() + ' object type for use in arguments for filtering'
            )
          ),
        | if($t->instanceOf(Enumeration),
            | pair(
                $t.name->toOne() + '_comparison_exp',
                ^__Type(
                  kind = __TypeKind.INPUT_OBJECT,
                  name = $t.name->toOne() + '_comparison_exp',
                  description = 'A logical extension of ' + $t.name->toOne() + ' enum type for use in arguments for filtering'
                )
              ),
            | []
          )
      ) 
    )
  )->concatenate(
    $types->map(t|
      if($t->instanceOf(Class) && !$t->hasGraphQLStereotype('Query'),
        | pair(
            $t.name->toOne() + '_exists_exp',
            ^__Type(
              kind = __TypeKind.INPUT_OBJECT,
              name = $t->cast(@Class<Any>).name->toOne() + '_exists_exp',
              description = 'A logical extension of ' + $t.name->toOne() + ' object type for use in arguments for filtering particularly where a property is list of given object type'
            )
          ),
        | []
      ) 
    )
  )->concatenate(
    [
      pair('String',^__Type(kind = __TypeKind.SCALAR,name = 'String')),
      pair('Float',^__Type(kind = __TypeKind.SCALAR,name = 'Float')),
      pair('Integer',^__Type(kind = __TypeKind.SCALAR,name = 'Int')),
      pair('Boolean',^__Type(kind = __TypeKind.SCALAR,name = 'Boolean')),
      pair('Date',^__Type(kind = __TypeKind.SCALAR,name = 'Date')),
      pair('DateTime',^__Type(kind = __TypeKind.SCALAR,name = 'DateTime')),
      pair('Decimal',^__Type(kind = __TypeKind.SCALAR,name = 'BigDecimal')),
      pair('StrictDate',^__Type(kind = __TypeKind.SCALAR,name = 'StrictDate')),
      pair('Number',^__Type(kind = __TypeKind.SCALAR,name = 'Number'))
    ]
  )->newMap();

  // PASS 2
  $types->map(t|
    let type = $res->get($t.name->toOne())->toOne();
    $t->match(
      [
        c:Class<Any>[1] |
            let fields = $c->allProperties()->filter(p|$p.genericType.rawType != Any)->map(p|
                                      ^__Field
                                      (
                                        name = $p.name->toOne(),
                                        isDeprecated = false,
                                        type = buildType($p, $res),
                                        description = $p->cast(@AnnotatedElement)->getDocs()->joinStrings('\n'),
                                        args = if ($p->instanceOf(QualifiedProperty),
                                                    |$p->functionType().parameters->evaluateAndDeactivate()->tail()->map(parameter|
                                                                    ^__InputValue
                                                                    (
                                                                      name=$parameter.name,
                                                                      type=buildType($parameter,$res)
                                                                    );
                                                                  )->concatenate(
                                                                    if($c->hasGraphQLStereotype('Query'),
                                                                    | ^__InputValue(type=$res->get($p->functionReturnType().rawType.name->toOne() + '_bool_exp')->toOne(),name='where'),
                                                                    | [])
                                                                  ),
                                                    |[]
                                               )
                                      );
                                   );
            $type->mutateAdd('fields', $fields);,
          e:Enumeration<Any>[1] |
            let values = $e->enumValues()->map(v|
              ^__EnumValue(
                isDeprecated=false,
                name = $v->toString(),
                description = $v->cast(@AnnotatedElement)->getDocs()->joinStrings('\n')
              )
            );
            $type->mutateAdd('enumValues',$values);
      ]
    );
    $type;
  );

  let m = customGraphQLScalarsToPrimitiveMappingForInput();

  // THIRD PASS
  $res->values()->map(
    t| if($t.kind == __TypeKind.OBJECT,
          | let newName = $t.name->toOne() + '_bool_exp';
            let newFields = $t.fields->map(f | 
              // if(unWrap($f.type).name->toOne()
                if( unWrap($f.type).kind != __TypeKind.SCALAR || unWrap($f.type).name->in($m->keys()) 
                  ,| ^__InputValue(
                      name = $f.name,
                      type = ^__Type(
                        kind= __TypeKind.INPUT_OBJECT, 
                        name= if(unWrap($f.type).kind->in([__TypeKind.SCALAR, __TypeKind.ENUM]), 
                                | unWrap($f.type).name->toOne() + '_comparison_exp', 
                                | if($f.type.kind == __TypeKind.LIST,
                                    | unWrap($f.type).name->toOne() + '_exists_exp',
                                    | unWrap($f.type).name->toOne() + '_bool_exp'
                                  )
                              )
                      )
                    )
                  ,| []
                )
            )->concatenate(
              ['_or', '_and']->map(s|
                ^__InputValue(
                  name=$s,
                  type=wrap(^__Type(kind=__TypeKind.INPUT_OBJECT, name = $t.name->toOne() + '_bool_exp'), __TypeKind.LIST)
                )
              )
            );
            let type = $res->get($newName);
            if($type->isNotEmpty(), | $type->toOne()->mutateAdd('inputFields',$newFields) , |[]);
            
            let existsName = $t.name->toOne() + '_exists_exp';
            let existsFields = ['_exists']->map(s|
                ^__InputValue(
                  name=$s,
                  type=wrap(^__Type(kind=__TypeKind.INPUT_OBJECT, name = $t.name->toOne() + '_bool_exp'), __TypeKind.NON_NULL)
                )
              );
            let existsType = $res->get($existsName);
            if($existsType->isNotEmpty(), | $existsType->toOne()->mutateAdd('inputFields',$existsFields) , |[]);
            
            $type;,
          | if($t.kind == __TypeKind.ENUM,
              | let newName = $t.name->toOne() + '_comparison_exp';
                let newFields = ['_eq', '_in']->map(s|
                    ^__InputValue(
                      name=$s,
                      type=^__Type(kind=__TypeKind.ENUM, name = $t.name->toOne())
                    )
                );
                let type = $res->get($newName);
                if($type->isNotEmpty(), | $type->toOne()->mutateAdd('inputFields',$newFields) , |[]);
                $type;,
              | []
            )
        )
  );

  let constant_bool_exp_fields = $m->keys()->map(s|
    ^__Type(
      name = $s + '_comparison_exp',
      kind = __TypeKind.INPUT_OBJECT
    )
  );

  $constant_bool_exp_fields->map(v|
    let extractedName = $v.name->toOne()->split('_')->at(0);
    let extractedType = $m->get($extractedName);
    let fields = [
      ^__InputValue(
        type = ^__Type(kind=__TypeKind.SCALAR, name = $extractedType),
        name = '_eq'
      ),
      ^__InputValue(
        type = wrap(^__Type(kind=__TypeKind.SCALAR, name = $extractedType), __TypeKind.LIST),
        name = '_in'
      )
    ];
    let typedFields = [
      pair($extractedName->in(['Int', 'Float', 'Number', 'Date', 'StrictDate', 'DateTime', 'BigDecimal']), ^__InputValue(type = ^__Type(kind=__TypeKind.SCALAR, name = $extractedType),name = '_lt')),
      pair($extractedName->in(['Int', 'Float', 'Number', 'Date', 'StrictDate', 'DateTime', 'BigDecimal']), ^__InputValue(type = ^__Type(kind=__TypeKind.SCALAR, name = $extractedType),name = '_lte')),
      pair($extractedName->in(['Int', 'Float', 'Number', 'Date', 'StrictDate', 'DateTime', 'BigDecimal']), ^__InputValue(type = ^__Type(kind=__TypeKind.SCALAR, name = $extractedType),name = '_gt')),
      pair($extractedName->in(['Int', 'Float', 'Number', 'Date', 'StrictDate', 'DateTime', 'BigDecimal']), ^__InputValue(type = ^__Type(kind=__TypeKind.SCALAR, name = $extractedType),name = '_gte')),
      pair($extractedName->in(['String']), ^__InputValue(type = ^__Type(kind=__TypeKind.SCALAR, name = $extractedType),name = '_contains')),
      pair($extractedName->in(['String']), ^__InputValue(type = ^__Type(kind=__TypeKind.SCALAR, name = $extractedType),name = '_eqIgnoreCase'))
    ]->filter(p | $p.first)->fold({a,b | $b->concatenate($a.second)},[]);
    $v->mutateAdd('inputFields',$fields->concatenate($typedFields));
  );

  $res->values()->concatenate($constant_bool_exp_fields)->meta::pure::functions::collection::sortBy(t|$t.name->toOne());
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::buildType(parameter:VariableExpression[1], map:Map<String,__Type>[1]):__Type[1]
{
  let mul = $parameter.multiplicity;
  let type = $map->get($parameter.genericType.rawType.name->toOne())->toOne();
  if ($mul == ZeroOne,
    | $type,
    | if ($mul == PureOne,
      | wrap($type, __TypeKind.NON_NULL),
      | wrap($type, __TypeKind.LIST)
    )
  );
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::buildType(func:Function<Any>[1], map:Map<String,__Type>[1]):__Type[1]
{
  let mul = $func->functionReturnMultiplicity();
  let type = $map->get($func->functionReturnType().rawType.name->toOne())->toOne();
  if ($mul == ZeroOne,
    | $type,
    | if ($mul == PureOne,
      | wrap($type, __TypeKind.NON_NULL),
      | wrap($type, __TypeKind.LIST)
    )
  );
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::wrap(type:__Type[1], kind:__TypeKind[1]):__Type[1]
{
  ^__Type
  (
    kind = $kind,
    ofType = $type
  )
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::unWrap(type:__Type[1]):__Type[1]
{
  if($type.kind == __TypeKind.NON_NULL || $type.kind == __TypeKind.LIST,
    |$type.ofType,
    |$type;
  )->toOne()
}


