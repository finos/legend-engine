// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::external::query::graphQL::transformation::queryToPure::dynamic::utility::*;
import meta::external::query::graphQL::transformation::queryToPure::dynamic::expressions::field::*;
import meta::external::query::graphQL::metamodel::sdl::*;
import meta::external::query::graphQL::metamodel::sdl::value::*;
import meta::external::query::graphQL::metamodel::sdl::executable::*;
import meta::external::query::graphQL::transformation::queryToPure::dynamic::*;
import meta::external::query::graphQL::transformation::queryToPure::dynamic::metamodel::*;
import meta::pure::graphFetch::*;
import meta::pure::functions::lang::*;
import meta::pure::functions::multiplicity::*;

Class meta::external::query::graphQL::transformation::queryToPure::dynamic::metamodel::FieldExpression extends meta::external::query::graphQL::transformation::queryToPure::dynamic::metamodel::BooleanExpression
{
  fieldName: String[1];
  values: meta::external::query::graphQL::transformation::queryToPure::dynamic::metamodel::Node[*];
}

function meta::external::query::graphQL::transformation::queryToPure::dynamic::expressions::field::objectFieldToFieldExpression(o: ObjectField[1], prefix: String[1], m: Map<String,Function<{ObjectField[1], String[1], Map<Any,Any>[1], DebugContext[1]->Node[*]}>>[1], debug: DebugContext[1]): Node[*]
{
  if($debug.debug, | println($debug.space + 'Field'), |[]);
  let fieldValue = $o.value->traverseValue($prefix + '_' + $o.name, $m, ^$debug(space=$debug.space + ' '));
  
  assert($fieldValue->size() == 1, 'Require exact one value for argument ' + $o.name);
  assert(
    $fieldValue->toOne()->instanceOf(BooleanOperator) || $fieldValue->toOne()->instanceOf(FieldExpression), 
    'Value for field ' + $o.name + ' should only be an BooleanOperator or ColumnExpression but is ' + $fieldValue->type()->toString()
  );
  
  ^FieldExpression(fieldName=$o.name, values = $fieldValue);
}

function meta::external::query::graphQL::transformation::queryToPure::dynamic::expressions::field::processFieldExpression(f: FieldExpression[1], fieldNames: String[*], cl: Class<Any>[1], vars: VariableExpression[*], count: Integer[1]): IntermediateClass[1]
{
  let ic2 = $f.values->nodesToValueSpecification($fieldNames->concatenate($f.fieldName),$cl,$vars,$count); 
  ^IntermediateClass(vars=$ic2.vars,valueSpecifications=$ic2.valueSpecifications->toOne()->evaluateAndDeactivate());
}