// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::external::query::graphQL::transformation::queryToPure::dynamic::utility::*;
import meta::external::query::graphQL::transformation::queryToPure::dynamic::expressions::or::*;
import meta::external::query::graphQL::metamodel::sdl::*;
import meta::external::query::graphQL::metamodel::sdl::value::*;
import meta::external::query::graphQL::metamodel::sdl::executable::*;
import meta::external::query::graphQL::transformation::queryToPure::dynamic::*;
import meta::external::query::graphQL::transformation::queryToPure::dynamic::metamodel::*;
import meta::pure::graphFetch::*;
import meta::pure::functions::lang::*;
import meta::pure::functions::multiplicity::*;

Class meta::external::query::graphQL::transformation::queryToPure::dynamic::metamodel::OrExpression extends meta::external::query::graphQL::transformation::queryToPure::dynamic::metamodel::BooleanExpression
{
  first: meta::external::query::graphQL::transformation::queryToPure::dynamic::metamodel::BooleanExpression[1];
  second: meta::external::query::graphQL::transformation::queryToPure::dynamic::metamodel::BooleanExpression[1];
}

function meta::external::query::graphQL::transformation::queryToPure::dynamic::expressions::or::objectFieldToOrExpression(o: ObjectField[1], prefix: String[1], m: Map<String,Function<{ObjectField[1], String[1], Map<Any,Any>[1], DebugContext[1]->Node[*]}>>[1], debug: DebugContext[1]): Node[*]
{
  if($debug.debug, | println($debug.space + 'OrExpression'), |[]);
  assert($o.value->instanceOf(ListValue), | '_or should have a list value');
  let value = $o.value->traverseValue($prefix + '__or', $m, ^$debug(space=$debug.space + ' '));
  
  assert($value->size() > 1, '_or should contain atleast two expressions');
  assert($value->filter(v | !$v->instanceOf(BooleanExpression))->size() == 0, 'One of the processed expressions in _or is not a valid boolean expression');
  
  let initialExpression = ^OrExpression(first=$value->at(0)->cast(@BooleanExpression), second=$value->at(1)->cast(@BooleanExpression));
  if($value->size()>2,
    | $value
      ->drop(2)
      ->fold({ a,b | ^OrExpression(first=$b, second=$a->cast(@BooleanExpression)) }, $initialExpression),
    | $initialExpression 
  );
}

function meta::external::query::graphQL::transformation::queryToPure::dynamic::expressions::or::processOrExpression(o: OrExpression[1], fieldNames: String[*], cl: Class<Any>[1], vars: VariableExpression[*], count: Integer[1]): IntermediateClass[1]
{
  let ic1 = $o.first->nodesToValueSpecification($fieldNames, $cl, $vars, $count);
  let ic2 = $o.second->nodesToValueSpecification($fieldNames,$cl, $ic1.vars,$count);
  ^IntermediateClass(
    vars=$ic2.vars,
    valueSpecifications=createOr(
      $ic1.valueSpecifications->toOne()->evaluateAndDeactivate(), 
      $ic2.valueSpecifications->toOne()->evaluateAndDeactivate()
    )
  );
}

function <<access.private>> meta::external::query::graphQL::transformation::queryToPure::dynamic::expressions::or::createOr(left: ValueSpecification[1], right: ValueSpecification[1]): SimpleFunctionExpression[1]
{
  sfe(meta::pure::functions::boolean::or_Boolean_1__Boolean_1__Boolean_1_, ^GenericType(rawType=Boolean), [], PureOne, [$left, $right]);
}