// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::external::query::graphQL::metamodel::sdl::*;
import meta::external::query::graphQL::metamodel::sdl::value::*;
import meta::external::query::graphQL::metamodel::sdl::executable::*;
import meta::external::query::graphQL::transformation::queryToPure::dynamic::*;
import meta::external::query::graphQL::transformation::queryToPure::dynamic::metamodel::*;
import meta::external::query::graphQL::transformation::queryToPure::dynamic::tests::objectValueToExpression::*;
import meta::pure::graphFetch::*;
import meta::pure::functions::lang::*;

function meta::external::query::graphQL::transformation::queryToPure::dynamic::tests::objectValueToExpression::runTest(
                                                                                                        whereValue: String[1],
                                                                                                        expected: String[1]
                                                                                                      ): Boolean[1]
{
  let doc = meta::legend::compileVS(
    '#GQL { query { firms (where: ' + $whereValue + ') { id } } }#'
  )->cast(@meta::external::query::graphQL::metamodel::sdl::Document).definitions->at(0)->cast(@OperationDefinition).selectionSet->at(0)->cast(@Field).arguments->at(0).value;
  let res = meta::external::query::graphQL::transformation::queryToPure::dynamic::traverseValue(
    $doc,
    'where',
    meta::external::query::graphQL::transformation::queryToPure::dynamic::getOperatorMap(),
    ^DebugContext(space='',debug=false)
  )->meta::external::query::graphQL::transformation::queryToPure::dynamic::utility::nodesToString('');
  assertEquals(
    $expected,
    $res
  );
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::dynamic::tests::objectValueToExpression::testAndOverCol(): Any[*]
{
  runTest(
    '{ _and: [{id: {_eq: 1}}, {id: {_eq: 2}}] }',
    'and(equals(id,$where__and0_id__eq),equals(id,$where__and1_id__eq))'
  );
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::dynamic::tests::objectValueToExpression::testOrOverCol(): Any[*]
{
  runTest(
    '{ _or: [{id: {_eq: 1}}, {id: {_eq: 2}}] }',
    'or(equals(id,$where__or0_id__eq),equals(id,$where__or1_id__eq))'    
  );
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::dynamic::tests::objectValueToExpression::testOrOverAnd(): Any[*]
{
  runTest(
    '{ _or: [ { id: {_eq: 1}}, { _and: [ { id: { _eq: 1 } }, { id: { _eq: 2 } } ] } ] }',
    'or(equals(id,$where__or0_id__eq),and(equals(id,$where__or1__and0_id__eq),equals(id,$where__or1__and1_id__eq)))'
  );
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::dynamic::tests::objectValueToExpression::testNestedProp(): Any[*]
{
  runTest(
    '{ _or: [ { id: { _eq: 1 } }, { firm: { id: { _eq: 1 } } } ] }',
    'or(equals(id,$where__or0_id__eq),equals(firm.id,$where__or1_firm_id__eq))'
  );
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::dynamic::tests::objectValueToExpression::testAndOverOr(): Any[*]
{
  runTest(
    '{ _and: [ { id: { _eq: 1 } }, { _or: [{ firm: { id: { _eq: 1 } } }, { firm: { id: { _eq: 2 } } }]} ] }',
    'and(equals(id,$where__and0_id__eq),or(equals(firm.id,$where__and1__or0_firm_id__eq),equals(firm.id,$where__and1__or1_firm_id__eq)))'
  );
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::dynamic::tests::objectValueToExpression::testAndOverMultipleExpression(): Any[*]
{
  runTest(
    '{ _and: [ { id: { _eq: 1 } }, { id: { _eq: 2 } }, { id: { _eq: 3 } } ] }',
    'and(and(equals(id,$where__and0_id__eq),equals(id,$where__and1_id__eq)),equals(id,$where__and2_id__eq))'
  );
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::dynamic::tests::objectValueToExpression::testAndOverMultipleOr(): Any[*]
{
  runTest(
    '{ _and: [ { _or: [ { id: { _eq: 1 } }, { id: { _eq: 2 } } ] }, { id: { _eq: 3 } }, { id: { _eq: 4 } } ] }',
    'and(and(or(equals(id,$where__and0__or0_id__eq),equals(id,$where__and0__or1_id__eq)),equals(id,$where__and1_id__eq)),equals(id,$where__and2_id__eq))'
  );
}
