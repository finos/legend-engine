// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::graphQL::transformation::queryToPure::*;
import meta::external::query::graphQL::transformation::introspection::*;
import meta::external::query::graphQL::transformation::queryToPure::tests::model::*;

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::tests::directives::totalCount::testSimpleFunctionDef(): Boolean[1]
{
  let graphQLDocument = meta::legend::compileVS('#GQL{ query { persons @totalCount { fullName } } }#')->cast(@meta::external::query::graphQL::metamodel::sdl::Document);
  
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($graphQLDocument, Query);
  let res = $graphFetch->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree(true);

  assertEquals(
    '| Class Person.all() -> groupBy(, x:meta::external::query::graphQL::transformation::queryToPure::tests::model::Person[1] | 1; -> agg(y:Integer[*] | $y -> count();), \'count\');',
    meta::external::query::graphQL::transformation::queryToPure::functionDefForTotalCountDirective($graphFetch, $res->at(0), $graphQLDocument)
    ->meta::pure::router::printer::asString()
    ->trim()
  );
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::tests::directives::totalCount::testFunctionDefWithFilter(): Boolean[1]
{
  let graphQLDocument = meta::legend::compileVS('#GQL{ query { personByName(name: "Abhishoya") @totalCount { fullName } } }#')->cast(@meta::external::query::graphQL::metamodel::sdl::Document);
  
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($graphQLDocument, Query);
  let res = $graphFetch->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree(true);

  assertEquals(
    'name:String[1] | Class Person.all() -> filter(p:meta::external::query::graphQL::transformation::queryToPure::tests::model::Person[1] | $p -> fullName(){ [$this.firstName, \' \', $this.lastName] -> plus() } == $name;) -> first() -> groupBy(, x:meta::external::query::graphQL::transformation::queryToPure::tests::model::Person[1] | 1; -> agg(y:Integer[*] | $y -> count();), \'count\');',
    meta::external::query::graphQL::transformation::queryToPure::functionDefForTotalCountDirective($graphFetch, $res->at(0), $graphQLDocument)
    ->meta::pure::router::printer::asString()
    ->trim()
  );
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::tests::directives::totalCount::testFunctionDefWithPaginate(): Boolean[1]
{
  let graphQLDocument = meta::legend::compileVS('#GQL{ query { personsPaginated(pageNumber: 1) @totalCount { fullName } } }#')->cast(@meta::external::query::graphQL::metamodel::sdl::Document);
  
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($graphQLDocument, Query);
  let res = $graphFetch->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree(true);

  assertEquals(
    'pageNumber:Integer[1] | Class Person.all() -> sortBy(#/Person/fullName#) -> groupBy(, x:meta::external::query::graphQL::transformation::queryToPure::tests::model::Person[1] | 1; -> agg(y:Integer[*] | $y -> count();), \'count\');',
    meta::external::query::graphQL::transformation::queryToPure::functionDefForTotalCountDirective($graphFetch, $res->at(0), $graphQLDocument)
    ->meta::pure::router::printer::asString()
    ->trim()
  );
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::tests::directives::totalCount::testFunctionDefWithSlice(): Boolean[1]
{
  let graphQLDocument = meta::legend::compileVS('#GQL{ query { personsWithSlice(limit: 1, offset: 0) @totalCount { fullName } } }#')->cast(@meta::external::query::graphQL::metamodel::sdl::Document);
  
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($graphQLDocument, Query);
  let res = $graphFetch->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree(true);

  assertEquals(
    ['limit:Integer[1],offset:Integer[1] | let end = [$limit, $offset] -> plus();',
    'Class Person.all() -> sortBy(#/Person/fullName#) -> groupBy(, x:meta::external::query::graphQL::transformation::queryToPure::tests::model::Person[1] | 1; -> agg(y:Integer[*] | $y -> count();), \'count\');'],
    meta::external::query::graphQL::transformation::queryToPure::functionDefForTotalCountDirective($graphFetch, $res->at(0), $graphQLDocument)
    ->meta::pure::router::printer::asString()
    ->split('\n')
    ->map(s|$s->trim())
  );
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::tests::directives::totalCount::testFunctionDefWithLimit(): Boolean[1]
{
  let graphQLDocument = meta::legend::compileVS('#GQL{ query { personsWithLimit(limit: 1) @totalCount { fullName } } }#')->cast(@meta::external::query::graphQL::metamodel::sdl::Document);
  
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($graphQLDocument, Query);
  let res = $graphFetch->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree(true);

  assertEquals(
    'limit:Integer[1] | Class Person.all() -> sortBy(#/Person/fullName#) -> groupBy(, x:meta::external::query::graphQL::transformation::queryToPure::tests::model::Person[1] | 1; -> agg(y:Integer[*] | $y -> count();), \'count\');',
    meta::external::query::graphQL::transformation::queryToPure::functionDefForTotalCountDirective($graphFetch, $res->at(0), $graphQLDocument)
    ->meta::pure::router::printer::asString()
    ->trim()
  );
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::tests::directives::totalCount::testFunctionDefWithDrop(): Boolean[1]
{
  let graphQLDocument = meta::legend::compileVS('#GQL{ query { personsWithDrop(limit: 1) @totalCount { fullName } } }#')->cast(@meta::external::query::graphQL::metamodel::sdl::Document);
  
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($graphQLDocument, Query);
  let res = $graphFetch->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree(true);

  assertEquals(
    'offset:Integer[1] | Class Person.all() -> sortBy(#/Person/fullName#) -> groupBy(, x:meta::external::query::graphQL::transformation::queryToPure::tests::model::Person[1] | 1; -> agg(y:Integer[*] | $y -> count();), \'count\');',
    meta::external::query::graphQL::transformation::queryToPure::functionDefForTotalCountDirective($graphFetch, $res->at(0), $graphQLDocument)
    ->meta::pure::router::printer::asString()
    ->trim()
  );
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::tests::directives::totalCount::testFunctionDefWithTake(): Boolean[1]
{
  let graphQLDocument = meta::legend::compileVS('#GQL{ query { personsWithTake(limit: 1) @totalCount { fullName } } }#')->cast(@meta::external::query::graphQL::metamodel::sdl::Document);
  
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($graphQLDocument, Query);
  let res = $graphFetch->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree(true);

  assertEquals(
    'take:Integer[1] | Class Person.all() -> sortBy(#/Person/fullName#) -> groupBy(, x:meta::external::query::graphQL::transformation::queryToPure::tests::model::Person[1] | 1; -> agg(y:Integer[*] | $y -> count();), \'count\');',
    meta::external::query::graphQL::transformation::queryToPure::functionDefForTotalCountDirective($graphFetch, $res->at(0), $graphQLDocument)
    ->meta::pure::router::printer::asString()
    ->trim()
  );
}
