// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


function <<test.Test>> meta::pure::functions::lang::tests::orElse::testOrElse():Boolean[1]
{
   assertEquals('A', ['A']->orElse('B'));
   assertEquals('B', []->cast(@String)->orElse('B'));
   assertEquals(1, []->cast(@Integer)->orElse(1));
}


###Pure
import meta::pure::functions::lang::tests::subType::*;

Class meta::pure::functions::lang::tests::subType::A 
{
  <<equality.Key>> id: Integer[1];
}

Class meta::pure::functions::lang::tests::subType::B  extends A {}
Class meta::pure::functions::lang::tests::subType::C  extends A {}
Class meta::pure::functions::lang::tests::subType::D  extends A {}

Class meta::pure::functions::lang::tests::subType::X
{
  a_many    : A[*];
  a_one     : A[1];
  a_there   : A[0..1];
  a_missing : A[0..1];
}

/*
 * ToFix: whenSubType not implemented yet due to limitations on the use of the @Type syntax
 * in compiled mode.  See core/pure/corefunctions/langExtension.pure for details.
 */
function <<test.Test, test.ToFix>> meta::pure::functions::lang::tests::subType::testWhenSubType():Boolean[1]
{
  let x = ^X(
    a_many  = [^A(id=1), ^B(id=2), ^C(id=3), ^B(id=4), ^C(id=5)],
    a_one   = ^C(id=6),
    a_there = ^C(id=7)
  );

   assertEquals([^B(id=2), ^B(id=4)],                               $x.a_many->whenSubType(@B));
   assertEquals([^C(id=3), ^C(id=5)],                               $x.a_many->whenSubType(@C));
   assertEquals([^A(id=1), ^B(id=2), ^C(id=3), ^B(id=4), ^C(id=5)], $x.a_many->whenSubType(@A));
   assertEquals([],                                                 $x.a_many->whenSubType(@D));

   assertEquals(^C(id=6),                                           $x.a_one->whenSubType(@C));
   assertEquals([],                                                 $x.a_one->whenSubType(@B));

   assertEquals(^C(id=7),                                           $x.a_there->whenSubType(@C));
   assertEquals([],                                                 $x.a_there->whenSubType(@B));

   assertEquals([],                                                 $x.a_missing->whenSubType(@C));
}