// limitations under the License.

import meta::pure::mapping::*;
import meta::pure::router::systemMapping::tests::*;
import meta::pure::router::store::metamodel::*;
import meta::pure::router::utils::*;
import meta::pure::extension::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::store::*;
import meta::pure::runtime::*;
import meta::pure::mapping::modelToModel::inMemory::*;
import meta::pure::mapping::modelToModel::chain::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::mapping::modelToModel::graphFetch::executionPlan::*;
import meta::pure::executionPlan::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::graphFetch::routing::*;

function meta::pure::mapping::modelToModel::contract::modelStoreContract():StoreContract[1]
{
   ^StoreContract
   (
     id = 'modelStore',
     executeStoreQuery = meta::pure::mapping::modelToModel::contract::execution_StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_1__Runtime_1__ExecutionContext_1__Extension_MANY__DebugContext_1__Result_1_,
     supports = meta::pure::mapping::modelToModel::contract::supports_FunctionExpression_1__Boolean_1_,
     isPropertyAutoMapped = {property:Property<Nil, Any|*>[1], set:InstanceSetImplementation[1] | meta::pure::mapping::modelToModel::contract::isPropertyAutoMapped($property, $set)},

     planExecution = meta::pure::mapping::modelToModel::contract::planExecution_StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_$0_1$__Runtime_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_,
     planGraphFetchExecution = meta::pure::mapping::modelToModel::contract::planGraphFetchExecution_StoreMappingLocalGraphFetchExecutionNodeGenerationInput_1__LocalGraphFetchExecutionNode_1_,
     planCrossGraphFetchExecution = meta::pure::mapping::modelToModel::contract::planCrossGraphFetchExecution_StoreMappingCrossLocalGraphFetchExecutionNodeGenerationInput_1__LocalGraphFetchExecutionNode_1_,
     printConnectionToString =  {extensions:meta::pure::extension::Extension[*]|
                                  [
                                        mc:PureModelConnection[1] | modelToModelConnectionToString($mc, $extensions)
                                  ]},                                                          
     localGetterOverrideMapped = meta::pure::mapping::modelToModel::contract::getterOverrideMapped_Any_1__PropertyMapping_1__Any_MANY_,
     localGetterOverrideNonMapped = meta::pure::mapping::modelToModel::contract::getterOverrideNonMapped_Any_1__Property_1__Any_MANY_,

     supportsSetImplementation = s:InstanceSetImplementation[1]|$s->instanceOf(PureInstanceSetImplementation) || $s->instanceOf(M2MEmbeddedSetImplementation),
     supportsStore = s:Store[1]|$s->instanceOf(meta::pure::mapping::modelToModel::ModelStore),
     resolveStoreFromSetImplementation = s:InstanceSetImplementation[1]|^meta::pure::mapping::modelToModel::ModelStore(name='MODEL', package=::),
     supportsNativeJoinAmongElements = false
   )
}

function meta::pure::mapping::modelToModel::contract::execution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[1], runtime:Runtime[1], exeCtx:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):Result<Any|*>[1]
{
   let connection = $runtime->connectionByElement($sq.store);
   $connection->match(
                        [
                           mc:ModelConnection[1]| executeInMemory($sq.fe, $ext->cast(@StoreMappingRoutedValueSpecification), $m, $mc, $runtime, $exeCtx, $extensions, $debug),
                           mcc:ModelChainConnection[1]| executeChain($sq, $ext->cast(@StoreMappingRoutedValueSpecification), $m, $mcc, $runtime, $exeCtx, $extensions, $debug)
                        ]
               );
}

function meta::pure::mapping::modelToModel::contract::supports(f:FunctionExpression[1]):Boolean[1]
{
   $f.func == meta::json::toJSON_T_MANY__LambdaFunction_MANY__String_1_
      || ($f.func->isWithinPackage(meta::pure) && !($f->isSerialize() || $f->isLetFunction() || $f.func->in([meta::pure::graphFetch::execution::graphFetchUnexpanded_T_MANY__RootGraphFetchTree_1__T_MANY_, meta::pure::graphFetch::execution::graphFetchCheckedUnexpanded_T_MANY__RootGraphFetchTree_1__Checked_MANY_])));
}

function meta::pure::mapping::modelToModel::contract::isPropertyAutoMapped(property:AbstractProperty<Any>[1], set:InstanceSetImplementation[1]):Boolean[1]
{
  if($set->instanceOf(PureInstanceSetImplementation),
    | let pureSet              = $set->cast(@PureInstanceSetImplementation);
      let propertyType         = $property.genericType.rawType->toOne();
      let purePropertyMappings = $pureSet->_propertyMappingsByPropertyName($property.name->toOne());

      if($propertyType->instanceOf(DataType),
        |let srcProperty            = $pureSet.srcClass->filter(c| $c->instanceOf(Class))->cast(@Class<Any>)->map(c | $c->propertyByName($property.name->toOne()));
         let srcPropCanBeAutoMapped = $srcProperty->match([
                                                        s:Property<Nil,Any|*>[1] | $s.genericType.rawType->toOne()->_subTypeOf($propertyType) && $property.multiplicity->multiplicitySubsumes($s.multiplicity),
                                                        a:Any[*]                 | false
                                                    ]);
         $purePropertyMappings->size() == 0 && $srcPropCanBeAutoMapped;,
        | // We stop routing complex properties further if complexProperties is mapped to a transform which returns result of type matching property type.
          // We also ensure user has not explicitly attached a setImplementation to be used for the complex property. If its provoided we use the explicit set
         $purePropertyMappings->size() == 1 && $purePropertyMappings->toOne()->instanceOf(PurePropertyMapping)
          && $purePropertyMappings->toOne().targetSetImplementationId == ''                                         
          && $purePropertyMappings->toOne()->cast(@PurePropertyMapping).transform.expressionSequence->last()->evaluateAndDeactivate().genericType.rawType->toOne()->_subTypeOf($propertyType);
      );,
    | false);
}

function meta::pure::mapping::modelToModel::contract::planExecution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extension:Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let fe = $sq.fe->evaluateAndDeactivate()->cast(@FunctionExpression);
   if ($fe->meta::pure::router::utils::isUnionOnGraphFetch(true) || $fe.func->in(graphFetchFunctions()) || $fe->meta::pure::router::utils::isMergeOnGraphFetch() ,
       | planInMemoryGraphFetchExecution($sq, $ext, $m->toOne(), $runtime->toOne(), $exeCtx, $extension, $debug),
       | planExecutionPure($sq, $ext, $m, $runtime, $exeCtx, $extension, $debug)
   );
}

function meta::pure::mapping::modelToModel::contract::planGraphFetchExecution(input: StoreMappingLocalGraphFetchExecutionNodeGenerationInput[1]): LocalGraphFetchExecutionNode[1]
{
  meta::pure::mapping::modelToModel::graphFetch::executionPlan::planRootGraphFetchExecutionInMemory($input.storeQuery, $input.ext, $input.clusteredTree, $input.orderedPaths, $input.mapping, $input.runtime, $input.exeCtx, $input.enableConstraints, $input.checked, $input.extensions, $input.debug)
}

function meta::pure::mapping::modelToModel::contract::planCrossGraphFetchExecution(input: StoreMappingCrossLocalGraphFetchExecutionNodeGenerationInput[1]): LocalGraphFetchExecutionNode[1]
{
  meta::pure::mapping::modelToModel::graphFetch::executionPlan::planCrossStoreGraphFetchExecutionInMemory($input.clusteredTree, $input.orderedPaths, $input.parentPath, $input.inScopeVars, $input.mapping, $input.runtime, $input.exeCtx, $input.enableConstraints, $input.checked, $input.extensions, $input.debug);
}

function meta::pure::mapping::modelToModel::contract::getterOverrideMapped(o:Any[1], propertyMapping:PropertyMapping[1]):Any[*]
{
   getter($o, $propertyMapping.property, $propertyMapping);
}

function meta::pure::mapping::modelToModel::contract::getterOverrideNonMapped(o:Any[1], property:Property<Nil,Any|*>[1]):Any[*]
{
   getter($o, $property, []);
}