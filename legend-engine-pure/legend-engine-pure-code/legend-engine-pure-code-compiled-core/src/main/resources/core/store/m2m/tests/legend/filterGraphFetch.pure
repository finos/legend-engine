// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::json::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::test::alloy::filterGraphFetch::*;
import meta::pure::mapping::modelToModel::test::shared::src::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::runtime::*;
import meta::pure::mapping::modelToModel::test::simple::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::test::shared::dest::*;

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> 
 meta::pure::mapping::modelToModel::test::alloy::filterGraphFetch::filterOnAssociationChecked() : Boolean[1]
{
   let tree = #{Firm {legalName }}#;
   let result = executeGraphFetchWithParameters(
      |Firm.all()->filter(f|$f.employees->exists(p|$p.lastName=='T'))->graphFetchChecked($tree)->meta::pure::mapping::from(
      simpleModelMappingWithAssociation,
      ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Firm, 
                                url='data:application/json,[{"name":"CORP"},{"name":"FINOS","employees": [{"fullName" : "Robert T", "address":  {"name" : "n", "street" : "Digby"}, "aName" : "A", "vehicle": {"wheelCount" : 5}, "@type":"meta::pure::mapping::modelToModel::test::shared::src::_S_PersonA"}, {"fullName" : "John T", "address":  {"name" : "n", "street" : "HighBury"}, "aName" : "A", "vehicle": {"wheelCount" : 7}, "@type":"meta::pure::mapping::modelToModel::test::shared::src::_S_PersonA"}, {"fullName" : "Den B", "address":  {"name" : "n", "street" : "Cresent"}, "aName" : "B", "@type":"meta::pure::mapping::modelToModel::test::shared::src::_S_PersonB"}  ]}]'
                             )
      ))->serialize($tree),
   []);      

  
  assertEq('{"builder":{"_type":"json"},"values":{"defects":[],"source":{"defects":[],"source":{"number":2,"record":"{\\"name\\":\\"FINOS\\",\\"employees\\":[{\\"fullName\\":\\"Robert T\\",\\"address\\":{\\"name\\":\\"n\\",\\"street\\":\\"Digby\\"},\\"aName\\":\\"A\\",\\"vehicle\\":{\\"wheelCount\\":5},\\"@type\\":\\"meta::pure::mapping::modelToModel::test::shared::src::_S_PersonA\\"},{\\"fullName\\":\\"John T\\",\\"address\\":{\\"name\\":\\"n\\",\\"street\\":\\"HighBury\\"},\\"aName\\":\\"A\\",\\"vehicle\\":{\\"wheelCount\\":7},\\"@type\\":\\"meta::pure::mapping::modelToModel::test::shared::src::_S_PersonA\\"},{\\"fullName\\":\\"Den B\\",\\"address\\":{\\"name\\":\\"n\\",\\"street\\":\\"Cresent\\"},\\"aName\\":\\"B\\",\\"@type\\":\\"meta::pure::mapping::modelToModel::test::shared::src::_S_PersonB\\"}]}"},"value":{"employees":[{"fullName":"Robert T"},{"fullName":"John T"},{"fullName":"Den B"}],"name":"FINOS"}},"value":{"legalName":"FINOS"}}}', $result);
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> 
 meta::pure::mapping::modelToModel::test::alloy::filterGraphFetch::filterOnAssociationNonChecked() : Boolean[1]
{
   let tree = #{Firm {legalName }}#;
   let result = executeGraphFetchWithParameters(
      |Firm.all()->filter(f|$f.employees->exists(p|$p.lastName=='T'))->graphFetch($tree)->meta::pure::mapping::from(
      simpleModelMappingWithAssociation,
      ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Firm, 
                                url='data:application/json,[{"name":"CORP"},{"name":"FINOS","employees": [{"fullName" : "Robert T", "address":  {"name" : "n", "street" : "Digby"}, "aName" : "A", "vehicle": {"wheelCount" : 5}, "@type":"meta::pure::mapping::modelToModel::test::shared::src::_S_PersonA"}, {"fullName" : "John T", "address":  {"name" : "n", "street" : "HighBury"}, "aName" : "A", "vehicle": {"wheelCount" : 7}, "@type":"meta::pure::mapping::modelToModel::test::shared::src::_S_PersonA"}, {"fullName" : "Den B", "address":  {"name" : "n", "street" : "Cresent"}, "aName" : "B", "@type":"meta::pure::mapping::modelToModel::test::shared::src::_S_PersonB"}  ]}]'
                             )
      ))->serialize($tree),
   []);      

  assert(jsonEquivalent('{"builder":{"_type":"json"},"values":{"legalName":"FINOS"}}'->parseJSON(), $result->parseJSON()));
}
function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> 
 meta::pure::mapping::modelToModel::test::alloy::filterGraphFetch::simpleFilter() : Boolean[1]
{
   let tree = #{Person {firstName }}#;
   let result = executeGraphFetchWithParameters(
      |Person.all()->filter(f|$f.lastName=='B')->graphFetch($tree)->from(
      simpleModelMappingWithAssociation,
      ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Person, 
                                url='data:application/json,[{"fullName" : "Robert T"},{"fullName" : "Robert B"}]'
                             )
      ))->serialize($tree),
      []
   );   

 assert(jsonEquivalent('{"builder":{"_type":"json"},"values":{"firstName":"Robert"}}'->parseJSON(), $result->parseJSON()));

}


function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> 
 meta::pure::mapping::modelToModel::test::alloy::filterGraphFetch::FilterOnEnum() : Boolean[1]
{
   let tree = #{Trade {productName }}#;
   let result = executeGraphFetchWithParameters(
      |meta::pure::mapping::modelToModel::test::shared::dest::Trade.all()->filter(f|$f.side==Side.Sell)->graphFetch($tree)->from(
      meta::pure::mapping::modelToModel::test::simple::ModelMappingWithJoinToExtendedProperty,
      ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Trade, 
                                url='data:application/json,[{  "side":1, "product":{"name": "FINOS", "region":"NewYork"}} ,{  "side":0, "product":{"name": "ACME", "region":"NewYork"} }]'
                             )
      ))->serialize($tree),
      []
   );     
  assert(jsonEquivalent('{"builder":{"_type":"json"},"values":{"productName":"FINOS"}}'->parseJSON(), $result->parseJSON()));

}



function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> 
 meta::pure::mapping::modelToModel::test::alloy::filterGraphFetch::simpleFilterWithParameter() : Boolean[1]
{
   let tree = #{Firm {legalName }}#;
   let result = executeGraphFetchWithParameters(
      name:String[1]|Firm.all()->filter(f|$f.employees->exists(p|$p.lastName==$name))->graphFetch($tree)->meta::pure::mapping::from(simpleModelMappingWithAssociation,^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Firm, 
                                url='data:application/json,[{"name":"CORP"},{"name":"FINOS","employees": [{"fullName" : "Robert T", "address":  {"name" : "n", "street" : "Digby"}, "aName" : "A", "vehicle": {"wheelCount" : 5}, "@type":"meta::pure::mapping::modelToModel::test::shared::src::_S_PersonA"}, {"fullName" : "John T", "address":  {"name" : "n", "street" : "HighBury"}, "aName" : "A", "vehicle": {"wheelCount" : 7}, "@type":"meta::pure::mapping::modelToModel::test::shared::src::_S_PersonA"}, {"fullName" : "Den B", "address":  {"name" : "n", "street" : "Cresent"}, "aName" : "B", "@type":"meta::pure::mapping::modelToModel::test::shared::src::_S_PersonB"}  ]}]'
                             )))->serialize($tree),
 
    
        pair('name','T')
   );      
  assert(jsonEquivalent('{"builder":{"_type":"json"},"values":{"legalName":"FINOS"}}'->parseJSON(), $result->parseJSON()));
}

 
function <<access.private>> meta::pure::mapping::modelToModel::test::alloy::filterGraphFetch::executeGraphFetchWithParameters(f: FunctionDefinition<Any>[1], vars: Pair<String, Any>[*]): String[1]
{
 let fStr = 'meta::legend::execute_FunctionDefinition_1__Pair_MANY__ExecutionContext_1__Extension_MANY__String_1_';
 let func = $fStr->pathToElement()->cast(@Function<{FunctionDefinition<Any>[1], Pair<String, Any>[*], ExecutionContext[1], meta::pure::extension::Extension[*]->String[1]}>);
 $func->eval($f, $vars, ^ExecutionContext(),  meta::pure::extension::defaultExtensions());

 }

