// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


import meta::pure::executionPlan::engine::java::roadmap::*;
import meta::json::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::runtime::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::executionPlan::profiles::*;
import meta::pure::mapping::modelToModel::test::alloy::constraints::*;

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> 
{  serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testTargetConstraintsWhenRequiredPropertiesAreNotSpecifiedOnGraphFetchTree():Boolean[1]
{
    let result = execute( |Firm.all()->graphFetchChecked(#{Firm {name} }#)->serialize(#{Firm {name} }#),
                           m2mconstraintmapping1,
                           ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Firm, 
                                url='data:application/json,{"name":"FirmX"}'
                             )
      ),
      meta::pure::extension::defaultExtensions()
   );

   assert(jsonEquivalent('{"defects":[{"path":[],"enforcementLevel":"Error","ruleType":"ClassConstraint","externalId":null,"id":"0","ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::Firm","message":"Constraint :[0] violated in the Class Firm"}],"source":{"defects":[],"source":{"number":1,"record":"{\\"name\\":\\"FirmX\\"}"},"value":{"name":"FirmX","employees":[]}},"value":{"name":"FirmX"}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> 
{  serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testQueryOnTypeWithFailingConstraintSucceedsWithConstraintsDisabled():Boolean[1]
{
    let result = execute( |Firm.all()->graphFetch(#{Firm {name} }#)->serialize(#{Firm {name} }#),
                           m2mconstraintmapping1,
                           ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Firm, 
                                url='data:application/json,{"name":"FirmX"}')),
                           ^ExecutionContext(enableConstraints=false),
                           meta::pure::extension::defaultExtensions()
   );

   assert(jsonEquivalent('{"name":"FirmX"}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> 
{  serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testQueryOnSourceTypeWithFailingConstraintSucceedsWithConstraintsDisabled():Boolean[1]
{
   let result = execute( |Firm2.all()->graphFetch(#{Firm2 {name} }#)->serialize(#{Firm2 {name} }#),
                          m2mconstraintmapping2,
                          ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Firm2, 
                                url='data:application/json,{"name":"FirmX"}')),
                          ^ExecutionContext(enableConstraints=false),
                          meta::pure::extension::defaultExtensions()
                     );
  
   assert(jsonEquivalent('{"name":"FirmX"}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> 
{  serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testSourceConstraintsWhenRelatedTargetPropertiesAreNotSpecifiedOnGraphFetchTree():Boolean[1]
{
    let result = execute( |Firm2.all()->graphFetchChecked(#{Firm2 {name} }#)->serialize(#{Firm2 {name} }#),
                           m2mconstraintmapping2,
                           ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Firm2, 
                                url='data:application/json,{"name":"FirmX","employees":[{"firstName":"David","lastName":"Roe"}]}'
                             )
                           ),
                           meta::pure::extension::defaultExtensions()
                  );
   
   assert(jsonEquivalent('{"defects":[],"source":{"defects":[{"path":[],"enforcementLevel":"Error","ruleType":"ClassConstraint","externalId":null,"id":"0","ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::_Firm2","message":"Constraint :[0] violated in the Class _Firm2"},{"path":[{"propertyName":"employees","index":0}],"enforcementLevel":"Error","ruleType":"ClassConstraint","externalId":null,"id":"0","ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::_Person2","message":"Constraint :[0] violated in the Class _Person2"}],"source":{"number":1,"record":"{\\"name\\":\\"FirmX\\",\\"employees\\":[{\\"firstName\\":\\"David\\",\\"lastName\\":\\"Roe\\"}]}"},"value":{"name":"FirmX","employees":[{"firm":null,"address":null}]}},"value":{"name":"FirmX"}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{  serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testSourceConstraintsWithNew():Boolean[1]
{
   let result = execute( |Car.all()->graphFetchChecked(#{Car {engineSize}}#)->serialize(#{Car {engineSize}}#),
                          m2mconstraintnewmapping,
                          ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Car,
                             url='data:application/json,{"make" : "Ford", "engineSize" : "big", "numOfDoors" : 1}'
                             )
                           ),
                           meta::pure::extension::defaultExtensions()
                     );

  assert(jsonEquivalent('{"defects":[],"source":{"defects":[],"source":{"number":1,"record":"{\\"make\\":\\"Ford\\",\\"engineSize\\":\\"big\\",\\"numOfDoors\\":1}"},"value":{"engineSize":"big","make":"Ford"}},"value":{"engineSize":"big"}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{  serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testSourceConstraintsWithNewPropertyAssociation():Boolean[1]
{
   let result = execute( |ProductTaxonomy.all()->graphFetchChecked(#{ProductTaxonomy {id}}#)->serialize(#{ProductTaxonomy {id}}#),
                          m2mconstraintnewmapping2,
                          ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=ProductTaxonomy,
                             url='data:application/json,{"id":"1"}'
                             )
                           ),
                           meta::pure::extension::defaultExtensions()
                       );
  
   assert(jsonEquivalent('{"defects":[],"source":{"defects":[],"source":{"number":1,"record":"{\\"id\\":\\"1\\"}"},"value":{"id":"1"}},"value":{"id":"1"}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{ serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testIsEqualConstraint():Boolean[1]
{
   let result = execute(|B.all()->graphFetchChecked(#{B { b }}#)->serialize(#{B { b }}#),
                        meta::pure::mapping::modelToModel::test::alloy::constraints::isEqualTest,
                         ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_B,
                             url='data:application/json,{"b":true}'
                             )
                          ),
                          meta::pure::extension::defaultExtensions()
                );

   assert(jsonEquivalent( '{"defects":[],"source":{"defects":[],"source":{"number":1,"record":"{\\"b\\":true}"},"value":{"b":true}},"value":{"b":true}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{ serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testIsDistinctConstraint():Boolean[1]
{
   let result = execute(|C.all()->graphFetchChecked(#{C { b }}#)->serialize(#{C { b }}#),
                        meta::pure::mapping::modelToModel::test::alloy::constraints::isDistinctTest,
                         ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_C,
                             url='data:application/json,{"b":true}'
                             )
                         ),
                         meta::pure::extension::defaultExtensions()
                );

   assert(jsonEquivalent('{"defects":[],"source":{"defects":[],"source":{"number":1,"record":"{\\"b\\":true}"},"value":{"b":true}},"value":{"b":true}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{ serverVersion.start='v1_20_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::constraintOnOptionalFieldCanSucceed():Boolean[1]
{
   let result = execute(|D.all()->graphFetchChecked(#{D { maybe, i }}#)->serialize(#{D { maybe, i }}#),
                        meta::pure::mapping::modelToModel::test::alloy::constraints::n2dMaybeNotMapped,
                         ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(),
                                class=_Num,
                             url='data:application/json,{"n":5}'
                             )
                         ),
                         meta::pure::extension::defaultExtensions()
                );

   assert(jsonEquivalent('{"defects":[],"source":{"defects":[],"source":{"number":1,"record":"{\\"n\\":5}"},"value":{"n":5}},"value":{"maybe":null,"i":5}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{ serverVersion.start='v1_20_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::constraintOnOptionalFieldCanFail():Boolean[1]
{
   let result = execute(|D.all()->graphFetchChecked(#{D { maybe, i }}#)->serialize(#{D { maybe, i }}#),
                        meta::pure::mapping::modelToModel::test::alloy::constraints::n2dMaybeNotMapped,
                         ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(),
                                class=_Num,
                             url='data:application/json,{"n":20}'
                             )
                         ),
                         meta::pure::extension::defaultExtensions()
                );

   assert(jsonEquivalent('{"defects":[{"path":[],"enforcementLevel":"Error","ruleType":"ClassConstraint","externalId":null,"id":"0","ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::D","message":"Constraint :[0] violated in the Class D"}],"source":{"defects":[],"source":{"number":1,"record":"{\\"n\\":20}"},"value":{"n":20}},"value":{"maybe":null,"i":20}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{ serverVersion.start='v1_20_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::constraintOnUnmappedRequiredFieldCanSucceed():Boolean[1]
{
   let result = execute(|E.all()->graphFetchChecked(#{E { i }}#)->serialize(#{E { i }}#),
                        meta::pure::mapping::modelToModel::test::alloy::constraints::n2eExpectedNotMapped,
                         ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(),
                                class=_Num,
                             url='data:application/json,{"n":5}'
                             )
                         ),
                         meta::pure::extension::defaultExtensions()
                );

   assert(jsonEquivalent('{"defects":[],"source":{"defects":[],"source":{"number":1,"record":"{\\"n\\":5}"},"value":{"n":5}},"value":{"i":5}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{ serverVersion.start='v1_20_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::constraintOnUnmappedRequiredFieldCanFail():Boolean[1]
{
   let result = execute(|E.all()->graphFetchChecked(#{E { i }}#)->serialize(#{E { i }}#),
                        meta::pure::mapping::modelToModel::test::alloy::constraints::n2eExpectedNotMapped,
                         ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(),
                                class=_Num,
                             url='data:application/json,{"n":20}'
                             )
                         ),
                         meta::pure::extension::defaultExtensions()
                );

   assert(jsonEquivalent('{"defects":[{"path":[],"enforcementLevel":"Error","ruleType":"ClassConstraint","externalId":null,"id":"0","ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::E","message":"Unable to evaluate constraint [0]: No mapping for property \'expected\'"}],"source":{"defects":[],"source":{"number":1,"record":"{\\"n\\":20}"},"value":{"n":20}},"value":{"i":20}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}


function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{ serverVersion.start='v1_20_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::constraintOnUnmappedRequiredComplexTypeFieldCanFail():Boolean[1]
{
   let result = execute(|F.all()->graphFetchChecked(#{F { i }}#)->serialize(#{F { i }}#),
                        meta::pure::mapping::modelToModel::test::alloy::constraints::n2fExpectedNotMapped,
                         ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(),
                                class=_Num,
                             url='data:application/json,{"n":20}'
                             )
                         ),
                         meta::pure::extension::defaultExtensions()
                );

   assert(jsonEquivalent('{"defects":[{"path":[],"enforcementLevel":"Error","ruleType":"ClassConstraint","externalId":null,"id":"0","ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::F","message":"Unable to evaluate constraint [0]: data not available - check your mappings"}],"source":{"defects":[],"source":{"number":1,"record":"{\\"n\\":20}"},"value":{"n":20}},"value":{"i":20}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{ serverVersion.start='v1_20_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::constraintOnUnmappedRequiredComplexTypeFieldCanSucceed():Boolean[1]
{
   let result = execute(|F.all()->graphFetchChecked(#{F { i }}#)->serialize(#{F { i }}#),
                        meta::pure::mapping::modelToModel::test::alloy::constraints::n2fExpectedNotMapped,
                         ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(),
                                class=_Num,
                             url='data:application/json,{"n":5}'
                             )
                         ),
                         meta::pure::extension::defaultExtensions()
                );

   assert(jsonEquivalent('{"defects":[],"source":{"defects":[],"source":{"number":1,"record":"{\\"n\\":5}"},"value":{"n":5}},"value":{"i":5}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{ serverVersion.start='v1_20_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::constraintOnUnmappedRequiredComplexTypeViaQualifiedPropertyCanCompile():Boolean[1]
{
  let result = execute(|meta::pure::mapping::modelToModel::test::alloy::constraints::Loan.all()->graphFetchChecked(#{meta::pure::mapping::modelToModel::test::alloy::constraints::Loan {id}}#)->serialize(#{meta::pure::mapping::modelToModel::test::alloy::constraints::Loan {id}}#),
                      meta::pure::mapping::modelToModel::test::alloy::constraints::LoanMapping,
                      ^Runtime(connections = ^JsonModelConnection(
                        element = ^ModelStore(),
                        class = meta::pure::mapping::modelToModel::test::alloy::constraints::From,
                        url='data:application/json,{"id":20}'
                      )),
                      meta::pure::extension::defaultExtensions()
  );

  assert(jsonEquivalent('{"defects":[{"path":[],"enforcementLevel":"Error","ruleType":"ClassConstraint","externalId":null,"id":"0","ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::Loan","message":"Constraint :[0] violated in the Class Loan"}],"source":{"defects":[],"source":{"number":1,"record":"{\\"id\\":20}"},"value":{"id":20}},"value":{"id":20}}'->parseJSON(),
                        $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{ serverVersion.start='v1_20_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testIsDistinctConstraintWithPrimitiveValues():Boolean[1]
{
   let inputData = '[{"idAndName":"1:Prod1","synonyms":[{"value":"Type1:Name1"},{"value":"Type2:Name2"}]},{"idAndName":"2:Prod2","synonyms":[{"value":"Type1:Name1"},{"value":"Type1:Name2"}]},{"idAndName":"2:Prod2","synonyms":[{"value":"Type1:Name1"},{"value":"Type1:Name1"}]}]';
   let result = execute(
      |Product.all()->graphFetchChecked(#{Product{id,name,synonyms{type,name}}}#)->serialize(#{Product{id,name,synonyms{type,name}}}#),
      meta::pure::mapping::modelToModel::test::alloy::constraints::ProductMapping,
      ^Runtime(connections = ^JsonModelConnection(element =^ ModelStore(), class = _Product, url = 'data:application/json,' + $inputData)),
      meta::pure::extension::defaultExtensions()
   );

   let expected = '['+
      '{"defects":[],"source":{"defects":[],"source":{"number":1,"record":"{\\"idAndName\\":\\"1:Prod1\\",\\"synonyms\\":[{\\"value\\":\\"Type1:Name1\\"},{\\"value\\":\\"Type2:Name2\\"}]}"},"value":{"idAndName":"1:Prod1","synonyms":[{"value":"Type1:Name1"},{"value":"Type2:Name2"}]}},"value":{"synonyms":[{"name":"Name1","type":"Type1"},{"name":"Name2","type":"Type2"}],"name":"Prod1","id":1}},'+
      '{"defects":[{"path":[],"enforcementLevel":"Error","ruleType":"ClassConstraint","externalId":null,"id":"distinctId","ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::Product","message":"Constraint :[distinctId] violated in the Class Product"}],"source":{"defects":[],"source":{"number":2,"record":"{\\"idAndName\\":\\"2:Prod2\\",\\"synonyms\\":[{\\"value\\":\\"Type1:Name1\\"},{\\"value\\":\\"Type1:Name2\\"}]}"},"value":{"idAndName":"2:Prod2","synonyms":[{"value":"Type1:Name1"},{"value":"Type1:Name2"}]}},"value":{"synonyms":[{"name":"Name1","type":"Type1"},{"name":"Name2","type":"Type1"}],"name":"Prod2","id":2}},'+
      '{"defects":[{"path":[],"enforcementLevel":"Error","ruleType":"ClassConstraint","externalId":null,"id":"distinctId","ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::Product","message":"Constraint :[distinctId] violated in the Class Product"},{"path":[],"enforcementLevel":"Error","ruleType":"ClassConstraint","externalId":null,"id":"distinctIdAndNames","ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::Product","message":"Constraint :[distinctIdAndNames] violated in the Class Product"}],"source":{"defects":[],"source":{"number":3,"record":"{\\"idAndName\\":\\"2:Prod2\\",\\"synonyms\\":[{\\"value\\":\\"Type1:Name1\\"},{\\"value\\":\\"Type1:Name1\\"}]}"},"value":{"idAndName":"2:Prod2","synonyms":[{"value":"Type1:Name1"},{"value":"Type1:Name1"}]}},"value":{"synonyms":[{"name":"Name1","type":"Type1"},{"name":"Name1","type":"Type1"}],"name":"Prod2","id":2}}'+
   ']';
   assert(jsonEquivalent($expected->parseJSON(), $result.values->toOne()->parseJSON()));
}


Class meta::pure::mapping::modelToModel::test::alloy::constraints::TaxonomyValue
{
   id : String[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Taxonomy
{
   id : String[1];
}

Association meta::pure::mapping::modelToModel::test::alloy::constraints::Taxonomy_TaxonomyValue
{
   taxonomy:meta::pure::mapping::modelToModel::test::alloy::constraints::Taxonomy[1];
   taxonomyValue:meta::pure::mapping::modelToModel::test::alloy::constraints::TaxonomyValue[*];
}

// Test new in M2M execution with properties from associations
Class meta::pure::mapping::modelToModel::test::alloy::constraints::ProductTaxonomy
[
   [^Taxonomy(id='1', taxonomyValue=[^TaxonomyValue(id='t1')]),^Taxonomy(id='2', taxonomyValue=[^TaxonomyValue(id='t2')])]->filter(t | $t.id == $this.id)->isNotEmpty()
]
{
   id: String[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Firm
[
   $this.employees->isNotEmpty()
]
{
  name: String[1];
  employees: meta::pure::mapping::modelToModel::test::alloy::constraints::Person[*];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Firm2
{
  name: String[1];
  employees: meta::pure::mapping::modelToModel::test::alloy::constraints::Person[*];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Person
{
  fullName: String[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Firm
{   
  name: String[1];
  employees:meta::pure::mapping::modelToModel::test::alloy::constraints::_Person[*];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Firm2
[
   $this.employees.address.street->isNotEmpty()
]
{   
  name: String[1];
  employees:meta::pure::mapping::modelToModel::test::alloy::constraints::_Person2[*];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Person2
[
   $this.firm->isNotEmpty()
]
{
  firstName: String[1];
  lastName: String[1];
  address: _Address[0..1];
  firm: _Firm2[0..1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Person
{
  firstName: String[1];
  lastName: String[1];
  address: _Address[0..1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Address
{
  street: String[1];
}


Enum meta::pure::mapping::modelToModel::test::alloy::constraints::CarManufacturer
{
   Ford, Vauxhall, Peugeot, BadCarCo1, BadCarCo2
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::CurrentCarData
{
   allowed : CarManufacturer[*];
   numAllowed(){$this.allowed->size();}:Integer[1];
   
}


Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Car
[
  $this.qp1() || $this.make->in(^CurrentCarData(allowed=[CarManufacturer.Ford]).allowed)
]
{
   make : CarManufacturer[1];
   engineSize : String[1];
   numOfDoors : Integer[1];
   qp1() {$this.make->in(^CurrentCarData(allowed=[CarManufacturer.Peugeot]).allowed)}:Boolean[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Car
{
   make:CarManufacturer[1];
   engineSize : String[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::A
{
   s:String[1];
   b:Boolean[1];
   i:Integer[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::B
{
   b:Boolean[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_B
[
   isEqual(^A(s='blah', b=true, i=10), ^A(s='blah', b=true, i=10), #{A {b}}#)

]
{
   b:Boolean[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::C
{
   b:Boolean[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_C
[
   isDistinct([^A(s='blah', b=false, i=10), ^A(s='blah', b=true, i=10)], #{A {b}}#)
]
{
   b:Boolean[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::D
[
   if($this.i < 10, |$this.maybe->isEmpty(), |$this.maybe->isNotEmpty())
]
{
   maybe: String[0..1];
   i: Integer[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Blah2
{
  i:Integer[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::E
[
   $this.i < 10 || $this.expected == 'Hello'
]
{
   expected: String[1];
   i: Integer[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::F
[
   $this.i < 10 || $this.c.b == true
]
{
   c : _C[0..1];
   i : Integer[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Num
{
   n: Integer[1];
}


Class meta::pure::mapping::modelToModel::test::alloy::constraints::Loan
[
  $this.collateral(today()).collateralAddress.country.countryName == 'US6'
]
{
  id:Integer[1];
  collateral : meta::pure::mapping::modelToModel::test::alloy::constraints::Collateral[*];
}

Class <<temporal.businesstemporal>> meta::pure::mapping::modelToModel::test::alloy::constraints::Collateral
{
  collateralAddress : meta::pure::mapping::modelToModel::test::alloy::constraints::Address[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Address
{
  county : String[1];
  country : meta::pure::mapping::modelToModel::test::alloy::constraints::Country[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Country
{
  countryName : String[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::From
{
  id:Integer[1];
} 

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Product
[
   distinctId: $this.synonyms.type->isDistinct(),
   distinctIdAndNames: $this.synonyms->map(x | $x.type + '$' + $x.name)->isDistinct()
]
{
   id: Integer[1];
   name: String[1];

   synonyms: Synonym[*];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Synonym
{
   type: String[1];
   name: String[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Product
{
   idAndName: String[1];
   synonyms: _Synonym[*];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Synonym
{
   value: String[1];
} 

###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::isEqualTest
(
   meta::pure::mapping::modelToModel::test::alloy::constraints::B : Pure
   {
      ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_B
      b: $src.b
   }
)

###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::isDistinctTest
(
   meta::pure::mapping::modelToModel::test::alloy::constraints::C : Pure
   {
      ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_C
      b: $src.b
   }
)

###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::n2dMaybeNotMapped
(
   meta::pure::mapping::modelToModel::test::alloy::constraints::D : Pure
   {
      ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Num
      i: $src.n
   }
)

###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::n2eExpectedNotMapped
(
   meta::pure::mapping::modelToModel::test::alloy::constraints::E : Pure
   {
      ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Num
      i: $src.n
   }
)

###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::n2fExpectedNotMapped
(
   meta::pure::mapping::modelToModel::test::alloy::constraints::F : Pure
   {
      ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Num
      i: $src.n
   }
)


###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::m2mconstraintnewmapping
(
  meta::pure::mapping::modelToModel::test::alloy::constraints::Car : Pure
   {
      ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Car
      make : $src.make,
      engineSize : $src.engineSize
  }
)

###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::m2mconstraintnewmapping2
(
  meta::pure::mapping::modelToModel::test::alloy::constraints::ProductTaxonomy : Pure
   {
      ~src meta::pure::mapping::modelToModel::test::alloy::constraints::ProductTaxonomy
      id : $src.id
  }   
)



###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::m2mconstraintmapping1
(
  meta::pure::mapping::modelToModel::test::alloy::constraints::Firm : Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Firm
    name: $src.name,
    employees: $src.employees
  }

  meta::pure::mapping::modelToModel::test::alloy::constraints::Person: Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Person
    fullName: $src.firstName + ' ' + $src.lastName
  }
)

Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::m2mconstraintmapping2
(
  meta::pure::mapping::modelToModel::test::alloy::constraints::Firm2 : Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Firm2
    name: $src.name,
    employees: $src.employees
  }

  meta::pure::mapping::modelToModel::test::alloy::constraints::Person: Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Person2
    fullName: $src.firstName + ' ' + $src.lastName
  }
)


###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::LoanMapping
(
  meta::pure::mapping::modelToModel::test::alloy::constraints::Loan : Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::constraints::From
    id : $src.id
  }
)


###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::ProductMapping
(
   meta::pure::mapping::modelToModel::test::alloy::constraints::Product : Pure
   {
      ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Product
      id: $src.idAndName->split(':')->at(0)->parseInteger(),
      name: $src.idAndName->split(':')->at(1),
      synonyms: $src.synonyms
   }

   meta::pure::mapping::modelToModel::test::alloy::constraints::Synonym : Pure
   {
      ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Synonym
      type: $src.value->split(':')->at(0),
      name: $src.value->split(':')->at(1)
   }
)
