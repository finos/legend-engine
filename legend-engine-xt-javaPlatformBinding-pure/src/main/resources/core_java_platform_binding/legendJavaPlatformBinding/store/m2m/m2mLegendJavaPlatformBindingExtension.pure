// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::platformBinding::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::extension::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::modelToModel::graphFetch::executionPlan::*;
import meta::pure::mapping::modelToModel::graphFetch::executionPlan::platformBinding::legendJava::*;
import meta::pure::mapping::modelToModel::graphFetch::executionPlan::storeStreamReading::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::*;
import meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::graphFetch::*;
import meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::graphFetch::storeStreamReading::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::naming::*;

function meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::inMemoryLegendJavaPlatformBindingExtension(): LegendJavaPlatformBindingExtension[1]
{
   ^LegendJavaPlatformBindingExtension
   (
      platformId = legendJavaPlatformBindingId(),

      id = 'InMemoryLegendJavaPlatformBindingExtension',

      // Node based extensions ------------------------------------------------------

      supportedExecutionNodes = [
         InMemoryGraphFetchExecutionNode,
         StoreStreamReadingExecutionNode
      ],

      extraChildNodesWithIndex = {node: ExecutionNode[1] |
         $node->match([
            i: InMemoryGraphFetchExecutionNode[1] | $i.children->size()->range()->map(x | pair($i.children->at($x), 'localChild' + $x->toString())),
            n: ExecutionNode[1]                   | []
         ])
      },

      updateGenerationContextForNode = {node: ExecutionNode[1], context: GenerationContext[1], path: String[1], extensions: Extension[*], debug: DebugContext[1] |
         $node->match([
            i: InMemoryGraphFetchExecutionNode[1] | $i->prepareForInMemoryGraphFetch($path, $context, $debug),
            s: StoreStreamReadingExecutionNode[1] | $s->prepareForStoreStreamReading($path, $context, $extensions, $debug),
            n: ExecutionNode[1]                   | $context
         ])
      },

      generateLegendJavaCodeForNode = {node: ExecutionNode[1], path: String[1], context: GenerationContext[1], extensions: Extension[*], debug: DebugContext[1] |
         $node->match([
            {i: InMemoryGraphFetchExecutionNode[1] |
               let inMemoryGraphImplUpdateFunction = {impl: meta::external::language::java::metamodel::Class[1] |
                  $impl->enrichForInMemoryGraphExecution($i, $context, $extensions, $debug)
               };
               let baseProject  = $i->generateBaseProjectForLocalGraphFetchNode($path, $context, $inMemoryGraphImplUpdateFunction, $extensions, $debug);
               let storeProject = $i->generateInMemoryStoreGraphFetchProject($path, $context, $extensions, $debug);

               generatedCode(
                  $baseProject->concatenate($storeProject)->toOneMany()->mergeProjects(),
                  $storeProject->resolve($context.conventions->planNodeClass('public', $path, 'Execute'))
               );
            },
            s: StoreStreamReadingExecutionNode[1] | $s->generateCodeForStoreStreamReadingExecutionNode($path, $context, $extensions, $debug),
            n: ExecutionNode[1]                   | ^GeneratedCode()
         ])
      },

      generateLegendJavaCodeForExtraChildNodes = {node: ExecutionNode[1], project: Project[0..1], path: String[1], context: GenerationContext[1], extensions: Extension[*], debug: DebugContext[1] |
         $node->match([
            {i: InMemoryGraphFetchExecutionNode[1] |
               let transformedChildren = $i.children->size()->range()->map(x | $i.children->at($x)->generateLegendJavaPlatformBindingCode($path + '.localChild' + $x->toString(), $context, $extensions, $debug));
               ^GeneratedNode
               (
                  node    = ^$i(children = $transformedChildren.node->cast(@InMemoryGraphFetchExecutionNode)),
                  project = $project->concatenate($transformedChildren.project)->mergeProjectsNullable()
               );
            },
            n: ExecutionNode[1] | ^GeneratedNode(node = $node, project = $project)
         ])
      },

      // ------------------------------------------------------ Node based extensions



      // Adhoc extensions -----------------------------------------------------------

      adhocExtensions = [

         ^LegendJavaDataRecordClassesExtension
         (
            dataRecordClasses = [
               JsonDataRecord,
               XmlDataRecord
            ]
         ),

         ^LegendJavaInMemoryGraphFetchExtension
         (
            filterCodeGenerator = {set: InstanceSetImplementation[1], src: Code[1], withoutFilter: Code[1..*], context: GenerationContext[1], debug:DebugContext[1] |
               {ps : PureInstanceSetImplementation[1] |
                  if ($ps.filter->isNotEmpty(),
                     | $ps.filter.expressionSequence->at(0)->evaluateAndDeactivate()->generateJava($context.conventions, $debug->indent())->j_if($withoutFilter, j_null()->j_return()),
                     | $withoutFilter
                  )
               }
            },

            mappingTransformExtractors = [
               ppm : PurePropertyMapping[1] | $ppm.transform
            ],

            valueTransformerExtractors = [
               ppm : PurePropertyMapping[1] | $ppm.transformer
            ]
         ),

         ^LegendJavaGraphFetchStoreStreamReadingExtension
         (
            dataRecordClassFromConnectionExtractors = [
               j : JsonModelConnection[1] | JsonDataRecord,
               x : XmlModelConnection[1]  | XmlDataRecord
            ],

            dataRecordTreeFromConnectionExtractors = [
               json : JsonModelConnection[1] | #{JsonDataRecord {number, record}}#,
               xml  : XmlModelConnection[1]  | #{XmlDataRecord {number, record}}#   
            ],

            streamReaderMethodCodeGenerators = {conventions: Conventions[1], path: String[1], pureClass: meta::pure::metamodel::type::Class<Any>[1], storeStreamReadingContext: Code[1] |
               [
                  {
                     json: JsonModelConnection[1] | 
                        $conventions->meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::graphFetch::storeStreamReading::json::jsonReaderClass($path, $pureClass)
                           ->j_new($storeStreamReadingContext->j_invoke('createUrl', j_string($json.url))->j_invoke('openStream', []))
                           ->j_return()
                           ->j_ioExTryCatch()
                  },
                  {
                     xml: XmlModelConnection[1] | 
                        $conventions->meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::graphFetch::storeStreamReading::xml::xmlReaderClass($path, $pureClass)
                           ->j_new($storeStreamReadingContext->j_invoke('createUrl', j_string($xml.url))->j_invoke('openStream', []))
                           ->j_return()
                           ->j_ioExTryCatch()
                  },
                  {
                     model: ModelConnection[1] | 
                        let varName = $model.instances->values()->at(0)->get(0)->cast(@RoutedVariablePlaceHolder).name;
                        let typeArg = $storeStreamReadingContext->j_invoke('streamType', $conventions->className($pureClass)->j_field('class', javaClassType()), javaReflectType());
                        $conventions->meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::graphFetch::storeStreamReading::objectStream::streamReaderClass($path)
                           ->j_new($storeStreamReadingContext->j_invoke('getResult', [j_string($varName), $typeArg], javaStream($conventions->className($pureClass))))->j_return();
                  }
               ]
            }
         )

      ]

      // ----------------------------------------------------------- Adhoc extensions
   )
}


function meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::inMemoryExtensionsWithLegendJavaPlatformBinding(): Extension[*]
{
   meta::pure::extension::defaultExtensions()->concatenate(
      meta::pure::executionPlan::platformBinding::platformBindingExtension([
         meta::pure::executionPlan::platformBinding::legendJava::legendJavaPlatformBinding([
            meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::inMemoryLegendJavaPlatformBindingExtension()
         ])
      ]) 
   )
}
