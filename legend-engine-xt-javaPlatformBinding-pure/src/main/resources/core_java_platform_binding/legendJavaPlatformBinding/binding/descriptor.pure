// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::format::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::engine::*;
import meta::external::shared::format::executionPlan::platformBinding::legendJava::*;

import meta::pure::executionPlan::platformBinding::typeInfo::*;

import meta::pure::executionPlan::platformBinding::legendJava::*;

import meta::pure::extension::*;

import meta::external::language::java::transform::*;

Class meta::external::shared::format::executionPlan::platformBinding::legendJava::ExternalFormatLegendJavaPlatformBindingDescriptor extends LegendJavaPlatformBindingAdhocExtension
{
   externalFormatContract     : ExternalFormatContract<Any>[1];
   enginePlatformDependencies : Function<{Conventions[1] -> Conventions[1]}>[1];
   externalizeDescriptor      : ExternalFormatExternalizeBindingDescriptor[0..1];
   internalizeDescriptor      : ExternalFormatInternalizeBindingDescriptor[0..1];
}

Class meta::external::shared::format::executionPlan::platformBinding::legendJava::ExternalFormatExternalizeBindingDescriptor
{
   externalizePreparator  : Function<{ExternalFormatExternalizeExecutionNode[1], String[1], GenerationContext[1], DebugContext[1] -> TypeInfoSet[1]}>[0..1];
   externalizeGenerator   : Function<{ExternalFormatExternalizeExecutionNode[1], String[1], GenerationContext[1], DebugContext[1] -> GeneratedCode[1]}>[1];
}

Class meta::external::shared::format::executionPlan::platformBinding::legendJava::ExternalFormatInternalizeBindingDescriptor
{
   internalizePreparator  : Function<{ExternalFormatInternalizeExecutionNode[1], String[1], GenerationContext[1], DebugContext[1] -> TypeInfoSet[1]}>[0..1];
   internalizeGenerator   : Function<{ExternalFormatInternalizeExecutionNode[1], String[1], GenerationContext[1], DebugContext[1] -> GeneratedCode[1]}>[1];
}
