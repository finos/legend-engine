// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::graphFetch::*;
import meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::*;
import meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::graphFetch::storeStreamReading::*;
import meta::pure::executionPlan::platformBinding::typeInfo::*;
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::modelToModel::graphFetch::executionPlan::*;
import meta::pure::metamodel::constraint::*;


Class meta::pure::executionPlan::platformBinding::legendJava::GenerationContext
{
   typeInfos                 : TypeInfoSet[1];
   conventions               : Conventions[1];
   nodeInfos                 : NodeInfo[*];
   baseProject               : Project[0..1];
}

Class meta::pure::executionPlan::platformBinding::legendJava::NodeInfo
{
   path            : String[1];
   returnType      : JavaType[1];
   data            : Any[0..1];
   graphFetchTrees : RootGraphFetchTree<Any>[*];
}

Class meta::pure::executionPlan::platformBinding::legendJava::JavaType
{
}

Class meta::pure::executionPlan::platformBinding::legendJava::SimpleJavaType extends JavaType
{
   pureType   : meta::pure::metamodel::type::Type[1];
   javaType   : meta::external::language::java::metamodel::Type[1];
}

Class meta::pure::executionPlan::platformBinding::legendJava::CheckedJavaType extends JavaType
{
   checkedOf  : SimpleJavaType[1];
   source     : JavaType[0..1];
}


Class meta::pure::executionPlan::platformBinding::legendJava::GeneratedCode
{
   project: Project[0..1];
   implementation: JavaPlatformImplementation[0..1];
}

Class meta::pure::executionPlan::platformBinding::legendJava::GeneratedNode
{
   project: Project[0..1];
   node: ExecutionNode[1];
}



// ----------------------------------------------------------------------------------------------------------
// --- Plan generation
// ----------------------------------------------------------------------------------------------------------


function meta::pure::executionPlan::platformBinding::legendJava::projectToImplementation(project:Project[1]):JavaPlatformImplementation[1]
{   
   let sfer = newStringifier($project);
   
   ^JavaPlatformImplementation
    (
       classes = $project->allClasses()->map({cl |
          ^meta::pure::executionPlan::JavaClass
           (
             package = $cl.package->packageToString(),
             name    = $cl.simpleName,
             source  = $sfer->ofClass($cl->meta::external::language::java::factory::inferImports())
          )
       })
    );
}

function meta::pure::executionPlan::platformBinding::legendJava::fillNewFunctionProhibitedList(context:GenerationContext[1]):GenerationContext[1]
{
   let cls = $context.typeInfos.typeInfos->filter(t|$t->instanceOf(ClassTypeInfo))->cast(@ClassTypeInfo)->filter(c| !$c.isNewInstanceAllowed); //TODO: remove the not in the last filter
   let oldConventions = $context.conventions; 
   ^$context(conventions = ^$oldConventions(newFunctionProhibitedList = $cls->map(c|$c.class())));
}

function meta::pure::executionPlan::platformBinding::legendJava::generatedCode(project:Project[1], entryPoint:meta::external::language::java::metamodel::Class[1]):GeneratedCode[1]
{
   assert($project->containsClass($entryPoint), 'Entry point class is missing');
   ^GeneratedCode(
      project        = $project,
      implementation = ^JavaPlatformImplementation
                       (
                          executionClassFullName = $entryPoint->typeToString(),
                          executionMethodName    = $entryPoint.methods->filter(m |$m->isStatic())->first().name
                       )
   );
}

function meta::pure::executionPlan::platformBinding::legendJava::addNodeInfo(context:GenerationContext[1], nodeInfo:NodeInfo[1]): GenerationContext[1]
{
   ^$context(nodeInfos=$context.nodeInfos->concatenate($nodeInfo));   
}

function meta::pure::executionPlan::platformBinding::legendJava::nodeInfosForPath(context:GenerationContext[1], path:String[1]): NodeInfo[*]
{
   $context.nodeInfos->filter(ni| $ni.path == $path);
}

function meta::pure::executionPlan::platformBinding::legendJava::childNodeInfosForPath(context:GenerationContext[1], path:String[1]): NodeInfo[*]
{
   $context.nodeInfos->filter(ni| $ni.path->contains('.') && $ni.path->substring(0, $ni.path->lastIndexOf('.')) == $path);
}

function meta::pure::executionPlan::platformBinding::legendJava::setTypeInfos(context:GenerationContext[1], typeInfos:TypeInfoSet[1]): GenerationContext[1]
{
   ^$context(typeInfos=$typeInfos);   
}

function meta::pure::executionPlan::platformBinding::legendJava::setConventions(context:GenerationContext[1], conventions:Conventions[1]): GenerationContext[1]
{
   ^$context(conventions=$conventions);   
}
