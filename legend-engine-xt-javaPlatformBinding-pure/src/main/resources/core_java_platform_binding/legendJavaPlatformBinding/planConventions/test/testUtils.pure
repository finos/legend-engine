// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::tests::utils::*;
import meta::pure::executionPlan::platformBinding::typeInfo::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::mapping::*;
import meta::pure::extension::*;
import meta::pure::runtime::*;

Class meta::pure::executionPlan::platformBinding::legendJava::tests::utils::JavaExpressionTest
{
   name              : String[1];
   lambda            : FunctionDefinition<{->Any[*]}>[1];
   codeAssertion     : Code[1];
   conventions       : Conventions[1];
   assertionPatterns : String[*];
   project           : Project[1];
}

Class meta::pure::executionPlan::platformBinding::legendJava::tests::utils::JavaExpressionTestSet
{
   conventions : Conventions[1];
   tests       : JavaExpressionTest[*];
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::javaExpressionTests(conventions:Conventions[1]): JavaExpressionTestSet[1]
{
   ^JavaExpressionTestSet(conventions = $conventions);
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::addTest(tests:JavaExpressionTestSet[1], name:String[1], lambda:Function<{->Any[*]}>[1], expectedCode:Code[1]): JavaExpressionTestSet[1]
{
   let test = ^JavaExpressionTest(
      name          = $name,
      lambda        = $lambda->cast(@FunctionDefinition<{->Any[*]}>), 
      codeAssertion = $expectedCode, 
      conventions   = $tests.conventions,
      project       = newProject()
   );

   ^$tests(tests=$tests.tests->add($test));
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::addTest(tests:JavaExpressionTestSet[1], name:String[1], lambda:Function<{->Any[*]}>[1], expectedCode:String[1], expectedType:meta::external::language::java::metamodel::Type[1]): JavaExpressionTestSet[1]
{
   let test = ^JavaExpressionTest(
      name          = $name,
      lambda        = $lambda->cast(@FunctionDefinition<{->Any[*]}>), 
      codeAssertion = j_code($expectedCode, $expectedType), 
      conventions   = $tests.conventions,
      project       = newProject()
   );

   ^$tests(tests=$tests.tests->add($test));
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::assert(tests:JavaExpressionTestSet[1], assertionPattern:String[1]): JavaExpressionTestSet[1]
{
   let test    = $tests.tests->last()->toOne();
   let newTest = ^$test(assertionPatterns=$test.assertionPatterns->concatenate($assertionPattern));
   ^$tests(tests=$tests.tests->init()->add($newTest));
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::withConventions(test:JavaExpressionTest[1], conventions:Conventions[1]): JavaExpressionTest[1]
{
   ^$test(conventions=$conventions);
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::generate(test:JavaExpressionTest[1], enum:meta::pure::metamodel::type::Enumeration<Any>[1]): JavaExpressionTest[1]
{
   let generated = $test.conventions->codeClass($enum, ClassPurpose.ENUMERATION, noDebug());
   ^$test(project=$test.project->addClass($generated));
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::assert(test:JavaExpressionTest[1], assertionPattern:String[1]): JavaExpressionTest[1]
{
   ^$test(assertionPatterns=$test.assertionPatterns->concatenate($assertionPattern));
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::runTests(tests:JavaExpressionTestSet[1]): Boolean[1]
{
   runTests($tests.tests, [], noDebug());
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::runTests(tests:JavaExpressionTestSet[1], debug:DebugContext[1]): Boolean[1]
{
   runTests($tests.tests, [], $debug);
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::runTests(tests:JavaExpressionTest[*]): Boolean[1]
{
   runTests($tests, [], noDebug());
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::runTests(tests:JavaExpressionTest[*], extensions:Extension[*], debug:DebugContext[1]): Boolean[1]
{
   let failures = j_variable(javaStringBuilder(), 'failures');  
   let result   = j_variable(javaStringBuilder(), 'result');  

   let allAssertions = $tests->map(
      {test|
         let java = $test.lambda->cast(@FunctionDefinition<{->Any[*]}>)->evaluateAndDeactivate().expressionSequence->toOne()->cast(@ValueSpecification)->generateJava($test.conventions, $debug);
         let expectedCode = $test.codeAssertion->codeToString();
         let actualCode = $java->codeToString()->split('\n')->map(x | $x->trim())->joinStrings(' ')->replace(' .', '.');
         assertEquals($expectedCode, $actualCode, |$test.name+' code is incorrect\nexpected: '+$expectedCode+'\nactual  : '+$actualCode+'\n');   
         assertEquals($test.codeAssertion.type, $java.type, |$test.name+' expected type of \''+$test.codeAssertion.type->typeToString()+'\' but got \''+$java.type->typeToString()+'\'');   
         assert($test.assertionPatterns->isNotEmpty(), 'You must make some assertions');
        
         let assertions = $test.assertionPatterns->map(
            {a |
               let assert = $a->format($actualCode);
               let pass = j_string('PASS '+$test.name+': '+$assert+'\n');
               let fail = j_string('FAIL '+$test.name+': '+$assert+'\n');

               let testAssert = j_if(
                  j_code($assert, javaBoolean()),
                  $result->j_invoke('append', $pass),
                  [
                     $result->j_invoke('append', $fail),
                     $failures->j_invoke('append', $fail)
                  ]->j_block()
               );
               
               merge([$testAssert, $java]);
            }
         );            
      }
   );
   
   let functionTests = newProject()
      ->addClass(
         testClass()
            ->addMethod(
               javaMethod(['public', 'static'], javaString(), 'execute', [], 
                  [
                     $result->j_declare(javaStringBuilder()->j_new(j_string('\n'))),
                     $failures->j_declare(javaStringBuilder()->j_new([]))
                  ]
                  ->concatenate($allAssertions)
                  ->concatenate([
                     j_if(
                        $failures->j_invoke('length', [])->j_gt(j_int(0)),
                        javaIllegalStateException()->j_new($failures->j_invoke('toString', []))
                     ),
                     $result->j_invoke('toString', [])->j_return()
                  ])               
               )
            )
      )
      ->addMavenDependency('junit', 'junit', '4.11');         
   
   executeTests(mergeProjects($tests.project->concatenate($functionTests)->concatenate($allAssertions->dependencies()->resolveAndGetProjects())->toOneMany()), [], $debug);
}

Class meta::pure::executionPlan::platformBinding::legendJava::tests::utils::JavaPureTestSet
{
   pureTests   : FunctionDefinition<{->Boolean[1]}>[*];
   context     : GenerationContext[1];
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::javaPureTestWrapper(func: FunctionDefinition<{->Boolean[1]}>[1]): Boolean[1]
{
  javaPureTests(engineConventions([]), [$func])->runTests();
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::javaPureTests(conventions:Conventions[1], pureTests:FunctionDefinition<{->Boolean[1]}>[*]): JavaPureTestSet[1]
{
   ^JavaPureTestSet(
      pureTests = $pureTests, 
      context   = ^GenerationContext(typeInfos=newTypeInfoSet(), conventions=$conventions)
   );
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::addTestsWithin(set:JavaPureTestSet[1], pkg:Package[1]): JavaPureTestSet[1]
{
   let tests = $pkg->getAllConcreteFunctionDefinitionsInPackage(true)->filter(f| $f->isTest() && $f.classifierGenericType.typeArguments.rawType->cast(@meta::pure::metamodel::type::FunctionType).returnType.rawType == Boolean && !$f->cast(@ElementWithTaggedValues)->value4Tag('excludePlatform',test).value->contains('Java compiled'))->cast(@FunctionDefinition<{->Boolean[1]}>);
   ^$set(pureTests=$set.pureTests->concatenate($tests)->removeDuplicates());
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::excludeTestsWithin(set:JavaPureTestSet[1], pkg:Package[1]): JavaPureTestSet[1]
{
   let toRemove = $pkg->getAllConcreteFunctionDefinitionsInPackage(true)->filter(f| $f->isTest()  && $f.classifierGenericType.typeArguments.rawType->cast(@meta::pure::metamodel::type::FunctionType).returnType.rawType == Boolean)->cast(@FunctionDefinition<{->Boolean[1]}>);
   ^$set(pureTests=$set.pureTests->removeAll($toRemove));
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::excludeTestsWithin(set:JavaPureTestSet[1], pkgs:Package[*]): JavaPureTestSet[1]
{
   $pkgs->fold({pkg, set | $set->excludeTestsWithin($pkg)}, $set);
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::excludeTest(set:JavaPureTestSet[1], test:FunctionDefinition<{->Boolean[1]}>[1]): JavaPureTestSet[1]
{
   ^$set(pureTests=$set.pureTests->remove($test));
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::excludeTests(set:JavaPureTestSet[1], tests:FunctionDefinition<{->Boolean[1]}>[*]): JavaPureTestSet[1]
{
   ^$set(pureTests=$set.pureTests->removeAll($tests));
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::generate(set:JavaPureTestSet[1], type:meta::pure::metamodel::type::Type[1]): JavaPureTestSet[1]
{
   let context   = $set.context;
   let typeInfos = $context.typeInfos->addForType($type);
   ^$set(context=^$context(typeInfos=$typeInfos));
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::runTests(tests:JavaPureTestSet[1]): Boolean[1]
{
   runTests($tests, [], noDebug());
}

function meta::pure::executionPlan::platformBinding::legendJava::tests::utils::runTests(tests:JavaPureTestSet[1], extensions:Extension[*], debug:DebugContext[1]): Boolean[1]
{
   let generatedTestCalls = $tests.pureTests->map(
      {t|
         let fe = ^FunctionExpression
                  (
                     func = $t,
                     importGroup = ^ImportGroup(),
                     multiplicity=PureOne,
                     genericType=^GenericType(rawType=Boolean),
                     parametersValues = []
                   )->evaluateAndDeactivate();
         pair($t, $fe->generateJava($tests.context.conventions, $debug));
      }
   );

   let failures = j_variable(javaStringBuilder(), 'failures');  
   let result   = j_variable(javaStringBuilder(), 'result');  

   let typesProject = meta::pure::executionPlan::platformBinding::legendJava::shared::generateTypes($tests.context, $debug);

   let executeCode = 
      [
         $result->j_declare(javaStringBuilder()->j_new(j_string('\n'))),
         $failures->j_declare(javaStringBuilder()->j_new([]))
      ]
      ->concatenate(
         $generatedTestCalls->map(
            {p|
               let name = $p.first->cast(@PackageableElement)->elementToPath();
               let call = $p.second;
                        
               let ex   = j_parameter(javaException(), 'e');
               let pass = j_string('PASS '+$name+'\n');
               let fail = j_string('FAIL '+$name+'\n')->j_plus($ex->j_invoke('getMessage', []))->j_plus(j_string('\n'));
                                                                                                    
               j_try(
                  [
                     $call, 
                     $result->j_invoke('append', $pass)
                  ],
                  j_catch($ex,
                     [
                        $ex->j_invoke('printStackTrace', javaSystem()->j_field('out', javaPrintStream()), javaVoid()),
                        $result->j_invoke('append', $fail),
                        $failures->j_invoke('append', $fail)
                     ]
                  )
               );
            }
         )
      )
      ->concatenate([
         j_if($failures->j_invoke('length', [])->j_gt(j_int(0)),
            javaIllegalStateException()->j_new($failures->j_invoke('toString', []))
         ),
         $result->j_invoke('toString', [])->j_return()
      ])->j_block();

   let functionTests = newProject()->addClass(javaClass(testClass(), pair(javaMethod(['public', 'static'], javaString(), 'execute', []), $executeCode))); 
   
   let dependencies = $generatedTestCalls.second->dependencies();
   let toMerge      = [$typesProject, $functionTests]->concatenate($generatedTestCalls.second->dependencies()->resolveAndGetProjects());
   let merged       = mergeProjects($toMerge->toOneMany());
   executeTests($merged, [], $debug);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::legendJava::tests::utils::executeTests(tests:Project[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]): Boolean[1]
{
   let node = ^PureExpressionPlatformExecutionNode(
      expression     = ^InstanceValue(genericType = ^GenericType(rawType = String), multiplicity = PureOne, values = ''),
      resultType     = ^ResultType(type=String),
      implementation = ^JavaPlatformImplementation
                       (
                          executionClassFullName = testClass()->typeToString(),
                          executionMethodName    = 'execute'
                       )
    );
   
   let plan = ^ExecutionPlan
   (
      func              = {|true},
      mapping           = meta::pure::executionPlan::platformBinding::legendJava::tests::utils::dummyMapping,
      runtime           = ^Runtime(),
      rootExecutionNode = $node,
      authDependent     = false,
      globalImplementationSupport = $tests->projectToImplementation()
   );

   if($debug.debug,
      |$plan->planToString(true,[])->println(),
      |[]
   );

   meta::legend::test::mayExecuteLegendTest(
      {clientVersion, serverVersion, serializationKind, host, port |
         let fStr = 'meta::protocols::pure::'+$clientVersion+'::invocation::execution::execute::executePlan_ExecutionPlan_1__String_1__Integer_1__Extension_MANY__String_1_';
         let xf   = $fStr->pathToElement()->cast(@Function<{ExecutionPlan[1], String[1], Integer[1], meta::pure::extension::Extension[1] ->String[1]}>);
         let r = $xf->eval($plan, $host, $port, $extensions)->toOne()->cast(@String);
         let lines = $r->replace('\\n', '\n');
         $lines->println();
         assert(!$lines->split('\n')->exists(l| $l->startsWith('FAIL')), 'At least one test failed');
      },
      |fail('Only supported for Alloy execution');
   );
}

function <<access.private>> meta::pure::executionPlan::platformBinding::legendJava::tests::utils::testClass(): meta::external::language::java::metamodel::Class[1]
{
   javaClass('public', 'org.finos.test.TestMain')
}

###Mapping
Mapping meta::pure::executionPlan::platformBinding::legendJava::tests::utils::dummyMapping ()
