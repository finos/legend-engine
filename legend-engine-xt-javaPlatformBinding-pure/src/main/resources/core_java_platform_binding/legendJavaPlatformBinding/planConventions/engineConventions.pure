// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::transform::*;
import meta::pure::executionPlan::engine::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::extension::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;

Class meta::pure::executionPlan::platformBinding::legendJava::LegendJavaProhibitedFunctionsExtension extends LegendJavaPlatformBindingAdhocExtension
{
   {doc.doc = 'Functions not expected to be user facing and for which translation is not supported)'}
   prohibitedFunctions: Function<Any>[*];
}

Class meta::pure::executionPlan::platformBinding::legendJava::LegendJavaPlatformDependencyUpdateExtension extends LegendJavaPlatformBindingAdhocExtension
{
   {doc.doc = 'To update conventions with platform dependencies'}
   platformDependencyUpdate: Function<{Conventions[1], Extension[*]->Conventions[1]}>[0..1];
}

function meta::pure::executionPlan::engine::java::engineConventions(extensions:meta::pure::extension::Extension[*]): Conventions[1]
{
   let extraProhibitedFunctions = $extensions->extractLegendJavaAdhocExtensionsOfType(LegendJavaProhibitedFunctionsExtension).prohibitedFunctions;

   newConventions($extensions, $extraProhibitedFunctions)
      ->applyJavaEngineDependencies($extensions)
      ->registerBooleanLibrary()
      ->registerCollectionsLibrary()
      ->registerPureDateLibrary()
      ->registerLangLibrary()
      ->registerAssertLibrary()
      ->registerMathsLibrary()
      ->registerMetaLibrary()
      ->registerMultiplicityLibrary()
      ->registerStringLibrary()
      ->registerUnitLibrary()
      ->registerRuntimeLibrary();
}
