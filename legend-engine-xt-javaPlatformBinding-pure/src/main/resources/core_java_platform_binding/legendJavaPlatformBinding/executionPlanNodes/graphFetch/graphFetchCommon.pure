// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::naming::*;
import meta::pure::executionPlan::platformBinding::typeInfo::*;
import meta::pure::functions::hash::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::inMemory::*;
import meta::pure::milestoning::*;
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::extension::*;

function meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::prepareForGlobalGraphFetchNode(node: GlobalGraphFetchExecutionNode[1], path: String[1], context:GenerationContext[1], debug:DebugContext[1]):GenerationContext[1]
{
   if ($node.parentIndex->isEmpty(),
       |
         let localNodeInfo = $context->nodeInfosForPath($path + localGraphFetchNodePathPrefix())->toOne();

         ^$context
         (
            typeInfos = $context.typeInfos
                           ->addForGraphFetchTree($node.graphFetchTree->byPassClusteringInfo())
                           ->map(ti| if($node.enableConstraints == true, |$ti->addConstraintsForGraphFetchTree($node.graphFetchTree->byPassClusteringInfoDeep()), |$ti)),
            nodeInfos = $context.nodeInfos->concatenate(^NodeInfo(path = $path, returnType = $localNodeInfo.returnType, graphFetchTrees = $node.graphFetchTree->byPassClusteringInfoDeep()->cast(@RootGraphFetchTree<Any>)->concatenate($localNodeInfo.graphFetchTrees)))
         );,
       | $context
   )
}

function meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::prepareForSequenceNode(node: SequenceExecutionNode[1], path: String[1], context:GenerationContext[1], debug:DebugContext[1]):GenerationContext[1]
{
   let lastOnSequence = $context->childNodeInfosForPath($path)->last();
   if($lastOnSequence->isEmpty(),
       |$context,
       |^$context(nodeInfos = $context.nodeInfos->concatenate(^NodeInfo(path = $path, returnType = $lastOnSequence->toOne().returnType, graphFetchTrees = $lastOnSequence->toOne().graphFetchTrees)))
   );
}

function meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::localGraphFetchNodePathPrefix():String[1]
{
   '.localGraph'
}

function meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::generateBaseProjectForLocalGraphFetchNode(node: LocalGraphFetchExecutionNode[1], path:String[1], context:GenerationContext[1], storeSpecificGraphImplUpdates: Function<{meta::external::language::java::metamodel::Class[1] -> Project[1]}>[1], extensions:Extension[*], debug:DebugContext[1]): Project[1]
{
   let implProject   = if($node.resultType->instanceOf(ClassResultType)  &&!$node->meta::pure::graphFetch::executionPlan::nodeIsMerged() ,| generateGraphNodeImplementation($node, $context, $path, $storeSpecificGraphImplUpdates, $extensions, $debug), | []);
   let globalProject = if($node.parentIndex->isNotEmpty(), | newProject(), | generateTypes($context, $debug)); // Avoid generating interfaces and enums multiple times and merging later. Do it only at root nodes (which do not have parent index)
   $implProject->concatenate($globalProject)->toOneMany()->mergeProjects();
}

function meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::typeFromStoreLocalNode(storeLocalNode: LocalGraphFetchExecutionNode[1]):meta::pure::metamodel::type::Class<Any>[1]
{
   if ($storeLocalNode.resultType->cast(@ClassResultType).setImplementations->size() != 1,
       | $storeLocalNode.resultType->cast(@ClassResultType).type->cast(@meta::pure::metamodel::type::Class<Any>),
       | let setImpl = $storeLocalNode.resultType->cast(@ClassResultType).setImplementations->toOne()->cast(@InstanceSetImplementation);
         $setImpl.mappingClass->isNotEmpty()->if(| $setImpl.mappingClass->toOne(), | $setImpl.class);
   )
}

function meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::graphImplClass(storeLocalNode: LocalGraphFetchExecutionNode[1], path: String[1], context: GenerationContext[1]):meta::external::language::java::metamodel::Class[1]
{
   graphImplClass($storeLocalNode.nodeIndex, $context.conventions->className($storeLocalNode->typeFromStoreLocalNode()), $path, $context)
}

function meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::graphImplClass(nodeIndex: Integer[1], interface: meta::external::language::java::metamodel::Class[1], path: String[1], context: GenerationContext[1]):meta::external::language::java::metamodel::Class[1]
{
   $context.conventions
      ->planNodeClass('public', $path, 'GraphFetch_Node' + $nodeIndex->toString() + '_' + $interface.simpleName + '_Impl')
      ->usingKnownPackages($context.conventions->knownPackages())
      ->imports($context.conventions->standardImports())
      ->implements($interface);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::generateGraphNodeImplementation(node: LocalGraphFetchExecutionNode[1], context: GenerationContext[1], path: String[1], storeSpecificGraphImplUpdates: Function<{meta::external::language::java::metamodel::Class[1] -> Project[1]}>[1], extensions:Extension[*], debug: DebugContext[1]):Project[1]
{
   let resultClass       = $node->typeFromStoreLocalNode();
   let implClass         = graphImplClass($node, $path, $context);
   let implProject       = newProject()->addClasses($implClass);
   let propertiesProject = $implClass->updateImplementationClassWithProperties($node, $resultClass, $context, $extensions);
   let qualifiersProject = $implClass->updateImplementationClassWithQualifiedProperties($resultClass, $context);
   let storeProject      = $storeSpecificGraphImplUpdates->eval($implClass);
   let mergedProject     = mergeProjects([$implProject, $propertiesProject, $qualifiersProject, $storeProject]);
   let withSizeMethods   = $mergedProject->resolve($implClass)->updateImplementationClassWithInstanceSizeMethods($context);
   let mergedProjectWithSizeMethods = mergeProjects([$mergedProject, $withSizeMethods]);
   let withSerializableMethods      = $mergedProjectWithSizeMethods->resolve($implClass)->updateImplementationClassWithSerializableMethods($context);

   mergeProjects([$mergedProjectWithSizeMethods, $withSerializableMethods]);
}

function meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::createGraphInstance(conventions: Conventions[1], impl: meta::external::language::java::metamodel::Class[1], value: Code[1]): Code[1]
{
   j_newAnon(
      graphInstanceOf($impl, $conventions), [],
      [
         j_method(['public'], $impl, 'getValue', [], $value->j_return()),
         j_method(['public'], javaLong(), 'instanceSize', [], $value->j_invoke($conventions->getterName(instanceSizeIdentifier()), [], javaLong())->j_return())
      ]
   )
}

function <<access.private>> meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::updateImplementationClassWithProperties(implClass: meta::external::language::java::metamodel::Class[1], node: LocalGraphFetchExecutionNode[1], nodeType: meta::pure::metamodel::type::Class<Any>[1], context: GenerationContext[1], extensions:Extension[*]): Project[1]
{
   let conventions   = $context.conventions;
   let allProperties = $context.typeInfos->allProperties($nodeType);
   let fetchTree     = $node.graphFetchTree->cast(@RoutedGraphFetchTree);
   
     let isMerged = $fetchTree.sets->isNotEmpty() &&  $fetchTree.sets->at(0)->isPartOfMerge() || $node->nodeIsMerged();
     let withProperties = $allProperties->fold({p, javaClass |
      let fieldName   = $conventions->fieldName($p);
      let getterName  = $conventions->getterName($p);
      let fieldType   = $conventions->pureTypeToJavaType($p);
      let noMappingDefaultToEmpty = ($fetchTree.sets->size() == 1) && $fetchTree.sets->toOne()->isNoMappingDefaultToEmpty($p);
      let noMappingPassThru = $p.owner->instanceOf(meta::pure::metamodel::type::Class) && ($fetchTree.sets->size() == 1) && $fetchTree.sets->toOne()->passThruProperty($p, $extensions);
      if (  !$isMerged && $p.owner->instanceOf(meta::pure::metamodel::type::Class) && ($fetchTree.sets->size() == 1) && !($p->hasGeneratedMilestoningDatePropertyStereotype()) && !($noMappingDefaultToEmpty || $noMappingPassThru ) && $fetchTree.sets->toOne()->cast(@InstanceSetImplementation)->propertyMappingsByPropertyName($p.name->toOne())->isEmpty(),
         {|  
            $javaClass->addMethod(javaMethod(['public'], $fieldType, $getterName, [], j_throw(javaUnsupportedOperationException()->j_new(j_string('No mapping for property \'' + $p.name->toOne() +'\'')))))
         ;},
         {|
            let field  = j_this($javaClass)->j_field($fieldName, $fieldType);
            let param  = j_parameter($fieldType, $fieldName);
            let elType = if($fieldType->isJavaList(), | $fieldType->elementTypeOfJavaList(), | $fieldType);
            let object = j_parameter($elType, 'object');

            let getter = javaMethod(
               ['public'], $fieldType, $getterName, [],
               j_return(if($fieldType->isJavaList(),| j_conditional($field->j_eq(j_null()), j_emptyList($fieldType), $field),| $field))
            );
            let setter = javaMethod(
               ['public'], javaVoid(), $conventions->setterName($p), $param, 
               $field->j_assign($param)
            );
            let adder  = javaMethod(
               ['public'], javaVoid(), 'add' + $fieldName->toUpperFirstCharacter()->toOne(), [$object],
               if ($fieldType->isJavaList(),
                   | [
                        $field->j_eq(j_null())->j_if($field->j_assign(javaArrayList($elType)->j_new([]))),
                        $field->j_invoke('add', [$object], javaVoid())
                     ],
                   | [
                        j_cast($field, javaObject())->j_ne(j_null())->j_if(javaIllegalStateException()->j_new(j_string('Found multiple objects for property \'' + $p.name->toOne() + '\' of multiplicity with bound 1'))->j_throw()),
                        $field->j_assign($object)
                     ]
               )
            );

            $javaClass->addField(javaField(['private'], $fieldType, $fieldName))->addMethods([$getter, $setter, $adder]);
         }
      );
   }, $implClass);

   newProject()->addClasses($withProperties);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::updateImplementationClassWithQualifiedProperties(implClass: meta::external::language::java::metamodel::Class[1], nodeType: meta::pure::metamodel::type::Class<Any>[1], context: GenerationContext[1]): Project[1]
{
   // Not adding getter methods (as they can be store specific - getters need to be added as part of store specific implementation update)
   let conventions = $context.conventions;
   let typeInfo = $context.typeInfos->forClass($nodeType);
   let jThis = j_this($implClass);

   let updatedClass = $context.typeInfos->allQualifiedProperties($typeInfo)->fold({q, cl |
      let fieldName = $conventions->fieldName($q);
      let mapName = $fieldName + '_QualifierMap';
      let keyType = javaList(javaList(javaWildcard()));
      let fieldType = $conventions->pureTypeToJavaType($q);

      let field = $jThis->j_field($fieldName, $fieldType);
      let mapField = $jThis->j_field($mapName, javaMap($keyType, $fieldType));
      let param = j_parameter($fieldType, $fieldName);
      let keyVar = $keyType->j_variable('qualifierKey$');
      let existingVar = javaObject()->j_variable('existing$');
      let singlePropertyType = if ($q->functionReturnMultiplicity()->hasToOneUpperBound(), | $fieldType, | $fieldType->cast(@meta::external::language::java::metamodel::ParameterizedType).typeArguments->at(0));

      $cl
         ->addField(
            javaField(
               ['private'], javaMap($keyType, $fieldType), $mapName, j_new(javaParameterizedType(javaClass('java.util.HashMap'), [$keyType, $fieldType->toBoxed()]), [])
            )
         )
         ->addMethod(
            javaMethod(
               ['public'], javaMap($keyType, $fieldType), $conventions->getterName($q.name->toOne() + '_QualifierMap'), [],
               j_return($mapField)
            )
         )
         ->addMethod(
            javaMethod(
               ['public'], javaVoid(), $conventions->setterName($q), $q->functionType().parameters->evaluateAndDeactivate()->tail()->map(p | javaParam($conventions->pureTypeToJavaType($p.genericType.rawType->toOne(), $p.multiplicity), $p.name))->concatenate(javaParam($fieldType, 'qualifierValue$')),
               [
                  $keyVar->j_declare(javaArrays()->j_invoke([javaList(javaWildcard())], 'asList', $q->functionType().parameters->evaluateAndDeactivate()->tail()->map(p | let param = j_parameter($conventions->pureTypeToJavaType($p.genericType.rawType->toOne(), $p.multiplicity), $p.name); if($p.multiplicity->hasToOneUpperBound(), | javaArrays()->j_invoke('asList', $param, javaList(javaWildcard())), | $param);), $keyType)),
                  $existingVar->j_declare($mapField->j_invoke('put', [$keyVar, j_parameter($fieldType, 'qualifierValue$')], javaObject()))
               ]
               ->concatenate(
                  if ($q->functionReturnMultiplicity()->hasToOneUpperBound(),
                      | j_if($existingVar->j_ne(j_null()), j_throw(j_new(javaRuntimeException(), j_string('Found multiple objects for property \'' + $q.name->toOne() + '\' of multiplicity with bound 1')))),
                      | []
                  )
               )
            )
         )
         ->addMethod(
            javaMethod(
               ['public'], javaVoid(), $conventions->setterName($q.name->toOne() + '_QualifierMap'), [javaParam(javaMap($keyType, $fieldType), 'qualifierMap$')],
               $mapField->j_assign(j_parameter(javaMap($keyType, $fieldType), 'qualifierMap$'))
            )
         )
         ->addMethod(
            javaMethod(
               ['public'], javaVoid(), 'add' + $fieldName->toUpperFirstCharacter()->toOne(), $q->functionType().parameters->evaluateAndDeactivate()->tail()->map(p | javaParam($conventions->pureTypeToJavaType($p.genericType.rawType->toOne(), $p.multiplicity), $p.name))->concatenate(javaParam($singlePropertyType, 'qualifierValue$')),
               [
                  $keyVar->j_declare(javaArrays()->j_invoke([javaList(javaWildcard())], 'asList', $q->functionType().parameters->evaluateAndDeactivate()->tail()->map(p | let param = j_parameter($conventions->pureTypeToJavaType($p.genericType.rawType->toOne(), $p.multiplicity), $p.name); if($p.multiplicity->hasToOneUpperBound(), | javaArrays()->j_invoke('asList', $param, javaList(javaWildcard())), | $param);), $keyType)),
                  $existingVar->j_declare($mapField->j_invoke('get', [$keyVar], javaObject()))
               ]
               ->concatenate(
                  if (!$q->functionReturnMultiplicity()->hasToOneUpperBound(),
                      | j_if(
                           $existingVar->j_eq(j_null()),
                           $mapField->j_invoke('put', [$keyVar, j_new(javaArrayList($singlePropertyType), javaArrays()->j_invoke('asList', [j_parameter($fieldType, 'qualifierValue$')], $fieldType))], javaObject()),
                           $mapField->j_invoke('get', [$keyVar], javaObject())->j_invoke('add', j_parameter($fieldType, 'qualifierValue$'), javaVoid())
                        ),
                      | [
                            j_if($existingVar->j_ne(j_null()), j_throw(j_new(javaRuntimeException(), j_string('Found multiple objects for property \'' + $q.name->toOne() + '\' of multiplicity with bound 1')))),
                            $mapField->j_invoke('put', [$keyVar, j_parameter($fieldType, 'qualifierValue$')], javaObject())
                        ]
                  )
               )
            )
         );
   }, $implClass);

   newProject()->addClasses($updatedClass);
}


function meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::passThruProperty(setImpl:SetImplementation[1], property:AbstractProperty<Any>[1], extensions:Extension[*]):Boolean[1]
{
   $property.genericType.rawType->toOne()->instanceOf(DataType)
   && $setImpl->meta::pure::router::store::routing::isPropertyAutoMapped($property, $extensions)
}

function meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::updateImplementationClassWithSerializableMethods(implClass: meta::external::language::java::metamodel::Class[1], context: GenerationContext[1]): Project[1]
{
   let codeString  = $implClass->meta::external::language::java::serialization::classToString();
   let codeHash    = $codeString->hash(HashType.SHA256);

   let charToIntMap = newMap([
      pair('0', 0), pair('1', 1), pair('2', 2), pair('3', 3),
      pair('4', 4), pair('5', 5), pair('6', 6), pair('7', 7),
      pair('8', 8), pair('9', 9), pair('a', 10), pair('b', 11),
      pair('c', 12), pair('d', 13), pair('e', 14), pair('f', 15)
   ]);
   let prime    = floor(pow(2, 31) - 1);
   let uidValue = $codeHash->toLower()->chunk(1)->fold({c, h | (31 * $h) + $charToIntMap->get($c)->toOne() + 47}, 0)->mod($prime);

   newProject()->addClasses(
      $implClass
         ->implements(javaSerializable())
         ->addField(javaField(['private', 'static', 'final'], javaLong(), 'serialVersionUID', j_long($uidValue)->codeToString()))
   );
}


function meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::generateImplementationForPlatformPrimitiveQualifierLocalGraphFetchExecutionNode(p: PlatformPrimitiveQualifierLocalGraphFetchExecutionNode[1], path:String[1], context:GenerationContext[1], extensions : meta::pure::extension::Extension[*], debug:DebugContext[1]): GeneratedCode[1]
{
   let conventions = $context.conventions;

   let execClass = $conventions->planNodeClass('public', $path, 'Execute');
   let jThis = j_this($execClass);
   let jIGraphInstance = $conventions->className(GraphInstance);

   let contextParam = j_parameter($conventions->className(IExecutionNodeContext), 'executionNodeContext');
   let objectsParam = j_parameter(javaList(javaWildcard()), 'graphObjects');
   let objectParam = j_parameter(javaObject(), 'graphObject');

   let qp = $p.graphFetchTree->cast(@RoutedPropertyGraphFetchTree).property->cast(@QualifiedProperty<Any>);
   let pureParams = $qp->functionType().parameters->evaluateAndDeactivate();
   let inputParam = j_parameter($conventions->pureTypeToJavaType($pureParams->first().genericType.rawType->toOne(), PureOne), 'input$');
   let extraParams = $pureParams->tail()->map(p | j_parameter($conventions->pureTypeToJavaType($p.genericType.rawType->toOne(), $p.multiplicity), $p.name));

   let setterField = $jThis->j_field('setterMethod', javaReflectMethod());
   let javaException = j_parameter(javaException(), 'e');

   let valueExtractor = {x: VariableExpression[1] |
      let javaType = $conventions->pureTypeToJavaType($x.genericType.rawType->toOne(), PureOne);
      let typeArg  = if($javaType->isJavaList(), |$contextParam->j_invoke('listType', $javaType->elementType()->toBoxed()->j_classField()), |$javaType->toBoxed()->j_classField());
      j_cast(
         $contextParam->j_invoke('getResult', [j_string($x.name), $typeArg], $javaType),
         $javaType
      );
   };

   let paramsCodes = $p.graphFetchTree->cast(@PropertyGraphFetchTree).parameters->evaluateAndDeactivate()->map({x |
      let valCodes = $x->match([
         iv : InstanceValue[1] | $iv.values->map(x | if($x->instanceOf(VariableExpression), | $valueExtractor->eval($x), | $conventions->primitiveLiteral($x))),
         v  : VariableExpression[1] | $valueExtractor->eval($v)
      ]);
      let param = $pureParams->tail()->at($p.graphFetchTree->cast(@PropertyGraphFetchTree).parameters->evaluateAndDeactivate()->indexOf($x));
      if($param.multiplicity->hasToOneUpperBound(), | $valCodes->isEmpty()->if(|j_null(), | $valCodes->toOne()), | javaArrays()->j_invoke('asList', $valCodes, javaList(javaObject())));
   });

   let paramsClassesCodes = $p.graphFetchTree->cast(@PropertyGraphFetchTree).parameters->evaluateAndDeactivate()->map({x |
      let paramType = $x.genericType.rawType->toOne();
      let param = $pureParams->tail()->at($p.graphFetchTree->cast(@PropertyGraphFetchTree).parameters->evaluateAndDeactivate()->indexOf($x));
      if($param.multiplicity->hasToOneUpperBound(), | $conventions->pureTypeToJavaType($paramType, $param.multiplicity), | javaClass('java.util.List'))->j_classField();
   });

   let qpClassCode = if($qp->functionReturnMultiplicity()->hasToOneUpperBound(), | $conventions->pureTypeToJavaType($qp), | javaClass('java.util.List'))->j_classField();
   let qpJavaType = $conventions->pureTypeToJavaType($qp);
   let resVar = j_variable($qpJavaType, 'result');
   let singlePropertyType = if ($qp->functionReturnMultiplicity()->hasToOneUpperBound(), | $qpJavaType, | $qpJavaType->cast(@meta::external::language::java::metamodel::ParameterizedType).typeArguments->at(0));
   let streamObjectVar = j_parameter($singlePropertyType->toBoxed(), 'o');

   let getterBody = $qp.expressionSequence->evaluateAndDeactivate()->toOne()->changeThisVariableInValueSpecification('input$')->generateJavaMethodBody($conventions, $debug);
   let project = newProject()->addClass(
      $execClass
         ->implements($conventions->className(IPlatformPrimitiveQualifierLocalGraphFetchExecutionNodeSpecifics))
         ->addField(javaField(['private'], javaReflectMethod(), 'setterMethod'))
         ->addMethod(
            javaMethod(['private'], $qpJavaType, $conventions->getterName($qp), $inputParam->concatenate($extraParams), $getterBody)
         )
         ->addMethod(
            javaMethod(
               ['public'], javaStream(javaParameterizedType($jIGraphInstance, [javaWildcard()])), 'executeQualifierExpression', [$objectsParam, $contextParam],
               [
                  $objectsParam
                     ->j_streamOf()
                     ->js_flatMap(
                        j_lambda(
                           $objectParam,
                           [
                               $resVar->j_declare($jThis->j_invoke($conventions->getterName($qp), [$objectParam->j_cast($inputParam.type)]->concatenate($paramsCodes), $qpJavaType)),
                               j_try(
                                 [
                                     j_if(
                                       $setterField->j_eq(j_null()),
                                       $setterField->j_assign($objectParam->j_invoke('getClass', [], javaClassType())->j_invoke('getMethod', [j_string($conventions->setterName($qp))]->concatenate($paramsClassesCodes)->concatenate($qpClassCode), javaReflectMethod()))
                                     ),
                                     $setterField->j_invoke('invoke', [$objectParam]->concatenate($paramsCodes)->concatenate($resVar), javaVoid())
                                 ],
                                 j_catch($javaException, j_throw(j_new(javaRuntimeException(), [$javaException])))
                               ),
                               $resVar->j_streamOf()->js_map(
                                 j_lambda(
                                     $streamObjectVar,
                                     j_newAnon(graphInstanceOf($singlePropertyType->toBoxed(), $conventions), [],
                                       [
                                           j_method(['public'], $singlePropertyType->toBoxed(), 'getValue', [], j_return($streamObjectVar)),
                                           j_method(['public'], javaLong(), 'instanceSize', [], j_return($conventions->getPrimitiveObjectSize($qp.genericType.rawType->toOne())))
                                       ]
                                     )
                                 )
                               )->j_return()
                           ]->j_block()
                        )
                     )->j_return()
               ]
            )
         )
   );

   generatedCode(mergeProjects($project->concatenate($getterBody->dependencies()->resolveAndGetProjects())->toOneMany()), $execClass);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::getPrimitiveObjectSize(conventions: Conventions[1], type: meta::pure::metamodel::type::Type[1]): Code[1]
{
   let typeMap = newMap([
      pair(String,     20),
      pair(Integer,    20),
      pair(Float,      20),
      pair(Decimal,    88),
      pair(Boolean,    13),
      pair(StrictDate, 60),
      pair(DateTime,   60),
      pair(Date,       0)
   ]);

   if ($type->in([String, Integer, Float, Decimal, Boolean, StrictDate, DateTime, Date]),
       | $typeMap->get($type)->toOne()->j_long(),
       | if ($type->instanceOf(meta::pure::metamodel::type::Enumeration),
             | j_long(4),
             | fail('Type: ' + $type->elementToPath() + ' is not supported'); j_long(0);
         )
   );
}

function <<access.private>> meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::changeThisVariableInValueSpecification(vs: ValueSpecification[1], newVarName: String[1]): ValueSpecification[1]
{
   $vs->byPassRouterInfo()->match([
      fe: FunctionExpression[1] | ^$fe(parametersValues = $fe.parametersValues->evaluateAndDeactivate()->map(p | $p->changeThisVariableInValueSpecification($newVarName))),
      ve: VariableExpression[1] | if($ve.name == 'this', | ^$ve(name = $newVarName), | $ve),
      iv: InstanceValue[1]      | ^$iv(
                                     values = $iv.values->evaluateAndDeactivate()->map(v |
                                        $v->match([
                                           l: LambdaFunction<Any>[1] | ^$l(expressionSequence = $l.expressionSequence->evaluateAndDeactivate()->map(p | $p->changeThisVariableInValueSpecification($newVarName))),
                                           a: Any[1] | $a
                                        ])
                                     )
                                  ),
      v : ValueSpecification[1] | $v
   ])
}
