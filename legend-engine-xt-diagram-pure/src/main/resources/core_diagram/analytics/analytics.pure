// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::diagram::analytics::modelCoverage::*;

Class <<access.private>> meta::pure::metamodel::diagram::analytics::modelCoverage::DiagramModelCoverageAnalysisResult
{
  classes: Class<Any>[*];
  enumerations: Enumeration<Any>[*];
  profiles: Profile[*];
}

function meta::pure::metamodel::diagram::analytics::modelCoverage::getDiagramModelCoverage(diagrams:meta::pure::metamodel::diagram::Diagram[*]):DiagramModelCoverageAnalysisResult[1]
{
  let classViews = $diagrams->map(d|$d.classViews)->fold({a, b| $a->concatenate($b)}, []);
  let generalizationViews = $diagrams->map(d|$d.generalizationViews)->fold({a, b| $a->concatenate($b)}, []);
  let classes = $classViews.class->filter(t|$t->instanceOf(Class))->cast(@Class<Any>)->removeDuplicates();
  // NOTE: we don't support showing tagged values and stereotypes for properties at the moment
  // TODO?: prune profile to only used tags and stereotypes
  let profiles = $classes->map(class|$class.taggedValues->map(tv|$tv.tag.profile)->concatenate($class.stereotypes->map(st|$st.profile)))
    ->cast(@Profile)->removeDuplicates();
  let allProperties = $classes->filter(t|$t->instanceOf(Class))->map(t|$t->cast(@Class<Any>).properties->cast(@Property<Nil,Any|*>));
  let allQualifiedProperties = $classes->filter(t|$t->instanceOf(Class))->map(t|$t->cast(@Class<Any>).qualifiedProperties->cast(@QualifiedProperty<Any>));
  let propertyClasses = $allProperties->map(p|$p.genericType.rawType)->concatenate($allQualifiedProperties->map(p|$p.genericType.rawType))->filter(t|$t->instanceOf(Class))->cast(@Class<Any>)->removeDuplicates()
    ->filter(c|!$classes->contains($c));
  // TODO?: prune enumeration values
  let enumerations = $allProperties->map(p|$p.genericType.rawType)->concatenate($allQualifiedProperties->map(p|$p.genericType.rawType))->filter(t|$t->instanceOf(Enumeration))->cast(@Enumeration<Any>)->removeDuplicates();
  let prunedClasses = $classes->map(c|^Class<Any>(
    name = $c.name,
    package = $c.package,
    // prune properties
    properties = $c.properties->map(p|^Property<Nil,Any|*>(
      name = $p.name,
      genericType = $p.genericType,
      multiplicity = $p.multiplicity,
      // taggedValues = $p.taggedValues,
      // stereotypes = $p.stereotypes,
      aggregation = $p.aggregation,
      owner = $p.owner
    )),
    // NOTE: since qualified properties transformation does certain validation logic
    // we couldn't arbitrarily simplify like how we do properties
    qualifiedProperties = $c.qualifiedProperties,
    taggedValues = $c.taggedValues,
    stereotypes = $c.stereotypes,
    generalizations = $c.generalizations->filter(g|$generalizationViews->exists(gV|$gV.from.classView.class == $c && $gV.to.classView.class == $g.general.rawType))
  ));
  let prunedPropertyClasses = $propertyClasses->map(c|^Class<Any>(
    name = $c.name,
    package = $c.package
  ));

  ^DiagramModelCoverageAnalysisResult
  (
    classes = $prunedClasses->concatenate($prunedPropertyClasses),
    profiles = $profiles,
    enumerations = $enumerations
  );
}