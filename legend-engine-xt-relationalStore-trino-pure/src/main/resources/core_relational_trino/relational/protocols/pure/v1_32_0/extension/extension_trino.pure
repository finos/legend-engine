// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function <<meta::protocols::pure::v1_32_0::extension::RelationalModule.SerializerExtension>>
meta::protocols::pure::v1_32_0::transformation::fromPureGraph::connection::trinoSerializerExtension(): meta::protocols::pure::v1_32_0::extension::RelationalModuleSerializerExtension[1]
{
  ^meta::protocols::pure::v1_32_0::extension::RelationalModuleSerializerExtension(
    module = 'trino',
    transfers_connection_transformAuthenticationStrategy = [
        u:meta::pure::alloy::connections::alloy::authentication::TrinoDelegatedKerberosAuthenticationStrategy[1] |
            ^meta::protocols::pure::v1_32_0::metamodel::store::relational::connection::alloy::authentication::TrinoDelegatedKerberosAuthenticationStrategy(
                     _type = 'TrinoDelegatedKerberosAuth',
                     kerberosRemoteServiceName = $u.kerberosRemoteServiceName,
                     kerberosUseCanonicalHostname = $u.kerberosUseCanonicalHostname,
                     serverPrincipal = $u.serverPrincipal
                  )
    ],
    transfers_connection_transformDatasourceSpecification = [
    s:meta::pure::alloy::connections::alloy::specification::TrinoDatasourceSpecification[1] |
                     ^meta::protocols::pure::v1_32_0::metamodel::store::relational::connection::alloy::specification::TrinoDatasourceSpecification(
                        _type = 'Trino',
                        host = $s.host,
                        port = $s.port,
                        catalog = $s.catalog,
                        schema = $s.schema,
                        clientTags = $s.clientTags,
                        sslSpecification = if($s.sslSpecification->isEmpty(), |[], |^meta::protocols::pure::v1_32_0::metamodel::store::relational::connection::alloy::specification::TrinoSSLSpecification(
                                   ssl = $s.sslSpecification->toOne().ssl,
                                   trustStorePathVaultReference = $s.sslSpecification->toOne().trustStorePathVaultReference,
                                   trustStorePasswordVaultReference = $s.sslSpecification->toOne().trustStorePasswordVaultReference
                            ))
                     )
    ],
    reverse_transfers_typeLookups = [
     pair('Trino', 'TrinoDatasourceSpecification'),
     pair('TrinoDelegatedKerberosAuth', 'TrinoDelegatedKerberosAuthenticationStrategy')
    ],
    reverse_transfers_connection_transformAuthenticationStrategy = [
    u:meta::protocols::pure::v1_32_0::metamodel::store::relational::connection::alloy::authentication::TrinoDelegatedKerberosAuthenticationStrategy[1] |
                ^meta::pure::alloy::connections::alloy::authentication::TrinoDelegatedKerberosAuthenticationStrategy(
                         kerberosRemoteServiceName = $u.kerberosRemoteServiceName,
                         kerberosUseCanonicalHostname = $u.kerberosUseCanonicalHostname,
                         serverPrincipal = $u.serverPrincipal
                      )
    ],
    reverse_transfers_connection_transformDatasourceSpecification = [
    s:meta::protocols::pure::v1_32_0::metamodel::store::relational::connection::alloy::specification::TrinoDatasourceSpecification[1] |
                     ^meta::pure::alloy::connections::alloy::specification::TrinoDatasourceSpecification(
                        host = $s.host,
                        port = $s.port,
                        catalog = $s.catalog,
                        schema = $s.schema,
                        clientTags = $s.clientTags,
                        sslSpecification =  if($s.sslSpecification->isEmpty(), |[], |^meta::pure::alloy::connections::alloy::specification::TrinoSSLSpecification(
                                                           ssl = $s.sslSpecification->toOne().ssl,
                                                           trustStorePathVaultReference = $s.sslSpecification->toOne().trustStorePathVaultReference,
                                                           trustStorePasswordVaultReference = $s.sslSpecification->toOne().trustStorePasswordVaultReference
                                                   ))
                     )
    ]
  )
}
