// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::json::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::*;
import meta::pure::extension::*;
import meta::pure::functions::io::http::*;
import meta::pure::test::*;
import meta::pure::store::*;
import meta::pure::runtime::*;
import meta::external::store::mongodb::executionTest::utils::*;
import  meta::external::store::mongodb::executionPlan::legendJava::test::*;

import meta::external::store::mongodb::executionTest::*;
import meta::external::store::mongodb::executionTest::utils::*;
import meta::external::store::mongodb::executionTest::domain::*;

Class meta::external::store::mongodb::executionTest::TestConfig
{
  tag: String[1];
  mapping: meta::pure::mapping::Mapping[1];
  runtime: meta::pure::runtime::Runtime[1];
}

function meta::external::store::mongodb::executionTest::getCompiledTestConfig(tag: String[1], pureSetupToCompileFileLoc: String[1]):meta::external::store::mongodb::executionTest::TestConfig[1]
{

let file = meta::pure::functions::io::readFile($pureSetupToCompileFileLoc)->toOne();
let compiled = meta::legend::compile($file);
let compiledMapping = $compiled->at(3)->cast(@meta::pure::mapping::Mapping)->toOne();
let compiledRuntime = $compiled->at(1)->cast(@meta::pure::runtime::PackageableRuntime).runtimeValue->cast(@meta::pure::runtime::Runtime);

 let testConfig = ^meta::external::store::mongodb::executionTest::TestConfig(
        tag = $tag,
        mapping = $compiledMapping,
        runtime = $compiledRuntime
      );

}

function  meta::external::store::mongodb::executionTest::collectTest(
    tag: String[1],
    testConfig: TestConfig[1]
  ): PureTestCollection[1]
{

  meta::pure::test::collectParameterizedTests(
    meta::external::store::mongodb::executionTest::testCase,
    $tag,
    $testConfig,
    [],
    []
  );
}

// TODO: Add ability to start/stop MongoDB dockerized instance

function meta::external::store::mongodb::executionTest::executeAndAssert(f: FunctionDefinition<Any>[1], expectedResult: String[1]):Boolean[1]
 {

 let executionContext = ^meta::external::store::mongodb::functions::pureToDatabaseCommand::MongoDBExecutionContext(queryTimeOutInSeconds=5, enableConstraints=false);
  
   let result = meta::legend::execute(
    $f,
    [],
    $executionContext,
    meta::external::store::mongodb::executionPlan::platformBinding::legendJava::mongoDBLegendJavaPlatformBindingExtensions()
  )->meta::json::parseJSON()->meta::json::toPrettyJSONString();
  
  assertEquals($expectedResult, $result);
}
function 
  <<paramTest.Test>>
  {doc.doc = 'Test simple single level Filter'} 
 meta::external::store::mongodb::executionTest::testCase::graphfetch::filter::singleFirstLevelFilter(config:meta::external::store::mongodb::executionTest::TestConfig[1]):Boolean[1]
{

  let mapping = $config.mapping;
  let runtime = $config.runtime;

  let personTree = 
  #{
  Person {
    firstName,
    lastName,
    firm {
    legalName,
    address
    }
  }
}#;

  let personQuery = {|Person.all()->from($mapping, $runtime)->filter(x|  $x.firstName == 'Jane')
  ->graphFetch($personTree)->serialize($personTree)};

  let expectedResult = readFile('/core_mongodb_execution_test/data/singleFirstLevelFilter.json')->toOne();
  
  meta::external::store::mongodb::executionTest::executeAndAssert($personQuery, $expectedResult);
}


function 
  <<paramTest.Test>>
  {doc.doc = 'Test simple nested level Filter'} 
 meta::external::store::mongodb::executionTest::testCase::graphfetch::filter::singleNestedLevelFilter(config:TestConfig[1]):Boolean[1]
{

  let mapping = $config.mapping;
  let runtime = $config.runtime;

  let personTree = #{
    Person {
      firstName,
      lastName,
      firm {
        legalName,
        address
      }
    }
}#;

  let personQuery = {|Person.all()->from($mapping, $runtime)->filter(x| $x.firm.legalName == 'Goldman Sachs')
  ->graphFetch($personTree)->serialize($personTree)};

  let expectedResult = readFile('/core_mongodb_execution_test/data/singleNestedLevelFilter.json')->toOne();
  executeAndAssert($personQuery, $expectedResult);
}

function 
<<paramTest.Test>>
  {doc.doc = 'Test simple nested level Filter'} 
 meta::external::store::mongodb::executionTest::testCase::graphfetch::filter::multipleFilters(config:TestConfig[1]):Boolean[1]
{

  let mapping = $config.mapping;
  let runtime = $config.runtime;

  let personTree = #{
    Person {
      firstName,
      lastName
      }
    }#;

  let personQuery = {|Person.all()->from($mapping, $runtime)->filter(x| $x.firstName == 'Jane' && $x.lastName == 'Doe')
  ->graphFetch($personTree)->serialize($personTree)};

  let expectedResult = readFile('/core_mongodb_execution_test/data/multipleSimpleFilters.json')->toOne();
  executeAndAssert($personQuery, $expectedResult);
}


function <<access.private>> meta::external::store::mongodb::executionTest::v7::collectTest(tag: String[1]): PureTestCollection[1]
{

  let config = meta::external::store::mongodb::executionTest::getCompiledTestConfig($tag, '/core_mongodb_execution_test/data/pureSetup.txt');

  meta::external::store::mongodb::executionTest::collectTest(
    $tag,
    $config
  );
}

function <<test.TestCollection>> meta::external::store::mongodb::executionTest::v7::test_4_4_1(): PureTestCollection[1]
{
  '4.4.1'->meta::external::store::mongodb::executionTest::v7::collectTest();  
}

###Mapping
Mapping  meta::external::store::mongodb::executionTest::EmptyMapping()