// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::extension::*;
import meta::external::language::java::metamodel::*;

import meta::pure::executionPlan::engine::java::*;

import meta::pure::graphFetch::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::mapping::*;
import meta::pure::router::clustering::*;
import meta::pure::extension::*;
import meta::pure::store::*;
import meta::pure::runtime::*;

import meta::java::generation::code::*;

import meta::external::store::service::extension::*;
import meta::external::store::service::router::systemMapping::*;
import meta::external::store::service::executionPlan::engine::java::*;
import meta::external::store::service::executionPlan::nodes::*;
import meta::external::store::service::executionPlan::generation::*;
import meta::external::store::service::executionPlan::toString::*;
import meta::external::store::service::metamodel::*;
import meta::external::store::service::metamodel::mapping::*;
import meta::external::store::service::metamodel::runtime::*;


Class meta::external::store::service::extension::ServiceStoreExtension extends ModuleExtension
{
   executionPlan_print_securitySchemeToString : Function<{Nil[1] -> String[1]}>[*];
}

function meta::external::store::service::extension::serviceStoreExtensions()  : meta::pure::extension::Extension[1]
{
   serviceStoreExtension('serviceStore')
}

function meta::external::store::service::extension::serviceStoreSerializerExtension(version:String[1]):String[1]
{
   'meta::protocols::pure::'+$version+'::extension::store::service::getServiceStoreExtension_String_1__SerializerExtension_1_';
}

function <<access.private>> meta::external::store::service::extension::serviceStoreExtension(type:String[1]) : meta::pure::extension::Extension[1]
{
   ^Extension
   (
      type = $type,
      availableStores = [meta::external::store::service::contract::serviceStoreStoreContract()],
      serializerExtension =  meta::external::store::service::extension::serviceStoreSerializerExtension_String_1__String_1_,
      graphExtension_calculateSourceTree = {tree:RootGraphFetchTree<Any>[1] |
         {rsi: RootServiceInstanceSetImplementation[1] |
            $tree;
         }
      }
   )
}
