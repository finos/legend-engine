// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::pure::extension::*;
import meta::external::store::service::metamodel::*;
import meta::external::store::service::metamodel::runtime::*;
import meta::pure::functions::collection::*;

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::store::service::transformServiceStoreConnection(connection: ServiceStoreConnection[1],extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::connection::store::service::ServiceStoreConnection[1]
{
   ^meta::protocols::pure::vX_X_X::metamodel::connection::store::service::ServiceStoreConnection(
      _type   = 'serviceStore',
      element = $connection.element->cast(@ServiceStore)->elementToPath(),
      baseUrl = $connection.baseUrl,
      authSpecs = $connection.authSpecs->toOne()->keyValues()->map(e | pair($e.first, $e.second->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::store::service::transformAuthTokenGenerationSpecification($extensions)))->newMap()
   );
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::store::service::transformAuthTokenGenerationSpecification(a:AuthenticationTokenGenerationSpecification[1], extensions:Extension[*]):meta::protocols::pure::vX_X_X::metamodel::connection::store::service::AuthenticationTokenGenerationSpecification[1]
{
   $a->match($extensions.serializerExtension('vX_X_X')->cast(@meta::protocols::pure::vX_X_X::extension::SerializerExtension_vX_X_X).moduleSerializerExtension('serviceStore')->cast(@meta::protocols::pure::vX_X_X::extension::store::service::ServiceStoreModuleSerializerExtension).transfers_authTokenGenerationSpecification_transformAuthTokenGenerationSpecification->concatenate([
      o:meta::external::store::service::metamodel::runtime::OauthTokenGenerationSpecification [1] |
        ^meta::protocols::pure::vX_X_X::metamodel::connection::store::service::OauthTokenGenerationSpecification(
            _type = 'oauth',
            //associatedSecurityScheme = $o.associatedSecurityScheme,
            grantType = $o.grantType->toString(),
            clientId = $o.clientId,
            clientSecretVaultReference = $o.clientSecretVaultReference,
            authServerUrl = $o.authServerUrl
        ),
      u:meta::external::store::service::metamodel::runtime::UsernamePasswordGenerationSpecification [1] |
                ^meta::protocols::pure::vX_X_X::metamodel::connection::store::service::UsernamePasswordGenerationSpecification(
                    _type = 'basic',
                    //associatedSecurityScheme = $u.associatedSecurityScheme,
                    username = $u.username,
                    password = $u.password
                ),
      a:meta::external::store::service::metamodel::runtime::ApiKeySpecification [1] |
                          ^meta::protocols::pure::vX_X_X::metamodel::connection::store::service::ApiKeySpecification(
                              _type = 'apiKey',
                              //associatedSecurityScheme = $u.associatedSecurityScheme,
                              value = $a.value
                          ),
      other: meta::external::store::service::metamodel::runtime::AuthenticationTokenGenerationSpecification[1] |
         ^meta::protocols::pure::vX_X_X::metamodel::connection::store::service::AuthenticationTokenGenerationSpecification(
            //associatedSecurityScheme = 'unknown',
            _type = 'unknown'
         )
   ])->toOneMany())
}