// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::store::*;
import meta::pure::router::systemMapping::tests::*;
import meta::pure::executionPlan::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::mapping::*;
import meta::pure::extension::*;
import meta::pure::runtime::*;
import meta::external::store::service::functions::pureToServiceStoreQuery::*;
import meta::external::store::service::metamodel::mapping::*;
import meta::external::store::service::metamodel::runtime::*;
import meta::external::store::service::executionPlan::nodes::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::graphFetch::routing::*;


function meta::external::store::service::contract::serviceStoreStoreContract():StoreContract[1]
{
   ^StoreContract
   (
     id = 'serviceStore',
     supports = meta::external::store::service::contract::supports_FunctionExpression_1__Boolean_1_,
     planExecution = meta::external::store::service::contract::planExecution_StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_$0_1$__Runtime_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_,
     planGraphFetchExecution = meta::external::store::service::contract::planGraphFetchExecution_ClusteredGraphFetchTree_1__String_MANY__Boolean_1__Boolean_1__StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_1__Runtime_1__ExecutionContext_1__Extension_MANY__DebugContext_1__LocalGraphFetchExecutionNode_1_,
     planCrossGraphFetchExecution = meta::external::store::service::contract::planCrossGraphFetchExecution_ClusteredGraphFetchTree_1__String_MANY__String_1__Boolean_1__Boolean_1__Map_1__Mapping_1__Runtime_1__ExecutionContext_1__Extension_MANY__DebugContext_1__LocalGraphFetchExecutionNode_1_,

     supportsSetImplementation = s:SetImplementation[1]|$s->instanceOf(RootServiceInstanceSetImplementation) || $s->instanceOf(EmbeddedServiceStoreSetImplementation),
     supportsStore = s:Store[1]|$s->instanceOf(meta::external::store::service::metamodel::ServiceStore),
     resolveStoreFromSetImplementation = s:InstanceSetImplementation[1]|$s->match(
                                                                            [
                                                                              r : RootServiceInstanceSetImplementation[1] | $r.serviceStore(),
                                                                              e : EmbeddedServiceStoreSetImplementation[1] | ^meta::pure::router::store::embedded::EmbeddedStore(package=::)
                                                                            ]
                                                                        ),
     supportsNativeJoinAmongElements = false,

     printConnectionToString = {extensions:meta::pure::extension::Extension[*]|
                                       [
                                           s:ServiceStoreConnection[1]| meta::external::store::service::executionPlan::toString::serviceStoreConnectionToString($s);
                                       ]},
     printPlanNodeToString = {space : String[1], extensions:meta::pure::extension::Extension[*]|
                                       [
                                          s:RestServiceExecutionNode[1] | meta::external::store::service::executionPlan::toString::serviceStoreExecutionNodeToString($s, $space, $extensions);,
                                          sp:ServiceParametersResolutionExecutionNode[1] | meta::external::store::service::executionPlan::toString::serviceParametersResolutionExecutionNodeToString($sp, $space, $extensions);,
                                          l:LimitExecutionNode[1] | meta::external::store::service::executionPlan::toString::limitExecutionNodeToString($l, $space, $extensions);
                                       ]},
    extractSourceClassFromSetImplementation =
            [
              s: RootServiceInstanceSetImplementation[1]  | $s.class,
              e: EmbeddedServiceStoreSetImplementation[1] | $e.class
            ],
    crossStoreSourceSupportsBatching = {
        set:InstanceSetImplementation[1], xProperties:AbstractProperty<Any>[*], params : Map<String, String>[1] |
          if ($set->instanceOf(RootServiceInstanceSetImplementation),
            | $xProperties->meta::external::store::service::executionPlan::generation::querySupportsBatching($params, $set->cast(@RootServiceInstanceSetImplementation)),
            | false
          )
    }
   )
   ->meta::pure::extension::withExtraExecutionPlanPlatformBindingExtension(meta::external::store::service::contract::serviceStoreLegendJavaExecutionPlanPlatformBindingExtension())
}

// Execution Plan
function meta::external::store::service::contract::planExecution(sq:StoreQuery[1], ext:RoutedValueSpecification[0..1], mapping:Mapping[0..1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let fe = $sq.fe->evaluateAndDeactivate()->cast(@FunctionExpression);
   assert($fe.func->in(graphFetchFunctions()), 'Service Store supports graphFetch queries only');
   planGraphFetchExecution($sq, $ext, $mapping->toOne(), $runtime->toOne(), $exeCtx, $extensions, $debug);
}

function meta::external::store::service::contract::planGraphFetchExecution(tree:ClusteredGraphFetchTree[1], orderedPaths:String[*], enableConstraints:Boolean[1], checked:Boolean[1], sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[1], runtime:Runtime[1], exeCtx:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):LocalGraphFetchExecutionNode[1]
{
  meta::external::store::service::executionPlan::generation::planRootGraphFetchExecutionServiceStore($sq, $ext, $tree, $orderedPaths, $m, $runtime, $exeCtx, $enableConstraints, $checked, $extensions, $debug)
}

function meta::external::store::service::contract::planCrossGraphFetchExecution(tree:ClusteredGraphFetchTree[1], orderedPaths:String[*], newParentPath:String[1], enableConstraints:Boolean[1], checked:Boolean[1], inScopeVars: Map<String, List<Any>>[1], m:Mapping[1], runtime:Runtime[1], exeCtx:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):LocalGraphFetchExecutionNode[1]
{
  meta::external::store::service::executionPlan::generation::planCrossStoreGraphFetchExecutionServiceStore($tree, $orderedPaths, $newParentPath, $inScopeVars, $m, $runtime, $exeCtx, $enableConstraints, $checked, $extensions, $debug)
}

// Functions supported by serviceStore execution
function meta::external::store::service::contract::supports(f:FunctionExpression[1]):Boolean[1]
{
   !findSupportedFunction($f, getSupportedFunctions())->isEmpty()
}

// Legend Java Platform Binding Extension
###Pure
import meta::external::language::java::metamodel::*;
import meta::external::store::service::executionPlan::nodes::*;
import meta::external::store::service::executionPlan::engine::java::*;
import meta::external::store::service::metamodel::mapping::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::extension::*;
import meta::pure::mapping::*;

function <<access.private>> meta::external::store::service::contract::serviceStoreLegendJavaExecutionPlanPlatformBindingExtension(): LegendJavaExecutionPlanPlatformBindingExtension[1]
{
   ^LegendJavaExecutionPlanPlatformBindingExtension
   (
      id = legendJavaPlatformBindingId(),

      // Graph fetch extensions ----------------------------------------------------------------------------------
      prepareNode = {path:String[1], contextFromOtherNodes:GenerationContext[1], extensions:Extension[*], debug:DebugContext[1] |
         [
            l:LimitExecutionNode[1] | $l->prepareForLimitExecutionNode($path, $contextFromOtherNodes, $debug)
         ]
      },

      generateCode = {path:String[1], context:GenerationContext[1], extensions:Extension[*], debug:DebugContext[1] |
         [
            s:ServiceParametersResolutionExecutionNode[1] | $s->generateImplementationForServiceParametersResolutionNode($path, $context, $debug)
         ]
      },
      // ---------------------------------------------------------------------------------- Graph fetch extensions


      // Transformer extensions ----------------------------------------------------------------------------------
      extractTransformFunctionFromPropertyMapping = [
         {spm : ServiceStorePropertyMapping[1] | let dummyLambda = {|'ok'};
                                                 let gen = ^GenericType
                                                            (
                                                               rawType = LambdaFunction,
                                                               typeArguments = ^GenericType
                                                                                 (
                                                                                    rawType = ^meta::pure::metamodel::type::FunctionType
                                                                                             (
                                                                                                parameters = [],
                                                                                                returnType = $spm.property->functionReturnType(),
                                                                                                returnMultiplicity= $spm.property->functionReturnMultiplicity()
                                                                                             )
                                                                                 )
                                                            );
                                                 let exp = ^SimpleFunctionExpression(func = $spm.property,
                                                                                     genericType = $spm.property.genericType,
                                                                                     importGroup = system.children->at(0)->cast(@Package).children->at(0)->cast(@ImportGroup),
                                                                                     multiplicity = $spm.property.multiplicity,
                                                                                     parametersValues = ^VariableExpression(genericType=^GenericType(rawType = $spm.property.owner->cast(@meta::pure::metamodel::type::Class<Any>)), multiplicity = PureOne, name = 'src'),
                                                                                     propertyName = ^InstanceValue(genericType = ^GenericType(rawType = String), multiplicity = PureOne, values = $spm.property.name));
                                                 ^$dummyLambda(classifierGenericType = $gen, expressionSequence = $exp);},
         {epm : EmbeddedServiceStoreSetImplementation[1] | let dummyLambda = {|'ok'};
                                                 let gen = ^GenericType
                                                            (
                                                               rawType = LambdaFunction,
                                                               typeArguments = ^GenericType
                                                                                 (
                                                                                    rawType = ^meta::pure::metamodel::type::FunctionType
                                                                                             (
                                                                                                parameters = [],
                                                                                                returnType = $epm.property->functionReturnType(),
                                                                                                returnMultiplicity= $epm.property->functionReturnMultiplicity()
                                                                                             )
                                                                                 )
                                                            );
                                                 let exp = ^SimpleFunctionExpression(func = $epm.property,
                                                                                     genericType = $epm.property.genericType,
                                                                                     importGroup = system.children->at(0)->cast(@Package).children->at(0)->cast(@ImportGroup),
                                                                                     multiplicity = $epm.property.multiplicity,
                                                                                     parametersValues = ^VariableExpression(genericType=^GenericType(rawType = $epm.property.owner->cast(@meta::pure::metamodel::type::Class<Any>)), multiplicity = PureOne, name = 'src'),
                                                                                     propertyName = ^InstanceValue(genericType = ^GenericType(rawType = String), multiplicity = PureOne, values = $epm.property.name));
                                                 ^$dummyLambda(classifierGenericType = $gen, expressionSequence = $exp);}
      ],

      extractValueTransformerFromPropertyMapping = [
         spm : ServiceStorePropertyMapping[1] |  [],
         epm : EmbeddedServiceStoreSetImplementation[1] | []
      ],
      
      applyTypeFilter = {set:InstanceSetImplementation[1], src:Code[1], withoutFilter:Code[1..*], context:GenerationContext[1], debug:DebugContext[1] |
         [
            rsi: RootServiceInstanceSetImplementation[1]  | $withoutFilter,
            esi: EmbeddedServiceStoreSetImplementation[1] | $withoutFilter
         ]
      }
      // ---------------------------------------------------------------------------------- Transformer extensions
   )
}
