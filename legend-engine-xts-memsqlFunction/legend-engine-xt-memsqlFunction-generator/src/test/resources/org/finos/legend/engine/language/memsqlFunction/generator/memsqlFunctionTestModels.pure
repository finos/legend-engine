###Relational
Database demo::stores::DemoDb
(
  Schema LEGEND_GOVERNANCE
  (
    Table BUSINESS_OBJECTS
    (
      BUSINESS_OBJECT_UDTF_NAME VARCHAR(16777216),
      APP_NAME VARCHAR(16777216) PRIMARY KEY,
      ALLOY_SERVICE_NAME VARCHAR(16777216),
      VERSION_NUMBER VARCHAR(16777216),
      OWNER VARCHAR(16777216),
      CREATE_DATETIME TIMESTAMP,
      MODIFIED_DATETIME TIMESTAMP,
      DESCRIPTION VARCHAR(16777216),
      TO_BE_UPDATED VARCHAR(16777216),
      SQL_FRAGMENT VARCHAR(16777216)
    )
  )
)

###MemSql
MemSqlFunction demo::activators::DemoMemSqlFunction
{
  functionName: 'demoFunction1';
  function: demo::functions::NativeApp_QueryFunction():TabularDataSet[1];
  ownership : Deployment { identifier: 'id1' };
  activationConfiguration: demo::connection::MemsqlConnection;
}

MemSqlFunction demo::activators::DemoMemSqlFunctionWithParam
{
  functionName: 'demoFunction2';
  function: demo::functions::NativeApp_QueryFunction(Integer[1],String[1]):TabularDataSet[1];
  ownership : Deployment { identifier: 'id1' };
  activationConfiguration: demo::connection::MemsqlConnection;
}

###Pure
Class demo::models::NativeApp
{
  AppName: String[1];
  Doc: String[1];
  Query: String[1];
  Owner: String[1];
  Version: String[1];
}

function demo::functions::NativeApp_QueryFunction(): meta::pure::tds::TabularDataSet[1]
{
  demo::models::NativeApp.all()->project(
    [
      x|$x.AppName,
      x|$x.Query,
      x|$x.Owner,
      x|$x.Version,
      x|$x.Doc
    ],
    [
      'App Name',
      'Query',
      'Owner',
      'Version',
      'Doc'
    ]
  )->from(
    demo::mapping::DemoMapping,
    demo::runtime::memsqlRunTime
  )
}

function demo::functions::NativeApp_QueryFunction(nameLength: Integer[1], nameStart: String[1]): meta::pure::tds::TabularDataSet[1]
{
  demo::models::NativeApp.all()->filter(
    x|($x.AppName->length() >
      $nameLength) &&
      $x.AppName->startsWith(
      $nameStart
    )
  )->project(
    [
      x|$x.AppName,
      x|$x.Query,
      x|$x.Owner,
      x|$x.Version,
      x|$x.Doc
    ],
    [
      'App Name',
      'Query',
      'Owner',
      'Version',
      'Doc'
    ]
  )->from(
    demo::mapping::DemoMapping,
    demo::runtime::memsqlRunTime
  )
}

###Mapping
Mapping demo::mapping::DemoMapping
(
  *demo::models::NativeApp: Relational
  {
    ~primaryKey
    (
      [demo::stores::DemoDb]LEGEND_GOVERNANCE.BUSINESS_OBJECTS.APP_NAME
    )
    ~mainTable [demo::stores::DemoDb]LEGEND_GOVERNANCE.BUSINESS_OBJECTS
    AppName: [demo::stores::DemoDb]LEGEND_GOVERNANCE.BUSINESS_OBJECTS.APP_NAME,
    Doc: [demo::stores::DemoDb]LEGEND_GOVERNANCE.BUSINESS_OBJECTS.DESCRIPTION,
    Query: [demo::stores::DemoDb]LEGEND_GOVERNANCE.BUSINESS_OBJECTS.SQL_FRAGMENT,
    Owner: [demo::stores::DemoDb]LEGEND_GOVERNANCE.BUSINESS_OBJECTS.OWNER,
    Version: [demo::stores::DemoDb]LEGEND_GOVERNANCE.BUSINESS_OBJECTS.VERSION_NUMBER
  }
)

###Connection
RelationalDatabaseConnection demo::connection::MemsqlConnection
{
  store: demo::stores::DemoDb;
  type: MemSQL;
  specification: Static
  {
    name: 'my_connection_name';
    host: 'my_connection_host';
    port: 7777;
  };
  auth: MiddleTierUserNamePassword
  {
    vaultReference: 'abc123';
  };
}

###Runtime
Runtime demo::runtime::memsqlRunTime
{
  mappings:
  [
    demo::mapping::DemoMapping
  ];
  connections:
  [
    demo::stores::DemoDb:
    [
      connection_1: demo::connection::MemsqlConnection
    ]
  ];
}