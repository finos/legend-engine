import meta::pure::runtime::*;
import meta::relational::runtime::*;
import meta::external::function::activator::memSqlFunction::generation::*;
import meta::relational::mapping::*;
import meta::pure::executionPlan::*;

Class meta::external::function::activator::memSqlFunction::MemSqlFunctionExecutionContext extends FunctionActivatorExecutionContext
{
}

function meta::external::function::activator::memSqlFunction::generation::generateArtifact(s: meta::external::function::activator::memSqlFunction::MemSqlFunction[1]):String[1]
{
  let extensions = meta::external::format::shared::externalFormatExtension()->concatenate(meta::relational::extension::relationalExtensions());
  meta::external::function::activator::memSqlFunction::generation::generateArtifact($s, $extensions);
}

function  meta::external::function::activator::memSqlFunction::generation::generateArtifact(s: meta::external::function::activator::memSqlFunction::MemSqlFunction[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
  let inputParamsStub = generateInputParamsStub($s.function);

  let context = ^meta::external::function::activator::memSqlFunction::MemSqlFunctionExecutionContext(postProcessor = meta::relational::postProcessor::ReplaceFreeMarkerWithTableFunctionParamHolder_SQLQuery_1__PostProcessorResult_1_);
  let contextWithEnumPushDown = $context->meta::pure::executionPlan::featureFlag::addFlagToContext(meta::pure::executionPlan::features::Feature.PUSH_DOWN_ENUM_TRANSFORM);  

  let plan =  meta::pure::executionPlan::executionPlan($s.function->cast(@ConcreteFunctionDefinition<Any>), $contextWithEnumPushDown, $extensions, noDebug());
  let resultStub = generateResultTypeStub($plan.rootExecutionNode.resultType->cast(@TDSResultType), $extensions);
  let generatedQuery = $plan.rootExecutionNode->allNodes($extensions)->filter(n|$n->instanceOf(SQLExecutionNode))->last()->cast(@SQLExecutionNode).sqlQuery->toOne('candidate query not found');
  
  $s.functionName->toUpper() + $inputParamsStub + ' RETURNS TABLE AS RETURN '+ $generatedQuery + ';';
}

function  meta::external::function::activator::memSqlFunction::generation::generateResultTypeStub(r: TDSResultType[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
  let tdsTypeToRelationalTypeMap = PureTypeToMemsqlTypeMap();
  $r.tdsColumns->map(c|'"'+ $c.name->toUpper() + '" '+ $tdsTypeToRelationalTypeMap->get($c.type->toOne('Column type missing for column: '+$c.name))->toOne('Relational type missing for type: '+ $c.type->toOne()->toString()))->joinStrings(',');
}

function  <<access.private>> meta::external::function::activator::memSqlFunction::generation::generateInputParamsStub(f:Function<Any>[1]):String[1]
{  
  let params = $f->functionType().parameters->evaluateAndDeactivate();   
  assertEmpty($params->filter(p | $p.multiplicity != PureOne), 'not implemented, only multiplicity PureOne for memsql app params is supported: ' + $params->filter(p | $p.multiplicity != PureOne)->map(p|$p.name)->joinStrings(', '));
  assertEmpty($params->filter(p | $p.genericType.rawType->toOne()->instanceOf(Enumeration)), 'not implemented, enum type for memsql app params is not supported : ' + $params->filter(p | $p.genericType.rawType->toOne()->instanceOf(Enumeration))->map(p|$p.name)->joinStrings(', '));
  let typeMap = PureTypeToMemsqlTypeMap();
  '(' + $params->map(p|'' + $p.name + ' ' + $typeMap->get($p.genericType.rawType->toOne())->toOne('Relational type missing for type: ' + $p.genericType.rawType->toOne()->toString()))->joinStrings(',') + ')';
}

function <<access.private>>  meta::external::function::activator::memSqlFunction::generation::PureTypeToMemsqlTypeMap():Map<PrimitiveType, String>[1]
{
  [
  pair(Integer, 'INT'),
  pair(Float, 'FLOAT'),
  pair(Number, 'INT'),
  pair(String, 'VARCHAR(255)'),
  pair(Date, 'DATE'),
  pair(DateTime, 'DATETIME'),
  pair(Boolean, 'BOOLEAN')
  ]->newMap()
}