// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::platform::objectReference::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::naming::*;
import meta::pure::executionPlan::platformBinding::typeInfo::*;
import meta::pure::graphFetch::execution::*;


Class meta::pure::executionPlan::platformBinding::legendJava::platform::objectReference::LegendJavaObjectReferenceParsingExtension extends LegendJavaPlatformBindingAdhocExtension
{
   {doc.doc = 'Store type to filter the right extension'}
   storeType: String[1];

   {doc.doc = 'Given arguments, path, generation context and debug context, generates object reference parser class'}
   generateObjectReferenceParserImpl: Function<{Any[*], String[1], GenerationContext[1], DebugContext[1] -> meta::external::language::java::metamodel::Class[1]}>[1];
}

function meta::pure::executionPlan::platformBinding::legendJava::platform::objectReference::isParseObjectReferences(fe:FunctionExpression[1]):Boolean[1]
{
   $fe.func == parseObjectReferences_String_MANY__String_1__Any_MANY__Any_MANY_;
}

function meta::pure::executionPlan::platformBinding::legendJava::platform::objectReference::getObjectReferenceParserHelperInterface(path:String[1], context:GenerationContext[1]):meta::external::language::java::metamodel::Class[1]
{
   let objectReferenceParam = j_parameter(javaString(), 'objectReferences');
   
   $context.conventions->planNodeClass(['public', 'interface'], $path, 'ObjectReferenceParserHelper')
                       ->imports(javaPackage('java.util'))
                       ->addMethod(javaMethod(['public'], javaObject(), 'parseObjectReference', [$objectReferenceParam]));
}

function meta::pure::executionPlan::platformBinding::legendJava::platform::objectReference::generateImplementationForParseObjectReferences(p:PureExpressionPlatformExecutionNode[1], path:String[1], context:GenerationContext[1], extensions : meta::pure::extension::Extension[*], debug:DebugContext[1]):GeneratedCode[1]
{
   let conventions    	     = $context.conventions;

   let inputExpression       = $p.expression->cast(@FunctionExpression);
   let inputVarName          = $conventions->identifier($inputExpression.parametersValues->at(0)->cast(@VariableExpression).name);
   let storeType             = $inputExpression.parametersValues->at(1)->cast(@InstanceValue).values->toOne()->cast(@String);
   let args                  = $inputExpression.parametersValues->at(2)->cast(@InstanceValue).values;

   let objectRefParserIface  = getObjectReferenceParserHelperInterface($path, $context);
   let objectRefParserVar    = j_variable($objectRefParserIface, 'objectReferenceParserHelper');
   
   let objectRefExtensions   = $extensions->extractLegendJavaAdhocExtensionsOfType(LegendJavaObjectReferenceParsingExtension);
   let filteredExtensions    = $objectRefExtensions->filter(e | $e.storeType == $storeType);
   assert($filteredExtensions->size() == 1, | 'Expected 1 Implementation of ObjectReferenceParserHelper for storeType - ' + $storeType + ' Found - ' + $filteredExtensions->size()->toString());
   let objectRefParserImpl   = $filteredExtensions->toOne().generateObjectReferenceParserImpl->eval($args, $path, $context, $debug);
   
   let executionContextVar   = iExecutionNodeContextParam($context.conventions);

   let objectRefs            = j_variable(javaList(javaString()), 'objectReferences');
   let lambdaParam           = j_parameter(javaString(), 'objRef');
   
   let listOfStringsType     = $executionContextVar->j_invoke('listType', javaString()->j_field('class', javaClassType()));

   let lambda                = j_lambda($lambdaParam, $objectRefParserVar->j_invoke('parseObjectReference', $lambdaParam, javaObject()))->nonNull();

   let executeBody           = j_block([
                                  $objectRefs->j_declare($executionContextVar->j_invoke('getResult', [j_string($inputVarName), $listOfStringsType], javaList(javaString()))),  
                                  $objectRefParserVar->j_declare(j_new($objectRefParserImpl, [])),
                                  $objectRefs->j_streamOf()->js_map($lambda)->j_return()
                               ]);

   let executeClass          = buildExecuteClass($executeBody, $executionContextVar, $path, $conventions);

   generatedCode(newProject()->addClasses([$objectRefParserIface, $objectRefParserImpl, $executeClass]), $executeClass);
}