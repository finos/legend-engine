// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::pure::functions::collection::*;
import meta::external::language::java::generation::featureBased::*;
import meta::pure::executionPlan::platformBinding::legendJava::library::jackson::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::core::runtime::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::naming::*;
import meta::pure::executionPlan::platformBinding::legendJava::platform::*;
import meta::pure::executionPlan::platformBinding::legendJava::platform::serialize::*;
import meta::pure::executionPlan::platformBinding::legendJava::platform::objectReference::*;
import meta::pure::executionPlan::platformBinding::typeInfo::*;
import meta::pure::graphFetch::execution::*;


// Prepare
function meta::pure::executionPlan::platformBinding::legendJava::platform::prepareForPlatformNode(p:PureExpressionPlatformExecutionNode[1], path:String[1], context:GenerationContext[1], extensions : meta::pure::extension::Extension[*], debug:DebugContext[1]):GenerationContext[1]
{
  $p.expression->match([
    fe: FunctionExpression[1] | if($fe->isSerialize(), | prepareForSerialize($p, $path, $context, $debug), | prepareForExpression($p, $path, $context, $debug)),
    vs: ValueSpecification[1] | prepareForExpression($p, $path, $context, $debug)
  ]);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::legendJava::platform::prepareForExpression(p:PureExpressionPlatformExecutionNode[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]):GenerationContext[1]
{
   print(if($debug.debug,|$debug.space+'('+$path+') prepareForPureExpression\n', |''));

   let resultType = $p.resultType;

   if($resultType->instanceOf(ClassResultType),
      |let cls          = $resultType->cast(@ClassResultType).genericType.rawType->toOne()->cast(@meta::pure::metamodel::type::Class<Any>);
       let multiplicity = if($p.resultSizeRange->isEmpty(), | ZeroMany, | $p.resultSizeRange->toOne());

       let newInfo      = $context.typeInfos->meta::pure::executionPlan::platformBinding::typeInfo::addForClassWithAllProperties($cls)
                                            ->meta::pure::executionPlan::platformBinding::typeInfo::addForClassWithAllPropertiesViaAssociations($cls);

       ^$context(typeInfos=$newInfo, nodeInfos=$context.nodeInfos->concatenate(^NodeInfo(path=$path, returnType=^SimpleJavaType(pureType=$cls, javaType=$context.conventions->pureTypeToJavaType($cls, $multiplicity)))));,
      |$context);
}

// Generate
function meta::pure::executionPlan::platformBinding::legendJava::platform::generateImplementionForPlatformNode(p:PureExpressionPlatformExecutionNode[1], path:String[1], context:GenerationContext[1], extensions : meta::pure::extension::Extension[*], debug:DebugContext[1]):GeneratedCode[1]
{
   if ($p.expression->instanceOf(FunctionExpression), 
    | if($p.expression->cast(@FunctionExpression).func == now__DateTime_1_,
          | generateImplementionForNow($context.conventions),
          |
      if($p.expression->cast(@FunctionExpression).func == currentUserId__String_1_,
          | generateImplementionForCurrentUserId($context.conventions),
          |
      if($p.expression->cast(@FunctionExpression)->isSerialize(),
          | generateImplementionForSerialize($p, $path, $context, $debug),
          |
      if($p.expression->cast(@FunctionExpression)->isParseObjectReferences(),
          | generateImplementationForParseObjectReferences($p, $path, $context, $extensions, $debug),
          | generateImplementionForExpression($p, $path, $context, $debug)
      )))), 
    | generateImplementionForExpression($p, $path, $context, $debug)
   );
}

function meta::pure::executionPlan::platformBinding::legendJava::platform::generateJavaClassForFunctionParameters(f:FunctionParametersValidationNode[1], context:GenerationContext[1], debug:DebugContext[1]):GeneratedCode[1]
{
  
  let parameterValidationContexts = $f.parameterValidationContext;
  let pureClasses = $parameterValidationContexts->filter( p | $p->instanceOf(ProtocolObjectValidationContext))->cast(@ProtocolObjectValidationContext<Any>).parameterClass;
  
 if ($pureClasses->isEmpty(),
    |^GeneratedCode(),
    | let distinctParamClasses = $pureClasses->distinct();
      let projects = $distinctParamClasses->fold({e,a|$e->generateJavaClassForFunctionParameter($context,$debug)}, []);
      let parameterNormalizerImplementation = meta::pure::executionPlan::platformBinding::legendJava::platform::generateImplementationForParameterNormalizer($distinctParamClasses,$context,$debug);
      generatedCode($projects->toOneMany()->mergeProjects()->addClass($parameterNormalizerImplementation),$parameterNormalizerImplementation);
  );

 }

function meta::pure::executionPlan::platformBinding::legendJava::platform::generateImplementationForParameterNormalizer(cls:meta::pure::metamodel::type::Class<Any>[*], context:GenerationContext[1], debug:DebugContext[1]):meta::external::language::java::metamodel::Class[1]
{

  let javaClasses = $cls->map(c | meta::external::language::java::transform::className($context.conventions,$c));

  let parameterNormalizerMethods = $javaClasses->fold({e,a|$e->generateParameterNormalizerForClass()}, []);

  let javaNormilizeParam = javaParam(javaObject(), 'paramValue');
  let javaNormilizeParamValue = j_parameter($javaNormilizeParam);

  let pureClassName = javaParam(javaString(), 'pureClassName');
  let pureClassNameValue = j_parameter($pureClassName);

  let package = $context.conventions.basePackageName->javaPackage();
  let errorMsg = j_string('Unsupported Function Parameter :\'')->j_plus($pureClassNameValue);

  let baseCls = javaClass(['public'],$package ,'ProtocolObjectParameterNormalizer')
                                                ->imports($javaClasses)
                                                ->imports(objectMapper())
                                                ->addMethod({c| javaMethod(['public','static'], javaObject() , 'normalizeParameterValue', [$pureClassName, $javaNormilizeParam], j_if(list([$cls->fold({e,a|
                                                                                                                                                                                                $e->generateConditionalBlockForParameterNormalizer($context,'ProtocolObjectParameterNormalizer',$c)
                                                                                                                                                                                                }, [])])
                                                                                                                                                                                                , j_throw(j_new(javaIllegalArgumentException(), $errorMsg))))})
                                                ->addMethods($parameterNormalizerMethods);

}

function meta::pure::executionPlan::platformBinding::legendJava::platform::generateParameterNormalizerForClass(parameterClass:meta::external::language::java::metamodel::Class[1]):meta::external::language::java::metamodel::Method[1]
{
      let objectMapperClass           = objectMapper();
      let mapper = j_parameter($objectMapperClass, 'OBJECT_MAPPER');
      let mapperDeclaration = $mapper->j_declare(
                      $objectMapperClass
                        ->j_new([]));

      let javaNormilizeParam = javaParam(javaObject(), 'paramValue');
      let javaNormilizeParamValue = j_parameter($javaNormilizeParam);
      let objectMapperField           = javaField('private', $objectMapperClass, 'objectMapper');
      let ioEx            = j_parameter(javaIOException(), 'e');

        javaMethod(['public','static'], $parameterClass , 'normalize'+$parameterClass.simpleName, $javaNormilizeParam,
                j_if(
                  j_instanceof($javaNormilizeParamValue, $parameterClass),
                  j_return(j_cast($javaNormilizeParamValue, $parameterClass)),
                  j_if(
                    j_instanceof($javaNormilizeParamValue, javaString()),
                   [  j_try(
                      [$mapperDeclaration,
                      j_return($mapper->j_invoke( 'readValue', [j_cast(j_parameter($javaNormilizeParam), javaString()), j_classField($parameterClass)], $parameterClass))],
                      j_catch($ioEx, javaRuntimeException()->j_new($ioEx)->j_throw())
                    )
                  ],
                    j_throw(j_new(javaIllegalArgumentException(), j_string('Function Parameter should be of type JSON String or ' + $parameterClass.simpleName + '.class')))
                  )
                )
         );
}

function meta::pure::executionPlan::platformBinding::legendJava::platform::generateConditionalBlockForParameterNormalizer(parameterPureClass:meta::pure::metamodel::type::Class<Any>[1], context:GenerationContext[1], normalizerClassName : String[1],baseClass:meta::external::language::java::metamodel::Class[1]):Pair<Code,Code>[1]
{
        let parameterJavaClass = meta::external::language::java::transform::className($context.conventions,$parameterPureClass);

        let javaNormilizeParam = javaParam(javaObject(), 'paramValue');
        let javaNormilizeParamValue = j_parameter($javaNormilizeParam);

        let pureClassName = javaParam(javaString(), 'pureClassName');
        let pureClassNameValue = j_parameter($pureClassName);

        pair(j_invoke($pureClassNameValue, 'equals', j_string($parameterPureClass->elementToPath())),
             j_return($baseClass->j_invoke(
                                          'normalize'+$parameterJavaClass.simpleName,
                                          $javaNormilizeParamValue,
                                          $parameterJavaClass)
                      )
             );
}

function meta::pure::executionPlan::platformBinding::legendJava::platform::classPropertiesRecursive(class:meta::pure::metamodel::type::Class<Any>[1], visitedClasses:meta::pure::metamodel::type::Class<Any>[*]):meta::pure::metamodel::type::Class<Any>[*]
{
   if($class->in($visitedClasses) || $class == Any,
      |[],
      {|
         let properties = $class.properties->filter(p| $p.genericType.rawType->toOne()->instanceOf(meta::pure::metamodel::type::Class))->map(c |$c.genericType.rawType->toOne()->cast(@meta::pure::metamodel::type::Class<Any>));
         
         let forChildren = $properties->map(c| classPropertiesRecursive($c, $visitedClasses->concatenate($class)));
         $properties->concatenate($forChildren)->distinct();
      }
   );
}

function meta::pure::executionPlan::platformBinding::legendJava::platform::generateJavaClassForFunctionParameter(cls:meta::pure::metamodel::type::Class<Any>[1], context:GenerationContext[1], debug:DebugContext[1]):Project[1]
{

  let conventions = $context.conventions;  
  let pureClasses = meta::pure::executionPlan::platformBinding::legendJava::platform::classPropertiesRecursive($cls,[])->concatenate($cls);

  let javaContext = ^meta::external::language::java::generation::featureBased::metamodel::JavaCodeGenerationContext(
      conventions = $conventions,
      featuresToApply = [
                            meta::external::language::java::generation::featureBased::definition::privateFields(),
                            meta::external::language::java::generation::featureBased::definition::defaultConstructor(),
                            meta::external::language::java::generation::featureBased::definition::gettersSetters()
                          ],
      config = ^meta::external::language::java::generation::featureBased::metamodel::JavaCodeGenerationConfig( scopeElements = $pureClasses ),
      debug = $debug->indent()
    );

  $javaContext->meta::external::language::java::generation::featureBased::generateJavaModel();
}

function <<access.private>> meta::pure::executionPlan::platformBinding::legendJava::platform::generateImplementionForNow(conventions:Conventions[1]):GeneratedCode[1]
{
   ^GeneratedCode(
      implementation = ^JavaPlatformImplementation
                       (
                          executionClassFullName = $conventions->className(PredefinedExpressions)->typeToString(),
                          executionMethodName    = 'now'
                       )
   );
}

function <<access.private>> meta::pure::executionPlan::platformBinding::legendJava::platform::generateImplementionForCurrentUserId(conventions:Conventions[1]):GeneratedCode[1]
{
   ^GeneratedCode(
      implementation = ^JavaPlatformImplementation
                       (
                          executionClassFullName = $conventions->className(PredefinedExpressions)->typeToString(),
                          executionMethodName    = 'currentUserId'
                       )
   );
}

function <<access.private>> meta::pure::executionPlan::platformBinding::legendJava::platform::generateImplementionForExpression(p:PureExpressionPlatformExecutionNode[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]):GeneratedCode[1]
{
   let oldConventions  = $context.conventions;
   let newContext      = ^$context(conventions = ^$oldConventions(newFunctionProhibitedList = []));

   let nodeContext     = iExecutionNodeContextParam($newContext.conventions);
   let requiredVariableInputs = $p.requiredVariableInputs->removeDuplicates()
                              ->map(s | let javaType = pureTypeToJavaType($newContext.conventions, $s.genericType.rawType->toOne(), $s.multiplicity);
                                        let typeArg  = if($javaType->isJavaList(), |$nodeContext->j_invoke('listType', $javaType->elementType()->toBoxed()->j_classField()), |$javaType->toBoxed()->j_classField());
                                        j_variable($javaType, $s.name)->j_declare($nodeContext->j_invoke('getResult', [j_string($s.name), $typeArg], javaObject())););
   let expressionCode  = $p.expression->generateJava($newContext.conventions, $debug)->j_return();
   let body            = $requiredVariableInputs->concatenate($expressionCode)->j_block();
   let execClass       = $body->buildExecuteClass($nodeContext, $path, $newContext.conventions);
   generatedCode(mergeProjects(newProject()->addClass($execClass)->concatenate($body->dependencies()->resolveAndGetProjects())->toOneMany()), $execClass);
}
