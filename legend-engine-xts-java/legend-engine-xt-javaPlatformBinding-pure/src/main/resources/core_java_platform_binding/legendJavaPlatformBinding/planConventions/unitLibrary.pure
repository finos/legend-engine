// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::platformBinding::legendJava::library::jackson::*;
import meta::pure::executionPlan::platformBinding::legendJava::library::unit::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::naming::*;

function meta::pure::executionPlan::platformBinding::legendJava::library::unit::registerUnitLibrary(conventions: Conventions[1]): Conventions[1]
{
   let lib = newConventionsLibrary()
      ->usesJavaPackage('java.util')
      ->usesJavaPackage('java.util.stream')
      ->addFunctionCoders([
         fc1(unitType_Any_1__String_1_,          {ctx,unitValue     | $unitValue->j_cast($ctx.conventions->unitInterface())->j_invoke('getUnitType', [], javaString());}),
         fc1(unitValue_Any_1__Number_1_,         {ctx,unitValue     | $unitValue->j_cast($ctx.conventions->unitInterface())->j_invoke('getUnitValue', [], javaNumber());}),
         fc2(newUnit_Unit_1__Number_1__Any_1_,   {ctx,unit,value    | $ctx->unitImpl(0)->j_new($value);}),
         fc2(convert_Any_1__Unit_1__Any_1_,      {ctx,from,unit     | $ctx->unitImpl(1)->j_new($ctx->unitImpl(1)->j_invoke('inverse', $from->j_cast($ctx.conventions->unitInterface())->j_invoke('convertToCanonical', [], javaNumber()), javaNumber()));})
      ]);

   $conventions->registerLibrary($lib);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::legendJava::library::unit::unitImpl(ctx:FuncCoderContext[1], index:Integer[1]): meta::external::language::java::metamodel::Class[1]
{
   let unit = $ctx.params->at($index)->cast(@InstanceValue).values->toOne()->cast(@Unit);
   $ctx.conventions->implClassName($unit);
}

function meta::pure::executionPlan::platformBinding::legendJava::library::unit::unitInterface(conventions: Conventions[1]): meta::external::language::java::metamodel::Class[1]
{
   $conventions->className(Unit)
      ->addModifiers(['public', 'interface'])
      ->addMethod(javaMethod('public', jsonNode(),   'createJsonObject',   []))
      ->addMethod(javaMethod('public', javaString(), 'getUnitType',        []))
      ->addMethod(javaMethod('public', javaNumber(), 'getUnitValue',       []))
      ->addMethod(javaMethod('public', javaNumber(), 'convertToCanonical', []));
}
