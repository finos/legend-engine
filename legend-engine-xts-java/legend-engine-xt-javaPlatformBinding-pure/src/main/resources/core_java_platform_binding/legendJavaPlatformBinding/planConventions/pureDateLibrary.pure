// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;

function meta::pure::executionPlan::platformBinding::legendJava::library::pureDate::registerPureDateLibrary(conventions: Conventions[1]): Conventions[1]
{
   let pureDate = $conventions->className(PureDate);
   let library  = $conventions->className(Library);

   let lib = newConventionsLibrary()
      ->usesJavaClass($conventions->className(DayOfWeek))
      ->usesJavaClass($conventions->className(DurationUnit))
      ->usesJavaClass($conventions->className(Library))
      ->usesJavaClass($pureDate->typeToString())
      ->usesStrictDate($pureDate, {d:StrictDate[1] | $pureDate->j_invoke('parsePureDate', j_string($d->toString()), $pureDate)})
      ->usesDateTime(  $pureDate, {d:DateTime[1]   | $pureDate->j_invoke('parsePureDate', j_string($d->toString()), $pureDate)})
      ->usesDate(      $pureDate, {d:Date[1]       | $pureDate->j_invoke('parsePureDate', j_string($d->toString()), $pureDate)})
      ->addFunctionCoders([
         fc0(now__DateTime_1_,                                                                       {ctx                                    | $ctx.conventions->className(PureDate)->j_invoke('fromDate', javaDate()->j_new([]), $ctx.conventions->className(PureDate))}),
         fc0(today__StrictDate_1_,                                                                   {ctx                                    | $library->j_invoke('today', [], $ctx.conventions->className(PureDate))}),
         fc2(mostRecentDayOfWeek_Date_1__DayOfWeek_1__Date_1_,                                       {ctx,dt,day                             | $library->j_invoke('mostRecentDayOfWeek', [$dt, $day], $ctx.conventions->className(PureDate))}),
         fc1(mostRecentDayOfWeek_DayOfWeek_1__Date_1_,                                               {ctx,day                                | $library->j_invoke('mostRecentDayOfWeek', [$day], $ctx.conventions->className(PureDate))}),
         fc2(previousDayOfWeek_Date_1__DayOfWeek_1__Date_1_,                                         {ctx,dt,day                             | $library->j_invoke('previousDayOfWeek', [$dt, $day], $ctx.conventions->className(PureDate))}),
         fc1(previousDayOfWeek_DayOfWeek_1__Date_1_,                                                 {ctx,day                                | $library->j_invoke('previousDayOfWeek', [$day], $ctx.conventions->className(PureDate))}),
         fc1(dayOfWeekNumber_Date_1__Integer_1_,                                                     {ctx,dt                                 | $library->j_invoke('dayOfWeekNumber', [$dt], javaLong())}),
         fc1(dayOfYear_Date_1__Integer_1_,                                                           {ctx,dt                                 | $library->j_invoke('dayOfYear', [$dt], javaLong())}),
         fc1(weekOfYear_Date_1__Integer_1_,                                                          {ctx,dt                                 | $library->j_invoke('weekOfYear', [$dt], javaLong())}),
         fc1(firstDayOfWeek_Date_1__Date_1_,                                                         {ctx,dt                                 | $library->j_invoke('firstDayOfWeek', [$dt], $ctx.conventions->className(PureDate))}),
         fc1(firstDayOfMonth_Date_1__Date_1_,                                                        {ctx,dt                                 | $library->j_invoke('firstDayOfMonth', [$dt], $ctx.conventions->className(PureDate))}),
         fc1(firstDayOfQuarter_Date_1__StrictDate_1_,                                                {ctx,dt                                 | $library->j_invoke('firstDayOfQuarter', [$dt], $ctx.conventions->className(PureDate))}),
         fc1(firstDayOfYear_Date_1__Date_1_,                                                         {ctx,dt                                 | $library->j_invoke('firstDayOfYear', [$dt], $ctx.conventions->className(PureDate))}),
         fc0(firstDayOfThisMonth__Date_1_,                                                           {ctx                                    | $library->j_invoke('firstDayOfThisMonth', [], $ctx.conventions->className(PureDate))}),
         fc0(firstDayOfThisQuarter__StrictDate_1_,                                                   {ctx                                    | $library->j_invoke('firstDayOfThisQuarter', [], $ctx.conventions->className(PureDate))}),
         fc0(firstDayOfThisYear__Date_1_,                                                            {ctx                                    | $library->j_invoke('firstDayOfThisYear', [], $ctx.conventions->className(PureDate))}),
         fc1(firstHourOfDay_Date_1__DateTime_1_,                                                     {ctx,dt                                 | $library->j_invoke('firstHourOfDay', [$dt], $ctx.conventions->className(PureDate))}),
         fc1(firstMinuteOfHour_Date_1__DateTime_1_,                                                  {ctx,dt                                 | $library->j_invoke('firstMinuteOfHour', [$dt], $ctx.conventions->className(PureDate))}),
         fc1(firstSecondOfMinute_Date_1__DateTime_1_,                                                {ctx,dt                                 | $library->j_invoke('firstSecondOfMinute', [$dt], $ctx.conventions->className(PureDate))}),
         fc1(firstMillisecondOfSecond_Date_1__DateTime_1_,                                           {ctx,dt                                 | $library->j_invoke('firstMillisecondOfSecond', [$dt], $ctx.conventions->className(PureDate))}),
         fc1(quarterNumber_Date_1__Integer_1_,                                                       {ctx,dt                                 | $dt->j_invoke('getQuarter', [], javaInt())}),
         fc1(hasYear_Date_1__Boolean_1_,                                                             {ctx,date                               | $date->j_invoke('hasYear', [], javaBoolean())})
   ]);
   
   $conventions->registerLibrary($lib);
}



