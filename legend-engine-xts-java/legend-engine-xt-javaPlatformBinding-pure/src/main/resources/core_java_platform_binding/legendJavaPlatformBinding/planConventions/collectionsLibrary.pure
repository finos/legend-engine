// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::pure::functions::reportDelta::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::library::collection::*;
import meta::external::language::java::generation::grammar::collection::*;
import meta::external::language::java::generation::essential::collection::*;

function meta::pure::executionPlan::platformBinding::legendJava::library::collection::registerCollectionsLibrary(conventions: Conventions[1], boxPrimitives: Boolean[1]): Conventions[1]
{
   let library  = $conventions->className(Library);

   let x = j_parameter(javaBoolean()->toBoxed(), 'x');
   let y = j_parameter(javaBoolean()->toBoxed(), 'y');

   let lib = newConventionsLibrary()
      ->usesJavaPackage('java.util')
      ->usesJavaPackage('java.util.stream')
      ->usesBoolean(if($boxPrimitives, |javaBooleanBoxed(), |javaBoolean()), javaBooleanBoxed(), {b:Boolean[1] | j_boolean($b)})
      ->addFunctionCoders([
        fc2(max_T_$1_MANY$__Function_1__T_1_,                                   {ctx,collection,comp          | if( $collection.type->isJavaList(), | maxComp($ctx, $collection, $comp, $library), | $collection )}),
        fc2(min_T_$1_MANY$__Function_1__T_1_,                                   {ctx,collection,comp          | if( $collection.type->isJavaList(), | minComp($ctx, $collection, $comp, $library), | $collection )}),
        fc1(max_X_MANY__X_$0_1$_,                                               {ctx,collection               | if( $collection.type->isJavaList(), | max($ctx, $collection, $library), | $collection )}),
        fc1(min_X_MANY__X_$0_1$_,                                               {ctx,collection               | if( $collection.type->isJavaList(), | min($ctx, $collection, $library), | $collection )}),
        fc(max_X_$1_MANY$__X_1_,                                                fcAlias(                        max_X_MANY__X_$0_1$_)),
        fc(min_X_$1_MANY$__X_1_,                                                fcAlias(                        min_X_MANY__X_$0_1$_)),

        fc(greatest_X_MANY__X_$0_1$_,                                           fcAlias(                        max_X_MANY__X_$0_1$_)),
        fc(least_X_MANY__X_$0_1$_,                                              fcAlias(                        min_X_MANY__X_$0_1$_)),
        fc(greatest_X_$1_MANY$__X_1_,                                           fcAlias(                        max_X_MANY__X_$0_1$_)),
        fc(least_X_$1_MANY$__X_1_,                                              fcAlias(                        min_X_MANY__X_$0_1$_)),

        fc1(distinct_T_MANY__T_MANY_,                                           {ctx,collection               | $collection->j_streamOf()->js_distinct()}),

        fc2(removeAll_T_MANY__T_MANY__T_MANY_,                                  {ctx,col1,col2                | removeAll($ctx, $col1, $col2, j_null(), $library)}),
        fc3(removeAll_T_MANY__T_MANY__Function_1__T_MANY_,                      {ctx,col1,col2,eqlf           | removeAll($ctx, $col1, $col2, $eqlf, $library)}),

        fc2(sortBy_T_m__Function_$0_1$__T_m_,                                   {ctx,collection,key           | if($collection.type->isJavaList(), | sortBy($collection, $key, $library),                       | $collection) }),
        fc (limit_T_MANY__Integer_1__T_MANY_,                                   fcAlias(                        take_T_MANY__Integer_1__T_MANY_)),
        fc3(paginated_T_MANY__Integer_1__Integer_1__T_MANY_,                    {ctx,collection,pageNumber,pageSize | $collection->j_streamOf()->js_skip(pinToZero($pageSize)->j_multiply(pinToZero($pageNumber)->j_minus(j_int(1))))->js_limit($pageSize)}),
        fc2(union_T_MANY__T_MANY__T_MANY_,                                      {ctx,collection1,collection2  | javaStream()->j_invoke('concat', [$collection1->j_streamOf(), $collection2->j_streamOf()], javaStream($ctx.returnType()->elementType()))->js_distinct()}),
        fc2(intersection_T_MANY__T_MANY__T_MANY_,                               {ctx,collection1,collection2  | intersect($ctx, $collection1, $collection2)}),

        fc2(defaultIfEmpty_T_MANY__T_$1_MANY$__T_$1_MANY$_,                     {ctx,collection1,collection2  | j_conditional($collection1->j_streamOf()->js_count()->j_eq(j_int(0)), $library->j_invoke('toOneMany', $collection2, $ctx.returnType()), $library->j_invoke('toOneMany', $collection1, $ctx.returnType()))}),

        fc1(and_Boolean_MANY__Boolean_1_,                                       {ctx,collection               | $collection->j_streamOf()->js_reduce(j_true(), j_lambda([$x, $y], $x->j_and($y)))}),
        fc1(or_Boolean_$1_MANY$__Boolean_1_,                                    {ctx,collection               | $collection->j_streamOf()->js_reduce(j_false(), j_lambda([$x, $y], $x->j_or($y)))}),
        fc1(or_Boolean_MANY__Boolean_1_,                                        {ctx,collection               | $collection->j_streamOf()->js_reduce(j_false(), j_lambda([$x, $y], $x->j_or($y)))}),

        fc (count_Any_MANY__Integer_1_,                                         fcAlias(                        size_Any_MANY__Integer_1_)),
        fc1(isDistinct_T_MANY__Boolean_1_,                                      {ctx,collection               | if($collection.type->isJavaList(), | j_eq($library->j_invoke('removeDuplicates', [$collection, j_null(), j_null()], $collection.type)->j_invoke('size', []), $collection->j_invoke('size', [])), | j_boolean(true))}),

        fc2(repeat_T_1__Integer_1__T_MANY_,                                     {ctx,val,count                | $library->j_invoke('repeat', [$count, $val], javaList($val.type))}),

        fc1(uniqueValueOnly_T_MANY__T_$0_1$_,                                   {ctx,collection               | $library->j_invoke('uniqueValueOnly', [$collection, j_null()], if($collection.type->isJavaList(), |$collection.type->elementTypeOfJavaList(), |$collection.type))}),
        fc2(uniqueValueOnly_T_MANY__T_$0_1$__T_$0_1$_,                          {ctx,collection,default       | $library->j_invoke('uniqueValueOnly', [$collection, $default], if($collection.type->isJavaList(), |$collection.type->elementTypeOfJavaList(), |$collection.type))}),

        fc2(dropAt_T_MANY__Integer_1__T_MANY_,                                  {ctx,collection,index         | dropAt($ctx,$collection, $index, j_int(1), $library)}),
        fc3(dropAt_T_MANY__Integer_1__Integer_1__T_MANY_,                       {ctx,collection,index,cnt     | dropAt($ctx, $collection, $index, $cnt, $library)}),

        fc(meta::pure::functions::collection::isEqual_T_1__T_1__RootGraphFetchTree_1__Boolean_1_, IsEqualCoder_FunctionExpression_1__Conventions_1__DebugContext_1__Code_1_),
        fc(meta::pure::functions::collection::isDistinct_T_MANY__RootGraphFetchTree_1__Boolean_1_, IsDistinctFetchTreeCoder_FunctionExpression_1__Conventions_1__DebugContext_1__Code_1_)
      ]);

   $conventions->registerLibrary($lib);
}

function meta::pure::executionPlan::platformBinding::legendJava::library::collection::dropAt(ctx:FuncCoderContext[1], collection:Code[1], index:Code[1], cnt:Code[1], library:meta::external::language::java::metamodel::Class[1]) : Code[1]
{
  let c = if($collection.type->isJavaList(), | $collection, | javaArrays()->j_invoke('asList', [$collection], $collection.type));
  $library->j_invoke('dropAt', [$collection, $index, $cnt], $collection.type);
}

function meta::pure::executionPlan::platformBinding::legendJava::library::collection::removeAll(ctx:FuncCoderContext[1], collection1:Code[1], collection2:Code[1], eqlf:Code[1], library:meta::external::language::java::metamodel::Class[1]) : Code[1]
{
  let c1 = if($collection1.type->isJavaList(), | $collection1, | javaArrays()->j_invoke('asList', [$collection1], $collection1.type));
  let c2 = if($collection2.type->isJavaList(), | $collection2, | javaArrays()->j_invoke('asList', [$collection2], $collection1.type));
  $library->j_invoke('removeAll', [$c1, $c2, $eqlf], $c1.type);
}

function meta::pure::executionPlan::platformBinding::legendJava::library::collection::intersect(ctx:FuncCoderContext[1], collection1:Code[1], collection2:Code[1]) : Code[1]
{
  let c2 = if($collection2.type->isJavaList(), | $collection2, | javaArrays()->j_invoke('asList', [$collection2], $collection2.type));
  let comp = $c2->j_methodReference('contains', javaFunctionType(javaObject(), javaBoolean()));
  $collection1->j_streamOf()->js_filter($comp);
}

function meta::pure::executionPlan::platformBinding::legendJava::library::collection::maxComp(ctx:FuncCoderContext[1], collection:Code[1], comp:Code[1], library:meta::external::language::java::metamodel::Class[1]) : Code[1]
{
  let adapted = $library->j_invoke('adaptPureComparator',$comp, javaComparator($collection.type->elementType()));
  $collection->j_streamOf()->js_max($adapted);
}

function meta::pure::executionPlan::platformBinding::legendJava::library::collection::minComp(ctx:FuncCoderContext[1], collection:Code[1], comp:Code[1], library:meta::external::language::java::metamodel::Class[1]) : Code[1]
{
   let adapted = $library->j_invoke('adaptPureComparator',$comp, javaComparator($collection.type->elementType()));
   $collection->j_streamOf()->js_min($adapted);
}

function meta::pure::executionPlan::platformBinding::legendJava::library::collection::min(ctx:FuncCoderContext[1], collection:Code[1], library:meta::external::language::java::metamodel::Class[1]) : Code[1]
{
    first($library->j_invoke('sort', $collection, $collection.type), $library);
}

function meta::pure::executionPlan::platformBinding::legendJava::library::collection::max(ctx:FuncCoderContext[1], collection:Code[1], library:meta::external::language::java::metamodel::Class[1]) : Code[1]
{
   last($library->j_invoke('sort', $collection, $collection.type), $library);
}

function meta::pure::executionPlan::platformBinding::legendJava::library::collection::sortBy(collection:Code[1], key:Code[1], library:meta::external::language::java::metamodel::Class[1]) : Code[1]
{
   let newComp = javaComparator()->j_invoke('comparing', [$key], javaComparator($collection.type->elementType()));
   $library->j_invoke($collection.type->elementType(), 'sort', [$collection, $newComp], javaList($collection.type->elementType()));
}

function meta::pure::executionPlan::platformBinding::legendJava::library::collection::IsDistinctFetchTreeCoder(fe:FunctionExpression[1], conventions:Conventions[1], debug:meta::pure::tools::DebugContext[1]):Code[1]
{
   let args = $fe.parametersValues->evaluateAndDeactivate();
   let coll = $args->at(0)->generateJava($conventions, $debug);

   let guid = meta::core::runtime::generateGuid()->replace('-','');
   let name = 'isDistinct'+$guid;
   let cls = javaClass(['public'], '_pure.internal.EqualityGraphFetch'+$guid);

   let javaClass = $coll.type->cast(@ParameterizedType).typeArguments->toOne();

   let dep = newDependency(
      $name,
      {state |
         let fetchTree = $args->at(1)->cast(@InstanceValue).values->cast(@meta::pure::graphFetch::RootGraphFetchTree<Any>)->toOne();
         let m = generateIsEqualMethod($javaClass, $fetchTree, $conventions);

         let cls1 = $cls->addMethod($m);

         let project = newProject()->addClass($cls1);
         $state->addDependencyProject($name, $project);
      }
   );
   let p1 = j_parameter($javaClass, 'x');
   let p2 = j_parameter($javaClass, 'y');
   let lambda = j_lambda([$p1,$p2],
                         j_invoke($cls, [], 'isEqualWithFetchTree', [$p1,$p2], javaBoolean())
                        ) ;
   let library  = $conventions->className(Library);

   let invoke = j_eq(
                        $library->j_invoke('removeDuplicates', [$coll, j_null(), $lambda  ], $coll.type)->j_invoke('size',[]),
                        $coll->j_invoke('size',[])
                     );

   $invoke->dependsOn($dep->concatenate($coll.requires));
}

function meta::pure::executionPlan::platformBinding::legendJava::library::collection::IsEqualCoder(fe: FunctionExpression[1], conventions: Conventions[1], debug: meta::pure::tools::DebugContext[1]):Code[1]
{
   print(if($debug.debug,|$debug.space+'process isEqual: \n',|''));
   let args = $fe.parametersValues->evaluateAndDeactivate();

   let cls1 = $args->at(0)->generateJava($conventions, $debug);
   let cls2 = $args->at(1)->generateJava($conventions, $debug);
   let guid = meta::core::runtime::generateGuid()->replace('-','');

   let name =  'isEqual'+$guid;
   let cls = javaClass(['public'], '_pure.internal.EqualityGraphFetch'+$guid);

   let dep = newDependency(
      $name,
      {state |
            let fetchTree = $args->at(2)->cast(@InstanceValue).values->cast(@meta::pure::graphFetch::RootGraphFetchTree<Any>)->toOne();
            let javaClass = $cls1.type;

            let m = generateIsEqualMethod($javaClass, $fetchTree, $conventions);

            let cls1 = $cls->addMethod($m);

            let project = newProject()->addClass($cls1);
            $state->addDependencyProject($name, $project);
      }
   );

   let invoke = $cls->j_invoke([javaObject(), javaObject()],'isEqualWithFetchTree', [$cls1, $cls2], javaBoolean());
   $invoke->dependsOn($dep);
}

function <<access.private>> meta::pure::executionPlan::platformBinding::legendJava::library::collection::generateIsEqualMethod(type:meta::external::language::java::metamodel::Type[1], gf:meta::pure::graphFetch::RootGraphFetchTree<Any>[1], conventions:Conventions[1]):meta::external::language::java::metamodel::Method[1]
{
   let o1 = j_parameter($type, 'o1');
   let o2 = j_parameter($type, 'o2');

   let fields = $gf.subTrees->map(st| assert($st.subTrees->isEmpty(), 'Nested property trees not supported yet');
                                      assert($st->instanceOf(meta::pure::graphFetch::PropertyGraphFetchTree) && !$st->cast(@meta::pure::graphFetch::PropertyGraphFetchTree).isQualifiedProperty(),
                                             'Qualified properties not supported');
                                      $st->cast(@meta::pure::graphFetch::PropertyGraphFetchTree).property->toOne(););

            let bool_condition = $fields->fold({f,b|
                                                let fieldType = $conventions->pureTypeToJavaType($f);
                                                let o1getter = $o1->j_invoke([], $conventions->getterName($f), [], $conventions->pureTypeToJavaType($f));
                                                let o2getter = $o2->j_invoke([], $conventions->getterName($f), [], $conventions->pureTypeToJavaType($f));
                                                 if(isPrimitive($fieldType), |j_and(j_eq($o1getter, $o2getter), $b),
                                                                             |j_and($o1getter->j_invoke('equals', $o2getter), $b));
                                               }, j_true());

            let body = $bool_condition->j_return();

            let m = javaMethod(['public', 'static'], javaBoolean(), 'isEqualWithFetchTree', [$o1,$o2], $body->codeToString());

}
