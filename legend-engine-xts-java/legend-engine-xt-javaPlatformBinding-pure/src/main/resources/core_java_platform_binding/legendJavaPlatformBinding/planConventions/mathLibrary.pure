// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::transform::*;
import meta::external::language::java::serialization::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::library::math::*;
import meta::external::language::java::generation::essential::math::*;
import meta::external::language::java::generation::grammar::math::*;

function meta::pure::executionPlan::platformBinding::legendJava::library::math::registerMathsLibrary(conventions: Conventions[1], boxPrimitives: Boolean[1]): Conventions[1]
{
   let library  = $conventions->className(Library);

   let lib = newConventionsLibrary()
      ->usesNumber( javaNumber(),     javaNumber(),      {n:Number[1]  | javaBigDecimal()->j_new(j_string($n->toString()))})
      ->usesDecimal(javaBigDecimal(), javaBigDecimal(),  {d:Number[1]  | javaBigDecimal()->j_new(j_string($d->toString()))})
      ->usesInteger(if($boxPrimitives, |javaLongBoxed(), |javaLong()),       javaLongBoxed(),   {i:Integer[1] | j_long($i)})
      ->usesFloat(if($boxPrimitives, |javaDoubleBoxed(), |javaDouble()),     javaDoubleBoxed(), {f:Float[1]   | j_double($f)})
      ->usesJavaPackage('java.math')
      ->addFunctionCoders([
         fc1(max_Number_MANY__Number_$0_1$_,                           {ctx,nums       | $nums->j_streamOf()->js_reduce($library->j_methodReference('max', reduceFT(javaNumber())))}),
         fc (max_Number_$1_MANY$__Number_1_,                           fcAlias(          max_Number_MANY__Number_$0_1$_)),
         fc1(max_Integer_MANY__Integer_$0_1$_,                         {ctx,nums       | $nums->j_streamOf()->js_reduce(javaLongBoxed()->j_methodReference('max'))}),
         fc (max_Integer_$1_MANY$__Integer_1_,                         fcAlias(          max_Integer_MANY__Integer_$0_1$_)),
         fc1(max_Float_MANY__Float_$0_1$_,                             {ctx,nums       | $nums->j_streamOf()->js_reduce(javaDoubleBoxed()->j_methodReference('max'))}),
         fc (max_Float_$1_MANY$__Float_1_,                             fcAlias(          max_Float_MANY__Float_$0_1$_)),
         fc2(max_Number_1__Number_1__Number_1_,                        {ctx,num1,num2  | $library->j_invoke('max', [$num1, $num2], javaNumber())}),
         fc1(min_Number_MANY__Number_$0_1$_,                           {ctx,nums       | $nums->j_streamOf()->js_reduce($library->j_methodReference('min', reduceFT(javaNumber())))}),
         fc (min_Number_$1_MANY$__Number_1_,                           fcAlias(          min_Number_MANY__Number_$0_1$_)),
         fc2(min_Number_1__Number_1__Number_1_,                        {ctx,num1,num2  | $library->j_invoke('min', [$num1, $num2], javaNumber())}),
         fc1(min_Integer_MANY__Integer_$0_1$_,                         {ctx,nums       | $nums->j_streamOf()->js_reduce(javaLongBoxed()->j_methodReference('min'))}),
         fc (min_Integer_$1_MANY$__Integer_1_,                         fcAlias(          min_Integer_MANY__Integer_$0_1$_)),
         fc1(min_Float_MANY__Float_$0_1$_,                             {ctx,nums       | $nums->j_streamOf()->js_reduce(javaDoubleBoxed()->j_methodReference('min'))}),
         fc (min_Float_$1_MANY$__Float_1_,                             fcAlias(          min_Float_MANY__Float_$0_1$_))
      ]);

   $conventions->registerLibrary($lib);
}
