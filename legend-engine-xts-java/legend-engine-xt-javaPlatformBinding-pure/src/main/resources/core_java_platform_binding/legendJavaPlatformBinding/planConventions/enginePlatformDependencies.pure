// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Generated main configuration: see org.finos.legend.engine.plan.compilation.GeneratePureConfig
 */

import meta::external::language::java::generation::essential::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::external::language::java::factory::*;
import meta::external::language::java::transform::*;

Class meta::pure::executionPlan::platformBinding::legendJava::IConstantResult {}
Class meta::pure::executionPlan::platformBinding::legendJava::EngineIResult {}
Class meta::pure::executionPlan::platformBinding::legendJava::IExecutionNodeContext {}
Class meta::pure::executionPlan::platformBinding::legendJava::IGraphFetchM2MExecutionNodeContext {}
Class meta::pure::executionPlan::platformBinding::legendJava::StoreStreamReader {}
Class meta::pure::executionPlan::platformBinding::legendJava::DataParsingException {}
Class meta::pure::executionPlan::platformBinding::legendJava::PredefinedExpressions {}
Class meta::pure::executionPlan::platformBinding::legendJava::GraphInstance {}
Class meta::pure::executionPlan::platformBinding::legendJava::RelationalRootGraphNodeExecutor {}
Class meta::pure::executionPlan::platformBinding::legendJava::RelationalCrossRootGraphNodeExecutor {}
Class meta::pure::executionPlan::platformBinding::legendJava::RelationalChildGraphNodeExecutor {}
Class meta::pure::executionPlan::platformBinding::legendJava::RelationalClassInstantiationNodeExecutor {}
Class meta::pure::executionPlan::platformBinding::legendJava::DataQualityBasicDefectClass {}
Class meta::pure::executionPlan::platformBinding::legendJava::DataQualityBasicRelativePathNodeClass {}
Class meta::pure::executionPlan::platformBinding::legendJava::DataQualityGraphContextClass {}
Class meta::pure::executionPlan::platformBinding::legendJava::DataQualityConstrainedInterface {}
Class meta::pure::executionPlan::platformBinding::legendJava::IReferencedObject {}
Class meta::pure::executionPlan::platformBinding::legendJava::IRelationalCreateAndPopulateTempTableExecutionNodeSpecifics {}
Class meta::pure::executionPlan::platformBinding::legendJava::IPlatformPureExpressionExecutionNodeSerializeSpecifics {}
Class meta::pure::executionPlan::platformBinding::legendJava::ISerializationWriter {}
Class meta::pure::executionPlan::platformBinding::legendJava::IGraphSerializer {}
Class meta::pure::executionPlan::platformBinding::legendJava::IStoreStreamReadingExecutionNodeSpecifics {}
Class meta::pure::executionPlan::platformBinding::legendJava::IStoreStreamReadingExecutionNodeContext {}
Class meta::pure::executionPlan::platformBinding::legendJava::IInMemoryRootGraphFetchExecutionNodeSpecifics {}
Class meta::pure::executionPlan::platformBinding::legendJava::IInMemoryRootGraphFetchMergeExecutionNodeSpecifics {}

Class meta::pure::executionPlan::platformBinding::legendJava::IInMemoryPropertyGraphFetchExecutionNodeSpecifics {}
Class meta::pure::executionPlan::platformBinding::legendJava::IRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics {}
Class meta::pure::executionPlan::platformBinding::legendJava::IRelationalCrossRootQueryTempTableGraphFetchExecutionNodeSpecifics {}
Class meta::pure::executionPlan::platformBinding::legendJava::IInMemoryCrossStoreGraphFetchExecutionNodeSpecifics {}
Class meta::pure::executionPlan::platformBinding::legendJava::IRelationalClassQueryTempTableGraphFetchExecutionNodeSpecifics {}
Class meta::pure::executionPlan::platformBinding::legendJava::IRelationalPrimitiveQueryGraphFetchExecutionNodeSpecifics {}
Class meta::pure::executionPlan::platformBinding::legendJava::IServiceParametersResolutionExecutionNodeSpecifics {}
Class meta::pure::executionPlan::platformBinding::legendJava::IPlatformPrimitiveQualifierLocalGraphFetchExecutionNodeSpecifics {}


function meta::pure::executionPlan::platformBinding::legendJava::applyJavaEngineDependencies(conventions:Conventions[1], extensions:meta::pure::extension::Extension[*]):Conventions[1]
{

   let jIConstantResult = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.shared.IConstantResult')
      ->addMethod(javaMethod('public', javaObject(), 'getValue', []));

   let jIResult = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.shared.IResult')
      ->addMethod(javaMethod('public', javaVoid(), 'close', []));

   let jIExecutionNodeContext = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext')
      ->addMethod(javaMethod('public', $jIResult, 'getResult', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'getResult', [javaParam(javaString(), 'p0'), javaParam(javaReflectType(), 'p1')]))
      ->addMethod(javaMethod('public', javaReflectType(), 'listType', [javaParam(javaReflectType(), 'p0')]))
      ->addMethod(javaMethod('public', javaReflectType(), 'streamType', [javaParam(javaReflectType(), 'p0')]));

   let jDataParsingException = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException');

   let jPredefinedExpressions = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.platform.PredefinedExpressions')
      ->addMethod(javaMethod('public', javaString(), 'currentUserId', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaObject(), 'now', []));

   let jIGraphInstance = javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance')
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'getValue', []))
      ->addMethod(javaMethod('public', javaLong(), 'instanceSize', []));

   let jIRelationalRootGraphNodeExecutor = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.relational.graphFetch.IRelationalRootGraphNodeExecutor');

   let jIRelationalCrossRootGraphNodeExecutor = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.relational.graphFetch.IRelationalCrossRootGraphNodeExecutor')
      ->addMethod(javaMethod('public', javaList(javaReflectMethod()), 'parentCrossKeyGetters', []));

   let jIRelationalChildGraphNodeExecutor = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.relational.graphFetch.IRelationalChildGraphNodeExecutor')
      ->addMethod(javaMethod('public', javaVoid(), 'addChildToParent', [javaParam(javaObject(), 'p0'), javaParam(javaObject(), 'p1'), javaParam($jIExecutionNodeContext, 'p2')]))
      ->addMethod(javaMethod('public', javaList(javaString()), 'parentSQLColumnsInResultSet', [javaParam(javaList(javaString()), 'p0')]));

   let jIRelationalClassInstantiationNodeExecutor = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.relational.classResult.IRelationalClassInstantiationNodeExecutor')
      ->addMethod(javaMethod('public', javaObject(), 'getObjectFromResultSet', [javaParam(javaResultSet(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaString(), 'p2')]));

   let jMonth = javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.Month')
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.Month'), 'valueOf', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaArray(javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.Month')), 'values', []));

   let jQuarter = javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.Quarter')
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.Quarter'), 'valueOf', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaArray(javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.Quarter')), 'values', []));

   let jGraphContext = javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext');

   let jEnforcementLevel = javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.dataQuality.EnforcementLevel')
      ->addMethod(javaMethod('public', javaString(), 'getName', []))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.dataQuality.EnforcementLevel'), 'valueOf', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaArray(javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.dataQuality.EnforcementLevel')), 'values', []));

   let jRuleType = javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.dataQuality.RuleType')
      ->addMethod(javaMethod('public', javaString(), 'getName', []))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.dataQuality.RuleType'), 'valueOf', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaArray(javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.dataQuality.RuleType')), 'values', []));

   let jRelativePathNode = javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode')
      ->addMethod(javaMethod('public', javaLongBoxed(), 'getIndex', []))
      ->addMethod(javaMethod('public', javaString(), 'getPropertyName', []));

   let jBasicRelativePathNode = javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode')
      ->addMethod(javaMethod('public', javaLongBoxed(), 'getIndex', []))
      ->addMethod(javaMethod('public', javaString(), 'getPropertyName', []))
      ->addMethod(javaMethod('public', $jRelativePathNode, 'newRelativePathNode', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', $jRelativePathNode, 'newRelativePathNode', [javaParam(javaString(), 'p0'), javaParam(javaLong(), 'p1')]));

   let jIDefect = javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect')
      ->addMethod(javaMethod('public', $jEnforcementLevel, 'getEnforcementLevel', []))
      ->addMethod(javaMethod('public', javaString(), 'getExternalId', []))
      ->addMethod(javaMethod('public', javaString(), 'getId', []))
      ->addMethod(javaMethod('public', javaString(), 'getMessage', []))
      ->addMethod(javaMethod('public', javaList($jRelativePathNode), 'getPath', []))
      ->addMethod(javaMethod('public', javaString(), 'getRuleDefinerPath', []))
      ->addMethod(javaMethod('public', $jRuleType, 'getRuleType', []));

   let jBasicDefect = javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect')
      ->addMethod(javaMethod('public', $jEnforcementLevel, 'getEnforcementLevel', []))
      ->addMethod(javaMethod('public', javaString(), 'getExternalId', []))
      ->addMethod(javaMethod('public', javaString(), 'getId', []))
      ->addMethod(javaMethod('public', javaString(), 'getMessage', []))
      ->addMethod(javaMethod('public', javaList($jRelativePathNode), 'getPath', []))
      ->addMethod(javaMethod('public', javaString(), 'getRuleDefinerPath', []))
      ->addMethod(javaMethod('public', $jRuleType, 'getRuleType', []))
      ->addMethod(javaMethod('public', $jIDefect, 'newClassStructureDefect', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1')]))
      ->addMethod(javaMethod('public', $jIDefect, 'newConstraintDefect', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaString(), 'p2'), javaParam($jEnforcementLevel, 'p3'), javaParam(javaString(), 'p4')]))
      ->addMethod(javaMethod('public', $jIDefect, 'newDefect', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaString(), 'p2'), javaParam($jEnforcementLevel, 'p3'), javaParam(javaString(), 'p4'), javaParam($jRuleType, 'p5'), javaParam(javaList($jRelativePathNode), 'p6')]))
      ->addMethod(javaMethod('public', $jIDefect, 'newInvalidInputCriticalDefect', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1')]))
      ->addMethod(javaMethod('public', $jIDefect, 'newInvalidInputErrorDefect', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1')]))
      ->addMethod(javaMethod('public', $jIDefect, 'newInvalidInputWarningDefect', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1')]))
      ->addMethod(javaMethod('public', $jIDefect, 'newMappingDefinitionDefect', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1')]))
      ->addMethod(javaMethod('public', $jIDefect, 'newNoInputDefect', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', $jIDefect, 'newStoreDefinitionDefect', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1')]))
      ->addMethod(javaMethod('public', $jIDefect, 'prefixPath', [javaParam($jIDefect, 'p0'), javaParam($jRelativePathNode, 'p1')]))
      ->addMethod(javaMethod('public', $jIDefect, 'prefixPath', [javaParam($jIDefect, 'p0'), javaParam(javaList($jRelativePathNode), 'p1')]))
      ->addMethod(javaMethod('public', javaString(), 'toString', []));

   let jIChecked = javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked')
      ->addMethod(javaMethod('public', javaList($jIDefect), 'getDefects', []))
      ->addMethod(javaMethod('public', javaObject(), 'getSource', []))
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'getValue', []));

   let jIStoreStreamReader = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReader')
      ->addMethod(javaMethod('public', javaVoid(), 'destroyReading', []))
      ->addMethod(javaMethod('public', javaVoid(), 'initReading', []))
      ->addMethod(javaMethod('public', javaBoolean(), 'isFinished', []))
      ->addMethod(javaMethod('public', javaCollection(javaParameterizedType($jIChecked, [javaTypeVar('T')])), 'readCheckedObjects', []));

   let jIGraphFetchM2MExecutionNodeContext = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.inMemory.IGraphFetchM2MExecutionNodeContext')
      ->addMethod(javaMethod('public', $jIStoreStreamReader, 'createReader', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaURL(), 'createUrl', [javaParam(javaString(), 'p0')]));

   let jConstrained = javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained')
      ->addMethod(javaMethod('public', javaList($jIDefect), 'allConstraints', []))
      ->addMethod(javaMethod('public', javaList($jIDefect), 'allConstraints', [javaParam($jGraphContext, 'p0')]))
      ->addMethod(javaMethod('public', javaParameterizedType($jIChecked, [javaTypeVar('T')]), 'toChecked', []))
      ->addMethod(javaMethod('public', javaParameterizedType($jIChecked, [javaTypeVar('T')]), 'toChecked', [javaParam(javaBoolean(), 'p0')]))
      ->addMethod(javaMethod('public', javaParameterizedType($jIChecked, [javaTypeVar('T')]), 'toChecked', [javaParam(javaObject(), 'p0')]))
      ->addMethod(javaMethod('public', javaParameterizedType($jIChecked, [javaTypeVar('T')]), 'toChecked', [javaParam(javaObject(), 'p0'), javaParam(javaBoolean(), 'p1')]))
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'withConstraintsApplied', []));

   let jIReferencedObject = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject')
      ->addMethod(javaMethod('public', javaString(), 'getAlloyStoreObjectReference$', []));

   let jIRelationalCreateAndPopulateTempTableExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.relational.IRelationalCreateAndPopulateTempTableExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaString(), 'getGetterNameForProperty', [javaParam(javaString(), 'p0')]));

   let jPureDate = javaPureDate();

   let jISerializationWriter = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.platform.ISerializationWriter')
      ->addMethod(javaMethod('public', javaVoid(), 'endObject', []))
      ->addMethod(javaMethod('public', javaVoid(), 'startObject', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'startObject', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeBooleanProperty', [javaParam(javaString(), 'p0'), javaParam(javaBoolean(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeBooleanProperty', [javaParam(javaString(), 'p0'), javaParam(javaBooleanBoxed(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeBooleanProperty', [javaParam(javaString(), 'p0'), javaParam(javaList(javaBooleanBoxed()), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeComplexProperty', [javaParam(javaString(), 'p0'), javaParam(javaList(javaTypeVar('T')), 'p1'), javaParam(javaConsumer(javaTypeVar('T')), 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeComplexProperty', [javaParam(javaString(), 'p0'), javaParam(javaTypeVar('T'), 'p1'), javaParam(javaConsumer(javaTypeVar('T')), 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeDateProperty', [javaParam(javaString(), 'p0'), javaParam($jPureDate, 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeDateProperty', [javaParam(javaString(), 'p0'), javaParam(javaList($jPureDate), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeDateTimeProperty', [javaParam(javaString(), 'p0'), javaParam($jPureDate, 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeDateTimeProperty', [javaParam(javaString(), 'p0'), javaParam(javaList($jPureDate), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeDecimalProperty', [javaParam(javaString(), 'p0'), javaParam(javaBigDecimal(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeDecimalProperty', [javaParam(javaString(), 'p0'), javaParam(javaList(javaBigDecimal()), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeEnumProperty', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaList(javaString()), 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeEnumProperty', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaString(), 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeFloatProperty', [javaParam(javaString(), 'p0'), javaParam(javaDouble(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeFloatProperty', [javaParam(javaString(), 'p0'), javaParam(javaDoubleBoxed(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeFloatProperty', [javaParam(javaString(), 'p0'), javaParam(javaList(javaDoubleBoxed()), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeIntegerProperty', [javaParam(javaString(), 'p0'), javaParam(javaList(javaLongBoxed()), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeIntegerProperty', [javaParam(javaString(), 'p0'), javaParam(javaLong(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeIntegerProperty', [javaParam(javaString(), 'p0'), javaParam(javaLongBoxed(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeNumberProperty', [javaParam(javaString(), 'p0'), javaParam(javaList(javaNumber()), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeNumberProperty', [javaParam(javaString(), 'p0'), javaParam(javaNumber(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeStrictDateProperty', [javaParam(javaString(), 'p0'), javaParam($jPureDate, 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeStrictDateProperty', [javaParam(javaString(), 'p0'), javaParam(javaList($jPureDate), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeStringProperty', [javaParam(javaString(), 'p0'), javaParam(javaList(javaString()), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeStringProperty', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeUnitProperty', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaList(javaNumber()), 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'writeUnitProperty', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaNumber(), 'p2')]));

   let jIGraphSerializer = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.platform.IGraphSerializer')
      ->addMethod(javaMethod('public', javaVoid(), 'serialize', [javaParam(javaTypeVar('T'), 'p0')]));

   let jIPlatformPureExpressionExecutionNodeSerializeSpecifics = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.platform.IPlatformPureExpressionExecutionNodeSerializeSpecifics')
      ->addMethod(javaMethod('public', javaParameterizedType($jIGraphSerializer, [javaWildcard()]), 'serializer', [javaParam($jISerializationWriter, 'p0'), javaParam($jIExecutionNodeContext, 'p1')]));

   let jIStoreStreamReadingExecutionNodeContext = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReadingExecutionNodeContext')
      ->addMethod(javaMethod('public', $jIStoreStreamReader, 'createReader', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaURL(), 'createUrl', [javaParam(javaString(), 'p0')]));

   let jIStoreStreamReadingExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IStoreStreamReadingExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', $jIStoreStreamReader, 'streamReader', [javaParam($jIStoreStreamReadingExecutionNodeContext, 'p0')]));

   let jIInMemoryRootGraphFetchExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryRootGraphFetchExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaObject(), 'transform', [javaParam(javaObject(), 'p0')]));

   let jIInMemoryRootGraphFetchMergeExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryRootGraphFetchMergeExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaObject(), 'transform', [javaParam(javaObject(), 'p0')]));


   let jIInMemoryPropertyGraphFetchExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryPropertyGraphFetchExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaStream($jIGraphInstance), 'transformProperty', [javaParam(javaList(javaWildcard()), 'p0')]));

   let jIRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.relational.graphFetch.IRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaList(javaParameterizedType(javaClass('org.eclipse.collections.api.tuple.Pair'), [javaString(), javaString()])), 'allInstanceSetImplementations', []))
      ->addMethod(javaMethod('public', javaObject(), 'deepCopy', [javaParam(javaObject(), 'p0')]))
      ->addMethod(javaMethod('public', javaParameterizedType($jIGraphInstance, [javaWildcard()]), 'nextGraphInstance', []))
      ->addMethod(javaMethod('public', javaVoid(), 'prepare', [javaParam(javaResultSet(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaString(), 'p2')]))
      ->addMethod(javaMethod('public', javaList(javaString()), 'primaryKeyColumns', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaList(javaReflectMethod()), 'primaryKeyGetters', []))
      ->addMethod(javaMethod('public', javaBoolean(), 'supportsCaching', []));

   let jIRelationalCrossRootQueryTempTableGraphFetchExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.relational.graphFetch.IRelationalCrossRootQueryTempTableGraphFetchExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaVoid(), 'addChildToParent', [javaParam(javaObject(), 'p0'), javaParam(javaObject(), 'p1'), javaParam($jIExecutionNodeContext, 'p2')]))
      ->addMethod(javaMethod('public', javaObject(), 'deepCopy', [javaParam(javaObject(), 'p0')]))
      ->addMethod(javaMethod('public', javaString(), 'mappingId', []))
      ->addMethod(javaMethod('public', javaParameterizedType($jIGraphInstance, [javaWildcard()]), 'nextGraphInstance', []))
      ->addMethod(javaMethod('public', javaList(javaString()), 'parentCrossKeyColumns', [javaParam(javaList(javaString()), 'p0')]))
      ->addMethod(javaMethod('public', javaList(javaReflectMethod()), 'parentCrossKeyGetters', []))
      ->addMethod(javaMethod('public', javaList(javaReflectMethod()), 'parentCrossKeyGettersOrderedByTargetProperties', []))
      ->addMethod(javaMethod('public', javaVoid(), 'prepare', [javaParam(javaResultSet(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaString(), 'p2')]))
      ->addMethod(javaMethod('public', javaList(javaReflectMethod()), 'primaryKeyGetters', []))
      ->addMethod(javaMethod('public', javaString(), 'sourceInstanceSetId', []))
      ->addMethod(javaMethod('public', javaBoolean(), 'supportsCrossCaching', []))
      ->addMethod(javaMethod('public', javaString(), 'targetInstanceSetId', []))
      ->addMethod(javaMethod('public', javaList(javaString()), 'targetPropertiesOrdered', []));

   let jIInMemoryCrossStoreGraphFetchExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryCrossStoreGraphFetchExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaBoolean(), 'attemptAddingChildToParent', [javaParam(javaObject(), 'p0'), javaParam(javaObject(), 'p1')]))
      ->addMethod(javaMethod('public', javaParameterizedType(javaClass('java.util.Map'), [javaString(), javaObject()]), 'getCrossStoreKeysValueForChildren', [javaParam(javaObject(), 'p0')]))
      ->addMethod(javaMethod('public', javaParameterizedType(javaClass('java.util.Map'), [javaString(), javaObject()]), 'getCrossStoreKeysValueFromChild', [javaParam(javaObject(), 'p0')]))
      ->addMethod(javaMethod('public', javaList(javaReflectMethod()), 'parentCrossKeyGettersOrderedByTargetProperties', []))
      ->addMethod(javaMethod('public', javaParameterizedType($jIGraphInstance, [javaWildcard()]), 'wrapChildInGraphInstance', [javaParam(javaObject(), 'p0')]));

   let jIRelationalClassQueryTempTableGraphFetchExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.relational.graphFetch.IRelationalClassQueryTempTableGraphFetchExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaVoid(), 'addChildToParent', [javaParam(javaObject(), 'p0'), javaParam(javaObject(), 'p1'), javaParam($jIExecutionNodeContext, 'p2')]))
      ->addMethod(javaMethod('public', javaList(javaParameterizedType(javaClass('org.eclipse.collections.api.tuple.Pair'), [javaString(), javaString()])), 'allInstanceSetImplementations', []))
      ->addMethod(javaMethod('public', javaObject(), 'deepCopy', [javaParam(javaObject(), 'p0')]))
      ->addMethod(javaMethod('public', javaParameterizedType($jIGraphInstance, [javaWildcard()]), 'nextGraphInstance', []))
      ->addMethod(javaMethod('public', javaList(javaString()), 'parentPrimaryKeyColumns', [javaParam(javaList(javaString()), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'prepare', [javaParam(javaResultSet(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaString(), 'p2')]))
      ->addMethod(javaMethod('public', javaList(javaString()), 'primaryKeyColumns', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaList(javaReflectMethod()), 'primaryKeyGetters', []))
      ->addMethod(javaMethod('public', javaBoolean(), 'supportsCaching', []));

   let jIRelationalPrimitiveQueryGraphFetchExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.relational.graphFetch.IRelationalPrimitiveQueryGraphFetchExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaVoid(), 'addChildToParent', [javaParam(javaObject(), 'p0'), javaParam(javaObject(), 'p1'), javaParam($jIExecutionNodeContext, 'p2')]))
      ->addMethod(javaMethod('public', javaParameterizedType($jIGraphInstance, [javaWildcard()]), 'nextGraphInstance', []))
      ->addMethod(javaMethod('public', javaList(javaString()), 'parentPrimaryKeyColumns', [javaParam(javaList(javaString()), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'prepare', [javaParam(javaResultSet(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaString(), 'p2')]));

   let jIServiceParametersResolutionExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.serviceStore.IServiceParametersResolutionExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaParameterizedType(javaClass('java.util.Map'), [javaString(), javaObject()]), 'resolveServiceParameters', [javaParam(javaParameterizedType(javaClass('java.util.Map'), [javaString(), javaObject()]), 'p0')]));

   let jIPlatformPrimitiveQualifierLocalGraphFetchExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.plan.dependencies.store.platform.graphFetch.IPlatformPrimitiveQualifierLocalGraphFetchExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaStream(javaParameterizedType($jIGraphInstance, [javaWildcard()])), 'executeQualifierExpression', [javaParam(javaList(javaWildcard()), 'p0'), javaParam($jIExecutionNodeContext, 'p1')]));

   let jLibrary = javaLibrary();
   let jDurationUnit = javaDurationUnit();
   let jDayOfWeek = javaDayOfWeek();

   let res = $conventions
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IConstantResult, $jIConstantResult)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::EngineIResult, $jIResult)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IExecutionNodeContext, $jIExecutionNodeContext)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IGraphFetchM2MExecutionNodeContext, $jIGraphFetchM2MExecutionNodeContext)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::StoreStreamReader, $jIStoreStreamReader)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::DataParsingException, $jDataParsingException)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::PredefinedExpressions, $jPredefinedExpressions)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::Library, $jLibrary)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::GraphInstance, $jIGraphInstance)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::RelationalRootGraphNodeExecutor, $jIRelationalRootGraphNodeExecutor)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::RelationalCrossRootGraphNodeExecutor, $jIRelationalCrossRootGraphNodeExecutor)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::RelationalChildGraphNodeExecutor, $jIRelationalChildGraphNodeExecutor)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::RelationalClassInstantiationNodeExecutor, $jIRelationalClassInstantiationNodeExecutor)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::PureDate, $jPureDate)
      ->addProvidedType(meta::pure::functions::date::DurationUnit, $jDurationUnit)
      ->addProvidedType(meta::pure::functions::date::DayOfWeek, $jDayOfWeek)
      ->addProvidedType(meta::pure::functions::date::Month, $jMonth)
      ->addProvidedType(meta::pure::functions::date::Quarter, $jQuarter)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::DataQualityBasicDefectClass, $jBasicDefect)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::DataQualityBasicRelativePathNodeClass, $jBasicRelativePathNode)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::DataQualityGraphContextClass, $jGraphContext)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::DataQualityConstrainedInterface, $jConstrained)
      ->addProvidedType(meta::pure::dataQuality::Checked, $jIChecked)
      ->addProvidedType(meta::pure::dataQuality::Defect, $jIDefect)
      ->addProvidedType(meta::pure::dataQuality::EnforcementLevel, $jEnforcementLevel)
      ->addProvidedType(meta::pure::dataQuality::RuleType, $jRuleType)
      ->addProvidedType(meta::pure::dataQuality::RelativePathNode, $jRelativePathNode)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IReferencedObject, $jIReferencedObject)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IRelationalCreateAndPopulateTempTableExecutionNodeSpecifics, $jIRelationalCreateAndPopulateTempTableExecutionNodeSpecifics)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IPlatformPureExpressionExecutionNodeSerializeSpecifics, $jIPlatformPureExpressionExecutionNodeSerializeSpecifics)

      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::ISerializationWriter, $jISerializationWriter)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IGraphSerializer, $jIGraphSerializer)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IStoreStreamReadingExecutionNodeSpecifics, $jIStoreStreamReadingExecutionNodeSpecifics)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IStoreStreamReadingExecutionNodeContext, $jIStoreStreamReadingExecutionNodeContext)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IInMemoryRootGraphFetchExecutionNodeSpecifics, $jIInMemoryRootGraphFetchExecutionNodeSpecifics)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IInMemoryRootGraphFetchMergeExecutionNodeSpecifics, $jIInMemoryRootGraphFetchMergeExecutionNodeSpecifics)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IInMemoryPropertyGraphFetchExecutionNodeSpecifics, $jIInMemoryPropertyGraphFetchExecutionNodeSpecifics)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics, $jIRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IRelationalCrossRootQueryTempTableGraphFetchExecutionNodeSpecifics, $jIRelationalCrossRootQueryTempTableGraphFetchExecutionNodeSpecifics)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IInMemoryCrossStoreGraphFetchExecutionNodeSpecifics, $jIInMemoryCrossStoreGraphFetchExecutionNodeSpecifics)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IRelationalClassQueryTempTableGraphFetchExecutionNodeSpecifics, $jIRelationalClassQueryTempTableGraphFetchExecutionNodeSpecifics)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IRelationalPrimitiveQueryGraphFetchExecutionNodeSpecifics, $jIRelationalPrimitiveQueryGraphFetchExecutionNodeSpecifics)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IServiceParametersResolutionExecutionNodeSpecifics, $jIServiceParametersResolutionExecutionNodeSpecifics)
      ->addProvidedType(meta::pure::executionPlan::platformBinding::legendJava::IPlatformPrimitiveQualifierLocalGraphFetchExecutionNodeSpecifics, $jIPlatformPrimitiveQualifierLocalGraphFetchExecutionNodeSpecifics);

   let platformDependencyUpdates = $extensions->meta::pure::executionPlan::platformBinding::legendJava::extractLegendJavaAdhocExtensionsOfType(meta::pure::executionPlan::platformBinding::legendJava::LegendJavaPlatformDependencyUpdateExtension).platformDependencyUpdate;
   $platformDependencyUpdates->fold({e,b|$e->eval($b, $extensions)}, $res);
}
