// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::modelToModel::inMemory::*;
import meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::graphFetch::*;
import meta::pure::graphFetch::routing::*;
import meta::external::language::java::factory::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::*;
import meta::pure::extension::*;
import meta::pure::mapping::modelToModel::graphFetch::executionPlan::*;
import meta::external::language::java::metamodel::*;
function <<access.private>> meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::graphFetch::MergeOperationForProperty(property:PropertyMapping[0..1]):MergeOperationSetImplementation[0..1]
{
  if($property->isNotEmpty(),
     |let rootMapping = $property->toOne().owner.parent;     
      $rootMapping.classMappings->filter(m|$m->instanceOf(MergeOperationSetImplementation))->cast(@MergeOperationSetImplementation)->filter(o| $property->toOne().targetSetImplementationId->in($o.parameters.id))->first();
      ,|[]);
   }


function <<access.private>> meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::graphFetch::MergeOperationForInstance(instance:meta::pure::mapping::modelToModel::PureInstanceSetImplementation[1]):MergeOperationSetImplementation[1]
{
    $instance.parent.classMappings->filter(m|$m->instanceOf(MergeOperationSetImplementation))->cast(@MergeOperationSetImplementation)->filter(o| $instance.id->in($o.parameters.id))->at(0);
}

function <<access.private>> meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::graphFetch::generateMergeFunction(nodes: InMemoryGraphFetchExecutionNode[*],rootPath:String[1] ,rootClass:meta::external::language::java::metamodel::Class[1], childPath: String[0..1], context: GenerationContext[1], extensions: Extension[*], debug: DebugContext[1]):Method[*]
{
   let updatedChildPath = if($childPath->isNotEmpty(),|$childPath->toOne(),|'');
   let resultPath = $rootPath+'.n1'+$updatedChildPath;
   print(if($debug.debug,|$debug.space+'('+$resultPath+') generateMergeFunction for nested merge\n', |''));
   let subNodes = $nodes;
   let childSets =$nodes.graphFetchTree.sets->cast(@InstanceSetImplementation);
   let initialNode = $nodes->head()->toOne();
   let conventions    = $context.conventions;
   let graphFetchTree = $initialNode.graphFetchTree;
   let resultGraphImpl      = $initialNode->graphImplClass($resultPath ,$context);
   let interfaceClass =  $context.conventions->className($initialNode->typeFromStoreLocalNode());

   let result            = j_variable($resultGraphImpl, 'result');
   
   let propertySubtree = $graphFetchTree.subTrees->cast(@RoutedPropertyGraphFetchTree)->filter(st | $st.property->instanceOf(Property) );
   let intialSet =  $childSets->head().id;
   let interfaceGraphParameter = j_parameter($interfaceClass, 'graphObject');
   let resultGraphParameter = j_parameter($resultGraphImpl, 'graphObject');


   let input = j_parameter(javaList(javaObject()), 'input');


   let inputStream =  $input->j_streamOf()
                                    ->js_filter(j_lambda($interfaceGraphParameter, $interfaceGraphParameter->j_instanceof($resultGraphImpl )   ))
                                    ->js_filter(j_lambda($resultGraphParameter, $resultGraphParameter->j_invoke($conventions->getterName('setId$'), [], javaString())->j_eq(j_string($intialSet->toOne()))))
                                    ->js_resolve($resultGraphImpl);
   let initializationCodes = [
                             $result->j_declare( $inputStream)
                             ];

   //this gets used if a property accesses the result of a merged class
   let subMergeMethods  =  $propertySubtree->map(st |let prop = $st.property->cast(@Property<Nil,Any|*>);
                                                        let set = $initialNode.graphFetchTree.sets->cast(@InstanceSetImplementation)->toOne();
                                                        let propertyMapping = $set->_propertyMappingsByPropertyName($prop.name->toOne())->head();
                                                        let possibleMergeForSet = $propertyMapping->MergeOperationForProperty();

                                                       if($propertyMapping->isNotEmpty() && $possibleMergeForSet ->isNotEmpty(),
                                                           |
                                                          assert($prop.multiplicity == PureOne ||$prop.multiplicity==ZeroOne ,'Merge  only supported with an upper multiplicity of One'); 
                                                             let propertyChildren =  $subNodes.children->filter(n|$n.graphFetchTree.sets->first()->in($possibleMergeForSet->toOne().parameters.setImplementation));
                                                             let propertyClass = $context.conventions->className($propertyChildren->at(0)->typeFromStoreLocalNode());
                                                             let valuesForMerge = [$result->j_invoke($conventions->getterName($prop),[],javaVoid())]->concatenate(
                                                                                    $subNodes->tail()->map(n| let index = $subNodes->indexOf($n)+1;
                                                                                                              let indexID = 'src'+$index->toString();
                                                                                                              let setGraphIMPL =   $n->graphImplClass($rootPath+'.n'+$index->toString()+$updatedChildPath, $context);
                                                                                                              let src = j_variable($setGraphIMPL, $indexID);
                                                                                                              $src->j_invoke($conventions->getterName($prop),[],javaVoid());));
                                                             let setMergedProperty = $result->j_invoke($conventions->setterName($prop),j_this($rootClass)->j_invoke('merge'+$updatedChildPath->replace('.','_')+'_localChild0',javaArrays()->j_invoke(javaObject() , 'asList', $valuesForMerge  , javaList(javaObject())),javaVoid()),javaVoid());
                                                            ^MergedPropertyHolder(mergeOperation =  $setMergedProperty,
                                                                                  mergeMethod= $propertyChildren->generateMergeFunction($rootPath,$rootClass,$updatedChildPath+'.localChild0',$context,$extensions,$debug));,

                                                           |[]);
                                                 );

   let properties = $subNodes->tail()->map( node | let index = $subNodes->indexOf($node)+1;
                                                   let set = $node.graphFetchTree.sets->cast(@InstanceSetImplementation)->toOne();
                                                   let srcClass          = $set->sourceClass($extensions);
                                                   let srcJavaClass      = $conventions->className($srcClass);
                                                   let indexID = 'src'+$index->toString();
                                                   let setGraphIMPL =   $node->graphImplClass($rootPath+'.n'+$index->toString()+$updatedChildPath, $context);
                                                   let setGraphParameter = j_parameter($setGraphIMPL, 'graphObject');

                                                   let src = j_variable($setGraphIMPL, $indexID);
                                                   let source = $src->j_declare( $input->j_streamOf()
                                                                             ->js_filter(j_lambda($interfaceGraphParameter, $interfaceGraphParameter->j_instanceof($setGraphIMPL )   ))
                                                                             ->js_filter(j_lambda($setGraphParameter, $setGraphParameter->j_invoke($conventions->getterName('setId$'), [], javaString())->j_eq(j_string($set.id->toOne()))))->js_resolve($setGraphIMPL));
                                                   let propertyValues = $propertySubtree->map({st |let prop = $st.property->cast(@Property<Nil,Any|*>); 
                                                                                                    let propertyMapping = $set->_propertyMappingsByPropertyName($prop.name->toOne())->head();
                                                                                                    let possibleMergeForSet = $propertyMapping->MergeOperationForProperty();

                                                                                                    if($propertyMapping->isEmpty()  || $possibleMergeForSet->isNotEmpty(),
                                                                                                      |[] ,
                                                                                                      |  let initialResult = $result->j_invoke($conventions->setterName($prop),$src->j_invoke($conventions->getterName($prop), [],javaVoid()),javaVoid());
                                                                                                      );
                                                                                              });
                                            
                                                     let srcClassGet = $src->toOne()->j_invoke($conventions->getterName('src$'),[], javaObject())->j_cast($srcJavaClass);
                                                      ^MergedPropertySource(src= $srcClassGet, 
                                                                            source=$source,
                                                                            propertyValues=$propertyValues);

                                  );


      let mergeOp = $graphFetchTree.sets->cast(@meta::pure::mapping::modelToModel::PureInstanceSetImplementation)->at(0)->MergeOperationForInstance();
      let validationFunction = $mergeOp.validationFunction->evaluateAndDeactivate().expressionSequence->cast(@InstanceValue).values->toOne()->cast(@LambdaFunction<Any>);

      assert($validationFunction->functionType().returnType.rawType==Boolean,'Found a non- boolean return type for the merge function of Merge Mapping Operation for class: ' +  $mergeOp.class->elementToPath());
      assert($mergeOp.parameters.setImplementation->cast(@PureInstanceSetImplementation).srcClass->containsAll($validationFunction->functionType().parameters.genericType.rawType)  ,'Found parameters to the merge function that are not a src class for class: ' +  $mergeOp.class->elementToPath());

      let mergeParameters = $validationFunction->processLambda($conventions,$debug)->cast(@Lambda).parameters; 
      

      let assert =   j_if(  j_not(  $validationFunction.expressionSequence->toOne()->generateJava($conventions, $debug)),   
                       javaIllegalStateException()->j_new(j_string('Merge Mapping Validation function for class: '+  $mergeOp.class->elementToPath()  + ' returned false. Please ensure the input data returns true for the validation function'))->j_throw());

      let validationName =  'validate'+$updatedChildPath->replace('.','_');
      let validationMethod = javaMethod([],javaVoid(), $validationName, $mergeParameters, $assert);



      let initSrcJavaClass =  className($conventions,$childSets->at(0)->sourceClass($extensions));


     let allSrcGetters = $result->j_invoke($conventions->getterName('src$'),[], javaObject())->j_cast($initSrcJavaClass) ->concatenate( $properties.src  )    ;

      let orderedGetters = $mergeParameters->map(p| $allSrcGetters->filter(s|$s.type== $p.type)->at(0)->j_cast($p.type));
      let invokeValidation = j_this($rootClass)->j_invoke($validationName,$orderedGetters,javaVoid() );


     let returnCodes = $result->j_return();
   
    let merge =  $initializationCodes->concatenate($properties.combined())->concatenate($subMergeMethods.mergeOperation)->concatenate($invokeValidation)->concatenate($returnCodes)->toOneMany();
     let mergeMethod = javaMethod([], $resultGraphImpl, 'merge'+$updatedChildPath->replace('.','_'), [$input], $merge);
     $mergeMethod->concatenate($subMergeMethods.mergeMethod)->concatenate($validationMethod);

}



Class <<access.private>> meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::graphFetch::MergedPropertySource
{
   source:Code[0..1];
   src:Code[0..1];
   propertyValues:Code[*];
   combined(){$this.source->concatenate($this.propertyValues)}:Code[*];
}