// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::platformBinding::localBinding::*;
import meta::pure::executionPlan::platformBinding::*;
import meta::pure::test::pct::*;

function <<PCT.adapter>> meta::pure::executionPlan::platformBinding::legendJava::pct::testAdapterForJavaBindingExecution<X|o>(f:Function<{->X[o]}>[1]):X[o]
{
    let debug = noDebug();

    let rawPlan = meta::pure::executionPlan::executionPlan($f->cast(@FunctionDefinition<{->Any[*]}>), ^meta::pure::runtime::ExecutionContext(), [], $debug);

    let planBindToJava = $rawPlan->meta::pure::executionPlan::platformBinding::localBinding::bindTestPlanToPlatformLocallyWithClasspathExtensions('LegendJava');

    let plan = $planBindToJava->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::executionPlan::transformPlan([]);

    let planAsJson = $plan->meta::json::toJSON(1000, meta::json::config(false, false, true, true));

    let x = meta::legend::executePlanAsJSON($planAsJson, []);

    let res = $x->meta::json::parseJSON()->meta::json::fromJSON(Any, ^meta::json::ExtendedJSONDeserializationConfig(typeKeyName='__TYPE', failOnUnknownProperties=true, nullReplacementInArray=TDSNull));
    
    // processResult
    let resultType = $f->functionReturnType().rawType;

    if ($resultType->toOne()->instanceOf(PrimitiveType) || $resultType == Nil,
      | $res,
      | fail();
    )->cast(@X)->toMultiplicity(@[o]);
}

