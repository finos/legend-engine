// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;

function meta::external::language::java::generation::essential::pureDate::registerPureDateLibrary(conventions: Conventions[1]): Conventions[1]
{
   let pureDate = $conventions->className(PureDate);
   let library  = $conventions->className(Library);

   let lib = newConventionsLibrary()
      ->usesJavaClass($conventions->className(DayOfWeek))
      ->usesJavaClass($conventions->className(DurationUnit))
      ->usesJavaClass($conventions->className(Library))
      ->usesJavaClass($pureDate->typeToString())
      ->usesStrictDate($pureDate, {d:StrictDate[1] | $pureDate->j_invoke('parsePureDate', j_string($d->toString()), $pureDate)})
      ->usesDateTime(  $pureDate, {d:DateTime[1]   | $pureDate->j_invoke('parsePureDate', j_string($d->toString()), $pureDate)})
      ->usesDate(      $pureDate, {d:Date[1]       | $pureDate->j_invoke('parsePureDate', j_string($d->toString()), $pureDate)})
      ->addFunctionCoders([
         fc1(date_Integer_1__Date_1_,                                                                {ctx,year                               | $ctx.conventions->className(PureDate)->j_invoke('newPureDate', [$year->j_cast(javaInt())], $ctx.conventions->className(PureDate))}),
         fc2(date_Integer_1__Integer_1__Date_1_,                                                     {ctx,year,month                         | $ctx.conventions->className(PureDate)->j_invoke('newPureDate', [$year->j_cast(javaInt()),$month->j_cast(javaInt())], $ctx.conventions->className(PureDate))}),
         fc3(date_Integer_1__Integer_1__Integer_1__StrictDate_1_,                                    {ctx,year,month,day                     | $ctx.conventions->className(PureDate)->j_invoke('newPureDate', [$year->j_cast(javaInt()),$month->j_cast(javaInt()),$day->j_cast(javaInt())], $ctx.conventions->className(PureDate))}),
         fc4(date_Integer_1__Integer_1__Integer_1__Integer_1__DateTime_1_,                           {ctx,year,month,day,hour                | $ctx.conventions->className(PureDate)->j_invoke('newPureDate', [$year->j_cast(javaInt()),$month->j_cast(javaInt()),$day->j_cast(javaInt()),$hour->j_cast(javaInt())], $ctx.conventions->className(PureDate))}),
         fc5(date_Integer_1__Integer_1__Integer_1__Integer_1__Integer_1__DateTime_1_,                {ctx,year,month,day,hour,minute         | $ctx.conventions->className(PureDate)->j_invoke('newPureDate', [$year->j_cast(javaInt()),$month->j_cast(javaInt()),$day->j_cast(javaInt()),$hour->j_cast(javaInt()),$minute->j_cast(javaInt())], $ctx.conventions->className(PureDate))}),
         fc6(date_Integer_1__Integer_1__Integer_1__Integer_1__Integer_1__Number_1__DateTime_1_,      {ctx,year,month,day,hour,minute,second  | $ctx.conventions->className(PureDate)->j_invoke('newPureDate', [$year->j_cast(javaInt()),$month->j_cast(javaInt()),$day->j_cast(javaInt()),$hour->j_cast(javaInt()),$minute->j_cast(javaInt()),$second->j_cast(javaNumber())], $ctx.conventions->className(PureDate))}),

         fc1(datePart_Date_1__Date_1_,                                                               {ctx,dt                                 | $library->j_invoke('datePart', [$dt], $pureDate)}),
         fc1(dayOfMonth_Date_1__Integer_1_,                                                          {ctx,dt                                 | $library->j_invoke('dayOfMonth', [$dt], javaLong())}),
         fc1(hour_Date_1__Integer_1_,                                                                {ctx,dt                                 | $dt->j_invoke('getHour', [], javaInt())}),
         fc1(minute_Date_1__Integer_1_,                                                              {ctx,dt                                 | $dt->j_invoke('getMinute', [], javaInt())}),
         fc1(monthNumber_Date_1__Integer_1_,                                                         {ctx,dt                                 | $dt->j_invoke('getMonth', [], javaInt())}),
         fc1(second_Date_1__Integer_1_,                                                              {ctx,dt                                 | $dt->j_invoke('getSecond', [], javaInt())}),
         fc1(year_Date_1__Integer_1_,                                                                {ctx,dt                                 | $dt->j_invoke('getYear', [], javaInt())}),

         fc1(hasDay_Date_1__Boolean_1_,                                                              {ctx,date                               | $date->j_invoke('hasDay', [], javaBoolean())}),
         fc1(hasHour_Date_1__Boolean_1_,                                                             {ctx,date                               | $date->j_invoke('hasHour', [], javaBoolean())}),
         fc1(hasMinute_Date_1__Boolean_1_,                                                           {ctx,date                               | $date->j_invoke('hasMinute', [], javaBoolean())}),
         fc1(hasMonth_Date_1__Boolean_1_,                                                            {ctx,date                               | $date->j_invoke('hasMonth', [], javaBoolean())}),
         fc1(hasSecond_Date_1__Boolean_1_,                                                           {ctx,date                               | $date->j_invoke('hasSecond', [], javaBoolean())}),
         fc1(hasSubsecond_Date_1__Boolean_1_,                                                        {ctx,date                               | $date->j_invoke('hasSubsecond', [], javaBoolean())}),
         fc2(hasSubsecondWithAtLeastPrecision_Date_1__Integer_1__Boolean_1_,                         {ctx,date,precision                     | $date->j_invoke('hasSubsecond', [], javaBoolean())->j_and($date->j_invoke('getSubsecond', [], javaString())->j_invoke('length', [])->j_ge($precision))}),

         fc3(adjust_Date_1__Integer_1__DurationUnit_1__Date_1_,                                      {ctx,dt,qty,unit                        | $library->j_invoke('adjustDate', [$dt, $qty, $unit], $ctx.conventions->className(PureDate))}),
         fc3(dateDiff_Date_1__Date_1__DurationUnit_1__Integer_1_,                                    {ctx,dt1,dt2,unit                       | $library->j_invoke('dateDiff', [$dt1, $dt2, $unit], javaLong())})
   ]);
   
   $conventions->registerLibrary($lib);
}



