// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::pure::functions::reportDelta::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::external::language::java::generation::essential::collection::*;

function meta::external::language::java::generation::essential::collection::registerCollectionsLibrary(conventions: Conventions[1], boxPrimitives: Boolean[1]): Conventions[1]
{
   let library  = $conventions->className(Library);

   let x = j_parameter(javaBoolean()->toBoxed(), 'x');
   let y = j_parameter(javaBoolean()->toBoxed(), 'y');

   let lib = newConventionsLibrary()
      ->usesJavaPackage('java.util')
      ->usesJavaPackage('java.util.stream')
      ->usesBoolean(if($boxPrimitives, |javaBooleanBoxed(), |javaBoolean()), javaBooleanBoxed(), {b:Boolean[1] | j_boolean($b)})
      ->addFunctionCoders([
         fc2(exists_T_MANY__Function_1__Boolean_1_,                              {ctx,collection,func          | $collection->j_streamOf()->js_anyMatch($func)}),

         fc2(forAll_T_MANY__Function_1__Boolean_1_,                              {ctx,collection,func          | $collection->j_streamOf()->js_allMatch($func)}),

         fc2(contains_Any_MANY__Any_1__Boolean_1_,                               {ctx,collection,obj           | if($collection.type->isJavaList(), |$collection->j_invoke('contains', $obj), |javaObjects()->j_invoke('equals', [$collection, $obj]))}),
         fc3(contains_Z_MANY__Z_1__Function_1__Boolean_1_,                       {ctx,collection,obj,eqlf      | $library->j_invoke('contains', [$collection, $obj, $eqlf], javaBoolean())}),

         fc2(at_T_MANY__Integer_1__T_1_,                                         {ctx,collection,index         | $library->j_invoke('at', [$collection, $index], if($collection.type->isJavaList(), |$collection.type->elementTypeOfJavaList(), |$collection.type))}),
         fc2(indexOf_T_MANY__T_1__Integer_1_,                                    {ctx,collection,obj           | $library->j_invoke('indexOf', [$collection, $obj], if($collection.type->isJavaList(), |$collection.type->elementTypeOfJavaList(), |$collection.type))}),

         fc3(fold_T_MANY__Function_1__V_m__V_m_,                                 {ctx,collection,acc,identity  | javaFold($ctx, $collection, $acc, $identity, $library) }),

         fc1(reverse_T_m__T_m_,                                                  {ctx,collection               | if($collection.type->isJavaList(), | $library->j_invoke('reverse', $collection, $collection.type), | $collection) }),

         fc1(sort_T_m__T_m_,                                                     {ctx,collection               | if($collection.type->isJavaList(), | $library->j_invoke('sort', $collection, $collection.type), | $collection) }),
         fc2(sort_T_m__Function_$0_1$__T_m_,                                     {ctx,collection,comp          | if($collection.type->isJavaList(), | sortComp($ctx, $collection, $comp, $library),              | $collection) }),
         fc3(sort_T_m__Function_$0_1$__Function_$0_1$__T_m_,                     {ctx,collection,key,comp      | if($collection.type->isJavaList(), | sortKeyComp($collection, $key, $comp, $library),           | $collection) }),

         fc2(drop_T_MANY__Integer_1__T_MANY_,                                    {ctx,collection,limit         | $ctx.param('collection')->j_streamOf()->js_skip(pinToZero($limit))}),
         fc (head_T_MANY__T_$0_1$_,                                              fcAlias(                        first_T_MANY__T_$0_1$_)),
         fc1(init_T_MANY__T_MANY_,                                               {ctx,collection               | if($collection.type->isJavaList(), |$library->j_invoke('init', $collection, $collection.type), | j_null($ctx.returnType->elementType())) }),
         fc1(last_T_MANY__T_$0_1$_,                                              {ctx,collection               | last($collection, $library)}),
         fc3(slice_T_MANY__Integer_1__Integer_1__T_MANY_,                        {ctx,collection,limit1,limit2 | $collection->j_streamOf()->js_skip(pinToZero($limit1))->js_limit($limit2->j_minus(pinToZero($limit1)))}),
         fc1(tail_T_MANY__T_MANY_,                                               {ctx,collection               | $collection->j_streamOf()->js_skip(j_long(1))}),
         fc2(take_T_MANY__Integer_1__T_MANY_,                                    {ctx,collection,limit         | $collection->j_streamOf()->js_limit($limit)}),

         fc (add_T_MANY__T_1__T_$1_MANY$_,                                       fcAlias(                        concatenate_T_MANY__T_MANY__T_MANY_)),
         fc2(concatenate_T_MANY__T_MANY__T_MANY_,                                {ctx,collection1,collection2  | javaStream()->j_invoke('concat', [$collection1->j_streamOf(), $collection2->j_streamOf()], javaStream($ctx.returnType()->elementType()))}),

         fc1(removeDuplicates_T_MANY__T_MANY_,                                   {ctx,collection               | if($collection.type->isJavaList(), |$library->j_invoke('removeDuplicates', [$collection, j_null(), j_null()], $collection.type), | j_null($ctx.returnType->elementType()))}),
         fc2(removeDuplicates_T_MANY__Function_1__T_MANY_,                       {ctx,collection,eqlf          | if($collection.type->isJavaList(), |$library->j_invoke('removeDuplicates', [$collection, j_null(), $eqlf   ], $collection.type), | j_null($ctx.returnType->elementType()))}),

         fc2(removeDuplicatesBy_T_MANY__Function_1__T_MANY_,                     {ctx,collection,keyf          | if($collection.type->isJavaList(), |$library->j_invoke('removeDuplicates', [$collection, $keyf,    j_null()], $collection.type), | j_null($ctx.returnType->elementType()))}),
         fc3(removeDuplicates_T_MANY__Function_$0_1$__Function_$0_1$__T_MANY_,   {ctx,collection,keyf,eqlf     | if($collection.type->isJavaList(), |$library->j_invoke('removeDuplicates', [$collection, $keyf,    $eqlf   ], $collection.type), | j_null($ctx.returnType->elementType()))})
      ]);

   $conventions->registerLibrary($lib);
}

function meta::external::language::java::generation::essential::collection::last(collection:Code[1], library:meta::external::language::java::metamodel::Class[1]) : Code[1]
{
    if($collection.type->isJavaList(), | j_conditional($collection->j_invoke('isEmpty', []), j_null($collection.type->elementType()) ,$collection->j_invoke('get', $collection->j_invoke('size', [])->j_minus(j_int(1)))), | $collection )
}

function meta::external::language::java::generation::essential::collection::sortComp(ctx:FuncCoderContext[1], collection:Code[1], comp:Code[1], library:meta::external::language::java::metamodel::Class[1]) : Code[1]
{
   let adapted = $library->j_invoke('adaptPureComparator',$comp, javaComparator($collection.type->elementType()));
   $library->j_invoke($collection.type->elementType(), 'sort', [$collection, $adapted], javaList($collection.type->elementType()));
}

function meta::external::language::java::generation::essential::collection::sortKeyComp(collection:Code[1], key:Code[1], comp:Code[1], library:meta::external::language::java::metamodel::Class[1]) : Code[1]
{
   let adapted = $library->j_invoke('adaptPureComparator',$comp, javaComparator($collection.type->elementType()));
   let newComp = javaComparator()->j_invoke('comparing', [$key, $adapted], javaComparator($collection.type->elementType()));
   $library->j_invoke($collection.type->elementType(), 'sort', [$collection, $newComp], javaList($collection.type->elementType()));
}

function meta::external::language::java::generation::essential::collection::pinToZero(n:Code[1]) : Code[1]
{
   j_conditional($n->j_lt(j_long(0)), j_long(0), $n);
}

function meta::external::language::java::generation::essential::collection::javaFold(ctx: FuncCoderContext[1], collection:Code[1], acc:Code[1], identity:Code[1], library:meta::external::language::java::metamodel::Class[1]) : Code[1]
{
   if($collection->isNull(),
      | $identity, // a fold of an empty list is the identity element
      | javaFoldNonEmptyList($ctx, $collection, $acc, $identity, $library)
   );
}

function meta::external::language::java::generation::essential::collection::javaFoldNonEmptyList(ctx: FuncCoderContext[1], collection:Code[1], acc:Code[1], identity:Code[1], library:meta::external::language::java::metamodel::Class[1]) : Code[1]
{
   let rtn = $ctx.returnType();
   // The identity may be a subtype of the return type but we can treat it as the supertype and avoid Nil
   let safeIdentity = $identity->upcastIdentity($rtn)->j_listOf($rtn);
   print(if($ctx.debug.debug,|$ctx.debug.space+' safeIdentity: ('+ $safeIdentity.type->typeToString()+')  '+$safeIdentity->codeToString()+'\n', |''));

   //Same goes for the second parameter of the acc function
   let accType = $acc.type->cast(@meta::external::language::java::metamodel::FunctionType);
   let safeAcc = $acc->j_cast(javaFunctionType([$accType.parameterTypes->at(0), $rtn->toBoxed()], $rtn->toBoxed()));
   print(if($ctx.debug.debug,|$ctx.debug.space+' safeAcc: ('+ $safeAcc.type->typeToString()+')  '+ $safeAcc->codeToString()+'\n', |''));

   let safeCol = $collection->j_listOf(javaList($accType.parameterTypes->at(0)));

   $library->j_invoke('fold', [$safeCol, $safeAcc, $safeIdentity], $ctx.returnType());
}

function <<access.private>> meta::external::language::java::generation::essential::collection::upcastIdentity(identity:Code[1], rtn:meta::external::language::java::metamodel::Type[1]): Code[1]
{
   // The identity may be a subtype (type and/or multiplicity) of the function return type (which is also it's 2nd parameter input)
   // Here we upcast the identity to that type to safely act as the initial input.
   if($identity.type == $rtn,
      | $identity,
      |
   if($rtn->isJavaList(),
      | $identity->j_listOf($rtn),
      | $identity->j_cast($rtn)
   ));
}
