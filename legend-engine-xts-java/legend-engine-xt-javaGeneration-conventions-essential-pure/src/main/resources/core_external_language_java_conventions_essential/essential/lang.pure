// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::external::language::java::generation::essential::lang::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;

function meta::external::language::java::generation::essential::lang::registerLangLibrary(conventions: Conventions[1]): Conventions[1]
{
   let library  = $conventions->className(Library);

   let lib = newConventionsLibrary()
      ->usesJavaPackage('java.util')
      ->usesJavaPackage('java.util.stream')
      ->addFunctionCoders([         
         fc2(cast_Any_m__T_1__T_m_,                            castCoder_FuncCoderContext_1__Code_1__Code_1__Code_1_),
         fc1(toDecimal_Number_1__Decimal_1_,                   {ctx,num        | javaBigDecimal()->j_new($num->j_cast(javaNumber())->j_invoke('toString', []))}), 
         fc1(toFloat_Number_1__Float_1_,                       {ctx,num        | $num->j_cast(javaNumber())->j_invoke('doubleValue', [])}),
         fc3(if_Boolean_1__Function_1__Function_1__T_m_,       ifCoder_FuncCoderContext_1__Code_1__Code_1__Code_1__Code_1_),
         fc2(newUnit_Unit_1__Number_1__Any_1_,   {ctx,unit,value    | $ctx->unitImpl(0)->j_new($value);})
      ]);

   $conventions->registerLibrary($lib);
}

function meta::external::language::java::generation::essential::lang::unitImpl(ctx:FuncCoderContext[1], index:Integer[1]): meta::external::language::java::metamodel::Class[1]
{
   let unit = $ctx.params->at($index)->cast(@InstanceValue).values->toOne()->cast(@Unit);
   $ctx.conventions->implClassName($unit);
}

function meta::external::language::java::generation::essential::lang::castCoder(ctx:FuncCoderContext[1], collection:Code[1], exmpl:Code[1]) : Code[1]
{
   let type   = resolveHackedUnit($ctx, $ctx.params->at(1));

   let castTo = if(isJavaList($collection.type),
                   | javaList($type),
                   | $type
                );

   $collection->j_cast($castTo);
}

function <<access.private>> meta::external::language::java::generation::essential::lang::resolveHackedUnit(ctx:FuncCoderContext[1], exmpl:ValueSpecification[1]) : meta::external::language::java::metamodel::Type[1]
{
   let isHackedUnit = $exmpl->type()->instanceOf(Unit);

   if($isHackedUnit,
      | $exmpl->hackedUnitType($ctx.conventions),
      | $exmpl->generateJava($ctx.conventions, $ctx.debug->indent()).type->toBoxed()
  );
}

function meta::external::language::java::generation::essential::lang::ifCoder(ctx:FuncCoderContext[1], condition:Code[1], then:Code[1], else:Code[1]) : Code[1]
{
      j_conditional($condition, $then->prepareIfClause($ctx), $else->prepareIfClause($ctx));
}

function <<access.private>> meta::external::language::java::generation::essential::lang::prepareIfClause( clause:Code[1],ctx:FuncCoderContext[1]) : Code[1]
{
  let returnType = $ctx.returnType();
  let statements = $clause->cast(@Lambda).expression->cast(@Block).statements;
  if ( $statements->size() == 1 && ($returnType->isSimpleIfType() || ($returnType->isJavaList() && $returnType->cast(@ParameterizedType).typeArguments->at(0)->isSimpleIfType())) ,
                    |  let expression = $statements->at(0)->cast(@Return).expression->toOne();
                        if($expression->isCollectionsEmptyList(),
                           | if($returnType->isJavaList(),
                                |   j_emptyList($returnType);,
                                | j_null()
                              );,
                           | if($returnType->isJavaList() && !$expression.type->isJavaList(),
                                 |    j_invoke(javaArrays(), 'asList', $expression, $expression.type)->j_cast(javaList($expression.type)),
                                 |$expression;
                                );
                         );,
                     | $clause->j_cast(javaSupplier($returnType))->j_invoke('get', [], $returnType )
     
    )->toOne();
}

function <<access.private>> meta::external::language::java::generation::essential::lang::isSimpleIfType(type:meta::external::language::java::metamodel::Type[1]) : Boolean[1]
{
  $type->isPrimitiveOrBoxedType() || $type == javaString() ; 
}
