// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::metamodel::*;
import meta::external::language::java::factory::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::external::language::java::generation::essential::meta::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::*;

function meta::external::language::java::generation::essential::meta::registerMetaLibrary(conventions: Conventions[1]): Conventions[1]
{
    let lib = newConventionsLibrary()
      ->addFunctionCoders([
         fc1(id_Any_1__String_1_,                                      {ctx,obj                  | if($ctx.params->at(0).genericType.rawType->toOne()->instanceOf(meta::pure::metamodel::type::PrimitiveType),
                                                                                                   |  javaString()->j_invoke('valueOf', $obj, javaString()),
                                                                                                   |  if($ctx.params->at(0).genericType.rawType->toOne()->instanceOf(meta::pure::metamodel::type::Enumeration),
                                                                                                      | $obj->j_invoke('getName', [], javaString()),
                                                                                                      | j_string('@')->j_plus(javaInt()->toBoxed()->j_invoke('toHexString', javaSystem()->j_invoke('identityHashCode', $obj, javaInt()), javaString()))))}),
         fc2(instanceOf_Any_1__Type_1__Boolean_1_,                     {ctx,candidate,type       | $candidate->j_cast(javaObject())->j_instanceof($type->cast(@Cast).expression.type->toBoxed());})
      ]);
   
    $conventions
    ->registerLibrary($lib);
}
