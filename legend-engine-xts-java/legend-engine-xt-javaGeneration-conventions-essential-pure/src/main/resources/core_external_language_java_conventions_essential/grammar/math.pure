// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::transform::*;
import meta::external::language::java::serialization::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::external::language::java::generation::grammar::math::*;

function meta::external::language::java::generation::grammar::math::registerMathsLibrary(conventions: Conventions[1], boxPrimitives: Boolean[1]): Conventions[1]
{
   let library  = $conventions->className(Library);

   let lib = newConventionsLibrary()
      ->usesNumber( javaNumber(),     javaNumber(),      {n:Number[1]  | javaBigDecimal()->j_new(j_string($n->toString()))})
      ->usesDecimal(javaBigDecimal(), javaBigDecimal(),  {d:Number[1]  | javaBigDecimal()->j_new(j_string($d->toString()))})
      ->usesInteger(if($boxPrimitives, |javaLongBoxed(), |javaLong()),       javaLongBoxed(),   {i:Integer[1] | j_long($i)})
      ->usesFloat(if($boxPrimitives, |javaDoubleBoxed(), |javaDouble()),     javaDoubleBoxed(), {f:Float[1]   | j_double($f)})
      ->usesJavaPackage('java.math')
      ->addFunctionCoders([
         fc2(divide_Number_1__Number_1__Float_1_,                      {ctx,num1,num2  | $library->j_invoke('divide', [$num1, $num2], javaDouble())}),
         fc3(divide_Decimal_1__Decimal_1__Integer_1__Decimal_1_,       {ctx,num1,num2,num3 | $num1->j_invoke('divide', [$num2, $num3->j_box()->j_invoke('intValue', []), javaRoundingMode()->j_field('HALF_UP')], javaBigDecimal())}),         

         fc1(minus_Number_MANY__Number_1_,                             {ctx,collection | $library->j_invoke('minus', $collection, javaNumber())}),
         fc1(minus_Decimal_MANY__Decimal_1_,                           {ctx,collection | if($ctx.params->at(0).multiplicity == PureOne, |$collection->j_invoke('negate', []), |$library->j_invoke('minus', $collection, javaNumber()))}),
         fc1(minus_Integer_MANY__Integer_1_,                           {ctx,collection | if($ctx.params->at(0).multiplicity == PureOne, |$collection->j_minus(), |$library->j_invoke('minus', $collection, javaNumber()))}),
         fc1(minus_Float_MANY__Float_1_,                               {ctx,collection | if($ctx.params->at(0).multiplicity == PureOne, |$collection->j_minus(), |$library->j_invoke('minus', $collection, javaNumber()))}),

         fc1(plus_Decimal_MANY__Decimal_1_,                            {ctx,collection | maybeReduce($ctx, $collection, bigDecimalZero(), $library->j_methodReference('decimalPlus', reduceFT(javaBigDecimal())))}),
         fc1(plus_Integer_MANY__Integer_1_,                            {ctx,collection | maybeReduce($ctx, $collection, j_long(0),        $library->j_methodReference('integerPlus', reduceFT(javaLong())))}),
         fc1(plus_Float_MANY__Float_1_,                                {ctx,collection | maybeReduce($ctx, $collection, j_double(0),      $library->j_methodReference('floatPlus',   reduceFT(javaDouble())))}),
         fc1(plus_Number_MANY__Number_1_,                              {ctx,collection | maybeReduce($ctx, $collection, j_long(0),        $library->j_methodReference('numberPlus',  reduceFT(javaNumber())))}),
                          
         fc1(times_Integer_MANY__Integer_1_,                           {ctx,collection | maybeReduce($ctx, $collection, j_long(1),       $library->j_methodReference('integerMultiply', reduceFT(javaLong())))}),
         fc1(times_Float_MANY__Float_1_,                               {ctx,collection | maybeReduce($ctx, $collection, j_double(1),     $library->j_methodReference('floatMultiply',   reduceFT(javaDouble())))}),
         fc1(times_Number_MANY__Number_1_,                             {ctx,collection | maybeReduce($ctx, $collection, j_long(1),       $library->j_methodReference('numberMultiply',  reduceFT(javaNumber())))}),
         fc1(times_Decimal_MANY__Decimal_1_,                           {ctx,collection | maybeReduce($ctx, $collection, bigDecimalOne(), $library->j_methodReference('decimalMultiply', reduceFT(javaBigDecimal())))}),

         fc1(range_Integer_1__Integer_MANY_,                           {ctx,stop                     | javaLongStream()->j_invoke('range', [j_long(0), $stop])->j_invoke('boxed', [])}),
         fc2(range_Integer_1__Integer_1__Integer_MANY_,                {ctx,start,stop               | javaLongStream()->j_invoke('range', [$start, $stop])->j_invoke('boxed', [])}),
         fc3(range_Integer_1__Integer_1__Integer_1__Integer_MANY_,     {ctx,start,stop,step          | $library->j_invoke('range', [$start, $stop, $step], javaStream(javaLongBoxed()))})
      ]);

   $conventions->registerLibrary($lib);
}

function <<access.private>> meta::external::language::java::generation::grammar::math::bigDecimalZero() : Code[1]
{
   javaBigDecimal()->j_field('ZERO', javaBigDecimal());
}

function meta::external::language::java::generation::grammar::math::reduceFT(type:meta::external::language::java::metamodel::Type[1]): meta::external::language::java::metamodel::Type[1]
{
   javaFunctionType([$type, $type], $type);
}

function meta::external::language::java::generation::grammar::math::maybeReduce(ctx:FuncCoderContext[1], collection:Code[1], zero:Code[1], accumulator:Code[1]) : Code[1]
{
   if($collection.type->isJavaList(),
      | $collection->j_streamOf()->js_reduce($zero, $accumulator),
      | $collection
   );
}

function <<access.private>> meta::external::language::java::generation::grammar::math::bigDecimalOne() : Code[1]
{
   javaBigDecimal()->j_field('ONE', javaBigDecimal());
}