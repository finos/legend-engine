// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::hash::*;
import meta::external::language::java::factory::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::serialization::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::external::language::java::generation::grammar::string::*;

function meta::external::language::java::generation::grammar::string::registerStringLibrary(conventions: Conventions[1]): Conventions[1]
{   
   let library  = $conventions->className(Library);
   
   let lib = newConventionsLibrary()
      ->usesString(javaString(), javaString(), {s:String[1] | j_string($s)})
      ->addFunctionCoders([
         fc4(joinStrings_String_MANY__String_1__String_1__String_1__String_1_,   {ctx,strs,pre,sep,post       | $pre->j_plus($strs->j_streamOf()->js_joining($sep))->j_plus($post)}),
         
         fc1(plus_String_MANY__String_1_,                                          {ctx,strs                    | $strs->j_streamOf()->js_joining()})
      ]);

   $conventions->registerLibrary($lib);
}