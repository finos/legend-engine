// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::generation::essential::*;
import meta::external::language::java::factory::*;

Class meta::pure::executionPlan::platformBinding::legendJava::Library {}
Class meta::pure::executionPlan::platformBinding::legendJava::PureDate {}


function meta::external::language::java::generation::essential::javaDurationUnit():meta::external::language::java::metamodel::Class[1]
{
   javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit')
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit'), 'valueOf', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaArray(javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit')), 'values', []));
}


function meta::external::language::java::generation::essential::javaDayOfWeek():meta::external::language::java::metamodel::Class[1]
{
   javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek')
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek'), 'valueOf', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaArray(javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek')), 'values', []));
}

function meta::external::language::java::generation::essential::javaPureDate():meta::external::language::java::metamodel::Class[1]
{
    javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate')
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'addDays', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'addHours', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'addMicroseconds', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'addMilliseconds', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'addMinutes', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'addMonths', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'addNanoseconds', [javaParam(javaLong(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'addSeconds', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'addSubseconds', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'addWeeks', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'addYears', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'adjustSubseconds', [javaParam(javaString(), 'p0'), javaParam(javaBoolean(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'appendTwoDigitInt', [javaParam(javaAppendable(), 'p0'), javaParam(javaInt(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'appendZeroPaddedInt', [javaParam(javaAppendable(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'clone', []))
      ->addMethod(javaMethod('public', javaInt(), 'compareTo', [javaParam(javaClass('org.finos.legend.pure.m4.coreinstance.primitive.date.PureDate'), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'copyValues', [javaParam(javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'p0')]))
      ->addMethod(javaMethod('public', javaLong(), 'dateDifference', [javaParam(javaClass('org.finos.legend.pure.m4.coreinstance.primitive.date.PureDate'), 'p0'), javaParam(javaString(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'decrementSubsecond', [javaParam(javaString(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'equals', [javaParam(javaObject(), 'p0')]))
      ->addMethod(javaMethod('public', javaInt(), 'findNonDigit', [javaParam(javaString(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'format', [javaParam(javaAppendable(), 'p0'), javaParam(javaString(), 'p1')]))
      ->addMethod(javaMethod('public', javaString(), 'format', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaString(), 'formatDate', [javaParam(javaDate(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'fromCalendar', [javaParam(javaGregorianCalendar(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'fromCalendar', [javaParam(javaGregorianCalendar(), 'p0'), javaParam(javaInt(), 'p1')]))
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'fromCalendar', [javaParam(javaGregorianCalendar(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaTypeVar('T'), 'p2')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'fromDate', [javaParam(javaDate(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'fromSQLDate', [javaParam(javaSqlDate(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'fromSQLTimestamp', [javaParam(javaSqlTimestamp(), 'p0')]))
      ->addMethod(javaMethod('public', javaGregorianCalendar(), 'getCalendar', []))
      ->addMethod(javaMethod('public', javaInt(), 'getCharCountFrom', [javaParam(javaChar(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaInt(), 'p2')]))
      ->addMethod(javaMethod('public', javaInt(), 'getDay', []))
      ->addMethod(javaMethod('public', javaInt(), 'getHour', []))
      ->addMethod(javaMethod('public', javaInt(), 'getMaxDayOfMonth', [javaParam(javaInt(), 'p0'), javaParam(javaInt(), 'p1')]))
      ->addMethod(javaMethod('public', javaInt(), 'getMinute', []))
      ->addMethod(javaMethod('public', javaInt(), 'getMonth', []))
      ->addMethod(javaMethod('public', javaInt(), 'getQuarter', []))
      ->addMethod(javaMethod('public', javaInt(), 'getSecond', []))
      ->addMethod(javaMethod('public', javaString(), 'getSubsecond', []))
      ->addMethod(javaMethod('public', javaInt(), 'getYear', []))
      ->addMethod(javaMethod('public', javaInt(), 'getYearDays', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'hasDay', []))
      ->addMethod(javaMethod('public', javaBoolean(), 'hasHour', []))
      ->addMethod(javaMethod('public', javaBoolean(), 'hasMinute', []))
      ->addMethod(javaMethod('public', javaBoolean(), 'hasMonth', []))
      ->addMethod(javaMethod('public', javaBoolean(), 'hasSecond', []))
      ->addMethod(javaMethod('public', javaBoolean(), 'hasSubsecond', []))
      ->addMethod(javaMethod('public', javaInt(), 'hashCode', []))
      ->addMethod(javaMethod('public', javaVoid(), 'incrementDay', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'incrementHour', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'incrementMinute', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'incrementMonth', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'incrementSecond', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'incrementSubsecond', [javaParam(javaString(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'incrementYear', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'isDigit', [javaParam(javaChar(), 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'isLeapYear', []))
      ->addMethod(javaMethod('public', javaBoolean(), 'isLeapYear', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'newPureDate', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'newPureDate', [javaParam(javaInt(), 'p0'), javaParam(javaInt(), 'p1')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'newPureDate', [javaParam(javaInt(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'newPureDate', [javaParam(javaInt(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2'), javaParam(javaInt(), 'p3')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'newPureDate', [javaParam(javaInt(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2'), javaParam(javaInt(), 'p3'), javaParam(javaInt(), 'p4')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'newPureDate', [javaParam(javaInt(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2'), javaParam(javaInt(), 'p3'), javaParam(javaInt(), 'p4'), javaParam(javaInt(), 'p5')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'newPureDate', [javaParam(javaInt(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2'), javaParam(javaInt(), 'p3'), javaParam(javaInt(), 'p4'), javaParam(javaInt(), 'p5'), javaParam(javaString(), 'p6')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'newPureDate', [javaParam(javaInt(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2'), javaParam(javaInt(), 'p3'), javaParam(javaInt(), 'p4'), javaParam(javaNumber(), 'p5')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'parsePureDate', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'parsePureDate', [javaParam(javaString(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'setDay', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'setHour', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'setMinute', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'setMonth', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'setSecond', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'setSubsecond', [javaParam(javaString(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'setTimeZone', [javaParam(javaString(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'setYear', [javaParam(javaInt(), 'p0')]))
      ->addMethod(javaMethod('public', javaClass('public', 'org.finos.legend.engine.plan.dependencies.domain.date.PureDate'), 'subtractSubseconds', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'throwInvalidDateString', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaVoid(), 'throwInvalidDateString', [javaParam(javaString(), 'p0'), javaParam(javaInt(), 'p1'), javaParam(javaInt(), 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'throwInvalidDateString', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaInt(), 'p2'), javaParam(javaInt(), 'p3')]))
      ->addMethod(javaMethod('public', javaString(), 'toString', []))
      ->addMethod(javaMethod('public', javaVoid(), 'writeString', [javaParam(javaAppendable(), 'p0')]));

}


function meta::external::language::java::generation::essential::javaLibrary():meta::external::language::java::metamodel::Class[1]
{
   let jPureDate = javaPureDate();
   let jDurationUnit = javaDurationUnit();
   let jDayOfWeek = javaDayOfWeek();
   javaClass('public', 'org.finos.legend.engine.plan.dependencies.util.Library')
      ->addMethod(javaMethod('public', javaNumber(), 'abs', [javaParam(javaNumber(), 'p0')]))
      ->addMethod(javaMethod('public', javaBiFunction(javaTypeVar('U'), javaWildcardType([javaTypeVar('T')], [javaTypeVar('T')]), javaTypeVar('U')), 'adaptPureAccumulator', [javaParam(javaBiFunction(javaWildcardType([javaTypeVar('T')], [javaTypeVar('T')]), javaTypeVar('U'), javaTypeVar('U')), 'p0')]))
      ->addMethod(javaMethod('public', javaComparator(javaTypeVar('T')), 'adaptPureComparator', [javaParam(javaBiFunction(javaTypeVar('T'), javaTypeVar('T'), javaLongBoxed()), 'p0')]))
      ->addMethod(javaMethod('public', $jPureDate, 'adjustDate', [javaParam($jPureDate, 'p0'), javaParam(javaLong(), 'p1'), javaParam($jDurationUnit, 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'appendFloatString', [javaParam(javaStringBuilder(), 'p0'), javaParam(javaString(), 'p1')]))
      ->addMethod(javaMethod('public', javaVoid(), 'appendFloatString', [javaParam(javaStringBuilder(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaInt(), 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'appendIntegerString', [javaParam(javaStringBuilder(), 'p0'), javaParam(javaString(), 'p1'), javaParam(javaInt(), 'p2')]))
      ->addMethod(javaMethod('public', javaVoid(), 'appendZeros', [javaParam(javaStringBuilder(), 'p0'), javaParam(javaInt(), 'p1')]))
      ->addMethod(javaMethod('public', javaDouble(), 'average', [javaParam(javaList(javaNumber()), 'p0')]))
      ->addMethod(javaMethod('public', javaLong(), 'ceiling', [javaParam(javaNumber(), 'p0')]))
      ->addMethod(javaMethod('public', javaList(javaString()), 'chunk', [javaParam(javaString(), 'p0'), javaParam(javaInt(), 'p1')]))
      ->addMethod(javaMethod('public', javaDouble(), 'coTangent', [javaParam(javaDouble(), 'p0')]))
      ->addMethod(javaMethod('public', javaInt(), 'compareInt', [javaParam(javaTypeVar('T'), 'p0'), javaParam(javaTypeVar('T'), 'p1')]))
      ->addMethod(javaMethod('public', javaInt(), 'compareUnmatchedNumbers', [javaParam(javaNumber(), 'p0'), javaParam(javaNumber(), 'p1')]))
      ->addMethod(javaMethod('public', javaLong(), 'dateDiff', [javaParam($jPureDate, 'p0'), javaParam($jPureDate, 'p1'), javaParam($jDurationUnit, 'p2')]))
      ->addMethod(javaMethod('public', $jPureDate, 'datePart', [javaParam($jPureDate, 'p0')]))
      ->addMethod(javaMethod('public', javaLong(), 'dayOfMonth', [javaParam($jPureDate, 'p0')]))
      ->addMethod(javaMethod('public', javaLong(), 'dayOfWeekNumber', [javaParam($jPureDate, 'p0')]))
      ->addMethod(javaMethod('public', javaLong(), 'dayOfYear', [javaParam($jPureDate, 'p0')]))
      ->addMethod(javaMethod('public', javaBigDecimal(), 'decimalMultiply', [javaParam(javaBigDecimal(), 'p0'), javaParam(javaBigDecimal(), 'p1')]))
      ->addMethod(javaMethod('public', javaBigDecimal(), 'decimalPlus', [javaParam(javaBigDecimal(), 'p0'), javaParam(javaBigDecimal(), 'p1')]))
      ->addMethod(javaMethod('public', javaPredicate(javaTypeVar('V')), 'distinctByEql', [javaParam(javaBiPredicate(javaTypeVar('V'), javaTypeVar('V')), 'p0')]))
      ->addMethod(javaMethod('public', javaPredicate(javaTypeVar('T')), 'distinctByKey', [javaParam(javaFunction(javaTypeVar('T'), javaWildcard()), 'p0')]))
      ->addMethod(javaMethod('public', javaDouble(), 'divide', [javaParam(javaNumber(), 'p0'), javaParam(javaNumber(), 'p1')]))
      ->addMethod(javaMethod('public', javaInt(), 'findEndOfDateFormatString', [javaParam(javaString(), 'p0'), javaParam(javaInt(), 'p1')]))
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'first', [javaParam(javaList(javaTypeVar('T')), 'p0')]))
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'first', [javaParam(javaTypeVar('T'), 'p0')]))
      ->addMethod(javaMethod('public', $jPureDate, 'firstDayOfMonth', [javaParam($jPureDate, 'p0')]))
      ->addMethod(javaMethod('public', $jPureDate, 'firstDayOfQuarter', [javaParam($jPureDate, 'p0')]))
      ->addMethod(javaMethod('public', $jPureDate, 'firstDayOfThisMonth', []))
      ->addMethod(javaMethod('public', $jPureDate, 'firstDayOfThisQuarter', []))
      ->addMethod(javaMethod('public', $jPureDate, 'firstDayOfThisYear', []))
      ->addMethod(javaMethod('public', $jPureDate, 'firstDayOfWeek', [javaParam($jPureDate, 'p0')]))
      ->addMethod(javaMethod('public', $jPureDate, 'firstDayOfYear', [javaParam($jPureDate, 'p0')]))
      ->addMethod(javaMethod('public', $jPureDate, 'firstHourOfDay', [javaParam($jPureDate, 'p0')]))
      ->addMethod(javaMethod('public', $jPureDate, 'firstMinuteOfHour', [javaParam($jPureDate, 'p0')]))
      ->addMethod(javaMethod('public', $jPureDate, 'firstSecondOfMinute', [javaParam($jPureDate, 'p0')]))
      ->addMethod(javaMethod('public', $jPureDate, 'firstMillisecondOfSecond', [javaParam($jPureDate, 'p0')]))
      ->addMethod(javaMethod('public', javaDouble(), 'floatMultiply', [javaParam(javaDouble(), 'p0'), javaParam(javaDouble(), 'p1')]))
      ->addMethod(javaMethod('public', javaDouble(), 'floatPlus', [javaParam(javaDouble(), 'p0'), javaParam(javaDouble(), 'p1')]))
      ->addMethod(javaMethod('public', javaLong(), 'floor', [javaParam(javaNumber(), 'p0')]))
      ->addMethod(javaMethod('public', javaTypeVar('U'), 'fold', [javaParam(javaList(javaTypeVar('T')), 'p0'), javaParam(javaBiFunction(javaWildcardType([javaTypeVar('T')], [javaTypeVar('T')]), javaTypeVar('U'), javaTypeVar('U')), 'p1'), javaParam(javaTypeVar('U'), 'p2')]))
      ->addMethod(javaMethod('public', javaString(), 'format', [javaParam(javaString(), 'p0'), javaParam(javaList(javaObject()), 'p1')]))
      ->addMethod(javaMethod('public', javaInt(), 'getSignCount', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaInt(), 'getZeroCountFrom', [javaParam(javaString(), 'p0'), javaParam(javaInt(), 'p1')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'greaterThan', [javaParam($jPureDate, 'p0'), javaParam($jPureDate, 'p1')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'greaterThan', [javaParam(javaBooleanBoxed(), 'p0'), javaParam(javaBooleanBoxed(), 'p1')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'greaterThanEqual', [javaParam($jPureDate, 'p0'), javaParam($jPureDate, 'p1')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'greaterThanEqual', [javaParam(javaBooleanBoxed(), 'p0'), javaParam(javaBooleanBoxed(), 'p1')]))
      ->addMethod(javaMethod('public', javaList(javaTypeVar('T')), 'init', [javaParam(javaList(javaTypeVar('T')), 'p0')]))
      ->addMethod(javaMethod('public', javaLong(), 'integerMultiply', [javaParam(javaLong(), 'p0'), javaParam(javaLong(), 'p1')]))
      ->addMethod(javaMethod('public', javaLong(), 'integerPlus', [javaParam(javaLong(), 'p0'), javaParam(javaLong(), 'p1')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'isSign', [javaParam(javaChar(), 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'isSigned', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'isSpecialNumber', [javaParam(javaNumber(), 'p0')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'lessThan', [javaParam($jPureDate, 'p0'), javaParam($jPureDate, 'p1')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'lessThanEqual', [javaParam($jPureDate, 'p0'), javaParam($jPureDate, 'p1')]))
      ->addMethod(javaMethod('public', javaTypeVar('R'), 'match', [javaParam(javaObject(), 'p0'), javaParam(javaList(javaPredicate(javaObject())), 'p1'), javaParam(javaList(javaFunction(javaObject(), javaTypeVar('R'))), 'p2')]))
      ->addMethod(javaMethod('public', javaNumber(), 'max', [javaParam(javaNumber(), 'p0'), javaParam(javaNumber(), 'p1')]))
      ->addMethod(javaMethod('public', javaNumber(), 'min', [javaParam(javaNumber(), 'p0'), javaParam(javaNumber(), 'p1')]))
      ->addMethod(javaMethod('public', javaNumber(), 'minus', [javaParam(javaList(javaNumber()), 'p0')]))
      ->addMethod(javaMethod('public', javaNumber(), 'minus', [javaParam(javaNumber(), 'p0')]))
      ->addMethod(javaMethod('public', javaNumber(), 'minus', [javaParam(javaNumber(), 'p0'), javaParam(javaNumber(), 'p1')]))
      ->addMethod(javaMethod('public', $jPureDate, 'mostRecentDayOfWeek', [javaParam($jDayOfWeek, 'p0')]))
      ->addMethod(javaMethod('public', $jPureDate, 'mostRecentDayOfWeek', [javaParam($jPureDate, 'p0'), javaParam($jDayOfWeek, 'p1')]))
      ->addMethod(javaMethod('public', javaNumber(), 'numberMultiply', [javaParam(javaNumber(), 'p0'), javaParam(javaNumber(), 'p1')]))
      ->addMethod(javaMethod('public', javaNumber(), 'numberPlus', [javaParam(javaNumber(), 'p0'), javaParam(javaNumber(), 'p1')]))
      ->addMethod(javaMethod('public', $jPureDate, 'previousDayOfWeek', [javaParam($jDayOfWeek, 'p0')]))
      ->addMethod(javaMethod('public', $jPureDate, 'previousDayOfWeek', [javaParam($jPureDate, 'p0'), javaParam($jDayOfWeek, 'p1')]))
      ->addMethod(javaMethod('public', javaBoolean(), 'pureAssert', [javaParam(javaBoolean(), 'p0'), javaParam(javaSupplier(javaString()), 'p1')]))
      ->addMethod(javaMethod('public', javaString(), 'pureToString', [javaParam(javaObject(), 'p0')]))
      ->addMethod(javaMethod('public', javaStream(javaLongBoxed()), 'range', [javaParam(javaLong(), 'p0'), javaParam(javaLong(), 'p1'), javaParam(javaLong(), 'p2')]))
      ->addMethod(javaMethod('public', javaNumber(), 'rem', [javaParam(javaNumber(), 'p0'), javaParam(javaNumber(), 'p1')]))
      ->addMethod(javaMethod('public', javaList(javaTypeVar('T')), 'removeDuplicates', [javaParam(javaList(javaTypeVar('T')), 'p0'), javaParam(javaFunction(javaTypeVar('T'), javaTypeVar('V')), 'p1'), javaParam(javaBiPredicate(javaTypeVar('V'), javaTypeVar('V')), 'p2')]))
      ->addMethod(javaMethod('public', javaBigDecimal(), 'round', [javaParam(javaBigDecimal(), 'p0'), javaParam(javaLong(), 'p1')]))
      ->addMethod(javaMethod('public', javaDoubleBoxed(), 'round', [javaParam(javaDoubleBoxed(), 'p0'), javaParam(javaLong(), 'p1')]))
      ->addMethod(javaMethod('public', javaLong(), 'round', [javaParam(javaNumber(), 'p0')]))
      ->addMethod(javaMethod('public', javaNumber(), 'round', [javaParam(javaNumber(), 'p0'), javaParam(javaLong(), 'p1')]))
      ->addMethod(javaMethod('public', javaInt(), 'safeCompare', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1')]))
      ->addMethod(javaMethod('public', javaInt(), 'safeCompareNumbers', [javaParam(javaNumber(), 'p0'), javaParam(javaNumber(), 'p1')]))
      ->addMethod(javaMethod('public', javaList(javaTypeVar('T')), 'sort', [javaParam(javaList(javaTypeVar('T')), 'p0')]))
      ->addMethod(javaMethod('public', javaList(javaTypeVar('T')), 'sort', [javaParam(javaList(javaTypeVar('T')), 'p0'), javaParam(javaComparator(javaWildcardType([javaTypeVar('T')], [javaTypeVar('T')])), 'p1')]))
      ->addMethod(javaMethod('public', javaList(javaString()), 'split', [javaParam(javaString(), 'p0'), javaParam(javaString(), 'p1')]))
      ->addMethod(javaMethod('public', javaBigDecimal(), 'toBigDecimal', [javaParam(javaNumber(), 'p0')]))
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'toOne', [javaParam(javaList(javaTypeVar('T')), 'p0')]))
      ->addMethod(javaMethod('public', javaTypeVar('T'), 'toOne', [javaParam(javaTypeVar('T'), 'p0')]))
      ->addMethod(javaMethod('public', javaList(javaTypeVar('T')), 'toOneMany', [javaParam(javaList(javaTypeVar('T')), 'p0')]))
      ->addMethod(javaMethod('public', javaList(javaTypeVar('T')), 'toOneMany', [javaParam(javaTypeVar('T'), 'p0')]))
      ->addMethod(javaMethod('public', javaString(), 'toRepresentation', [javaParam(javaObject(), 'p0')]))
      ->addMethod(javaMethod('public', javaString(), 'toUpperFirstCharacter', [javaParam(javaString(), 'p0')]))
      ->addMethod(javaMethod('public', $jPureDate, 'today', []))
      ->addMethod(javaMethod('public', javaDouble(), 'variance', [javaParam(javaArray(javaDouble()), 'p0'), javaParam(javaBoolean(), 'p1')]))
      ->addMethod(javaMethod('public', javaNumber(), 'variance', [javaParam(javaList(javaNumber()), 'p0'), javaParam(javaBoolean(), 'p1')]))
      ->addMethod(javaMethod('public', javaLong(), 'weekOfYear', [javaParam($jPureDate, 'p0')]));
}


