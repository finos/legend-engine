// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::protobuf::metamodel::*;
import meta::pure::generation::*;
import meta::pure::generation::metamodel::*;
import meta::external::format::protobuf::generation::*;

function meta::external::format::protobuf::generation::transform(input:ProtobufConfig[1]):ProtobufOutput[*]
{
   meta::legend::test::mayExecuteLegendTest(
       {clientVersion, serverVersion, serializationKind, host, port|
                   let fStr = 'meta::protocols::pure::'+$clientVersion+'::invocation::generation::protobuf::legendGenerateProtobuf_ProtobufConfig_1__String_1__Integer_1__String_1__ProtobufOutput_MANY_';
                   let xf = $fStr->pathToElement()->cast(@Function<{ProtobufConfig[1], String[1], Integer[1], String[1]->GenerationOutput[*]}>);
                   $xf->evaluate([$input, $host, $port, $serverVersion]->map(v|list($v)))->toOneMany()->cast(@ProtobufOutput);},
       |meta::external::format::protobuf::generation::internal_transform($input)
    )->toOneMany();  
}

function <<Generation.Transformation>> meta::external::format::protobuf::generation::internal_transform(input:ProtobufConfig[1]):ProtobufOutput[*]
{
   assertFalse($input.class->isEmpty(),'a class must be provided to protobuf transform');
   let possibleElement = forgivingPathToElement($input.class->toOne());
   assertNotEmpty($possibleElement, | $input.class->toOne() + ' was not found');
   meta::external::format::protobuf::generation::generateProtobufFromPure($input, $possibleElement->toOne()->cast(@Class<Any>));
}

function meta::external::format::protobuf::generation::generateProtobufFromPureWithScope(config:ProtobufConfig[1]):ProtobufOutput[*]
{   
   $config.scopeElements->filter(e| !$e->instanceOf(Package))->map(e|assert($e->instanceOf(Class),' Protobuf generation of ' + $e->type().name->toOne()+ ' is not currently supported. Tried to generate Protobuf for '+ $e->elementToPath()) ;);
   let classElements = $config.allPackageScopeElements()->filter(p|$p->instanceOf(Class))->cast(@Class<Any>);
   $config->meta::external::format::protobuf::generation::generateProtobufFromPure($classElements->toOneMany());
}

function meta::external::format::protobuf::generation::generateProtobufFromPure(config:ProtobufConfig[1], class: Class<Any>[1..*]):ProtobufOutput[*]
{
  let options = configToOptions($config);
  $class->classToMessage($options)->map(s|
      let content = $s->meta::external::format::protobuf::serialization::toString();
      let fileName = if($s.package->isEmpty(), | $class.name->toOne() + '.proto', | $s.package->toOne()->protoPackageToFileName());
      ^ProtobufOutput(content=$content,fileName=$fileName, format = 'proto');
    );
}

function meta::external::format::protobuf::generation::configToOptions(config:ProtobufConfig[1]):Option[*]
{
  let properties = ProtobufConfig.properties->filter( p | $p.name != 'customOptions');
  $properties->map( p | let res = $p->eval($config);
                        if( !$res->isEmpty() ,| ^Option(name=$p.name->toOne()->splitOnCamelCase()->toLowerFirstCharacter()->joinStrings('_'), 
                                                        value=$res->toOne()->toOptionValue()), | []);
                        )->concatenate($config.customOptions->map(o | ^Option(name=$o.name, value=$o.value->toOptionValue())));
}

function meta::external::format::protobuf::generation::toOptionValue(any:Any[1]):Literal[1]
{
  $any->match([
                s:String[1] | ^StringLiteral(value=$s),
                i:Integer[1] | ^IntLiteral(value=$i),
                f:Float[1] | ^FloatLiteral(value=$f),
                b:Boolean[1] | ^BoolLiteral(value=$b),
                e:meta::pure::metamodel::type::Enum[1] | ^IdentifierLiteral(value=$e.name)
              ])
}

function meta::external::format::protobuf::generation::elementToProtoPackage(e:Type[1]):String[1]
{
  $e->cast(@PackageableElement)->elementToProtoPackage();
}

function meta::external::format::protobuf::generation::elementToProtoPackage(e:PackageableElement[1]):String[1]
{
  $e.package->toOne()->elementToPath('.')
}

function meta::external::format::protobuf::generation::protoPackageToFileName(p:String[1]):String[1]
{
  $p->replace('.', '_') + '.proto'
}

function meta::external::format::protobuf::generation::classToMessage(class:Class<Any>[1]):ProtoFile[*]
{
  meta::external::format::protobuf::generation::classToMessage([$class], [])
}

function meta::external::format::protobuf::generation::classToMessage(class:Class<Any>[1..*], options:Option[*]):ProtoFile[*]
{
   let allClasses = $class->map(c | $c->scanTypes([]))->removeDuplicates()->remove(Any);
   let typesMap = seedPureTypeToProtoBufTypeMapping($allClasses);
   let classesByPackage = $allClasses->groupBy(c | $c->elementToProtoPackage());
   
   $classesByPackage->keyValues()->map(p | 
      let thePackage = $p.first;
      let packageClasses = $p.second.values;

      let messages = $packageClasses
        ->filter(c|$c->instanceOf(Class))->cast(@Class<Any>)
        ->map(c|
            //Collect any abstract base classes
            let oneOfs = $c->filter(c | ($c->allProperties()->isEmpty() || $c->isAbstract()) && $c->allSpecializations()->isNotEmpty())
                                      ->removeDuplicates()
                                      ->map(c | let subClasses = $c->allSpecializations()->filter(sc | $sc != $c);
                                                ^OneOf(
                                                  name=$c.name->toOne()->toLower(),
                                                  field=$subClasses->map(s | ^Field(name=$s.name->toOne()->meta::pure::functions::string::splitOnCamelCase()->joinStrings('_')->toLower(), 
                                                                                    type=$typesMap->get($s)->toOne(),
                                                                                    number=$subClasses->indexOf($s)+1,
                                                                                    repeated=false
                                                                                    ))
                                                ););
            ^Message
            (
              name = $c.name->toOne(),
              content = $oneOfs->concatenate($c.properties->map(p|$p->propertyToField($c.properties->indexOf($p)+1, $typesMap)))
            );
        );
        
      let enumerations = $packageClasses
              ->filter(c|$c->instanceOf(meta::pure::metamodel::type::Enumeration))->cast(@meta::pure::metamodel::type::Enumeration<Any>)
              ->map(e|
                    ^meta::external::format::protobuf::metamodel::Enumeration
                    (
                        name = $e->enumName(),
                        values = $e->enumValues()->map(v|^meta::external::format::protobuf::metamodel::Enum(constant=$v->toString(), constantNumber=$e->enumValues()->indexOf($v)))
                    )
                );

      let topLevelDefs = $messages->concatenate($enumerations);      

      //If this is a complex type that is not in the current package, we need to import it      
      let imports = $messages.content
        ->map(m| $m->match([
          f:Field[1]|$f.type,
          o:OneOf[1]|$o.field.type]))
        ->filter(t|$t->instanceOf(MessagePtr))->cast(@MessagePtr)
        ->filter(m | $m.package != $thePackage)
        ->map(p| if ( $p.package == 'google.protobuf', | 'google/protobuf/' + $p.name->toLower() + '.proto'
                                                                    , | $p.package->protoPackageToFileName()))
        ->removeDuplicates()->sort()->map(s | ^ProtoImport(name=$s));
        
      ^ProtoFile(syntax=Syntax.proto3, package=$thePackage, 
                 topLevelDefs=$topLevelDefs->sortBy(s|$s->match([m:Message[1]|$m.name,
                                                                 e:meta::external::format::protobuf::metamodel::Enumeration[1]|$e.name,
                                                                 s:Service[1]|$s.name])),
                 imports=$imports,
                 options=$options);
   );
}

function meta::external::format::protobuf::generation::propertyToField(property:Property<Nil,Any|*>[1], index:Integer[1], typesMap:Map<Type, ProtoBufType>[1]):Field[1]
{
   ^Field
   (
      name = $property.name->toOne()->meta::pure::functions::string::splitOnCamelCase()->joinStrings('_')->toLower(),
      type = if($property.genericType.rawType == Map,|^MapType(keyType=$typesMap->get($property.genericType.typeArguments->at(0).rawType->toOne())->toOne()->cast(@ScalarType),
                                                                         valueType=$typesMap->get($property.genericType.typeArguments->at(1).rawType->toOne())->toOne())
                                                              ,| $typesMap->get($property.genericType.rawType->toOne())->toOne()),
      number = $index,
      repeated = !$property.multiplicity->hasUpperBound() || ($property.multiplicity.upperBound->toOne().value > 1)
   );
}

function <<access.private>> meta::external::format::protobuf::generation::seedPureTypeToProtoBufTypeMapping(types:Type[*]):Map<Type, ProtoBufType>[1]
{
   newMap(
      [
         pair(Integer, ^meta::external::format::protobuf::metamodel::Int64()),
         pair(Float, ^meta::external::format::protobuf::metamodel::Double()),
         pair(String, ^meta::external::format::protobuf::metamodel::String()),
         pair(Boolean, ^meta::external::format::protobuf::metamodel::Bool()),
         pair(DateTime , ^meta::external::format::protobuf::metamodel::MessagePtr(package='google.protobuf', name='Timestamp')),
         pair(Date , ^meta::external::format::protobuf::metamodel::MessagePtr(package='google.protobuf', name='Timestamp')),
         pair(StrictDate , ^meta::external::format::protobuf::metamodel::MessagePtr(package='google.protobuf', name='Timestamp')),
         pair(Number , ^meta::external::format::protobuf::metamodel::Double()),
         pair(Any, ^meta::external::format::protobuf::metamodel::MessagePtr(package='google.protobuf', name='Any'))
      ]
      ->concatenate
      (
         $types->filter(c|$c->instanceOf(Class))->map(c|pair($c, ^meta::external::format::protobuf::metamodel::MessagePtr(package=$c->elementToProtoPackage(), name=$c.name->toOne())))
      )
      ->concatenate
      (
         $types->filter(c|$c->instanceOf(meta::pure::metamodel::type::Enumeration))->map(c|pair($c, ^meta::external::format::protobuf::metamodel::EnumPtr(package=$c->elementToProtoPackage(), name=$c.name->toOne())))
      )
   )
}


function meta::external::format::protobuf::generation::scanTypes(t:Type[1], processed:Type[*]):Type[*]
{
   if (!$processed->contains($t),
       |$t->concatenate(if($t->instanceOf(Class),
                         |$t->cast(@Class<Any>)->allProperties().genericType.rawType->distinct()->concatenate($t->cast(@Class<Any>)->meta::pure::functions::meta::findAllSpecializations())->filter(t|($t->instanceOf(Class) || $t->instanceOf(meta::pure::metamodel::type::Enumeration)) && $t != Any && $t != Map)->map(c|$c->meta::external::format::protobuf::generation::scanTypes($processed->concatenate($t)))->distinct(),
                         |[]
                       )),
       |[]
   );
}