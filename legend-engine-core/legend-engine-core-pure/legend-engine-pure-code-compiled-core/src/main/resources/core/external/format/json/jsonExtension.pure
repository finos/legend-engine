// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::json::*;

function meta::json::fromJsonDeprecated<T>(string:String[1], clazz:Class<T>[1]):T[1]
{
    fromJsonDeprecated($string, $clazz, ^JSONDeserializationConfig(typeKeyName='@type', failOnUnknownProperties=false));
}

function meta::json::fromJson<T>(string:String[1], clazz:Class<T>[1]):T[1]
{
    fromJson($string, $clazz, ^JSONDeserializationConfig(typeKeyName='@type', failOnUnknownProperties=false));
}

function meta::json::toJsonBeta(instance: Any[*]):String[1]
{
    toJsonBeta($instance, defaultJSONSerializationConfig());
}

function meta::json::defaultJSONSerializationConfig(): JSONSerializationConfig[1]
{
    ^JSONSerializationConfig(typeKeyName='__TYPE', includeType=false, fullyQualifiedTypePath=false, serializeQualifiedProperties=false, serializePackageableElementName=false, removePropertiesWithEmptyValues=false);
}

function meta::json::getValue(json : JSONObject[1], key : String[1]):JSONElement[0..1]
{
   let keyValue = $json.keyValuePairs->filter(p | $p.key.value == $key);
   if ($keyValue == [],|[],|$keyValue->toOne().value);
}
