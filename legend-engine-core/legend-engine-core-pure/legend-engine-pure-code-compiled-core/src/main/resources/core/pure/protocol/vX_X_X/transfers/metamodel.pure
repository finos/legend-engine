// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::pure::metamodel::serialization::grammar::*;
import meta::core::runtime::*;
import meta::pure::metamodel::constraint::*;
import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::*;
import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::model::*;
import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::*;
import meta::protocols::alloy::model::*;
import meta::protocols::alloy::function::*;
import meta::pure::milestoning::*;
import meta::json::*;

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformPackageableElement(packageableElement:PackageableElement[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::PackageableElement[1]
{
   $packageableElement->match([
     class:Class<Any>[1]             | transformClass($class, $extensions),
     assoc:Association[1]            | transformAssociation($assoc, $extensions),
     enum:Enumeration<Any>[1]        | transformEnum($enum),
     meas:Measure[1]                 | transformMeasure($meas, $extensions),
     func:ConcreteFunctionDefinition<Any>[1] | transformFunction($func, $extensions),
     prof:Profile[1]                 | transformProfile($prof, $extensions)
   ])
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformClass(class:Class<Any>[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::type::Class[1]
{
   meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformClass($class, false, $extensions);
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformClass(class:Class<Any>[1], useAppliedFunction:Boolean[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::type::Class[1]
{
   let properties = $class.properties->reverseMilestoningTransforms()->cast(@Property<Nil,Any|*>);
   let qualifiedProperties = $class.qualifiedProperties->reverseMilestoningTransforms()->cast(@QualifiedProperty<Any>);
   let originalMilestonedProperties = $class.originalMilestonedProperties->reverseMilestoningTransforms()->cast(@Property<Nil,Any|*>);

   ^meta::protocols::pure::vX_X_X::metamodel::m3::type::Class
   (
      _type = 'class',
      name = $class.name->toOne(),
      constraints = $class.constraints->map(c|$c->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformConstraint($useAppliedFunction, $extensions)),
      package = if($class.package->isEmpty(),|[],|$class.package->toOne()->elementToPath()),
      superTypes = $class.generalizations->map(g | $g.general.rawType->toOne()->elementToPath()),
      properties = $properties->map(p | $p->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformProperty($extensions)),
      qualifiedProperties = $qualifiedProperties->map(q|$q->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformQualifiedProperty($useAppliedFunction, $extensions)),
      originalMilestonedProperties = $originalMilestonedProperties->map(p | $p->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformProperty($extensions)),
      stereotypes = $class.stereotypes->map(s|$s->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformStereotype()),
      taggedValues = $class.taggedValues->map(t|$t->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformTaggedValue())
   );
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformConstraint(constraint:Constraint[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::constraint::Constraint[1]
{
    meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformConstraint($constraint,false, $extensions);
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformConstraint(constraint:Constraint[1],useAppliedFunction:Boolean[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::constraint::Constraint[1]
{
   ^meta::protocols::pure::vX_X_X::metamodel::m3::constraint::Constraint
   (
      name               = $constraint.name->toOne(),
      functionDefinition = $constraint.functionDefinition->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::transformLambda($useAppliedFunction, $extensions),
      externalId         = $constraint.externalId,
      enforcementLevel   = $constraint.enforcementLevel,
      messageFunction    = $constraint.messageFunction->map(f | let updatedMessageFunc = meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::removeParameters($f);
                                                            $updatedMessageFunc->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::transformLambda($useAppliedFunction, $extensions);)
   );
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::removeParameters(messageFunction:FunctionDefinition<Any>[1]):FunctionDefinition<Any>[1]
{
    let classifierGenericType = $messageFunction.classifierGenericType->toOne();
    let typeArgument = $classifierGenericType.typeArguments->at(0)->toOne();
    let functionType = $typeArgument.rawType->cast(@FunctionType)->toOne();
    let updatedFunctionType = ^$functionType(parameters = []);
    let updatedTypeArgument = ^$typeArgument(rawType = $updatedFunctionType);
    let updatedClassifierGenericType = ^$classifierGenericType(typeArguments = $updatedTypeArgument->concatenate($classifierGenericType.typeArguments->tail()));
    let updatedMessageFunction = ^$messageFunction(classifierGenericType = $updatedClassifierGenericType);
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformAssociation(association:Association[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::relationship::Association[1]
{
   let properties = $association.properties->reverseMilestoningTransforms()->cast(@Property<Nil,Any|*>);
   let qualifiedProperties = $association.qualifiedProperties->reverseMilestoningTransforms()->cast(@QualifiedProperty<Any>);
   let originalMilestonedProperties = $association.originalMilestonedProperties->reverseMilestoningTransforms()->cast(@Property<Nil,Any|*>);

   ^meta::protocols::pure::vX_X_X::metamodel::m3::relationship::Association
   (
      _type = 'association',
      name = $association.name->toOne(),
      package = if($association.package->isEmpty(),|[],|$association.package->toOne()->elementToPath()),
      properties = $properties->map(p | $p->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformProperty($extensions)),
      qualifiedProperties = $qualifiedProperties->map(q|$q->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformQualifiedProperty($extensions)),
      originalMilestonedProperties = $originalMilestonedProperties->map(p | $p->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformProperty($extensions)),
      stereotypes = $association.stereotypes->map(s|$s->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformStereotype()),
      taggedValues = $association.taggedValues->map(t|$t->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformTaggedValue())
   );
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformMeasure(measure:Measure[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::type::Measure[1]
{
   let canonicalUnit = $measure.canonicalUnit;
   let nonCanonicalUnits = $measure.nonCanonicalUnits;

   ^meta::protocols::pure::vX_X_X::metamodel::m3::type::Measure
   (
      _type = 'measure',
      name = $measure.name->toOne(),
      package = if($measure.package->isEmpty(),|[],|$measure.package->toOne()->elementToPath()),
      canonicalUnit = $canonicalUnit->toOne()->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformUnit($extensions),
      nonCanonicalUnits = $nonCanonicalUnits->map(nc | $nc->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformUnit($extensions))
   );
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformUnit(unit:Unit[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::type::Unit[1]
{
   let measure = $unit.measure;
   let conversionFunction = $unit.conversionFunction;

   ^meta::protocols::pure::vX_X_X::metamodel::m3::type::Unit
   (
      name = $unit.name->toOne(),
      measure = $measure->toOne()->elementToPath(),
      conversionFunction = $conversionFunction->toOne()->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::transformLambda($extensions)
   );
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformGenericType(genericType:GenericType[1]):meta::protocols::pure::vX_X_X::metamodel::m3::type::generics::GenericType[1]
{
    let rawType = $genericType.rawType->match([
        rel: meta::pure::metamodel::relation::RelationType<Any>[1] | ^meta::protocols::pure::vX_X_X::metamodel::m3::relation::RelationType
                               (
                                 _type='relationType',
                                 columns=$rel.columns->map(c |
                                        ^meta::protocols::pure::vX_X_X::metamodel::m3::relation::Column
                                        (
                                            name = $c.name->toOne(),
                                            genericType = $c.classifierGenericType.typeArguments->at(1)->transformGenericType(),
                                            multiplicity = $c.classifierGenericType.multiplicityArguments->at(0)->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformMultiplicity()
                                        )
                                    )
                               ),
        type: Type[1] | ^meta::protocols::pure::vX_X_X::metamodel::m3::valuespecification::constant::PackageableType
                        (
                          _type='packageableType',
                          fullPath=$genericType.rawType->toOne()->elementToPath()
                        )
    ]);

    ^meta::protocols::pure::vX_X_X::metamodel::m3::type::generics::GenericType
    (
        rawType = $rawType,
        typeArguments = $genericType.typeArguments->map(ta|$ta->transformGenericType()),
        multiplicityArguments = $genericType.multiplicityArguments->map(ma|$ma->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformMultiplicity()),
        typeVariableValues = $genericType.typeVariableValues->map(x|$x->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::valueSpecification::transformValueSpecification([], ^Map<String, meta::pure::functions::collection::List<Any>>(), true, true, []))
    );
}

function <<access.private>> meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformProperty(property:Property<Nil,Any|*>[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::function::property::Property[1]
{
   ^meta::protocols::pure::vX_X_X::metamodel::m3::function::property::Property
   (
      defaultValue = if($property.defaultValue->isEmpty(),|[],|$property.defaultValue->toOne()->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformDefaultValue($extensions)->toOne()),
      aggregation = meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformAggregation($property.aggregation, $extensions),
      name = $property.name->toOne(),
      multiplicity = $property.multiplicity->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformMultiplicity()->toOne(),
      genericType = transformGenericType($property.genericType),
      stereotypes = $property.stereotypes->map(s|$s->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformStereotype()),
      taggedValues = $property.taggedValues->map(t|$t->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformTaggedValue())
   )
}

function <<access.private>> meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformAggregation(aggKind:AggregationKind[0..1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::function::property::AggregationKind[0..1]
{
  if (
    [
      pair(|$aggKind == AggregationKind.Shared, |meta::protocols::pure::vX_X_X::metamodel::m3::function::property::AggregationKind.SHARED),
      pair(|$aggKind == AggregationKind.Composite, |meta::protocols::pure::vX_X_X::metamodel::m3::function::property::AggregationKind.COMPOSITE),
      pair(|$aggKind == AggregationKind.None, |[])
    ],
    |[];
  )
}

function <<access.private>> meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformQualifiedProperty(qualifiedProperty:QualifiedProperty<Any>[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::function::property::QualifiedProperty[1]
{
   meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformQualifiedProperty($qualifiedProperty,false, $extensions);
}

function <<access.private>> meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformQualifiedProperty(qualifiedProperty:QualifiedProperty<Any>[1], useAppliedFunction:Boolean[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::function::property::QualifiedProperty[1]
{
   let fType = $qualifiedProperty->functionType();

   ^meta::protocols::pure::vX_X_X::metamodel::m3::function::property::QualifiedProperty
   (
      name = $qualifiedProperty.name->toOne(),
      parameters = $fType.parameters->tail()->map(p|$p->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::valueSpecification::transformValueSpecification([], newMap([]->cast(@Pair<String, List<Any>>)), true, $extensions)->cast(@meta::protocols::pure::vX_X_X::metamodel::m3::valuespecification::Variable)),
      returnGenericType = transformGenericType($fType.returnType),
      returnMultiplicity = $fType.returnMultiplicity->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformMultiplicity()->toOne(),
      body = $qualifiedProperty->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::valueSpecification::transformFunctionBody($useAppliedFunction, $extensions),
      stereotypes = $qualifiedProperty.stereotypes->map(s|$s->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformStereotype()),
      taggedValues = $qualifiedProperty.taggedValues->map(t|$t->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformTaggedValue())
   );
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformStereotype(s:Stereotype[1]): meta::protocols::pure::vX_X_X::metamodel::m3::extension::StereotypePtr[1]
{
   ^meta::protocols::pure::vX_X_X::metamodel::m3::extension::StereotypePtr(profile=$s.profile->elementToPath(), value=$s.value)
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformTaggedValue(t:TaggedValue[1]): meta::protocols::pure::vX_X_X::metamodel::m3::extension::TaggedValue[1]
{
   ^meta::protocols::pure::vX_X_X::metamodel::m3::extension::TaggedValue(tag=^meta::protocols::pure::vX_X_X::metamodel::m3::extension::TagPtr(profile=$t.tag.profile->elementToPath(), value=$t.tag.value), value=$t.value)
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformMultiplicity(multiplicity:Multiplicity[1]): meta::protocols::pure::vX_X_X::metamodel::m3::multiplicity::Multiplicity[1]
{
   ^meta::protocols::pure::vX_X_X::metamodel::m3::multiplicity::Multiplicity(lowerBound=$multiplicity.lowerBound.value, upperBound=$multiplicity.upperBound.value)
}

function <<access.private>> meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformDefaultValue(d:meta::pure::metamodel::function::property::DefaultValue[1], extensions:meta::pure::extension::Extension[*]): meta::protocols::pure::vX_X_X::metamodel::m3::function::property::DefaultValue[1]
{
   ^meta::protocols::pure::vX_X_X::metamodel::m3::function::property::DefaultValue(
       value = $d.functionDefinition.expressionSequence->at(0)->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::valueSpecification::transformValueSpecification([], newMap([]->cast(@Pair<String, List<Any>>)),true, $extensions)
   )
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformEnum(enum:Enumeration<Any>[1]):meta::protocols::pure::vX_X_X::metamodel::m3::type::Enumeration[1]
{
   let pack = $enum->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::enumPackage();
   ^meta::protocols::pure::vX_X_X::metamodel::m3::type::Enumeration
   (
      _type = 'Enumeration',
      name = $enum->enumName(),
      package = if($pack == '',|[], |$pack),
      values = $enum->enumValues()->map(e|^	meta::protocols::pure::vX_X_X::metamodel::m3::type::EnumValue
                                           (
                                              value=$e->cast(@Enum).name,
                                              stereotypes = $e->cast(@AnnotatedElement).stereotypes->map(s|$s->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformStereotype()),
                                              taggedValues = $e->cast(@AnnotatedElement).taggedValues->map(t|$t->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformTaggedValue())
                                           )
                                    ),
       stereotypes = $enum->cast(@AnnotatedElement).stereotypes->map(s|$s->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformStereotype()),
       taggedValues = $enum->cast(@AnnotatedElement).taggedValues->map(t|$t->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformTaggedValue())
   );
}

function <<access.private>> meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::enumPackage(e:Enumeration<Any>[1]):String[1]{
   let s = $e->elementToPath()->split('::');
   let fullLengh = $s->size();
   if($fullLengh < 2,
      |'',
      |$s->init()->joinStrings('::');
   );
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::transformFunction(f:ConcreteFunctionDefinition<Any>[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::function::Function[1]
{

   ^meta::protocols::pure::vX_X_X::metamodel::m3::function::Function
   (
      _type = 'function',
      name = $f.name->toOne(),
      package=$f.package->toOne()->elementToPath(),
      body = $f->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::valueSpecification::transformFunctionBody(true, $extensions),
      parameters = $f->functionType().parameters->map(p |
         $p->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::valueSpecification::transformValueSpecification([], ^Map<String, meta::pure::functions::collection::List<Any>>(), true, true, $extensions)->cast(@meta::protocols::pure::vX_X_X::metamodel::m3::valuespecification::Variable)
      ),
      returnGenericType = transformGenericType($f->functionReturnType()),
      returnMultiplicity = $f->functionReturnMultiplicity()->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformMultiplicity()->toOne(),
      preConstraints  = $f.preConstraints->map(c |$c->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformConstraint($extensions)),
      postConstraints  = $f.postConstraints->map(c |$c->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformConstraint($extensions)),
      stereotypes = $f.stereotypes->map(s|$s->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformStereotype()),
      taggedValues = $f.taggedValues->map(t|$t->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::domain::transformTaggedValue())

   )
}
function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::transformProfile(p:Profile[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::m3::extension::Profile[1]

{   ^meta::protocols::pure::vX_X_X::metamodel::m3::extension::Profile(_type = 'profile',
                                                               name = $p.name->toOne(),
                                                               package = if($p.package->isEmpty(),|[],|$p.package->toOne()->elementToPath()),
                                                               stereotypes = $p.p_stereotypes->map(s|$s.value),
                                                               tags = $p.p_tags->map(t|$t.value)

                                                          )

}
