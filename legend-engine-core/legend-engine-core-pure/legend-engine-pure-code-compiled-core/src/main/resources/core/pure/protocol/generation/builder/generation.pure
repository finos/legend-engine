// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::protocols::generation::builder::*;

function meta::protocols::generation::builder::builderGeneration(a:Any[1]):String[1]
{
  $a->builderGeneration('');
}

function <<access.private>> meta::protocols::generation::builder::builderGeneration(a:Any[1], space:String[1]):String[1]
{
  let type = $a->genericType().rawType->toOne();
  $type->match(
    [
      c:Class<Any>[1]|
        let content = $type->cast(@Class<Any>)->meta::pure::functions::meta::hierarchicalProperties()->sortBy(a|$a.name->toOne())->map(p|
                                                let val = $p->eval($a);
                                                if ($val->isEmpty(),
                                                  |[],
                                                  | $space + '  ' + $p.name->toOne() +' = ' + $val->match(
                                                                                                  [
                                                                                                    a : Any[1] | $a->toOne()->builderGeneration($space+'  '),
                                                                                                    z : Any[*] | '[' + $z->map(x|$x->builderGeneration($space+'  '))->joinStrings(', ') + ']'
                                                                                                  ]
                                                                                              )
                                                );
                                            )->joinStrings(',\n');
        '^'+$type->elementToPath()+' (' +if ($content == '',|'',|'\n') +
          $content +
        if ($content == '',|'',|'\n'+$space)+')';,
      t:PrimitiveType[1]|$a->match([
                              s:String[1]|'\''+$s+'\'',
                              a:Any[1]|$a->toString()
                            ]),
      e:Enumeration<Any>[1]|$e->elementToPath() + '.' + $a->toString()
    ]
  );
}

