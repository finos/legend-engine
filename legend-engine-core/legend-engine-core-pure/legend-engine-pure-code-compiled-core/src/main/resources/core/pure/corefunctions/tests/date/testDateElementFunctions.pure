// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.





















function <<test.Test>> meta::pure::functions::date::tests::testDayOfWeek():Boolean[1]
{
    assertEquals(DayOfWeek.Wednesday, %2015-04-15->dayOfWeek());
    assertEquals(DayOfWeek.Wednesday, %2015-04-15T17->dayOfWeek());
    assertEquals(DayOfWeek.Wednesday, %2015-04-15T17:09->dayOfWeek());
    assertEquals(DayOfWeek.Wednesday, %2015-04-15T17:09:21->dayOfWeek());
    assertEquals(DayOfWeek.Wednesday, %2015-04-15T17:09:21.398->dayOfWeek());

    assertEquals(DayOfWeek.Monday, %2015-04-13->dayOfWeek());
    assertEquals(DayOfWeek.Tuesday, %2015-04-14->dayOfWeek());
    assertEquals(DayOfWeek.Wednesday, %2015-04-15->dayOfWeek());
    assertEquals(DayOfWeek.Thursday, %2015-04-16->dayOfWeek());
    assertEquals(DayOfWeek.Friday, %2015-04-17->dayOfWeek());
    assertEquals(DayOfWeek.Saturday, %2015-04-18->dayOfWeek());
    assertEquals(DayOfWeek.Sunday, %2015-04-19->dayOfWeek());
}







function <<test.Test>> meta::pure::functions::date::tests::testMonth():Boolean[1]
{
    assertEquals(Month.April, %2015-04->month());
    assertEquals(Month.April, %2015-04-15->month());
    assertEquals(Month.April, %2015-04-15T17->month());
    assertEquals(Month.April, %2015-04-15T17:09->month());
    assertEquals(Month.April, %2015-04-15T17:09:21->month());
    assertEquals(Month.April, %2015-04-15T17:09:21.398->month());

    assertEquals(Month.January, %2015-01->month());
    assertEquals(Month.February, %2015-02->month());
    assertEquals(Month.March, %2015-03->month());
    assertEquals(Month.April, %2015-04->month());
    assertEquals(Month.May, %2015-05->month());
    assertEquals(Month.June, %2015-06->month());
    assertEquals(Month.July, %2015-07->month());
    assertEquals(Month.August, %2015-08->month());
    assertEquals(Month.September, %2015-09->month());
    assertEquals(Month.October, %2015-10->month());
    assertEquals(Month.November, %2015-11->month());
    assertEquals(Month.December, %2015-12->month());
}



function <<test.Test>> meta::pure::functions::date::tests::testQuarterNumber():Boolean[1]
{
    assertEquals(2, %2015-04->quarterNumber());
    assertEquals(2, %2015-04-15->quarterNumber());
    assertEquals(2, %2015-04-15T17->quarterNumber());
    assertEquals(2, %2015-04-15T17:09->quarterNumber());
    assertEquals(2, %2015-04-15T17:09:21->quarterNumber());
    assertEquals(2, %2015-04-15T17:09:21.398->quarterNumber());

    assertEquals(1, %2015-01->quarterNumber());
    assertEquals(1, %2015-02->quarterNumber());
    assertEquals(1, %2015-03->quarterNumber());
    assertEquals(2, %2015-04->quarterNumber());
    assertEquals(2, %2015-05->quarterNumber());
    assertEquals(2, %2015-06->quarterNumber());
    assertEquals(3, %2015-07->quarterNumber());
    assertEquals(3, %2015-08->quarterNumber());
    assertEquals(3, %2015-09->quarterNumber());
    assertEquals(4, %2015-10->quarterNumber());
    assertEquals(4, %2015-11->quarterNumber());
    assertEquals(4, %2015-12->quarterNumber());

    assertEquals(4, meta::pure::functions::date::quarterNumber_Date_1__Integer_1_->eval(%2015-12));
}

function <<test.Test>> meta::pure::functions::date::tests::testQuarter():Boolean[1]
{
    assertEquals(Quarter.Q2, %2015-04->quarter());
    assertEquals(Quarter.Q2, %2015-04-15->quarter());
    assertEquals(Quarter.Q2, %2015-04-15T17->quarter());
    assertEquals(Quarter.Q2, %2015-04-15T17:09->quarter());
    assertEquals(Quarter.Q2, %2015-04-15T17:09:21->quarter());
    assertEquals(Quarter.Q2, %2015-04-15T17:09:21.398->quarter());

    assertEquals(Quarter.Q1, %2015-01->quarter());
    assertEquals(Quarter.Q1, %2015-02->quarter());
    assertEquals(Quarter.Q1, %2015-03->quarter());
    assertEquals(Quarter.Q2, %2015-04->quarter());
    assertEquals(Quarter.Q2, %2015-05->quarter());
    assertEquals(Quarter.Q2, %2015-06->quarter());
    assertEquals(Quarter.Q3, %2015-07->quarter());
    assertEquals(Quarter.Q3, %2015-08->quarter());
    assertEquals(Quarter.Q3, %2015-09->quarter());
    assertEquals(Quarter.Q4, %2015-10->quarter());
    assertEquals(Quarter.Q4, %2015-11->quarter());
    assertEquals(Quarter.Q4, %2015-12->quarter());


    assertEquals(Quarter.Q3, meta::pure::functions::date::quarter_Date_1__Quarter_1_->eval(%2015-09));
    assertEquals(Quarter.Q3, meta::pure::functions::date::quarter_Date_1__Quarter_1_->evaluate(^List<Date>(values=%2015-09)));
}



function <<test.Test>> meta::pure::functions::date::tests::testHasYear():Boolean[1]
{
    assert(%2015-04-15T17:09:21.398->hasYear());
    assert(%2015-04-15T17:09:21->hasYear());
    assert(%2015-04-15T17:09->hasYear());
    assert(%2015-04-15T17->hasYear());
    assert(%2015-04-15->hasYear());
    assert(%2015-04->hasYear());
    assert(%2015->hasYear());

    assert(meta::pure::functions::date::hasYear_Date_1__Boolean_1_->eval(%2015));
    assert(meta::pure::functions::date::hasYear_Date_1__Boolean_1_->evaluate(^List<Date>(values=%2015))->cast(@Boolean)->toOne());
}

function <<test.Test>> meta::pure::functions::date::tests::testDaysOfMonth():Boolean[1]
{
    assertEquals(15, %2015-04-15->daysOfMonth());
    assertEquals([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], %2015-04->daysOfMonth());
}
