// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::router::clustering::*;
import meta::pure::router::metamodel::clustering::*;

function meta::pure::router::clustering::recursivelyFetchClusteredValueSpecification(vs:ValueSpecification[1], recurseWithinCluster:Boolean[1]):ClusteredValueSpecification[*]
{
   $vs->evaluateAndDeactivate()->match([
      f:SimpleFunctionExpression[1]           | $f.parametersValues->evaluateAndDeactivate()->map(v|$v->recursivelyFetchClusteredValueSpecification($recurseWithinCluster)),
      r:RoutedValueSpecification[1]           | $r.value->recursivelyFetchClusteredValueSpecification($recurseWithinCluster),
      c:ClusteredValueSpecification[*]        | let childCluster = if($recurseWithinCluster, |$c.val->map(v | $v->recursivelyFetchClusteredValueSpecification($recurseWithinCluster)), |[]);
                                                $c->concatenate($childCluster);,
      i:InstanceValue[1]                      | [],
      v:VariableExpression[1]                 | [],
      fvs:FunctionRoutedValueSpecification[1] | $fvs.value->recursivelyFetchClusteredValueSpecification($recurseWithinCluster)
   ]);
}