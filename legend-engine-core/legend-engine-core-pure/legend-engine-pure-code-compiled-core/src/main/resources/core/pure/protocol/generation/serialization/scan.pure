// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::protocols::generation::scan::*;

function meta::protocols::generation::scan::scanClass(a:Class<Any>[1]):Class<Any>[*]
{
  $a->scanClass([])->removeDuplicates();
}

function meta::protocols::generation::scan::scanClass(a:Class<Any>[1], visited:Class<Any>[*]):Class<Any>[*]
{
  let newVisited = $visited->concatenate($a);
  if ($a->in($visited),
    |[],
    | $a
        ->concatenate(
          $a.properties->map(p|$p.genericType.rawType)->filter(c|$c->instanceOf(Class))->cast(@Class<Any>)->map(x|$x->scanClass($newVisited))
        )->concatenate(
          $a.generalizations.general.rawType->filter(x|$x != Any && $x->instanceOf(Class))->cast(@Class<Any>)->map(x|$x->scanClass($newVisited))
        )
  );
}

