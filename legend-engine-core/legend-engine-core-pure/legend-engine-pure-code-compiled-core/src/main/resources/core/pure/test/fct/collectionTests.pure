// // Copyright 2024 Goldman Sachs
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //      http://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.
import meta::pure::mapping::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::testCoverage::featureMatrix::*;
import meta::pure::test::fct::model::FCT::*;
import meta::pure::fct::tests::collection::*;
import meta::pure::fct::*;
Class meta::pure::fct::tests::collection::Position
{
   acctNum:Integer[1];
   gsn:String[1];
   quantity:Integer[1];
   trades:Trade[*];


}
Class meta::pure::fct::tests::collection::Trade
{
   id:Integer[1];
}

Class meta::pure::fct::tests::collection::Product
{
   description:String[1];
}

Association meta::pure::fct::tests::collection::PositionProduct
{
   product:Product[0..1];
   positions:Position[*];
}



function  <<meta::pure::test::fct::model::FCT.feature, QueryFeature.filter, QuerySubFeature.filterPrimitive,QueryType.tds>>  meta::pure::fct::tests::collection::filter::filterTDS():FunctionDefinition<{->Any[1]}>[1]
 {  
   {|Position.all()->filter(i|$i.gsn  == 'ABC123')->project(p|[$p.gsn],['gsn'])};

}



function  <<meta::pure::test::fct::model::FCT.feature, QueryFeature.filter, QuerySubFeature.filterPrimitive,QueryType.graphFetch>>  meta::pure::fct::tests::collection::filter::filterGraphFetch():FunctionDefinition<{->Any[1]}>[1]
 { 
   {|Position.all()->filter(i|$i.gsn  == 'ABC123')->graphFetch(#{Position{gsn}}#)->serialize(#{Position{gsn}}#)};

}

function  <<meta::pure::test::fct::model::FCT.feature, QueryFeature.filter, QuerySubFeature.filterAssociation,QueryType.graphFetch>>  meta::pure::fct::tests::collection::filter::filterAssociationGraphFetch():FunctionDefinition<{->Any[1]}>[1]
 { 
   {|Position.all()->filter(i|$i.product.description ->in(['Gold']))->graphFetch(#{Position{gsn}}#)->serialize(#{Position{gsn}}#)};

}


function  <<meta::pure::test::fct::model::FCT.feature, QueryFeature.filter, QuerySubFeature.filterAssociation,QueryType.tds>>  meta::pure::fct::tests::collection::filter::filterAssociationTDS():FunctionDefinition<{->Any[1]}>[1]
{
   {|Position.all()->filter(i|$i.product.description->in(['Gold']))->project(p|[$p.gsn],['gsn'])};
}


