// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::router::clustering::*;
import meta::pure::router::metamodel::*;
import meta::pure::router::metamodel::clustering::*;
import meta::pure::router::platform::clustering::*;
import meta::pure::router::platform::routing::*;
import meta::pure::router::platform::metamodel::*;
import meta::pure::router::platform::metamodel::clustering::*;
import meta::pure::router::printer::*;
import meta::pure::router::routing::*;
import meta::core::runtime::*;
// =========================================================================================
// Platform Routing Strategy Builder Helper
// =========================================================================================

function meta::pure::router::platform::routing::getPlatformRoutingStrategy():PlatformRoutingStrategy[1]
{
  ^PlatformRoutingStrategy(processClass    = meta::pure::router::platform::routing::processClass_Class_1__InstanceValue_1__RoutingState_1__ExecutionContext_1__DebugContext_1__RoutingState_1_,
                           processProperty = meta::pure::router::platform::routing::processProperty_Property_1__FunctionExpression_1__RoutingState_1__ExecutionContext_1__Map_1__Map_1__Extension_MANY__DebugContext_1__RoutingState_1_,
                           wrapValueSpec   = meta::pure::router::platform::routing::wrapValueSpecification_ValueSpecification_1__RoutingStrategy_1__String_1__ExecutionContext_1__Extension_MANY__DebugContext_1__ExtendedRoutedValueSpecification_1_,
                           toString        = {strategy:RoutingStrategy[1] | 'PlatformRoutingStrategy'},
                           specializedRouteFunctionExpressions = meta::pure::router::platform::routing::specializedRouteFunctionExpressions()
  );
}

function <<access.private>> meta::pure::router::platform::routing::specializedRouteFunctionExpressions():Pair<Function<{FunctionExpression[1]->Boolean[1]}>, Function<{Function<Any>[1], FunctionExpression[1], RoutingState[1], meta::pure::runtime::ExecutionContext[1], Map<VariableExpression, ValueSpecification>[1], Map<String, List<Any>>[1], meta::pure::extension::Extension[*], DebugContext[1]->RoutingState[1]}>>[*]
{ 
  // if platform is routing functions that return Relation, one of the inputs to these have already been routed to store, hence delegate to store
  let relationFunctionsToOptimize = [  
    // join_Relation_1__Relation_1__JoinKind_1__Function_1__Relation_1_,
    // asOfJoin_Relation_1__Relation_1__Function_1__Relation_1_,
    // asOfJoin_Relation_1__Relation_1__Function_1__Function_1__Relation_1_,
    // distinct_Relation_1__ColSpecArray_1__Relation_1_,
    // distinct_Relation_1__ColSpecArray_1__Relation_1_,
    // drop_Relation_1__Integer_1__Relation_1_,
    // extend_Relation_1__FuncColSpec_1__Relation_1_,
    // extend_Relation_1__FuncColSpecArray_1__Relation_1_,
    // groupBy_Relation_1__ColSpecArray_1__AggColSpec_1__Relation_1_,
    // groupBy_Relation_1__ColSpecArray_1__AggColSpecArray_1__Relation_1_,
    // groupBy_Relation_1__ColSpec_1__AggColSpec_1__Relation_1_,
    // groupBy_Relation_1__ColSpec_1__AggColSpecArray_1__Relation_1_,
    // limit_Relation_1__Integer_1__Relation_1_,
    // rename_Relation_1__ColSpec_1__ColSpec_1__Relation_1_,
    // slice_Relation_1__Integer_1__Integer_1__Relation_1_,
    // sort_Relation_1__SortInfo_MANY__Relation_1_,
    // size_Relation_1__Integer_1_,
    // select_Relation_1__ColSpecArray_1__Relation_1_,
    // select_Relation_1__ColSpec_1__Relation_1_,
    // select_Relation_1__Relation_1_,
    // extend_Relation_1__AggColSpec_1__Relation_1_,
    // extend_Relation_1__AggColSpecArray_1__Relation_1_,
    // extend_Relation_1___Window_1__AggColSpec_1__Relation_1_,
    // extend_Relation_1___Window_1__AggColSpecArray_1__Relation_1_,
    // extend_Relation_1___Window_1__FuncColSpec_1__Relation_1_,
    // extend_Relation_1___Window_1__FuncColSpecArray_1__Relation_1_,
    // pivot_Relation_1__ColSpecArray_1__AggColSpec_1__Relation_1_,
    // pivot_Relation_1__ColSpecArray_1__AggColSpecArray_1__Relation_1_,
    // pivot_Relation_1__ColSpec_1__AggColSpec_1__Relation_1_,
    // pivot_Relation_1__ColSpec_1__AggColSpecArray_1__Relation_1_,
    concatenate_Relation_1__Relation_1__Relation_1_,
    filter_Relation_1__Function_1__Relation_1_
  ];

  [
    pair(
        fe:FunctionExpression[1] | $fe.func->in($relationFunctionsToOptimize),
        {f:Function<Any>[1], fe:FunctionExpression[1], state: meta::pure::router::routing::RoutingState[1], executionContext:meta::pure::runtime::ExecutionContext[1], vars:Map<VariableExpression, ValueSpecification>[1], inScopeVars:Map<String, List<Any>>[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1] |
          let processed = processCollection($state,
                                    $fe.parametersValues->evaluateAndDeactivate(),
                                    $executionContext,
                                    $vars,
                                    $inScopeVars,
                                    x:Any[1] | true,
                                    $extensions,
                                    ^$debug(space = $debug.space+'  '));
          // meta::pure::ide::debug();
          let fullRes = ^$fe(parametersValues = $processed.value->cast(@ValueSpecification));
          let firstRelation = $processed->head()->toOne();
          ^$firstRelation(value=$fullRes);
        }
    )
  ];
}

function <<access.private>> meta::pure::router::platform::routing::processClass(c:Class<Any>[1], i:InstanceValue[1], state:RoutingState[1], executionContext:meta::pure::runtime::ExecutionContext[1], debug:DebugContext[1]):RoutingState[1]
{
   print(if($debug.debug,|$debug.space+'~>C) (PlatformRoutingStrategy) '+$state.value->toOne()->toString()+'\n',|''));
   $state;
}

function <<access.private>> meta::pure::router::platform::routing::processProperty(p:Property<Nil,Any|*>[1], fe:FunctionExpression[1], state:RoutingState[1], executionContext:meta::pure::runtime::ExecutionContext[1], vars:Map<VariableExpression, ValueSpecification>[1], inScopeVars:Map<String, List<Any>>[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):RoutingState[1]
{
   let results = $state->processCollection($fe.parametersValues->evaluateAndDeactivate(), $executionContext, $vars, $inScopeVars, v:Any[1]|true, $extensions, $debug)->evaluateAndDeactivate();
   let newPV   = $results.value->cast(@ValueSpecification)->toOneMany();
   let preLast = $results->last()->toOne();

   let res = if($results.value->size() == 1 && $results.value->toOne()->instanceOf(InstanceValue),
                | let val  = $results.value->toOne()->cast(@InstanceValue).values->map(v | $p->eval($v));
                  let iv   = ^InstanceValue(genericType = $p->functionReturnType(),multiplicity = $p.multiplicity, values = $val);
                  let last = ^$preLast(depth = $preLast.depth + $p.name->toOne());
                  ^$last(value = $iv);,
                | ^$preLast(value=^NoSetRoutedValueSpecification(genericType = $fe.genericType, multiplicity = $fe.multiplicity, value=^$fe(parametersValues = $results.value->cast(@ValueSpecification)->toOneMany())))->evaluateAndDeactivate());  // TODO: cleanup needed
   print(if($debug.debug,|$debug.space+'~>FEP) (Platform) '+$res.value->toOne()->cast(@ValueSpecification)->asString()+'\n',|''));
   $res;
}

function <<access.private>> meta::pure::router::platform::routing::wrapValueSpecification(value:ValueSpecification[1], routingStrategy:RoutingStrategy[1], id:String[1], executionContext:meta::pure::runtime::ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ExtendedRoutedValueSpecification[1]
{
   ^PlatformRoutedValueSpecification
   (
      genericType = $value.genericType,
      multiplicity = $value.multiplicity,
      id = $id,
      executionContext = $executionContext,
      value = $value,
      routingStrategy = $routingStrategy
   );
}

// =========================================================================================
// PlatformRoutedValueSpecification enrichment Strategy
// =========================================================================================

function meta::pure::router::platform::routing::enrichPlatformRoutedValueSpecification(v:ValueSpecification[1], exeCtx:meta::pure::runtime::ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ValueSpecification[1]
{
   $v->match([f:FunctionExpression[1]                | ^$f(parametersValues = $f.parametersValues->evaluateAndDeactivate()->map(v|$v->enrichPlatformRoutedValueSpecification($exeCtx, $extensions, $debug))),
              i:InstanceValue[1]                     | let updatedValues = $i.values->map(val | $val->match([
                                                                                                        v:ValueSpecification[1]      | $v->enrichPlatformRoutedValueSpecification($exeCtx, $extensions, $debug),
                                                                                                        f:FunctionDefinition<Any>[1] | ^$f(expressionSequence = $f.expressionSequence->map(e | $e->enrichPlatformRoutedValueSpecification($exeCtx, $extensions, $debug))),
                                                                                                        a:Any[1] | $a
                                                                                                      ]));
                                                       ^$i(values = $updatedValues);,
               v:VariableExpression[1]               | $v,
               f: FunctionRoutedValueSpecification[1]| $f,
               e:ExtendedRoutedValueSpecification[1] | $e->enrichExpressionWithStrategyBasedEnrichment($exeCtx, $extensions, $debug),
               nsrvs:NoSetRoutedValueSpecification[1] | $nsrvs
      ]
   );
}

// =========================================================================================
// PlatformRoutedValueSpecification clustering Strategy
// =========================================================================================

function meta::pure::router::platform::clustering::cluster(v:ValueSpecification[1], openVariables:Map<String, List<Any>>[1], exeCtx:meta::pure::runtime::ExecutionContext[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1]):ValueSpecification[*]
{
   $v->match([f:FunctionExpression[1]                | let params         = $f.parametersValues->evaluateAndDeactivate()->map(v|$v->cluster($openVariables, $exeCtx, $extensions, ^$debug(space = $debug.space+'   ')));                                
                                                       let uniqueClusters = $params->filter(p | $p->instanceOf(ClusteredValueSpecification))->cast(@ClusteredValueSpecification)->removeDuplicates({x, y | areClustersCompatible($x, $y, $extensions)});
                                                       if($uniqueClusters->size() == 1 && $uniqueClusters->toOne()->isFunctionSupportedByCluster($f),
                                                          |let uniqueCluster = $uniqueClusters->toOne();
                                                          ^$uniqueCluster
                                                            (
                                                              genericType  = $f.genericType,
                                                              multiplicity = $f.multiplicity,
                                                              val          = ^$f(parametersValues = $params->evaluateAndDeactivate()->map(p|$p->match([c:ClusteredValueSpecification[1]|$c.val, a:ValueSpecification[1]|$a]))),
                                                              executable   = $params->evaluateAndDeactivate()->map(p|$p->match([c:ClusteredValueSpecification[1]|$c.executable;, a:ValueSpecification[1]|[]]))->concatenate(false)->toOneMany()->or()
                                                            );,
                                                          | wrapValueSpecByPlatformCluster(^$f(parametersValues = $params), $openVariables, $exeCtx));,
              i:InstanceValue[1]                     | if($i->isOneFunctionDefinition(),
                                                          | let f           = $i.values->at(0)->cast(@FunctionDefinition<Any>)->evaluateAndDeactivate();
                                                            let expressions = $f.expressionSequence->evaluateAndDeactivate()->map(v|print(if($debug.debug,|'\n'+$v->asString()->debug($debug.space+'Processing: '),|''));
                                                                                                                                         $v->cluster($openVariables, $exeCtx, $extensions, ^$debug(space = $debug.space+'   ')););
                                                            let unique      = $expressions->filter(p|$p->instanceOf(ClusteredValueSpecification))->cast(@ClusteredValueSpecification)->removeDuplicates({x, y | areClustersCompatible($x, $y, $extensions)});
                                                            if($unique->size() == 0,
                                                              | ^$i(values=^$f(expressionSequence = $expressions->toOneMany())),
                                                              | if($unique->size() == 1,
                                                                    | let one = $unique->toOne();
                                                                      print(if($debug.debug, |$i->evaluateAndDeactivate()->asString()->debug($debug.space+'Func: '),|''));
                                                                      let res = ^$one(
                                                                                  genericType  = $i.genericType,
                                                                                  multiplicity = $i.multiplicity,
                                                                                  val = ^$i(values=^$f(expressionSequence = $expressions->evaluateAndDeactivate()->map(p|$p->match([c:ClusteredValueSpecification[1]|$c.val;, a:ValueSpecification[1]|$a]))->toOneMany()))
                                                                                );
                                                                      print(if($debug.debug, |$res->evaluateAndDeactivate()->asString()->debug($debug.space+'~> '),|''));
                                                                      $res;,
                                                                    | print(if($debug.debug, |$i->evaluateAndDeactivate()->asString()->debug($debug.space+'Func: '), |''));
                                                                      let res = wrapValueSpecByPlatformCluster(^$i(values=^$f(expressionSequence = $expressions->toOneMany())), $openVariables, $exeCtx);
                                                                      print(if($debug.debug, |$res->evaluateAndDeactivate()->asString()->debug($debug.space+'~> '),|''));
                                                                      $res;
                                                                )
                                                              );,
                                                          | print(if($debug.debug,|$i->asString()->debug($debug.space+'Constant: '),|''));
                                                            let values       = $i.values->evaluateAndDeactivate()->map(m|if($m->instanceOf(ValueSpecification),
                                                                                                                                        | $m->cast(@ValueSpecification)->cluster($openVariables, $exeCtx, $extensions, $debug),
                                                                                                                                        | $m));
                                                            let unique       = $values->filter(p|$p->instanceOf(ClusteredValueSpecification))->cast(@ClusteredValueSpecification)->removeDuplicates({x, y | areClustersCompatible($x, $y, $extensions)});
                                                            let res          = if($unique->size() == 1,
                                                                                  | let one = $unique->toOne();
                                                                                    ^$one(
                                                                                      genericType  = $i.genericType,
                                                                                      multiplicity = $i.multiplicity,
                                                                                      val          = ^$i(values = $values->evaluateAndDeactivate()->map(p|$p->match([c:ClusteredValueSpecification[1]|$c.val;, a:Any[1]|$a])))
                                                                                    );,
                                                                                  | ^$i(values = $values);
                                                                              );
                                                            print(if($debug.debug,|$res->asString()->debug($debug.space+'~> '),|''));
                                                            $res;
                                                       );,
               v:VariableExpression[1]               | $v,
               f: FunctionRoutedValueSpecification[1]| $f,
               e:ExtendedRoutedValueSpecification[1] | $e->clusterFunctionExpressions($openVariables, $exeCtx, $extensions, $debug),
               c:ClusteredValueSpecification[1]      | $c,
               nsrvs:NoSetRoutedValueSpecification[1] | $nsrvs
      ]
   );
}

function meta::pure::router::platform::clustering::wrapValueSpecByPlatformCluster(vs:ValueSpecification[1], openVariables:Map<String, List<Any>>[1], exeCtx:meta::pure::runtime::ExecutionContext[1]):PlatformClusteredValueSpecification[1]
{
  ^PlatformClusteredValueSpecification
  (
    genericType  = $vs.genericType,
    multiplicity = $vs.multiplicity,
    openVars     = $openVariables,
    exeCtx       = $exeCtx,
    val          = $vs,
    executable   = true
  )
}
