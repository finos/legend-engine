// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::graphFetch::execution::*;
import meta::pure::graphFetch::*;
import meta::pure::extension::*;
import meta::relational::runtime::*;
import meta::pure::extension::configuration::*;
import meta::pure::runtime::*;
import meta::pure::testCoverage::featureMatrix::*;
import meta::pure::fct::tests::collection::*;
import meta::core::runtime::*;
import meta::pure::mapping::*;
import meta::pure::test::fct::*;
import meta::pure::fct::*;

Profile meta::pure::test::fct::model::FCT
{
    stereotypes : [feature,test, adapter, evaluator, testCollection];
}

Class  meta::pure::test::fct::FCTAdapter //store specific code
{
  runtime:Function<{FCTMappingTest[1]->Runtime[1]}>[1];
  setup:Function<{Function<{->FCTMappingTest[1]}>[1]->Any[1]}>[0..1]; 
}

Class  meta::pure::test::fct::FCTEvaluator  //Lineage or execute
{
  eval: Function<{TestParameters[1]->TestResult[1]}>[1];
  assertion: Function<{TestResult[1],TestParameters[1]->Boolean[1]}>[0..1];
}


Class meta::pure::test::fct::TestResult
{
}

 Class meta::pure::test::fct::LineageResult extends  meta::pure::test::fct::TestResult
{
    result:meta::pure::lineage::result::LineageResult[1];
}
Class meta::pure::test::fct::ExpectedLineage
{
    storeLineage:String[*];
    classLineage:String[*];
    reportLineage:String[1];
}

Class meta::pure::test::fct::ExecuteResult<T> extends meta::pure::test::fct::TestResult
{
  result:meta::pure::mapping::Result<T|*>[1];
  
}

Class meta::pure::test::fct::StringResult extends meta::pure::test::fct::TestResult
{
  result:String[1];
}

Class  meta::pure::test::fct::SetupData 
{
}

Class  meta::pure::test::fct::JSONSetupData extends meta::pure::test::fct::SetupData
{
  class: Class<Any>[1];
  json:String[1];
}
Class  meta::pure::test::fct::InstanceSetupData extends meta::pure::test::fct::SetupData
{
  instance: Map<Class<Any>, List<Any>>[1];
}


Class  meta::pure::test::fct::FCTMappingTest
{
   setupData:SetupData[1];
   mapping:meta::pure::mapping::Mapping[1];
   assertions:meta::pure::test::fct::Test[*];

}

function meta::pure::test::fct::adaptorSetupFunction(adaptor:Function<{->FCTAdapter[1]}>[1]):Function<{Function<{->FCTMappingTest[1]}>[1]->Any[1]}>[0..1] 
{
    $adaptor->eval().setup; 
}


 function meta::pure::test::fct::createTestParameters(mappingTest:FCTMappingTest[1],runtime:Runtime[1]):meta::pure::test::fct::TestParameters[*]
 {
      $mappingTest.assertions->map(a|$a->match( [ t:TestAssertion[1]|  $t.tests->map(test| ^TestParameters(runtime=$runtime,
                                                                                                          mapping=$mappingTest.mapping, 
                                                                                                          expectedExecutionResult=$t.expectedExecutionResult, 
                                                                                                          expectedLineageResult = $t.expectedLineageResult,
                                                                                                          test = $test)), 
                                                                                                                              
                                              e:TestErrorAssertion[1]| $e.tests->map(test| ^TestParameters(runtime=$runtime,
                                                                                                          mapping=$mappingTest.mapping, 
                                                                                                          expectedErrorMessage = $e.expectedErrorMessage,
                                                                                                          test = $test))  
                                                           
                                                                                         ])
                                                                                 );

 }
 

Class  meta::pure::test::fct::Test
{
  tests:ConcreteFunctionDefinition<{->FunctionDefinition<{->Any[1]}>[1]}>[*]  ;

}

Class  meta::pure::test::fct::CSVResult extends ExecutionResult
{
  value:String[1];
}

Class  meta::pure::test::fct::TDSResult extends ExecutionResult
{
  value:String[1];
}

Class  meta::pure::test::fct::JSONResult extends  ExecutionResult
{
  value:String[1];
}

Class  meta::pure::test::fct::ExecutionResult
{
}

Class  meta::pure::test::fct::TestAssertion extends meta::pure::test::fct::Test

{
  expectedExecutionResult:ExecutionResult[0..1];
  expectedLineageResult:ExpectedLineage[0..1];
}

Class  meta::pure::test::fct::TestErrorAssertion extends meta::pure::test::fct::Test
{
  expectedErrorMessage:String[1];
}

Class  meta::pure::test::fct::TestParameters
{
  expectedExecutionResult:Any[0..1];
  expectedErrorMessage : String[0..1];
  expectedLineageResult:ExpectedLineage[0..1];
  runtime:meta::core::runtime::Runtime[1];
  mapping:meta::pure::mapping::Mapping[1];
  test:ConcreteFunctionDefinition<{->FunctionDefinition<{->Any[1]}>[1]}>[1];

}

Class  meta::pure::test::fct::TestConfig<T>
{
  parameters:meta::pure::test::fct::TestParameters[1];
  toEval: Function<{FunctionDefinition<T>[1],TestParameters[1]->TestResult[1]}>[1];
}

Profile  meta::pure::fct::TestReturnType
{
  stereotypes: [String,ClassInstance, TabularDataSet];

}



function   meta::pure::fct::tests::testRunnerAssertionLocal(adapter:FCTAdapter[1], evaluator:FCTEvaluator[1], mappingTestFn:Function<{->FCTMappingTest[1]}>[1]): AssertionRun[*]
{
          let mappingTest =  $mappingTestFn->eval();
          let runtime = $adapter.runtime->eval($mappingTest);
          $mappingTest->createTestParameters($runtime)->map(p   |  ^meta::pure::fct::AssertionRun(parameter=$p, evaluator=$evaluator);
                                                     );
}

function   meta::pure::fct::tests::testRunnerAssertion(adapterFN:Function<{->FCTAdapter[1]}>[1], evaluatorFN:Function<{->FCTEvaluator[1]}>[1], mappingTestFn:Function<{->FCTMappingTest[1]}>[1]): AssertionRun[*]
{
          let adapter = $adapterFN->eval();
          let evaluator = $evaluatorFN->eval();
          let mappingTest =  $mappingTestFn->eval();
          let runtime = $adapter.runtime->eval($mappingTest);
          $mappingTest->createTestParameters($runtime)->map(p   |  ^meta::pure::fct::AssertionRun(parameter=$p, evaluator=$evaluator);
                                                     );
}




Class meta::pure::fct::AssertionRun
{
  evaluator:FCTEvaluator[1];
  parameter:TestParameters[1] ;
  
}

function  meta::pure::fct::tests::execute::AssertionRunExecute(assertion:meta::pure::fct::AssertionRun[1]):Boolean[1]
{
 let result = $assertion.evaluator.eval->eval($assertion.parameter);
 if($assertion.evaluator.assertion->isNotEmpty() && $assertion.parameter.expectedErrorMessage->isEmpty(),
    |$assertion.evaluator.assertion->toOne()->eval($result,$assertion.parameter),
    |true);
 

}

function meta::pure::test::fct::expectedLineage( storeLineage:String[*], classLineage:String[*], reportLineage:String[1]):ExpectedLineage[1]
{
^ExpectedLineage(storeLineage= $storeLineage, classLineage =$classLineage, reportLineage =$reportLineage);
  
}


function meta::pure::test::fct::assertLineageResult( result:meta::pure::test::fct::TestResult[1],parameter:TestParameters[1]):Boolean[1]
{
   
   $parameter.expectedLineageResult->isNotEmpty() &&  meta::pure::test::fct::assertLineageResult($parameter.expectedLineageResult->toOne().storeLineage,$parameter.expectedLineageResult->toOne().classLineage,$parameter.expectedLineageResult->toOne().reportLineage,$result,$parameter.test->elementToPath());
}

function meta::pure::test::fct::assertLineageResult( storeLineage:String[*], classLineage:String[*], reportLineage:String[1],result:meta::pure::test::fct::TestResult[1], sourceDetail:String[1]):Boolean[1]
{

  if($result->instanceOf(meta::pure::test::fct::LineageResult),  
           | let lineage = $result->cast(@meta::pure::test::fct::LineageResult).result;
            meta::pure::lineage::test::assertLineage($storeLineage,$classLineage,$reportLineage,$lineage,$sourceDetail);,
           | true);
}



function   meta::pure::test::fct::executeFCTLegendQuery(parameters:meta::pure::test::fct::TestParameters[1],extensions:Extension[*]):StringResult[1]
{ 
  let fn =  $parameters.test->at(0).expressionSequence->cast(@InstanceValue)->evaluateAndDeactivate().values->at(0)->cast(@FunctionDefinition<{->Any[*]}>).expressionSequence->cast(@SimpleFunctionExpression)->toOne();
  if($parameters.test->hasStereotype('graphFetch',QueryType),
            | let graph =  $fn->cast(@SimpleFunctionExpression)->toOne().parametersValues->at(1)->cast(@InstanceValue).values->at(0)->cast(@RootGraphFetchTree<Any>);
              if($parameters.expectedErrorMessage->isNotEmpty(),
                          | assertError(|    
                                            meta::legend::executeLegendQuery(|$fn->from($parameters.mapping,$parameters.runtime)->serialize($graph), [], ^meta::pure::runtime::ExecutionContext(), $extensions),
                                            $parameters.expectedErrorMessage->toOne()
                                            
                                            ); @StringResult;,
                          |   let result = ^StringResult(result =meta::legend::executeLegendQuery(|$fn->from($parameters.mapping,$parameters.runtime)->serialize($graph), [], ^meta::pure::runtime::ExecutionContext(), $extensions));
                  );,
            |if($parameters.expectedErrorMessage->isNotEmpty(),
                          | assertError(|    
                                            meta::legend::executeLegendQuery(|$fn->from($parameters.mapping,$parameters.runtime), [], ^meta::pure::runtime::ExecutionContext(),$extensions),
                                            $parameters.expectedErrorMessage->toOne()
                                            
                                            ); @StringResult;,
                          |   let result = ^StringResult(result =meta::legend::executeLegendQuery(|$fn->from($parameters.mapping,$parameters.runtime), [], ^meta::pure::runtime::ExecutionContext(), $extensions));
               ));
}
