import meta::pure::testCoverage::featureMatrix::*;
import meta::pure::test::fct::*;
import meta::pure::mapping::modelToModel::test::fct::*;
// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function <<MappingFeature.simple, meta::pure::test::fct::model::FCT.testCollection>> meta::pure::mapping::modelToModel::test::fct::mapping::simple::testSimpleMapping():FCTMappingTest[1] 
{
 ^FCTMappingTest(setupData=  ^InstanceSetupData(instance= pair(S_Position, list([^S_Position(acctNum=7900001,gsn='ABC123',quantity=1,product=^S_Product(description='Firm D')), ^S_Position(acctNum=7900002,gsn='ABCDEF',quantity=2,product=^S_Product(description='Gold'))]))->newMap()),
                 mapping =  meta::pure::mapping::modelToModel::test::fct::mapping::simple::simpleTestMapping,
                 assertions= [
                              ^TestErrorAssertion(tests = [meta::pure::fct::tests::collection::filter::filterTDS__FunctionDefinition_1_,
                                                           meta::pure::fct::tests::collection::filter::filterAssociationTDS__FunctionDefinition_1_],
                                                  expectedErrorMessage='Found unexpected connection type for TabularDataSet Query: JsonModelConnection'),
                             ^TestAssertion(tests = meta::pure::fct::tests::collection::filter::filterGraphFetch__FunctionDefinition_1_,
                                             expectedLineageResult= expectedLineage( ['Lambda', 'db_myDB', 'tb_myDBdefaultTRADE'],['Lambda', 'meta::pure::fct::tests::collection::Position', 'pack_meta::pure::fct::tests::collection'],'[Position.gsn: [TRADE.GSN <TableAliasColumn>]]'),
                                             expectedExecutionResult = ^JSONResult(value='{"builder":{"_type":"json"},"values":{"gsn":"ABC123"}}'))
                           ]
            );

}


Class meta::pure::mapping::modelToModel::test::fct::S_Position
{
   acctNum:Integer[1];
   gsn:String[1];
   quantity:Integer[1];
   trades:S_Trade[*];
   

}
Class meta::pure::mapping::modelToModel::test::fct::S_Trade
{
   id:Integer[1];
}

Class meta::pure::mapping::modelToModel::test::fct::S_Product
{
   description:String[1];
}

Association meta::pure::mapping::modelToModel::test::fct::S_PositionProduct
{
   product:S_Product[0..1];
   positions:S_Position[*];
}




###Mapping
import meta::pure::fct::tests::collection::*;
import meta::pure::mapping::modelToModel::test::fct::*;
Mapping meta::pure::mapping::modelToModel::test::fct::mapping::simple::simpleTestMapping
(


   Position : Pure
            {
               ~src S_Position
                  acctNum:$src.acctNum,
                  gsn:$src.gsn,
                  quantity:$src.quantity,
                  product:$src.product
            }
   Product : Pure
            {
               ~src S_Product
                  description:$src.description
            }


)

