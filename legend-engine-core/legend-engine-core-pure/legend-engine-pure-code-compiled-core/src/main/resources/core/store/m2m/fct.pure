import meta::pure::testCoverage::featureMatrix::*;
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::extension::*;
import meta::pure::mapping::*;
import meta::json::*;
import meta::external::store::model::*;
import meta::core::runtime::*;
import meta::pure::test::fct::*;
// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.




function   <<meta::pure::test::fct::model::FCT.adapter>>  meta::pure::mapping::modelToModel::fct::fctAdaptor():FCTAdapter[1] 
{
    ^FCTAdapter( runtime= meta::pure::mapping::modelToModel::fct::runtimeBuilder_FCTMappingTest_1__Runtime_1_
               );

}



function   <<meta::pure::test::fct::model::FCT.adapter>>  meta::pure::mapping::modelToModel::fct::fctEvaluator():FCTEvaluator[1] 
{
    ^FCTEvaluator( eval= meta::pure::mapping::modelToModel::fct::exeucuteLegendQuery_TestParameters_1__StringResult_1_,
                  assertion = meta::pure::mapping::modelToModel::fct::assertExecute_TestResult_1__TestParameters_1__Boolean_1_
               );

}


function   meta::pure::mapping::modelToModel::fct::runtimeBuilder(mappingTest:meta::pure::test::fct::FCTMappingTest[1]):Runtime[1] 
{

  let connections = $mappingTest.setupData->map(d| $d->match([ i: InstanceSetupData[1]|   let json = $i.instance->values()->toJSON();
                                                                                          let class =  $i.instance->keys()->at(0);
                                                                                            ^ConnectionStore(element = ^ModelStore(),connection=^JsonModelConnection(class = $class, url= 'data:application/json,'+$json));
                                                               //j: JSONSetupData[1]   
                                                            ]));

 ^Runtime(  connectionStores = $connections);

        

}            


function meta::pure::mapping::modelToModel::fct::assertExecute(result:meta::pure::test::fct::TestResult[1],parameter:TestParameters[1]):Boolean[1]
{
  let expected = $parameter.expectedExecutionResult->toOne();
$expected->match([               
                 j:JSONResult[1]| assertEquals(  $j.value,$result->cast(@StringResult).result)


      ]);

}



function   meta::pure::mapping::modelToModel::fct::exeucuteLegendQuery(parameters:meta::pure::test::fct::TestParameters[1]):StringResult[1]
{ 
        $parameters->meta::pure::test::fct::executeFCTLegendQuery(defaultExtensions());

}
