// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::engine::java::roadmap::*;
import meta::json::*;
import meta::pure::executionPlan::profiles::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::test::alloy::utils::*;
import meta::pure::mapping::modelToModel::test::filter::mapping::*;
import meta::pure::mapping::modelToModel::test::filter::model::*;

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly, feature.Filter>>
{  serverVersion.start='v1_19_0',
   doc.doc='Given: a mapping that specifies filtering',
   doc.doc='Given: data that exercises the filter on the source objects',
   doc.doc='When:  the mapping is executed using graphFetch.',
   doc.doc='Then:  only the filtered objectsare returned'
}
meta::pure::mapping::modelToModel::test::alloy::filter::canFilterInAMapping() : Boolean[1]
{
   let tree = #{Person {lastName}}#;
   let func = {|Person.all()->graphFetch($tree)->serialize($tree)};
   let mapping = filterMapping;
   let runtime = testJsonRuntime(_Person, '[{"fullName":"Pierre Doe", "firm": {"name":"X"}},{"fullName":"A. Only One", "firm": {"name":"X"}}]');
   
   let result = execute($func, $mapping, $runtime, meta::pure::extension::defaultExtensions());
   let json = $result.values->toOne();

   let expected= '{"lastName":"A. Only One"}';
   assert(jsonEquivalent($expected->parseJSON(), $json->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly, feature.Filter>>
{  serverVersion.start='v1_19_0',
   doc.doc='Given: a mapping that specifies filtering',
   doc.doc='Given: data that exercises the filter on the source objects',
   doc.doc='When:  the mapping is executed using graphFetchChecked.',
   doc.doc='Then:  only the filtered objectsare returned'
}
meta::pure::mapping::modelToModel::test::alloy::filter::canFilterInAMappingChecked() : Boolean[1]
{
   let tree = #{Person {lastName}}#;
   let func = {|Person.all()->graphFetchChecked($tree)->serialize($tree)};
   let mapping = filterMapping;
   let runtime = testJsonRuntime(_Person, '[{"fullName":"Pierre Doe", "firm": {"name":"X"}},{"fullName":"A. Only One", "firm": {"name":"X"}}]');
   
   let result = execute($func, $mapping, $runtime, meta::pure::extension::defaultExtensions());
   let json = $result.values->toOne();

   let expected= 
   '{'+
   '  "defects":[],'+
   '  "value":{"lastName":"A. Only One"},'+
   '  "source":{'+
   '    "defects":[],'+
   '    "value":{"fullName":"A. Only One"},'+
   '    "source":{"number":2, "record":"{\\"fullName\\":\\"A. Only One\\",\\"firm\\":{\\"name\\":\\"X\\"}}"}'+
   '  }'+
   '}';
   assert(jsonEquivalent($expected->parseJSON(), $json->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly, feature.Filter>>
{  serverVersion.start='v1_19_0',
   doc.doc='Given: a mapping that specifies filtering',
   doc.doc='Given: data that exercises the filter for children of the source objects',
   doc.doc='When:  the mapping is executed using graphFetch.',
   doc.doc='Then:  only the filtered child objects are returned'
}
meta::pure::mapping::modelToModel::test::alloy::filter::canFilterInAMappingOnChildObjects() : Boolean[1]
{
   let tree = #{Firm { employees {lastName}}}#;
   let func = {|Firm.all()->graphFetch($tree)->serialize($tree)};
   let mapping = filterMapping;
   let runtime = testJsonRuntime(_Firm, '{"name":"X", "employees":[{"fullName":"Pierre Doe"},{"fullName":"A. Only One"}]}');
   
   let result = execute($func, $mapping, $runtime, meta::pure::extension::defaultExtensions());
   let json = $result.values->toOne();

   let expected= '{"employees"[{"lastName":"A. Only One"}]}';
   assert(jsonEquivalent($expected->parseJSON(), $json->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly, feature.Filter>>
{  serverVersion.start='v1_19_0',
   doc.doc='Given: a mapping that specifies filtering at a set level',
   doc.doc='Given: data that exercises the filter for children of the source objects',
   doc.doc='When:  the mapping is executed using graphFetch.',
   doc.doc='Then:  only the filtered child objects are returned'
}
meta::pure::mapping::modelToModel::test::alloy::filter::canExecuteFilterAtSetLevel() : Boolean[1]
{
   let tree = #{D {id, e {id} }}#;
   let func = {|D.all()->graphFetch($tree)->serialize($tree)};
   let mapping = setFilterMapping;
   let runtime = testJsonRuntime(_D, '[{"id" : 1, "e" : {"id" : 1}}, {"id" : 2, "e" : {"id" : 2}}]');
   
   let result = execute($func, $mapping, $runtime, meta::pure::extension::defaultExtensions());
   let json = $result.values->toOne();

   let expected= '[{"id" : 1, "e" : null}, {"id" : 2, "e" : {"id" : 2}}]';
   assert(jsonEquivalent($expected->parseJSON(), $json->parseJSON()));
}

###Pure
import meta::pure::mapping::modelToModel::test::filter::model::*;

Class meta::pure::mapping::modelToModel::test::filter::model::Firm
{
   legalName : String[1];
   employees : Person[*];
   count     : Integer[1];
}

Class meta::pure::mapping::modelToModel::test::filter::model::Person
{
   firstName : String[1];
   lastName  : String[1];
   firm      : Firm[0..1];
}

Class meta::pure::mapping::modelToModel::test::filter::model::_Firm
{
  name : String[1];
}

Class meta::pure::mapping::modelToModel::test::filter::model::_Person
{
   fullName : String[1];
}

Association  meta::pure::mapping::modelToModel::filter::model::src::_Firm_Person
{
   employees : _Person[*];
   firm : _Firm[1];
}

Class meta::pure::mapping::modelToModel::test::filter::model::D
{
   id : Integer[1];
   e  : E[0..1];
}

Class meta::pure::mapping::modelToModel::test::filter::model::E
{
   id : Integer[1];
}

Class meta::pure::mapping::modelToModel::test::filter::model::_D
{
   id : Integer[1];
   e  : _E[1];
}

Class meta::pure::mapping::modelToModel::test::filter::model::_E
{
   id : Integer[1];
}

###Mapping
import meta::pure::mapping::modelToModel::test::filter::model::*;

Mapping meta::pure::mapping::modelToModel::test::filter::mapping::filterMapping
(
   Person : Pure
   {
      ~src _Person
      ~filter $src.fullName->startsWith('A')
      lastName : $src.fullName
   }
   
   Firm : Pure
   {
      ~src _Firm
      legalName : $src.name,
      employees : $src.employees
   }
)

Mapping meta::pure::mapping::modelToModel::test::filter::mapping::setFilterMapping
(
  D : Pure
  {
    ~src _D
    id: $src.id,
    e: $src.e
  }

  E: Pure
  {
    ~src _E
    ~filter $src.id != 1
    id: $src.id
  }
)
