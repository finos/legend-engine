// import meta::pure::testCoverage::featureMatrix::*;
// import meta::pure::test::mft::*;
// import meta::pure::mapping::modelToModel::test::mft::mapping::merge::*;
// // Copyright 2025 Goldman Sachs
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //      http://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.

// function <<MappingFeature.merge, meta::pure::test::mft::model::MFT.testCollection>> meta::pure::mapping::modelToModel::test::mft::mapping::merge::testMergeMapping():MFTMappingTest[1]
// {
//  ^MFTMappingTest(setupData= [ ^InstanceSetupData(instance= pair(S_PersonSource1, list([ ^S_PersonSource1(firstName='John',birthDate=%2020-02-02, firm=^S_Firm(legalName='Firm D'))]))->newMap()) ,
//                                ^InstanceSetupData(instance=pair(S_PersonSource2, list([  ^S_PersonSource2(firstName='John', lastName='Doe') ]))->newMap()) ],                            
//                  mapping =  meta::pure::mapping::modelToModel::test::mft::mapping::merge::mergeTestMapping,
//                  assertions= []//TODO:  The test runner needs to be updated to handle the merge scenario 
//             );

// }

// Class meta::pure::mapping::modelToModel::test::mft::mapping::merge::S_Firm
// {
//    legalName : String[1];
//    optionalDescription : String[0..1];
//    employees:meta::pure::mapping::modelToModel::test::mft::mapping::merge::S_PersonSource1[*];


// }

// Class meta::pure::mapping::modelToModel::test::mft::mapping::merge::S_PersonSource1
// {
//    firstName : String[1];
//    description : String[0..1];
//    birthDate: StrictDate[1];
//    firm:meta::pure::mapping::modelToModel::test::mft::mapping::merge::S_Firm[1];
//    address:meta::pure::mapping::modelToModel::test::mft::S_Address[0..1];

// }



// Class meta::pure::mapping::modelToModel::test::mft::mapping::merge::S_PersonSource2
// {
//    lastName : String[1];
//    firstName : String[1];


// }

// ###Mapping
// import meta::pure::router::operations::*;
// import meta::pure::mft::tests::collection::*;
// import meta::pure::mapping::modelToModel::test::mft::mapping::merge::*;
// Mapping meta::pure::mapping::modelToModel::test::mft::mapping::merge::mergeTestMapping
// (
//    *Person : Operation
//                {
//              meta::pure::router::operations::merge_OperationSetImplementation_1__SetImplementation_MANY_([p1,p2],{s1:S_PersonSource1[1], s2:S_PersonSource2[1]| $s1.firstName ==  $s2.firstName })
//              }

//      Person[p1] : Pure
//             {
//                ~src S_PersonSource1
//                   firstName:$src.firstName,
//                   description:$src.description,
//                   birthDate:$src.birthDate,
//                   firm:$src.firm,
//                   address:$src.address
//             }

//   Address : Pure
//             {
//                ~src meta::pure::mapping::modelToModel::test::mft::S_Address
//                 street:$src.street

//             }  

            
//       Person[p2] : Pure
//             {
//                ~src S_PersonSource2
//                   lastName:$src.lastName
//             }
//    Firm : Pure
//             {
//                ~src S_Firm
//                   legalName:$src.legalName,
//                   optionalDescription:$src.optionalDescription,
//                   employees:$src.employees
//             }


// )
