// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::metamodel::relation::*;

native function <<PCT.function, PCT.platformOnly>> meta::pure::functions::relation::map<T,V>(rel:Relation<T>[1], f:Function<{T[1]->V[*]}>[1]):V[*];

function <<test.Test>> meta::pure::functions::relation::tests::map::testSimpleMap():Boolean[1]
{
    let res = #TDS
                val
                1
                3
                4
              #->map(x|$x.val->toOne() + 1);
    assertEquals([2,4,5], $res);
}

Primitive meta::pure::functions::relation::tests::map::SmallInt extends Integer
[
    $this < 5
]

function <<test.Test>> meta::pure::functions::relation::tests::map::testSimpleWithCastMap():Boolean[1]
{
    let res = #TDS
                val
                1
                3
                4
              #->cast(@Relation<(val:meta::pure::functions::relation::tests::map::SmallInt)>)->map(x|$x.val->toOne() + 1);
    assertEquals([2,4,5], $res);

    let tds = #TDS
                val
                1
                3
                7
                #;
    assertError(|$tds->cast(@Relation<(val:meta::pure::functions::relation::tests::map::SmallInt)>)->map(x|$x.val->toOne() + 1), 'Constraint :[0] violated in the Class SmallInt');
}