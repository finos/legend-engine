// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::metamodel::relation::*;

native function <<PCT.function>> meta::pure::functions::relation::extend<T,Z>(r:Relation<T>[1], f:FuncColSpec<{T[1]->Any[0..1]},Z>[1]):Relation<T+Z>[1];
native function <<PCT.function>> meta::pure::functions::relation::extend<T,Z>(r:Relation<T>[1], fs:FuncColSpecArray<{T[1]->Any[*]},Z>[1]):Relation<T+Z>[1];

native function <<PCT.function>> meta::pure::functions::relation::extend<T,K,V,R>(r:Relation<T>[1], agg:AggColSpec<{T[1]->K[0..1]},{K[*]->V[1]}, R>[1]):Relation<T+R>[1];
native function <<PCT.function>> meta::pure::functions::relation::extend<T,K,V,R>(r:Relation<T>[1], agg:AggColSpecArray<{T[1]->K[0..1]},{K[*]->V[1]}, R>[1]):Relation<T+R>[1];

native function <<PCT.function>> meta::pure::functions::relation::extend<T,Z,W,R>(r:Relation<T>[1], window:_Window<T>[1], f:FuncColSpec<{Relation<T>[1],_Window<T>[1],T[1]->Any[0..1]},R>[1]):Relation<T+R>[1];
native function <<PCT.function>> meta::pure::functions::relation::extend<T,Z,W,R>(r:Relation<T>[1], window:_Window<T>[1], f:FuncColSpecArray<{Relation<T>[1],_Window<T>[1],T[1]->Any[*]},R>[1]):Relation<T+R>[1];

native function <<PCT.function>> meta::pure::functions::relation::extend<T,K,V,R>(r:Relation<T>[1], window:_Window<T>[1], agg:AggColSpec<{Relation<T>[1],_Window<T>[1],T[1]->K[0..1]},{K[*]->V[1]}, R>[1]):Relation<T+R>[1];
native function <<PCT.function>> meta::pure::functions::relation::extend<T,K,V,R>(r:Relation<T>[1], window:_Window<T>[1], agg:AggColSpecArray<{Relation<T>[1],_Window<T>[1],T[1]->K[0..1]},{K[*]->V[1]}, R>[1]):Relation<T+R>[1];


function <<PCT.test>> meta::pure::functions::relation::tests::extend::testSimpleExtendStrShared<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  val, str
                  1, a
                  3, ewe
                  4, qw
                  5, wwe
                  6, weq
                #->extend(~name:c|$c.str->toOne() + $c.val->toOne()->toString())
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   val,str,name\n'+
                  '   1,a,a1\n'+
                  '   3,ewe,ewe3\n'+
                  '   4,qw,qw4\n'+
                  '   5,wwe,wwe5\n'+
                  '   6,weq,weq6\n'+
                  '#', $res->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::extend::testSimpleExtendInt<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  val, str
                  1, a
                  3, ewe
                  4, qw
                  5, wwe
                  6, weq
                #->extend(~name:c|$c.val->toOne() + 1)
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   val,str,name\n'+
                  '   1,a,2\n'+
                  '   3,ewe,4\n'+
                  '   4,qw,5\n'+
                  '   5,wwe,6\n'+
                  '   6,weq,7\n'+
                  '#', $res->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::extend::testSimpleExtendFloat<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
               | #TDS
                  val, doub
                  1, 1.2
                  3, 2.3
                  4, 4.2
                  5, 4.2
                  6, 4.5
                 #->extend(~name:c|$c.doub->toOne() + 1.0)
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   val,doub,name\n'+
                  '   1,1.2,2.2\n'+
                  '   3,2.3,3.3\n'+
                  '   4,4.2,5.2\n'+
                  '   5,4.2,5.2\n'+
                  '   6,4.5,5.5\n'+
                  '#', $res->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::extend::testSimpleMultipleColumns<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  val, str
                  1, a
                  3, ewe
                  4, qw
                  5, wwe
                  6, weq
                #->extend(~[name:c|$c.val->toOne() + 1, other:x|$x.str->toOne()+'_ext'])
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   val,str,name,other\n'+
                  '   1,a,2,a_ext\n'+
                  '   3,ewe,4,ewe_ext\n'+
                  '   4,qw,5,qw_ext\n'+
                  '   5,wwe,6,wwe_ext\n'+
                  '   6,weq,7,weq_ext\n'+
                  '#', $res->toString());
}


function <<PCT.test>> meta::pure::functions::relation::tests::extend::testOLAPAggNoWindow<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(~newCol:c|$c.id:y|$y->plus())
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   1,2,A,55\n'+
                  '   2,1,B,55\n'+
                  '   3,3,C,55\n'+
                  '   4,4,D,55\n'+
                  '   5,2,E,55\n'+
                  '   6,1,F,55\n'+
                  '   7,3,G,55\n'+
                  '   8,1,H,55\n'+
                  '   9,5,I,55\n'+
                  '   10,0,J,55\n'+
                  '#', $res->sort(~id->ascending())->toString());
}


function <<PCT.test>> meta::pure::functions::relation::tests::extend::testOLAPAggNoWindowMultipleColums<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(~[newCol:c|$c.id:y|$y->plus(), other:c|$c.grp:y|$y->plus()])
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol,other\n'+
                  '   1,2,A,55,22\n'+
                  '   2,1,B,55,22\n'+
                  '   3,3,C,55,22\n'+
                  '   4,4,D,55,22\n'+
                  '   5,2,E,55,22\n'+
                  '   6,1,F,55,22\n'+
                  '   7,3,G,55,22\n'+
                  '   8,1,H,55,22\n'+
                  '   9,5,I,55,22\n'+
                  '   10,0,J,55,22\n'+
                  '#', $res->sort(~id->ascending())->toString());
}


function <<PCT.test>> meta::pure::functions::relation::tests::extend::testOLAPAggWithPartitionWindow<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp), ~newCol:{p,w,r|$r.id}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   10,0,J,10\n'+
                  '   2,1,B,16\n'+
                  '   6,1,F,16\n'+
                  '   8,1,H,16\n'+
                  '   1,2,A,6\n'+
                  '   5,2,E,6\n'+
                  '   3,3,C,10\n'+
                  '   7,3,G,10\n'+
                  '   4,4,D,4\n'+
                  '   9,5,I,9\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::extend::testOLAPAggWithPartitionWindowMultipleColumns<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp), ~[newCol:{p,w,r|$r.id}:y|$y->plus(), other:{p,w,r|$r.grp}:y|$y->plus()])
               };

    let res =  $f->eval($expr);


    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol,other\n'+
                  '   10,0,J,10,0\n'+
                  '   2,1,B,16,3\n'+
                  '   6,1,F,16,3\n'+
                  '   8,1,H,16,3\n'+
                  '   1,2,A,6,4\n'+
                  '   5,2,E,6,4\n'+
                  '   3,3,C,10,6\n'+
                  '   7,3,G,10,6\n'+
                  '   4,4,D,4,4\n'+
                  '   9,5,I,9,5\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::extend::testOLAPAggWithOrderWindow<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~id->descending()), ~newCol:{p,w,r|$r.id}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   10,0,J,10\n'+
                  '   9,5,I,19\n'+
                  '   8,1,H,27\n'+
                  '   7,3,G,34\n'+
                  '   6,1,F,40\n'+
                  '   5,2,E,45\n'+
                  '   4,4,D,49\n'+
                  '   3,3,C,52\n'+
                  '   2,1,B,54\n'+
                  '   1,2,A,55\n'+
                  '#', $res->sort(~id->descending())->toString());
}


function <<PCT.test>> meta::pure::functions::relation::tests::extend::testOLAPAggStringWithPartitionAndOrderWindow<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp, ~id->descending()), ~newCol:{p,w,r|$r.name}:y|$y->joinStrings(''))
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   10,0,J,J\n'+
                  '   8,1,H,H\n'+
                  '   6,1,F,HF\n'+
                  '   2,1,B,HFB\n'+
                  '   5,2,E,E\n'+
                  '   1,2,A,EA\n'+
                  '   7,3,G,G\n'+
                  '   3,3,C,GC\n'+
                  '   4,4,D,D\n'+
                  '   9,5,I,I\n'+
                  '#', $res->sort([~grp->ascending(), ~id->descending()])->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::extend::testOLAPAggIntegerWithPartitionAndOrderWindow<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp, ~id->descending()), ~newCol:{p,w,r|$r.id}:y|$y->plus())
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   10,0,J,10\n'+
                  '   8,1,H,8\n'+
                  '   6,1,F,14\n'+
                  '   2,1,B,16\n'+
                  '   5,2,E,5\n'+
                  '   1,2,A,6\n'+
                  '   7,3,G,7\n'+
                  '   3,3,C,10\n'+
                  '   4,4,D,4\n'+
                  '   9,5,I,9\n'+
                  '#', $res->sort([~grp->ascending(), ~id->descending()])->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::extend::testOLAPAggWithPartitionAndOrderWindowMultipleColumns<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp, ~id->descending()), ~[newCol:{p,w,r|$r.name}:y|$y->joinStrings(''),other:{p,w,r|$r.id}:y|$y->plus()])
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol,other\n'+
                  '   10,0,J,J,10\n'+
                  '   8,1,H,H,8\n'+
                  '   6,1,F,HF,14\n'+
                  '   2,1,B,HFB,16\n'+
                  '   5,2,E,E,5\n'+
                  '   1,2,A,EA,6\n'+
                  '   7,3,G,G,7\n'+
                  '   3,3,C,GC,10\n'+
                  '   4,4,D,D,4\n'+
                  '   9,5,I,I,9\n'+
                  '#', $res->sort([~grp->ascending(), ~id->descending()])->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::extend::testOLAPWithPartitionAndOrderWindowMultipleColumns<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp, ~id->descending()), ~[newCol:{p,w,r|$p->lead($r).id}, other:{p,w,r| $p->first($w, $r).name}])
               };
               

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol,other\n'+
                  '   10,0,J,null,J\n'+
                  '   8,1,H,6,H\n'+
                  '   6,1,F,2,H\n'+
                  '   2,1,B,null,H\n'+
                  '   5,2,E,1,E\n'+
                  '   1,2,A,null,E\n'+
                  '   7,3,G,3,G\n'+
                  '   3,3,C,null,G\n'+
                  '   4,4,D,null,D\n'+
                  '   9,5,I,null,I\n'+
                  '#', $res->sort([~grp->ascending(), ~id->descending()])->toString());
}


function <<PCT.test>> meta::pure::functions::relation::tests::extend::testOLAPAggNoWindowChainedWithSimple<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(~newCol:c|$c.id:y|$y->plus())
                ->extend(~other:x|floor($x.newCol->toOne() / $x.id->toOne()))
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol,other\n'+
                  '   1,2,A,55,55\n'+
                  '   2,1,B,55,27\n'+
                  '   3,3,C,55,18\n'+
                  '   4,4,D,55,13\n'+
                  '   5,2,E,55,11\n'+
                  '   6,1,F,55,9\n'+
                  '   7,3,G,55,7\n'+
                  '   8,1,H,55,6\n'+
                  '   9,5,I,55,6\n'+
                  '   10,0,J,55,5\n'+
                  '#', $res->sort(~id->ascending())->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::extend::testOLAPWithMultiplePartitionsAndOrderWindowMultipleColumns<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, grp2, name
                  1, 2, 2, A
                  2, 1, 1, B
                  3, 3, 3, C
                  4, 4, 4, D
                  5, 2, 2, E
                  6, 1, 2, F
                  7, 3, 3, G
                  8, 1, 1, H
                  9, 5, 5, I
                  10, 0, 0, J
                #->extend(over(~[grp,grp2], ~id->descending()), ~[newCol:{p,w,r|$p->lead($r).id}, other:{p,w,r|$p->first($w,$r).name}])
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,grp2,name,newCol,other\n'+
                  '   10,0,0,J,null,J\n'+
                  '   8,1,1,H,2,H\n'+
                  '   2,1,1,B,null,H\n'+
                  '   6,1,2,F,null,F\n'+
                  '   5,2,2,E,1,E\n'+
                  '   1,2,2,A,null,E\n'+
                  '   7,3,3,G,3,G\n'+
                  '   3,3,3,C,null,G\n'+
                  '   4,4,4,D,null,D\n'+
                  '   9,5,5,I,null,I\n'+
                  '#', $res->sort([~grp->ascending(), ~grp2->ascending(), ~id->descending()])->toString());
}

