// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::metamodel::relation::*;

function <<PCT.function, functionType.NormalizeRequiredFunction>> meta::pure::functions::relation::eval<Z,T>(col:ColSpec<(?:Z)âŠ†T>[1], row:T[1]) : Z[*]
{
  $col->genericType().typeArguments->at(0).rawType->toOne()->cast(@RelationType<Any>).columns->toOne()->cast(@Column<Nil,Z|*>)->eval($row);
}

function <<PCT.test>> meta::pure::functions::relation::tests::evalColumn::testSimpleEvalColumn<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
  let expr = {
              | #TDS
                  id, code
                  -1, -4
                  2, 5
                  3, 3
                #->extend(~total: r| $r.id->toOne() + $r.code->toOne())->filter(row|eval(~total, $row)->toOne() < 0)->select(~[id,code,total]);
            };

  let res =  $f->eval($expr)->toOne();

  assertEquals( '#TDS\n'+
                '   id,code,total\n'+
                '   -1,-4,-5\n'+
                '#', $res->toString());
}
