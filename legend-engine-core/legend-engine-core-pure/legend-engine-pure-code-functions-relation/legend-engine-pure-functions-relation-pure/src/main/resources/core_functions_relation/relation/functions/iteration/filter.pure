// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::variant::convert::*;
import meta::pure::functions::variant::navigation::*;
import meta::pure::test::pct::*;
import meta::pure::metamodel::relation::*;

native function <<PCT.function>> meta::pure::functions::relation::filter<T>(rel:Relation<T>[1], f:Function<{T[1]->Boolean[1]}>[1]):Relation<T>[1];

function <<PCT.test>> meta::pure::functions::relation::tests::filter::testSimpleFilterShared<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                  |#TDS
                    val
                    1
                    3
                    4
                  #->filter(x|$x.val > 1)
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   val\n'+
                  '   3\n'+
                  '   4\n'+
                  '#', $res->sort(~val->ascending())->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::filter::testSimpleFilter_MultipleExpressions<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                  |
                    let a = #TDS
                              val
                              1
                              3
                              4
                              5
                            #;
                    let b = $a->filter(x|$x.val > 3);
                    $b->filter(x|$x.val > 4);
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   val\n'+
                  '   5\n'+
                  '#', $res->sort(~val->ascending())->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>> meta::pure::functions::relation::tests::filter::testVariantColumn_filterOnIndexExtractionValue<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
   let tds = #TDS
     id, payload:meta::pure::metamodel::variant::Variant
     1, "[1,2,3]"
     2, "[4,5,6]"
     3, "[7,8,9]"
     4, "[10,11,12]"
     5, "[13,14,15]"
   #;

   let expr = {|
                  $tds->filter(x | $x.payload->get(0)->to(@Integer) < 7)
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   id,payload\n'+
                '   1,[1,2,3]\n'+
                '   2,[4,5,6]\n'+
                '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>> meta::pure::functions::relation::tests::filter::testVariantColumn_filterOnKeyExtractionValue<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
   let tds = #TDS
     id, payload:meta::pure::metamodel::variant::Variant
     1, "{""boolean"":true,  ""integer"":1, ""string"":""hello""}"
     2, "{""boolean"":false, ""integer"":2, ""string"":""world""}"
     3, "{""boolean"":true,  ""integer"":3, ""string"":""world""}"
   #;

   let expr = {|
                  $tds->filter(x | $x.payload->get('boolean')->to(@Boolean)->toOne() && $x.payload->get('integer')->to(@Integer) == 1)
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   id,payload\n'+
                '   1,{"boolean":true,"integer":1,"string":"hello"}\n'+
                '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>> meta::pure::functions::relation::tests::filter::testVariantColumn_filterOutputFromLambda<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
   let tds = #TDS
     id, payload:meta::pure::metamodel::variant::Variant
     1, "[1,2,3]"
     2, "[4,5,6]"
     3, "[7,8,9]"
     4, "[10,11,12]"
     5, "[13,14,15]"
   #;

   let expr = {|
                  $tds->filter(x | $x.payload->toMany(@Integer)->filter(y | $y->mod(2) == 0)->size() == 2)
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   id,payload\n'+
                '   2,[4,5,6]\n'+
                '   4,[10,11,12]\n'+
                '#', $res->toString());
}