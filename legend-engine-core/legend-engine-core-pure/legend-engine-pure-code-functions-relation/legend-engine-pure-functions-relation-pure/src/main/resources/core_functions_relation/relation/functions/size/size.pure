// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::metamodel::relation::*;

native function <<PCT.function>> meta::pure::functions::relation::size<T>(rel:Relation<T>[1]):Integer[1];

function <<PCT.test>> meta::pure::functions::relation::tests::size::testSimpleSize<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
               | #TDS
                   val, str
                   1, a
                   3, ewe
                   4, qw
                 #->size();
              };

    let res =  $f->eval($expr)->toOne();

    assertEquals(3, $res);
}

function <<PCT.test>> meta::pure::functions::relation::tests::size::testSimpleSize_MultipleExpressions<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {| 
                let t = #TDS
                   val, str
                   1, a
                   3, ewe
                   4, qw
                 #;
                 $t->size();
              };

    let res =  $f->eval($expr)->toOne();

    assertEquals(3, $res);
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::relation::tests::size::testGroupBySize<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->groupBy(~[grp], ~[newCol : x | $x.name : y | $y->joinStrings(''), YoCol : x | $x.id : y | $y->plus()])
                ->size()
               };

    let res =  $f->eval($expr)->toOne();

    assertEquals(6, $res);
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::relation::tests::size::testGroupBySize_MultipleExpressions<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {|
                let t = #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #;
                let t2 = $t->groupBy(~[grp], ~[newCol : x | $x.name : y | $y->joinStrings(''), YoCol : x | $x.id : y | $y->plus()]);
                $t2->size();
               };

    let res =  $f->eval($expr)->toOne();

    assertEquals(6, $res);
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::size::testWindowSize<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp), ~newCol:{p,w,r|$r.id}:y|$y->plus())
                ->size();
               };

    let res =  $f->eval($expr)->toOne();

    assertEquals(10, $res);
}

function <<PCT.test>> meta::pure::functions::relation::tests::composition::test_Distinct_Size<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
  let expr = {
              | #TDS
                val, str, str2
                2, a, b
                3, a, b
                4, qw, b
                5, qw, c
                2, weq, c
              #->distinct(~[str, str2])->size()
            };

  let res = $f->eval($expr);

  assertEquals(4, $res);
}

function <<PCT.test>> meta::pure::functions::relation::tests::composition::test_Limit_Size<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
  let expr = {
              | #TDS
                val, str, str2
                2, a, b
                3, a, b
                4, qw, b
                5, qw, c
                2, weq, c
              #->limit(2)->size()
            };

  let res = $f->eval($expr);

  assertEquals(2, $res);
}

function <<PCT.test>> meta::pure::functions::relation::tests::composition::test_Slice_Size<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
  let expr = {
              | #TDS
                val, str, str2
                2, a, b
                3, a, b
                4, qw, b
                5, qw, c
                2, weq, c
              #->slice(2, 4)->size()
            };

  let res = $f->eval($expr);

  assertEquals(2, $res);
}

function <<PCT.test>> meta::pure::functions::relation::tests::size::testComparisonOperationAfterSize<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
               | #TDS
                   val, str
                   1, a
                   3, ewe
                   4, qw
                 #->size() > 0;
              };

    let res =  $f->eval($expr)->toOne();

    assertEquals(true, $res);
}

function <<PCT.test>> meta::pure::functions::relation::tests::size::testComparisonOperationAfterSize_MultipleExpressions<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {| 
                let t = #TDS
                   val, str
                   1, a
                   3, ewe
                   4, qw
                 #;
                 let s = $t->size(); 
                 $s > 0;
              };

    let res =  $f->eval($expr)->toOne();

    assertEquals(true, $res);
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::relation::tests::size::testSize_Relation_Aggregate<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  id, grp, name, employeeNumber
                  1, 2, A, 21
                  2, 1, B, 41
                  3, 3, C, 71
                  4, 4, D, 31
                  5, 2, E, 11
                  6, 1, F, 1
                  7, 3, G, 91
                  8, 1, H, 81
                  9, 5, I, 51
                  10, 0, J, 101
                #->groupBy(~grp, ~newCol : x | $x.employeeNumber : y | $y->size())
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   grp,newCol\n'+
                  '   0,1\n'+
                  '   1,3\n'+
                  '   2,2\n'+
                  '   3,2\n'+
                  '   4,1\n'+
                  '   5,1\n'+
                  '#', $res->sort(~grp->ascending())->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::size::testSize_Relation_Window<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp), ~newCol:{p,w,r|$r.id}:y|$y->size())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   10,0,J,1\n'+
                  '   2,1,B,3\n'+
                  '   6,1,F,3\n'+
                  '   8,1,H,3\n'+
                  '   1,2,A,2\n'+
                  '   5,2,E,2\n'+
                  '   3,3,C,2\n'+
                  '   7,3,G,2\n'+
                  '   4,4,D,1\n'+
                  '   9,5,I,1\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}
