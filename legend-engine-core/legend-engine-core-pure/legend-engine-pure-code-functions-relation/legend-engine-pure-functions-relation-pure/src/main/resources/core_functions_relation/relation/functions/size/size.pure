// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::metamodel::relation::*;

native function <<PCT.function>> meta::pure::functions::relation::size<T>(rel:Relation<T>[1]):Integer[1];

function <<PCT.test>> meta::pure::functions::relation::tests::size::testSimpleSize<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
               | #TDS
                   val, str
                   1, a
                   3, ewe
                   4, qw
                 #->size();
              };

    let res =  $f->eval($expr)->toOne();

    assertEquals(3, $res);
}

function <<PCT.test>> meta::pure::functions::relation::tests::size::testSimpleSize_MultipleExpressions<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {| 
                let t = #TDS
                   val, str
                   1, a
                   3, ewe
                   4, qw
                 #;
                 $t->size();
              };

    let res =  $f->eval($expr)->toOne();

    assertEquals(3, $res);
}

function <<PCT.test>> meta::pure::functions::relation::tests::size::testGroupBySize<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->groupBy(~[grp], ~[newCol : x | $x.name : y | $y->joinStrings(''), YoCol : x | $x.id : y | $y->plus()])
                ->size()
               };

    let res =  $f->eval($expr)->toOne();

    assertEquals(6, $res);
}

function <<PCT.test>> meta::pure::functions::relation::tests::size::testGroupBySize_MultipleExpressions<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {|
                let t = #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #;
                let t2 = $t->groupBy(~[grp], ~[newCol : x | $x.name : y | $y->joinStrings(''), YoCol : x | $x.id : y | $y->plus()]);
                $t2->size();
               };

    let res =  $f->eval($expr)->toOne();

    assertEquals(6, $res);
}

function <<PCT.test>> meta::pure::functions::relation::tests::size::testComparisonOperationAfterSize<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
               | #TDS
                   val, str
                   1, a
                   3, ewe
                   4, qw
                 #->size() > 0;
              };

    let res =  $f->eval($expr)->toOne();

    assertEquals(true, $res);
}

function <<PCT.test>> meta::pure::functions::relation::tests::size::testComparisonOperationAfterSize_MultipleExpressions<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {| 
                let t = #TDS
                   val, str
                   1, a
                   3, ewe
                   4, qw
                 #;
                 let s = $t->size(); 
                 $s > 0;
              };

    let res =  $f->eval($expr)->toOne();

    assertEquals(true, $res);
}