// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

Class meta::pure::functions::relation::_Range extends Frame
{
}

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    {
         doc.doc = ''
    }
    meta::pure::functions::relation::_range(offsetFrom:Number[1], offsetTo:Number[1]):_Range[1]
{
  assert($offsetFrom <= $offsetTo, 'Invalid window frame boundary - lower bound of window frame cannot be greater than the upper bound!');
  ^_Range(offsetFrom = ^FrameNumericValue(value=$offsetFrom), offsetTo = ^FrameNumericValue(value=$offsetTo));
}

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    {
         doc.doc = ''
    }
    meta::pure::functions::relation::_range(offsetFrom:meta::pure::functions::relation::UnboundedFrameValue[1], offsetTo:Number[1]):_Range[1]
{
  ^_Range(offsetFrom = $offsetFrom, offsetTo = ^FrameNumericValue(value=$offsetTo));
}

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    {
         doc.doc = ''
    }
    meta::pure::functions::relation::_range(offsetFrom:Number[1], offsetTo:meta::pure::functions::relation::UnboundedFrameValue[1]):_Range[1]
{
  ^_Range(offsetFrom = ^FrameNumericValue(value=$offsetFrom), offsetTo = $offsetTo);
}

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    {
         doc.doc = ''
    }
    meta::pure::functions::relation::_range(offsetFrom:meta::pure::functions::relation::UnboundedFrameValue[1], offsetTo:meta::pure::functions::relation::UnboundedFrameValue[1]):_Range[1]
{
  ^_Range(offsetFrom = $offsetFrom, offsetTo = $offsetTo);
}