// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::variant::*;
import meta::pure::functions::variant::convert::*;
import meta::pure::functions::variant::navigation::*;
import meta::pure::test::pct::*;
import meta::pure::metamodel::relation::*;
import meta::pure::functions::relation::*;
import meta::pure::functions::relation::tests::composition::*;
import meta::pure::functions::collection::*;

Class meta::pure::functions::relation::tests::composition::FirmTypeForCompositionTests
{
  legalName : String[1];
  employees : PersonTypeForCompositionTests[*];
}

Class meta::pure::functions::relation::tests::composition::PersonTypeForCompositionTests
{
  firstName : String[1];
  lastName  : String[1];
}

function <<PCT.test>> meta::pure::functions::relation::tests::composition::testExtendFilter<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
               | #TDS
                  val, str
                  1, a
                  3, ewe
                  4, qw
                  5, wwe
                  6, weq
                #->extend(~newCol:x|$x.str->toOne() + $x.val->toOne()->toString())
                 ->filter(x|$x.newCol == 'qw4');
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   val,str,newCol\n'+
                  '   4,qw,qw4\n'+
                  '#', $res->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::composition::testFilterPostProject<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {|
                     [
                        ^FirmTypeForCompositionTests
                        (
                            legalName = 'Firm X',
                            employees = [
                                ^PersonTypeForCompositionTests(firstName = 'Peter', lastName = 'Smith'),
                                ^PersonTypeForCompositionTests(firstName = 'John', lastName = 'Johnson'),
                                ^PersonTypeForCompositionTests(firstName = 'John', lastName = 'Hill'),
                                ^PersonTypeForCompositionTests(firstName = 'Anthony', lastName = 'Allen')
                            ]
                        ),
                        ^FirmTypeForCompositionTests
                        (
                            legalName = 'Firm A',
                            employees = [
                                ^PersonTypeForCompositionTests(firstName = 'Fabrice', lastName = 'Roberts')
                            ]
                        )
                     ]
                     ->project(~[
                        legalName : x | $x.legalName,
                        firstName : x | $x.employees.firstName
                     ])
                     ->filter(x | $x.legalName == 'Firm X');
                  };

        let res =  $f->eval($expr);

        assertEquals( '#TDS\n' +
                      '   legalName,firstName\n' +
                      '   Firm X,Anthony\n' +
                      '   Firm X,John\n' +
                      '   Firm X,John\n' +
                      '   Firm X,Peter\n' +
                      '#', $res->sort(~firstName->ascending())->toString());
}


function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::relation::tests::composition::test_Distinct_GroupBy<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
               | #TDS
                  val, str, str2
                  2, a, b
                  3, a, b
                  4, qw, b
                  5, qw, c
                  2, weq, c
                #->distinct(~[val, str])->groupBy(~str, ~newCol:x|$x.val:x|$x->plus());
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   str,newCol\n'+
                  '   a,5\n'+
                  '   qw,9\n'+
                  '   weq,2\n'+
                  '#', $res->sort(~str->ascending())->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::composition::test_Distinct_Filter<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
               | #TDS
                  val, str, str2
                  2, a, b
                  3, a, b
                  4, qw, b
                  5, qw, c
                  2, weq, c
                #->distinct(~[val, str])->filter(x|$x.val > 2)
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   val,str\n'+
                  '   3,a\n'+
                  '   4,qw\n'+
                  '   5,qw\n'+
                  '#', $res->sort(~val->ascending())->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::relation::tests::composition::test_GroupBy_GroupBy<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
               | #TDS
                  val, str, str2
                  2, a, b
                  3, a, b
                  4, qw, b
                  5, qw, c
                  2, weq, c
                #->groupBy(~[str, str2], ~newCol:x|$x.val:x|$x->plus())->groupBy(~[str], ~newCol2:x|$x.newCol:x|$x->plus())
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   str,newCol2\n'+
                  '   a,5\n'+
                  '   qw,9\n'+
                  '   weq,2\n'+
                  '#', $res->sort(~str->ascending())->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::relation::tests::composition::test_GroupBy_Distinct<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
               | #TDS
                  val, str, str2
                  2, a, b
                  3, a, b
                  4, qw, b
                  5, qw, c
                  2, weq, c
                #->groupBy(~[str, str2], ~newCol:x|$x.val:x|$x->plus())->distinct(~[str])
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   str\n'+
                  '   a\n'+
                  '   qw\n'+
                  '   weq\n'+
                  '#', $res->sort(~str->ascending())->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::composition::test_Pivot_Filter<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                    city, country, year, treePlanted
                    NYC, USA, 2011, 5000
                    NYC, USA, 2000, 5000
                    SAN, USA, 2000, 2000
                    SAN, USA, 2011, 100
                    LDN, UK, 2011, 3000
                    SAN, USA, 2011, 2500
                    NYC, USA, 2000, 10000
                    NYC, USA, 2012, 7600
                    NYC, USA, 2012, 7600
                 #->pivot(~[year], ~['newCol' : x | $x.treePlanted : y | $y->plus()])
                 ->cast(@Relation<(city:String,country:String,'\'2000__|__newCol\'':Integer,'\'2011__|__newCol\'':Integer,'\'2012__|__newCol\'':Integer)>)
                 ->filter(x|$x.city=='NYC')
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   city,country,\'2000__|__newCol\',\'2011__|__newCol\',\'2012__|__newCol\'\n' +
                  '   NYC,USA,15000,5000,15200\n' +
                  '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::relation::tests::composition::test_Extend_Filter_Select_ComplexGroupBy_Pivot<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                    city, country, year, treePlanted
                    NYC, USA, 2011, 5000
                    NYC, USA, 2000, 5000
                    SAN, USA, 2000, 2000
                    SAN, USA, 2011, 100
                    LDN, UK, 2011, 3000
                    SAN, USA, 2011, 2500
                    NYC, USA, 2000, 10000
                    NYC, USA, 2012, 7600
                    NYC, USA, 2012, 7600
                 #
                  ->extend(~yr:x|$x.year->toOne() - 2000)
                  ->filter(x|$x.yr > 10)
                  ->select(~[city,country,year,treePlanted])
                  ->groupBy(~[city,country], ~[year:x|$x.year:x|$x->plus(), treePlanted:x|$x.treePlanted:x|$x->plus()])
                  ->pivot(~[year], ~['newCol' : x|$x.treePlanted:x|$x->plus()])
                  ->cast(@Relation<(city:String,country:String,'\'2011__|__newCol\'':Integer,'\'4022__|__newCol\'':Integer,'\'6035__|__newCol\'':Integer)>)
                  ->sort(ascending(~city))
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   city,country,\'2011__|__newCol\',\'4022__|__newCol\',\'6035__|__newCol\'\n' +
                  '   LDN,UK,3000,null,null\n' +
                  '   NYC,USA,null,null,20200\n' +
                  '   SAN,USA,null,2600,null\n' +
                  '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::relation::tests::composition::test_Extend_Filter_Select_GroupBy_Pivot_Extend_Sort_Limit<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                    city, country, year, treePlanted
                    NYC, USA, 2011, 5000
                    NYC, USA, 2000, 5000
                    SAN, USA, 2000, 2000
                    SAN, USA, 2011, 100
                    LDN, UK, 2011, 3000
                    SAN, USA, 2011, 2500
                    NYC, USA, 2000, 10000
                    NYC, USA, 2012, 7600
                    NYC, USA, 2012, 7600
                 #
                  ->extend(~yr:x|$x.year->toOne() - 2000)
                  ->filter(x|$x.yr > 10)
                  ->select(~[city,country,year,treePlanted])
                  ->groupBy(~[year,city,country], ~treePlanted:x|$x.treePlanted:x|$x->plus())
                  ->pivot(~[year], ~['newCol' : x | $x.treePlanted : y | $y->plus()])
                  ->cast(@Relation<(city:String,country:String,'\'2011__|__newCol\'':Integer,'\'2012__|__newCol\'':Integer)>)
                  ->extend(~newCol:x|$x.city->toOne() + '_0')
                  ->sort(ascending(~city))
                  ->limit(3)
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   city,country,\'2011__|__newCol\',\'2012__|__newCol\',newCol\n' +
                  '   LDN,UK,3000,null,LDN_0\n' +
                  '   NYC,USA,5000,15200,NYC_0\n' +
                  '   SAN,USA,2600,null,SAN_0\n' +
                  '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::relation::tests::composition::test_Extend_Filter_Select_Pivot_GroupBy_Extend_Sort<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                    city, country, year, treePlanted
                    NYC, USA, 2011, 5000
                    NYC, USA, 2000, 5000
                    SAN, USA, 2000, 2000
                    SAN, USA, 2011, 100
                    LDN, UK, 2011, 3000
                    SAN, USA, 2011, 2500
                    NYC, USA, 2000, 10000
                    NYC, USA, 2012, 7600
                    NYC, USA, 2012, 7600
                 #
                  ->extend(~yr:x|$x.year->toOne() - 2000)
                  ->filter(x|$x.yr > 10)
                  ->select(~[city,country,year,treePlanted])
                  ->pivot(~[year], ~['newCol':x|$x.treePlanted:x|$x->plus()])
                  ->cast(@Relation<(city:String,country:String,'\'2011__|__newCol\'':Integer,'\'2012__|__newCol\'':Integer)>)
                  ->groupBy(~[country], ~['\'2011__|__newCol\'':x|$x.'\'2011__|__newCol\'':x|$x->plus(),'\'2012__|__newCol\'':x|$x.'\'2012__|__newCol\'':x|$x->plus()])
                  ->extend(~newCol:x|$x.country->toOne() + '_0')
                  ->sort(ascending(~country))
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   country,\'2011__|__newCol\',\'2012__|__newCol\',newCol\n' +
                  '   UK,3000,null,UK_0\n' +
                  '   USA,7600,15200,USA_0\n' +
                  '#', $res->toString());
}

// ------------------------------------- TO FIX -------------------------------------

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::relation::tests::composition::test_GroupBy_Filter<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
               | #TDS
                  val, str
                  2, a
                  3, a
                  4, qw
                  5, qw
                  2, weq
                #->groupBy(~str, ~newCol:x|$x.val:x|$x->plus())
                 ->filter(x|$x.newCol > 4);
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   str,newCol\n'+
                  '   a,5\n'+
                  '   qw,9\n'+
                  '#', $res->sort(~str->ascending())->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::relation::tests::composition::test_GroupBy_Distinct_Filter<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
               | #TDS
                  val, str, str2
                  2, a, b
                  2, a, b
                  4, qw, b
                  5, qw, c
                  2, weq, c
                #->groupBy(~[str, str2], ~newCol:x|$x.val:x|$x->plus())->distinct(~[str, newCol])->filter(x|$x.newCol > 2)
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   str,newCol\n'+
                  '   a,4\n'+
                  '   qw,4\n'+
                  '   qw,5\n'+
                  '#', $res->sort([~str->ascending(), ~newCol->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::relation::tests::composition::test_Distinct_GroupBy_Filter<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
               | #TDS
                  val, str, str2
                  2, a, b
                  2, a, b
                  4, qw, b
                  5, qw, c
                  2, weq, c
                #->distinct()->groupBy(~[str], ~newCol:x|$x.val:x|$x->plus())->filter(x|$x.newCol > 2)
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   str,newCol\n'+
                  '   qw,9\n'+
                  '#', $res->sort(~str->ascending())->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::composition::testWindowFunctionsAfterProject<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {|
        [
            ^PersonTypeForCompositionTests(firstName = 'Peter', lastName = 'Smith'),
            ^PersonTypeForCompositionTests(firstName = 'Peter', lastName = 'Johnson'),
            ^PersonTypeForCompositionTests(firstName = 'Peter', lastName = 'Hill'),
            ^PersonTypeForCompositionTests(firstName = 'Anthony', lastName = 'Allen'),
            ^PersonTypeForCompositionTests(firstName = 'Anthony', lastName = 'Roberts')
        ]->project(~[
            first : x | $x.firstName,
            last  : x | $x.lastName
        ])
        ->extend(over(~first, ~last->ascending()), ~[leadLast:{p,w,r|$p->lead($r).last}, lagLast:{p,w,r|$p->lag($r).last}])
        ->sort([ascending(~first), ascending(~last)]);
    };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   first,last,leadLast,lagLast\n'+
                  '   Anthony,Allen,Roberts,null\n'+
                  '   Anthony,Roberts,null,Allen\n'+
                  '   Peter,Hill,Johnson,null\n'+
                  '   Peter,Johnson,Smith,Hill\n'+
                  '   Peter,Smith,null,Johnson\n'+
                  '#', $res->toString());
}

function
  <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>>
  {
    doc.doc='Tests map and casting the values of the column before applying the aggregate function. Cast is treated as a noop in this case.'
  }
meta::pure::functions::relation::tests::composition::testGroupByCastBeforeAgg<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]{
  let expr = {
              | #TDS
                id, grp
                1, 2
                2, 1
                3, 3
                4, 4
                5, 2
                6, 1
                7, 3
                8, 1
                9, 5
                10, 0
              #->groupBy(~grp, ~newCol:x|$x.id:x|$x->cast(@Integer)->plus())
              };

  let res = $f->eval($expr);

  assertEquals( '#TDS\n'+
                '   grp,newCol\n'+
                '   0,10\n'+
                '   1,16\n'+
                '   2,6\n'+
                '   3,10\n'+
                '   4,4\n'+
                '   5,9\n'+
                '#', $res->sort(~grp->ascending())->toString());
}

function
  <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>>
  {
    doc.doc='Tests map and casting result of the aggregate function. Cast is treated as a noop in this case.'
  }
meta::pure::functions::relation::tests::composition::testGroupByCastAfterAgg<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]{
  let expr = {
              | #TDS
                id, grp
                1, 2
                2, 1
                3, 3
                4, 4
                5, 2
                6, 1
                7, 3
                8, 1
                9, 5
                10, 0
              #->groupBy(~grp, ~newCol:x|$x.id:x|$x->plus()->cast(@Integer))
              };

  let res = $f->eval($expr);

  assertEquals( '#TDS\n'+
                '   grp,newCol\n'+
                '   0,10\n'+
                '   1,16\n'+
                '   2,6\n'+
                '   3,10\n'+
                '   4,4\n'+
                '   5,9\n'+
                '#', $res->sort(~grp->ascending())->toString());
}

function
  <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>>
  {
    doc.doc='Tests olap with a partition window and casting result of the aggregate function. Cast is treated as a noop in this case.'
  }
meta::pure::functions::relation::tests::composition::testOLAPCastAggWithPartitionWindow<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp), ~newCol:{p,w,r|$r.id}:y|$y->plus()->cast(@Integer))
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   10,0,J,10\n'+
                  '   2,1,B,16\n'+
                  '   6,1,F,16\n'+
                  '   8,1,H,16\n'+
                  '   1,2,A,6\n'+
                  '   5,2,E,6\n'+
                  '   3,3,C,10\n'+
                  '   7,3,G,10\n'+
                  '   4,4,D,4\n'+
                  '   9,5,I,9\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}

function
  <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>>
  {
    doc.doc='Tests olap with a partition window and casting the values of the column before applying the aggregate function. Cast is treated as a noop in this case.'
  }
meta::pure::functions::relation::tests::composition::testOLAPAggCastWithPartitionWindow<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp), ~newCol:{p,w,r|$r.id}:y|$y->cast(@Integer)->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   10,0,J,10\n'+
                  '   2,1,B,16\n'+
                  '   6,1,F,16\n'+
                  '   8,1,H,16\n'+
                  '   1,2,A,6\n'+
                  '   5,2,E,6\n'+
                  '   3,3,C,10\n'+
                  '   7,3,G,10\n'+
                  '   4,4,D,4\n'+
                  '   9,5,I,9\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}

function
  <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>>
  {
    doc.doc='Tests olap with a partition window and casting the values of the extract function before applying the aggregate function. Cast is treated as a noop in this case.'
  }
meta::pure::functions::relation::tests::composition::testOLAPCastExtractAggWithPartitionWindow<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp), ~newCol:{p,w,r|$r.id->cast(@Integer)}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   10,0,J,10\n'+
                  '   2,1,B,16\n'+
                  '   6,1,F,16\n'+
                  '   8,1,H,16\n'+
                  '   1,2,A,6\n'+
                  '   5,2,E,6\n'+
                  '   3,3,C,10\n'+
                  '   7,3,G,10\n'+
                  '   4,4,D,4\n'+
                  '   9,5,I,9\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}

function
  <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>>
  {
    doc.doc='Tests olap with a partition window, casting the values of the extract function before applying the aggregate function, and casting result of the aggregate function. Cast is treated as a noop in this case.'
  }
meta::pure::functions::relation::tests::composition::testOLAPCastExtractCastAggWithPartitionWindow<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp), ~newCol:{p,w,r|$r.id->cast(@Integer)}:y|$y->plus()->cast(@Integer))
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   10,0,J,10\n'+
                  '   2,1,B,16\n'+
                  '   6,1,F,16\n'+
                  '   8,1,H,16\n'+
                  '   1,2,A,6\n'+
                  '   5,2,E,6\n'+
                  '   3,3,C,10\n'+
                  '   7,3,G,10\n'+
                  '   4,4,D,4\n'+
                  '   9,5,I,9\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::composition::testProjectDistinct<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
  let tds = #TDS
                id, name
                1, george
                1, George
                1, Sachin
                2, David
              #;

  let expr = {|$tds->project(~[
                    id: x | $x.id,
                    name: x | $x.name->toOne()->toLower()
                ])
                ->distinct();
    };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,name\n'+
                  '   1,george\n'+
                  '   1,sachin\n'+
                  '   2,david\n'+
                  '#', $res->sort([~id->ascending(), ~name->ascending()])->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::composition::testProjectJoinWithProjectProject<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
  let tds = #TDS
              id, name
              1, George
              2, Pierre
              3, Sachin
              4, David
            #;

  let tds2 = #TDS
              id, col, other
              1, More George 1, 1
              1, More George 2, 2
              4, More David, 1
            #;

  let expr = {|$tds->project(~[id1 : x | $x.id, name1 : x | $x.name])->join($tds2->project(~[id2 : x | $x.id, col : x | $x.col, other : x | $x.other]), JoinKind.INNER, {x,y| $x.id1 == $y.id2})->project(~[id : x | $x.id1, name : x | $x.col])};
  let res =  $f->eval($expr);

  assertEquals( '#TDS\n'+
                '   id,name\n'+
                '   1,More George 1\n'+
                '   1,More George 2\n'+
                '   4,More David\n'+
                '#', $res->sort([~id->ascending(),~name->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>> meta::pure::functions::relation::tests::composition::testVariantArrayColumn_sort<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
   let tds = #TDS
     id, payload:meta::pure::metamodel::variant::Variant
     1, "[2,1,3]"
     2, "[5,6,4]"
     3, "[9,8,7]"
     4, "[10,11,12]"
     5, "[15,13,14]"
   #;

   let expr = {|
                  $tds->extend(~sorted:x | $x.payload->toMany(@Integer)->sort()->toVariant())
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   id,payload,sorted\n'+
                '   1,[2,1,3],[1,2,3]\n'+
                '   2,[5,6,4],[4,5,6]\n'+
                '   3,[9,8,7],[7,8,9]\n'+
                '   4,[10,11,12],[10,11,12]\n'+
                '   5,[15,13,14],[13,14,15]\n'+
                '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>> meta::pure::functions::relation::tests::composition::testVariantArrayColumn_reverse<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
   let tds = #TDS
     id, payload:meta::pure::metamodel::variant::Variant
     1, "[1,2,3]"
     2, "[4,5,6]"
     3, "[7,8,9]"
     4, "[10,11,12]"
     5, "[13,14,15]"
   #;

   let expr = {|
                  $tds->extend(~reversed:x | $x.payload->toMany(@Integer)->reverse()->toVariant())
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   id,payload,reversed\n'+
                '   1,[1,2,3],[3,2,1]\n'+
                '   2,[4,5,6],[6,5,4]\n'+
                '   3,[7,8,9],[9,8,7]\n'+
                '   4,[10,11,12],[12,11,10]\n'+
                '   5,[13,14,15],[15,14,13]\n'+
                '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>>
{
  doc.doc='Extends a given TDS where the new column value is extracted from a variant array using the value\'s index number and then reference the new column in a filter expression.'
}
meta::pure::functions::relation::tests::composition::testVariantColumn_extend_indexExtraction_filter<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
   let tds = #TDS
     id, payload:meta::pure::metamodel::variant::Variant
     1, "[1,2,3]"
     2, "[4,5,6]"
     3, "[7,8,9]"
     4, "[10,11,12]"
     5, "[13,14,15]"
   #;

   let expr = {|
                  $tds->extend(~atCol0:x | $x.payload->get(0)->to(@Integer))
                      ->filter(x | $x.atCol0 < 7)
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   id,payload,atCol0\n'+
                '   1,[1,2,3],1\n'+
                '   2,[4,5,6],4\n'+
                '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>>
{
  doc.doc='Filter the given TDS by inspecting the values of a variant array.  The values are inspected calling another function, demonstrating function composition when operating on variants.'
}
meta::pure::functions::relation::tests::composition::testVariantColumn_functionComposition<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
   let tds = #TDS
     id, payload:meta::pure::metamodel::variant::Variant
     1, "[1,2,3]"
     2, "[4,5,6]"
     3, "[7,8,9]"
     4, "[10,11,12]"
     5, "[13,14,15]"
   #;

   let expr = {|
                  $tds->filter(x | $x.payload->toMany(@Integer)->meta::pure::functions::relation::tests::composition::testVariantColumn_functionComposition_filterValues())
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   id,payload\n'+
                '   2,[4,5,6]\n'+
                '   4,[10,11,12]\n'+
                '#', $res->toString());
}

function meta::pure::functions::relation::tests::composition::testVariantColumn_functionComposition_filterValues(val: Integer[*]):Boolean[1]
{
  $val->filter(y | $y->mod(2) == 0)->size() == 2;
}

function
  <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>>
  {
    doc.doc='Qualify grammar should be produced instead of subselect.'
  }
meta::pure::functions::relation::tests::composition::testExtendWindowFilter<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
  let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp), ~newCol:{p,w,r|$r.id}:y|$y->plus())->filter(x|$x.newCol > 9 && $x.grp == 1)
               };

  let res =  $f->eval($expr);

  assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   2,1,B,16\n'+
                  '   6,1,F,16\n'+
                  '   8,1,H,16\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}

function
  <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation, PCTRelationQualifier.olap>>
  {
    doc.doc='Produces qualify and having grammar together.'
  }
meta::pure::functions::relation::tests::composition::testGroupByFilterExtendFilter<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, rank
                  1, A, 1
                  2, A, 1
                  3, B, 2
                  4, D, 3
                  5, B, 2
                  6, A, 1
                  7, C, 4
                  8, A, 2
                  9, C, 3
                  10, D, 1
                #->groupBy(~[grp, rank], ~sumId:x|$x.id:x|$x->plus())
                 ->filter(x|$x.rank <= 2)
                 ->extend(over(~grp), ~sumRank:{p,w,r|$r.rank}:y|$y->plus())
                 ->filter(x|$x.sumRank == 3)
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   grp,rank,sumId,sumRank\n'+
                  '   A,1,9,3\n'+
                  '   A,2,8,3\n'+
                  '#', $res->sort(~rank->ascending())->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::composition::testMixColumnNamesRenameFilter<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
  let expr = {
                | #TDS
                  colOneNum, Col_two_letter, _col_3Mix
                  1, A, 1
                  2, A, 1
                  3, B, 2
                  4, D, 3
                  5, B, 2
                  6, A, 1
                  7, C, 4
                  8, A, 2
                  9, C, 3
                  10, D, 1
                #->rename(~colOneNum, ~_col_one_num)
                 ->rename(~Col_two_letter, ~colTwoLetter)
                 ->rename(~_col_3Mix, ~Col_3mix)
                 ->filter(x|$x._col_one_num > 2 && $x.colTwoLetter == 'C' && $x.Col_3mix == 3)
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   _col_one_num,colTwoLetter,Col_3mix\n'+
                  '   9,C,3\n'+
                  '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation>> meta::pure::functions::relation::tests::composition::testMixColumnNamesRenameExtend<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
  let expr = {
                | #TDS
                  colOneNum, _Col_two_letter, col_3Mix
                  1, A, 1
                  2, A, 1
                  3, B, 2
                  4, D, 3
                  5, B, 2
                  6, A, 1
                  7, C, 4
                  8, A, 2
                  9, C, 3
                  10, D, 1
                #->rename(~colOneNum, ~col_one_num)
                 ->rename(~_Col_two_letter, ~colTwoLetter)
                 ->rename(~col_3Mix, ~_Col_3mix)
                 ->extend(~newCol:c|$c.col_one_num->toOne()->toString() + $c.colTwoLetter->toOne()->toString() + $c._Col_3mix->toOne()->toString())
                 ->rename(~newCol, ~_new_col)
                 ->filter(x|$x._new_col->toOne()->toString()->contains('A'))
                 ->rename(~_new_col, ~Result)
                 ->select(~[col_one_num, colTwoLetter, Result])
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   col_one_num,colTwoLetter,Result\n'+
                  '   1,A,1A1\n'+
                  '   2,A,2A1\n'+
                  '   6,A,6A1\n'+
                  '   8,A,8A2\n'+
                  '#', $res->sort(~col_one_num->ascending())->toString());
}

function <<PCT.test, PCTRelationQualifier.relation>> meta::pure::functions::relation::tests::composition::testExtendFilterOutNull<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
  let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 1, 10
                  0, null, 30
                  100, 1, 10
                  100, 2, 20
                  100, null, 20
                  100, 3, 30
                  100, null, 30
                  200, 1, 10
                  200, 1, 10
                  200, null, 10
                  200, null, 20
                  200, 3, 30
                  200, 3, 30
                  300, 1, 10
                  300, 2, 20
                #->extend(over(~p), ~newCol:{p,w,r|$r.i}:y|$y->plus())->filter(x|$x.o->isNotEmpty())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,newCol\n'+
                  '   300,2,20,30\n'+
                  '   300,1,10,30\n'+
                  '   200,3,30,80\n'+
                  '   200,3,30,80\n'+
                  '   200,1,10,80\n'+
                  '   200,1,10,80\n'+
                  '   100,3,30,60\n'+
                  '   100,2,20,60\n'+
                  '   100,1,10,60\n'+
                  '   0,1,10,20\n'+
                  '   0,1,10,20\n'+
                  '#', $res->sort([~p->descending(), ~o->descending(), ~i->descending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation>> meta::pure::functions::relation::tests::composition::testExtendJoinStringOnNull<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, null
                  3, 3, C
                  4, 4, V
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, null
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp), ~newCol:{p,w,r|$r.name}:y|$y->joinStrings(':'))
               };


    let res =  $f->eval($expr)->extend(~newColSorted:r|$r.newCol->toOne()->split(':')->sort()->joinStrings(''))->select(~[id, grp, name, newColSorted]);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newColSorted\n'+
                  '   10,0,J,J\n'+
                  '   2,1,null,F\n'+
                  '   6,1,F,F\n'+
                  '   8,1,null,F\n'+
                  '   1,2,A,AE\n'+
                  '   5,2,E,AE\n'+
                  '   3,3,C,CG\n'+
                  '   7,3,G,CG\n'+
                  '   4,4,V,V\n'+
                  '   9,5,I,I\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation>> meta::pure::functions::relation::tests::composition::testExtendAddOnNull<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp
                  1, 2
                  null, 1
                  3, 3
                  4, 4
                  5, 2
                  null, 1
                  7, 3
                  8, 1
                  9, 5
                  null, 0
                #->extend(over(~grp), ~newCol:{p,w,r|$r.id}:y|$y->plus())
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,newCol\n'+
                  '   null,0,null\n'+
                  '   8,1,8\n'+
                  '   null,1,8\n'+
                  '   null,1,8\n'+
                  '   1,2,6\n'+
                  '   5,2,6\n'+
                  '   3,3,10\n'+
                  '   7,3,10\n'+
                  '   4,4,4\n'+
                  '   9,5,9\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::composition::testGroupByOnNull<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp
                  1, 2
                  2, null
                  5, 2
                  2, null
                  8, null
                  9, 4
                  2, 0
                #->groupBy(~grp, ~newCol:x|$x.id:x|$x->plus());
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   grp,newCol\n'+
                  '   0,2\n'+
                  '   2,6\n'+
                  '   4,9\n'+
                  '   null,12\n'+
                  '#', $res->sort([~grp->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>> meta::pure::functions::relation::tests::composition::testVariant_if<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
   let tds = #TDS
     id, array1:meta::pure::metamodel::variant::Variant, array2:meta::pure::metamodel::variant::Variant
     1, "[2,1,3]", "[-1,-2,-3]"
     2, "[5,6,4]", "[-5,-6,-4]"
     3, "[9,8,7]", "[-9,-8,-7]"
     4, "[10,11,12]", "[-10,-11,-12]"
     5, "[15,13,14]", "[-15,-13,-14]"
   #;

   let expr = {|
                  $tds->extend(~ifOutput:x | if($x.id->toOne()->meta::pure::functions::math::mod(2) == 0, |$x.array1, |$x.array2))
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   id,array1,array2,ifOutput\n'+
                '   1,[2,1,3],[-1,-2,-3],[-1,-2,-3]\n'+
                '   2,[5,6,4],[-5,-6,-4],[5,6,4]\n'+
                '   3,[9,8,7],[-9,-8,-7],[-9,-8,-7]\n'+
                '   4,[10,11,12],[-10,-11,-12],[10,11,12]\n'+
                '   5,[15,13,14],[-15,-13,-14],[-15,-13,-14]\n'+
                '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>> meta::pure::functions::relation::tests::composition::testVariantColumn_isEmpty<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, payload:meta::pure::metamodel::variant::Variant
                  0, "[]"
                  1, "[1]"
                  2, "[2,3,4]"
                  3, "null"
                #->extend(~empty : x | $x.payload->toMany(@Integer)->isEmpty());
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   id,payload,empty\n'+
                '   0,[],true\n'+
                '   1,[1],false\n'+
                '   2,[2,3,4],false\n'+
                '   3,null,true\n'+
                '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>> meta::pure::functions::relation::tests::composition::testVariantColumn_isNotEmpty<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, payload:meta::pure::metamodel::variant::Variant
                  0, "[]"
                  1, "[1]"
                  2, "[2,3,4]"
                  3, "null"
                #->extend(~notEmpty : x | $x.payload->toMany(@Integer)->isNotEmpty());
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   id,payload,notEmpty\n'+
                '   0,[],false\n'+
                '   1,[1],true\n'+
                '   2,[2,3,4],true\n'+
                '   3,null,false\n'+
                '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>> meta::pure::functions::relation::tests::composition::testVariantColumn_indexOf<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  val, payload:meta::pure::metamodel::variant::Variant
                  1, "[1,2,3]"
                  3, "[1,2,3]"
                  4, "[1,2,3]"
                  5, "null"
                #->extend(~index : x | $x.payload->toMany(@Integer)->indexOf($x.val->toOne()));
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   val,payload,index\n'+
                '   1,[1,2,3],0\n'+
                '   3,[1,2,3],2\n'+
                '   4,[1,2,3],-1\n'+
                '   5,null,-1\n'+
                '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>> meta::pure::functions::relation::tests::composition::testVariantColumn_slice<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, payload:meta::pure::metamodel::variant::Variant, fromRow, toRow
                  0, "null", 1, 2
                  1, "[1,2,3,4,5,6]", 2, 3
                  2, "[1,2,3,4,5,6]", 0, 4
                  3, "[1,2,3,4,5,6]", -3, -1
                #->extend(~sliced : x | $x.payload->toMany(@Integer)->slice($x.fromRow->toOne(), $x.toRow->toOne())->toVariant());
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   id,payload,fromRow,toRow,sliced\n'+
                '   0,null,1,2,null\n'+
                '   1,[1,2,3,4,5,6],2,3,[3]\n'+
                '   2,[1,2,3,4,5,6],0,4,[1,2,3,4]\n'+
                '   3,[1,2,3,4,5,6],-3,-1,[]\n'+
                '#', $res->toString());
}

function <<PCTRelationQualifier.relation, PCT.test>> meta::pure::functions::relation::tests::composition::testProjectOfComputedColumn_withCast<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  val, val2
                  1, 2
                  3, 5
                  4, 9
                  5, 14
                  6, 20
                #->project(~[
                  val3:c|$c.val->toOne() + $c.val2->toOne()
                ])->cast(@Relation<(val3:Integer[1])>)
              };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   val3\n'+
                  '   3\n'+
                  '   8\n'+
                  '   13\n'+
                  '   19\n'+
                  '   26\n'+
                  '#', $res->sort([~val3->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>> meta::pure::functions::relation::tests::composition::testVariantColumn_contains<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, payload:meta::pure::metamodel::variant::Variant, val
                  1, "[1,2,3]", 1
                  2, "[1,2,3]", 4
                  3, "null", 0
                #->extend(~contains : x | $x.payload->toMany(@Integer)->contains($x.val->toOne()));
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   id,payload,val,contains\n'+
                '   1,[1,2,3],1,true\n'+
                '   2,[1,2,3],4,false\n'+
                '   3,null,0,false\n'+
                '#', $res->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTCoreQualifier.variant>> meta::pure::functions::relation::tests::composition::testVariantColumn_distinct_removeDuplicates<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, payload:meta::pure::metamodel::variant::Variant
                  1, "[1,2,3]"
                  2, "[1,2,3,4,4,3,2,3,4,1,2]"
                  3, "null"
                #->extend(~distinct : x | $x.payload->toMany(@Integer)->distinct()->sort()->toVariant())
                 ->extend(~removeDuplicates : x | $x.payload->toMany(@Integer)->removeDuplicates()->sort()->toVariant());
              };

   let res =  $f->eval($expr);

   assertEquals('#TDS\n'+
                '   id,payload,distinct,removeDuplicates\n'+
                '   1,[1,2,3],[1,2,3],[1,2,3]\n'+
                '   2,[1,2,3,4,4,3,2,3,4,1,2],[1,2,3,4],[1,2,3,4]\n'+
                '   3,null,null,null\n'+
                '#', $res->toString());
}