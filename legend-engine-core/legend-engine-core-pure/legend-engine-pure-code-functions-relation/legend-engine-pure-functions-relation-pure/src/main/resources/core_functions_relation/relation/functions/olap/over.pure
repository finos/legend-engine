// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::metamodel::relation::*;

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    meta::pure::functions::relation::over<T>(cols:String[*], sortInfo:SortInfo<(?:?)⊆T>[*], frame:Frame[0..1]):_Window<T>[1]
{
  ^_Window<T>
  (
    partition=$cols,
    sortInfo=$sortInfo,
    frame = $frame
  );
}

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    meta::pure::functions::relation::over<T>(cols:ColSpec<(?:?)⊆T>[1]):_Window<T>[1]
{
  ^_Window<T>
  (
    partition=$cols.name
  );
}

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    meta::pure::functions::relation::over<T>(cols:ColSpec<(?:?)⊆T>[1], rows:Rows[1]):_Window<T>[1]
{
  ^_Window<T>
  (
    partition=$cols.name,
    frame = $rows
  );
}

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    meta::pure::functions::relation::over<T>(cols:ColSpecArray<(?:?)⊆T>[1]):_Window<T>[1]
{
  ^_Window<T>
  (
    partition=$cols.names
  );
}

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    meta::pure::functions::relation::over<T>(cols:ColSpecArray<(?:?)⊆T>[1], rows:Rows[1]):_Window<T>[1] 
{
  ^_Window<T>
  (
    partition=$cols.names,
    frame = $rows
  );
}

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    meta::pure::functions::relation::over<T>(sortInfo:SortInfo<(?:?)⊆T>[*]):_Window<T>[1]
{
  over([],$sortInfo,[])
}

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    meta::pure::functions::relation::over<T>(cols:ColSpec<(?:?)⊆T>[1], sortInfo:SortInfo<(?:?)⊆T>[*]):_Window<T>[1]
{
  over($cols.name,$sortInfo,[])
}

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    meta::pure::functions::relation::over<T>(cols:ColSpec<(?:?)⊆T>[1], sortInfo:SortInfo<(?:?)⊆T>[*], rows:Rows[1]):_Window<T>[1]
{
  over($cols.name,$sortInfo,$rows)
}

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    meta::pure::functions::relation::over<T>(cols:ColSpecArray<(?:?)⊆T>[1], sortInfo:SortInfo<(?:?)⊆T>[*]):_Window<T>[1]
{
  over($cols.names,$sortInfo,[])
}

function
    <<functionType.NormalizeRequiredFunction,
    PCT.function>>
    meta::pure::functions::relation::over<T>(cols:ColSpecArray<(?:?)⊆T>[1], sortInfo:SortInfo<(?:?)⊆T>[*], rows:Rows[1]):_Window<T>[1]
{
  over($cols.names,$sortInfo,$rows)
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_UnboundedPreceding_CurrentRow<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, [~o->ascending(), ~i->ascending()], rows(meta::pure::functions::relation::unbounded(), 0)), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,10\n'+
                  '   0,2,20,30\n'+
                  '   0,3,30,60\n'+
                  '   100,1,10,10\n'+
                  '   100,2,5,15\n'+
                  '   100,2,30,45\n'+
                  '   100,3,11,56\n'+
                  '   100,3,120,176\n'+
                  '   200,1,200,200\n'+
                  '   200,1,10000,10200\n'+
                  '   200,1,808080,818280\n'+
                  '   200,2,33333,851613\n'+
                  '   200,3,0,851613\n'+
                  '   200,3,4,851617\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_CurrentRow_UnboundedFollowing<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, [~o->ascending(), ~i->ascending()], rows(0, meta::pure::functions::relation::unbounded())), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,60\n'+
                  '   0,2,20,50\n'+
                  '   0,3,30,30\n'+
                  '   100,1,10,176\n'+
                  '   100,2,5,166\n'+
                  '   100,2,30,161\n'+
                  '   100,3,11,131\n'+
                  '   100,3,120,120\n'+
                  '   200,1,200,851617\n'+
                  '   200,1,10000,851417\n'+
                  '   200,1,808080,841417\n'+
                  '   200,2,33333,33337\n'+
                  '   200,3,0,4\n'+
                  '   200,3,4,4\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_UnboundedPreceding_UnboundedFollowing<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, [~o->ascending(), ~i->ascending()], rows(meta::pure::functions::relation::unbounded(), meta::pure::functions::relation::unbounded())), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,60\n'+
                  '   0,2,20,60\n'+
                  '   0,3,30,60\n'+
                  '   100,1,10,176\n'+
                  '   100,2,5,176\n'+
                  '   100,2,30,176\n'+
                  '   100,3,11,176\n'+
                  '   100,3,120,176\n'+
                  '   200,1,200,851617\n'+
                  '   200,1,10000,851617\n'+
                  '   200,1,808080,851617\n'+
                  '   200,2,33333,851617\n'+
                  '   200,3,0,851617\n'+
                  '   200,3,4,851617\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_NPreceding_NPreceding<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, [~o->ascending(), ~i->ascending()], rows(-2, -1)), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,null\n'+
                  '   0,2,20,10\n'+
                  '   0,3,30,30\n'+
                  '   100,1,10,null\n'+
                  '   100,2,5,10\n'+
                  '   100,2,30,15\n'+
                  '   100,3,11,35\n'+
                  '   100,3,120,41\n'+
                  '   200,1,200,null\n'+
                  '   200,1,10000,200\n'+
                  '   200,1,808080,10200\n'+
                  '   200,2,33333,818080\n'+
                  '   200,3,0,841413\n'+
                  '   200,3,4,33333\n'+
                  '   300,1,0,null\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_NPreceding_NFollowing<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, [~o->ascending(), ~i->ascending()], rows(-1, 1)), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,30\n'+
                  '   0,2,20,60\n'+
                  '   0,3,30,50\n'+
                  '   100,1,10,15\n'+
                  '   100,2,5,45\n'+
                  '   100,2,30,46\n'+
                  '   100,3,11,161\n'+
                  '   100,3,120,131\n'+
                  '   200,1,200,10200\n'+
                  '   200,1,10000,818280\n'+
                  '   200,1,808080,851413\n'+
                  '   200,2,33333,841413\n'+
                  '   200,3,0,33337\n'+
                  '   200,3,4,4\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_NFollowing_NFollowing<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, [~o->ascending(), ~i->ascending()], rows(1, 2)), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,50\n'+
                  '   0,2,20,30\n'+
                  '   0,3,30,null\n'+
                  '   100,1,10,35\n'+
                  '   100,2,5,41\n'+
                  '   100,2,30,131\n'+
                  '   100,3,11,120\n'+
                  '   100,3,120,null\n'+
                  '   200,1,200,818080\n'+
                  '   200,1,10000,841413\n'+
                  '   200,1,808080,33333\n'+
                  '   200,2,33333,4\n'+
                  '   200,3,0,4\n'+
                  '   200,3,4,null\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,null\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_UnboundedPreceding_NPreceding<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, [~o->ascending(), ~i->ascending()], rows(meta::pure::functions::relation::unbounded(), -1)), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,null\n'+
                  '   0,2,20,10\n'+
                  '   0,3,30,30\n'+
                  '   100,1,10,null\n'+
                  '   100,2,5,10\n'+
                  '   100,2,30,15\n'+
                  '   100,3,11,45\n'+
                  '   100,3,120,56\n'+
                  '   200,1,200,null\n'+
                  '   200,1,10000,200\n'+
                  '   200,1,808080,10200\n'+
                  '   200,2,33333,818280\n'+
                  '   200,3,0,851613\n'+
                  '   200,3,4,851613\n'+
                  '   300,1,0,null\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_UnboundedPreceding_NFollowing<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, [~o->ascending(), ~i->ascending()], rows(meta::pure::functions::relation::unbounded(), 1)), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,30\n'+
                  '   0,2,20,60\n'+
                  '   0,3,30,60\n'+
                  '   100,1,10,15\n'+
                  '   100,2,5,45\n'+
                  '   100,2,30,56\n'+
                  '   100,3,11,176\n'+
                  '   100,3,120,176\n'+
                  '   200,1,200,10200\n'+
                  '   200,1,10000,818280\n'+
                  '   200,1,808080,851613\n'+
                  '   200,2,33333,851613\n'+
                  '   200,3,0,851617\n'+
                  '   200,3,4,851617\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_NPreceding_UnboundedFollowing<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, [~o->ascending(), ~i->ascending()], rows(-1, meta::pure::functions::relation::unbounded())), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,60\n'+
                  '   0,2,20,60\n'+
                  '   0,3,30,50\n'+
                  '   100,1,10,176\n'+
                  '   100,2,5,176\n'+
                  '   100,2,30,166\n'+
                  '   100,3,11,161\n'+
                  '   100,3,120,131\n'+
                  '   200,1,200,851617\n'+
                  '   200,1,10000,851617\n'+
                  '   200,1,808080,851417\n'+
                  '   200,2,33333,841417\n'+
                  '   200,3,0,33337\n'+
                  '   200,3,4,4\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_NFollowing_UnboundedFollowing<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, [~o->ascending(), ~i->ascending()], rows(1, meta::pure::functions::relation::unbounded())), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,50\n'+
                  '   0,2,20,30\n'+
                  '   0,3,30,null\n'+
                  '   100,1,10,166\n'+
                  '   100,2,5,161\n'+
                  '   100,2,30,131\n'+
                  '   100,3,11,120\n'+
                  '   100,3,120,null\n'+
                  '   200,1,200,851417\n'+
                  '   200,1,10000,841417\n'+
                  '   200,1,808080,33337\n'+
                  '   200,2,33333,4\n'+
                  '   200,3,0,4\n'+
                  '   200,3,4,null\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,null\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_CurrentRow_CurrentRow<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, [~o->ascending(), ~i->ascending()], rows(0, 0)), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,10\n'+
                  '   0,2,20,20\n'+
                  '   0,3,30,30\n'+
                  '   100,1,10,10\n'+
                  '   100,2,5,5\n'+
                  '   100,2,30,30\n'+
                  '   100,3,11,11\n'+
                  '   100,3,120,120\n'+
                  '   200,1,200,200\n'+
                  '   200,1,10000,10000\n'+
                  '   200,1,808080,808080\n'+
                  '   200,2,33333,33333\n'+
                  '   200,3,0,0\n'+
                  '   200,3,4,4\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_NPreceding_CurrentRow<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, [~o->ascending(), ~i->ascending()], rows(-1, 0)), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,10\n'+
                  '   0,2,20,30\n'+
                  '   0,3,30,50\n'+
                  '   100,1,10,10\n'+
                  '   100,2,5,15\n'+
                  '   100,2,30,35\n'+
                  '   100,3,11,41\n'+
                  '   100,3,120,131\n'+
                  '   200,1,200,200\n'+
                  '   200,1,10000,10200\n'+
                  '   200,1,808080,818080\n'+
                  '   200,2,33333,841413\n'+
                  '   200,3,0,33333\n'+
                  '   200,3,4,4\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_CurrentRow_NFollowing<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, [~o->ascending(), ~i->ascending()], rows(0, 1)), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,30\n'+
                  '   0,2,20,50\n'+
                  '   0,3,30,30\n'+
                  '   100,1,10,15\n'+
                  '   100,2,5,35\n'+
                  '   100,2,30,41\n'+
                  '   100,3,11,131\n'+
                  '   100,3,120,120\n'+
                  '   200,1,200,10200\n'+
                  '   200,1,10000,818080\n'+
                  '   200,1,808080,841413\n'+
                  '   200,2,33333,33333\n'+
                  '   200,3,0,4\n'+
                  '   200,3,4,4\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_UnboundedPreceding_UnboundedFollowing_WithSinglePartition_WithoutOrderBy<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~p, rows(meta::pure::functions::relation::unbounded(), meta::pure::functions::relation::unbounded())), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,60\n'+
                  '   0,2,20,60\n'+
                  '   0,3,30,60\n'+
                  '   100,1,10,176\n'+
                  '   100,2,5,176\n'+
                  '   100,2,30,176\n'+
                  '   100,3,11,176\n'+
                  '   100,3,120,176\n'+
                  '   200,1,200,851617\n'+
                  '   200,1,10000,851617\n'+
                  '   200,1,808080,851617\n'+
                  '   200,2,33333,851617\n'+
                  '   200,3,0,851617\n'+
                  '   200,3,4,851617\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_UnboundedPreceding_UnboundedFollowing_WithMultiplePartitions_WithoutOrderBy<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~[p, o], rows(meta::pure::functions::relation::unbounded(), meta::pure::functions::relation::unbounded())), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,10\n'+
                  '   0,2,20,20\n'+
                  '   0,3,30,30\n'+
                  '   100,1,10,10\n'+
                  '   100,2,5,35\n'+
                  '   100,2,30,35\n'+
                  '   100,3,11,131\n'+
                  '   100,3,120,131\n'+
                  '   200,1,200,818280\n'+
                  '   200,1,10000,818280\n'+
                  '   200,1,808080,818280\n'+
                  '   200,2,33333,33333\n'+
                  '   200,3,0,4\n'+
                  '   200,3,4,4\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_UnboundedPreceding_CurrentRow_WithMultiplePartitions_WithSingleOrderBy<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~[p, o], ~i->ascending(), rows(meta::pure::functions::relation::unbounded(), 0)), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   p,o,i,sum_i_Rows\n'+
                  '   0,1,10,10\n'+
                  '   0,2,20,20\n'+
                  '   0,3,30,30\n'+
                  '   100,1,10,10\n'+
                  '   100,2,5,5\n'+
                  '   100,2,30,35\n'+
                  '   100,3,11,11\n'+
                  '   100,3,120,131\n'+
                  '   200,1,200,200\n'+
                  '   200,1,10000,10200\n'+
                  '   200,1,808080,818280\n'+
                  '   200,2,33333,33333\n'+
                  '   200,3,0,0\n'+
                  '   200,3,4,4\n'+
                  '   300,1,0,0\n'+
                  '   300,2,0,0\n'+
                  '#', $res->sort([~p->ascending(), ~o->ascending(), ~i->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::relation::tests::over::testRows_InvalidWindowFrameBoundary<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  p, o, i
                  0, 1, 10
                  0, 2, 20
                  0, 3, 30
                  100, 1, 10
                  100, 2, 30
                  100, 2, 5
                  100, 3, 11
                  100, 3, 120
                  200, 1, 10000
                  200, 1, 200
                  200, 1, 808080
                  200, 2, 33333
                  200, 3, 0
                  200, 3, 4
                  300, 1, 0
                  300, 2, 0
                #->extend(over(~[p, o], ~i->ascending(), rows(4, 2)), ~sum_i_Rows:{p,w,r|$r.i}:y|$y->plus())
               };

    assertError(|$f->eval($expr), 'Invalid window frame boundary - lower bound of window frame cannot be greater than the upper bound!');
}
