// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::metamodel::relation::*;

native function <<PCT.function>> meta::pure::functions::relation::asOfJoin<T,V>(rel1:Relation<T>[1], rel2:Relation<V>[1], match:Function<{T[1],V[1]->Boolean[1]}>[1]):Relation<T+V>[1];

native function <<PCT.function>> meta::pure::functions::relation::asOfJoin<T,V>(rel1:Relation<T>[1], rel2:Relation<V>[1], match:Function<{T[1],V[1]->Boolean[1]}>[1], join:Function<{T[1],V[1]->Boolean[1]}>[1]):Relation<T+V>[1];

function <<PCT.test>> meta::pure::functions::relation::tests::asOfJoin::testSimpleAsOfJoin<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let tds1 = #TDS
                   key, time, value
                   1, 2000-10-25T06:30:00Z, 5000
                   1, 2000-10-25T06:31:00Z, 4000
                   3, 2000-10-25T06:32:00Z, 3000
                   4, 2000-10-25T06:33:00Z, 1200
                   5, 2000-10-25T06:34:00Z, 3200
                   6, 2000-10-25T06:35:00Z, 4300
               #;
    let tds2 = #TDS
                   key2, time2, value2
                   2, 2000-10-25T06:31:20Z, 3000
                   1, 2000-10-25T06:30:10Z, 2000
                   4, 2000-10-25T06:33:40Z, 1400
                   3, 2000-10-25T06:32:30Z, 3200
                   6, 2000-10-25T06:35:10Z, 2900
                   5, 2000-10-25T06:34:50Z, 3200
               #;

    let expr = {|$tds1->asOfJoin($tds2, {x,y|$x.time > $y.time2});};
    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   key,time,value,key2,time2,value2\n'+
                  '   1,2000-10-25T06:30:00.000+0000,5000,null,null,null\n'+
                  '   1,2000-10-25T06:31:00.000+0000,4000,1,2000-10-25T06:30:10.000+0000,2000\n'+
                  '   3,2000-10-25T06:32:00.000+0000,3000,2,2000-10-25T06:31:20.000+0000,3000\n'+
                  '   4,2000-10-25T06:33:00.000+0000,1200,3,2000-10-25T06:32:30.000+0000,3200\n'+
                  '   5,2000-10-25T06:34:00.000+0000,3200,4,2000-10-25T06:33:40.000+0000,1400\n'+
                  '   6,2000-10-25T06:35:00.000+0000,4300,5,2000-10-25T06:34:50.000+0000,3200\n'+
                  '#', $res->sort([~key->ascending(), ~time->ascending()])->toString());

    let expr2 = {|$tds1->asOfJoin($tds2, {x,y|$x.time < $y.time2});};
    let res2 =  $f->eval($expr2);

    assertEquals( '#TDS\n'+
                 '   key,time,value,key2,time2,value2\n'+
                 '   1,2000-10-25T06:30:00.000+0000,5000,1,2000-10-25T06:30:10.000+0000,2000\n'+
                 '   1,2000-10-25T06:31:00.000+0000,4000,2,2000-10-25T06:31:20.000+0000,3000\n'+
                 '   3,2000-10-25T06:32:00.000+0000,3000,3,2000-10-25T06:32:30.000+0000,3200\n'+
                 '   4,2000-10-25T06:33:00.000+0000,1200,4,2000-10-25T06:33:40.000+0000,1400\n'+
                 '   5,2000-10-25T06:34:00.000+0000,3200,5,2000-10-25T06:34:50.000+0000,3200\n'+
                 '   6,2000-10-25T06:35:00.000+0000,4300,6,2000-10-25T06:35:10.000+0000,2900\n'+
                 '#', $res2->sort([~key->ascending(), ~time->ascending()])->toString());

}

function <<PCT.test>> meta::pure::functions::relation::tests::asOfJoin::testSimpleAsOfJoin_MultipleExpressions<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {|
        let tds1 = #TDS
                   key, time, value
                   1, 2000-10-25T06:30:00Z, 5000
                   1, 2000-10-25T06:31:00Z, 4000
                   3, 2000-10-25T06:32:00Z, 3000
                   4, 2000-10-25T06:33:00Z, 1200
                   5, 2000-10-25T06:34:00Z, 3200
                   6, 2000-10-25T06:35:00Z, 4300
               #;
        let tds2 = #TDS
                   key2, time2, value2
                   2, 2000-10-25T06:31:20Z, 3000
                   1, 2000-10-25T06:30:10Z, 2000
                   4, 2000-10-25T06:33:40Z, 1400
                   3, 2000-10-25T06:32:30Z, 3200
                   6, 2000-10-25T06:35:10Z, 2900
                   5, 2000-10-25T06:34:50Z, 3200
               #;
        $tds1->asOfJoin($tds2, {x,y|$x.time > $y.time2});
      };
    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   key,time,value,key2,time2,value2\n'+
                  '   1,2000-10-25T06:30:00.000+0000,5000,null,null,null\n'+
                  '   1,2000-10-25T06:31:00.000+0000,4000,1,2000-10-25T06:30:10.000+0000,2000\n'+
                  '   3,2000-10-25T06:32:00.000+0000,3000,2,2000-10-25T06:31:20.000+0000,3000\n'+
                  '   4,2000-10-25T06:33:00.000+0000,1200,3,2000-10-25T06:32:30.000+0000,3200\n'+
                  '   5,2000-10-25T06:34:00.000+0000,3200,4,2000-10-25T06:33:40.000+0000,1400\n'+
                  '   6,2000-10-25T06:35:00.000+0000,4300,5,2000-10-25T06:34:50.000+0000,3200\n'+
                  '#', $res->sort([~key->ascending(), ~time->ascending()])->toString());

    let expr2 = {|
        let tds1 = #TDS
                   key, time, value
                   1, 2000-10-25T06:30:00Z, 5000
                   1, 2000-10-25T06:31:00Z, 4000
                   3, 2000-10-25T06:32:00Z, 3000
                   4, 2000-10-25T06:33:00Z, 1200
                   5, 2000-10-25T06:34:00Z, 3200
                   6, 2000-10-25T06:35:00Z, 4300
               #;
        let tds2 = #TDS
                      key2, time2, value2
                      2, 2000-10-25T06:31:20Z, 3000
                      1, 2000-10-25T06:30:10Z, 2000
                      4, 2000-10-25T06:33:40Z, 1400
                      3, 2000-10-25T06:32:30Z, 3200
                      6, 2000-10-25T06:35:10Z, 2900
                      5, 2000-10-25T06:34:50Z, 3200
                  #;
        $tds1->asOfJoin($tds2, {x,y|$x.time < $y.time2});
      };
    let res2 =  $f->eval($expr2);

    assertEquals( '#TDS\n'+
                 '   key,time,value,key2,time2,value2\n'+
                 '   1,2000-10-25T06:30:00.000+0000,5000,1,2000-10-25T06:30:10.000+0000,2000\n'+
                 '   1,2000-10-25T06:31:00.000+0000,4000,2,2000-10-25T06:31:20.000+0000,3000\n'+
                 '   3,2000-10-25T06:32:00.000+0000,3000,3,2000-10-25T06:32:30.000+0000,3200\n'+
                 '   4,2000-10-25T06:33:00.000+0000,1200,4,2000-10-25T06:33:40.000+0000,1400\n'+
                 '   5,2000-10-25T06:34:00.000+0000,3200,5,2000-10-25T06:34:50.000+0000,3200\n'+
                 '   6,2000-10-25T06:35:00.000+0000,4300,6,2000-10-25T06:35:10.000+0000,2900\n'+
                 '#', $res2->sort([~key->ascending(), ~time->ascending()])->toString());

}

function <<PCT.test>> meta::pure::functions::relation::tests::asOfJoin::testAsOfJoinWithKeyMatch<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let tds1 = #TDS
                   key, time, value
                   1, 2000-10-25T06:30:00Z, 5000
                   1, 2000-10-25T06:31:00Z, 4000
                   3, 2000-10-25T06:32:00Z, 3000
                   4, 2000-10-25T06:33:00Z, 1200
                   5, 2000-10-25T06:34:00Z, 3200
                   6, 2000-10-25T06:35:00Z, 4300
               #;
    let tds2 = #TDS
                   key2, time2, value2
                   2, 2000-10-25T06:31:20Z, 3000
                   1, 2000-10-25T06:30:10Z, 2000
                   4, 2000-10-25T06:33:40Z, 1400
                   3, 2000-10-25T06:32:30Z, 3200
                   3, 2000-10-25T06:33:30Z, 3200
                   3, 2000-10-25T06:34:30Z, 3200
                   6, 2000-10-25T06:35:10Z, 2900
                   6, 2000-10-25T06:35:50Z, 2900
                   5, 2000-10-25T06:34:50Z, 3200
               #;

    let expr = {|$tds1->asOfJoin($tds2, {x,y|$x.time > $y.time2}, {x,y|$x.key == $y.key2});};
    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   key,time,value,key2,time2,value2\n'+
                  '   1,2000-10-25T06:30:00.000+0000,5000,null,null,null\n'+
                  '   1,2000-10-25T06:31:00.000+0000,4000,1,2000-10-25T06:30:10.000+0000,2000\n'+
                  '   3,2000-10-25T06:32:00.000+0000,3000,null,null,null\n'+
                  '   4,2000-10-25T06:33:00.000+0000,1200,null,null,null\n'+
                  '   5,2000-10-25T06:34:00.000+0000,3200,null,null,null\n'+
                  '   6,2000-10-25T06:35:00.000+0000,4300,null,null,null\n'+
                  '#', $res->sort([~key->ascending(), ~time->ascending()])->toString());

    let expr2 = {|$tds1->asOfJoin($tds2, {x,y|$x.time < $y.time2}, {x,y|$x.key == $y.key2});};
    let res2 =  $f->eval($expr2);

    assertEquals( '#TDS\n'+
                  '   key,time,value,key2,time2,value2\n'+
                  '   1,2000-10-25T06:30:00.000+0000,5000,1,2000-10-25T06:30:10.000+0000,2000\n'+
                  '   1,2000-10-25T06:31:00.000+0000,4000,null,null,null\n'+
                  '   3,2000-10-25T06:32:00.000+0000,3000,3,2000-10-25T06:32:30.000+0000,3200\n'+
                  '   4,2000-10-25T06:33:00.000+0000,1200,4,2000-10-25T06:33:40.000+0000,1400\n'+
                  '   5,2000-10-25T06:34:00.000+0000,3200,5,2000-10-25T06:34:50.000+0000,3200\n'+
                  '   6,2000-10-25T06:35:00.000+0000,4300,6,2000-10-25T06:35:10.000+0000,2900\n'+
                  '#', $res2->sort([~key->ascending(), ~time->ascending()])->toString());
}

function <<PCT.test>> meta::pure::functions::relation::tests::asOfJoin::testAsOfJoinWithKeyMatch_MultipleExpressions<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {|
          let tds1 = #TDS
                   key, time, value
                   1, 2000-10-25T06:30:00Z, 5000
                   1, 2000-10-25T06:31:00Z, 4000
                   3, 2000-10-25T06:32:00Z, 3000
                   4, 2000-10-25T06:33:00Z, 1200
                   5, 2000-10-25T06:34:00Z, 3200
                   6, 2000-10-25T06:35:00Z, 4300
               #;
          let tds2 = #TDS
                   key2, time2, value2
                   2, 2000-10-25T06:31:20Z, 3000
                   1, 2000-10-25T06:30:10Z, 2000
                   4, 2000-10-25T06:33:40Z, 1400
                   3, 2000-10-25T06:32:30Z, 3200
                   3, 2000-10-25T06:33:30Z, 3200
                   3, 2000-10-25T06:34:30Z, 3200
                   6, 2000-10-25T06:35:10Z, 2900
                   6, 2000-10-25T06:35:50Z, 2900
                   5, 2000-10-25T06:34:50Z, 3200
               #;
          $tds1->asOfJoin($tds2, {x,y|$x.time > $y.time2}, {x,y|$x.key == $y.key2});
    };
    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   key,time,value,key2,time2,value2\n'+
                  '   1,2000-10-25T06:30:00.000+0000,5000,null,null,null\n'+
                  '   1,2000-10-25T06:31:00.000+0000,4000,1,2000-10-25T06:30:10.000+0000,2000\n'+
                  '   3,2000-10-25T06:32:00.000+0000,3000,null,null,null\n'+
                  '   4,2000-10-25T06:33:00.000+0000,1200,null,null,null\n'+
                  '   5,2000-10-25T06:34:00.000+0000,3200,null,null,null\n'+
                  '   6,2000-10-25T06:35:00.000+0000,4300,null,null,null\n'+
                  '#', $res->sort([~key->ascending(), ~time->ascending()])->toString());

    let expr2 = {|
    let tds1 = #TDS
                   key, time, value
                   1, 2000-10-25T06:30:00Z, 5000
                   1, 2000-10-25T06:31:00Z, 4000
                   3, 2000-10-25T06:32:00Z, 3000
                   4, 2000-10-25T06:33:00Z, 1200
                   5, 2000-10-25T06:34:00Z, 3200
                   6, 2000-10-25T06:35:00Z, 4300
               #;
          let tds2 = #TDS
                   key2, time2, value2
                   2, 2000-10-25T06:31:20Z, 3000
                   1, 2000-10-25T06:30:10Z, 2000
                   4, 2000-10-25T06:33:40Z, 1400
                   3, 2000-10-25T06:32:30Z, 3200
                   3, 2000-10-25T06:33:30Z, 3200
                   3, 2000-10-25T06:34:30Z, 3200
                   6, 2000-10-25T06:35:10Z, 2900
                   6, 2000-10-25T06:35:50Z, 2900
                   5, 2000-10-25T06:34:50Z, 3200
               #;
          $tds1->asOfJoin($tds2, {x,y|$x.time < $y.time2}, {x,y|$x.key == $y.key2});
    };
    let res2 =  $f->eval($expr2);

    assertEquals( '#TDS\n'+
                  '   key,time,value,key2,time2,value2\n'+
                  '   1,2000-10-25T06:30:00.000+0000,5000,1,2000-10-25T06:30:10.000+0000,2000\n'+
                  '   1,2000-10-25T06:31:00.000+0000,4000,null,null,null\n'+
                  '   3,2000-10-25T06:32:00.000+0000,3000,3,2000-10-25T06:32:30.000+0000,3200\n'+
                  '   4,2000-10-25T06:33:00.000+0000,1200,4,2000-10-25T06:33:40.000+0000,1400\n'+
                  '   5,2000-10-25T06:34:00.000+0000,3200,5,2000-10-25T06:34:50.000+0000,3200\n'+
                  '   6,2000-10-25T06:35:00.000+0000,4300,6,2000-10-25T06:35:10.000+0000,2900\n'+
                  '#', $res2->sort([~key->ascending(), ~time->ascending()])->toString());
}