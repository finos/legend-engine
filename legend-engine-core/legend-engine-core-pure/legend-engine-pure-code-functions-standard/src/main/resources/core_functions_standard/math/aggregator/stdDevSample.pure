// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

function <<PCT.function>> meta::pure::functions::math::stdDevSample(numbers:Number[*]):Number[1]
{
    meta::pure::functions::math::stdDev($numbers->toOneMany(), true);
}

function <<PCT.function>> meta::pure::functions::math::stdDevSample(numbers:Number[1..*]):Number[1]
{
    meta::pure::functions::math::stdDev($numbers, true);
}

function <<PCT.test>> meta::pure::functions::math::tests::stdDev::testIntStdDev<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEq(1.0, $f->eval(|stdDevSample([1,2,3])));
   assertEq(2.0, $f->eval(|stdDevSample([2,4,6])));
}

function <<PCT.test>> meta::pure::functions::math::tests::stdDev::testFloatStdDev<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEq(1.0, $f->eval(|stdDevSample([1.0,2.0,3.0])));
   assertEq(1.0, $f->eval(|stdDevSample([1.5,2.5,3.5])));
   assertEq(3.14, $f->eval(|stdDevSample([3.14,6.28,9.42])));
}

function <<PCT.test>> meta::pure::functions::math::tests::stdDev::testMixedStdDev<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEq(1.0, $f->eval(|stdDevSample([1.0,2,3.0])));
   assertEq(0.5, $f->eval(|stdDevSample([1,1.5,2])));
}

function <<PCT.test>> meta::pure::functions::math::tests::stdDev::testNegativeNumberStdDev<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEq(2.0, $f->eval(|stdDevSample([-2,-4,-6])));
   assertEq(5.0, $f->eval(|stdDevSample([-5,0,5])));
   assertEq(5.0, $f->eval(|stdDevSample([-5.0,0.0,5.0])));
}


function <<PCT.test>> meta::pure::functions::math::tests::stdDev::testSimpleGroupByStandardDeviationSample<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  id, val
                  1, 1.0
                  1, 2.0
                  1, 3
                  2, 1.5
                  2, 2.5
                  2, 3.5
                  3, 1
                  3, 1.5
                  3, 2.0
                #->groupBy(~[id], ~[newCol : x | $x.val : y | $y->meta::pure::functions::math::stdDevSample()])
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,newCol\n'+
                  '   1,1.0\n'+
                  '   2,1.0\n'+
                  '   3,0.5\n'+
                  '#', $res->sort(~id->ascending())->toString());
}