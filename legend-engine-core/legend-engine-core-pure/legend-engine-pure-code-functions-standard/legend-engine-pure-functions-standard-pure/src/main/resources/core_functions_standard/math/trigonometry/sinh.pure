// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function
    <<PCT.function>>
    {
        doc.doc='sinh returns the hyperbolic sine of a number'
    }
meta::pure::functions::math::sinh(number:Number[1]):Float[1];

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::sinh::testSinH_Identities<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals($f->eval(|sinh(0)), 0.0);
  assertEquals($f->eval(|sinh(-5)), -sinh(5));
  assertEquals($f->eval(|sinh(-100)), -sinh(100));
  assertEqWithinTolerance($f->eval(|pow(sinh(7/2),2)), $f->eval(|(cosh(7) - 1)/2), 0.00000000000001);
}

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::sinh::testSinH_Integers<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals($f->eval(|sinh(3)), 10.017874927409903);
  assertEquals($f->eval(|sinh(-2)), -3.626860407847019);

  assertEquals($f->eval(|sinh(6)), 201.71315737027922);
  assertEquals($f->eval(|sinh(-6)), -201.71315737027922);
}

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::sinh::testSinH_Floats<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals($f->eval(|sinh(-3.14)), -11.53029203041011);
  assertEquals($f->eval(|sinh(3.14)), 11.53029203041011);

  assertEquals($f->eval(|sinh(-.7654321)), -0.8423951260776953);
  assertEquals($f->eval(|sinh(.7654321)), 0.8423951260776953);

  assertEqWithinTolerance($f->eval(|sinh(11.573574828312076)), 53126.31440509195, 0.0000000001);
  assertEqWithinTolerance($f->eval(|sinh(-11.573574828312076)), -53126.31440509195, 0.0000000001);
}

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::sinh::testSinH_Eval<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals($f->eval(|sinh(-3.14)), -11.53029203041011);
  assertEquals($f->eval(|sinh(3.14)), 11.53029203041011);

  assertEquals($f->eval(|sinh(-.7654321)), -0.8423951260776953);
  assertEquals($f->eval(|sinh(.7654321)), 0.8423951260776953);

  assertEqWithinTolerance($f->eval(|sinh(11.573574828312076)), 53126.31440509195, 0.0000000001);
  assertEqWithinTolerance($f->eval(|sinh(-11.573574828312076)), -53126.31440509195, 0.0000000001);
}

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::sinh::testSinH_EvalFuncSig<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals($f->eval(|sinh_Number_1__Float_1_->eval(0)), 0.0);
  assertEquals($f->eval(|sinh_Number_1__Float_1_->eval(2)), 3.626860407847019);
  assertEquals($f->eval(|sinh_Number_1__Float_1_->eval(1.5)), 2.1292794550948173);
  assertEquals($f->eval(|sinh_Number_1__Float_1_->eval(0.5)), 0.5210953054937474);
  assertEquals($f->eval(|sinh_Number_1__Float_1_->eval(3.14)), 11.53029203041011);
  assertEquals($f->eval(|sinh_Number_1__Float_1_->eval(-3.14)), -11.53029203041011);
  assertEqWithinTolerance($f->eval(|sinh_Number_1__Float_1_->eval(11.573574828312076)), 53126.31440509195, 0.0000000001);
  assertEqWithinTolerance($f->eval(|sinh_Number_1__Float_1_->eval(-11.573574828312076)), -53126.31440509195, 0.0000000001);
}