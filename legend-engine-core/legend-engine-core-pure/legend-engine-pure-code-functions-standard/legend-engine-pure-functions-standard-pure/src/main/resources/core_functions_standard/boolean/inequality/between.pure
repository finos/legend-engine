// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::functions::boolean::*;

function
    <<PCT.function>>
    {
        doc.doc='between returns true if the value is >= lower and <= upper; supports numeric values and bounds'
    }
meta::pure::functions::boolean::between(value:Number[0..1], lower:Number[0..1], upper:Number[0..1]):Boolean[1]
{
  ($value >= $lower) && ($value <= $upper);
}

function
    <<PCT.function>>
    {
        doc.doc='between returns true if the value is >= lower and <= upper; supports string values and bounds'
    }
meta::pure::functions::boolean::between(value:String[0..1], lower:String[0..1], upper:String[0..1]):Boolean[1]
{
  ($value >= $lower) && ($value <= $upper);
}

function
    <<PCT.function>>
    {
        doc.doc='between returns true if the value is >= lower and <= upper; supports StrictDate (e.g. 2025-04-09) values and bounds'
    }
meta::pure::functions::boolean::between(value:StrictDate[0..1], lower:StrictDate[0..1], upper:StrictDate[0..1]):Boolean[1]
{
  ($value >= $lower) && ($value <= $upper);
}

function
    <<PCT.function>>
    {
        doc.doc='between returns true if the value is >= lower and <= upper; supports DateTime values and bounds'
    }
meta::pure::functions::boolean::between(value:DateTime[0..1], lower:DateTime[0..1], upper:DateTime[0..1]):Boolean[1]
{
  ($value >= $lower) && ($value <= $upper);
}

function <<PCT.test>> meta::pure::functions::boolean::tests::inequalities::between::testBetween_NumberInteger<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assert($f->eval(|between(1, 0, 3)));
  assert($f->eval(|between(-10, -20, 0)));
  
  assert($f->eval(|between(10000000, 999999, 10000002)));
  assert($f->eval(|between(-10000000, -10000002, -999999)));

  assert($f->eval(|between(0, 0, 0)));
  assert($f->eval(|between(1, 0, 1)));

  assertFalse($f->eval(|between(5, 0, 3)));
  assertFalse($f->eval(|between(100, 0, 3)));
  assertFalse($f->eval(|between(-21, -20, 0)));
  
  assertFalse($f->eval(|between(10000003, 999999, 10000002)));
  assertFalse($f->eval(|between(-10000003, -10000002, -999999)));
} 

function <<PCT.test>> meta::pure::functions::boolean::tests::inequalities::between::testBetween_NumberLong<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assert($f->eval(|between(21474836471, 21474836470, 21474836473)));
  assert($f->eval(|between(-2147483647, -2147483648, 0)));
  
  assert($f->eval(|between(9223372036854775805, 9223372036854775804, 9223372036854775806)));
  assert($f->eval(|between(-9223372036854775805, -9223372036854775806, -9223372036854775804)));

  assertFalse($f->eval(|between(21474836470, 21474836471, 21474836473)));
  assertFalse($f->eval(|between(-2147483648, -2147483647, 0)));
  
  assertFalse($f->eval(|between(9223372036854775804, 9223372036854775805, 9223372036854775806)));
  assertFalse($f->eval(|between(-9223372036854775806, -9223372036854775805, -9223372036854775804)));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::inequalities::between::testBetween_NumberFloat<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assert($f->eval(|between(1.5, 1, 2)));

  assert($f->eval(|between(3.14159265359, 3.1415, 3.1415927)));
  assert($f->eval(|between(-3.14159265359, -3.1415927, -3.1415)));
  assert($f->eval(|between(20, 20, 20.5)));

  assertFalse($f->eval(|between(2.01, 1, 2)));
  
  assertFalse($f->eval(|between(13.14159265359, 3.1415, 3.1415927)));
  assertFalse($f->eval(|between(-13.14159265359, -3.1415927, -3.1415)));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::inequalities::between::testBetween_StrictDate<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  let date1 = %1951-10-01;
  let date2 = %1972-08-23;
  let date3 = %2025-04-03;

  let date4 = %1032-01-01;
  let date5 = %1031-12-31;
  let date6 = %1032-12-31;

  assert($f->eval(|between($date2, $date1, $date3)));
  assert($f->eval(|between($date4, $date5, $date6)));

  assert($f->eval(|between($date2, $date1, $date2)));
  assertFalse($f->eval(|between($date2, $date2, $date1)));

  assertFalse($f->eval(|between($date2, $date3, $date1)));
  assertFalse($f->eval(|between($date4, $date6, $date5)));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::inequalities::between::testBetween_DateTime<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  let dateTime1 = %1032-01-01T00:32:34.000000000+0000;
  let dateTime2 = %1951-10-01T14:01:01.000000000+0000;
  let dateTime3 = %1031-12-31T07:22:22.000000000+0000;

  let dateTime4 = %2032-01-01T00:32:34.000000000+0000;
  let dateTime5 = %2032-01-01T00:32:33.000000000+0000;
  let dateTime6 = %2032-01-01T00:32:35.000000000+0000;

  assert($f->eval(|between($dateTime1, $dateTime3, $dateTime2)));
  assert($f->eval(|between($dateTime4, $dateTime5, $dateTime6)));

  assert($f->eval(|between($dateTime1, $dateTime1, $dateTime2)));
  assertFalse($f->eval(|between($dateTime1, $dateTime2, $dateTime1)));

  assert($f->eval(|between($dateTime4, $dateTime5, $dateTime4)));
  assertFalse($f->eval(|between($dateTime4, $dateTime4, $dateTime5)));

  assert($f->eval(|between($dateTime5, $dateTime5, $dateTime5)));

  assertFalse($f->eval(|between($dateTime1, $dateTime2, $dateTime3)));
  assertFalse($f->eval(|between($dateTime4, $dateTime6, $dateTime5)));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::inequalities::between::testBetween_String<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  let s1 = 'abcdefg';
  let s2 = 'hijklmn';
  let s3 = 'opqrstu';

  let s4 = 'Abcdefg';
  let s5 = 'ABcdefg';
  let s6 = 'ABCdefg';
  let s7 = 'abcdefG';

  assert($f->eval(|between($s2, $s1, $s3)));
  assert($f->eval(|between($s5, $s6, $s4)));
  assert($f->eval(|between($s7, $s4, $s1)));
  assert($f->eval(|between($s3, 'O', 'oq')));

  assertFalse($f->eval(|between($s1, $s2, $s3)));
  assertFalse($f->eval(|between($s5, $s4, $s6)));
  assertFalse($f->eval(|between($s5, $s7, $s6)));
  assertFalse($f->eval(|between($s3, $s2, 'O')));

  assert($f->eval(|between($s3, $s3, $s3)));
}

// TODO: below test fails as pct_relational does not appear to process nil params correctly. This will need to be fixed in a future PR.
// function <<PCT.test>> meta::pure::functions::boolean::tests::inequalities::between::testBetween_Empty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
// {
//     // Nil as a function param
//     assertFalse($f->eval(|between([]->cast(@String), []->cast(@String), []->cast(@String))));
//     assertFalse($f->eval(|between('abc', []->cast(@String), 'bcd')));
//     assertFalse($f->eval(|between([]->cast(@String), 'abc', 'bcd')));
//     assertFalse($f->eval(|between('abc','bcd', []->cast(@String))));
//
//     // Nil as a variable param
//     let n = []->cast(@Number);
//     assertFalse($f->eval(|between($n, $n, $n)));
//     assertFalse($f->eval(|between(123, $n, 234)));
//     assertFalse($f->eval(|between($n, 123, 234)));
//     assertFalse($f->eval(|between(123, 234, $n)));
//     assert([]->cast(@Number)->isEmpty());
// }