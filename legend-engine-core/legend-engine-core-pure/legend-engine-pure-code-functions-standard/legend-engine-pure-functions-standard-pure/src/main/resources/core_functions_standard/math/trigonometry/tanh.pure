// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function
    <<PCT.function>>
    {
        doc.doc='tanh returns the hyperbolic tangent of a number'
    }
meta::pure::functions::math::tanh(number:Number[1]):Float[1];

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::tanh::testTanH_Identities<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEqWithinTolerance($f->eval(|tanh(0)), 0.0, 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh(-5)), $f->eval(|-tanh(5)), 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh(-100)), $f->eval(|-tanh(100)), 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh(14)), $f->eval(|(2*tanh(7) / (1 + pow(tanh(7), 2)))), 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh(3 + 6)), $f->eval(|(tanh(3) + tanh(6)) / (1 + tanh(3)*tanh(6))), 0.0000000000001);
  assertEqWithinTolerance($f->eval(|tanh(3 - 6)), $f->eval(|(tanh(3) - tanh(6)) / (1 - tanh(3)*tanh(6))), 0.0000000000001);
}

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::tanh::testTanH_Integers<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEqWithinTolerance($f->eval(|tanh(3)), 0.9950547536867305, 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh(-2)), -0.9640275800758169, 0.000000001);

  assertEqWithinTolerance($f->eval(|tanh(6)), 0.9999877116507956, 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh(-6)), -0.9999877116507956, 0.000000001);
}

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::tanh::testTanH_Floats<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEqWithinTolerance($f->eval(|tanh(-3.14)), -0.9962602049458319, 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh(3.14)), 0.9962602049458319, 0.000000001);

  assertEqWithinTolerance($f->eval(|tanh(-.7654321)), -0.6442654436049523, 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh(.7654321)), 0.6442654436049523, 0.000000001);

  assertEqWithinTolerance($f->eval(|tanh(11.573574828312076)), 0.9999999998228462, 0.0000000001);
  assertEqWithinTolerance($f->eval(|tanh(-11.573574828312076)), -0.9999999998228462, 0.0000000001);
}

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::tanh::testTanH_Eval<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEqWithinTolerance($f->eval(|tanh(-3.14)), -0.9962602049458319, 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh(3.14)), 0.9962602049458319, 0.000000001);

  assertEqWithinTolerance($f->eval(|tanh(-.7654321)), -0.6442654436049523, 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh(.7654321)), 0.6442654436049523, 0.000000001);

  assertEqWithinTolerance($f->eval(|tanh(11.573574828312076)), 0.9999999998228462, 0.0000000001);
  assertEqWithinTolerance($f->eval(|tanh(-11.573574828312076)), -0.9999999998228462, 0.0000000001);
}

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::tanh::testTanH_EvalFuncSig<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEqWithinTolerance($f->eval(|tanh_Number_1__Float_1_->eval(0)), 0.0, 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh_Number_1__Float_1_->eval(2)), 0.9640275800758169, 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh_Number_1__Float_1_->eval(1.5)), 0.9051482536448664, 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh_Number_1__Float_1_->eval(0.5)), 0.46211715726000974, 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh_Number_1__Float_1_->eval(3.14)), 0.9962602049458319, 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh_Number_1__Float_1_->eval(-3.14)), -0.9962602049458319, 0.000000001);
  assertEqWithinTolerance($f->eval(|tanh_Number_1__Float_1_->eval(11.573574828312076)), 0.9999999998228462, 0.0000000001);
  assertEqWithinTolerance($f->eval(|tanh_Number_1__Float_1_->eval(-11.573574828312076)), -0.9999999998228462, 0.0000000001);
}