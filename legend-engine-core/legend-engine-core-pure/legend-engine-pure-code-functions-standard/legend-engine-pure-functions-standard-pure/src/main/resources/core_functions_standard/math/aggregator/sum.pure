// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

function <<PCT.function>> meta::pure::functions::math::sum(numbers:Number[*]):Number[1]
{
    $numbers->plus();
}

function <<PCT.function>> meta::pure::functions::math::sum(numbers:Integer[*]):Integer[1]
{
    $numbers->plus();
}

function <<PCT.function>> meta::pure::functions::math::sum(numbers:Float[*]):Float[1]
{
    $numbers->plus();
}

function <<PCT.test>> meta::pure::functions::math::tests::sum::testSum_Numbers<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(32.0, $f->eval(|sum([15,13,2.0,1,1.0])));
}

function <<PCT.test>> meta::pure::functions::math::tests::sum::testSum_Integers<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(32, $f->eval(|sum([15,13,2,1,1])));
}

function <<PCT.test>> meta::pure::functions::math::tests::sum::testSum_Floats<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(32.0, $f->eval(|sum([12.5,13.5,4.0,1.5,0.5])));
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::math::tests::sum::testSum_Integers_Relation_Aggregate<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  id, grp, name, employeeNumber
                  1, 2, A, 21
                  2, 1, B, 41
                  3, 3, C, 71
                  4, 4, D, 31
                  5, 2, E, 11
                  6, 1, F, 1
                  7, 3, G, 91
                  8, 1, H, 81
                  9, 5, I, 51
                  10, 0, J, 101
                #->groupBy(~grp, ~newCol : x | $x.employeeNumber : y | $y->sum())
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   grp,newCol\n'+
                  '   0,101\n'+
                  '   1,123\n'+
                  '   2,32\n'+
                  '   3,162\n'+
                  '   4,31\n'+
                  '   5,51\n'+
                  '#', $res->sort(~grp->ascending())->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::math::tests::sum::testSum_Floats_Relation_Aggregate<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  id, grp, name, employeeNumber
                  1, 2, A, 21.12
                  2, 1, B, 41.14
                  3, 3, C, 71.17
                  4, 4, D, 31.13
                  5, 2, E, 11.11
                  6, 1, F, 1.11
                  7, 3, G, 91.19
                  8, 1, H, 81.18
                  9, 5, I, 51.15
                  10, 0, J, 101.1
                #->groupBy(~grp, ~newCol : x | $x.employeeNumber : y | $y->sum())
               };

    let res =  $f->eval($expr)->project(~[
                                   grp: c|$c.grp->toOne(),
                                   newCol: c|$c.newCol->toOne()->round(2)
                                ]);

    assertEquals( '#TDS\n'+
                  '   grp,newCol\n'+
                  '   0,101.1\n'+
                  '   1,123.43\n'+
                  '   2,32.23\n'+
                  '   3,162.36\n'+
                  '   4,31.13\n'+
                  '   5,51.15\n'+
                  '#', $res->sort(~grp->ascending())->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::math::tests::sum::testSum_Numbers_Relation_Aggregate<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  id, grp, name, employeeNumber
                  1, 2, A, 21d
                  2, 1, B, 41.14d
                  3, 3, C, 71d
                  4, 4, D, 31.13d
                  5, 2, E, 11d
                  6, 1, F, 1.11d
                  7, 3, G, 91d
                  8, 1, H, 81.18d
                  9, 5, I, 51d
                  10, 0, J, 101.101d
                #->groupBy(~grp, ~newCol : x | $x.employeeNumber->cast(@Number) : y | $y->sum())
               };

    let res =  $f->eval($expr)->project(~[
                                   grp: c|$c.grp->toOne(),
                                   newCol: c|$c.newCol->toOne()->toFloat()->round(3)
                                ]);

    assertEquals( '#TDS\n'+
                  '   grp,newCol\n'+
                  '   0,101.101\n'+
                  '   1,123.43\n'+
                  '   2,32.0\n'+
                  '   3,162.0\n'+
                  '   4,31.13\n'+
                  '   5,51.0\n'+
                  '#', $res->sort(~grp->ascending())->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::math::tests::sum::testSum_Integers_Relation_Window<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1, 2, A
                  2, 1, B
                  3, 3, C
                  4, 4, D
                  5, 2, E
                  6, 1, F
                  7, 3, G
                  8, 1, H
                  9, 5, I
                  10, 0, J
                #->extend(over(~grp), ~newCol:{p,w,r|$r.id}:y|$y->sum())
               };


    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   10,0,J,10\n'+
                  '   2,1,B,16\n'+
                  '   6,1,F,16\n'+
                  '   8,1,H,16\n'+
                  '   1,2,A,6\n'+
                  '   5,2,E,6\n'+
                  '   3,3,C,10\n'+
                  '   7,3,G,10\n'+
                  '   4,4,D,4\n'+
                  '   9,5,I,9\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::math::tests::sum::testSum_Floats_Relation_Window<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1.1, 2, A
                  2.2, 1, B
                  3.3, 3, C
                  4.4, 4, D
                  5.5, 2, E
                  6.6, 1, F
                  7.7, 3, G
                  8.8, 1, H
                  9.9, 5, I
                  10.10, 0, J
                #->extend(over(~grp), ~newCol:{p,w,r|$r.id}:y|$y->sum())
               };


    let res =  $f->eval($expr)->project(~[
                                   id: c|$c.id->toOne(),
                                   grp: c|$c.grp->toOne(),
                                   name: c|$c.name->toOne(),
                                   newCol: c|$c.newCol->toOne()->round(1)
                                ]);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   10.1,0,J,10.1\n'+
                  '   2.2,1,B,17.6\n'+
                  '   6.6,1,F,17.6\n'+
                  '   8.8,1,H,17.6\n'+
                  '   1.1,2,A,6.6\n'+
                  '   5.5,2,E,6.6\n'+
                  '   3.3,3,C,11.0\n'+
                  '   7.7,3,G,11.0\n'+
                  '   4.4,4,D,4.4\n'+
                  '   9.9,5,I,9.9\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::math::tests::sum::testSum_Numbers_Relation_Window<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, name
                  1.1, 2, A
                  2.2, 1, B
                  3.3, 3, C
                  4.4, 4, D
                  5.5, 2, E
                  6.6, 1, F
                  7.7, 3, G
                  8.8, 1, H
                  9.9, 5, I
                  10.10, 0, J
                #->extend(over(~grp), ~newCol:{p,w,r|$r.id->cast(@Number)}:y|$y->sum())
               };


    let res =  $f->eval($expr)->project(~[
                                   id: c|$c.id->toOne(),
                                   grp: c|$c.grp->toOne(),
                                   name: c|$c.name->toOne(),
                                   newCol: c|$c.newCol->toOne()->toFloat()->round(1)
                                ]);

    assertEquals( '#TDS\n'+
                  '   id,grp,name,newCol\n'+
                  '   10.1,0,J,10.1\n'+
                  '   2.2,1,B,17.6\n'+
                  '   6.6,1,F,17.6\n'+
                  '   8.8,1,H,17.6\n'+
                  '   1.1,2,A,6.6\n'+
                  '   5.5,2,E,6.6\n'+
                  '   3.3,3,C,11.0\n'+
                  '   7.7,3,G,11.0\n'+
                  '   4.4,4,D,4.4\n'+
                  '   9.9,5,I,9.9\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}
