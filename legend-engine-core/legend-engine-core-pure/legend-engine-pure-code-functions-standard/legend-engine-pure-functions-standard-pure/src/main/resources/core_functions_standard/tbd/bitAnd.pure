// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function
    <<PCT.function>>
    {
        doc.doc='bitwise AND operator returns a Number representing the bitwise AND of the Number input params'
    }
meta::pure::functions::math::bitAnd(arg1:Integer[1], arg2:Integer[1]):Integer[1];

function <<PCT.test>> meta::pure::functions::math::tests::tbd::bitAnd::testBitAnd_SmallNumbers<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals($f->eval(|bitAnd(1, 0)),0);
  assertEquals($f->eval(|bitAnd(1, 0)), 0);
  assertEquals($f->eval(|bitAnd(0, 0)), 0);
  assertEquals($f->eval(|bitAnd(5, 6)), 4);
  assertEquals($f->eval(|bitAnd(25, 11)), 9);
  assertEquals($f->eval(|bitAnd(137, 670)), 136);
}

function <<PCT.test>> meta::pure::functions::math::tests::tbd::bitAnd::testBitAnd_NegativeNumbers<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals($f->eval(|bitAnd(-1, 0)), 0);
  assertEquals($f->eval(|bitAnd(-5, 6)), 2);
  assertEquals($f->eval(|bitAnd(5, -6)), 0);
  assertEquals($f->eval(|bitAnd(-5, -6)), -6);
  assertEquals($f->eval(|bitAnd(-25, 11)), 3);
}

function <<PCT.test>> meta::pure::functions::math::tests::tbd::bitAnd::testBitAnd_LargeNumbers<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals($f->eval(|bitAnd(1000000000, 0)), 0);
  assertEquals($f->eval(|bitAnd(9223372036854775807, 9223372036854775806)), 9223372036854775806);
  assertEquals($f->eval(|bitAnd(9223372036854775807, 922807)), 922807);
  assertEquals($f->eval(|bitAnd(-1000000000, 0)), 0);
  assertEquals($f->eval(|bitAnd('-9223372036854775808'->parseInteger(), -999999999)), '-9223372036854775808'->parseInteger());
  assertEquals($f->eval(|bitAnd('-9223372036854775808'->parseInteger(), 999999999)), 0);
}