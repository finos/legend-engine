// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

function <<PCT.function>> meta::pure::functions::math::stdDevPopulation(numbers:Number[*]):Number[1]
{
    meta::pure::functions::math::stdDev($numbers->toOneMany(), false);
}

function <<PCT.function>> meta::pure::functions::math::stdDevPopulation(numbers:Number[1..*]):Number[1]
{
    meta::pure::functions::math::stdDev($numbers, false);
}

function <<PCT.test>> meta::pure::functions::math::tests::stdDev::testPopulationStandardDeviation<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEq(0.5, $f->eval(|stdDevPopulation([1,2])));
   assertEq(1.0, $f->eval(|stdDevPopulation([2,4])));
}

function <<PCT.test>> meta::pure::functions::math::tests::stdDev::testSimpleGroupByStandardDeviationPopulation<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  id, val
                  1, 1
                  1, 2
                  2, 2
                  2, 4
                #->groupBy(~[id], ~[newCol : x | $x.val : y | $y->meta::pure::functions::math::stdDevPopulation()])
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,newCol\n'+
                  '   1,0.5\n'+
                  '   2,1.0\n'+
                  '#', $res->sort(~id->ascending())->toString());
}