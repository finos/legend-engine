// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

function <<PCT.function>> meta::pure::functions::math::wavg(numbers:Number[*], weights:Number[*]):Float[1]
{
    if($numbers->isEmpty() || $weights->isEmpty() || $numbers->size() != $weights->size(),
      |fail('Error: Mean of an empty set.');0.0;,
      | let weightedQuantitySum = $numbers->size()->range()->fold({i, y| $y + toFloat($numbers->at($i) * $weights->at($i))}, 0.0);
        let weightsSum = $weights->sum();
        assert($weightsSum != 0.0,|'Weighted Average can\'t be performed as sum of weights equals 0');
        $weightedQuantitySum/$weightsSum;);
}

function  meta::pure::functions::math::wavg(wavgRows: meta::pure::functions::math::wavgUtility::WavgRowMapper[*]):Float[1]
{
  meta::pure::functions::math::wavg($wavgRows.quantity, $wavgRows.weight);
}

Class meta::pure::functions::math::wavgUtility::WavgRowMapper
{
  quantity: Number[0..1];
  weight: Number[0..1];
}

function meta::pure::functions::math::wavgUtility::wavgRowMapper(quantity:Number[0..1], weight:Number[0..1]):meta::pure::functions::math::wavgUtility::WavgRowMapper[1]
{
  ^meta::pure::functions::math::wavgUtility::WavgRowMapper(
    quantity= $quantity,
    weight= $weight
  )
}

function <<PCT.test>> meta::pure::functions::math::tests::wavg::testSimpleGroupByWavg<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  id, grp, name, quantity, weight
                  1, 2, A, 200, 0.5
                  2, 1, B, 350, 0.3
                  3, 3, C, 250, 0.25
                  4, 4, D, 700, 1
                  5, 2, E, 100, 0.5
                  6, 1, F, 50, 0.3
                  7, 3, G, 400, 0.75
                  8, 1, H, 150, 0.4
                  9, 5, I, 350, 1
                #->groupBy(~grp, ~wavgCol : x | meta::pure::functions::math::wavgUtility::wavgRowMapper($x.quantity, $x.weight) : y | $y->wavg())
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   grp,wavgCol\n'+
                  '   1,180.0\n'+
                  '   2,150.0\n'+
                  '   3,362.5\n'+
                  '   4,700.0\n'+
                  '   5,350.0\n'+
                  '#', $res->sort(~grp->ascending())->toString());
}