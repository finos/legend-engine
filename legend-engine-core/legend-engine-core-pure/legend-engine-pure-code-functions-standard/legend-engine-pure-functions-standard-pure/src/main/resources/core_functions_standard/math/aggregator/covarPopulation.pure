// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

function
<<PCT.function>>
    {
        doc.doc='Returns the population covariance for non-null pairs in a group.'
    }
meta::pure::functions::math::covarPopulation(numbersA:Number[*], numbersB:Number[*]):Number[0..1]
{
  covariance($numbersA, $numbersB, min($numbersA->size(),$numbersB->size()), false);
}

function  meta::pure::functions::math::covarPopulation(covarRows: meta::pure::functions::math::mathUtility::RowMapper<Number, Number>[*]):Number[0..1]
{
  covariance($covarRows.rowA, $covarRows.rowB, min($covarRows.rowA->size(),$covarRows.rowB->size()), false);
}

function <<PCT.test>> meta::pure::functions::math::tests::covarPopulation::testCovarPopulation<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(2.5, $f->eval(|covarPopulation([1, 2], [10, 20])));
  assertEquals(-5.0, $f->eval(|covarPopulation([1, 2], [30, 10])));
  assertEqWithinTolerance(21.11111111111111111111111111111111, $f->eval(|covarPopulation([1, 3.0, 6.0], [10, -20, 30]))->toOne(), 0.00000000001);
  assertEquals([], $f->eval(|covarPopulation([1], [])));
}

function <<PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::math::tests::covarPopulation::testSimpleGroupByCovarPopulation<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
//remove the sterotype to allow pipeline to pass, the testcases should pass after fixing platform handling null value
//1. TDS not able to accept null value, thus requiring to use extend to add null value 2. tds to String will return Integer_Min_Value instead of null value.
    let expr = {
                |#TDS
                  id, valA
                  1, 10.0
                  2, 10.0
                  2, 20.0
                  2, 25.0
                  2, 30.0
                  #->extend(~valB:c|if( $c.id == 1 || $c.valA == 25.0,
                  |[],
                  | if($c.valA == 30.0,
                      |35.0,
                      |$c.valA->toOne()+$c.valA->toOne()/10
                  
                  )
                    )
                    )->groupBy(~[id], ~[newCol : x | meta::pure::functions::math::mathUtility::rowMapper($x.valA->cast(@Number), $x.valB->cast(@Number)) : y | $y->covarPopulation()]);
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,newCol\n'+
                  '   1,[]\n'+
                  '   2,80.0\n'+
                  '#', $res->sort(~id->ascending())->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::math::tests::covarPopulation::testSimpleWindowCovarPopulation<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  id, valA, valB
                  1, 1, 10
                  1, 2, 20
                  2, 2, 40
                  2, 4, 15
                #->extend(over(~id), ~newCol:{p,w,r|meta::pure::functions::math::mathUtility::rowMapper($r.valA, $r.valB)}:y|$y->covarPopulation())
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,valA,valB,newCol\n'+
                  '   1,1,10,2.5\n'+
                  '   1,2,20,2.5\n'+
                  '   2,2,40,-12.5\n'+
                  '   2,4,15,-12.5\n'+
                  '#', $res->sort([~id->ascending(), ~valA->ascending()])->toString());
}
