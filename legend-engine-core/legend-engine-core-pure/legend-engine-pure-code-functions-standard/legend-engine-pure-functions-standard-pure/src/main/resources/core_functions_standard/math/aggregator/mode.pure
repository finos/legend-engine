// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

Class <<access.private>> meta::pure::functions::math::Accumulator
{
   numMax: Any[1];   
   maxCount: Integer[1];   
   prev: Any[1];   
   prevCount: Integer[1];   
}

function <<PCT.function>> meta::pure::functions::math::mode(numbers:Number[*]):Number[1]
{
     let sortedNumbers = $numbers->toOneMany()->sort();
     let res = $sortedNumbers->fold({x, y | let currCount =  if(!(($x < $y.prev->cast(@Number)) || ($x > $y.prev->cast(@Number))), |$y.prevCount + 1,|1);
                                            if($currCount > $y.maxCount,
                                                |^$y(numMax = $x, maxCount = $currCount, prev = $x, prevCount = $currCount);,
                                                |^$y(prev = $x, prevCount = $currCount););
                                    }, ^meta::pure::functions::math::Accumulator(numMax = 0, maxCount = 0, prev = 0, prevCount = 0));


    $res.numMax->cast(@Number);
}

function <<PCT.function>> meta::pure::functions::math::mode(numbers:Float[*]):Float[1]
{
     let sortedNumbers = $numbers->toOneMany()->sort();
     let res = $sortedNumbers->fold({x, y | let currCount =  if($x == $y.prev, |$y.prevCount + 1,|1);
                                            if($currCount > $y.maxCount,
                                                |^$y(numMax = $x, maxCount = $currCount, prev = $x, prevCount = $currCount);,
                                                |^$y(prev = $x, prevCount = $currCount););
                                    }, ^meta::pure::functions::math::Accumulator(numMax = 0, maxCount = 0, prev = 0, prevCount = 0));

     $res.numMax->cast(@Float);
}


function <<PCT.function>> meta::pure::functions::math::mode(numbers:Integer[*]):Integer[1]
{
     let sortedNumbers = $numbers->toOneMany()->sort();
     let res = $sortedNumbers->fold({x, y | let currCount =  if($x == $y.prev, |$y.prevCount + 1,|1);
                                            if($currCount > $y.maxCount,
                                                |^$y(numMax = $x, maxCount = $currCount, prev = $x, prevCount = $currCount);,
                                                |^$y(prev = $x, prevCount = $currCount););
                                    }, ^meta::pure::functions::math::Accumulator(numMax = 0, maxCount = 0, prev = 0, prevCount = 0));

    $res.numMax->cast(@Integer);
}

function <<PCT.test>> meta::pure::functions::math::tests::mode::testMode_Number<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEq(5, $f->eval(|mode([5])));
   assertEq(3, $f->eval(|mode([3, 3.0, 3, 2, 2])));
   assertEq(2.0, $f->eval(|mode([3, 2, 3.0, 7.0, 2, 2, 3, 2.0, 2.0])));
}

function <<PCT.test>> meta::pure::functions::math::tests::mode::testMode_Float<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEq(1.0, $f->eval(|mode([1.0])));
   assertEq(5.0, $f->eval(|mode([5.0, 5.0, 5.0, 2.0, 2.0])));
   assertEq(1.2, $f->eval(|mode([1.2, 1.7, 1.2, 2.3, 1.7, 1.2])));
}

function <<PCT.test>> meta::pure::functions::math::tests::mode::testMode_Integer<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEq(5, $f->eval(|mode([5])));
   assertEq(1, $f->eval(|mode([1, 1, 1, 2, 2])));
   assertEq(2, $f->eval(|mode([2, 3, 2, 1, 2, 4, 1, 3, 4, 2])));
}

function <<PCT.test>> meta::pure::functions::math::tests::mode::testMode_Floats_Relation_Aggregate<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  id, grp, name, employeeNumber
                  1, 2, A, 101.0
                  2, 0, B, 32.0
                  3, 3, C, 71.0
                  4, 1, D, 41.0
                  5, 2, E, 11.0
                  6, 1, F, 5.0
                  7, 1, G, 5.0
                  8, 1, H, 5.0
                  9, 2, I, 51.0
                  10, 2, J, 101.0
                 
                #->groupBy(~grp, ~newCol : x | $x.employeeNumber : y | $y->mode())
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   grp,newCol\n'+
                  '   0,32.0\n'+
                  '   1,5.0\n'+
                  '   2,101.0\n'+
                  '   3,71.0\n'+
                  '#', $res->sort(~grp->ascending())->toString());
}

function <<PCT.test>> meta::pure::functions::math::tests::mode::testMode_Integer_Relation_Aggregate<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  id, grp, name, employeeNumber
                  1, 2, A, 101
                  2, 0, B, 32
                  3, 3, C, 71
                  4, 1, D, 41
                  5, 2, E, 11
                  6, 1, F, 5
                  7, 1, G, 5
                  8, 1, H, 5
                  9, 2, I, 51
                  10, 2, J, 101
                 
                #->groupBy(~grp, ~newCol : x | $x.employeeNumber : y | $y->mode())
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   grp,newCol\n'+
                  '   0,32\n'+
                  '   1,5\n'+
                  '   2,101\n'+
                  '   3,71\n'+
                  '#', $res->sort(~grp->ascending())->toString());
}

function <<PCT.test>> meta::pure::functions::math::tests::mode::testMode_Number_Relation_Aggregate<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                |#TDS
                  id, grp, name, employeeNumber
                  1, 2, A, 101
                  2, 0, B, 32.0
                  3, 3, C, 71
                  4, 1, D, 41
                  5, 2, E, 11.0
                  6, 1, F, 5.0
                  7, 1, G, 5.00
                  8, 1, H, 5
                  9, 2, I, 51
                  10, 2, J, 101.00
                 
                #->groupBy(~grp, ~newCol : x | $x.employeeNumber : y | $y->mode())
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   grp,newCol\n'+
                  '   0,32.0\n'+
                  '   1,5.0\n'+
                  '   2,101.0\n'+
                  '   3,71.0\n'+
                  '#', $res->sort(~grp->ascending())->toString());
}

function <<PCT.test>> meta::pure::functions::math::tests::mode::testMode_Floats_Relation_Window<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, value
                  1, 2, 1.0
                  2, 3, 7.0
                  3, 3, 7.0
                  4, 1, 10.0
                  5, 1, 2.0   
                  6, 5, 9.0
                  7, 0, 10.0
                  8, 1, 7.0
                  9, 4, 4.0
                  10, 1, 10.0
                #->extend(over(~grp), ~newCol:{p,w,r|$r.value}:y|$y->mode())
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,value,newCol\n'+
                  '   7,0,10.0,10.0\n'+
                  '   4,1,10.0,10.0\n'+
                  '   5,1,2.0,10.0\n'+
                  '   8,1,7.0,10.0\n'+
                  '   10,1,10.0,10.0\n'+
                  '   1,2,1.0,1.0\n'+
                  '   2,3,7.0,7.0\n'+
                  '   3,3,7.0,7.0\n'+
                  '   9,4,4.0,4.0\n'+
                  '   6,5,9.0,9.0\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}

function <<PCT.test>> meta::pure::functions::math::tests::mode::testMode_Integer_Relation_Window<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, value
                  1, 2, 1
                  2, 3, 7
                  3, 3, 7
                  4, 1, 10
                  5, 1, 2  
                  6, 5, 9
                  7, 0, 10
                  8, 1, 7
                  9, 4, 4
                  10, 1, 10
                #->extend(over(~grp), ~newCol:{p,w,r|$r.value}:y|$y->mode())
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,value,newCol\n'+
                   '   7,0,10,10\n'+
                  '   4,1,10,10\n'+
                  '   5,1,2,10\n'+
                  '   8,1,7,10\n'+
                  '   10,1,10,10\n'+
                  '   1,2,1,1\n'+
                  '   2,3,7,7\n'+
                  '   3,3,7,7\n'+
                  '   9,4,4,4\n'+
                  '   6,5,9,9\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}

function <<PCT.test>> meta::pure::functions::math::tests::mode::testMode_Number_Relation_Window<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
    let expr = {
                | #TDS
                  id, grp, value
                  1, 2, 1
                  2, 3, 7.0
                  3, 3, 7
                  4, 1, 10.00
                  5, 1, 2  
                  6, 5, 9
                  7, 0, 10
                  8, 1, 7.0
                  9, 4, 4.0
                  10, 1, 10
                #->extend(over(~grp), ~newCol:{p,w,r|$r.value}:y|$y->mode())
               };

    let res =  $f->eval($expr);

    assertEquals( '#TDS\n'+
                  '   id,grp,value,newCol\n'+
                  '   7,0,10.0,10.0\n'+
                  '   4,1,10.0,10.0\n'+
                  '   5,1,2.0,10.0\n'+
                  '   8,1,7.0,10.0\n'+
                  '   10,1,10.0,10.0\n'+
                  '   1,2,1.0,1.0\n'+
                  '   2,3,7.0,7.0\n'+
                  '   3,3,7.0,7.0\n'+
                  '   9,4,4.0,4.0\n'+
                  '   6,5,9.0,9.0\n'+
                  '#', $res->sort([~grp->ascending(), ~id->ascending()])->toString());
}