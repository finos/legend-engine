// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function
    <<PCT.function>>
    {
         doc.doc='calculates a time bucket for DateTime, where the bucket is of size quantity unit (e.g. 5 Hour). Uses unix Epoch as the origin for the calculation.'
    }
    meta::pure::functions::date::timeBucket(date:DateTime[1], quantity:Integer[1], unit:DurationUnit[1]):DateTime[1];

function <<PCT.test>> meta::pure::functions::date::tests::timeBucket::testTimeBucketSeconds<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(%2024-01-31T00:32:34.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(1, DurationUnit.SECONDS)));
  assertEquals(%2024-01-31T00:32:34.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(2, DurationUnit.SECONDS)));
  assertEquals(%2024-01-31T00:32:30.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(10, DurationUnit.SECONDS)));
  assertEquals(%2024-01-31T00:32:24.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(18, DurationUnit.SECONDS)));
  assertEquals(%2024-01-31T00:32:33.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(3, DurationUnit.SECONDS)));
  assertEquals(%2024-01-31T00:32:30.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(30, DurationUnit.SECONDS)));
  assertEquals(%2024-01-31T23:22:08.000000000+0000, $f->eval(|%2024-01-31T23:22:09.710123456+0000->timeBucket(2, DurationUnit.SECONDS)));
  assertEquals(%2024-01-31T11:00:20.000000000+0000, $f->eval(|%2024-01-31T11:00:21.235123456+0000->timeBucket(10, DurationUnit.SECONDS)));
  assertEquals(%2024-01-31T17:15:54.000000000+0000, $f->eval(|%2024-01-31T17:15:59.249123456+0000->timeBucket(18, DurationUnit.SECONDS)));
  assertEquals(%1951-10-21T08:59:00.000000000+0000, $f->eval(|%1951-10-21T08:59:00.676123456+0000->timeBucket(3, DurationUnit.SECONDS)));
  assertEquals(%2124-08-21T23:59:30.000000000+0000, $f->eval(|%2124-08-21T23:59:51.000000000+0000->timeBucket(30, DurationUnit.SECONDS)));
}

function <<PCT.test>> meta::pure::functions::date::tests::timeBucket::testTimeBucketMinutes<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(%2024-01-31T00:32:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(1, DurationUnit.MINUTES)));
  assertEquals(%2024-01-31T00:32:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(2, DurationUnit.MINUTES)));
  assertEquals(%2024-01-31T00:30:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(10, DurationUnit.MINUTES)));
  assertEquals(%2024-01-31T00:18:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(18, DurationUnit.MINUTES)));
  assertEquals(%2024-01-31T00:30:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(3, DurationUnit.MINUTES)));
  assertEquals(%2024-01-31T00:30:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(30, DurationUnit.MINUTES)));
  assertEquals(%2024-01-31T23:22:00.000000000+0000, $f->eval(|%2024-01-31T23:22:09.710123456+0000->timeBucket(2, DurationUnit.MINUTES)));
  assertEquals(%2024-01-31T11:00:00.000000000+0000, $f->eval(|%2024-01-31T11:00:21.235123456+0000->timeBucket(10, DurationUnit.MINUTES)));
  assertEquals(%2024-01-31T17:06:00.000000000+0000, $f->eval(|%2024-01-31T17:15:59.249123456+0000->timeBucket(18, DurationUnit.MINUTES)));
  assertEquals(%1951-10-21T08:57:00.000000000+0000, $f->eval(|%1951-10-21T08:59:00.676123456+0000->timeBucket(3, DurationUnit.MINUTES)));
  assertEquals(%2124-08-21T23:30:00.000000000+0000, $f->eval(|%2124-08-21T23:59:51.000000000+0000->timeBucket(30, DurationUnit.MINUTES)));
}

function <<PCT.test>> meta::pure::functions::date::tests::timeBucket::testTimeBucketHours<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(%2024-01-31T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(1, DurationUnit.HOURS)));
  assertEquals(%2024-01-31T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(2, DurationUnit.HOURS)));
  assertEquals(%2024-01-30T22:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(10, DurationUnit.HOURS)));
  assertEquals(%2024-01-30T18:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(18, DurationUnit.HOURS)));
  assertEquals(%2024-01-31T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(3, DurationUnit.HOURS)));
  assertEquals(%2024-01-30T12:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(30, DurationUnit.HOURS)));
  assertEquals(%2024-01-31T22:00:00.000000000+0000, $f->eval(|%2024-01-31T23:22:09.710123456+0000->timeBucket(2, DurationUnit.HOURS)));
  assertEquals(%2024-01-31T08:00:00.000000000+0000, $f->eval(|%2024-01-31T11:00:21.235123456+0000->timeBucket(10, DurationUnit.HOURS)));
  assertEquals(%2024-01-31T12:00:00.000000000+0000, $f->eval(|%2024-01-31T17:15:59.249123456+0000->timeBucket(18, DurationUnit.HOURS)));
  assertEquals(%1951-10-21T06:00:00.000000000+0000, $f->eval(|%1951-10-21T08:59:00.676123456+0000->timeBucket(3, DurationUnit.HOURS)));
  assertEquals(%2124-08-21T00:00:00.000000000+0000, $f->eval(|%2124-08-21T23:59:51.000000000+0000->timeBucket(30, DurationUnit.HOURS)));
}

function <<PCT.test>> meta::pure::functions::date::tests::timeBucket::testTimeBucketDays<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(%2024-01-31T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(1, DurationUnit.DAYS)));
  assertEquals(%2024-01-30T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(2, DurationUnit.DAYS)));
  assertEquals(%2024-01-28T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(10, DurationUnit.DAYS)));
  assertEquals(%2024-01-24T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(18, DurationUnit.DAYS)));
  assertEquals(%2024-01-30T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(3, DurationUnit.DAYS)));
  assertEquals(%2024-01-18T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(30, DurationUnit.DAYS)));
  assertEquals(%2024-01-30T00:00:00.000000000+0000, $f->eval(|%2024-01-31T23:22:09.710123456+0000->timeBucket(2, DurationUnit.DAYS)));
  assertEquals(%2024-01-28T00:00:00.000000000+0000, $f->eval(|%2024-01-31T11:00:21.235123456+0000->timeBucket(10, DurationUnit.DAYS)));
  assertEquals(%2024-01-24T00:00:00.000000000+0000, $f->eval(|%2024-01-31T17:15:59.249123456+0000->timeBucket(18, DurationUnit.DAYS)));
  assertEquals(%1951-10-20T00:00:00.000000000+0000, $f->eval(|%1951-10-21T08:59:00.676123456+0000->timeBucket(3, DurationUnit.DAYS)));
  assertEquals(%2124-08-01T00:00:00.000000000+0000, $f->eval(|%2124-08-21T23:59:51.000000000+0000->timeBucket(30, DurationUnit.DAYS)));
}

function <<PCT.test>> meta::pure::functions::date::tests::timeBucket::testTimeBucketWeeks<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(%2024-01-29T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(1, DurationUnit.WEEKS)));
  assertEquals(%2024-01-29T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(2, DurationUnit.WEEKS)));
  assertEquals(%2024-01-15T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(10, DurationUnit.WEEKS)));
  assertEquals(%2023-10-23T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(18, DurationUnit.WEEKS)));
  assertEquals(%2024-01-15T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(3, DurationUnit.WEEKS)));
  assertEquals(%2024-01-15T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(30, DurationUnit.WEEKS)));
  assertEquals(%2024-01-29T00:00:00.000000000+0000, $f->eval(|%2024-01-31T23:22:09.710123456+0000->timeBucket(2, DurationUnit.WEEKS)));
  assertEquals(%2024-01-15T00:00:00.000000000+0000, $f->eval(|%2024-01-31T11:00:21.235123456+0000->timeBucket(10, DurationUnit.WEEKS)));
  assertEquals(%2023-10-23T00:00:00.000000000+0000, $f->eval(|%2024-01-31T17:15:59.249123456+0000->timeBucket(18, DurationUnit.WEEKS)));
  assertEquals(%1951-10-08T00:00:00.000000000+0000, $f->eval(|%1951-10-21T08:59:00.676123456+0000->timeBucket(3, DurationUnit.WEEKS)));
  assertEquals(%2124-01-31T00:00:00.000000000+0000, $f->eval(|%2124-08-21T23:59:51.000000000+0000->timeBucket(30, DurationUnit.WEEKS)));
}

function <<PCT.test>> meta::pure::functions::date::tests::timeBucket::testTimeBucketMonths<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(%2024-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(1, DurationUnit.MONTHS)));
  assertEquals(%2024-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(2, DurationUnit.MONTHS)));
  assertEquals(%2023-05-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(10, DurationUnit.MONTHS)));
  assertEquals(%2024-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(18, DurationUnit.MONTHS)));
  assertEquals(%2024-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(3, DurationUnit.MONTHS)));
  assertEquals(%2022-07-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(30, DurationUnit.MONTHS)));
  assertEquals(%2024-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T23:22:09.710123456+0000->timeBucket(2, DurationUnit.MONTHS)));
  assertEquals(%2023-05-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T11:00:21.235123456+0000->timeBucket(10, DurationUnit.MONTHS)));
  assertEquals(%2024-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T17:15:59.249123456+0000->timeBucket(18, DurationUnit.MONTHS)));
  assertEquals(%1951-10-01T00:00:00.000000000+0000, $f->eval(|%1951-10-21T08:59:00.676123456+0000->timeBucket(3, DurationUnit.MONTHS)));
  assertEquals(%2122-07-01T00:00:00.000000000+0000, $f->eval(|%2124-08-21T23:59:51.000000000+0000->timeBucket(30, DurationUnit.MONTHS)));
}

function <<PCT.test>> meta::pure::functions::date::tests::timeBucket::testTimeBucketYears<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(%2024-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(1, DurationUnit.YEARS)));
  assertEquals(%2024-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(2, DurationUnit.YEARS)));
  assertEquals(%2020-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(10, DurationUnit.YEARS)));
  assertEquals(%2024-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(18, DurationUnit.YEARS)));
  assertEquals(%2024-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(3, DurationUnit.YEARS)));
  assertEquals(%2000-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T00:32:34.999123456+0000->timeBucket(30, DurationUnit.YEARS)));
  assertEquals(%2024-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T23:22:09.710123456+0000->timeBucket(2, DurationUnit.YEARS)));
  assertEquals(%2020-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T11:00:21.235123456+0000->timeBucket(10, DurationUnit.YEARS)));
  assertEquals(%2024-01-01T00:00:00.000000000+0000, $f->eval(|%2024-01-31T17:15:59.249123456+0000->timeBucket(18, DurationUnit.YEARS)));
  assertEquals(%1949-01-01T00:00:00.000000000+0000, $f->eval(|%1951-10-21T08:59:00.676123456+0000->timeBucket(3, DurationUnit.YEARS)));
  assertEquals(%2120-01-01T00:00:00.000000000+0000, $f->eval(|%2124-08-21T23:59:51.000000000+0000->timeBucket(30, DurationUnit.YEARS)));
}
