// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function
    <<PCT.function>>
    {
        doc.doc='cosh returns the hyperbolic cosine of a number'
    }
meta::pure::functions::math::cosh(number:Number[1]):Float[1];

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::cosh::testCosH_Identities<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals($f->eval(|cosh(0)), 1.0);
  assertEquals($f->eval(|cosh(-5)), cosh(5));
  assertEquals($f->eval(|cosh(-100)), cosh(100));
  assertEqWithinTolerance($f->eval(|pow(cosh(7/2),2)), $f->eval(|(1 + cosh(7))/2), 0.00000000000001);
}

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::cosh::testCosH_Integers<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals($f->eval(|cosh(2)), 3.7621956910836314);
  assertEquals($f->eval(|cosh(-2)), 3.7621956910836314);

  assertEquals($f->eval(|cosh(6)), 201.7156361224559);
  assertEquals($f->eval(|cosh(-6)), 201.7156361224559);
}

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::cosh::testCosH_Floats<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals($f->eval(|cosh(-3.14)), 11.573574828312076);
  assertEquals($f->eval(|cosh(3.14)), 11.573574828312076);

  assertEquals($f->eval(|cosh(-.7654321)), 1.307528029695523);
  assertEquals($f->eval(|cosh(.7654321)), 1.307528029695523);

  assertEqWithinTolerance($f->eval(|cosh(11.573574828312076)), 53126.3144145034, 0.0000000001);
  assertEqWithinTolerance($f->eval(|cosh(-11.573574828312076)), 53126.3144145034, 0.0000000001);
}

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::cosh::testCosH_Eval<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals($f->eval(|cosh(-3.14)), 11.573574828312076);
  assertEquals($f->eval(|cosh(3.14)), 11.573574828312076);

  assertEquals($f->eval(|cosh(-.7654321)), 1.307528029695523);
  assertEquals($f->eval(|cosh(.7654321)), 1.307528029695523);

  assertEqWithinTolerance($f->eval(|cosh(11.573574828312076)), 53126.3144145034, 0.0000000001);
  assertEqWithinTolerance($f->eval(|cosh(-11.573574828312076)), 53126.3144145034, 0.0000000001);
}

function <<PCT.test>> meta::pure::functions::math::tests::trigonometry::cosh::testCosH_EvalFuncSig<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals($f->eval(|cosh_Number_1__Float_1_->eval(0)), 1.0);
  assertEquals($f->eval(|cosh_Number_1__Float_1_->eval(2)), 3.7621956910836314);
  assertEquals($f->eval(|cosh_Number_1__Float_1_->eval(1.5)), 2.352409615243247);
  assertEquals($f->eval(|cosh_Number_1__Float_1_->eval(0.5)), 1.1276259652063807);
  assertEquals($f->eval(|cosh_Number_1__Float_1_->eval(3.14)), 11.573574828312076);
  assertEquals($f->eval(|cosh_Number_1__Float_1_->eval(-3.14)), 11.573574828312076);
  assertEqWithinTolerance($f->eval(|cosh_Number_1__Float_1_->eval(11.573574828312076)), 53126.3144145034, 0.0000000001);
  assertEqWithinTolerance($f->eval(|cosh_Number_1__Float_1_->eval(-11.573574828312076)), 53126.3144145034, 0.0000000001);
}


