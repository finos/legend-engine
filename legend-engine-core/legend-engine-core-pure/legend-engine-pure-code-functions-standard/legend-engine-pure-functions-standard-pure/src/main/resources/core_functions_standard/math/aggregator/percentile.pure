// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

function <<PCT.function>> meta::pure::functions::math::percentile(numbers: Number[*], percentile: Float[1]): Number[0..1]
[
  ($percentile >= 0) && ($percentile <= 1)
]
{
  percentile($numbers, $percentile, true, true)
}

function <<PCT.function>> meta::pure::functions::math::percentile(numbers: Number[*], percentile: Float[1], ascending: Boolean[1], continuous: Boolean[1]): Number[0..1]
[
  ($percentile >= 0) && ($percentile <= 1)
]
{
  let data = eval(n|if($ascending, | $n, |$n->reverse()), $numbers->sort());
  let n = $data->size();

  if($n <= 1, 
    | $numbers->first(), 
    | let p = $percentile * 100;
      let pos = ($p * ($n - 1)) / 100;
      let intPos = $pos->floor();
      let d = if(!$continuous, | 0, | $pos - $intPos);
      if(
        [
          pair(| $pos == 0, | $data->first()),
          pair(| $pos >= $n - 1, | $data->last())
        ],
        | if($d == 0, 
            | // Discrete
              let percentLessThanCurr = (1.0 * ($intPos + 1)) / $n;
              if($percentLessThanCurr > $percentile, | $data->at($intPos), | $data->at($intPos + 1));, 
            | $data->at($intPos) + (($data->at($intPos + 1) - $data->at($intPos)) * $d)
          )
      );
  );
}

function <<PCT.test>> meta::pure::functions::math::tests::percentile::testPercentile<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
  assertEquals(7.75, $f->eval(|range(10)->map(x|$x+1)->percentile(0.75)));
  assertEquals(8, $f->eval(|range(10)->map(x|$x+1)->percentile(0.75, true, false)));
  assertEquals(3.25, $f->eval(|range(10)->map(x|$x+1)->percentile(0.75, false, true)));
  assertEquals(1, $f->eval(|range(10)->map(x|$x+1)->percentile(0.0, true, false)));
  assertEquals(10, $f->eval(|range(10)->map(x|$x+1)->percentile(1.0, true, false)));
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.aggregation>> meta::pure::functions::math::tests::percentile::testPercentile_Relation_Aggregate<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
  let expr = {
              |#TDS
                id, val
                1, 1.0
                1, 2.0
                1, 3
                2, 1.5
                2, 2.5
                2, 3.5
                3, 1
                3, 1.5
                3, 2.0
              #->groupBy(~[id], ~[newCol : x | $x.val : y | $y->percentile(0.6, true, false)])
              };

  let res =  $f->eval($expr);

  assertEquals( '#TDS\n'+
                '   id,newCol\n'+
                '   1,2.0\n'+
                '   2,2.5\n'+
                '   3,1.5\n'+
                '#', $res->sort(~id->ascending())->toString());
}

function <<PCT.test, PCTRelationQualifier.relation, PCTRelationQualifier.olap>> meta::pure::functions::math::tests::percentile::testPercentile_Relation_Window<T|m>(f:Function<{Function<{->T[m]}>[1]->T[m]}>[1]):Boolean[1]
{
  let expr = {
              |#TDS
                id, val
                1, 1.0
                1, 2.0
                1, 3
                2, 1.5
                2, 2.5
                2, 3.5
                3, 1
                3, 1.5
                3, 2.0
              #->extend(over(~id), ~newCol:{p,w,r|$r.val}:y|$y->percentile(0.6, false, true))
              };

  let res =  $f->eval($expr);
  assertEquals( '#TDS\n'+
                '   id,val,newCol\n'+
                '   1,1.0,1.8\n'+
                '   1,2.0,1.8\n'+
                '   1,3.0,1.8\n'+
                '   2,1.5,2.3\n'+
                '   2,2.5,2.3\n'+
                '   2,3.5,2.3\n'+
                '   3,1.0,1.4\n'+
                '   3,1.5,1.4\n'+
                '   3,2.0,1.4\n'+
                '#', $res->sort([~id->ascending(), ~val->ascending()])->toString());
}
