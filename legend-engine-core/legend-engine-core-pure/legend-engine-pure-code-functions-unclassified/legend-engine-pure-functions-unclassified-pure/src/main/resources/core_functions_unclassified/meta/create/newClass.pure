// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

native function meta::pure::functions::meta::newClass(name:String[1]):Class<Any>[1];




function <<test.Test>> meta::pure::functions::meta::tests::newClass::testNewClass():Boolean[1]
{
    let myClass = newClass('pkg1::pkg2::pkg3::MyClass');
    assertInstanceOf($myClass, Class);
    assertEquals('MyClass', $myClass.name);

    let pkg3 = $myClass.package->toOne();
    assertInstanceOf($pkg3, Package);
    assertEquals('pkg3', $pkg3.name);
    assertFalse($pkg3.children->contains($myClass));

    let pkg2 = $pkg3.package->toOne();
    assertInstanceOf($pkg2, Package);
    assertEquals('pkg2', $pkg2.name);

    let pkg1 = $pkg2.package->toOne();
    assertInstanceOf($pkg1, Package);
    assertEquals('pkg1', $pkg1.name);

    let rootPkg = $pkg1.package->toOne();
    assertInstanceOf($rootPkg, Package);
    assertEquals('Root', $rootPkg.name);

    let noPackage = newClass('ClassWithNoPackage');
    assertInstanceOf($noPackage, Class);
    assertEquals('ClassWithNoPackage', $noPackage.name);
    assertEquals('Root', $noPackage.package->toOne().name);
    assertFalse($noPackage.package->toOne().children->contains($noPackage));
}

function <<test.Test>> meta::pure::functions::meta::tests::newClass::testNewClassElementToPath():Boolean[1]
{
    let myClass = newClass('test::pkg::MyClass');
    assertEquals('test::pkg::MyClass', $myClass->elementToPath());
    assertEquals('Root::test::pkg::MyClass', $myClass->elementToPath(true));

    let otherClass = newClass('pkg1::pkg2::pkg3::OtherClass');
    assertEquals('pkg1::pkg2::pkg3::OtherClass', $otherClass->elementToPath());
    assertEquals('Root::pkg1::pkg2::pkg3::OtherClass', $otherClass->elementToPath(true));

    let noPackage = newClass('ClassWithNoPackage');
    assertEquals('ClassWithNoPackage', $noPackage->elementToPath());
    assertEquals('Root::ClassWithNoPackage', $noPackage->elementToPath(true));
}

function <<test.Test>> meta::pure::functions::meta::tests::newClass::testNewClassElementPath():Boolean[1]
{
    let myClass = newClass('pkg1::pkg2::pkg3::MyClass');
    let pkg3 = $myClass.package->toOne();
    let pkg2 = $pkg3.package->toOne();
    let pkg1 = $pkg2.package->toOne();
    let rootPkg = $pkg1.package->toOne();
    assertEquals([$rootPkg, $pkg1, $pkg2, $pkg3, $myClass], $myClass->elementPath());

    let noPackage = newClass('ClassWithNoPackage');
    assertEquals([$noPackage.package->toOne(), $noPackage], $noPackage->elementPath());
}
