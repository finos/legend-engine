// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

function <<PCT.function>> {doc.doc = 'Returns the number of times that a pattern occurs in a string. By default, it does case-sensitive matching and single-line mode, and POSIX wildcard character . does not match \n newline characters. The platform supports the full POSIX ERE (Extended Regular Expression) syntax.'}
  meta::pure::functions::string::regexpCount(string:String[1], regexp:String[1]):Integer[1]
{
  $string->regexpCount($regexp, [RegexpParameter.CASE_SENSITIVE]);
}

native function <<PCT.function>> {doc.doc = 'Returns the number of times that a pattern occurs in a string. By default, it does case-sensitive matching and single-line mode, and POSIX wildcard character . does not match \n newline characters. The platform supports the full POSIX ERE (Extended Regular Expression) syntax.'}
  meta::pure::functions::string::regexpCount(string:String[1], regexp:String[1], regexpParameters:RegexpParameter[1..*]):Integer[1];

function <<PCT.test>> meta::pure::functions::string::tests::regexpCount::testRegexpCount<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(2, $f->eval(|'It was the best of times, it was the worst of times'->regexpCount('was')));
  assertEquals(3, $f->eval(|'ER-6842,LG-230,LG-150,ER-3379,ER-6210'->regexpCount('ER-[0-9]{4}')));
}

function <<PCT.test>> meta::pure::functions::string::tests::regexpCount::testRegexpCount_CaseInsensitive<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(4, $f->eval(|'Excelence'->regexpCount('e', [RegexpParameter.CASE_INSENSITIVE])));
}
