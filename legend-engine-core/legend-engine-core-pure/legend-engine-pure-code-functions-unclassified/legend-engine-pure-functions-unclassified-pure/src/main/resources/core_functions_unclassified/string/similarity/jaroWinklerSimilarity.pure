// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function <<PCT.function>> {doc.doc = 'Calculates the Jaro-Winkler similarity between two strings, returning a value between 0 and 1.'}
  meta::pure::functions::string::jaroWinklerSimilarity(str1:String[1], str2:String[1]):Float[1];

function <<PCT.test>> meta::pure::functions::string::tests::jaroWinklerSimilarity::testJaroWinklerSimilarityEqual<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(1.0,  $f->eval(|'John Smith'->jaroWinklerSimilarity('John Smith')));
}

function <<PCT.test>> meta::pure::functions::string::tests::jaroWinklerSimilarity::testJaroWinklerSimilarityNotEqual<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(0.88, $f->eval(|'John Smith'->jaroWinklerSimilarity('Jane Smith')));
}