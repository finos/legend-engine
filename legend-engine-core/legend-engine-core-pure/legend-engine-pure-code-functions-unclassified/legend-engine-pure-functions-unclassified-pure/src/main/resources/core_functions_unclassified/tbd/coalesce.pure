// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::flow::*;
import meta::pure::test::pct::*;

function <<PCT.function>> meta::pure::functions::flow::coalesce<T>(value: T[0..1], ifEmpty: T[1]): T[1]
{
    if($value->isEmpty(), |$ifEmpty, |$value->toOne());
}

function <<PCT.function>> meta::pure::functions::flow::coalesce<T>(value1: T[0..1], value2: T[0..1], ifEmpty: T[1]): T[1]
{
    coalesce($value1, coalesce($value2, $ifEmpty));
}

function <<PCT.function>> meta::pure::functions::flow::coalesce<T>(value1: T[0..1], value2: T[0..1], value3: T[0..1], ifEmpty: T[1]): T[1]
{
    coalesce($value1, coalesce($value2, $value3, $ifEmpty));
}

function <<PCT.function>> meta::pure::functions::flow::coalesce<T>(value: T[0..1], ifEmpty: T[0..1]): T[0..1]
{
    if($value->isEmpty(), |$ifEmpty, |$value);
}

function <<PCT.function>> meta::pure::functions::flow::coalesce<T>(value1: T[0..1], value2: T[0..1], ifEmpty: T[0..1]): T[0..1]
{
    coalesce($value1, coalesce($value2, $ifEmpty));
}

function <<PCT.function>> meta::pure::functions::flow::coalesce<T>(value1: T[0..1], value2: T[0..1], value3: T[0..1], ifEmpty: T[0..1]): T[0..1]
{
    coalesce($value1, coalesce($value2, $value3, $ifEmpty));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce_NotEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('hello', $f->eval(|coalesce('hello', 'world')));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce_NotEmpty_DefaultEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('hello', $f->eval(|coalesce('hello', [])));
}


function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce_FirstEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('world', $f->eval(|coalesce([], 'world')));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce_AllEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals([], $f->eval(|coalesce([], [])));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce2_FirstNotEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('hello', $f->eval(|coalesce('hello', 'world', '!')));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce2_FirstNotEmpty_AllOthersEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('hello', $f->eval(|coalesce('hello', [], [])));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce2_SecondNotEmpty_AllOthersEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('world', $f->eval(|coalesce([], 'world', [])));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce2_SecondNotEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('world', $f->eval(|coalesce([], 'world', '!')));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce2_DefaultNotEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('!', $f->eval(|coalesce([], [], '!')));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce2_AllEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals([], $f->eval(|coalesce([], [], [])));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce3_FirstNotEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('hello', $f->eval(|coalesce('hello', 'world', '!', 'bye')));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce3_FirstNotEmpty_AllOthersEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('hello', $f->eval(|coalesce('hello', [], [], [])));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce3_SecondNotEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('world', $f->eval(|coalesce([], 'world', '!', 'bye')));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce3_ThirdNotEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('!', $f->eval(|coalesce([], [], '!', 'bye')));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce3_DefaultNotEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('bye', $f->eval(|coalesce([], [], [], 'bye')));
}

function <<PCT.test>> meta::pure::functions::flow::test::coalesce::coalesce3_AllEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals([], $f->eval(|coalesce([], [], [], [])));
}