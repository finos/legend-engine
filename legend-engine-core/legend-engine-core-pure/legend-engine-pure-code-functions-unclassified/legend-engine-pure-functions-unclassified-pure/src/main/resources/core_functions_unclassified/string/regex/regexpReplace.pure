// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

function <<PCT.function>> {doc.doc = 'Returns the subject with the specified pattern — or all occurrences of the pattern, if replaceAll is true — either removed or replaced by a replacement string. By default, it does case-sensitive matching and single-line mode, and POSIX wildcard character . does not match \n newline characters. The platform supports the full POSIX ERE (Extended Regular Expression) syntax.'}
  meta::pure::functions::string::regexpReplace(string:String[1], regexp:String[1], replacement:String[1], replaceAll:Boolean[1]):String[1]
{
  $string->regexpReplace($regexp, $replacement, $replaceAll, [RegexpParameter.CASE_SENSITIVE]);
}

native function <<PCT.function>> {doc.doc = 'Returns the subject with the specified pattern — or all occurrences of the pattern, if replaceAll is true — either removed or replaced by a replacement string. By default, it does case-sensitive matching and single-line mode, and POSIX wildcard character . does not match \n newline characters. The platform supports the full POSIX ERE (Extended Regular Expression) syntax.'}
  meta::pure::functions::string::regexpReplace(string:String[1], regexp:String[1], replacement:String[1], replaceAll:Boolean[1], regexpParameters:RegexpParameter[1..*]):String[1];

function <<PCT.test>> meta::pure::functions::string::tests::regexpReplace::testregexpReplace<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('aXc', $f->eval(|'abc'->regexpReplace('(b|c)', 'X', false)));
}

function <<PCT.test>> meta::pure::functions::string::tests::regexpReplace::testregexpReplaceAll<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('aXX', $f->eval(|'abc'->regexpReplace('(b|c)', 'X', true)));
}
