// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function <<PCT.function>> {doc.doc = 'Returns the ASCII integer value of the first character in the given string.'} 
  meta::pure::functions::string::ascii(source:String[1]):Integer[1];

function <<PCT.test>> meta::pure::functions::string::tests::ascii::testAsciiUpper<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(65, $f->eval(|'A'->ascii()));
  assertEquals(90, $f->eval(|'Z'->ascii()));
}

function <<PCT.test>> meta::pure::functions::string::tests::ascii::testAsciiLower<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(97, $f->eval(|'a'->ascii()));
  assertEquals(122, $f->eval(|'z'->ascii()));
}

function <<PCT.test>> meta::pure::functions::string::tests::ascii::testAsciiDigit<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(48, $f->eval(|'0'->ascii()));
  assertEquals(57, $f->eval(|'9'->ascii()));
}

function <<PCT.test>> meta::pure::functions::string::tests::ascii::testAsciiEmptyChar<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(0, $f->eval(|''->ascii()));
}

function <<PCT.test>> meta::pure::functions::string::tests::ascii::testAsciiNewline<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(10, $f->eval(|'\n'->ascii()));
}

function <<PCT.test>> meta::pure::functions::string::tests::ascii::testAsciiWhitespace<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(32, $f->eval(|' '->ascii()));
}

function <<PCT.test>> meta::pure::functions::string::tests::ascii::testAsciiMultiCharString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(97, $f->eval(|'abc'->ascii()));
}