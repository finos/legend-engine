// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::meta::tests::model::*;

function
   {doc.doc = 'Get the property with the given name from the given class. Note that this searches only properties defined directly on the class, not those inherited from super-classes or those which come from associations.'}
   meta::pure::functions::meta::classPropertyByName(class:Class<Any>[1], name:String[1]):Property<Nil,Any|*>[0..1]
{
    $class.properties->filter(p | $p.name == $name)->first()
}

function <<test.Test>> meta::pure::functions::meta::tests::properties::testClassPropertyByName():Boolean[1]
{
    assertEmpty(CC_EntityWithAddress->classPropertyByName('unknownProperty'));
    assertNotEmpty(CC_EntityWithAddress->classPropertyByName('address'));
    assertIs(CC_EntityWithAddress.properties->at(0), CC_EntityWithAddress->classPropertyByName('address')->toOne());
    assertEmpty(CC_EntityWithAddress->classPropertyByName('firstName'));

    assertEmpty(CC_Person->classPropertyByName('unknownProperty'));
    assertEmpty(CC_Person->classPropertyByName('address'));
    assertNotEmpty(CC_Person->classPropertyByName('firstName'));
    assertIs(CC_Person.properties->filter(p | $p.name == 'firstName')->toOne(), CC_Person->classPropertyByName('firstName')->toOne());
}