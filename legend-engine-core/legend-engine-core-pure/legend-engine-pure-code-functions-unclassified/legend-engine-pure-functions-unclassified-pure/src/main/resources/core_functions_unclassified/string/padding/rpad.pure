// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

function <<PCT.function>> {doc.doc = 'Pads the end of a string with the specified character until it reaches the desired length.'}
  meta::pure::functions::string::rpad(str:String[1], length:Integer[1], char:String[1]):String[1]
{
  pad($str, $length, $char, false)
}

function <<PCT.function>>
  meta::pure::functions::string::rpad(str:String[1], length:Integer[1]):String[1]
{
  rpad($str, $length, ' ')
}

function <<PCT.test>> meta::pure::functions::string::tests::rpad::testRpad<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('abcd______', $f->eval(|'abcd'->rpad(10, '_')));
}

function <<PCT.test>> meta::pure::functions::string::tests::rpad::testRpadDefaultCharacter<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('abcd      ', $f->eval(|'abcd'->rpad(10)));
}

function <<PCT.test>> meta::pure::functions::string::tests::rpad::testRpadStringLongerThanLength<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('abc', $f->eval(|'abcd'->rpad(3, '_')));
}

function <<PCT.test>> meta::pure::functions::string::tests::rpad::testRpadEmptyString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('???', $f->eval(|''->rpad(3, '?')));
}

function <<PCT.test>> meta::pure::functions::string::tests::rpad::testRpadEmptyChar<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('abcd', $f->eval(|'abcd'->rpad(10, '')));
}

function <<PCT.test>> meta::pure::functions::string::tests::rpad::testRpadMultiChar<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('ppxox', $f->eval(|'pp'->rpad(5, 'xo')));
}