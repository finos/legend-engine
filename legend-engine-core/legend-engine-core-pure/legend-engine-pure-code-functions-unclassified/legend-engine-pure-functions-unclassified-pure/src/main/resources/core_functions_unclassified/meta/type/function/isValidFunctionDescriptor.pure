// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

native function meta::pure::functions::meta::isValidFunctionDescriptor(functionDescriptor:String[1]):Boolean[1];

function <<test.Test>> meta::pure::functions::meta::tests::isValidFunctionDescriptor::testIsValidFunctionDescriptor():Boolean[1]
{
    assert('meta::pure::functions::meta::tests::functionDescriptorToId():Boolean[1]'->isValidFunctionDescriptor());
    assert('meta::pure::functions::collection::removeDuplicates(T[*], Function<{T[1]->V[1]}>[0..1], Function<{V[1], V[1]->Boolean[1]}>[0..1]):T[*]'->isValidFunctionDescriptor());
    assert('meta::pure::functions::collection::removeDuplicates(T[*], Function[0..1], Function[0..1]):T[*]'->isValidFunctionDescriptor());
    assert('meta::pure::functions::collection::removeDuplicates(T[*],Function[0..1],Function[0..1]):T[0..*]'->isValidFunctionDescriptor());
    assert('meta::pure::functions::meta::pathToElement(String[1]):PackageableElement[1]'->isValidFunctionDescriptor());
    assert('my::test::testUnits(Mass~Kilogram[1]):Mass~Kilogram[1]'->isValidFunctionDescriptor());

    assertFalse(''->isValidFunctionDescriptor());
    assertFalse('the quick brown fox jumps over the lazy dog'->isValidFunctionDescriptor());
    assertFalse('meta::pure::functions::meta::pathToElement(path:String[1]):PackageableElement[1]'->isValidFunctionDescriptor());
    assertFalse('meta::pure::functions::meta::pathToElement(String[[1]]):PackageableElement[1]'->isValidFunctionDescriptor());
    assertFalse('meta::pure::functions::meta::pathToElement(String[*..*]):PackageableElement[1]'->isValidFunctionDescriptor());
}
