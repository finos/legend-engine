// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

function <<PCT.function>>{doc.doc = 'Split the string and select the part.'}
   meta::pure::functions::string::splitPart(str:String[0..1], token:String[1], part:Integer[1]):String[0..1]
{
  if ($str->isEmpty(),
    | [],
    | $str->toOne()->split($token)->at($part));
}

function <<PCT.test>> meta::pure::functions::string::tests::testSplitPart<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(['Hello'], $f->eval(|'Hello World'->splitPart(' ', 0)));
    assertEquals(['World'], $f->eval(|'Hello World'->splitPart(' ', 1)));
}

function <<PCT.test>> meta::pure::functions::string::tests::testSplitPartEmptyString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([], $f->eval(|[]->splitPart(' ', 0)));
}

function <<PCT.test>> meta::pure::functions::string::tests::testSplitPartEmptyToken<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(['Hello World'], $f->eval(|'Hello World'->splitPart('', 0)));
}

function <<PCT.test>> meta::pure::functions::string::tests::testSplitPartWithNoSplit<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(['Hello World'], $f->eval(|'Hello World'->splitPart(';', 0)));
}

// This test shows incorrect behaviour of the PURE split implementation for multichar tokens.
// TODO: Fix when split is revised.
//function <<PCT.test>> meta::pure::functions::string::tests::testSplitPartMultiCharToken<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
//{
//    // splits on 'o', 'r' and 'or'
//    assertEquals(['Hell'], $f->eval(|'Hello World'->splitPart('or', 0)));
//    assertEquals([' W'], $f->eval(|'Hello World'->splitPart('or', 1)));
//    assertEquals(['ld'], $f->eval(|'Hello World'->splitPart('or', 2)));
//}

function <<PCT.test>> meta::pure::functions::string::tests::testSplitPartTypicalToken<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(['Phone'], $f->eval(|'Sunglasses, Keys, Phone, SL-card'->splitPart(', ', 2)));
    assertEquals(['name'], $f->eval(|'user.name'->splitPart('.', 1)));
    assertEquals(['e'], $f->eval(|'a;b;c;d;e'->splitPart(';', 4)));
    assertEquals(['4'], $f->eval(|'2_0_4'->splitPart('_', 2)));
    assertEquals(['super'], $f->eval(|'super-duper-looper'->splitPart('-', 0)));
}