// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::json::*;

native function meta::json::escape(string:String[1]):String[1];

native function meta::json::parseJSON(string:String[1]):meta::json::JSONElement[1];

native function meta::json::fromJson<T>(string:String[1], clazz:Class<T>[1], config:JSONDeserializationConfig[1]):T[1];

native function meta::json::fromJsonDeprecated<T>(string:String[1], clazz:Class<T>[1], config:JSONDeserializationConfig[1]):T[1];

native function meta::json::toJsonBeta(instance: Any[*], config: JSONSerializationConfig[1]):String[1];

// This function checks that 2 JSON strings represent semantically same object when deserialized despite having
// different order of key-value pairs because of JSON objects being unordered sets of key/value pairs
native function meta::pure::functions::boolean::equalJsonStrings(left:String[1], right:String[1]):Boolean[1];

// JSON model
Class meta::json::JSONElement
{
}

Class meta::json::JSONBoolean extends JSONElement
{
    <<equality.Key>> value : Boolean[1];
}

Class meta::json::JSONString extends JSONElement
{
    <<equality.Key>> value : String[1];
}

Class meta::json::JSONNumber extends JSONElement
{
    <<equality.Key>> value : Number[1];
}

Class meta::json::JSONNull extends JSONElement
{
    <<equality.Key>> value : Nil[0];
}

Class meta::json::JSONArray extends JSONElement
{
    <<equality.Key>> values : JSONElement[*];
}

Class meta::json::JSONObject extends JSONElement
{
    <<equality.Key>> keyValuePairs : JSONKeyValue[*];
}

Class meta::json::JSONKeyValue
{
    <<equality.Key>> key : JSONString[1];
    <<equality.Key>> value : JSONElement[1];
}

Class meta::json::JSONConfig
{
    typeKeyName : String[1];
    typeLookup : Pair<String,String>[*];
}

Class meta::json::JSONDeserializationConfig extends JSONConfig
{
    retainTypeField: Boolean[0..1];
    failOnUnknownProperties : Boolean[1];
    constraintsHandler: ConstraintsOverride[0..1];
}

Class meta::json::JSONSerializationConfig extends JSONConfig
{
    includeType: Boolean[0..1];
    fullyQualifiedTypePath: Boolean[0..1];
    //This only allows serializing 0 argument qualified properties
    serializeQualifiedProperties: Boolean[0..1];
    dateTimeFormat: String[0..1];
    serializePackageableElementName: Boolean[0..1];
    removePropertiesWithEmptyValues: Boolean[0..1];
    serializeMultiplicityAsNumber: Boolean[0..1];
    encryptionKey: String[0..1];
    encryptionStereotypes: Stereotype[*];
    decryptionKey: String[0..1];
    decryptionStereotypes: Stereotype[*];
}
