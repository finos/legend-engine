{
  "_type": "data",
  "elements": [
    {
      "_type": "function",
      "body": [
        {
          "_type": "lambda",
          "body": [
            {
              "_type": "func",
              "function": "filter",
              "parameters": [
                {
                  "_type": "func",
                  "function": "getAll",
                  "parameters": [
                    {
                      "_type": "packageableElementPtr",
                      "fullPath": "showcase::DataDefect"
                    }
                  ]
                },
                {
                  "_type": "lambda",
                  "body": [
                    {
                      "_type": "func",
                      "function": "equal",
                      "parameters": [
                        {
                          "_type": "property",
                          "parameters": [
                            {
                              "_type": "var",
                              "name": "x"
                            }
                          ],
                          "property": "status"
                        },
                        {
                          "_type": "enumValue",
                          "fullPath": "showcase::Status",
                          "value": "Closed by DGO"
                        }
                      ]
                    }
                  ],
                  "parameters": [
                    {
                      "_type": "var",
                      "name": "x"
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": []
        }
      ],
      "name": "testEnum__Any_MANY_",
      "package": "showcase",
      "parameters": [],
      "postConstraints": [],
      "preConstraints": [],
      "returnGenericType": {
        "multiplicityArguments": [],
        "rawType": {
          "_type": "packageableType",
          "fullPath": "meta::pure::metamodel::type::Any"
        },
        "typeArguments": [],
        "typeVariableValues": []
      },
      "returnMultiplicity": {
        "lowerBound": 0
      },
      "stereotypes": [],
      "taggedValues": [],
      "tests": []
    }
  ]
}