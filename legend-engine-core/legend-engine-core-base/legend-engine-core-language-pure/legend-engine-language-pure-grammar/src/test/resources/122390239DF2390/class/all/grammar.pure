Class <<AProfile.flag, protocol::AProfile.newFlag>> {protocol::AProfile.tag1 = 'yeah', AProfile.tag2 = 'ok'} protocol::AClass extends protocol::SuperClass, Light
[
  $this.other->startsWith('x'),
  id: $this.other->endsWith('z'),
  other
  (
    ~owner: theOwner
    ~externalId: 'someId'
    ~function: $this.other->length() > 2
    ~enforcementLevel: Error
    ~message: $this.other + ' has issues'
  ),
  other2
  (
    ~externalId: 'ok'
    ~function: $this.other->length() < 4
  )
]
{
  <<AProfile.flag, protocol::AProfile.newFlag>> {protocol::AProfile.tag1 = 'yeah', AProfile.tag2 = 'ok'} (composite) other: String[1];
  (shared) defaultValue: String[1] = 'default';
  defaultValueArray: String[1..*] = ['a', 'b'];
  defaultType: LightP[1] = ^LightP(value=1);
  graph: String[1] = Class.name;
  extendedPrimitive: protocol::MyConstrainedPrimitiveWithVar(10,'a')[1];
  <<AProfile.flag, protocol::AProfile.newFlag>> {protocol::AProfile.tag1 = 'yeah', AProfile.tag2 = 'ok'} qualifiedProperty(param: String[1],param2: String[1]) {
    let x = 'ok' + $param + $param2;
    $x;
  }: String[1];
}
