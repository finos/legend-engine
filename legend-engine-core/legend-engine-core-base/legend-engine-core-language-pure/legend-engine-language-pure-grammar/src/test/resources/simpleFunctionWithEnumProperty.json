{
  "_type": "data",
  "elements": [
    {
      "_type": "Enumeration",
      "name": "Status",
      "package": "showcase",
      "stereotypes": [],
      "taggedValues": [],
      "values": [
        {
          "stereotypes": [],
          "taggedValues": [],
          "value": "Accepted"
        },
        {
          "stereotypes": [],
          "taggedValues": [],
          "value": "Closed by DGO"
        }
      ]
    },
    {
      "_type": "class",
      "constraints": [],
      "name": "DataDefect",
      "originalMilestonedProperties": [],
      "package": "showcase",
      "properties": [
        {
          "genericType": {
            "multiplicityArguments": [],
            "rawType": {
              "_type": "packageableType",
              "fullPath": "showcase::Status"
            },
            "typeArguments": [],
            "typeVariableValues": []
          },
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "status",
          "stereotypes": [],
          "taggedValues": []
        }
      ],
      "qualifiedProperties": [],
      "stereotypes": [],
      "superTypes": [],
      "taggedValues": []
    },
    {
      "_type": "function",
      "body": [
        {
          "_type": "lambda",
          "body": [
            {
              "_type": "func",
              "function": "filter",
              "parameters": [
                {
                  "_type": "func",
                  "function": "getAll",
                  "parameters": [
                    {
                      "_type": "packageableElementPtr",
                      "fullPath": "showcase::DataDefect"
                    }
                  ]
                },
                {
                  "_type": "lambda",
                  "body": [
                    {
                      "_type": "func",
                      "function": "equal",
                      "parameters": [
                        {
                          "_type": "property",
                          "parameters": [
                            {
                              "_type": "var",
                              "name": "x"
                            }
                          ],
                          "property": "status"
                        },
                        {
                          "_type": "property",
                          "parameters": [
                            {
                              "_type": "packageableElementPtr",
                              "fullPath": "showcase::Status"
                            }
                          ],
                          "property": "Closed by DGO"
                        }
                      ]
                    }
                  ],
                  "parameters": [
                    {
                      "_type": "var",
                      "name": "x"
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": []
        }
      ],
      "name": "testEnum__Any_MANY_",
      "package": "showcase",
      "parameters": [],
      "postConstraints": [],
      "preConstraints": [],
      "returnGenericType": {
        "multiplicityArguments": [],
        "rawType": {
          "_type": "packageableType",
          "fullPath": "meta::pure::metamodel::type::Any"
        },
        "typeArguments": [],
        "typeVariableValues": []
      },
      "returnMultiplicity": {
        "lowerBound": 0
      },
      "stereotypes": [],
      "taggedValues": [],
      "tests": []
    },
    {
      "_type": "sectionIndex",
      "name": "SectionIndex",
      "package": "__internal__",
      "sections": [
        {
          "_type": "importAware",
          "elements": [],
          "imports": [],
          "parserName": "Pure"
        },
        {
          "_type": "importAware",
          "elements": [
            "showcase::Status",
            "showcase::DataDefect",
            "showcase::testEnum__Any_MANY_"
          ],
          "imports": [],
          "parserName": "Pure"
        }
      ]
    }
  ]
}