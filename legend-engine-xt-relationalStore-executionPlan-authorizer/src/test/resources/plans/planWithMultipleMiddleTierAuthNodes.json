{
  "_type" : "simple",
  "authDependent" : false,
  "rootExecutionNode" : {
    "_type" : "sequence",
    "executionNodes" : [
      {
      "_type" : "function-parameters-validation",
      "executionNodes" : [ ],
      "functionParameters" : [ {
        "_type" : "var",
        "class" : "String",
        "multiplicity" : {
          "lowerBound" : 0
        },
        "name" : "names",
        "supportsStream" : false
      } ],
      "resultType" : {
        "_type" : "dataType",
        "dataType" : "Boolean"
      }
    },
      {
      "_type" : "relationalTdsInstantiation",
      "executionNodes" : [ {
        "_type" : "sql",
        "connection" : {
          "_type" : "RelationalDatabaseConnection",
          "authenticationStrategy" : {
            "_type" : "middleTierUserNamePassword",
            "vaultReference" : "reference1"
          },
          "datasourceSpecification" : {
            "_type" : "static",
            "databaseName" : "name1",
            "host" : "host1.com",
            "port" : 1234
          },
          "element" : "test::DB",
          "postProcessorWithParameter" : [ ],
          "postProcessors" : [ ],
          "type" : "MemSQL"
        },
        "executionNodes" : [ ],
        "resultColumns" : [ {
          "dataType" : "VARCHAR(100)",
          "label" : "\"fullName\""
        } ],
        "resultType" : {
          "_type" : "dataType",
          "dataType" : "meta::pure::metamodel::type::Any"
        },
        "sqlQuery" : "select \"root\".fullName as \"fullName\" from PERSON as \"root\""
      } ],
      "resultType" : {
        "_type" : "tds",
        "tdsColumns" : [ {
          "enumMapping" : { },
          "name" : "fullName",
          "relationalType" : "VARCHAR(100)",
          "type" : "String"
        } ]
      }
    },
      {
        "_type" : "relationalTdsInstantiation",
        "executionNodes" : [ {
          "_type" : "sql",
          "connection" : {
            "_type" : "RelationalDatabaseConnection",
            "authenticationStrategy" : {
              "_type" : "middleTierUserNamePassword",
              "vaultReference" : "reference1"
            },
            "datasourceSpecification" : {
              "_type" : "static",
              "databaseName" : "name2",
              "host" : "host2.com",
              "port" : 1235
            },
            "element" : "test::DB2",
            "postProcessorWithParameter" : [ ],
            "postProcessors" : [ ],
            "type" : "MemSQL"
          },
          "executionNodes" : [ ],
          "resultColumns" : [ {
            "dataType" : "VARCHAR(100)",
            "label" : "\"fullName\""
          } ],
          "resultType" : {
            "_type" : "dataType",
            "dataType" : "meta::pure::metamodel::type::Any"
          },
          "sqlQuery" : "select \"root\".fullName as \"fullName\" from PERSON as \"root\""
        } ],
        "resultType" : {
          "_type" : "tds",
          "tdsColumns" : [ {
            "enumMapping" : { },
            "name" : "fullName",
            "relationalType" : "VARCHAR(100)",
            "type" : "String"
          } ]
        }
      }
    ],
    "resultType" : {
      "_type" : "tds",
      "tdsColumns" : [ {
        "enumMapping" : { },
        "name" : "fullName",
        "relationalType" : "VARCHAR(100)",
        "type" : "String"
      } ]
    }
  },
  "serializer" : {
    "name" : "pure",
    "version" : "vX_X_X"
  },
  "templateFunctions" : [ "<#function renderCollection collection separator prefix suffix defaultValue><#if collection?size == 0><#return defaultValue></#if><#return prefix + collection?join(suffix + separator + prefix) + suffix></#function>", "<#function collectionSize collection> <#return collection?size?c> </#function>", "<#function optionalVarPlaceHolderOperationSelector optionalParameter trueClause falseClause><#if optionalParameter?has_content || optionalParameter?is_string><#return trueClause><#else><#return falseClause></#if></#function>", "<#function varPlaceHolderToString optionalParameter prefix suffix defaultValue><#if optionalParameter?is_enumerable && !optionalParameter?has_content><#return defaultValue><#else><#return prefix + optionalParameter + suffix></#if></#function>" ]
}