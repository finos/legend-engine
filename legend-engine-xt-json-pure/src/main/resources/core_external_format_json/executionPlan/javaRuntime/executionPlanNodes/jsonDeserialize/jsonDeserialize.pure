// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::engine::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::engine::java::graphFetch::json::*;
import meta::pure::executionPlan::engine::java::graphFetch::storeStreamReading::*;
import meta::pure::executionPlan::engine::java::naming::*;
import meta::pure::executionPlan::engine::java::platform::*;
import meta::pure::executionPlan::engine::java::typeInfo::*;

import meta::pure::mapping::modelToModel::*;
import meta::pure::router::extension::*;

import meta::external::format::json::executionPlan::engine::*;

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::transform::*;

import meta::external::shared::format::binding::*;
import meta::external::shared::format::binding::validation::*;
import meta::external::shared::format::executionPlan::*;

import meta::external::format::json::binding::validation::*;
import meta::external::format::json::executionPlan::*;

// ========================================================================================================================================================
// prepare
// ========================================================================================================================================================

function meta::external::format::json::executionPlan::engine::java::jsonDeserialize::prepareForJsonDeserialize(node:JsonDeserializeExecutionNode[1], path:String[1], context:GenerationContext[1], extensions:RouterExtension[*], debug:DebugContext[1]): GenerationContext[1]
{
   print(if($debug.debug,|$debug.space+'('+$path+') prepare JsonDeserializeExecutionNode\n', |''));

   let conventions   = $context.conventions;
   let bindingDetail = bindDetails($node.binding);
   assert($bindingDetail->instanceOf(JsonSchemaBindingDetail), | 'Detailed binding failed: ' + $bindingDetail->cast(@FailedBindingDetail).errorMessages->joinStrings('\n'));

   assert($node.tree->isNotEmpty(), |'Use case without graph fetch tree not yet supported');
   let class       = $node.tree->toOne().class;
   let simpleType  = ^SimpleJavaType(pureType=$class, javaType=$conventions->className($class));
   let returnType  = ^CheckedJavaType(checkedOf=$simpleType, source=^SimpleJavaType(pureType=JsonDataRecord, javaType=$conventions->className(JsonDataRecord)));
   
   let newTypeInfos = $context.typeInfos
                         ->addForGraphFetchTree($node.tree->toOne())
                         ->addForClassWithAllProperties(JsonDataRecord);

   let nodeInfo = ^NodeInfo(
      path            = $path, 
      returnType      = $returnType, 
      graphFetchTrees = #{JsonDataRecord {number, record}}#,
      data            = $bindingDetail
   );

   $context
      ->setTypeInfos($newTypeInfos)
      ->addNodeInfo($nodeInfo);
}


// ========================================================================================================================================================
// generate
// ========================================================================================================================================================

function meta::external::format::json::executionPlan::engine::java::jsonDeserialize::generateForJsonDeserialize(node:JsonDeserializeExecutionNode[1], path:String[1], context:GenerationContext[1], extensions:RouterExtension[*], debug:DebugContext[1]): GeneratedCode[1]
{
   print(if($debug.debug,|$debug.space+'('+$path+') generate JsonDeserializeExecutionNode\n', |''));
   
   let conventions        = $context.conventions;
   let pureClass          = $node.tree->toOne().class;
   let readableClasses    = $pureClass->concatenate($context.typeInfos->classDependenciesViaPropertiesWithsubTypes($pureClass));
   let readableEnums      = $context.typeInfos->enumDependenciesViaProperties($pureClass);
   let dataClassesProject = $readableClasses->map(rc | $rc->createStreamReadingDataClass($path, $context, true, $debug->indent()));

   let storeReaderProject = createJsonReading($pureClass, $conventions->className($pureClass), $path, $node.pathOffset->cast(@JsonPathReference).path, $readableClasses, $readableEnums, $context, $debug->indent());

   let sourceStreamParam       = j_parameter(javaInputStream(), 'sourceStream');
   let streamReaderMethodCodes = $conventions->jsonReaderClass($path, $pureClass)
                                             ->j_new($sourceStreamParam)
                                             ->j_return();
   
   let executeClassWithImports = $conventions->planNodeClass('public', $path, 'Execute')
                                             ->usingKnownPackages($conventions->knownPackages())
                                             ->imports($conventions->standardImports())
                                             ->imports(javaInputStream())
                                             ->imports([_IJsonDeserializeExecutionNodeSpecifics, StoreStreamReader]->map(x | $conventions->className($x)))
                                             ->implements($conventions->className(_IJsonDeserializeExecutionNodeSpecifics));

   let executeClass = $executeClassWithImports->addMethod(
      javaMethod(['public'], $conventions->className(StoreStreamReader), 'streamReader', [$sourceStreamParam], $streamReaderMethodCodes)
   );

   let executeProject = newProject()->addClasses($executeClass);
   let allProjects    = $executeProject
      ->concatenate($dataClassesProject)
      ->concatenate($storeReaderProject)
      ->concatenate($streamReaderMethodCodes->dependencies()->resolveAndGetProjects())
      ->toOneMany();
   
   $allProjects->mergeProjects()->generatedCode($executeClass);
}