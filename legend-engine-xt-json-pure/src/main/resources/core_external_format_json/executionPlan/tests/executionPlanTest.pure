// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::json::executionPlan::test::*;
import meta::external::format::json::metamodel::*;

import meta::external::shared::format::binding::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::functions::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::functions::*;

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::model::unit::*;
import meta::pure::runtime::*;

Class meta::external::format::json::executionPlan::test::Person
{
   firstName : String[1];
   lastName  : String[1];
   firm      : Firm[1];
}

Class meta::external::format::json::executionPlan::test::Firm
{
   legalName : String[1];
}

function <<meta::pure::profiles::test.Test>> meta::external::format::json::executionPlan::test::planGenerationForSimpleJsonSchema(): Boolean[1]
{
   let extensions = meta::external::shared::format::externalFormatExtension()->concatenate(meta::external::format::json::extension::jsonSchemaFormatExtension());
   
   let schemaSet = ^SchemaSet(
      name    = 'TestSchema',
      package = meta::external::format::json::executionPlan::test,
      format  = 'JSON',
      schemas = ^Schema(
         id = 'Person',
         location = 'meta/external/format/json/executionPlan/test/Person.json',
         detail  = ^JsonSchema(
            content = '{\n'+
                        '  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n'+
                        '  \"title\": \"meta::external::format::json::executionPlan::test::Person\",\n'+
                        '  \"type\": \"object\",\n'+
                        '  \"properties\": {\n'+
                        '    \"firstName\": {\n'+
                        '      \"type\": \"string\"\n'+
                        '    },\n'+
                        '    \"lastName\": {\n'+
                        '      \"type\": \"string\"\n'+
                        '    },\n'+
                        '    \"firm\": {\n'+
                        '      \"$ref\": \"#/definitions/meta::external::format::json::executionPlan::test::Firm\"\n'+
                        '    }\n'+
                        '  },\n'+
                        '  \"required\": [\n'+
                        '    \"firstName\",\n'+
                        '    \"lastName\",\n'+
                        '    \"firm\"\n'+
                        '  ],\n'+
                        '  \"definitions\": {\n'+
                        '    \"meta::external::format::json::executionPlan::test::Firm\": {\n'+
                        '      \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n'+
                        '      \"title\": \"meta::external::format::json::executionPlan::test::Firm\",\n'+
                        '      \"type\": \"object\",\n'+
                        '      \"properties\": {\n'+
                        '        \"legalName\": {\n'+
                        '          \"type\": \"string\"\n'+
                        '        }\n'+
                        '      },\n'+
                        '      \"required\": [\n'+
                        '        \"legalName\"\n'+
                        '      ]\n'+
                        '    }\n'+
                        '  }\n'+
                        '}'
         )
      )
   );
   
   let binding = ^Binding(
      name        = 'TestBinding',
      package     = meta::external::format::json::executionPlan::test,
      schemaSet   = $schemaSet,
      contentType = 'application/json',
      modelUnit   = newModelUnit()->include([Person, Firm])
   );
   
   let tree = #{Person {firstName, lastName, firm {legalName}}}#;

   let plan = executionPlan(
      |Person.all()->graphFetchChecked($tree)->externalize($binding),
      SelfMapping,
      ^Runtime(
         connections = ^ExternalFormatConnection(
            element        = $binding,
            externalSource = ^UrlStreamExternalSource(url = 'executor:default')
         )
      ),
      ^ExecutionContext(),
      $extensions,
      noDebug()
   );
  //  let boundPlan = $plan->generatePlatformCode(^meta::pure::executionPlan::PlatformCodeGenerationConfig(platform=meta::pure::executionPlan::Platform.JAVA), $extensions);
  //  $boundPlan->planToString(true, $extensions)->println();
   
   let planString = $plan->planToString(false, $extensions);
   
   let expected = 'ExternalFormat_Externalize\n'+
                  '(\n'+
                  '  type = String\n'+
                  '  resultSizeRange = 1\n'+
                  '  checked = true\n'+
                  '  binding = meta::external::format::json::executionPlan::test::TestBinding\n'+
                  '\n'+
                  '  (\n'+
                  '    GlobalGraphFetch\n'+
                  '    (\n'+
                  '      type = PartialClass[impls=[(meta::external::format::json::executionPlan::test::Person | SelfMapping.meta_external_format_json_executionPlan_test_Person)], propertiesWithParameters = [firstName, lastName, firm]]\n'+
                  '      resultSizeRange = *\n'+
                  '      store = MODEL\n'+
                  '      localGraphFetchExecutionNode = \n'+
                  '         InMemoryRootGraphFetch\n'+
                  '         (\n'+
                  '           type = PartialClass[impls=[(meta::external::format::json::executionPlan::test::Person | SelfMapping.meta_external_format_json_executionPlan_test_Person)], propertiesWithParameters = [firstName, lastName, firm]]\n'+
                  '           graphFetchTree = [meta_external_format_json_executionPlan_test_Person/meta::external::format::json::executionPlan::test::Person]{@(meta_external_format_json_executionPlan_test_Person->)@[/firstName],@(meta_external_format_json_executionPlan_test_Person->)@[/lastName],@(meta_external_format_json_executionPlan_test_Person->meta_external_format_json_executionPlan_test_Firm)@[meta_external_format_json_executionPlan_test_Firm/firm]{@(meta_external_format_json_executionPlan_test_Firm->)@[/legalName]}}\n'+
                  '           nodeIndex = 0\n'+
                  '           batchSize = 1\n'+
                  '           checked = true\n'+
                  '           (\n'+
                  '             DataQuality\n'+
                  '             (\n'+
                  '               type = PartialClass[impls=[], propertiesWithParameters = [firm, firstName, lastName]]\n'+
                  '               resultSizeRange = *\n'+
                  '               enableConstraints = true\n'+
                  '               checked = true\n'+
                  '\n'+
                  '               (\n'+
                  '                 ExternalFormat_Internalize\n'+
                  '                 (\n'+
                  '                   type = PartialClass[impls=[], propertiesWithParameters = [firm, firstName, lastName]]\n'+
                  '                   resultSizeRange = *\n'+
                  '                   binding = meta::external::format::json::executionPlan::test::TestBinding\n'+
                  '\n'+
                  '                   (\n'+
                  '                     UrlStream\n'+
                  '                     (\n'+
                  '                       type = String\n'+
                  '                       url = executor:default\n'+
                  '\n'+
                  '                     )\n'+
                  '                   )\n'+
                  '                 )\n'+
                  '               )\n'+
                  '             )\n'+
                  '           )\n'+
                  '           children = [\n'+
                  '              InMemoryPropertyGraphFetch\n'+
                  '              (\n'+
                  '                type = PartialClass[impls=[(meta::external::format::json::executionPlan::test::Firm | SelfMapping.meta_external_format_json_executionPlan_test_Firm)], propertiesWithParameters = [legalName]]\n'+
                  '                graphFetchTree = @(meta_external_format_json_executionPlan_test_Person->meta_external_format_json_executionPlan_test_Firm)@[meta_external_format_json_executionPlan_test_Firm/firm]{@(meta_external_format_json_executionPlan_test_Firm->)@[/legalName]}\n'+
                  '                nodeIndex = 3\n'+
                  '                parentIndex = 0\n'+
                  '                children = [\n'+
                  '                   \n'+
                  '                ]\n'+
                  '              )\n'+
                  '\n'+
                  '           ]\n'+
                  '         )\n'+
                  '      children = [\n'+
                  '         \n'+
                  '      ]\n'+
                  '    )\n'+
                  '  )\n'+
                  ')\n';

   assertEquals($expected, $planString);   
}

###Mapping

import meta::external::format::json::executionPlan::test::*;

Mapping meta::external::format::json::executionPlan::test::SelfMapping
(
   Person: Pure
   {
      ~src Person
      
      firstName   : $src.firstName,
      lastName    : $src.lastName,
      firm        : $src.firm
   }
   
   Firm: Pure
   {
      ~src Firm
      
      legalName   : $src.legalName
   }
)