// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::json::executionPlan::test::*;
import meta::pure::dataQuality::*;
import meta::external::format::json::metamodel::*;

import meta::external::shared::format::binding::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::tests::*;
import meta::external::shared::format::functions::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::functions::*;

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::model::unit::*;
import meta::pure::runtime::*;

Class meta::external::format::json::executionPlan::test::Person
[
    $this.firstName->length() <= 15
]
{
   firstName : String[1];
   lastName  : String[1];
   firm      : Firm[1];
   addresses : Address[*];
}

Class meta::external::format::json::executionPlan::test::Firm
[
    $this.legalName->length() <= 15
]
{
   legalName : String[1];
}

Class meta::external::format::json::executionPlan::test::Address
[
    $this.street->length() <= 15
]
{
   street : String[1];
}

function meta::external::format::json::executionPlan::test::getTestBinding():Binding[1]
{
   let schemaSet = ^SchemaSet(
      name    = 'TestSchema',
      package = meta::external::format::json::executionPlan::test,
	  format  = 'JSON',
      schemas = ^Schema(
         id = 'Person',
         location = 'meta/external/format/json/executionPlan/test/Person.json',
         detail  = ^JsonSchema(
            content = '{\n'+
            '  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n'+
            '  \"title\": \"meta::external::format::json::executionPlan::test::Person\",\n'+
            '  \"type\": \"object\",\n'+
            '  \"properties\": {\n'+
            '    \"firstName\": {\n'+
            '      \"type\": \"string\"\n'+
            '    },\n'+
            '    \"lastName\": {\n'+
            '      \"type\": \"string\"\n'+
            '    },\n'+
            '    \"firm\": {\n'+
            '      \"$ref\": \"#/definitions/meta::external::format::json::executionPlan::test::Firm\"\n'+
            '    }\n'+
            '  },\n'+
            '  \"required\": [\n'+
            '    \"firstName\",\n'+
            '    \"lastName\",\n'+
            '    \"firm\"\n'+
            '  ],\n'+
            '  \"definitions\": {\n'+
            '    \"meta::external::format::json::executionPlan::test::Firm\": {\n'+
            '      \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n'+
            '      \"title\": \"meta::external::format::json::executionPlan::test::Firm\",\n'+
            '      \"type\": \"object\",\n'+
            '      \"properties\": {\n'+
            '        \"legalName\": {\n'+
            '          \"type\": \"string\"\n'+
            '        }\n'+
            '      },\n'+
            '      \"required\": [\n'+
            '        \"legalName\"\n'+
            '      ]\n'+
            '    }\n'+
            '  }\n'+
            '}'
         )
      )
   );

   ^Binding(
      name        = 'TestBinding',
      package     = meta::external::format::json::executionPlan::test,
      schemaSet   = $schemaSet,
      contentType = 'application/json',
      modelUnit   = newModelUnit()->include([meta::external::format::json::executionPlan::test::Person, meta::external::format::json::executionPlan::test::Firm])
   );
}

function <<meta::pure::profiles::test.Test>> meta::external::format::json::executionPlan::test::planGenerationForSimpleJsonSchema(): Boolean[1]
{
   let extensions = [meta::external::shared::format::externalFormatExtension(), meta::external::format::json::extension::jsonSchemaFormatExtension()];

   let binding = getTestBinding();

   let tree = #{meta::external::format::json::executionPlan::test::Person {firstName, lastName, firm {legalName}}}#;

   let plan = executionPlan(
      |meta::external::format::json::executionPlan::test::Person->internalize($binding, ^Url(url = 'executor:default'))->graphFetchChecked($tree)->externalize($binding),
      ^ExecutionContext(),
      $extensions,
      noDebug()
   );

   let planString = $plan->planToString(false, $extensions);

   let expected = 'ExternalFormat_Externalize\n' +
                  '(\n' +
                  '  type = String\n' +
                  '  resultSizeRange = 1\n' +
                  '  checked = true\n' +
                  '  binding = meta::external::format::json::executionPlan::test::TestBinding\n' +
                  '\n' +
                  '  (\n' +
                  '    ExternalFormat_Internalize\n' +
                  '    (\n' +
                  '      type = Class[impls=]\n' +
                  '      resultSizeRange = *\n' +
                  '      binding = meta::external::format::json::executionPlan::test::TestBinding[application/json]\n' +
                  '      enableConstraints = true\n' +
                  '      checked = true\n' +
                  '      graphFetchTree = #{meta::external::format::json::executionPlan::test::Person{firm{legalName},firstName,lastName}}#\n' +
                  '\n' +
                  '      (\n' +
                  '        UrlStream\n' +
                  '        (\n' +
                  '          type = ByteStream\n' +
                  '          url = executor:default\n' +
                  '\n' +
                  '        )\n' +
                  '      )\n' +
                  '    )\n' +
                  '  )\n' +
                  ')\n';

   assertEquals($expected, $planString);
}
