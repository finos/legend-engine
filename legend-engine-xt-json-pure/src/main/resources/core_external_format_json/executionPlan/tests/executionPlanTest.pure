// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::json::executionPlan::test::*;
import meta::pure::dataQuality::*;
import meta::external::format::json::metamodel::*;

import meta::external::shared::format::binding::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::tests::*;
import meta::external::shared::format::functions::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::functions::*;

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::model::unit::*;
import meta::pure::runtime::*;

Class meta::external::format::json::executionPlan::test::TargetPerson
[
  $this.fullName->contains(' ')
]
{
  fullName  : String[1];
  addresses : TargetAddress[*];
}

Class meta::external::format::json::executionPlan::test::TargetFirm
[
  $this.legalName->length() <= 15
]
{
  name      : String[1];
  legalName : String[1];
}

Class meta::external::format::json::executionPlan::test::TargetAddress
[
  $this.addressLine1->length() <= 15
]
{
  addressLine1 : String[1];
  addressLine2 : String[0..1];
  address ()
  {
    $this.addressLine1 + ', ' + $this.addressLine2->concatenate('Unavailable')->first()->toOne()
  }: String[1];
}

Association meta::external::format::json::executionPlan::test::TargetPersonTargetFirmAssoc
{
  firm      : meta::external::format::json::executionPlan::test::TargetFirm[1];
  employees : meta::external::format::json::executionPlan::test::TargetPerson[*];
}

Class meta::external::format::json::executionPlan::test::Person
[
  $this.firstName->length() <= 15
]
{
  firstName : String[1];
  lastName  : String[1];
  firm      : Firm[1];
  addresses : Address[*];
}

Class meta::external::format::json::executionPlan::test::Firm
[
  $this.legalName->length() <= 15
]
{
  legalName : String[1];
}

Class meta::external::format::json::executionPlan::test::Address
[
    $this.street->length() <= 15
]
{
  street : String[1];
}

Class meta::external::format::json::executionPlan::test::SPerson
{
  firstName : String[1];
  lastName  : String[1];
}

function meta::external::format::json::executionPlan::test::getSPersonTestBinding():Binding[1]
{
   ^Binding
   (
      name        = 'TestBinding',
      package     = meta::external::format::json::executionPlan::test,
      contentType = 'application/json',
      modelUnit   = newModelUnit()->include([meta::external::format::json::executionPlan::test::SPerson])
   );
}

function meta::external::format::json::executionPlan::test::getTestBinding():Binding[1]
{
   let schemaSet = ^SchemaSet(
      name    = 'TestSchema',
      package = meta::external::format::json::executionPlan::test,
	    format  = 'JSON',
      schemas = ^Schema(
         id = 'Person',
         location = 'meta/external/format/json/executionPlan/test/Person.json',
         detail  = ^JsonSchema(
            content = '{\n'+
            '  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n'+
            '  \"title\": \"meta::external::format::json::executionPlan::test::Person\",\n'+
            '  \"type\": \"object\",\n'+
            '  \"properties\": {\n'+
            '    \"firstName\": {\n'+
            '      \"type\": \"string\"\n'+
            '    },\n'+
            '    \"lastName\": {\n'+
            '      \"type\": \"string\"\n'+
            '    },\n'+
            '    \"firm\": {\n'+
            '      \"$ref\": \"#/definitions/meta::external::format::json::executionPlan::test::Firm\"\n'+
            '    }\n'+
            '  },\n'+
            '  \"required\": [\n'+
            '    \"firstName\",\n'+
            '    \"lastName\",\n'+
            '    \"firm\"\n'+
            '  ],\n'+
            '  \"definitions\": {\n'+
            '    \"meta::external::format::json::executionPlan::test::Firm\": {\n'+
            '      \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n'+
            '      \"title\": \"meta::external::format::json::executionPlan::test::Firm\",\n'+
            '      \"type\": \"object\",\n'+
            '      \"properties\": {\n'+
            '        \"legalName\": {\n'+
            '          \"type\": \"string\"\n'+
            '        }\n'+
            '      },\n'+
            '      \"required\": [\n'+
            '        \"legalName\"\n'+
            '      ]\n'+
            '    }\n'+
            '  }\n'+
            '}'
         )
      )
   );

   ^Binding(
      name        = 'TestBinding',
      package     = meta::external::format::json::executionPlan::test,
      schemaSet   = $schemaSet,
      contentType = 'application/json',
      modelUnit   = newModelUnit()->include([meta::external::format::json::executionPlan::test::Person, meta::external::format::json::executionPlan::test::Firm])
   );
}

function <<meta::pure::profiles::test.Test>> meta::external::format::json::executionPlan::test::planGenerationForSimpleJsonSchema(): Boolean[1]
{
   let extensions = [meta::external::shared::format::externalFormatExtension(), meta::external::format::json::extension::jsonSchemaFormatExtension()];

   let binding = getTestBinding();

   let tree = #{meta::external::format::json::executionPlan::test::Person {firstName, lastName, firm {legalName}}}#;

   let plan = executionPlan(
      data:Byte[*]|meta::external::format::json::executionPlan::test::Person->internalize($binding, $data)->graphFetchChecked($tree)->externalize($binding, checked($tree, $binding)),
      ^ExecutionContext(),
      $extensions,
      noDebug()
   );

   let planString = $plan->planToString(false, $extensions);

   let expected = 'Sequence\n' +
                  '(\n' + 
                  '  type = String\n' +
                  '  resultSizeRange = 1\n' +
                  '  (\n' +
                  '    FunctionParametersValidationNode\n' +
                  '    (\n' +
                  '      functionParameters = [data:Byte[*]]\n' +
                  '    )\n' +
                  '    ExternalFormat_Externalize\n' +
                  '    (\n' +
                  '      type = String\n' +
                  '      resultSizeRange = 1\n' +
                  '      checked = true\n' +
                  '      binding = meta::external::format::json::executionPlan::test::TestBinding\n' +
                  '\n' +
                  '      (\n' +
                  '        ExternalFormat_Internalize\n' +
                  '        (\n' +
                  '          type = Class[impls=]\n' +
                  '          resultSizeRange = *\n' +
                  '          binding = meta::external::format::json::executionPlan::test::TestBinding[application/json]\n' +
                  '          enableConstraints = true\n' +
                  '          checked = true\n' +
                  '          graphFetchTree = #{meta::external::format::json::executionPlan::test::Person{firm{legalName},firstName,lastName}}#\n' +
                  '\n' +
                  '          (\n' +
                  '            VariableResolution\n' +
                  '            (\n' +
                  '              type = Byte\n' +
                  '              varName = data\n' +
                  '\n' +
                  '            )\n' +
                  '          )\n' +
                  '        )\n' +
                  '      )\n' +
                  '    )\n' +
                  '  )\n' +
                  ')\n';

   assertEquals($expected, $planString);
}

###Mapping
Mapping meta::external::format::json::executionPlan::test::M2MMapping
(
  meta::external::format::json::executionPlan::test::TargetPerson: Pure
  {
    ~src meta::external::format::json::executionPlan::test::Person
    
    fullName : $src.firstName + ' ' + $src.lastName,
    firm : $src.firm,
    addresses : $src.addresses
  }

  meta::external::format::json::executionPlan::test::TargetFirm: Pure
  {
    ~src meta::external::format::json::executionPlan::test::Firm
    
    name : $src.legalName,
    legalName : $src.legalName
  }

  meta::external::format::json::executionPlan::test::TargetAddress: Pure
  {
    ~src meta::external::format::json::executionPlan::test::Address
    
    addressLine1 : $src.street,
    addressLine2 : 'Dummy AddressLine 2'
  }

  meta::external::format::json::executionPlan::test::Person: Pure
  {
    ~src meta::external::format::json::executionPlan::test::SPerson
    
    firstName : $src.firstName,
    lastName : $src.lastName + ' dummy'
  }
)

// Trade - Product Models

###Pure 
import meta::pure::model::unit::*;
import meta::external::shared::format::binding::*;
import meta::external::format::json::executionPlan::test::*;

Enum meta::external::format::json::executionPlan::test::SynonymType
{
  CUSIP,
  ISIN
}

Class meta::external::format::json::executionPlan::test::Product
{
  productId: String[1];
  productName: String[1];
  description: String[1];
}

Class meta::external::format::json::executionPlan::test::Synonym
{
  name: String[1];
  type: SynonymType[1];
}

Class meta::external::format::json::executionPlan::test::Trade
{
  tradeId: Integer[1];
  traderKerb: String[0..1];
  quantity: Integer[1];
  productName() {$this.product.productName}: String[0..1];
  justProduct() {$this.product}: meta::external::format::json::executionPlan::test::Product[0..1];
}

Class meta::external::format::json::executionPlan::test::Trader
{
  kerberos: String[1];
  firstName: String[1];
  lastName: String[1];
}

Class meta::external::format::json::executionPlan::test::S_Trade
{
  s_tradeId: Integer[1];
  s_traderDetails: String[1];
  s_tradeDetails: String[1];
}

Class meta::external::format::json::executionPlan::test::S_Trade1
{
  s_tradeId: Integer[1];
  s_traderDetails: String[1];
  s_tradeDetails: String[1];
}

Class meta::external::format::json::executionPlan::test::S_Trade2
{
  s_tradeId: Integer[1];
  s_traderDetails: String[1];
  s_tradeDetails: String[1];
}


Class meta::external::format::json::executionPlan::test::S_Product
{
  s_productId: String[1];
  s_productName: String[1];
  s_description: String[1];
  s_synonyms: meta::external::format::json::executionPlan::test::S_Synonym[*];
}

Class meta::external::format::json::executionPlan::test::S_Synonym
{
  s_name: String[1];
  s_type: String[1];
}

Association meta::external::format::json::executionPlan::test::Product_Synonym
{
  product: meta::external::format::json::executionPlan::test::Product[1];
  synonyms: meta::external::format::json::executionPlan::test::Synonym[*];
}

Association meta::external::format::json::executionPlan::test::Trade_Product
{
  product: meta::external::format::json::executionPlan::test::Product[1];
  trades: meta::external::format::json::executionPlan::test::Trade[*];
}

Association meta::external::format::json::executionPlan::test::Trade_Trader
{
  trader: meta::external::format::json::executionPlan::test::Trader[1];
  trades: meta::external::format::json::executionPlan::test::Trade[*];
}

function meta::external::format::json::executionPlan::test::getTradeProductTestBinding():Binding[1]
{
   ^Binding(
      name        = 'TestBinding',
      package     = meta::external::format::json::executionPlan::test,
      contentType = 'application/json',
      modelUnit   = newModelUnit()->include([meta::external::format::json::executionPlan::test::S_Trade, meta::external::format::json::executionPlan::test::S_Product, meta::external::format::json::executionPlan::test::S_Synonym])
   );
}

###Mapping
Mapping meta::external::format::json::executionPlan::test::M2MCrossStoreMapping
(
  meta::external::format::json::executionPlan::test::Trade[trade_set]: Pure
  {
    ~src meta::external::format::json::executionPlan::test::S_Trade
    tradeId: $src.s_tradeId,
    +prodId: String[1]: $src.s_tradeDetails->split(':')->at(0),
    quantity: $src.s_tradeDetails->split(':')->at(1)->parseInteger(),
    trader[trader_set]: $src
  }
  meta::external::format::json::executionPlan::test::Trader[trader_set]: Pure
  {
    ~src meta::external::format::json::executionPlan::test::S_Trade
    kerberos: $src.s_traderDetails->split(':')->at(0),
    firstName: $src.s_traderDetails->split(':')->at(1),
    lastName: $src.s_traderDetails->split(':')->at(2)
  }
  meta::external::format::json::executionPlan::test::Product[prod_set]: Pure
  {
    ~src meta::external::format::json::executionPlan::test::S_Product
    productId: $src.s_productId,
    productName: $src.s_productName,
    description: $src.s_description,
    synonyms[synonym_set]: $src.s_synonyms
  }
  meta::external::format::json::executionPlan::test::Synonym[synonym_set]: Pure
  {
    ~src meta::external::format::json::executionPlan::test::S_Synonym
    name: $src.s_name,
    type: EnumerationMapping SynonymTypeMapping: $src.s_type
  }

  meta::external::format::json::executionPlan::test::Trade_Product: XStore
  {
    product[trade_set, prod_set]: $this.prodId == $that.productId,
    trades[prod_set, trade_set]: $this.productId == $that.prodId
  }

  meta::external::format::json::executionPlan::test::SynonymType: EnumerationMapping SynonymTypeMapping
  {
    CUSIP: ['cusip', 'CUSIP'],
    ISIN: ['isin', 'ISIN']
  }
)

Mapping meta::external::format::json::executionPlan::test::M2MUnionMapping
(
  meta::external::format::json::executionPlan::test::Trade[trade_set1]: Pure
  {
    ~src meta::external::format::json::executionPlan::test::S_Trade1
    tradeId: $src.s_tradeId,
    quantity: $src.s_tradeDetails->split(':')->at(1)->parseInteger(),
    trader[trader_set1]: $src
  }
  *meta::external::format::json::executionPlan::test::Trader[trader_set1]: Pure
  {
    ~src meta::external::format::json::executionPlan::test::S_Trade1
    kerberos: $src.s_traderDetails->split(':')->at(0),
    firstName: $src.s_traderDetails->split(':')->at(1),
    lastName: $src.s_traderDetails->split(':')->at(2)
  }

  meta::external::format::json::executionPlan::test::Trade[trade_set2]: Pure
  {
    ~src meta::external::format::json::executionPlan::test::S_Trade2
    tradeId: $src.s_tradeId,
    quantity: $src.s_tradeDetails->split(':')->at(1)->parseInteger(),
    trader[trader_set2]: $src
  }
  meta::external::format::json::executionPlan::test::Trader[trader_set2]: Pure
  {
    ~src meta::external::format::json::executionPlan::test::S_Trade2
    kerberos: $src.s_traderDetails->split(':')->at(0),
    firstName: $src.s_traderDetails->split(':')->at(1),
    lastName: $src.s_traderDetails->split(':')->at(2)
  }

  *meta::external::format::json::executionPlan::test::Trade: Operation
  {
    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(trade_set1,trade_set2)
  }
)