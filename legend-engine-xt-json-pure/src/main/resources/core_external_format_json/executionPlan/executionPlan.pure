// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::format::binding::*;
import meta::pure::metamodel::path::*;
import meta::external::shared::format::executionPlan::*;

import meta::external::format::json::executionPlan::*;
import meta::external::format::json::executionPlan::engine::java::jsonDeserialize::*;
import meta::external::format::json::executionPlan::engine::java::jsonSerialize::*;

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::graphFetch::*;
import meta::pure::extension::*;
import meta::pure::runtime::*;

Class meta::external::format::json::executionPlan::JsonSerializeExecutionNode extends ExternalFormatSerializeExecutionNode
{
}

Class meta::external::format::json::executionPlan::JsonDeserializeExecutionNode extends ExternalFormatDeserializeExecutionNode
{
   binding : Binding[1];
   tree    : RootGraphFetchTree<Any>[0..1]; 
}

Class meta::external::format::json::executionPlan::JsonPathReference extends meta::external::shared::format::executionPlan::PathReference
{
   path    : String[1];
}

function meta::external::format::json::executionPlan::generateSerializeNode(checked:Boolean[1], binding:Binding[1], children:ExecutionNode[*]): ExternalFormatSerializeExecutionNode[1]
{
   ^JsonSerializeExecutionNode(
      resultType      = ^ResultType(type=String),
      resultSizeRange = PureOne,
      checked         = $checked,
      binding         = $binding,
      executionNodes  = $children
   );
}

function meta::external::format::json::executionPlan::generateDeserializeNode(connection:Connection[1], children:ExecutionNode[1], tree:RootGraphFetchTree<Any>[0..1]): ExecutionNode[1]
{
   assert($tree->isNotEmpty(), 'Deserialization without Graph Fetch Tree not yet supported');
   let returnedClass = $tree.class->toOne();
   
   ^JsonDeserializeExecutionNode
   (
      resultType      = ^PartialClassResultType
                         (
                            type = $tree->toOne()->typeFromGraphFetchTree(),
                            propertiesWithParameters = $tree.subTrees->cast(@PropertyGraphFetchTree)->map(x | $x->map(x | ^PropertyWithParameters(property = $x.property, parameters = $x.parameters)))
                         ),
      resultSizeRange = ZeroMany,
      pathOffset      = $connection->cast(@ExternalFormatConnection).pathOffset->cast(@JsonPathReference),
      binding         = $connection->cast(@ExternalFormatConnection).element->cast(@Binding),
      tree            = $tree,
      executionNodes  = $children
   );
}

function meta::external::format::json::executionPlan::generatePathReference(path:Path<Nil,Any|*>[1]): PathReference[1]
{
   let pathString = $path.path->filter(ele | $ele->instanceOf(PropertyPathElement))->cast(@PropertyPathElement).property.name->joinStrings('/', '/', '');
   ^JsonPathReference(
      path = $pathString
   );
}

function meta::external::format::json::executionPlan::printPlanNodeToString(space:String[1], extensions:Extension[*]): Function<{Nil[1]->String[1]}>[*]
{
   [
      {node:JsonSerializeExecutionNode[1] |
         'JSON_Serialize\n' + 
         $space + '(' + header($node, $space, $extensions) + '\n' +
         $space + '  checked = ' + $node.checked->toString() + '\n' +
         $space + '  binding = ' + $node.binding->elementToPath() + '\n' +
         $node->childrenToString($space+'  ', $extensions) + '\n' +
         $node.implementation->printImplementation('implementation', $space+'  ', $extensions) +
         $space + ')\n'
      },
      {node:JsonDeserializeExecutionNode[1] |
         'JSON_Deserialize\n' + 
         $space + '(' + header($node, $space, $extensions) + '\n' +
         $space + '  binding = ' + $node.binding->elementToPath() + '\n' +
         if($node.pathOffset->isEmpty(), | '', | $space + '  pathOffset = ' + $node.pathOffset->cast(@JsonPathReference).path->toOne() + '\n')  +
         $node->childrenToString($space+'  ', $extensions) + '\n' +
         $node.implementation->printImplementation('implementation', $space+'  ', $extensions) +
         $space + ')\n'
      }
   ]
}

function meta::external::format::json::executionPlan::planJavaPrepare(path:String[1], context:GenerationContext[1], extensions:Extension[*], debug:DebugContext[1]): Function<{Nil[1]->GenerationContext[1]}>[*]
{
   [
      node:JsonSerializeExecutionNode[1]   | prepareForJsonSerialize($node, $path, $context, $extensions, $debug),
      node:JsonDeserializeExecutionNode[1] | prepareForJsonDeserialize($node, $path, $context, $extensions, $debug)
   ]
}

function meta::external::format::json::executionPlan::planJavaGenerate(path:String[1], context:GenerationContext[1], extensions:Extension[*], debug:DebugContext[1]): Function<{Nil[1]->GeneratedCode[1]}>[*]
{
   [
       node:JsonSerializeExecutionNode[1]   | generateForJsonSerialize($node, $path, $context, $extensions, $debug),
       node:JsonDeserializeExecutionNode[1] | generateForJsonDeserialize($node, $path, $context, $extensions, $debug)
   ]
}