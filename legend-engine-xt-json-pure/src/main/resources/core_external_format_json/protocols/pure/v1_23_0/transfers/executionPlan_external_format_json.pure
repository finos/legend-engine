// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::protocols::pure::v1_23_0::metamodel::executionPlan::*;
import meta::protocols::pure::v1_23_0::metamodel::external::format::json::executionPlan::*;

function meta::protocols::pure::v1_23_0::transformation::fromPureGraph::external::format::json::transformSerializeNode(node:meta::external::format::json::executionPlan::JsonSerializeExecutionNode[1], mapping:meta::pure::mapping::Mapping[1], extensions:meta::pure::router::extension::RouterExtension[*]): ExecutionNode[1]
{
   ^meta::protocols::pure::v1_23_0::metamodel::external::format::json::executionPlan::JsonSerializeExecutionNode(
      _type           = 'jsonSerialize',
      checked         = $node.checked,
      binding         = $node.binding->elementToPath(),
      resultType      = $node.resultType->meta::protocols::pure::v1_23_0::transformation::fromPureGraph::executionPlan::transformResultType($mapping, $extensions),
      resultSizeRange = $node.resultSizeRange->map(s| $s->meta::protocols::pure::v1_23_0::transformation::fromPureGraph::domain::transformMultiplicity())
   );
}

function meta::protocols::pure::v1_23_0::transformation::fromPureGraph::external::format::json::transformDeserializeNode(node:meta::external::format::json::executionPlan::JsonDeserializeExecutionNode[1], mapping:meta::pure::mapping::Mapping[1], extensions:meta::pure::router::extension::RouterExtension[*]): ExecutionNode[1]
{
   ^meta::protocols::pure::v1_23_0::metamodel::external::format::json::executionPlan::JsonDeserializeExecutionNode(
      _type           = 'jsonDeserialize',
      resultType      = $node.resultType->meta::protocols::pure::v1_23_0::transformation::fromPureGraph::executionPlan::transformResultType($mapping, $extensions),
      resultSizeRange = $node.resultSizeRange->map(s| $s->meta::protocols::pure::v1_23_0::transformation::fromPureGraph::domain::transformMultiplicity()),
      binding         = $node.binding->elementToPath(),
      tree            = $node.tree->map(t| $t->meta::protocols::pure::v1_23_0::transformation::fromPureGraph::valueSpecification::transformGraphFetchTree([], ^Map<String,List<Any>>(), $extensions))->cast(@meta::protocols::pure::v1_23_0::metamodel::valueSpecification::raw::RootGraphFetchTree)
   );
}

function meta::protocols::pure::v1_23_0::transformation::fromPureGraph::external::format::json::transformPathReference(pathRef:meta::external::format::json::executionPlan::JsonPathReference[1]): JsonPathReference[1]
{
   ^JsonPathReference(
      _type = 'json',
      path  = $pathRef.path
   );
}