// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::format::functions::*;
import meta::pure::graphFetch::*;

function <<functionType.NormalizeRequiredFunction>> meta::external::format::json::functions::fromJson<T>(class:Class<T>[1], data:String[1]): T[*]
{
  internalize($class, 'application/json', $data)
}

function <<functionType.NormalizeRequiredFunction>> meta::external::format::json::functions::fromJson<T>(class:Class<T>[1], data:Byte[*]): T[*]
{
  internalize($class, 'application/json', $data)
}

function <<functionType.NormalizeRequiredFunction>> meta::external::format::json::functions::toJson<T>(collection: T[*], graphFetchTree: RootGraphFetchTree<T>[1]): String[1]
{
  externalize($collection, 'application/json', $graphFetchTree)
}