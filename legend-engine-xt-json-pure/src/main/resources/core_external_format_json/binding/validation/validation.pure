// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::json::binding::validation::*;
import meta::external::format::json::metamodel::*;
import meta::external::format::json::transformation::fromPure::*;
import meta::external::format::json::transformation::toPure::*;

import meta::external::shared::format::binding::*;
import meta::external::shared::format::binding::validation::*;
import meta::external::shared::format::utils::*;

import meta::pure::metamodel::serialization::grammar::*;
import meta::pure::model::unit::*;

// To be removed
import meta::json::schema::fromSchema::*;
// To be removed

Class meta::external::format::json::binding::validation::JsonSchemaBindingDetail extends SuccessfulBindingDetail
{
   
}

function meta::external::format::json::binding::validation::bindDetails(binding: Binding[1]): BindingDetail[1]
{
   assert($binding.schemaSet->isEmpty() || $binding.schemaSet.format == 'JSON');
   
   let updatedBinding       = updateBinding($binding);
   
   let classesFromModelUnit = $updatedBinding.modelUnit->resolve().classes;
   let targetPackage        = $updatedBinding->findTargetPackage($classesFromModelUnit);
   if($targetPackage->isEmpty(),
      | ^FailedBindingDetail(errorMessages = 'Could not match json schema to any classes in the modelUnit: ' + $classesFromModelUnit.name->joinStrings('(', ',', ')')),
      | let jsonSchemaToPureConfig = ^JsonSchemaToModelConfiguration(
                                        format = 'JSON',
                                        sourceSchemaId = $updatedBinding.schemaId,
                                        targetPackage = $targetPackage->toOne()
                                     );
   
        let classesFromSchemaSet  = jsonSchemaToPure($updatedBinding.schemaSet->toOne(), $jsonSchemaToPureConfig)->filter(pe| $pe->instanceOf(Class))->cast(@Class<Any>);
        let failedBindingDetails  = $classesFromSchemaSet->map(cl | $cl->matchClass($classesFromModelUnit));
      
        if($failedBindingDetails->isEmpty(),
           |^JsonSchemaBindingDetail(fetchMappedPropertiesForClass = {class:Class<Any>[1] | let classInScope = $classesFromModelUnit->filter(cl | $cl == $class)->first();
                                                                                            if($classInScope->isEmpty(),
                                                                                               |[],
                                                                                               |let mappedPropertiesName = $classesFromSchemaSet->filter(cl | $cl->elementToPath() == $class->elementToPath()).properties.name;
                                                                                                $classInScope.properties->filter(p | $p.name->in($mappedPropertiesName)););}),
           |^FailedBindingDetail(errorMessages = $failedBindingDetails.errorMessages));
   );
}

function <<access.private>> meta::external::format::json::binding::validation::matchClass(classToBeMatched:Class<Any>[1], availableClasses:Class<Any>[*]): FailedBindingDetail[0..1]
{
   let classMatchedByName = $availableClasses->filter(cl | $cl->elementToPath() == $classToBeMatched->elementToPath());
   if($classMatchedByName->isEmpty(),
      |^FailedBindingDetail(errorMessages = 'Could not match json schema : ' + $classToBeMatched->elementToPath()->meta::pure::generation::pathToFileName('json') + ' to any classes in the modelUnit: ' + $availableClasses.name->joinStrings('(', ',', ')')),
      |let propertiesToBeMatched = $classToBeMatched.properties;
       let failedBindingDetails  = $propertiesToBeMatched->map(p | $p->matchProperty($classMatchedByName.properties));
       let errorMessage          = 'Faced issues matching json schema : ' + $classToBeMatched->elementToPath()->meta::pure::generation::pathToFileName('json') + '.' + $failedBindingDetails.errorMessages->joinStrings('[', ',', ']');
       if($failedBindingDetails->isEmpty(), |[], |^FailedBindingDetail(errorMessages = $errorMessage));
   );
}

function <<access.private>> meta::external::format::json::binding::validation::matchProperty(propertyToBeMatched:AbstractProperty<Any>[1], availableProperties:AbstractProperty<Any>[*]): FailedBindingDetail[0..1]
{
   let propertyMatchedByName = $availableProperties->filter(p | $p.name == $propertyToBeMatched.name);
   if($propertyMatchedByName->isEmpty(),
      |^FailedBindingDetail(errorMessages = 'Could not match json schema property : ' + $propertyToBeMatched.name->toOne() + '.'),
      |let requiredReturnType = $propertyToBeMatched->functionReturnType().rawType->toOne();
       let actualReturnType   = $propertyMatchedByName->toOne()->functionReturnType().rawType->toOne();
      
       let requiredMultiplicity = $propertyToBeMatched->functionReturnMultiplicity();
       let actualMultiplicity = $propertyMatchedByName->toOne()->functionReturnMultiplicity();
      
       if( !subsumesType($actualReturnType, $requiredReturnType), 
          |^FailedBindingDetail(errorMessages = 'Incompatible return type for json schema property. Expected : ' + $requiredReturnType->elementToPath() + ', Found : ' + $actualReturnType->elementToPath() + '.'),
          |
       if( !multiplicitySubsumes($actualMultiplicity, $requiredMultiplicity), 
          |^FailedBindingDetail(errorMessages = 'Incompatible multiplicity for json schema property. Expected : ' + $requiredMultiplicity->printMultiplicity() + ', Found : ' + $actualMultiplicity->printMultiplicity() + '.'),
          |[];));
   );
}


function <<access.private>> meta::external::format::json::binding::validation::subsumesType(subsuming:Type[1], subsumed:Type[1]) :Boolean[1]
{
   $subsuming->getAllTypeGeneralisations()->cast(@PackageableElement)->map(x | $x->elementToPath())->contains($subsumed->cast(@PackageableElement)->elementToPath())
   || ($subsuming == Decimal && $subsumed == Float) //Json Schema does not differntiate between decimal & float
   || ($subsumed == Decimal && $subsuming == Float) //Json Schema does not differntiate between decimal & float
}

function <<access.private>> meta::external::format::json::binding::validation::updateBinding(binding:Binding[1]): Binding[1]
{
   if($binding.schemaSet->isNotEmpty(),
      | $binding,
      | let sourceModels = $binding.modelUnit->resolve().classes;
        let modelToJsonSchemaConfig = ^ModelToJsonSchemaConfiguration(format = 'JSON', targetSchemaSet = $binding->elementToPath() + '_GenSchemaSet');
        createBinding(pureToJsonSchema(newModelUnit()->include($sourceModels), $modelToJsonSchemaConfig), $sourceModels, $binding->elementToPath() + '_Gen');
   );
}

function <<access.private>> meta::external::format::json::binding::validation::createBinding(schemaSet:meta::external::shared::format::metamodel::SchemaSet[1], sourceModels:PackageableElement[*], targetBinding: String[1]): Binding[1]
{
   let opSepPos  = $targetBinding->lastIndexOf('::');
   let opPkgName = $targetBinding->substring(0, $opSepPos);
   
   ^Binding(
      package     = pathToPackage($opPkgName, true),
      name        = $targetBinding->substring($opSepPos+2),
      schemaSet   = $schemaSet, 
      contentType = 'application/json',
      modelUnit   = newModelUnit()->include($sourceModels)
   );
}

function <<access.private>> meta::external::format::json::binding::validation::findTargetPackage(binding:Binding[1], packageableElements:PackageableElement[*]): String[0..1]
{
   let rootJsonSchema = if($binding.schemaId->isEmpty(),
                           |$binding.schemaSet.schemas->at(0),
                           |$binding.schemaSet.schemas->filter(s | $s.id == $binding.schemaId)->toOne());
   
   let schemaLocation = $rootJsonSchema.location->toOne();
   
   let pureTypeName   = $schemaLocation->typeFullPath([]);
   
   let packageableElementName = $packageableElements->map(ele | $ele->elementToPath());

   $packageableElementName->filter(path | $path->endsWith($pureTypeName))
                          ->map(path | if(($path->length() - $pureTypeName->length()) == 0, |'', | $path->substring(0, $path->length() - $pureTypeName->length() -2)))
                          ->sortBy(path | $path->length())
                          ->first();
}