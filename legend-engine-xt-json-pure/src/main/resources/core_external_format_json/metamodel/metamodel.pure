// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::json::metamodel::*;
import meta::json::*;

Class meta::external::format::json::metamodel::JSONSchemaInteger extends meta::external::format::json::metamodel::JSONSchemaNumber
{
}

Class meta::external::format::json::metamodel::JSONSchemaArray extends meta::external::format::json::metamodel::JSONSchema
{
  // An array instance is valid against "minItems" if its size is greater than, or equal to, the value of this keyword.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.4.4
  minItems: Integer[0..1];

  // An array instance is valid against "maxItems" if its size is less than, or equal to, the value of this keyword.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.4.3
  maxItems: Integer[0..1];
  
  // If this keyword has boolean value false, the instance validates successfully. If it has boolean value true, the instance validates successfully if all of its elements are unique.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.4.5
  uniqueItems: Boolean[0..1];
  
  // validation succeeds if all elements in the array successfully validate against the schema under itemSchemas.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.4.1
  itemSchemas: Any[*];
  
  // An array instance is valid against "contains" if at least one of its elements is valid against the given schema.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.4.6
  containedItemSchema: meta::external::format::json::metamodel::JSONSchema[0..1];
}

Class meta::external::format::json::metamodel::JSONSchemaBoolean extends meta::external::format::json::metamodel::JSONSchema
{
}

Class meta::external::format::json::metamodel::JSONSchemaNull extends meta::external::format::json::metamodel::JSONSchema
{
}

Class meta::external::format::json::metamodel::JSONSchemaFragment extends meta::external::format::json::metamodel::JSONSchema
{
}

Class meta::external::format::json::metamodel::JSONSchemaMultiType extends meta::external::format::json::metamodel::JSONSchema
{
}

Class meta::external::format::json::metamodel::JSONSchemaDiscriminator
{
  // The name of the property in the payload that will hold the discriminator value.
  // https://spec.openapis.org/oas/v3.0.3#fixed-fields-20
  propertyName: String[0..1];

  // An object to hold mappings between payload values and schema names or references.
  // https://spec.openapis.org/oas/v3.0.3#fixed-fields-20
  mapping: Map<String, String>[0..1];
}

Class meta::external::format::json::metamodel::JSONSchemaString extends meta::external::format::json::metamodel::JSONSchema
{
  // A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.3.2
  minLength: Integer[0..1];

  // A string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.3.1
  maxLength: Integer[0..1];

  // The value of this keyword MUST be a string. This string SHOULD be a valid regular expression, according to the ECMA 262 regular expression dialect.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.3.3
  pattern: String[0..1];

  // format of the String instance.
  format: String[0..1];
}

Class meta::external::format::json::metamodel::JSONSchemaNumber extends meta::external::format::json::metamodel::JSONSchema
{
  // The value of "minimum" MUST be a number, representing an inclusive lower limit for a numeric instance.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.2.4
  minimum: Number[0..1];

  // If the instance is a number, then this keyword validates only if the instance is less than or exactly equal to "maximum".
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.2.2
  maximum: Number[0..1];

  // A numeric instance is valid only if division by this keyword's value results in an integer.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.2.1
  multipleOf: Number[0..1];
  
  // If the instance is a number, then the instance is valid only if it has a value strictly greater than (not equal to) "exclusiveMinimum".
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.2.5
  exclusiveMinimum: Number[0..1];

  // If the instance is a number, then the instance is valid only if it has a value strictly less than (not equal to) "exclusiveMaximum".
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.2.3
  exclusiveMaximum: Number[0..1];

  // format of the Number instance.
  format: String[0..1];
}

Class meta::external::format::json::metamodel::JSONSchema extends meta::external::shared::format::metamodel::SchemaDetail
{
  <<doc.deprecated>> content : String[1]; //TODO: migrate over to JsonSchema metamodel

  // An instance validates successfully against this keyword if it validates successfully against all schemas defined by this keyword's value. 
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.7.1
  allOf: meta::external::format::json::metamodel::JSONSchema[*];

  // An instance validates successfully against this keyword if it validates successfully against exactly one schema defined by this keyword's value.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.7.3
  oneOf: meta::external::format::json::metamodel::JSONSchema[*];

  // An instance validates successfully against this keyword if it validates successfully against at least one schema defined by this keyword's value.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.7.2
  anyOf: meta::external::format::json::metamodel::JSONSchema[*];

  // An instance is valid against this keyword if it fails to validate successfully against the schema defined by this keyword.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.7.4
  mustNotMatch: meta::external::format::json::metamodel::JSONSchema[0..1];

  // Annotation for the model
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.10.1
  title: String[0..1];
  description: String[0..1];

  // Unique identifier for the metamodel instance
  id: String[0..1];

  // URL to the specification to which the instance will abide by
  schema: String[0..1];

  // This keyword can be used to supply a default JSON value associated with a particular schema. It is RECOMMENDED that a default value be valid against the associated schema.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.10.2
  defaultValue: JSONElement[0..1];

  // An instance validates successfully against this keyword if its value is equal to the value of the keyword.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.1.3
  constantValue: JSONElement[0..1];

  // If "readOnly" has a value of boolean true, it indicates that the value of the instance is managed exclusively by the owning authority, and attempts by an application to modify the value of this property are expected to be ignored or rejected by that owning authority.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.10.3
  readOnly: Boolean[0..1];

  // If "writeOnly" has a value of boolean true, it indicates that the value is never present when the instance is retrieved from the owning authority
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.10.3
  writeOnly: Boolean[0..1];

  // A true value adds "null" to the allowed type specified by the type keyword. Defaults to false
  // https://spec.openapis.org/oas/v3.0.3#fixed-fields-19
  nullable: Boolean[0..1];

  // The "definitions" keywords provides a standardized location for schema authors to inline re-usable JSON Schemas into a more general schema
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.9
  definitions: Map<String, JSONSchema>[0..1];

  // Instances that successfully validate against this keyword's subschema MUST also be valid against the subschema value of the "then" keyword, if present.
  // Instances that fail to validate against this keyword's subschema MUST also be valid against the subschema value of the "else" keyword, if present.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.6.1
  ifCondition: meta::external::format::json::metamodel::JSONSchema[0..1];

  // When "if" is present, and the instance fails to validate against its subschema, then valiation succeeds against this keyword if the instance successfully validates against this keyword's subschema.
  // This keyword has no effect when "if" is absent, or when the instance successfully validates against its subschema. Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.6.3
  elseCondition: meta::external::format::json::metamodel::JSONSchema[0..1];

  // When "if" is present, and the instance successfully validates against its subschema, then valiation succeeds against this keyword if the instance also successfully validates against this keyword's subschema.
  // This keyword has no effect when "if" is absent, or when the instance fails to validate against its subschema. Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.6.2
  thenCondition: meta::external::format::json::metamodel::JSONSchema[0..1];

  // JSON Pointer reference
  refValue: String[0..1];

  // An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.1.2
  possibleValues: JSONArray[0..1];

  // This keyword can be used to provide sample JSON values associated with a particular schema, for the purpose of illustrating usage. It is RECOMMENDED that these values be valid against the associated schema.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.10.4
  example: JSONElement[0..1];

  // Any field that cannot be assigned to the other properties of the metamodel can be populated here. A PURE Profile will be generated for these fields
  customProperties: JSONObject[0..1];

  // The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it.
  // https://spec.openapis.org/oas/v3.0.3#discriminator-object
  discriminator: meta::external::format::json::metamodel::JSONSchemaDiscriminator[0..1];

  // The value of this property must be a media type, as defined by RFC 2046 [RFC2046]. This property defines the media type of instances which this schema defines.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.8.4
  contentMediaType: String[0..1];

  // If the instance value is a string, this property defines that the string SHOULD be interpreted as binary data and decoded using the encoding named by this property. RFC 2045, Sec 6.1 [RFC2045] lists the possible values for this property.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.8.3
  contentEncoding: String[0..1];
}

Class meta::external::format::json::metamodel::JSONSchemaObject extends meta::external::format::json::metamodel::JSONSchema
{
  // An object instance is valid against "minProperties" if its number of properties is greater than, or equal to, the value of this keyword.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.5.2
  minProperties: Integer[0..1];

  // An object instance is valid against "maxProperties" if its number of properties is less than, or equal to, the value of this keyword.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.5.1
  maxProperties: Integer[0..1];

  // If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema. Note the property name that the schema is testing will always be a string.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.5.8
  propertyNames: JSONSchemaString[0..1];

  // This keyword determines how child instances validate for objects, and does not directly validate the immediate instance itself.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.5.4
  properties: Map<String, JSONSchema>[0..1];

  // An object instance is valid against this keyword if every item in the array is the name of a property in the instance.
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.5.3
  requiredProperties: String[*];

  // Validation with "additionalProperties" applies only to the child values of instance names that do not match any names in "properties", and do not match any regular expression in "patternProperties".
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.5.6
  additionalProperties: Any[0..1];

  // This keyword determines how child instances validate for objects, and does not directly validate the immediate instance itself. Validation of the primitive instance type against this keyword always succeeds. 
  // https://json-schema.org/draft-07/json-schema-validation.html#rfc.section.6.5.5
  patternProperties: Any[0..1];
}