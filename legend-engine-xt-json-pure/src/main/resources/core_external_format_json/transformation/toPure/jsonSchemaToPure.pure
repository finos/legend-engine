// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::json::metamodel::*;
import meta::external::format::json::transformation::toPure::*;

import meta::external::shared::*;
import meta::external::shared::generation::*;
import meta::external::shared::format::*;
import meta::external::shared::format::transformation::*;
import meta::external::shared::format::transformation::toString::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::format::utils::*;

import meta::pure::functions::collection::*;
import meta::pure::functions::meta::*;
import meta::pure::functions::tests::collection::*;

import meta::pure::graphFetch::*;

import meta::pure::metamodel::serialization::grammar::*;

import meta::pure::model::unit::*;

import meta::pure::generation::metamodel::*;

// To be removed
import meta::json::*;
import meta::json::schema::fromSchema::*;
// To be removed

// ========================================================================================================================================================
// Descriptor
// ========================================================================================================================================================

function meta::external::format::json::transformation::toPure::jsonSchemaToPureDescriptor(): ExternalFormatToPureDescriptor<JsonSchemaToModelConfiguration>[1]
{
  ^ExternalFormatToPureDescriptor<JsonSchemaToModelConfiguration>
  (
    configuration        = JsonSchemaToModelConfiguration,
    generator            = jsonSchemaToPure_SchemaSet_1__JsonSchemaToModelConfiguration_1__PackageableElement_MANY_,
    generatorWithDebug   = jsonSchemaToPureWithDebug_SchemaSet_1__JsonSchemaToModelConfiguration_1__PackageableElement_MANY_,
    defaultConfig        = meta::external::format::json::transformation::toPure::defaultConfig()
  )
}

// ========================================================================================================================================================
// Configuration
// ========================================================================================================================================================

Class meta::external::format::json::transformation::toPure::JsonSchemaToModelConfiguration extends meta::external::shared::format::transformation::toPure::SchemaToModelConfiguration
{
}

function <<access.private>> meta::external::format::json::transformation::toPure::defaultConfig(): JsonSchemaToModelConfiguration[1]
{
  ^JsonSchemaToModelConfiguration(format = 'JSON', targetPackage='target::package');
}

// ========================================================================================================================================================
// GenerationContext
// ========================================================================================================================================================

Class <<access.private>> meta::external::format::json::transformation::toPure::GenerationContext
{
   config    : JsonSchemaToModelConfiguration[1];
   schemaSet : SchemaSet[1];

   package()
   {
      if($this.config.targetPackage->endsWith('::'), 
         |$this.config.targetPackage->substring(0, $this.config.targetPackage->length() - 2),
         |$this.config.targetPackage)
   }: String[1];
}

function <<access.private>> meta::external::format::json::transformation::toPure::createGenerationContext(schemaSet:SchemaSet[1], config:JsonSchemaToModelConfiguration[1]): GenerationContext[1]
{
   let context = ^GenerationContext(
      config    = $config, 
      schemaSet = $schemaSet
   );
}

// ========================================================================================================================================================
// generation
// ========================================================================================================================================================

function meta::external::format::json::transformation::toPure::jsonSchemaToPure(schemaSet:SchemaSet[1], config:JsonSchemaToModelConfiguration[1]): PackageableElement[*]
{
   jsonSchemaToPure($schemaSet, $config, noDebug());
}

function <<access.private>> meta::external::format::json::transformation::toPure::jsonSchemaToPureWithDebug(schemaSet:SchemaSet[1], config:JsonSchemaToModelConfiguration[1]): PackageableElement[*]
{
   jsonSchemaToPure($schemaSet, $config, debug());
}

function <<access.private>> meta::external::format::json::transformation::toPure::jsonSchemaToPure(schemaSet:SchemaSet[1], config:JsonSchemaToModelConfiguration[1], debug:DebugContext[1]): PackageableElement[*]
{
   let context           = createGenerationContext($schemaSet, $config);
   let generatedElements = generate($context, $debug);

   $debug->log(|'\nGenerated the following:\n\n'+$generatedElements->printPackageableElements());
   $generatedElements;
}

function <<access.private>> meta::external::format::json::transformation::toPure::generate(context:GenerationContext[1], debug:DebugContext[1]): PackageableElement[*]
{
   let schemas      = $context.schemaSet.schemas;
   let schemaInputs = $schemas->map(s | $s->schemaToSchemaInput($context));
   
   JSONSchemaToPure($schemaInputs);
}

// ========================================================================================================================================================
// helper functions
// ========================================================================================================================================================

function <<access.private>> meta::external::format::json::transformation::toPure::schemaToSchemaInput(schema:Schema[1], context:GenerationContext[1]): SchemaInput[1]
{
   ^SchemaInput(
      fileName   = $schema.location->toOne(),
      schema     = $schema.detail->toOne()->cast(@JsonSchema).content,
      pathPrefix = $context.package
   )
}
