// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::transform::*;

import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::naming::*;

import meta::pure::metamodel::path::*;

import meta::java::generation::expression::*;
import meta::java::generation::convention::*;
import meta::java::generation::code::*;

import meta::java::metamodel::factory::*;
import meta::java::metamodel::project::*;

import meta::external::store::service::executionPlan::nodes::*;

function meta::external::store::service::executionPlan::platformBinding::legendJava::generateImplementationForServiceParametersResolutionNode(node:ServiceParametersResolutionExecutionNode[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]):GeneratedCode[1]
{  
   print(if($debug.debug,|$debug.space+'('+$path+') generateCodeForServiceParametersResolutionExecutionNode\n', |''));
   
   let conventions    = $context.conventions;
   let inputMap       = j_parameter(javaMap(javaString(), javaObject()), 'inputMap');
   
   let executeClassWithImports = $conventions->planNodeClass('public', $path, 'Execute')
      ->usingKnownPackages($conventions->knownPackages())
      ->imports($conventions->standardImports())
      ->imports($conventions->className(IServiceParametersResolutionExecutionNodeSpecifics))
      ->implements($conventions->className(IServiceParametersResolutionExecutionNodeSpecifics));
   
   let serviceParamValueMap    = j_variable(javaMap(javaString(), javaObject()), 'serviceParamValueMap'); 
   
   let varCodecs               = $node.requestParametersBuildInfo.parameterBuildInfoList.transform.expressionSequence->evaluateAndDeactivate()
                                                        ->map(fe | $fe->findVariableExpressionsInValueSpecification())
                                                        ->removeDuplicatesBy({var | $var.name})
                                                        ->map(var | assert($node.requiredVariableInputs.name->contains($var.name), | '\'' + $var.name + '\' is needed as source for ServiceParametersResolutionExecutionNode(' + $path + ') but not listed as source for this node.');
                                                                    j_variable(javaObject(), $var.name)->j_declare($inputMap->j_invoke('get', [j_string($var.name)], javaObject())););

   let propertiesMappingCodecs = $node.requestParametersBuildInfo.parameterBuildInfoList
                                                        ->map(pm | let paramName       = $pm.serviceParameter.name;
                                                                   let paramTakesList  = $pm.serviceParameter.type.list;
                                                                   let propTransformer = $pm.transform.expressionSequence->evaluateAndDeactivate()->toOne();
                                                              
                                                                   let varsRequired    = $propTransformer->findVariableExpressionsInValueSpecification().name->removeDuplicates();
                                                                   let paramGenerator  = if($paramTakesList && $varsRequired->isNotEmpty(),
                                                                                            |if($varsRequired->size() == 1,
                                                                                                |let lambdaParam = j_parameter(javaObject(), 'x');
                                                                                                 let valueVar    = j_variable(javaObject(), $varsRequired->toOne());
                                                                                                 j_conditional($valueVar->j_instanceof(javaList()), $valueVar, javaCollections()->j_invoke('singletonList', $valueVar, javaObject()))
                                                                                                      ->j_cast(javaList(javaObject()))
                                                                                                      ->j_streamOf()
                                                                                                      ->js_map(j_lambda($lambdaParam, $propTransformer->reprocessVariableExpressionsName(pair($varsRequired->toOne(), 'x')->newMap())->generateJava($conventions, $debug)))
                                                                                                      ->js_resolve(javaList(javaObject()));,
                                                                                                |let javaIntStream  = javaClass('java.util.stream.IntStream');
                                                                                                 let idx            = j_parameter(javaInt(), 'idx');
                                                                                                
                                                                                                 let sizeCodec      = j_variable(javaObject(), $varsRequired->at(0))->j_cast(javaList(javaObject()))->j_invoke('size', [], javaInt());                                                                                            
                                                                                                 let codecsAndMap   = $varsRequired->map(var | let indexVarName = 'x' + $varsRequired->indexOf($var)->toString();
                                                                                                                                               let codec        = j_variable(javaObject(), $indexVarName)->j_declare(j_variable(javaObject(), $var)->j_cast(javaList(javaObject()))->j_invoke('get', $idx, javaObject()));
                                                                                                                                               pair($codec, pair($var, $indexVarName)););
                                                                                                 let varReplaceMap  = $codecsAndMap.second->newMap();
                                                                                                 let lambdaCodec    = $codecsAndMap.first->concatenate($propTransformer->reprocessVariableExpressionsName($varReplaceMap)->generateJava($conventions, $debug)->j_return())->j_block();
                                                                                                 $javaIntStream
                                                                                                    ->j_invoke('range', [j_int(0), $sizeCodec], $javaIntStream)
                                                                                                    ->j_invoke('mapToObj', j_lambda($idx, $lambdaCodec), javaStream(javaObject()))
                                                                                                    ->js_resolve(javaList(javaObject()));),
                                                                                            |$propTransformer->generateJava($conventions, $debug));
                                                                   $serviceParamValueMap->j_invoke('put', [j_string($paramName), $paramGenerator], javaObject()););
   
   let resolveServiceParamsMethodBody = $serviceParamValueMap->j_declare(j_new(javaParameterizedType(javaClass('java.util.HashMap'), [javaString(), javaObject()]), []))
                                                      ->concatenate($varCodecs)
                                                      ->concatenate($propertiesMappingCodecs)
                                                      ->concatenate($serviceParamValueMap->j_return());

   let resolveServiceParamsMethod     = javaMethod(['public'], javaMap(javaString(), javaObject()), 'resolveServiceParameters', [$inputMap], $resolveServiceParamsMethodBody); 
   
   let executeClass   = $executeClassWithImports->addMethod($resolveServiceParamsMethod);
   let project        = newProject()->addClasses($executeClass)->concatenate($propertiesMappingCodecs->dependencies()->resolveAndGetProjects())->toOneMany()->mergeProjects();

   generatedCode($project, $executeClass);
}