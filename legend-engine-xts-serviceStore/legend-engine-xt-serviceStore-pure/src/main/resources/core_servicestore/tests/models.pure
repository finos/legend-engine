// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::external::store::service::tests::domain::*;

Enum meta::external::store::service::tests::domain::SynonymType
{
  CUSIP,
  ISIN
}

Enum meta::external::store::service::tests::domain::SerializationFormat
{
  CSV,
  PURE
}
  
Class meta::external::store::service::tests::domain::Product
{
  productId: String[1];
  productName: String[1];
  description: String[1];
}
  
Class meta::external::store::service::tests::domain::Synonym
{
  name: String[1];
  type: meta::external::store::service::tests::domain::SynonymType[1];
}
  
Class meta::external::store::service::tests::domain::Trade
{
  tradeId: String[1];
  traderKerb: String[0..1];
  quantity: Integer[1];
  productName() {$this.product.productName}: String[0..1];
  justProduct() {$this.product}: meta::external::store::service::tests::domain::Product[0..1];
}
  
Class meta::external::store::service::tests::domain::Trader
{
  kerberos: String[1];
  firstName: String[1];
  lastName: String[1];
}
  
Association meta::external::store::service::tests::domain::Product_Synonym
{
  product: meta::external::store::service::tests::domain::Product[1];
  synonyms: meta::external::store::service::tests::domain::Synonym[*];
}
  
Association meta::external::store::service::tests::domain::Trade_Product
{
  product: meta::external::store::service::tests::domain::Product[1];
  trades: meta::external::store::service::tests::domain::Trade[*];
}
  
Association meta::external::store::service::tests::domain::Trade_Trader
{
  trader: meta::external::store::service::tests::domain::Trader[1];
  trades: meta::external::store::service::tests::domain::Trade[*];
}

Class meta::external::store::service::tests::domain::S_Product
{
  s_productId: String[1];
  s_tradeId    : String[1];
  s_productName: String[1];
  s_description: String[1];
  s_synonyms: S_Synonym[*];
}
  
Class meta::external::store::service::tests::domain::S_Synonym
{
  s_name: String[1];
  s_type: String[1];
}
  
Class meta::external::store::service::tests::domain::S_Trade
{
  s_tradeId: String[1];
  s_traderDetails: String[1];
  s_tradeDetails: String[1];
}

Class meta::external::store::service::tests::domain::S_RequestBody
{
  propA: String[1];
  propB: String[1];
}

Association meta::external::store::service::tests::domain::S_Trade_S_Product
{
  s_product: meta::external::store::service::tests::domain::S_Product[1];
  s_trades: meta::external::store::service::tests::domain::S_Trade[*];
}