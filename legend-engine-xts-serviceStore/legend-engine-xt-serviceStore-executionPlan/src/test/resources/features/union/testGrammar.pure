// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Enum meta::external::store::service::showcase::domain::SynonymType
{
  CUSIP,
  ISIN
}

Class meta::external::store::service::showcase::domain::Product
{
  productId   : String[1];
  productName : String[1];
  description : String[1];
}

Class meta::external::store::service::showcase::domain::Synonym
{
  name : String[1];
  type : meta::external::store::service::showcase::domain::SynonymType[1];
}

Class meta::external::store::service::showcase::domain::Trade
{
  tradeId    : String[1];
  traderKerb : String[0..1];
  quantity   : Integer[1];
  productName() {$this.product.productName}: String[0..1];
  justProduct() {$this.product}: meta::external::store::service::showcase::domain::Product[0..1];
}

Class meta::external::store::service::showcase::domain::Trader
{
  kerberos  : String[1];
  firstName : String[1];
  lastName  : String[1];
}

Association meta::external::store::service::showcase::domain::Product_Synonym
{
  product  : meta::external::store::service::showcase::domain::Product[1];
  synonyms : meta::external::store::service::showcase::domain::Synonym[*];
}

Association meta::external::store::service::showcase::domain::Trade_Product
{
  product : meta::external::store::service::showcase::domain::Product[1];
  trades  : meta::external::store::service::showcase::domain::Trade[*];
}

Association meta::external::store::service::showcase::domain::Trade_Trader
{
  trader : meta::external::store::service::showcase::domain::Trader[1];
  trades : meta::external::store::service::showcase::domain::Trade[*];
}

Class meta::external::store::service::showcase::domain::S_Product
{
  s_productId   : String[1];
  s_productName : String[1];
  s_description : String[1];
  s_synonyms    : meta::external::store::service::showcase::domain::S_Synonym[*];
}

Class meta::external::store::service::showcase::domain::S_Synonym
{
  s_name : String[1];
  s_type : String[1];
}

Class meta::external::store::service::showcase::domain::S_Trade
{
  s_tradeId       : String[1];
  s_traderDetails : String[1];
  s_tradeDetails  : String[1];
}

Association meta::external::store::service::showcase::domain::S_Trade_S_Product
{
  s_product : meta::external::store::service::showcase::domain::S_Product[0..1];
  s_trades  : meta::external::store::service::showcase::domain::S_Trade[*];
}

Class meta::external::store::service::showcase::domain::Person
{
  firstName : String[1];
  lastName  : String[1];
  firmId    : String[1];
}

###Mapping
Mapping meta::external::store::service::showcase::mapping::ServiceStoreMapping
(
    *meta::external::store::service::showcase::domain::S_Trade[s_trade_set]: Operation
    {
        meta::pure::router::operations::special_union_OperationSetImplementation_1__SetImplementation_MANY_(s_trade_set1, s_trade_set2)
    }

    meta::external::store::service::showcase::domain::S_Trade[s_trade_set1]: ServiceStore
    {
        ~service [meta::external::store::service::showcase::store::TradeProductServiceStore] TradeServices.AllTradeService1
    }

    meta::external::store::service::showcase::domain::S_Trade[s_trade_set2]: ServiceStore
    {
        ~service [meta::external::store::service::showcase::store::TradeProductServiceStore] TradeServices.AllTradeService2
    }

    *meta::external::store::service::showcase::domain::S_Product[s_product_set]: Operation
    {
        meta::pure::router::operations::special_union_OperationSetImplementation_1__SetImplementation_MANY_(s_product_set1, s_product_set2)
    }

    meta::external::store::service::showcase::domain::S_Product[s_product_set1]: ServiceStore
    {
        ~service [meta::external::store::service::showcase::store::TradeProductServiceStore] ProductServices.AllProductsService1

        ~service [meta::external::store::service::showcase::store::TradeProductServiceStore] ProductServices.ProductByIdService1
        (
             ~request
             (
                parameters
                (
                    id = $this.s_productId
                )
             )
        )
    }

    meta::external::store::service::showcase::domain::S_Product[s_product_set2]: ServiceStore
    {
        ~service [meta::external::store::service::showcase::store::TradeProductServiceStore] ProductServices.AllProductsService2

        ~service [meta::external::store::service::showcase::store::TradeProductServiceStore] ProductServices.ProductByIdService2
        (
             ~request
             (
                parameters
                (
                    id = $this.s_productId
                )
             )
        )
    }

    *meta::external::store::service::showcase::domain::Person[person_set]: Operation
    {
        meta::pure::router::operations::special_union_OperationSetImplementation_1__SetImplementation_MANY_(person_set1, person_set2)
    }

    meta::external::store::service::showcase::domain::Person[person_set1]: ServiceStore
    {
        ~service [meta::external::store::service::showcase::store::EmployeeServiceStore] EmployeeService
    }

    meta::external::store::service::showcase::domain::Person[person_set2]: Pure
    {
        ~src meta::external::store::service::showcase::domain::Person

        firstName : $src.firstName,
        lastName  : $src.lastName,
        firmId    : $src.firmId
    }
)

Mapping meta::external::store::service::showcase::mapping::ServiceStoreMapping2
(
    *meta::external::store::service::showcase::domain::Person[person_set]: Operation
    {
        meta::pure::router::operations::special_union_OperationSetImplementation_1__SetImplementation_MANY_(person_set1, person_set2, person_set3, person_set4, person_set5)
    }

    meta::external::store::service::showcase::domain::Person[person_set1]: ServiceStore
    {
        ~service [meta::external::store::service::showcase::store::EmployeeServiceStore1] EmployeeService
    }

    meta::external::store::service::showcase::domain::Person[person_set2]: ServiceStore
    {
        ~service [meta::external::store::service::showcase::store::EmployeeServiceStore2] EmployeeService
    }

    meta::external::store::service::showcase::domain::Person[person_set3]: ServiceStore
    {
        ~service [meta::external::store::service::showcase::store::EmployeeServiceStore3] EmployeeService
    }

    meta::external::store::service::showcase::domain::Person[person_set4]: ServiceStore
    {
        ~service [meta::external::store::service::showcase::store::EmployeeServiceStore4] EmployeeService
    }

    meta::external::store::service::showcase::domain::Person[person_set5]: ServiceStore
    {
        ~service [meta::external::store::service::showcase::store::EmployeeServiceStore5] EmployeeService
    }
)


###ServiceStore
ServiceStore meta::external::store::service::showcase::store::TradeProductServiceStore
(
   description : 'Service Store Union Example';

   ServiceGroup TradeServices
   (
      path : '/trades';

      Service AllTradeService1
      (
         path : '/allTradesService1';
         method : GET;
         security : [];
         response : [meta::external::store::service::showcase::domain::S_Trade <- meta::external::store::service::showcase::store::tradeServiceStoreSchemaBinding];
      )

      Service AllTradeService2
      (
         path : '/allTradesService2';
         method : GET;
         security : [];
         response : [meta::external::store::service::showcase::domain::S_Trade <- meta::external::store::service::showcase::store::tradeServiceStoreSchemaBinding];
      )
   )

   ServiceGroup ProductServices
   (
      path : '/products';

      Service ProductByIdService1
      (
         path : '/getProductById1/{id}';
         method : GET;
         parameters :
         (
            id : String (location = path)
         );
         security : [];
         response : [meta::external::store::service::showcase::domain::S_Product <- meta::external::store::service::showcase::store::prodServiceStoreSchemaBinding];
      )

      Service AllProductsService1
      (
         path : '/getAllProducts1';
         method : GET;
         security : [];
         response : [meta::external::store::service::showcase::domain::S_Product <- meta::external::store::service::showcase::store::prodServiceStoreSchemaBinding];
      )

      Service AllProductsService2
      (
         path : '/getAllProducts2';
         method : GET;
         security : [];
         response : [meta::external::store::service::showcase::domain::S_Product <- meta::external::store::service::showcase::store::prodServiceStoreSchemaBinding];
      )

      Service ProductByIdService2
      (
         path : '/getProductById2/{id}';
         method : GET;
         parameters :
         (
            id : String (location = path)
         );
         security : [];
         response : [meta::external::store::service::showcase::domain::S_Product <- meta::external::store::service::showcase::store::prodServiceStoreSchemaBinding];
      )
   )
)

ServiceStore meta::external::store::service::showcase::store::EmployeeServiceStore
(
   description : 'Service Store Union Example';

   Service EmployeeService
   (
      path : '/employees';
      method : GET;
      security : [];
      response : [meta::external::store::service::showcase::domain::Person <- meta::external::store::service::showcase::store::employeesServiceStoreSchemaBinding];
   )
)

ServiceStore meta::external::store::service::showcase::store::EmployeeServiceStore1
(
   description : 'Service Store Union Example';

   Service EmployeeService
   (
      path : '/employees';
      method : GET;
      security : [];
      response : [meta::external::store::service::showcase::domain::Person <- meta::external::store::service::showcase::store::employeesServiceStoreSchemaBinding];
   )
)

ServiceStore meta::external::store::service::showcase::store::EmployeeServiceStore2
(
   description : 'Service Store Union Example';

   Service EmployeeService
   (
      path : '/employees';
      method : GET;
      security : [];
      response : [meta::external::store::service::showcase::domain::Person <- meta::external::store::service::showcase::store::employeesServiceStoreSchemaBinding];
   )
)

ServiceStore meta::external::store::service::showcase::store::EmployeeServiceStore3
(
   description : 'Service Store Union Example';

   Service EmployeeService
   (
      path : '/employees';
      method : GET;
      security : [];
      response : [meta::external::store::service::showcase::domain::Person <- meta::external::store::service::showcase::store::employeesServiceStoreSchemaBinding];
   )
)

ServiceStore meta::external::store::service::showcase::store::EmployeeServiceStore4
(
   description : 'Service Store Union Example';

   Service EmployeeService
   (
      path : '/employees';
      method : GET;
      security : [];
      response : [meta::external::store::service::showcase::domain::Person <- meta::external::store::service::showcase::store::employeesServiceStoreSchemaBinding];
   )
)

ServiceStore meta::external::store::service::showcase::store::EmployeeServiceStore5
(
   description : 'Service Store Union Example';

   Service EmployeeService
   (
      path : '/employees';
      method : GET;
      security : [];
      response : [meta::external::store::service::showcase::domain::Person <- meta::external::store::service::showcase::store::employeesServiceStoreSchemaBinding];
   )
)

###ExternalFormat
Binding meta::external::store::service::showcase::store::tradeServiceStoreSchemaBinding
{
  contentType   : 'application/json';
  modelIncludes : [ meta::external::store::service::showcase::domain::S_Trade ];
}

Binding meta::external::store::service::showcase::store::prodServiceStoreSchemaBinding
{
  contentType   : 'application/json';
  modelIncludes : [ meta::external::store::service::showcase::domain::S_Product, meta::external::store::service::showcase::domain::S_Synonym ];
}

Binding meta::external::store::service::showcase::store::employeesServiceStoreSchemaBinding
{
  contentType   : 'application/json';
  modelIncludes : [ meta::external::store::service::showcase::domain::Person ];
}

###Runtime
Runtime meta::external::store::service::showcase::runtime::ServiceStoreRuntime
{
    mappings :
    [
        meta::external::store::service::showcase::mapping::ServiceStoreMapping
    ];
    connections :
    [
        meta::external::store::service::showcase::store::TradeProductServiceStore :
        [
            connection_1 : meta::external::store::service::showcase::connection::serviceStoreConnection
        ],
        meta::external::store::service::showcase::store::EmployeeServiceStore :
        [
            connection_2 : meta::external::store::service::showcase::connection::serviceStoreConnection2
        ],
        ModelStore :
        [
            connection_3 : meta::external::store::service::showcase::connection::modelChainConnection,
            connection_4 : meta::external::store::service::showcase::connection::jsonModelConnection
        ]
    ];
}

Runtime meta::external::store::service::showcase::runtime::ServiceStoreRuntime2
{
    mappings :
    [
        meta::external::store::service::showcase::mapping::ServiceStoreMapping2
    ];
    connections :
    [
        meta::external::store::service::showcase::store::EmployeeServiceStore1 :
        [
            connection_1 : meta::external::store::service::showcase::connection::serviceStoreConnection3
        ],
        meta::external::store::service::showcase::store::EmployeeServiceStore2 :
        [
            connection_2 : meta::external::store::service::showcase::connection::serviceStoreConnection4
        ],
        meta::external::store::service::showcase::store::EmployeeServiceStore3 :
        [
            connection_3 : meta::external::store::service::showcase::connection::serviceStoreConnection5
        ],
        meta::external::store::service::showcase::store::EmployeeServiceStore4 :
        [
            connection_4 : meta::external::store::service::showcase::connection::serviceStoreConnection6
        ],
        meta::external::store::service::showcase::store::EmployeeServiceStore5 :
        [
            connection_5 : meta::external::store::service::showcase::connection::serviceStoreConnection7
        ]
    ];
}

###Connection
ModelChainConnection meta::external::store::service::showcase::connection::modelChainConnection
{
    mappings :
    [
        meta::external::store::service::showcase::mapping::ServiceStoreMapping
    ];
}


JsonModelConnection meta::external::store::service::showcase::connection::jsonModelConnection
{
    class : meta::external::store::service::showcase::domain::Person;
    url   : 'data:application/json,{"firstName":"FirstName Model", "lastName" : "LastName Model", "firmId":"Model"}';
}
