// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class meta::external::store::service::showcase::domain::S_Trade
{
  s_tradeId       : String[1];
  s_traderDetails : String[1];
  s_tradeDetails  : String[1];
}

###Mapping
Mapping meta::external::store::service::showcase::mapping::ServiceStoreMapping
(
  *meta::external::store::service::showcase::domain::S_Trade[s_trade_set]: ServiceStore
  {
     ~service [meta::external::store::service::showcase::store::TradeProductServiceStore] TradeServices.TradeByTraderDetailsService
     (
         ~request
         (
            parameters
            (
                "trader.details" = $this.s_traderDetails
            )
         )
     )

     ~service [meta::external::store::service::showcase::store::TradeProductServiceStore] TradeServices.TradesByRegionService
     (
         ~request
         (
            parameters
            (
                region = 'RegionA',
                requiredParam = 'present'
            )
         )
     )
  }


)

Mapping meta::external::store::service::showcase::mapping::ServiceStoreMappingWithoutOptionalParam
(
  *meta::external::store::service::showcase::domain::S_Trade[s_trade_set]: ServiceStore
  {
     ~service [meta::external::store::service::showcase::store::TradeProductServiceStore] TradeServices.TradesByRegionService
     (
         ~request
         (
            parameters
            (
                requiredParam = 'present'
            )
         )
     )
  }
)

###ServiceStore
ServiceStore meta::external::store::service::showcase::store::TradeProductServiceStore
(
   description : 'Showcase Service Store';

   ServiceGroup TradeServices
   (
      path : '/trades';

      Service TradeByTraderDetailsService
      (
         path : '/traderDetails';
         method : GET;
         parameters :
         (
            "trader.details" : String (location = query, allowReserved = true)
         );
         security : [];
         response : [meta::external::store::service::showcase::domain::S_Trade <- meta::external::store::service::showcase::store::tradeServiceStoreSchemaBinding];
      )

      Service TradesByRegionService
      (
         path : '/allTradesByRegion';
         method : GET;
         parameters :
         (
            region : String (location = query),
            requiredParam : String (location = query, required = true)
         );
         security : [];
         response : [meta::external::store::service::showcase::domain::S_Trade <- meta::external::store::service::showcase::store::tradeServiceStoreSchemaBinding];
      )
   )
)

###ExternalFormat
Binding meta::external::store::service::showcase::store::tradeServiceStoreSchemaBinding
{
  contentType   : 'application/json';
  modelIncludes : [ meta::external::store::service::showcase::domain::S_Trade ];
}

###Runtime
Runtime meta::external::store::service::showcase::runtime::ServiceStoreRuntime
{
    mappings :
    [
        meta::external::store::service::showcase::mapping::ServiceStoreMapping
    ];
    connections :
    [
        meta::external::store::service::showcase::store::TradeProductServiceStore :
        [
            connection_1 : meta::external::store::service::showcase::connection::serviceStoreConnection
        ]
    ];
}