// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::transform::*;
import meta::external::language::java::serialization::*;
import meta::relational::mapping::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::naming::*;

function meta::relational::executionPlan::platformBinding::legendJava::generateImplementationForCreateAndPopulateTempTableNode(p:CreateAndPopulateTempTableExecutionNode[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]):GeneratedCode[1]
{   
   let conventions = $context.conventions;
   
   let className = 'CreateAndPopulateTempTable';
   let iface     = $conventions->className(IRelationalCreateAndPopulateTempTableExecutionNodeSpecifics);
   
   let varName              = $conventions->identifier($conventions.getterNameStrategy->cast(@LambdaFunction<Any>)->functionType().parameters->evaluateAndDeactivate()->toOne()->cast(@VariableExpression).name);
   let getterExpressionCode = $conventions.getterNameStrategy->cast(@LambdaFunction<Any>).expressionSequence->toOne()->evaluateAndDeactivate()->generateJava($conventions, $debug);
   
   let param                    = j_parameter(javaString(), $varName);
   let getGetterNameForProperty = j_conditional(j_eq($param, j_null()),
                                      j_null(),
                                      $getterExpressionCode
                                  )->j_return();

   let class   = javaClass($conventions->planNodeClass('public', $path, $className)->implements($iface), pair(javaMethod('public', javaString(), 'getGetterNameForProperty', $param), $getGetterNameForProperty));
   let project = newProject()->addClass($class)->concatenate($getGetterNameForProperty->dependencies()->resolveAndGetProjects())->toOneMany()->mergeProjects();
   generatedCode($project, $class);
}