// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::*;
import meta::external::store::mongodb::executionPlan::platformBinding::legendJava::graphFetch::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::transform::*;

import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::naming::*;

import meta::pure::metamodel::path::*;

import meta::java::generation::expression::*;
import meta::java::generation::convention::*;
import meta::java::generation::code::*;

import meta::java::metamodel::factory::*;
import meta::java::metamodel::project::*;

import meta::external::store::mongodb::metamodel::pure::graphFetch::executionPlan::*;
import meta::external::store::mongodb::executionPlan::platformBinding::legendJava::*;

import meta::pure::extension::*;

function meta::external::store::mongodb::executionPlan::platformBinding::legendJava::graphFetch::prepareForMongoDBGraphFetch(node: MongoDBGraphFetchExecutionNode[1], path: String[1], context: GenerationContext[1], debug: DebugContext[1]):GenerationContext[1]
{
  println('prepareForMongoDBGraphFetch');
   $node->match([
      r : MongoDBGraphFetchExecutionNode[1] | $r->prepareForMongoDBRootGraphFetch($path, $context, $debug)
   ]);
}

function <<access.private>> meta::external::store::mongodb::executionPlan::platformBinding::legendJava::graphFetch::prepareForMongoDBRootGraphFetch(node: MongoDBGraphFetchExecutionNode[1], path: String[1], context: GenerationContext[1], debug: DebugContext[1]):GenerationContext[1]
{

   let pureType = $node->typeFromStoreLocalNode();

   let simpleType = ^SimpleJavaType(pureType = $pureType, javaType = $context.conventions->className($pureType));

   println('prepareForMongoDBRootGraphFetch');

   let returnType = $node->match([
      //r : RelationalRootQueryTempTableGraphFetchExecutionNode[1] | if($r.checked->isTrue(), | ^CheckedJavaType(checkedOf = $simpleType), | $simpleType),
      p : RootMongoDBGraphFetchExecutionNode[1]| $simpleType
   ]);

   ^$context
   (
      nodeInfos = $context.nodeInfos->concatenate(
         ^NodeInfo(path = $path, returnType = $returnType)
      )
   );
}