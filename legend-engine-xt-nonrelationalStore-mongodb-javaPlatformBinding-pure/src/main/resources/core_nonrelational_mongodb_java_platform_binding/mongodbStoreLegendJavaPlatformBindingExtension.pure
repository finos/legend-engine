// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::mongodb::executionPlan::platformBinding::legendJava::graphFetch::*;
import meta::external::language::java::metamodel::project::*;
import meta::pure::executionPlan::platformBinding::legendJava::shared::naming::*;
import meta::external::language::java::factory::project::*;
import meta::pure::executionPlan::platformBinding::legendJava::graphFetch::common::*;
import meta::external::language::java::metamodel::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::platformBinding::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::extension::*;
import meta::pure::mapping::*;
import meta::external::store::mongodb::executionPlan::platformBinding::legendJava::*;
import meta::external::store::mongodb::metamodel::pure::graphFetch::executionPlan::*;
import meta::external::store::mongodb::metamodel::pure::*;
import meta::external::store::mongodb::metamodel::mapping::*;

function meta::external::store::mongodb::executionPlan::platformBinding::legendJava::mongoDBStoreLegendJavaPlatformBindingExtension(): LegendJavaPlatformBindingExtension[1]
{
   ^LegendJavaPlatformBindingExtension
   (
      platformId = legendJavaPlatformBindingId(),

      id = 'MongoDBStoreLegendJavaPlatformBindingExtension',

      // Node based extensions ------------------------------------------------------

      supportedExecutionNodes = [
        MongoDBGraphFetchExecutionNode
      ],

      updateGenerationContextForNode = {node: ExecutionNode[1], context: GenerationContext[1], path: String[1], extensions: Extension[*], debug: DebugContext[1] |
         $node->match([
            n: MongoDBGraphFetchExecutionNode[1]          | $n->prepareForMongoDBGraphFetch($path, $context, $debug),
            n: ExecutionNode[1]                           | $context
         ])
      }


      // ------------------------------------------------------ Node based extensions
   )
}

function meta::external::store::mongodb::executionPlan::platformBinding::legendJava::mongoDBStoreExtensionsWithLegendJavaPlatformBinding(externalFormatDescriptors: meta::external::shared::format::executionPlan::platformBinding::legendJava::ExternalFormatLegendJavaPlatformBindingDescriptor[*]): Extension[*]
{
   meta::external::store::mongodb::extension::mongoDBExtensions()->concatenate(
      meta::pure::executionPlan::platformBinding::platformBindingExtension([
         meta::pure::executionPlan::platformBinding::legendJava::legendJavaPlatformBinding([
            meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::inMemoryLegendJavaPlatformBindingExtension(),
            meta::external::store::mongodb::executionPlan::platformBinding::legendJava::mongoDBStoreLegendJavaPlatformBindingExtension(),
            meta::external::shared::format::executionPlan::platformBinding::legendJava::bindingLegendJavaPlatformBindingExtension($externalFormatDescriptors)
         ])
      ])
   )
}
