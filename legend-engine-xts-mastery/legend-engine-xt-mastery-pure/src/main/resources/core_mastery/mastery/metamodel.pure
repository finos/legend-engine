// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


import meta::protocols::pure::vX_X_X::metamodel::runtime::*;
import meta::pure::mastery::metamodel::authentication::*;
import meta::pure::mastery::metamodel::acquisition::*;
import meta::pure::mastery::metamodel::acquisition::file::*;
import meta::pure::mastery::metamodel::acquisition::kafka::*;
import meta::pure::mastery::metamodel::credential::*;
import meta::pure::mastery::metamodel::connection::*;
import meta::pure::mastery::metamodel::trigger::*;
import meta::pure::mastery::metamodel::authorization::*;
import meta::legend::service::metamodel::*;
import meta::pure::mastery::metamodel::precedence::*;
import meta::pure::mastery::metamodel::*;
import meta::pure::mastery::metamodel::identity::*;
import meta::pure::mastery::metamodel::dataset::*;
import meta::pure::runtime::connection::authentication::*;

Class {doc.doc = 'Defines a Master Record and all configuration required for managing it in a mastering platform.'}
meta::pure::mastery::metamodel::MasterRecordDefinition extends PackageableElement
{
  {doc.doc = 'The class of data that is managed in this Master Record.'}
  modelClass : Class<Any>[1];

  {doc.doc = 'The identity resolution configuration used to identify a record in the master store using the inputs provided, the inputs usually do not contain the primary key.'}
  identityResolution : IdentityResolution[1];

  {doc.doc = 'Defines how child collections should compare objects for equality, required for collections that cant simply be compared using the equality key stereotype defined.'}
  collectionEqualities: CollectionEquality[0..*];

  {doc.doc = 'The sources of records to be loaded into the master.'}
  sources: RecordSource[0..*];

  {doc.doc = 'An optional service invoked on the curated master record just before being persisted into the store.'}
  postCurationEnrichmentService: Service[0..1];

  {doc.doc = 'The rules which determine if changes should be blocked or accepted'}
  precedenceRules: meta::pure::mastery::metamodel::precedence::PrecedenceRule[0..*];

  {doc.doc='Whether to push this data to Elastic Search or not'}
  publishToElasticSearch: Boolean[0..1];

  {doc.doc='Service to convert the master record class to a model that will be published to Elastic Search when enabled'}
  elasticSearchTransformService: Service[0..1];

  {doc.doc='Service to convert the master record class to a model that will be published to an Exception Workflow when enabled'}
  exceptionWorkflowTransformService: Service[0..1];
}


Class <<typemodifiers.abstract>> {doc.doc='A source of data records to be curated into the master, by specifying the connection RecordSource can be from a File, Kafka, Legend Service (Pull API) or RESTful (Push API).'}
meta::pure::mastery::metamodel::RecordSource
{
  {doc.doc='A unique ID defined for the source that is used by the operational control plane to trigger and manage the resulting sourcing session.'}
  id: String[1];

  {doc.doc='Depending on the liveStatus certain controls are introduced, for example a Production status introduces warnings on mopdel changes that are not backwards compatible.'}
  status: RecordSourceStatus[1];

  {doc.doc='Description of the RecordSource suitable for end users.'}
  description: String[1];

  {doc.doc='Indicates if the data has to be processed sequentially, e.g. a delta source on Kafka that provides almost realtime changes, a record may appear more than once so processing in order is important.'}
  sequentialData: Boolean[0..1];

  {doc.doc='The data must be loaded fully into a staging store before beginning processing, e.g. the parse and transform into the SourceModel groups records that may be anywhere in the file and they need to be processed as an atomic SourceModel.'}
  stagedLoad: Boolean[0..1];

  {doc.doc='The data provider details for this record source'}
  dataProvider: DataProvider[0..1];

  {doc.doc='Determines if the source will create a new record if the incoming data does not resolve to an existing record.'}
  createPermitted: Boolean[0..1];

  {doc.doc='If the source is not permitted to create a record determine if an exception should be rasied.'}
  createBlockedException: Boolean[0..1];

  {doc.doc='Whether this source should raise an Exception Workflow.'}
  raiseExceptionWorkflow: Boolean[0..1];

  {doc.doc='Record input service responsible for acquiring data from source and performing necessary transformations.'}
  recordService: RecordService[0..1];

  {doc.doc='Indicates if the source is allowed to delete fields on the master data.'}
  allowFieldDelete: Boolean[0..1];

  {doc.doc='An event that kick start the processing of the source.'}
  trigger: Trigger[0..1];

  {doc.doc='Authorization mechanism for determine who is allowed to trigger the datasource.'}
  authorization: Authorization[0..1];

  {doc.doc='The run profile this source should use when triggered, for sources that process a large number of records a larger profile can be set which will allocate more CPU and memory to the run container.'}
  runProfile: meta::pure::mastery::metamodel::Profile[0..1];

  {doc.doc = 'Maximum time in minutes that the source should be running for - will send an alert if it runs for more than this'}
  timeoutInMinutes: Integer[0..1];

  {doc.doc = 'Indicates when there are dependencies on some other RecordSources and what type of dependency there is'}
  dependencies: RecordSourceDependency[*];
}


Class {doc.doc='Defines how a data is sourced from source and transformed into a master record model.'}
meta::pure::mastery::metamodel::RecordService 
{
  {doc.doc = 'The protocol for acquiring the raw data form the sourcee.'}
  acquisitionProtocol: AcquisitionProtocol[0..1];

  {doc.doc='An optional service that converts raw data into a SourceModel, e.g. commonly used to parse CSVs into a Legend model defined in Studio.'}
  parseService: Service[0..1];

  {doc.doc='A service that returns the source data in the class defined for the MasterRecordDefinition, this can be a model-to-model transformation from a SourceModel or a Legend Service that extracts the data from any source supported by Legend.'}
  transformService: Service[0..1];
}

Enum {doc.doc = 'Release status used to apply controls on models and configuration to preserve lineage and provenance.'}
meta::pure::mastery::metamodel::RecordSourceStatus
{
  Development,
  TestOnly,
  Production,
  Dormant,
  Decommissioned
}

Enum {doc.doc = 'Profile to be used when running the record source.'}
meta::pure::mastery::metamodel::Profile
{
  Large,
  Medium,
  Small,
  ExtraSmall
}

Class
meta::pure::mastery::metamodel::RecordSourceDependency
{
  {doc.doc = 'Id of the record source that the dependency is on - this source cant run until this record source has run successfully'} dependentRecordSourceId: String[1];
}


/*************************
 * Resolution and Equality
 *************************/

Class {doc.doc = 'Defines how to resolve a single incoming record to match a single record in the master store, handling cases when the primary key is not provided in the input and defines the scope of uniqueness to prevent the creation of duplicate records.'}
meta::pure::mastery::metamodel::identity::IdentityResolution
{
  {doc.doc = 'The set of queries used to identify a single record in the master store. Not required if the Master record has a single equality key field defined (using model stereotypes) that is not generated.'}
  resolutionQueries : meta::pure::mastery::metamodel::identity::ResolutionQuery[0..*];
}

Class {doc.doc = 'Defines queries used for identity resolution to identify a master record instance to update and prevent duplicates from being created.'}
meta::pure::mastery::metamodel::identity::ResolutionQuery
{
  {doc.doc='Expressions that refer to attributes used to generate queries that are executed on the master store.'}
  queries : meta::pure::metamodel::function::LambdaFunction<{Any[1],StrictDate[0..1]->Any[*]}>[1..*]; //TODO in compiler check that parameter and return type are of same type, via subclass of LambdaFunction?

  {doc.doc='The key type used to define influences how to generate queries issued against the store and validate the results of query execution.'}
  keyType : meta::pure::mastery::metamodel::identity::ResolutionKeyType[1];

  {doc.doc='The query precedence applied when there are more than one ResoultionQuery definitions on an IdentityResolution, 1 is hiughest.'}
  precedence : Integer[1];
}

Enum {doc.doc = 'Types of resolution keys.'}
meta::pure::mastery::metamodel::identity::ResolutionKeyType
{
  {doc.doc = 'Validated against equality key (defined as model stereotypes) to ensure it is an actual PK and fail resolution if the field is provided and a single match is not found.'}
  GeneratedPrimaryKey,

  {doc.doc = 'Validated against equality key (defined as model stereotypes) to ensure it is an an actual PK and create a new record if a match is not found.'}
  SuppliedPrimaryKey,

  {doc.doc = 'If an AlternateKey is specified then at least one is required in the input record or resolution fails, if supplied data has a curationModel filed specified and it is "Create" then the input source is attempting to create a new record (e.g. from UI) therefore block if existing record found.'}
  AlternateKey,

  {doc.doc = 'Used for matching to records in the store if supplied but no validation is applied.'}
  Optional
}


Class {doc.doc='Defines how child collections should compare objects for equality, required for collections that cant simply be compared using the equality key stereotype defined.'}
meta::pure::mastery::metamodel::identity::CollectionEquality
{
  {doc.doc = 'The class of data that the equality function is applied to when it exists in a collection.'}
  modelClass : meta::pure::metamodel::type::Class<Any>[1];

  {doc.doc = 'The equality function applied to elements in the collection.'}
  equalityFunction: Service[1];
}



/*************************
 * Precedence Rules
 *************************/

 Class <<typemodifiers.abstract>> meta::pure::mastery::metamodel::precedence::PrecedenceRule
{
  paths: meta::pure::mastery::metamodel::precedence::PropertyPath[1..*];
  scope: meta::pure::mastery::metamodel::precedence::RuleScope[*];
  masterRecordFilter: meta::pure::metamodel::function::LambdaFunction<{Class<Any>[1]->Any[*]}>[1];

}

Class meta::pure::mastery::metamodel::precedence::PropertyPath
{
  property: Property<Nil, Any|*>[1];
  filter: meta::pure::metamodel::function::LambdaFunction<{Class<Any>[1]->Any[*]}>[1];
}


Class meta::pure::mastery::metamodel::precedence::UpdateRule extends meta::pure::mastery::metamodel::precedence::PrecedenceRule
{

}


Class meta::pure::mastery::metamodel::precedence::SourcePrecedenceRule extends meta::pure::mastery::metamodel::precedence::UpdateRule
[
   noRuleScope( ~function: $this.scope->isNotEmpty()
                          ~enforcementLevel: Error
                          ~message: 'Source Precedence Rule must be scoped to at least one of the following: datasourceId, dataproviderId or dataProviderType')
]
{
  precedence: Integer[1];
  action: meta::pure::mastery::metamodel::precedence::RuleAction[1];

}

Class meta::pure::mastery::metamodel::precedence::ConditionalRule extends meta::pure::mastery::metamodel::precedence::UpdateRule
{
  predicate: meta::pure::metamodel::function::LambdaFunction<{Any[*],Any[*]->Boolean[1]}>[1];
}


Class meta::pure::mastery::metamodel::precedence::CreateRule extends meta::pure::mastery::metamodel::precedence::PrecedenceRule
[
   noRuleScope( ~function: $this.scope->isNotEmpty()
                          ~enforcementLevel: Error
                          ~message: 'Create Rule must be scoped to at least one of the following: datasourceId, dataproviderId or dataProviderType')
]
{
}



Class meta::pure::mastery::metamodel::precedence::DeleteRule extends meta::pure::mastery::metamodel::precedence::PrecedenceRule
[
   noRuleScope( ~function: $this.scope->isNotEmpty()
                          ~enforcementLevel: Error
                          ~message: 'Delete Rule must be scoped to at least one of the following: datasourceId, dataproviderId or dataProviderType')
]
{
}

Class <<typemodifiers.abstract>> meta::pure::mastery::metamodel::precedence::RuleScope {

}

Class meta::pure::mastery::metamodel::precedence::RecordSourceScope extends meta::pure::mastery::metamodel::precedence::RuleScope {
  recordSourceId: String[1];
}

Class meta::pure::mastery::metamodel::precedence::DataProviderTypeScope extends meta::pure::mastery::metamodel::precedence::RuleScope {
  dataProviderType: String[1];
}

Class meta::pure::mastery::metamodel::precedence::DataProviderIdScope extends meta::pure::mastery::metamodel::precedence::RuleScope {
  dataProviderId: String[1];
}


Enum meta::pure::mastery::metamodel::precedence::RuleAction
{
  Overwrite,
  Block
}

Class
{doc.doc = 'Groups together related precedence rules.'}
meta::pure::mastery::metamodel::DataProvider extends PackageableElement
{
  dataProviderId: String[1];
  dataProviderType: String[1];
}


Enum
{doc.doc = 'Enumerate values for Curation Processing Actions.'} 
meta::pure::mastery::metamodel::precedence::DataProviderType
{
  Aggregator,
  Exchange,
  Regulator
}


/**********
 * Trigger
 **********/

Class <<typemodifiers.abstract>>
meta::pure::mastery::metamodel::trigger::Trigger
{
}

Class
meta::pure::mastery::metamodel::trigger::ManualTrigger extends Trigger
{
}

Class
{doc.doc = 'A trigger that executes on a schedule specified as a cron expression.'}
meta::pure::mastery::metamodel::trigger::CronTrigger extends Trigger
{
   minute : Integer[1];
   hour: Integer[1];
   days: Day[0..*];
   month: meta::pure::mastery::metamodel::trigger::Month[0..1];
   dayOfMonth: Integer[0..1];
   year: Integer[0..1];
   timezone: String[1];
   frequency: Frequency[0..1];
}

Enum
{doc.doc = 'Trigger Frequency at which the data is sent'} 
meta::pure::mastery::metamodel::trigger::Frequency
{
  Daily,
  Weekly,
  Intraday
}

Enum
{doc.doc = 'Run months value for trigger'} 
meta::pure::mastery::metamodel::trigger::Month
{
  January,
  February,
  March,
  April,
  May,
  June,
  July,
  August,
  September,
  October,
  November,
  December
}

Enum
{doc.doc = 'Run days value for trigger'} 
meta::pure::mastery::metamodel::trigger::Day
{
  Monday,
  Tuesday,
  Wednesday,
  Thursday,
  Friday,
  Saturday,
  Sunday
}

/*************************
 *
 * Acquisition Protocol
 *
 *************************/
Class <<typemodifiers.abstract>>
meta::pure::mastery::metamodel::acquisition::AcquisitionProtocol 
{

}

Class
meta::pure::mastery::metamodel::acquisition::LegendServiceAcquisitionProtocol extends AcquisitionProtocol
{
   service: Service[1];
}


Class
{doc.doc = 'File based data acquisition protocol. Files could be either JSON, XML or CSV.'}
meta::pure::mastery::metamodel::acquisition::FileAcquisitionProtocol extends AcquisitionProtocol
{
  connection: FileConnection[1];

  filePath: String[1];

  fileType: FileType[1];

  fileSplittingKeys: String[0..*];

  headerLines: Integer[1];

  recordsKey: String[0..1];

  {doc.doc = 'Maximum time in minutes we should keep checking if the file exists, after this an alert will be sent if not found'} maxRetryTimeInMinutes: Integer[0..1];

  decryption: Decryption[0..1];

  {meta::pure::profiles::doc.doc = 'Character encoding of the source file. This is only needed if the source is not already in utf-8'} encoding: String[0..1];
}

Class <<typemodifiers.abstract>>
meta::pure::mastery::metamodel::acquisition::file::Decryption
{
}

Class
meta::pure::mastery::metamodel::acquisition::file::PGPDecryption extends Decryption
{
  privateKey: meta::pure::mastery::metamodel::authentication::CredentialSecret[1];
  passPhrase: meta::pure::mastery::metamodel::authentication::CredentialSecret[1];
}

Class
meta::pure::mastery::metamodel::acquisition::file::DESDecryption extends Decryption
{
  decryptionKey: meta::pure::mastery::metamodel::authentication::CredentialSecret[1];
  {doc.doc = 'unix to unix Encoding is a symmetric encryption based on conversion of binary data into ASCII characters'} uuEncode: Boolean[1];
  {doc.doc = 'whether the source uses the certified assisted products (CAP) option - https://www.ncsc.gov.uk/section/products-services/ncsc-certification'} capOption: Boolean[1];
}

Class <<typemodifiers.abstract>>
meta::pure::mastery::metamodel::acquisition::KafkaAcquisitionProtocol extends AcquisitionProtocol
{

  dataType: KafkaDataType[1];

  recordTag: String[0..1]; //required when the data type is xml

  connection: KafkaConnection[1];
}

Class
{doc.doc = 'Push data acquisition protocol where upstream systems send data via REST APIs.'}
meta::pure::mastery::metamodel::acquisition::RestAcquisitionProtocol extends AcquisitionProtocol
{
}

Enum
meta::pure::mastery::metamodel::acquisition::file::FileType
{
  JSON,
  CSV,
  XML
}

Enum
meta::pure::mastery::metamodel::acquisition::kafka::KafkaDataType
{
  JSON,
  XML
}


/*************************
 *
 * Authentication Strategy
 *
 *************************/

Class <<typemodifiers.abstract>>
meta::pure::mastery::metamodel::authentication::AuthenticationStrategy
{
  credential: meta::pure::mastery::metamodel::authentication::CredentialSecret[0..1];
}


Class
{doc.doc = 'NTLM Authentication Protocol.'}
meta::pure::mastery::metamodel::authentication::NTLMAuthenticationStrategy extends meta::pure::mastery::metamodel::authentication::AuthenticationStrategy
{
}

Class
{doc.doc = 'Token based Authentication Protocol.'}
meta::pure::mastery::metamodel::authentication::TokenAuthenticationStrategy extends meta::pure::mastery::metamodel::authentication::AuthenticationStrategy
{
  tokenUrl: String[1];
}

Class <<typemodifiers.abstract>>
meta::pure::mastery::metamodel::authentication::CredentialSecret
{

}


/*****************
 *
 * Authorization
 *
 ****************/

Class <<typemodifiers.abstract>>
meta::pure::mastery::metamodel::authorization::Authorization
{
}

/**************
 *
 * Connection
 *
 **************/

Class <<typemodifiers.abstract>>
meta::pure::mastery::metamodel::connection::Connection extends PackageableElement
{

  authentication:  meta::pure::mastery::metamodel::authentication::AuthenticationStrategy[0..1];
}

Class <<typemodifiers.abstract>>
{doc.doc = 'Connection details for file type entities.'} 
meta::pure::mastery::metamodel::connection::FileConnection extends meta::pure::mastery::metamodel::connection::Connection
{
}

Class
{doc.doc = 'Kafka Connection details.'} 
meta::pure::mastery::metamodel::connection::KafkaConnection extends meta::pure::mastery::metamodel::connection::Connection
{
  topicName: String[1];
  topicUrls: String[1..*];
}


Class
{doc.doc = 'File Transfer Protocol (FTP) Connection details.'} 
meta::pure::mastery::metamodel::connection::FTPConnection extends FileConnection
{
   host: String[1];

   port: Integer[1];

   secure: Boolean[0..1];
}


Class
{doc.doc = 'Hyper Text Transfer Protocol (HTTP) Connection details.'} 
meta::pure::mastery::metamodel::connection::HTTPConnection extends FileConnection
{
  url: String[1];

  proxy: Proxy[0..1];

}

Class
{doc.doc = 'Proxy details through which connection is extablished with an http server'} 
meta::pure::mastery::metamodel::connection::Proxy
{

  host: String[1];

  port: Integer[1];

  authentication: meta::pure::mastery::metamodel::authentication::AuthenticationStrategy[0..1];
}