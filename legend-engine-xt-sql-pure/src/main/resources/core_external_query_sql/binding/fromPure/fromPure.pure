// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::runtime::*;
import meta::external::query::sql::metamodel::*;
import meta::external::query::sql::transformation::queryToPure::*;
import meta::legend::service::metamodel::*;
import meta::pure::executionPlan::*;

Class meta::external::query::sql::transformation::queryToPure::SQLSourceArgument
{
  name: String[0..1];
  index: Integer[0..1];
  value: Any[*];

  matches(argument:SQLSourceArgument[1]) {
    ($this.name->isNotEmpty() && $this.name == $argument.name && $this.value == $argument.value)
    ||
    ($this.name->isEmpty() && $this.index == $argument.index && $this.value == $argument.value)
  }:Boolean[1];
}

Class meta::external::query::sql::transformation::queryToPure::SQLSource
{
  type: String[1];
  func:FunctionDefinition<Any>[1];
  mapping: meta::pure::mapping::Mapping[0..1];
  runtime: meta::pure::runtime::Runtime[0..1];
  executionOptions: ExecutionOption[*];
  executionContext: ExecutionContext[0..1];
  key: SQLSourceArgument[*];

  matches(type:String[1], arguments:SQLSourceArgument[*]) {
    $this.type == $type && $this.key->forAll(k | $arguments->exists(a | $a.matches($k)));
  }:Boolean[1];
}

function meta::external::query::sql::transformation::queryToPure::getPlansFromSQL(
                                                                          sources: SQLSource[*],
                                                                          query: meta::external::query::sql::metamodel::Node[1],
                                                                          extensions: meta::pure::extension::Extension[*]
                                                                      ): meta::pure::executionPlan::ExecutionPlan[1]
{
  let sqlTransformContext = processQuery($sources, $query, $extensions);
  meta::pure::executionPlan::executionPlan($sqlTransformContext.lambda(), $extensions);
}

function meta::external::query::sql::transformation::queryToPure::getSchemaFromSQL(
                                                                          sources: SQLSource[*],
                                                                          query: meta::external::query::sql::metamodel::Node[1],
                                                                          extensions: meta::pure::extension::Extension[*]
                                                                      ): meta::external::query::sql::Schema[1]
{
  let sqlTransformContext = processQuery($sources, $query, $extensions);
  $sqlTransformContext.columns()->meta::external::query::sql::tdsColsToSchema();
}

function meta::external::query::sql::transformation::queryToPure::processQuery(
                                                                          sources: SQLSource[*],
                                                                          query: meta::external::query::sql::metamodel::Node[1],
                                                                          extensions: meta::pure::extension::Extension[*]
                                                                      ): SqlTransformContext[1]
{
  let context = ^SqlTransformContext(
    sources = $sources,
    extensions = $extensions,
    aliases = ^Map<String, String>(),
    contexts = ^Map<String, SqlTransformContext>());

  $query->cast(@Query)->processQuery($context);
}

function meta::external::query::sql::transformation::queryToPure::processQuery(query: Query[1], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processQuery');

  wrapWithFrom($query.limit->processLimit(
    $query.orderBy->processOrderBy(
      $query.queryBody->processQueryBody($context))
  ));
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processQueryBody(queryBody: QueryBody[1], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processQueryBody');
  $queryBody->match([
    table: Table[1]                   | $table->processTable($context),
    tf:TableFunction[1]               | $tf->processTableFunction($context),
    tsq: TableSubquery[1]             | $tsq->processTableSubquery($context),
    querySpec: QuerySpecification[1]  | $querySpec->processQuerySpec($context),
    set:SetOperation[1]               | $set->processSetOperation($context),
    qb: QueryBody[1]                  | $context
  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processSetOperation(setOperation: SetOperation[1], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processSetOperation');
  $setOperation->match([
    u:Union[1] | $u->processUnion($context),
    s:SetOperation[1] | $context
  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processUnion(union: Union[1], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processUnion');
  let left = wrapWithFrom(processRelation($union.left, $context));
  let right = wrapWithFrom(processRelation($union.right, $context));

  //TODO handle distinct

  let newExp = appendTdsFunc($left.expression->toOne(), concatenate_TabularDataSet_1__TabularDataSet_1__TabularDataSet_1_, [list($right.expression->toOne())]);

  ^$context(expression = $newExp);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processQuerySpec(querySpec: QuerySpecification[1], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processQuerySpec');
  let from = $querySpec.from->processFrom($context);

  let query = $querySpec.limit->processLimit(
    $querySpec.orderBy->processOrderBy(
      $querySpec.having->processHaving($querySpec.select,
        $querySpec.select->processProjection($querySpec.groupBy, $querySpec.having, $querySpec.where->processWhere($from))
      )
    )
  );

  let schema = $query.columns.name;

  let expected = $querySpec.select.selectItems->filter(si | $si->instanceOf(SingleColumn))->cast(@SingleColumn)->map(s | extractNameFromSingleColumn($s));

  if ($schema != $expected && $expected->isNotEmpty(), | ^$query(expression = processRestrict($expected, $query)), | $query);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::extractAggregatesFromExpression(expression:meta::external::query::sql::metamodel::Expression[0..1]):meta::external::query::sql::metamodel::Expression[*]
{
  $expression->match([
    c:ComparisonExpression[1] | $c.left->extractAggregatesFromExpression()->concatenate($c.right->extractAggregatesFromExpression()),
    l:LogicalBinaryExpression[1] | $l.left->extractAggregatesFromExpression()->concatenate($l.right->extractAggregatesFromExpression()),
    n:NotExpression[1] | $n.value->extractAggregatesFromExpression(),
    n:NegativeExpression[1] | $n.value->extractAggregatesFromExpression(),
    a:ArithmeticExpression[1] | $a.left->extractAggregatesFromExpression()->concatenate($a.right->extractAggregatesFromExpression()),
    f:FunctionCall[1] | if (isExpressionAggregate($f), | $f, | []),
    n:IsNullPredicate[1] | $n.value->extractAggregatesFromExpression(),
    n:IsNotNullPredicate[1] | $n.value->extractAggregatesFromExpression(),
    e:meta::external::query::sql::metamodel::Expression[0..1] | []
  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processProjection(select: Select[1], groupBy: meta::external::query::sql::metamodel::Expression[*], having:meta::external::query::sql::metamodel::Expression[0..1], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processProjection');

  let aggregates = $select.selectItems->filter(si | $si->isSelectItemAggregate());
  let windows = $select.selectItems->filter(si | $si->isSelectItemWindow());
  let standard = $select.selectItems->removeAll($aggregates)->removeAll($windows);

  let havingExtensions = extractAggregatesFromExpression($having)->map(e | ^SingleColumn(expression = $e));

  let extensions = $standard->filter(si | !$si->isSelectItemColumnReference());

  let isAggregate = $groupBy->isNotEmpty() || anyColumnAggregate($select);
  let isWindow = $windows->isNotEmpty();

  let project = if ($standard->isNotEmpty() && !($isAggregate || $isWindow || $havingExtensions->isNotEmpty()),
                  | processSelect(^$select(selectItems = $standard), $context),
                  | $context.expression->toOne());

  let extend = if ($extensions->isNotEmpty() && ($isAggregate || $isWindow || $havingExtensions->isNotEmpty()),
                  | processExtend(^$select(selectItems = $extensions), ^$context(expression = $project)),
                  | $project);

  let group = if ($isAggregate || $havingExtensions->isNotEmpty(),
                  | processGroupBy($select, $groupBy, $windows, $extensions, $havingExtensions, ^$context(expression = $extend)),
                  | $extend);

  let olapGroupBy = if ($isWindow,
                  | processOlapGroupBy($windows, ^$context(expression = $group)),
                  | $group);

  let distinctExp = if($select.distinct,
    | appendTdsFunc($olapGroupBy, distinct_TabularDataSet_1__TabularDataSet_1_, []),
    | $olapGroupBy);

  let aliases = $select.selectItems->map(si |
    $si->match([
      s:SingleColumn[1] | extractAliasFromColumn($s);,
      a:AllColumns[1] | $context.columns()->map(c | pair($c.name, $c.name))
    ])
  )->newMap();

  ^$context(expression = $distinctExp, aliases = $aliases);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::extractGroupByColumnNameFromExpression(expression:meta::external::query::sql::metamodel::Expression[1], select: Select[1]):String[1]
{
  $expression->match([
    i:IntegerLiteral[1] |
      let index = $i.value - 1; //0 index offset in sql is 1;
      assert($index < $select.selectItems->size(), 'No select column at index ' + $i.value->toString());
      assert($select.selectItems->at($index)->instanceOf(SingleColumn), 'select * not currently supported for index group by');
      $select.selectItems->at($index)->cast(@SingleColumn)->extractNameFromSingleColumn();,
    e:meta::external::query::sql::metamodel::Expression[1] | $e->extractNameFromExpression()
  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processOlapGroupBy(windows:SelectItem[*], context: SqlTransformContext[1]):FunctionExpression[1]
{
  $windows->cast(@SingleColumn)->fold({item, acc | processWindowSingleColumn($item, $acc, $context)}, $context.expression->toOne());
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processGroupBy(select: Select[1], groupBy: meta::external::query::sql::metamodel::Expression[*], windows:SelectItem[*], extensions:SelectItem[*], havingExtensions:SelectItem[*], context: SqlTransformContext[1]):FunctionExpression[1]
{
  debug('processGroupBy');
  assert($windows->isEmpty(), | 'combining aggregations with window functions not currently supported');

  let groupByColumns = $groupBy->map(g | $g->extractGroupByColumnNameFromExpression($select));

  let aggregates = $select.selectItems->filter(s | $s->isSelectItemAggregate() && !$s->isSelectItemWindow());

  let rename = processRename($select.selectItems->removeAll($aggregates)->removeAll($windows)->removeAll($extensions)->removeAll($havingExtensions)->cast(@SingleColumn), $context);

  //TODO should use equals on the expression instead of name checking in groupBy, cannot at moment due to no equality key.
  let aggregatePairs = $aggregates->cast(@SingleColumn)
                              ->map(column | pair(extractNameFromSingleColumn($column), $column))
                              ->filter(pair | !$groupByColumns->contains($pair.first));

  let aggregateExpressionNames = $aggregates->cast(@SingleColumn)->map(column | extractNameFromExpression($column.expression));

  let havingAggregatePairs = $havingExtensions->cast(@SingleColumn)
                              ->map(column | pair(extractNameFromSingleColumn($column), $column))
                              ->filter(pair | !$aggregateExpressionNames->contains($pair.first))
                              ->removeDuplicatesBy(x | $x.first);

  let additionalGroupColumns = $select.selectItems->removeAll($aggregates)->cast(@SingleColumn)->map(s | extractNameFromSingleColumn($s));

  let allGroupByColumns = $groupByColumns->concatenate($additionalGroupColumns)->distinct();

  let aggregations = $aggregatePairs->concatenate($havingAggregatePairs)
                              ->map(pair |
                                let name = $pair.first;
                                let column = $pair.second;

                                let functionCall = $column.expression->cast(@FunctionCall);

                                let mapExpression = processMapFunction($functionCall, $context);
                                let mapReturnType = $mapExpression.genericType.rawType->toOne();
                                let mapFunctionType = functionType('row', TDSRow, PureOne, $mapReturnType, ZeroOne);
                                let mapLambda = lambda($mapFunctionType, $mapExpression);

                                ensureAggregateFunction($functionCall);

                                let aggLambda = processAggregationLambda($functionCall, $mapReturnType, $context);
                                let aggReturnType = $aggLambda->functionReturnType();

                                let typeParameters = [^GenericType(rawType = $mapReturnType), $aggReturnType];

                                sfe(agg_String_1__FunctionDefinition_1__FunctionDefinition_1__AggregateValue_1_, $typeParameters, [
                                  iv($name), iv($mapLambda), iv($aggLambda)
                                ]);
                              );


  if ($allGroupByColumns->isEmpty() && $aggregations->isEmpty(),
                            | $rename,
                            | if ($allGroupByColumns->isNotEmpty() && $aggregations->isEmpty(),
                                |
                                  //group by with no aggregates is not compilable pure, so we simplify to restrict, distinct
                                  let restrict = processRestrict($allGroupByColumns, ^$context(expression = $rename));
                                  appendTdsFunc($restrict, distinct_TabularDataSet_1__TabularDataSet_1_, []);,
                                | appendTdsFunc($rename, groupBy_TabularDataSet_1__String_MANY__AggregateValue_MANY__TabularDataSet_1_, [list($allGroupByColumns), list($aggregations)])));
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processAggregationLambda(functionCall:FunctionCall[1], type:Type[1], context:SqlTransformContext[1]):LambdaFunction<Any>[1]
{
  let aggExpression = processAggFunction($functionCall, $type, $context);

  let aggReturnType = $aggExpression.genericType.rawType->toOne();

  let aggFunctionType = functionType('y', ^GenericType(rawType = $type), ZeroMany, $aggExpression.genericType, PureOne);
  lambda($aggFunctionType, $aggExpression);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processWindowSingleColumn(s:SingleColumn[1], tds:FunctionExpression[1], context: SqlTransformContext[1]):FunctionExpression[1]
{
  let name = extractNameFromSingleColumn($s);
  assert($s.expression->instanceOf(FunctionCall), | 'expression must be function call');
  assert($s.expression->cast(@FunctionCall).window->isNotEmpty(), | 'window function must not be empty');

  let functionCall = $s.expression->cast(@FunctionCall);
  let window = $functionCall.window;

  assert($window.partitions->forAll(p | $p->instanceOf(QualifiedNameReference)), | 'all partitions must be column references');
  assert($window.orderBy->size() <= 1, | 'multiple window sort items not yet supported');
  assert($window.windowFrame->isEmpty(), | 'window frame not yet supported');

  let func = processAggregationLambda(^$functionCall(window = []), Number, $context);

  let partitions = $window.partitions->map(partition | $partition->extractNameFromExpression());

  let sort = $window.orderBy->map(si | $si->createSortItemFunction());

  appendTdsFunc($tds, olapGroupBy_TabularDataSet_1__String_MANY__SortInformation_$0_1$__OlapOperation_1__String_1__TabularDataSet_1_, [
    list(iv($partitions)), list(iv($sort)), list(iv($func)), list(iv($name))
  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processAggFunction(functionCall:FunctionCall[1], type:Type[1], context: SqlTransformContext[1]):ValueSpecification[1]
{
  let expContext = expressionContext(^VariableExpression(genericType = ^GenericType(rawType = $type),name = 'y', multiplicity = PureOne), ^Map<String, VariableExpression>());

  let expression = $functionCall.arguments->match([
    q:QualifiedNameReference[1] | processFunctionCall(^$functionCall(arguments = ^QualifiedNameReference(name=^QualifiedName())), $expContext, $context),
    l:Literal[1] | processFunctionCall($functionCall, $expContext, $context),
    e:meta::external::query::sql::metamodel::Expression[1] | processFunctionCall(^$functionCall(arguments = ^QualifiedNameReference(name=^QualifiedName())), $expContext, $context),
    //NOTE * params come through as empty, investigate whether parser should handle this better
    a:Any[0] | processFunctionCall(^$functionCall(arguments = ^QualifiedNameReference(name=^QualifiedName())), $expContext, $context),
    a:Any[*] | fail('aggregation type currently not supported'); iv(1);
  ])->evaluateAndDeactivate();
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processMapFunction(functionCall:FunctionCall[1], context: SqlTransformContext[1]):ValueSpecification[1]
{
  $functionCall.arguments->match([
    q:QualifiedNameReference[1] | processExpression($q, rowExpressionContext(), $context),
    l:Literal[1] | rowExpressionContext().var(),
    e:meta::external::query::sql::metamodel::Expression[1] | processExpression($e, rowExpressionContext(), $context),
    //NOTE * params come through as empty, investigate whether parser should handle this better
    a:Any[0] | rowExpressionContext().var(),
    a:Any[*] | fail('aggregation type currently not supported'); iv(1);
  ])->evaluateAndDeactivate();
}

//We currently need to ensure that all the functions used in group by are in fact aggregate functions. e.g. select count(*), pi() would not currently translate well to Pure.
function <<access.private>> meta::external::query::sql::transformation::queryToPure::ensureAggregateFunction(functionCall:FunctionCall[1]):Boolean[1]
{
  let processor = functionProcessor($functionCall.name);
  assert($processor.isAggregate, | 'function ' + extractNameFromQualifiedName($functionCall.name) + ' is not currently supported as aggregate function');
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processExtend(select: Select[1], context: SqlTransformContext[1]):FunctionExpression[1]
{
  debug('processExtend');
  let genericType = ^GenericType(rawType = TDSRow);

  let args = $select.selectItems->processSelectItems($context)->map(item |
    sfe(col_Function_1__String_1__BasicColumnSpecification_1_, $genericType, [$item.first->iv(), $item.second->iv()]);
  );

  let iv = iv($args);

  appendTdsFunc($context.expression->toOne(), extend_TabularDataSet_1__BasicColumnSpecification_MANY__TabularDataSet_1_, list($iv));

}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processSelect(select: Select[1], context: SqlTransformContext[1]):FunctionExpression[1]
{

  debug('processSelect');
  if (isSelectStar($select),
    | $context.expression->toOne(),
    | if (allColumnsSimpleSelect($select),
        | processSelectToRenameAndRestrict($select, $context),
        | processSelectToProject($select, $context)));

}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::anyColumnAggregate(select: Select[1]):Boolean[1]
{
  $select.selectItems->exists(si | $si->isSelectItemAggregate());
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::isSelectItemAggregate(si: SelectItem[1]):Boolean[1]
{
  $si->instanceOf(SingleColumn) && isExpressionAggregate($si->cast(@SingleColumn).expression)
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::isExpressionAggregate(e:meta::external::query::sql::metamodel::Expression[1]):Boolean[1]
{
  $e->instanceOf(FunctionCall) && functionProcessor($e->cast(@FunctionCall).name).isAggregate
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::isSelectItemWindow(si: SelectItem[1]):Boolean[1]
{
  $si->instanceOf(SingleColumn)
  && $si->cast(@SingleColumn).expression->instanceOf(FunctionCall)
  && $si->cast(@SingleColumn).expression->cast(@FunctionCall).window->isNotEmpty()
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::isSelectItemColumnReference(si:SelectItem[1]):Boolean[1]
{
  $si->instanceOf(SingleColumn) && $si->cast(@SingleColumn).expression->instanceOf(QualifiedNameReference)
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processSelectToProject(select: Select[1], context: SqlTransformContext[1]):FunctionExpression[1]
{
  debug('processSelectToProject');
  let genericType = ^GenericType(rawType = TDSRow);

  let args = $select.selectItems->processSelectItems($context)->map(item |
    sfe(col_Function_1__String_1__BasicColumnSpecification_1_, $genericType, [$item.first->iv(), $item.second->iv()]);
  );

  let iv = iv($args);

  appendTdsFunc($context.expression->toOne(), project_TabularDataSet_1__ColumnSpecification_MANY__TabularDataSet_1_, list($iv));
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processSelectToRenameAndRestrict(select: Select[1], context: SqlTransformContext[1]):FunctionExpression[1]
{
  debug('processSelectToRestrict');

  let rename = $select.selectItems->cast(@SingleColumn)->processRename($context);
  processRestrict($select.selectItems->processSelectItems($context).second, ^$context(expression = $rename));
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processRestrict(columns:String[*], context: SqlTransformContext[1]):FunctionExpression[1]
{
  appendTdsFunc($context.expression->toOne(), restrict_TabularDataSet_1__String_MANY__TabularDataSet_1_, list(iv($columns)));
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processRename(selectItems:SingleColumn[*], context: SqlTransformContext[1]):FunctionExpression[1]
{
  let typeArguments = [^GenericType(rawType = String), ^GenericType(rawType = String)];

  let renames = $selectItems->map(si |
    let defaultName = extractNameFromExpression($si.expression);

    if ($si.alias->isNotEmpty() && $si.alias != $defaultName,
      | sfe(pair_U_1__V_1__Pair_1_, ^GenericType(rawType = Pair, typeArguments = $typeArguments), $typeArguments, [$si.expression->extractNameFromExpression()->iv(), $si.alias->toOne()->iv()]),
      | []);
  );

  if ($renames->isNotEmpty(),
                | appendTdsFunc($context.expression->toOne(), renameColumns_TabularDataSet_1__Pair_MANY__TabularDataSet_1_, list($renames));,
                | $context.expression->toOne());
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::isSelectStar(select: Select[1]):Boolean[1]
{
  $select.selectItems->forAll(si | $si->instanceOf(AllColumns));
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::allColumnsSimpleSelect(select: Select[1]):Boolean[1]
{
  $select.selectItems->forAll(si | $si->instanceOf(SingleColumn) && $si->cast(@SingleColumn).expression->instanceOf(QualifiedNameReference));
}


function <<access.private>> meta::external::query::sql::transformation::queryToPure::processHaving(expression: meta::external::query::sql::metamodel::Expression[0..1], select:Select[1], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processHaving');
  let expContext = rowExpressionContext();

  if ($expression->isEmpty(), | $context, | createFilter($expression->toOne(), ^$expContext(processFunctionCallAsIdentifier = true), $context));
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processFrom(relations: Relation[*], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processFrom');
  // TODO: fix logic for multiple tables in from
  $relations->match([
      relation: Relation[1] | processRelation($relation, $context),
      r: Relation[*] | fail('Not yet supported'); $context;
  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processRelation(relation: Relation[1], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processRelation');
  $relation->match([
        join: Join[1] | processJoin($join, $context),
        q: QueryBody[1] | processQueryBody($q, $context),
        a: AliasedRelation[1] | processAliasedRelation($a, $context),
        r: Relation[0..1] | fail('Not yet supported'); $context;
  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::relationName(relation: Relation[1]): String[1]
{
  $relation->match([
        table: Table[1] | $table.name.parts->joinStrings('.'),
        aliased:AliasedRelation[1] | $aliased.alias,
        r:Relation[0..1] | fail('Not yet supported'); '';
  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processAliasedRelation(aliased: AliasedRelation[1], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processAliasedRelation');
  let processed = processRelation($aliased.relation, $context);

  ^$processed(name = $aliased.alias);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processJoin(join: Join[1], context: SqlTransformContext[1]): SqlTransformContext[1]
{

  debug('processJoin');
  let left = wrapWithFrom(processRelation($join.left, $context));
  let right = wrapWithFrom(processRelation($join.right, $context));

  let leftName = $join.left->relationName();
  let rightName = $join.right->relationName();

  let newContext = ^$context(contexts = [
    pair($leftName, $left),
    pair($rightName, $right)
  ]->newMap());

  let row1 = ^VariableExpression(multiplicity = PureOne, name = 'row1', genericType = ^GenericType(rawType = TDSRow));
  let row2 = ^VariableExpression(multiplicity = PureOne, name = 'row2', genericType = ^GenericType(rawType = TDSRow));

  let expContext = expressionContext([], newMap([
    pair($leftName, $row1),
    pair($rightName, $row2)
  ]));

   let func = $join.criteria->match([
    o:JoinOn[1] | join_TabularDataSet_1__TabularDataSet_1__JoinType_1__String_$1_MANY$__TabularDataSet_1_,
    u:JoinUsing[1] | join_TabularDataSet_1__TabularDataSet_1__JoinType_1__Function_1__TabularDataSet_1_
  ]);

  let parameters = $join.criteria->match([
    o:JoinOn[1] |
      let expression = processExpression($o.expression, $expContext, $newContext);
      let functionType = ^FunctionType(parameters = [$row1, $row2], returnMultiplicity = PureOne, returnType = ^GenericType(rawType = Boolean));
      let lambda = lambda($functionType, $expression);
      iv($lambda);,
    u:JoinUsing[1] | iv($u.columns)
  ]);

  let joinType = getJoinType($join.type);
  let joinTypeExpression = processExtractEnumValue(meta::relational::metamodel::join::JoinType, $joinType.name->toOne());

  let newExp = sfe($func, [$left.expression->toOne(), $right.expression->toOne(), $joinTypeExpression]->concatenate($parameters));

  ^$newContext(expression = $newExp);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::getJoinType(joinType:JoinType[1]):meta::relational::metamodel::join::JoinType[1]
{
  [
    pair(JoinType.LEFT, meta::relational::metamodel::join::JoinType.LEFT_OUTER),
    pair(JoinType.RIGHT, meta::relational::metamodel::join::JoinType.RIGHT_OUTER),
    pair(JoinType.INNER, meta::relational::metamodel::join::JoinType.INNER)
  ]->getValue($joinType);
}

function meta::external::query::sql::transformation::queryToPure::processExtractEnumValue(enumeration:Enumeration<Enum>[1], value:String[1]):FunctionExpression[1]
{
  sfe(extractEnumValue_Enumeration_1__String_1__T_1_, [iv($enumeration), iv($value)]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::getInterval(name:String[1]):DurationUnit[1]
{
  DurationUnit->extractEnumValue($name->toUpper());
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processOrderBy(sortItems: meta::external::query::sql::metamodel::SortItem[*], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processOrderBy');
  let sortInformation = $sortItems->map(si| createSortItemFunction($si));

  let newExp = if ($sortInformation->isEmpty(),
    | $context.expression,
    | appendTdsFunc($context.expression->toOne(), sort_TabularDataSet_1__SortInformation_MANY__TabularDataSet_1_, list($sortInformation)));

  ^$context(expression = $newExp);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::createSortItemFunction(si:SortItem[1]):FunctionExpression[1]
{
    let column = extractNameFromExpression($si.sortKey);
    let sortFunc = [
      pair(SortItemOrdering.ASCENDING, asc_String_1__SortInformation_1_),
      pair(SortItemOrdering.DESCENDING, desc_String_1__SortInformation_1_)
    ]->getValue($si.ordering);

    sfe($sortFunc, $column->iv());
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processLimit(rowCount: meta::external::query::sql::metamodel::Expression[0..1], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processLimit');
  let expContext = rowExpressionContext();

  let newExp = $rowCount->match([
    e: meta::external::query::sql::metamodel::Expression[1] |
      let limitValue = processExpression($e, $expContext, $context);
      appendTdsFunc($context.expression->toOne(), limit_TabularDataSet_1__Integer_1__TabularDataSet_1_, list($limitValue));,
    e: meta::external::query::sql::metamodel::Expression[0..1] | $context.expression
  ]);

  ^$context(expression = $newExp);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processTableSubquery(tsq: TableSubquery[1], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processTableSubquery');
  processQuery($tsq.query, $context);
}

function meta::external::query::sql::transformation::queryToPure::extractSourceArguments(expressions:meta::external::query::sql::metamodel::Expression[*]):SQLSourceArgument[*]
{
  $expressions->map(e | $e->extractSourceArgument($expressions->indexOf($e), []));
}

function meta::external::query::sql::transformation::queryToPure::extractSourceArgument(expression:meta::external::query::sql::metamodel::Expression[1], index:Integer[1], name:String[0..1]):SQLSourceArgument[0..1]
{
  $expression->match([
    n:NamedArgumentExpression[1] | $n.expression->extractSourceArgument($index, $n.name),
    s:StringLiteral[1] | ^SQLSourceArgument(value = $s.value, name = $name, index = $index),
    i:IntegerLiteral[1] | ^SQLSourceArgument(value = $i.value, name = $name, index = $index),
    d:DoubleLiteral[1] | ^SQLSourceArgument(value = $d.value, name = $name, index = $index),
    l:LongLiteral[1] | ^SQLSourceArgument(value = $l.value, name = $name, index = $index),
    n:NullLiteral[1] | ^SQLSourceArgument(name = $name, index = $index),
    b:BooleanLiteral[1] | ^SQLSourceArgument(value = $b.value, name = $name, index = $index),
    a:ArrayLiteral[1] | ^SQLSourceArgument(value = $a.values, name = $name, index = $index),
    e:meta::external::query::sql::metamodel::Expression[1] | fail('only literal values supported'); [];
  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processTableFunction(tableFunc: TableFunction[1], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processTableFunction');

  assertEquals(1, $tableFunc.functionCall.name.parts->size(), | 'table function cannot have multi part name');
  assert($tableFunc.functionCall.arguments->size() > 0, | 'table func must have at least one argument');

  let type = $tableFunc.functionCall.name.parts->at(0);
  let arguments = $tableFunc.functionCall.arguments->extractSourceArguments();

  let source = $context.source($type, $arguments);

  //TODO handle multi expression
  let expression = $source.func.expressionSequence->evaluateAndDeactivate()->toOne()->cast(@FunctionExpression);

  ^$context(expression = $expression, source = $source);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processTable(table: Table[1], context: SqlTransformContext[1]): SqlTransformContext[1]
{
  debug('processTable');
  assertEquals(2, $table.name.parts->size(), 'Expected table name to contain two parts <schema>.<name>, but got ' + $table.name.parts->joinStrings('.'));

  let type = $table.name.parts->at(0);
  let id = $table.name.parts->at(1);

  processTableFunction(^TableFunction(functionCall = ^FunctionCall(name = ^QualifiedName(parts = $type),
                                                                  distinct = false,
                                                                  arguments = ^StringLiteral(value=$id, quoted = false))), $context);
}

//TODO we can be much smarter by understanding whether x-store is in play and not wrap if true.
function <<access.private>> meta::external::query::sql::transformation::queryToPure::wrapWithFrom(context:SqlTransformContext[1]):SqlTransformContext[1]
{
  if ($context.source->isNotEmpty(), | wrapWithFrom($context.expression->toOne(), $context.source->toOne(), $context), | $context)
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::wrapWithFrom(expression:FunctionExpression[1], source:SQLSource[1], context:SqlTransformContext[1]):SqlTransformContext[1]
{

let executionContext = if ($source.executionOptions->isNotEmpty(), 
                        | ^ExecutionOptionContext(executionOptions = $source.executionOptions),
                        | $source.executionContext);

  if ($context.scopeWithFrom->isFalse(), | $context, |
    let scopedExpression = if ($source.mapping->isNotEmpty() && $source.runtime->isNotEmpty(),
      | if ($executionContext->isNotEmpty(),
          | sfe(meta::pure::mapping::from_TabularDataSet_1__Mapping_1__Runtime_1__ExecutionContext_1__TabularDataSet_1_,
                [$expression, iv($source.mapping->toOne()), iv($source.runtime->toOne()), iv($executionContext)]),
          | sfe(meta::pure::mapping::from_TabularDataSet_1__Mapping_1__Runtime_1__TabularDataSet_1_,
                [$expression, iv($source.mapping->toOne()), iv($source.runtime->toOne())])),
      | $expression);

    ^$context(expression = $scopedExpression);
  );
}



function <<access.private>> meta::external::query::sql::transformation::queryToPure::processSelectItems(selectItems: SelectItem[*], context: SqlTransformContext[1]): Pair<LambdaFunction<Any>, String>[*]
{
  debug('processSelectItems');
  let expContext = rowExpressionContext();

  $selectItems->match([
    a:AllColumns[1] |
      let columns = $context.columns();
      $columns->map(c |
        let expression = createTdsColumn($c, $expContext.var, $context);
        let functionType = ^FunctionType(parameters = $expContext.defaultVar, returnMultiplicity = PureOne, returnType = $expression.genericType->toOne());
        let lambda = lambda($functionType, $expression);
        pair($lambda, $c.name);
      );,
    s:SelectItem[*] |
      $s->map(si | processSelectItem($si, $context))
  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processSelectItem(selectItem: SelectItem[1], context: SqlTransformContext[1]): Pair<LambdaFunction<Any>, String>[1]
{
  debug('processSelectItem');
  let expContext = rowExpressionContext();

  $selectItem->match([
    s:SingleColumn[1] |
      let name = extractNameFromSingleColumn($s);
      let expression = $s.expression->processExpression($expContext, $context)->toOne();

      let functionType = ^FunctionType(parameters = $expContext.defaultVar, returnMultiplicity = PureOne, returnType = $expression.genericType);

      let lambda = lambda($functionType, $expression);
      pair($lambda, $name);,
    a:SelectItem[1] |
      fail('Unsupported SelectItem type');
      pair(lambda(^FunctionType(returnMultiplicity = PureOne, returnType = ^GenericType(rawType = Any)), iv(1)), '');
  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::extractNameFromQualifiedName(qualifiedName:QualifiedName[1]):String[1]
{
  $qualifiedName.parts->last()->joinStrings('.');
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::extractNameFromSingleColumn(column:SingleColumn[1]):String[1]
{
  if ($column.alias->isNotEmpty(), | $column.alias->toOne(), | extractNameFromExpression($column.expression))
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::extractNameFromExpression(expression:meta::external::query::sql::metamodel::Expression[1]):String[1]
{
  $expression->match([
    q:QualifiedNameReference[1] | $q.name->extractNameFromQualifiedName(),
    l:LongLiteral[1] | $l.value->toString(),
    b:BooleanLiteral[1] | $b.value->toString(),
    f:DoubleLiteral[1] | $f.value->toString(),
    i:IntegerLiteral[1] | $i.value->toString(),
    s:StringLiteral[1] | $s.value,
    a:ArrayLiteral[1] | $a.values->map(v | extractNameFromExpression($v))->joinStrings(','),
    n:NullLiteral[1] | 'NULL',
    f:FunctionCall[1] | $f.name->extractNameFromQualifiedName() + '(' + $f.arguments->map(a | $a->extractNameFromExpression())->joinStrings(', ') + ')',
    c:CurrentTime[1] |
      let param = if ($c.precision->isEmpty(), | '', | '(' + $c.precision->toOne()->toString() + ')');
      [
        pair(CurrentTimeType.TIME, 'CURRENT_TIME'),
        pair(CurrentTimeType.TIMESTAMP, 'CURRENT_TIMESTAMP'),
        pair(CurrentTimeType.DATE, 'CURRENT_DATE')
      ]->getValue($c.type) + $param;,
    e:meta::external::query::sql::metamodel::Expression[1] | ''
  ])
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::extractAliasFromColumn(column:SingleColumn[1]):Pair<String, String>[1]
{
  let expression =  extractNameFromExpression($column.expression);
  let alias = if ($column.alias->isNotEmpty(), | $column.alias->toOne(), | extractNameFromExpression($column.expression));
  pair($expression, $alias);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processWhere(expression: meta::external::query::sql::metamodel::Expression[0..1], context: SqlTransformContext[1]):SqlTransformContext[1]
{
  debug('processWhere');
  if ($expression->isEmpty(), | $context, | createFilter($expression->toOne(), $context));
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::rowExpressionContext():SqlTransformExpressionContext[1]
{
  expressionContext(^VariableExpression(genericType = ^GenericType(rawType = TDSRow),name = 'row', multiplicity = PureOne), ^Map<String, VariableExpression>());
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::expressionContext(defaultVar:VariableExpression[0..1], vars:Map<String, VariableExpression>[1]):SqlTransformExpressionContext[1]
{
  let expContext = ^SqlTransformExpressionContext(defaultVar = $defaultVar, varMap = $vars, processFunctionCallAsIdentifier = false);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::createFilter(expression: meta::external::query::sql::metamodel::Expression[1], context: SqlTransformContext[1]):SqlTransformContext[1]
{
  createFilter($expression, rowExpressionContext(), $context);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::createFilter(expression: meta::external::query::sql::metamodel::Expression[1], expContext:SqlTransformExpressionContext[1], context: SqlTransformContext[1]):SqlTransformContext[1]
{
  let filterExp = processExpression($expression, $expContext, $context)->cast(@SimpleFunctionExpression);

  let functionType = ^FunctionType(parameters = $expContext.defaultVar, returnMultiplicity = PureOne, returnType = ^GenericType(rawType = Boolean));

  let lambda = lambda($functionType, $filterExp);

  let newExp = appendTdsFunc($context.expression->toOne(), filter_TabularDataSet_1__Function_1__TabularDataSet_1_, list($lambda));

  ^$context(expression = $newExp);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processExpressions(expressions: meta::external::query::sql::metamodel::Expression[*], expContext:SqlTransformExpressionContext[1], context: SqlTransformContext[1]):ValueSpecification[*]
{
  $expressions->map(e | processExpression($e, $expContext, $context))
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processExpression(expression: meta::external::query::sql::metamodel::Expression[1], expContext:SqlTransformExpressionContext[1], context: SqlTransformContext[1]):ValueSpecification[1]
{
  debug('processExpression');
  let exp = $expression->match([
    l:Literal[1] | processLiteral($l, $context),
    c:ComparisonExpression[1] | processComparisonExpression($c, $expContext, $context),
    l:LogicalBinaryExpression[1] | processLogicalBinaryExpression($l, $expContext, $context),
    n:NotExpression[1] | processNotExpression($n, $expContext, $context),
    n:NegativeExpression[1] | processNegativeExpression($n, $expContext, $context),
    a:ArithmeticExpression[1] | processArithmeticExpression($a, $expContext, $context),
    f:FunctionCall[1] | processFunctionCall($f, $expContext, $context),
    s:SimpleCaseExpression[1] | processSimpleCaseExpression($s, $expContext, $context),
    s:SearchedCaseExpression[1] | processSearchedCaseExpression($s, $expContext, $context),
    c:Cast[1] | processCast($c, $expContext, $context),
    q:QualifiedNameReference[1] | processQualifiedNameReference($q, $expContext, $context),
    i:InPredicate[1] | processInPredicate($i, $expContext, $context),
    i:InListExpression[1] | processInListExpression($i, $expContext, $context),
    n:IsNullPredicate[1] | processIsNullPredicate($n, $expContext, $context),
    n:IsNotNullPredicate[1] | processIsNotNullPredicate($n, $expContext, $context),
    c:CurrentTime[1] | processCurrentTime($c, $expContext, $context),
    e:Extract[1] | processExtract($e, $expContext, $context),
    n:NamedArgumentExpression[1] | fail('Named Argument Expressions only supported within function calls'); iv(1);,
    e:meta::external::query::sql::metamodel::Expression[*] | fail('Expression type not yet supported'); iv(1);
  ])->evaluateAndDeactivate();
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processExtract(e:Extract[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):ValueSpecification[1]
{
  let part = [
    pair(ExtractField.YEAR, 'year'),
    pair(ExtractField.QUARTER, 'quarter'),
    pair(ExtractField.MONTH, 'month'),
    pair(ExtractField.WEEK, 'week'),
    pair(ExtractField.DOW, 'dow'),
    pair(ExtractField.DAY, 'day'),
    pair(ExtractField.HOUR, 'hour'),
    pair(ExtractField.MINUTE, 'minute'),
    pair(ExtractField.SECOND, 'second')
  ]->getValue($e.field);

  processFunctionCall(^FunctionCall(name = ^QualifiedName(parts = 'date_part'), arguments = [^StringLiteral(value = $part, quoted = false), $e.expression], distinct = false), $expContext, $context);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processCurrentTime(c:CurrentTime[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):ValueSpecification[1]
{
  debug('processCurrentTime');
  assert($c.precision->isEmpty(), | ' precision currently unsupported');

  let func = [
    pair(CurrentTimeType.DATE, today__StrictDate_1_),
    pair(CurrentTimeType.TIME, now__DateTime_1_),
    pair(CurrentTimeType.TIMESTAMP, now__DateTime_1_)
  ]->getValue($c.type);

  sfe($func, []);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processIsNullPredicate(n:IsNullPredicate[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):ValueSpecification[1]
{
  debug('processIsNullPredicate');
  let value = $n.value->processExpression($expContext, $context);
  sfe(isEmpty_Any_MANY__Boolean_1_, $value);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processIsNotNullPredicate(n:IsNotNullPredicate[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):ValueSpecification[1]
{
  debug('processIsNotNullPredicate');
  let value = $n.value->processExpression($expContext, $context);
  sfe(isNotEmpty_Any_MANY__Boolean_1_, $value);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processInPredicate(i:InPredicate[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):ValueSpecification[1]
{
  debug('processInPredicate');
  let value = $i.value->processExpression($expContext, $context);
  let values = $i.valueList->processExpression($expContext, $context);
  sfe(in_Any_1__Any_MANY__Boolean_1_, [$value, $values]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processInListExpression(i:InListExpression[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):ValueSpecification[1]
{
  debug('processInListExpression');
  $i.values->map(v | processExpression($v, $expContext, $context))->iv();
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processQualifiedNameReference(q:QualifiedNameReference[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):ValueSpecification[1]
{
  debug('processQualififedNameReference');
  createTdsColumn($q.name, $expContext.var($q.name), $context);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processCast(c:Cast[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processCast');

  $c.expression->match([
    n:NullLiteral[1] | processCastAsCast($c, $expContext, $context),
    e:meta::external::query::sql::metamodel::Expression[1] | processCastAsParse($c, $expContext, $context)
  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processCastAsParse(c:Cast[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processCastAsParse');

  let expression = processExpression($c.expression, $expContext, $context);

  let func = [
    pair('VARCHAR', toString_Any_1__String_1_),
    pair('TEXT', toString_Any_1__String_1_),
    pair('DATE', parseDate_String_1__Date_1_),
    pair('INTEGER', parseInteger_String_1__Integer_1_),
    pair('BIGINT', parseInteger_String_1__Integer_1_),
    pair('DOUBLE', parseFloat_String_1__Float_1_),
    pair('BOOLEAN', parseBoolean_String_1__Boolean_1_),
    pair('NUMERIC', parseDecimal_String_1__Decimal_1_),
    pair('TIMESTAMP', parseDate_String_1__Date_1_)
  ]->getValue($c.type.name->toUpper());

  sfe($func, $expression);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processCastAsCast(c:Cast[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processCastAsCast');

  let expression = processExpression($c.expression, $expContext, $context);

  let type = getCastType($c);
  let genericType = ^GenericType(rawType = $type);

  sfe(cast_Any_m__T_1__T_m_, $genericType, [], [$expression, ^InstanceValue(genericType = $genericType, multiplicity = PureOne)]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::getCastType(c:Cast[1]):Type[1]
{
  [
    pair('VARCHAR', String),
    pair('TEXT', String),
    pair('DATE', Date),
    pair('INTEGER', Integer),
    pair('BIGINT', Integer),
    pair('DOUBLE', Float),
    pair('BOOLEAN', Boolean),
    pair('NUMERIC', Decimal),
    pair('TIMESTAMP', DateTime)
  ]->getValue($c.type.name->toUpper());
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processSearchedCaseExpression(s:SearchedCaseExpression[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processSearchedCaseExpression');
  let default = if ($s.defaultValue->isEmpty(),
                  | iv(Nil),
                  | $s.defaultValue->toOne()->processExpression($expContext, $context));

  $s.whenClauses->reverse()->fold({clause, else |
    processWhenClause($clause, $else, $expContext, $context);
  }, $default)->cast(@SimpleFunctionExpression);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processSimpleCaseExpression(s:SimpleCaseExpression[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processSimpleCaseExpression');
  let sce = ^SearchedCaseExpression(
    whenClauses = $s.whenClauses->map(wc | ^$wc(operand = ^ComparisonExpression(left = $s.operand, right = $wc.operand, operator = ComparisonOperator.EQUAL))),
    defaultValue = $s.defaultValue
  );

  processSearchedCaseExpression($sce, $expContext, $context);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processWhenClause(s:WhenClause[1], else:ValueSpecification[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processWhenClause');
  let condition = $s.operand->processExpression($expContext, $context);
  let truth = $s.result->processExpression($expContext, $context);

  let functionReturnType = ^FunctionType(returnMultiplicity = PureOne, returnType = $truth.genericType);

  let truthLambda = lambda($functionReturnType, $truth);
  let elseLambda = lambda($functionReturnType, $else);

  let genericType = if ($truth.genericType.rawType == Nil, | $else.genericType, | $truth.genericType);

  sfe(if_Boolean_1__Function_1__Function_1__T_m_, $genericType, [], [$condition, $truthLambda->iv(), $elseLambda->iv()]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::createTdsColumn(qualifiedName:QualifiedName[1], var:VariableExpression[1], context: SqlTransformContext[1]):ValueSpecification[1]
{

  if ($qualifiedName.parts->isEmpty(),
    | $var,
    | let column = $context.columnByNameParts($qualifiedName.parts, true);
      createTdsColumn($column->toOne(), $var, $context);
  );
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::createTdsColumn(name:String[1], var:VariableExpression[1], context: SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  createTdsColumn($context.columnByName($name, true)->toOne(), $var, $context);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::createTdsColumn(column:TDSColumn[1], var:VariableExpression[1], context: SqlTransformContext[1]):SimpleFunctionExpression[1]
{
   let properties = newMap([
      pair(String, {x:TDSRow[1] | $x.getString('')}),
      pair(Integer, {x:TDSRow[1] | $x.getInteger('')}),
      pair(Float, {x:TDSRow[1] | $x.getFloat('')}),
      pair(Decimal, {x:TDSRow[1] | $x.getDecimal('')}),
      pair(Number, {x:TDSRow[1] | $x.getFloat('')}),
      pair(Date, {x:TDSRow[1] | $x.getDate('')}),
      pair(DateTime, {x:TDSRow[1] | $x.getDateTime('')}),
      pair(StrictDate, {x:TDSRow[1] | $x.getStrictDate('')}),
      pair(Boolean, {x:TDSRow[1] | $x.getBoolean('')}),
      pair(Enum, {x:TDSRow[1] | $x.getEnum('')}),
      pair(Any, {x:TDSRow[1] | $x.get('')})
   ]->map(p | pair($p.first, $p.second.expressionSequence->evaluateAndDeactivate()->at(0)->cast(@SimpleFunctionExpression).func->cast(@AbstractProperty<Any>))));

   let type = $column.type->toOne();

   let property = $properties->get($type->match([
      c:Class<Any>[1] | Any,
      e:Enumeration<Any>[1] | Enum,
      p:PrimitiveType[1] | $p
   ]));

   assertEquals(1, $property->size(), | 'no properties found for type ' + $type->toString());

   sfe($property->toOne(), [$var, $column.name->iv()])->evaluateAndDeactivate();
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processFunctionCall(f:FunctionCall[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processFunctionCall');

  assert($f.window->isEmpty(), | 'window functions not currently supported');

  if ($expContext.processFunctionCallAsIdentifier,
    | processFunctionCallAsIdentifier($f, $expContext, $context),
    | processFunctionCallAsFunction($f, $expContext, $context));
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processFunctionCallAsIdentifier(f:FunctionCall[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processFunctionCallAsIdentifier');
  let name = extractNameFromExpression($f);
  let col = $context.columnByName($name, true);

  createTdsColumn($col.name->toOne(), $expContext.var, $context);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processFunctionCallAsFunction(f:FunctionCall[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processFunctionCallAsFunction');
  let args = $f.arguments->map(a | $a->processExpression($expContext, $context));

  if ($f.distinct, 
    | processFunctionCallAsFunction(^$f(distinct = false, arguments = ^FunctionCall(name = ^QualifiedName(parts = 'distinct'), arguments = $f.arguments, distinct = false)), $expContext, $context), 
    | functionCall($f.name, $args));
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::functionCall(name:String[1], args:ValueSpecification[*]):SimpleFunctionExpression[1]
{
  functionCall(^QualifiedName(parts = $name), $args);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::functionCall(name:QualifiedName[1], args:ValueSpecification[*]):SimpleFunctionExpression[1]
{
  let processor = functionProcessor($name);
  $processor.transform->eval($args->evaluateAndDeactivate());
}

function meta::external::query::sql::transformation::queryToPure::functionProcessor(name:QualifiedName[1]):FunctionProcessor[1]
{
  assertEquals(1, $name.parts->size(), | 'function name has more than 1 part ' + $name->extractNameFromQualifiedName());
  functionProcessor($name.parts->at(0));
}

function meta::external::query::sql::transformation::queryToPure::functionProcessor(name:String[1]):FunctionProcessor[1]
{
  let processor = functionProcessors()->filter(p | $p.name == $name->toLower());

  assertEquals(1, $processor->size(), | 'no handler found for function ' + $name);

  $processor->toOne();
}

function meta::external::query::sql::transformation::queryToPure::functionProcessors():FunctionProcessor[*]
{
  [
      processor('count', count_Any_MANY__Integer_1_, true),
      processor('distinct', distinct_T_MANY__T_MANY_, true),

      //MATH
      processor('abs', abs_Number_1__Number_1_, false),
      processor('acos', acos_Number_1__Float_1_, false),
      processor('asin', asin_Number_1__Float_1_, false),
      processor('atan', atan_Number_1__Float_1_, false),
      processor('atan2', atan2_Number_1__Number_1__Float_1_, false),
      processor('avg', average_Number_MANY__Float_1_, true),
      processor('ceil', ceiling_Number_1__Integer_1_, false),
      processor('ceiling', ceiling_Number_1__Integer_1_, false),
      processor('cos', cos_Number_1__Float_1_, false),
      processor('degrees', toDegrees_Number_1__Float_1_, false),
      processor('div', divide_Number_1__Number_1__Float_1_, false),
      processor('exp', exp_Number_1__Float_1_, false),
      processor('floor', floor_Number_1__Integer_1_, false),
      processor('ln', log_Number_1__Float_1_, false),
      processor('mod', rem_Number_1__Number_1__Number_1_, false),
      processor('pi', pi__Float_1_, false),
      processor('power', pow_Number_1__Number_1__Number_1_, false),
      processor('radians', toRadians_Number_1__Float_1_, false),
      processor('round', false, {args |
        assert(($args->size() == 1) || ($args->size() == 2), 'incorrect number of args for round');
        let func = if ($args->size() == 1, | round_Number_1__Integer_1_, | round_Decimal_1__Integer_1__Decimal_1_);

        sfe($func, $args);
      }),
      processor('sin', sin_Number_1__Float_1_, false),
      processor('stddev_pop', stdDevPopulation_Number_MANY__Number_1_, true),
      processor('stddev_samp', stdDevSample_Number_MANY__Number_1_, true),
      processor('stddev', stdDevSample_Number_MANY__Number_1_, true),
      processor('sum', sum_Number_MANY__Number_1_, true),
      processor('sqrt', sqrt_Number_1__Float_1_, false),
      processor('tan', tan_Number_1__Float_1_, false),


      //STRING
      processor('string_agg', true, {args |
        let func = [
          pair(1, joinStrings_String_MANY__String_1_),
          pair(2, joinStrings_String_MANY__String_1__String_1_)
        ]->getValue($args->size());

        sfe($func, $args);
      }),
      processor('char_length', length_String_1__Integer_1_, false),
      processor('concat', plus_String_MANY__String_1_, false),
      processor('lower', toLower_String_1__String_1_, false),
      processor('regexp_like', matches_String_1__String_1__Boolean_1_, false),
      processor('replace', replace_String_1__String_1__String_1__String_1_, false),
      processor('starts_with', startsWith_String_1__String_1__Boolean_1_, false),
      processor('strpos', indexOf_String_1__String_1__Integer_1_, false),
      processor('substring', false, processSubstring_ValueSpecification_MANY__SimpleFunctionExpression_1_),
      processor('substr', false, processSubstring_ValueSpecification_MANY__SimpleFunctionExpression_1_),
      processor('btrim', false, {args |
        assert($args->size() == 1 || $args->size() == 2, 'incorrect number of args');
        assert($args->size() == 1 || ($args->at(1)->reactivate() == ' '), 'only empty string trim is currently supported');

        sfe(trim_String_1__String_1_, $args->at(0));
      }),
      processor('upper', toUpper_String_1__String_1_, false),

      //DATE
      processor('date_trunc', false, {args |
        assertEquals(2, $args->size(), 'incorrect number of args');
        let part = $args->at(0);
        let value = $part->reactivate()->toOne()->cast(@String);

        let func = [
          pair('year', firstDayOfYear_Date_1__Date_1_),
          pair('quarter', firstDayOfQuarter_Date_1__StrictDate_1_),
          pair('month', firstDayOfMonth_Date_1__Date_1_),
          pair('week', firstDayOfWeek_Date_1__Date_1_)
        ]->getValue($value->toLower());

        sfe($func, $args->at(1));
      }),
      processor('date_add', false, {args |
        assertEquals(3, $args->size(), 'incorrect number of args');
        let part = $args->at(0);
        let value = $part->reactivate()->toOne();

        let unit = [
          pair('year', DurationUnit.YEARS),
          pair('month', DurationUnit.MONTHS),
          pair('week', DurationUnit.WEEKS),
          pair('day', DurationUnit.DAYS),
          pair('hour', DurationUnit.HOURS),
          pair('minute', DurationUnit.MINUTES),
          pair('second', DurationUnit.SECONDS),
          pair('millisecond', DurationUnit.MILLISECONDS),
          pair('microsecond', DurationUnit.MICROSECONDS),
          pair('nanosecond', DurationUnit.NANOSECONDS)
        ]->getValue($value);

        let unitSfe = processExtractEnumValue(DurationUnit, $unit.name);

        sfe(adjust_Date_1__Integer_1__DurationUnit_1__Date_1_, [$args->at(2), $args->at(1), $unitSfe]);
      }),
      processor('date_part', false, {args |
        assertEquals(2, $args->size(), 'incorrect number of args');
        let part = $args->at(0);
        let value = $part->reactivate()->toOne()->cast(@String);

        let func = [
          pair('year', year_Date_1__Integer_1_),
          pair('quarter', quarterNumber_Date_1__Integer_1_),
          pair('month', monthNumber_Date_1__Integer_1_),
          pair('week', weekOfYear_Date_1__Integer_1_),
          pair('dow', dayOfWeekNumber_Date_1__Integer_1_),
          pair('day', dayOfMonth_Date_1__Integer_1_),
          pair('hour', hour_Date_1__Integer_1_),
          pair('minute', minute_Date_1__Integer_1_),
          pair('second', second_Date_1__Integer_1_)
        ]->getValue($value->toLower());

        sfe($func, $args->at(1));
      }),
      //WINDOW
      processor('row_number',  false, {args |
        sfe(meta::pure::functions::math::olap::rowNumber_Any_MANY__Map_1_, ^GenericType(rawType = Map, typeArguments = [^GenericType(rawType = Any), ^GenericType(rawType = Integer)]), [^GenericType(rawType = Any), ^GenericType(rawType = Integer)], $args)
      }),
      processor('dense_rank',  false, {args |
        sfe(meta::pure::functions::math::olap::denseRank_Any_MANY__Map_1_, ^GenericType(rawType = Map, typeArguments = [^GenericType(rawType = Any), ^GenericType(rawType = Integer)]), [^GenericType(rawType = Any), ^GenericType(rawType = Integer)], $args)
      }),
      processor('rank',  false, {args |
        sfe(meta::pure::functions::math::olap::rank_Any_MANY__Map_1_, ^GenericType(rawType = Map, typeArguments = [^GenericType(rawType = Any), ^GenericType(rawType = Integer)]), [^GenericType(rawType = Any), ^GenericType(rawType = Integer)], $args)
      })
  ]
}

function meta::external::query::sql::transformation::queryToPure::processSubstring(args:ValueSpecification[*]):SimpleFunctionExpression[1]
{
  assert($args->size() == 2 || $args->size() == 3, 'invalid number of args for substring');

  let func = if ($args->size() == 2, | substring_String_1__Integer_1__String_1_, | substring_String_1__Integer_1__Integer_1__String_1_);

  sfe($func, $args);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processNotExpression(n:NotExpression[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processNotExpression');
  let value = $n.value->processExpression($expContext, $context);

  sfe(not_Boolean_1__Boolean_1_, $value);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processNegativeExpression(n:NegativeExpression[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processNegativeExpression');
  let value = $n.value->processExpression($expContext, $context);

  sfe(minus_Number_MANY__Number_1_, $value);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::getLiteralType(literal:Literal[1]):Type[1]
{
  $literal->match([
    l:LongLiteral[1] | Integer,
    b:BooleanLiteral[1] | Boolean,
    d:DoubleLiteral[1] | Float,
    i:IntegerLiteral[1] | Integer,
    s:StringLiteral[1] | String,
    a:ArrayLiteral[1] | Any,
    n:NullLiteral[1] | Nil,
    i:IntervalLiteral[1] | Any,
    l:Literal[1] | Any
  ])
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::getExpressionType(e:meta::external::query::sql::metamodel::Expression[1], context:SqlTransformContext[1]):Type[1]
{
  $e->match([
    l:Literal[1] | getLiteralType($l),
    c:ComparisonExpression[1] | Boolean,
    l:LogicalBinaryExpression[1] | Boolean,
    n:NotExpression[1] | Boolean,
    n:NegativeExpression[1] | getExpressionType($n.value, $context),
    a:ArithmeticExpression[1] |
      let left = getExpressionType($a.left, $context);
      let right = getExpressionType($a.right, $context);
      if ($left == $right, | $left, | Any);
    ,
    f:FunctionCall[1] | Any,
    s:SimpleCaseExpression[1] | Any,
    s:SearchedCaseExpression[1] | Any,
    c:Cast[1] | getCastType($c),
    q:QualifiedNameReference[1] | $context.columnByNameParts($q.name.parts, true).type->toOne(),
    i:InPredicate[1] | Boolean,
    i:InListExpression[1] | Boolean,
    n:IsNullPredicate[1] | Boolean,
    n:IsNotNullPredicate[1] | Boolean,
    c:CurrentTime[1] | DateTime,
    e:Extract[1] | Integer,
    e:meta::external::query::sql::metamodel::Expression[1] | Any
  ]);
}


function <<access.private>> meta::external::query::sql::transformation::queryToPure::processArithmeticExpression(a:ArithmeticExpression[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processArithmeticExpression');

  let leftType = getExpressionType($a.left, $context);
  let rightType = getExpressionType($a.right, $context);

  let leftTypeNormalized = normalizeType($leftType);
  let rightTypeNormalized = normalizeType($rightType);

  if ($leftTypeNormalized == Date || $rightTypeNormalized == Date,
    | processDateArithmeticExpression($a, $leftTypeNormalized, $rightTypeNormalized, $expContext, $context),
    | processNumericArithmeticExpression($a, $expContext, $context));
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::normalizeType(t:Type[1]):Type[1]
{
  [
    pair(StrictDate, Date),
    pair(DateTime, Date),
    pair(Integer, Number),
    pair(Float, Number)
  ]->getValue($t, $t);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processNumericArithmeticExpression(a:ArithmeticExpression[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processNumericArithmeticExpression');

  let left = $a.left->processExpression($expContext, $context);
  let right = $a.right->processExpression($expContext, $context);

  [
    pair(ArithmeticType.ADD, | sfe(plus_Number_MANY__Number_1_, iv($left->concatenate($right)))),
    pair(ArithmeticType.SUBTRACT, | sfe(minus_Number_MANY__Number_1_, iv($left->concatenate($right)))),
    pair(ArithmeticType.MULTIPLY, | sfe(times_Number_MANY__Number_1_, iv($left->concatenate($right)))),
    pair(ArithmeticType.DIVIDE, | sfe(divide_Number_1__Number_1__Float_1_, [$left, $right])),
    pair(ArithmeticType.MODULUS, | sfe(mod_Integer_1__Integer_1__Integer_1_, [$left, $right]))
  ]->getValue($a.type)->eval();
}

//there is no concept in pure for multiplying dates/intervals so we simplify the expression in place.
function <<access.private>> meta::external::query::sql::transformation::queryToPure::simplifyDateArithmetic(e:meta::external::query::sql::metamodel::Expression[1]):meta::external::query::sql::metamodel::Expression[1]
{
  $e->match([
    a:ArithmeticExpression[1] |
      if ($a.left->instanceOf(IntegerLiteral) && $a.type == ArithmeticType.MULTIPLY && $a.right->instanceOf(IntervalLiteral),
        | multiplyIntervalLiteral($a.right->cast(@IntervalLiteral), $a.left->cast(@IntegerLiteral).value),
        | if ($a.right->instanceOf(IntegerLiteral) && $a.type == ArithmeticType.MULTIPLY && $a.left->instanceOf(IntervalLiteral),
          | multiplyIntervalLiteral($a.left->cast(@IntervalLiteral), $a.right->cast(@IntegerLiteral).value),
          | ^$a(left = $a.left->simplifyDateArithmetic(), right = $a.right->simplifyDateArithmetic()))),
    e:meta::external::query::sql::metamodel::Expression[1] | $e
  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::multiplyIntervalLiteral(interval:IntervalLiteral[1], multiplier:Integer[1]):IntervalLiteral[1]
{
  ^IntervalLiteral(years = multiplyIntervalLiteralValue($interval.years, $multiplier), months = multiplyIntervalLiteralValue($interval.months, $multiplier), weeks = multiplyIntervalLiteralValue($interval.weeks, $multiplier),
                  days = multiplyIntervalLiteralValue($interval.days, $multiplier), hours = multiplyIntervalLiteralValue($interval.hours, $multiplier), minutes = multiplyIntervalLiteralValue($interval.minutes, $multiplier),
                  seconds = multiplyIntervalLiteralValue($interval.seconds, $multiplier), ago = $interval.ago)
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::multiplyIntervalLiteralValue(value:Integer[0..1], multiplier:Integer[1]):Integer[0..1]
{
  if ($value->isNotEmpty(), | $value->toOne() * $multiplier, | $value);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processDateArithmeticExpression(a:ArithmeticExpression[1], leftTypeNormalized:Type[1], rightTypeNormalized:Type[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processDateArithmeticExpression');

  let simplified = simplifyDateArithmetic($a)->match([
    a:ArithmeticExpression[1] | $a,
    e:meta::external::query::sql::metamodel::Expression[1] | fail('date arithmetic expression not currently supported'); $a->cast(@ArithmeticExpression);
  ]);

  assert($simplified.type == ArithmeticType.ADD || $simplified.type == ArithmeticType.SUBTRACT, | 'arithmetic type ' + $simplified.type.name + ' not currently supported for dates');
  assert($leftTypeNormalized == Date, | 'left side of date arithmetic must be non interval date');
  assert($rightTypeNormalized == Number || $simplified.right->instanceOf(IntervalLiteral), | 'right side of date arithmetic must be numeric or interval');

  let left = $simplified.left->processExpression($expContext, $context);

  let negate = $simplified.type == ArithmeticType.SUBTRACT;

  if ($simplified.right->instanceOf(IntervalLiteral),
    |
      processIntervalToAdjust($left, $simplified.right->cast(@IntervalLiteral), $negate),
    |
      let right = $simplified.right->processExpression($expContext, $context);
      sfe(adjust_Date_1__Integer_1__DurationUnit_1__Date_1_, [$left, $right, processExtractEnumValue(DurationUnit, DurationUnit.DAYS.name)]);
  );
}


//TODO handle arg type
function <<access.private>> meta::external::query::sql::transformation::queryToPure::processComparisonExpression(c:ComparisonExpression[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{

  debug('processComparisonExpression');
  let left = $c.left->processExpression($expContext, $context);
  let right = $c.right->processExpression($expContext, $context);

  let func = [
    pair(ComparisonOperator.EQUAL, equal_Any_MANY__Any_MANY__Boolean_1_),
    pair(ComparisonOperator.NOT_EQUAL, equal_Any_MANY__Any_MANY__Boolean_1_),
    pair(ComparisonOperator.LESS_THAN, lessThan_Number_$0_1$__Number_$0_1$__Boolean_1_),
    pair(ComparisonOperator.LESS_THAN_OR_EQUAL, lessThanEqual_Number_$0_1$__Number_$0_1$__Boolean_1_),
    pair(ComparisonOperator.GREATER_THAN, greaterThan_Number_$0_1$__Number_$0_1$__Boolean_1_),
    pair(ComparisonOperator.GREATER_THAN_OR_EQUAL, greaterThanEqual_Number_$0_1$__Number_$0_1$__Boolean_1_)
  ]->getValue($c.operator);

  let sfe = sfe($func, [$left, $right]);

  if ($c.operator == ComparisonOperator.NOT_EQUAL, | sfe(not_Boolean_1__Boolean_1_, $sfe), | $sfe);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processLiteral(literal: Literal[1], context: SqlTransformContext[1]):ValueSpecification[1]
{
  debug('processLiteral');
  let expContext = rowExpressionContext();

  $literal->match([
    l:LongLiteral[1] | iv($l.value),
    b:BooleanLiteral[1] | iv($b.value),
    f:DoubleLiteral[1] | iv($f.value),
    i:IntegerLiteral[1] | iv($i.value),
    s:StringLiteral[1] | iv($s.value),
    a:ArrayLiteral[1] | iv($a.values->map(v | processExpression($v, $expContext, $context))),
    n:NullLiteral[1] | iv([]),
    i:IntervalLiteral[1] | fail('interval literal only supported in certain contexts'); iv([]);

  ]);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processIntervalToAdjust(input:ValueSpecification[1], i:IntervalLiteral[1], negate:Boolean[1]):SimpleFunctionExpression[1]
{
  let ago = $i.ago->isTrue() || $negate;

  processIntervalLiteralValue(
    processIntervalLiteralValue(
      processIntervalLiteralValue(
        processIntervalLiteralValue(
          processIntervalLiteralValue(
            processIntervalLiteralValue(
              processIntervalLiteralValue($input,
               $i.years, DurationUnit.YEARS, $ago),
               $i.months, DurationUnit.MONTHS, $ago),
               $i.weeks, DurationUnit.WEEKS, $ago),
               $i.days, DurationUnit.DAYS, $ago),
               $i.hours, DurationUnit.HOURS, $ago),
               $i.minutes, DurationUnit.MINUTES, $ago),
               $i.seconds, DurationUnit.SECONDS, $ago)->cast(@SimpleFunctionExpression);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processIntervalLiteralValue(input:ValueSpecification[1], amount:Integer[0..1], unit:DurationUnit[1], ago:Boolean[1]):ValueSpecification[1]
{
  if ($amount->isNotEmpty(),
    |
      let adjustedAmount = if ($ago, | minus($amount), | $amount);
      sfe(adjust_Date_1__Integer_1__DurationUnit_1__Date_1_, [$input, iv($adjustedAmount->toOne()), processExtractEnumValue(DurationUnit, $unit.name)]);,
    | $input)
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processLogicalBinaryExpression(l:LogicalBinaryExpression[1], expContext:SqlTransformExpressionContext[1], context:SqlTransformContext[1]):SimpleFunctionExpression[1]
{
  debug('processLogicalBinaryExpression');
  let left = $l.left->processExpression($expContext, $context);
  let right = $l.right->processExpression($expContext, $context);

  let func = [
    pair(LogicalBinaryType.AND, and_Boolean_1__Boolean_1__Boolean_1_),
    pair(LogicalBinaryType.OR, or_Boolean_1__Boolean_1__Boolean_1_)
  ]->getValue($l.type);

  sfe($func, [$left, $right]);
}


function <<access.private>> meta::external::query::sql::transformation::queryToPure::appendTdsFunc(func: FunctionExpression[1], execFunc: meta::pure::metamodel::function::Function<Any>[1], args: List<Any>[*]): FunctionExpression[1]
{
  let pvs = $args->fold(
    { k,a:ValueSpecification[*] | $a->concatenate($k.values->iv()) },
    [ $func ]
  );

  sfe($execFunc, $pvs);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::sfe(func: meta::pure::metamodel::function::Function<Any>[1], pvs:ValueSpecification[*]):SimpleFunctionExpression[1]
{
  sfe($func, [], $pvs);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::sfe(func: meta::pure::metamodel::function::Function<Any>[1], resolvedTypeParameters:GenericType[*], pvs:ValueSpecification[*]):SimpleFunctionExpression[1]
{
  sfe($func, $func->functionReturnType(), $resolvedTypeParameters, $pvs);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::sfe(func: meta::pure::metamodel::function::Function<Any>[1], genericType:GenericType[1], resolvedTypeParameters:GenericType[*], pvs:ValueSpecification[*]):SimpleFunctionExpression[1]
{
  ^SimpleFunctionExpression(
    func = $func,
    genericType = $genericType,
    resolvedTypeParameters = $resolvedTypeParameters,
    importGroup = system::imports::coreImport,
    multiplicity = $func->functionReturnMultiplicity(),
    parametersValues = $pvs
  );
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::functionType(name:String[1], type:Type[1], multiplicity:Multiplicity[1], returnType:Type[1], returnMultiplicity:Multiplicity[1]):FunctionType[1]
{
  functionType($name, ^GenericType(rawType = $type), $multiplicity, ^GenericType(rawType = $returnType), $returnMultiplicity);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::functionType(name:String[1], type:GenericType[1], multiplicity:Multiplicity[1], returnType:GenericType[1], returnMultiplicity:Multiplicity[1]):FunctionType[1]
{
  ^FunctionType(parameters = ^VariableExpression(genericType = $type, name = $name, multiplicity = $multiplicity), returnMultiplicity = $returnMultiplicity, returnType = $returnType);
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::lambda(functionType:FunctionType[1], expressionSequence:ValueSpecification[*]):LambdaFunction<Any>[1]
{
  let lambda = newLambdaFunction($functionType);
  ^$lambda(expressionSequence = $expressionSequence->toOneMany());
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::iv(res: Any[*]): ValueSpecification[1]
{
  $res->match([
    v:ValueSpecification[1] | $v,
    a:Any[*] |   // check preeval for mult func, move to metaextension if required
  if($res->isEmpty(),
    |let multVal = ^MultiplicityValue(value=0);
      ^InstanceValue(multiplicity=PureZero, genericType=^GenericType(rawType=Nil), values=[]);,
    |let size = $res->size();
      let mult = if($size == 1,
                  |PureOne,
                  |let multVal = ^MultiplicityValue(value=$size);
                    ^Multiplicity(lowerBound=$multVal, upperBound=$multVal);
                );
      ^InstanceValue(multiplicity=$mult, genericType=$res->genericType(), values=$res);
  );
  ])
}

Class meta::external::query::sql::transformation::queryToPure::SqlTransformContext
{
  sources: SQLSource[*];
  expression: FunctionExpression[0..1];
  source: SQLSource[0..1];
  extensions: meta::pure::extension::Extension[*];
  aliases:Map<String, String>[1];
  name: String[0..1];
  contexts:Map<String, SqlTransformContext>[1];
  scopeWithFrom: Boolean[0..1];
  columns(){
    meta::pure::tds::schema::resolveSchema($this.lambda(), $this.extensions)
  }: TDSColumn[*];
  columnByNameParts(parts:String[*], failIfNotFound:Boolean[1])
  {
    let name = if ($parts->size() > 1, | $parts->last(), | $parts)->joinStrings('.');
    let contextName = $parts->init()->joinStrings('.');
    let context = if ($contextName->isEmpty() || $this.contexts->get($contextName)->isEmpty(), | $this, | $this.contexts->get($contextName));

    $context.columnByName($name, $failIfNotFound);
  }:TDSColumn[0..1];
  columnByName(name:String[1], failIfNotFound:Boolean[1]){
    let columns = $this.columns();
    let alias = $this.aliases->get($name);
    let column = $columns->filter(c|$c.name == $name || $c.name == $alias)->first();

    assert($column->isNotEmpty() || !$failIfNotFound, | 'no column found named ' + $name);

    $column;
  }: TDSColumn[0..1];
  lambda(){ ^LambdaFunction<{->TabularDataSet[1]}>(expressionSequence = $this.expression->toOne()) }: LambdaFunction<{->TabularDataSet[1]}>[1];
  source(type:String[1], arguments:SQLSourceArgument[*]){
      let source = $this.sources->filter(s | $s.matches($type, $arguments));

      assertNotEquals(0, $source->size(), 'No source found for type ' + $type);
      assertFalse($source->size() > 1, 'Multiple sources found for type ' + $type);

      $source->toOne();
  }:SQLSource[1];
}

Class meta::external::query::sql::transformation::queryToPure::SqlTransformExpressionContext
{
  exp: ValueSpecification[0..1];
  defaultVar: VariableExpression[0..1];
  varMap:Map<String, VariableExpression>[1];
  processFunctionCallAsIdentifier: Boolean[1];

  var() {
    assert($this.defaultVar->isNotEmpty(), | 'no var present');
    $this.defaultVar->toOne();
  }:VariableExpression[1];

  var(name:QualifiedName[1])
  {
    let var = if ($name.parts->size() == 2, | $this.varMap->get($name.parts->first()->toOne()), | []);
    if ($var->isEmpty(), | $this.var, | $var->toOne());
  }:VariableExpression[1];
}

Class meta::external::query::sql::transformation::queryToPure::FunctionProcessor
{
  name: String[1];
  transform: Function<{ValueSpecification[*]->SimpleFunctionExpression[1]}>[1];
  isAggregate: Boolean[1];
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processor(name:String[1], func:Function<Any>[1], isAggregate:Boolean[1]):FunctionProcessor[1]
{
  processor($name, $isAggregate, simpleFunctionTransform($func));
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::processor(name:String[1], isAggregate:Boolean[1], transform:Function<{ValueSpecification[*]->SimpleFunctionExpression[1]}>[1]):FunctionProcessor[1]
{
  ^FunctionProcessor(name = $name, isAggregate = $isAggregate, transform = $transform);
}

function meta::external::query::sql::transformation::queryToPure::simpleFunctionTransform(func:Function<Any>[1]):Function<{ValueSpecification[*]->SimpleFunctionExpression[1]}>[1]
{
  {args:ValueSpecification[*] | sfe($func, $args)}
}

//MISC
function meta::external::query::sql::transformation::queryToPure::getValue<X, Y>(pairs : Pair<X, Y>[*], key : X[1]) : Y[1]
{
   let r = newMap($pairs)->get($key);
   assert($r->isNotEmpty(), | 'No value found for ' + $key->makeString() + if($pairs->size() < 15 && ($key->instanceOf(String) || $key->instanceOf(Enumeration)), |', expected one of ' + $pairs.first->map(x|$x->makeString())->sort()->joinStrings('[', ',', ']'), |''));
   $r->toOne();
}

function meta::external::query::sql::transformation::queryToPure::getValue<X, Y>(pairs : Pair<X, Y>[*], key : X[1], defaultValue : Y[1]) : Y[1]
{
   let r = newMap($pairs)->get($key);
   if ($r->isEmpty(),
          | $defaultValue,
          | $r->toOne();
       );
}

function meta::external::query::sql::transformation::queryToPure::debug(a:Any[1]):Any[0]
{
  if (false, | println($a), | []);
}
