###Pure
import meta::external::query::sql::transformation::queryToPure::*;
import meta::external::query::sql::metamodel::*;
import meta::external::query::sql::transformation::queryToPure::tests::*;
import meta::legend::service::metamodel::*;
import meta::pure::mapping::*;
import meta::pure::metamodel::serialization::grammar::*;

function <<test.Test>> meta::external::query::sql::transformation::queryToPure::tests::testProjectSingleColumn():Boolean[1]
{
  let sqlString = 'SELECT Boolean, Integer FROM service."/service/testTdsService"';
  let sqlTransformContext = $sqlString->processQuery();
  let expected = {| FlatInput.all()->project(
        [ x | $x.booleanIn, x | $x.integerIn, x | $x.floatIn, x | $x.decimalIn, x | $x.strictDateIn, x | $x.dateTimeIn, x | $x.stringIn ],
        [ 'Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String' ])
      ->restrict(['Boolean', 'Integer'])
      };
  assertLambdaEquals($expected, $sqlTransformContext.lambda());
}

function <<test.Test>> meta::external::query::sql::transformation::queryToPure::tests::testProjectAllColumns():Boolean[1]
{
  let sqlString = 'SELECT * FROM service."/service/testTdsService"';
  let sqlTransformContext = $sqlString->processQuery();
  let expected = {| FlatInput.all()->project(
        [ x | $x.booleanIn, x | $x.integerIn, x | $x.floatIn, x | $x.decimalIn, x | $x.strictDateIn, x | $x.dateTimeIn, x | $x.stringIn ],
        [ 'Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String' ])
      ->restrict(['Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String'])
      };
  assertLambdaEquals($expected, $sqlTransformContext.lambda());
}

function <<test.Test>> meta::external::query::sql::transformation::queryToPure::tests::testDistinctAllColumns():Boolean[1]
{
  let sqlString = 'SELECT DISTINCT * FROM service."/service/testTdsService"';
  let sqlTransformContext = $sqlString->processQuery();
  let expected = {| FlatInput.all()->project(
        [ x | $x.booleanIn, x | $x.integerIn, x | $x.floatIn, x | $x.decimalIn, x | $x.strictDateIn, x | $x.dateTimeIn, x | $x.stringIn ],
        [ 'Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String' ])
      ->restrict(['Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String'])
      ->distinct()
      };
  assertLambdaEquals($expected, $sqlTransformContext.lambda());
}

function <<test.Test>> meta::external::query::sql::transformation::queryToPure::tests::testDistinctSingleColumn():Boolean[1]
{
  let sqlString = 'SELECT DISTINCT Boolean FROM service."/service/testTdsService"';
  let sqlTransformContext = $sqlString->processQuery();
  let expected = {| FlatInput.all()->project(
        [ x | $x.booleanIn, x | $x.integerIn, x | $x.floatIn, x | $x.decimalIn, x | $x.strictDateIn, x | $x.dateTimeIn, x | $x.stringIn ],
        [ 'Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String' ])
      ->restrict(['Boolean'])
      ->distinct()
      };
  assertLambdaEquals($expected, $sqlTransformContext.lambda());
}

function <<test.Test>> meta::external::query::sql::transformation::queryToPure::tests::testLimit():Boolean[1]
{
  let sqlString = 'SELECT * FROM service."/service/testTdsService" LIMIT 2';
  let sqlTransformContext = $sqlString->processQuery();
  let expected = {| FlatInput.all()->project(
        [ x | $x.booleanIn, x | $x.integerIn, x | $x.floatIn, x | $x.decimalIn, x | $x.strictDateIn, x | $x.dateTimeIn, x | $x.stringIn ],
        [ 'Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String' ])
      ->restrict(['Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String'])
      ->limit(2)
      };
  assertLambdaEquals($expected, $sqlTransformContext.lambda());
}

function <<test.Test>> meta::external::query::sql::transformation::queryToPure::tests::testLimitAll():Boolean[1]
{
  let sqlString = 'SELECT * FROM service."/service/testTdsService" LIMIT ALL';
  let sqlTransformContext = $sqlString->processQuery();
  let expected = {| FlatInput.all()->project(
        [ x | $x.booleanIn, x | $x.integerIn, x | $x.floatIn, x | $x.decimalIn, x | $x.strictDateIn, x | $x.dateTimeIn, x | $x.stringIn ],
        [ 'Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String' ])
      ->restrict(['Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String'])
      };
  assertLambdaEquals($expected, $sqlTransformContext.lambda());
}

function <<test.Test>> meta::external::query::sql::transformation::queryToPure::tests::testQuotedSingleColumn():Boolean[1]
{
  let sqlString = 'SELECT "Boolean", "Integer" FROM service."/service/testTdsService"';
  let sqlTransformContext = $sqlString->processQuery();
  let expected = {| FlatInput.all()->project(
        [ x | $x.booleanIn, x | $x.integerIn, x | $x.floatIn, x | $x.decimalIn, x | $x.strictDateIn, x | $x.dateTimeIn, x | $x.stringIn ],
        [ 'Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String' ])
      ->restrict(['Boolean', 'Integer'])
      };
  assertLambdaEquals($expected, $sqlTransformContext.lambda());
}

function <<test.Test>> meta::external::query::sql::transformation::queryToPure::tests::testUnquotedSingleColumn():Boolean[1]
{
  let sqlString = 'SELECT Boolean, Integer FROM service."/service/testTdsService"';
  let sqlTransformContext = $sqlString->processQuery();
  let expected = {| FlatInput.all()->project(
        [ x | $x.booleanIn, x | $x.integerIn, x | $x.floatIn, x | $x.decimalIn, x | $x.strictDateIn, x | $x.dateTimeIn, x | $x.stringIn ],
        [ 'Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String' ])
      ->restrict(['Boolean', 'Integer'])
      };
  assertLambdaEquals($expected, $sqlTransformContext.lambda());
}

function <<test.Test>> meta::external::query::sql::transformation::queryToPure::tests::testSort():Boolean[1]
{
  let sqlString = 'SELECT Boolean, Integer FROM service."/service/testTdsService" ORDER BY Integer DESC, Boolean';
  let sqlTransformContext = $sqlString->processQuery();
  let expected = {| FlatInput.all()->project(
        [ x | $x.booleanIn, x | $x.integerIn, x | $x.floatIn, x | $x.decimalIn, x | $x.strictDateIn, x | $x.dateTimeIn, x | $x.stringIn ],
        [ 'Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String' ])
      ->restrict(['Boolean', 'Integer'])
      ->sort([desc('Integer'), asc('Boolean')])
      };
  assertLambdaEquals($expected, $sqlTransformContext.lambda());
}

function <<access.private>> meta::external::query::sql::transformation::queryToPure::tests::processQuery(sql: String[1]): SqlTransformContext[1]
{
  let query = meta::legend::compileVS('#SQL{' + $sql + '}#')->cast(@Query);
  let context = ^SqlTransformContext(services = [TdsService()], extensions = []);
  $query->processQuery($context);
}