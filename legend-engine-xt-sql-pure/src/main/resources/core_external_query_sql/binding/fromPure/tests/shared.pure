// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class meta::external::query::sql::transformation::queryToPure::tests::FlatInput
{
  idIn: Integer[1];
  booleanIn: Boolean[1];
  integerIn: Integer[1];
  floatIn: Float[1];
  decimalIn: Decimal[1];
  strictDateIn: StrictDate[1];
  dateTimeIn: DateTime[1];
  stringIn: String[1];
}

###Mapping
Mapping meta::external::query::sql::transformation::queryToPure::tests::dummyMapping
(
)

###Pure
import meta::pure::extension::*;
import meta::pure::alloy::connections::*;
import meta::pure::alloy::connections::alloy::authentication::*;
import meta::pure::alloy::connections::alloy::specification::*;
import meta::pure::runtime::*;
import meta::pure::metamodel::serialization::grammar::*;
import meta::legend::service::metamodel::*;
import meta::pure::mapping::*;
import meta::external::query::sql::transformation::queryToPure::*;
import meta::external::query::sql::transformation::queryToPure::tests::*;
import meta::external::query::sql::metamodel::*;

function meta::external::query::sql::transformation::queryToPure::tests::dummyConnection(): Connection[1]
{
  ^Connection(
    element = 'dummy'
  )
}

function meta::external::query::sql::transformation::queryToPure::tests::dummyRuntime(): Runtime[1]
{
  ^EngineRuntime(
    mappings = dummyMapping,
    connections = dummyConnection()
  );
}

function meta::external::query::sql::transformation::queryToPure::tests::sqlExtensions():Extension[*]
{
  let sqlTestExtension = ^meta::pure::extension::Extension(
    type = 'sql', 
    serializerExtension = meta::external::query::sql::transformation::queryToPure::tests::getSqlSerializerExtension_String_1__String_1_);

  meta::relational::extension::relationalExtensions()->concatenate($sqlTestExtension);
}

function meta::external::query::sql::transformation::queryToPure::tests::getSqlSerializerExtension(version:String[1]):String[1]
{
   'meta::external::query::sql::transformation::queryToPure::tests::sqlSerializerExtension_String_1__SerializerExtension_vX_X_X_1_';
}

function meta::external::query::sql::transformation::queryToPure::tests::sqlSerializerExtension(version:String[1]):meta::protocols::pure::vX_X_X::extension::SerializerExtension_vX_X_X[1]
{
  ^meta::protocols::pure::vX_X_X::extension::SerializerExtension_vX_X_X(
      transfers_store_transformConnection2 = {extensions:meta::pure::extension::Extension[*] |
      [
         c:Connection[1] | ^meta::protocols::pure::vX_X_X::metamodel::runtime::Connection(_type = 'connection', element = $c.element->toString())
      ]}
    );
}


function meta::external::query::sql::transformation::queryToPure::tests::assertLambdaEquals(expected:FunctionDefinition<Any>[1], actual:FunctionDefinition<Any>[1]): Boolean[1]
{
  assertEquals($expected->printFunctionDefinition(''), $actual->printFunctionDefinition(''));
}


function meta::external::query::sql::transformation::queryToPure::tests::assertLambdaJSONEquals(expected:FunctionDefinition<Any>[1], actual:FunctionDefinition<Any>[1]): Boolean[1]
{
  assertEquals($expected->functionJSON(), $actual->functionJSON());
}

function meta::external::query::sql::transformation::queryToPure::tests::functionJSON(func:FunctionDefinition<Any>[1]): String[1]
{
  $func->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::transformLambda(sqlExtensions())->meta::json::toJSON(100);
}

function meta::external::query::sql::transformation::queryToPure::tests::serviceToSource(service:Service[1]): SQLSource[1]
{
  let execution = $service.execution->cast(@PureSingleExecution);

  ^SQLSource(
      type = 'service',
      id = $service.pattern,
      func = $execution.func,
      mapping = $execution.mapping,
      runtime = $execution.runtime,
      executionOptions = $execution.executionOptions
  );
}

function meta::external::query::sql::transformation::queryToPure::tests::Service1(): Service[1]
{
  ^Service
  (
    pattern = '/service/service1',
    owners = ['dummy'],
    documentation = '',
    autoActivateUpdates = true,
    execution = ^PureSingleExecution
    (
      func = | FlatInput.all()->project(
        [
          x | $x.booleanIn, x | $x.integerIn, x | $x.floatIn, x | $x.decimalIn, x | $x.strictDateIn, x | $x.dateTimeIn, x | $x.stringIn
        ],
        [
          'Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String'
        ]
      ),
      mapping = dummyMapping,
      runtime = dummyRuntime()
    ),
    test = ^SingleExecutionTest(
      data = '',
      asserts = ^TestContainer(assert = x:Result<Any|m>[1] | true))
  );
}

function meta::external::query::sql::transformation::queryToPure::tests::Service2(): Service[1]
{
  ^Service
  (
    pattern = '/service/service2',
    owners = ['dummy'],
    documentation = '',
    autoActivateUpdates = true,
    execution = ^PureSingleExecution
    (
      func = | FlatInput.all()->project(
        [
          x | $x.idIn, x | $x.integerIn, x | $x.stringIn
        ],
        [
          'ID', 'Integer', 'String'
        ]
      ),
      mapping = dummyMapping,
      runtime = dummyRuntime()
    ),
    test = ^SingleExecutionTest(
      data = '',
      asserts = ^TestContainer(assert = x:Result<Any|m>[1] | true))
  );
}
