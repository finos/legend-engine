// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class meta::external::query::sql::transformation::queryToPure::tests::FlatInput
{
  idIn: Integer[1];
  booleanIn: Boolean[1];
  integerIn: Integer[1];
  floatIn: Float[1];
  decimalIn: Decimal[1];
  strictDateIn: StrictDate[1];
  dateTimeIn: DateTime[1];
  stringIn: String[1];
  enumVal: meta::external::query::sql::transformation::queryToPure::tests::MyEnum[1];
  type: meta::external::query::sql::transformation::queryToPure::tests::FieldType[1];
}

Enum meta::external::query::sql::transformation::queryToPure::tests::MyEnum
{
   Value1, Value2, Value_3, VALUE__4
}

Enum meta::external::query::sql::transformation::queryToPure::tests::FieldType
{
   Type1, Type2, Type_3, Type__4
}


###Relational
Database meta::external::query::sql::transformation::queryToPure::tests::dummyDatabase
(
  Table flat
  (
    id Integer PRIMARY KEY,
    boolean BIT,
    integer Integer,
    float Float,
    decimal Float,
    strictDate Date,
    dateTime Timestamp,
    string VARCHAR(200),
    enum VARCHAR(200),
    type VARCHAR(200)
  )
)

###Mapping
import meta::external::query::sql::transformation::queryToPure::tests::*;

Mapping meta::external::query::sql::transformation::queryToPure::tests::dummyMapping
(
   FlatInput : Relational
   {
      scope([dummyDatabase]default.flat)
      (
        idIn: id,
        booleanIn: case(equal(boolean, 1), sqlTrue(), sqlFalse()),
        integerIn: integer,
        floatIn: float,
        decimalIn: decimal,
        strictDateIn: strictDate,
        dateTimeIn: dateTime,
        stringIn: string,
        enumVal: EnumerationMapping MyEnumMapping: enum,
        type: EnumerationMapping FieldTypeMapping: type
      )
   }

   MyEnum: EnumerationMapping MyEnumMapping
   {
    Value1: 'V1', 
    Value2: 'V2',
    Value_3 : 'V3',
    VALUE__4: 'V4'
   }   

   FieldType: EnumerationMapping FieldTypeMapping
   {
    Type1: 'T1', 
    Type2: 'T2',
    Type_3 : 'T3',
    Type__4: 'T4'
   }      
)

###Pure
import meta::relational::runtime::*;
import meta::pure::extension::*;
import meta::pure::alloy::connections::*;
import meta::pure::alloy::connections::alloy::authentication::*;
import meta::pure::alloy::connections::alloy::specification::*;
import meta::pure::runtime::*;
import meta::pure::metamodel::serialization::grammar::*;
import meta::legend::service::metamodel::*;
import meta::pure::mapping::*;
import meta::external::query::sql::transformation::queryToPure::*;
import meta::external::query::sql::transformation::queryToPure::tests::*;
import meta::external::query::sql::metamodel::*;

function meta::external::query::sql::transformation::queryToPure::tests::dummyConnection(): Connection[1]
{
  ^RelationalDatabaseConnection(
    type = DatabaseType.H2,
    datasourceSpecification = ^meta::pure::alloy::connections::alloy::specification::LocalH2DatasourceSpecification(testDataSetupCsv = ''),
    authenticationStrategy = ^meta::pure::alloy::connections::alloy::authentication::TestDatabaseAuthenticationStrategy(),
    element = meta::external::query::sql::transformation::queryToPure::tests::dummyDatabase
  )
}

function meta::external::query::sql::transformation::queryToPure::tests::dummyRuntime(): Runtime[1]
{
  ^EngineRuntime(
    mappings = dummyMapping,
    connections = dummyConnection()
  );
}

function meta::external::query::sql::transformation::queryToPure::tests::sqlExtensions():Extension[*]
{
  let sqlTestExtension = ^meta::pure::extension::Extension(
    type = 'sql', 
    serializerExtension = meta::external::query::sql::transformation::queryToPure::tests::getSqlSerializerExtension_String_1__String_1_);

  meta::relational::extension::relationalExtensions()->concatenate($sqlTestExtension);
}

function meta::external::query::sql::transformation::queryToPure::tests::getSqlSerializerExtension(version:String[1]):String[1]
{
   'meta::external::query::sql::transformation::queryToPure::tests::sqlSerializerExtension_String_1__SerializerExtension_vX_X_X_1_';
}

function meta::external::query::sql::transformation::queryToPure::tests::sqlSerializerExtension(version:String[1]):meta::protocols::pure::vX_X_X::extension::SerializerExtension_vX_X_X[1]
{
  ^meta::protocols::pure::vX_X_X::extension::SerializerExtension_vX_X_X(
      transfers_store_transformConnection2 = {extensions:meta::pure::extension::Extension[*] |
      [
         c:Connection[1] | ^meta::protocols::pure::vX_X_X::metamodel::runtime::Connection(_type = 'connection', element = $c.element->toString())
      ]}
    );
}


function meta::external::query::sql::transformation::queryToPure::tests::assertLambdaAndJSONEquals(expected:FunctionDefinition<Any>[1], actual:FunctionDefinition<Any>[1]): Boolean[1]
{
  assertLambdaEquals($expected, $actual);
  assertLambdaJSONEquals($expected, $actual);
}

function meta::external::query::sql::transformation::queryToPure::tests::assertLambdaEquals(expected:FunctionDefinition<Any>[1], actual:FunctionDefinition<Any>[1]): Boolean[1]
{
  assertEquals($expected->printFunctionDefinition(''), $actual->printFunctionDefinition(''));
}


function meta::external::query::sql::transformation::queryToPure::tests::assertLambdaJSONEquals(expected:FunctionDefinition<Any>[1], actual:FunctionDefinition<Any>[1]): Boolean[1]
{
  assertEquals($expected->functionJSON(), $actual->functionJSON());
}

function meta::external::query::sql::transformation::queryToPure::tests::functionJSON(func:FunctionDefinition<Any>[1]): String[1]
{
  $func->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::transformLambda(sqlExtensions())->meta::json::toJSON(100);
}

function meta::external::query::sql::transformation::queryToPure::tests::serviceToSource(service:Service[1]): SQLSource[1]
{
  serviceToSource($service, []);
}

function meta::external::query::sql::transformation::queryToPure::tests::serviceToSource(service:Service[1], keys:SQLSourceArgument[*]): SQLSource[1]
{
  let execution = $service.execution->cast(@PureSingleExecution);

  ^SQLSource(
      type = 'service',
      func = $execution.func,
      mapping = $execution.mapping,
      runtime = $execution.runtime,
      executionOptions = $execution.executionOptions,
      key = [
        ^SQLSourceArgument(name = 'pattern', value = $service.pattern, index = 0)
      ]->concatenate($keys)
  );
}

function meta::external::query::sql::transformation::queryToPure::tests::createService(pattern:String[1], f:FunctionDefinition<Any>[1]): Service[1]
{
  ^Service
  (
    pattern = $pattern,
    owners = ['dummy'],
    documentation = '',
    autoActivateUpdates = true,
    execution = ^PureSingleExecution
    (
      func = $f,
      mapping = dummyMapping,
      runtime = dummyRuntime()
    ),
    test = ^SingleExecutionTest(
      data = '',
      asserts = ^TestContainer(assert = x:Result<Any|m>[1] | true))
  );
}

function meta::external::query::sql::transformation::queryToPure::tests::Service1(): Service[1]
{
  createService('/service/service1', | FlatInput.all()->project(
        [
          x | $x.booleanIn, x | $x.integerIn, x | $x.floatIn, x | $x.decimalIn, x | $x.strictDateIn, x | $x.dateTimeIn, x | $x.stringIn
        ],
        [
          'Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String'
        ]
      ));
}

function meta::external::query::sql::transformation::queryToPure::tests::Service2(): Service[1]
{
  createService('/service/service2', | FlatInput.all()->project(
        [
          x | $x.idIn, x | $x.integerIn, x | $x.stringIn
        ],
        [
          'ID', 'Integer', 'String'
        ]
      ));
}


function meta::external::query::sql::transformation::queryToPure::tests::Service3(): Service[1]
{
  createService('/service/service3', {| 
        let const = 123;
        FlatInput.all()->project(
        [
          x | $x.idIn, x | $x.integerIn, x | $x.enumVal, x | $x.type, x | $const
        ],
        [
          'ID', 'Integer', 'The Enum Value', 'The Type', 'Const'
        ]
      );})
}

function meta::external::query::sql::transformation::queryToPure::tests::Service4(): Service[1]
{
  createService('/service/service4/{id}', {id:String[1], ints:Integer[*], date:StrictDate[0..1] | 

        FlatInput.all()->filter(f | $f.idIn == $id && $f.integerIn->in($ints) && ($f.strictDateIn > $date))->project(
        [
          x | $x.idIn, x | $x.integerIn, x | $x.enumVal
        ],
        [
          'ID', 'Integer', 'Enum'
        ]
      );})
}