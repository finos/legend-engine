// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


Class meta::external::query::sql::SchemaColumn
{
  <<equality.Key>> name: String[1];
}

Class meta::external::query::sql::PrimitiveValueSchemaColumn extends meta::external::query::sql::SchemaColumn
{
  <<equality.Key>> type: meta::external::query::sql::PrimitiveType[1];
}

Class meta::external::query::sql::EnumValueSchemaColumn extends meta::external::query::sql::SchemaColumn
{
  <<equality.Key>> type: String[1];
}


Class meta::external::query::sql::Schema
{
  <<equality.Key>> columns: meta::external::query::sql::SchemaColumn[*];
  <<equality.Key>> enums: meta::external::query::sql::Enum[*];
}

Enum meta::external::query::sql::PrimitiveType
{
  Boolean,
  StrictDate,
  Number,
  String,
  LatestDate,
  Float,
  DateTime,
  Date,
  Integer,
  Decimal
}

Class meta::external::query::sql::Enum
{
  <<equality.Key>> type: String[1];
  <<equality.Key>> values: String[*];
}

function meta::external::query::sql::stringToPrimitiveType(dt : String[1]) : meta::external::query::sql::PrimitiveType[1]
{
   let type = newMap(
      [
         pair('Boolean', meta::external::query::sql::PrimitiveType.Boolean),
         pair('StrictDate', meta::external::query::sql::PrimitiveType.StrictDate),
         pair('Number', meta::external::query::sql::PrimitiveType.Number),
         pair('String', meta::external::query::sql::PrimitiveType.String),
         pair('LatestDate', meta::external::query::sql::PrimitiveType.LatestDate),
         pair('Float', meta::external::query::sql::PrimitiveType.Float),
         pair('DateTime', meta::external::query::sql::PrimitiveType.DateTime),
         pair('Date', meta::external::query::sql::PrimitiveType.Date),
         pair('Integer', meta::external::query::sql::PrimitiveType.Integer),
         pair('Decimal', meta::external::query::sql::PrimitiveType.Decimal)
      ]
   )->get($dt);
   if($type->isEmpty(), |fail('Unknown primitive type: ' + $dt), |[]);
   $type->toOne();
}

function meta::external::query::sql::tdsColToSchemaCol(col: TDSColumn[1]): meta::external::query::sql::SchemaColumn[1]
{
  let columnName = $col.name;
  if($col.type->isEmpty(), |fail('Column type is empty for col: ' + $columnName), |[]);
  let tdsType = $col.type->toOne();
  let columnPrimitiveType = $col.type->match([
    s:PrimitiveType[1]      | ^meta::external::query::sql::PrimitiveValueSchemaColumn(type=$tdsType->meta::pure::functions::meta::elementToPath()->meta::external::query::sql::stringToPrimitiveType(),name=$columnName),
    e:Enumeration<Any>[1]   | ^meta::external::query::sql::EnumValueSchemaColumn(type=$tdsType->meta::pure::functions::meta::elementToPath(),name=$columnName),
    a:Any[*]                | fail('Unsupported type on column: ' + $columnName + ' (' + $tdsType->meta::pure::functions::meta::elementToPath() + '), only primitive types and enums are supported');
  ])->cast(@meta::external::query::sql::SchemaColumn);
}

function meta::external::query::sql::tdsColsToSchema(cols: TDSColumn[*]): meta::external::query::sql::Schema[1]
{
  let schemaCols = $cols->map(v:TDSColumn[1]  | $v->meta::external::query::sql::tdsColToSchemaCol());
  let enums = $cols
    ->map(c:TDSColumn[1] | $c.type->match([
      e:Enumeration<Any>[1] | ^meta::external::query::sql::Enum(type=$e->meta::pure::functions::meta::elementToPath(), values=$e->enumValues()->map( v:Enum[1]   | $v->id())),
      a:Any[*]              | []
    ]))
    ->distinct();
  ^meta::external::query::sql::Schema(columns=$schemaCols, enums=$enums);
}
