// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::daml::generation::*;
import meta::pure::generation::metamodel::*;

Class <<doc.deprecated>> meta::external::language::daml::generation::DAMLConfig extends GenerationConfiguration
{
}

function <<access.private, Generation.Configuration, doc.deprecated>>  meta::external::language::daml::generation::describeConfiguration():GenerationParameter[*]
{
  meta::pure::generation::describeConfiguration(DAMLConfig, meta::external::language::daml::generation::defaultConfig__DAMLConfig_1_, []);
}

function <<doc.deprecated>> meta::external::language::daml::generation::defaultConfig():DAMLConfig[1]
{
    ^DAMLConfig();
}

Class <<doc.deprecated>> meta::external::language::daml::generation::DAMLOutput extends GenerationOutput
{
}

function <<doc.deprecated>> meta::external::language::daml::generation::generateDAML(config: DAMLConfig[1]): DAMLOutput[*]
{
   $config.scopeElements->filter(e| !$e->instanceOf(Package))->map(e|assert($e->instanceOf(Type),' DAML generation of ' + $e->type().name->toOne()+ ' is not currently supported. Tried to generate DAML for '+ $e->elementToPath()) ;);
   let scopeElements = $config.allPackageScopeElements()->filter(p|$p->instanceOf(Class))->cast(@Class<Any>);
   $scopeElements->map(c| meta::external::language::daml::generation::generateDAMLFromPure($c));
}

function <<doc.deprecated>> meta::external::language::daml::generation::generateDAMLFromPure(class: Class<Any>[1]): DAMLOutput[*]
{
   let content = meta::external::language::daml::transformation::fromPure::generateDamlFromPure($class, ^meta::external::language::daml::transformation::fromPure::ModelToDamlConfiguration(format = 'DAML',targetSchemaSet='res::ResSchemaSet'))
                  .module->map(m | $m->meta::external::language::daml::format::toString())
                  ->joinStrings('\n');
   ^DAMLOutput
   (
        content=$content,
        fileName='schema.DAML',
        format='text'
   );
}