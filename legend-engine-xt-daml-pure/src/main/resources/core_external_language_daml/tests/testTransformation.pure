import meta::external::language::daml::generation::tests::*;
import meta::external::language::daml::generation::*;
import meta::external::language::daml::transformation::fromPure::*;

Class meta::external::language::daml::generation::tests::Person
{
  name:String[1];
  age:Integer[1];
  addresses:Address[*];
}

Class meta::external::language::daml::generation::tests::Address
{
  street:String[1];
}

function <<test.Test>> meta::external::language::daml::generation::tests::testGenerateDamlFromPure():Boolean[1]
{
  let config = ^ModelToDamlConfiguration(format = 'DAML',
                               targetSchemaSet='res::ResSchemaSet');
  let out = meta::external::language::daml::generation::generateDamlFromPure([Person],$config);
  assertEquals('module (Meta.External.Language.Daml.Generation.Tests) with\n' +
  '\n' +
'data Person = Person {\n' +
'  name :: Text,\n' +
'  age :: Int,\n' +
'  addresses :: Optional [Address]\n' +
'} deriving (Eq, Ord, Show)\n' +
'\n'+
'data Address = Address {\n' +
'  street :: Text\n' +
'} deriving (Eq, Ord, Show)\n'
,$out.module->map(m | $m->meta::external::language::daml::format::toString()));
}