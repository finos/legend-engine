###Relational
Database store::CovidDataStore
(
  Table DEMOGRAPHICS
  (
    FIPS VARCHAR(200),
    STATE VARCHAR(200)
  )
  Table COVID_DATA
  (
    ID INTEGER PRIMARY KEY,
    FIPS VARCHAR(200),
    DATE DATE,
    CASE_TYPE VARCHAR(200),
    CASES INTEGER,
    LAST_REPORTED_FLAG BIT
  )

  Join CovidDataDemographicsJoin(DEMOGRAPHICS.FIPS = COVID_DATA.FIPS)
)

Database store::CovidDataStoreA
(
   include store::CovidDataStoreB
)

Database store::CovidDataStoreB
(
   include store::CovidDataStoreC
)

Database store::CovidDataStoreC
(
  include store::CovidDataStoreA
  Table DEMOGRAPHICS
  (
    FIPS VARCHAR(200),
    STATE VARCHAR(200)
  )
  Table COVID_DATA
  (
    ID INTEGER PRIMARY KEY,
    FIPS VARCHAR(200),
    DATE DATE,
    CASE_TYPE VARCHAR(200),
    CASES INTEGER,
    LAST_REPORTED_FLAG BIT
  )

  Join CovidDataDemographicsJoin(DEMOGRAPHICS.FIPS = COVID_DATA.FIPS)
)


###Pure
Enum {doc.doc = 'List of known viruses'} domain::Virus
{
  {doc.doc = 'Severe acute respiratory syndrome (SARS) is a viral respiratory disease of zoonotic origin caused by the severe acute respiratory syndrome coronavirus'} SARS,
  {doc.doc = 'Coronavirus disease 2019 (COVID-19) is a contagious disease caused by a virus, the severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2)'} COVID19
}

Class {doc.doc = 'COVID-19 data demographics consisting of geolocation information'} domain::Demographics
{
  {doc.doc = 'The Federal Information Processing Standard (FIPS) code (FIPS 6-4) uniquely identifies counties and county equivalents in the United States'} fips: String[0..1];
  {doc.doc = 'United States in 2-letter codes format'} state: String[0..1];
}

Class {doc.doc = 'COVID-19 data report consisting of case statistics details and basic information on demographics'} domain::COVIDData
{
  id: Integer[1];
  {doc.doc = 'The Federal Information Processing Standard (FIPS) code (FIPS 6-4) uniquely identifies counties and county equivalents in the United States'} fips: String[0..1];
  date: StrictDate[0..1];
  caseType: String[0..1];
  cases: Float[0..1];
  {doc.doc = 'A flag indicating if the similar case data has been reported previously'} lastReportedFlag: Boolean[0..1];
  demographics: domain::Demographics[0..1];
}


###Mapping
Mapping mapping::CovidDataMapping
(
  domain::Demographics: Relational
  {
    ~primaryKey
    (
      [store::CovidDataStore]DEMOGRAPHICS.FIPS
    )
    ~mainTable [store::CovidDataStore]DEMOGRAPHICS
    fips: [store::CovidDataStore]DEMOGRAPHICS.FIPS,
    state: [store::CovidDataStore]DEMOGRAPHICS.STATE
  }
  domain::COVIDData: Relational
  {
    ~primaryKey
    (
      [store::CovidDataStore]COVID_DATA.ID
    )
    ~mainTable [store::CovidDataStore]COVID_DATA
    id: [store::CovidDataStore]COVID_DATA.ID,
    fips: [store::CovidDataStore]COVID_DATA.FIPS,
    date: [store::CovidDataStore]COVID_DATA.DATE,
    caseType: [store::CovidDataStore]COVID_DATA.CASE_TYPE,
    cases: [store::CovidDataStore]COVID_DATA.CASES,
    lastReportedFlag: [store::CovidDataStore]COVID_DATA.LAST_REPORTED_FLAG,
    demographics[domain_Demographics]: [store::CovidDataStore]@CovidDataDemographicsJoin
  }
)


###Connection
RelationalDatabaseConnection runtime::connection::H2Connection
{
  store: store::CovidDataStore;
  type: H2;
  specification: LocalH2
  {
    testDataSetupSqls: [
      'DROP TABLE IF EXISTS COVID_DATA;\nDROP TABLE IF EXISTS DEMOGRAPHICS;\n\nCREATE TABLE DEMOGRAPHICS(\n  FIPS VARCHAR(200) PRIMARY KEY,\n  STATE VARCHAR(200)\n);\n\nCREATE TABLE COVID_DATA(\n  ID INT PRIMARY KEY,\n  FIPS VARCHAR(200),\n  DATE DATE,\n  CASE_TYPE VARCHAR(200),\n  CASES INT,\n  LAST_REPORTED_FLAG BIT,\n  FOREIGN KEY (FIPS) REFERENCES DEMOGRAPHICS(FIPS)\n);\n\nINSERT INTO DEMOGRAPHICS VALUES(\'1\', \'NY\');\nINSERT INTO DEMOGRAPHICS VALUES(\'2\', \'NJ\');\nINSERT INTO DEMOGRAPHICS VALUES(\'3\', \'CA\');\n\nINSERT INTO COVID_DATA VALUES(1, \'1\', \'2021-04-01\', \'Confirmed\', 405, 0);\nINSERT INTO COVID_DATA VALUES(2, \'2\', \'2021-04-01\', \'Active\', 290, 1);\n'
      ];
  };
  auth: DefaultH2;
}

RelationalDatabaseConnection runtime::connection::H2ConnectionWithMappers
{
  store: store::CovidDataStore;
  type: H2;
  specification: LocalH2
  {
    testDataSetupSqls: [
      'DROP TABLE IF EXISTS COVID_DATA;\nDROP TABLE IF EXISTS DEMOGRAPHICS;\n\nCREATE TABLE DEMOGRAPHICS(\n  FIPS VARCHAR(200) PRIMARY KEY,\n  STATE VARCHAR(200)\n);\n\nCREATE TABLE COVID_DATA(\n  ID INT PRIMARY KEY,\n  FIPS VARCHAR(200),\n  DATE DATE,\n  CASE_TYPE VARCHAR(200),\n  CASES INT,\n  LAST_REPORTED_FLAG BIT,\n  FOREIGN KEY (FIPS) REFERENCES DEMOGRAPHICS(FIPS)\n);\n\nINSERT INTO DEMOGRAPHICS VALUES(\'1\', \'NY\');\nINSERT INTO DEMOGRAPHICS VALUES(\'2\', \'NJ\');\nINSERT INTO DEMOGRAPHICS VALUES(\'3\', \'CA\');\n\nINSERT INTO COVID_DATA VALUES(1, \'1\', \'2021-04-01\', \'Confirmed\', 405, 0);\nINSERT INTO COVID_DATA VALUES(2, \'2\', \'2021-04-01\', \'Active\', 290, 1);\n'
      ];
  };
  auth: DefaultH2;
  postProcessors:
  [
    mapper
    {
      mappers:
      [
        table {from: 'COVID_DATA'; to: 'COVID_DATA_PROD'; schemaFrom: 'default'; schemaTo: 'COVID';},
        schema {from: 'default'; to: 'COVID';}
      ];
    }
  ];
}

RelationalDatabaseConnection runtime::connection::SnowflakeConnection
{
  store: store::CovidDataStore;
  type: Snowflake;
  specification: LocalH2
  {
  };
  auth: DefaultH2;
}

###Runtime
Runtime runtime::H2Runtime
{
  mappings:
  [
    mapping::CovidDataMapping
  ];
  connections:
  [
    store::CovidDataStore:
    [
      connection_1: runtime::connection::H2Connection
    ]
  ];
}

Runtime runtime::H2RuntimeWithMappers
{
  mappings:
  [
    mapping::CovidDataMapping
  ];
  connections:
  [
    store::CovidDataStore:
    [
      connection_1: runtime::connection::H2ConnectionWithMappers
    ]
  ];
}

Runtime runtime::SnowflakeRuntime
{
  mappings:
  [
    mapping::CovidDataMapping
  ];
  connections:
  [
    store::CovidDataStore:
    [
      connection_1: runtime::connection::SnowflakeConnection
    ]
  ];
}

Runtime runtime::CompoundRuntime
{
  mappings:
  [
    mapping::CovidDataMapping
  ];
  connections:
  [
    store::CovidDataStore:
    [
      connection_1: runtime::connection::H2Connection,
      connection_2: runtime::connection::SnowflakeConnection
    ]
  ];
}