/*
 *  Copyright 2022 Goldman Sachs
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

function meta::legend::service::validation::generateValidationQuery(query: FunctionDefinition<Any>[1], assertion: FunctionDefinition<Any>[1]): FunctionDefinition<Any>[1]
{
  // STEP 1: Last expression in validation query should be assertTabularDataSetEmpty or assertCollectionEmpty
  let assertExpression = $assertion.expressionSequence->evaluateAndDeactivate()->last()->cast(@SimpleFunctionExpression);
  assert($assertExpression.func->in([
   meta::legend::service::validation::assertTabularDataSetEmpty_TabularDataSet_1__String_1__Boolean_1_,
   meta::legend::service::validation::assertCollectionEmpty_Any_MANY__String_1__Boolean_1_
  ]));

  // STEP 2: Unwrap query from assertion
  let nAssertionSfe = $assertExpression.parametersValues->evaluateAndDeactivate()->at(0)->evaluateAndDeactivate();
  let nAssertionQuery = ^$assertion(
    expressionSequence = $assertion.expressionSequence->evaluateAndDeactivate()->init()->concatenate($nAssertionSfe)->toOneMany()
  )->evaluateAndDeactivate();

  // STEP 3: Inline service query to assertion query
  let querySfe = $query.expressionSequence->evaluateAndDeactivate()->last()->toOne();
  let param = $nAssertionQuery->functionType().parameters->toOne();

  ^$query(
    expressionSequence = ^InstanceValue(
      values = $nAssertionQuery,
      multiplicity = $nAssertionSfe.multiplicity,
      genericType = $nAssertionSfe.genericType
    )->evaluateAndDeactivate()
     ->meta::legend::service::validation::inlineValueSpecification(
        newMap([pair($param, $querySfe)]->cast(@Pair<VariableExpression, ValueSpecification>))->evaluateAndDeactivate()
     )
     ->cast(@InstanceValue).values
     ->cast(@FunctionDefinition<Any>).expressionSequence
     ->toOneMany()
  );
}

function <<access.private>> meta::legend::service::validation::inlineValueSpecification(vs: ValueSpecification[1], vars: Map<VariableExpression, ValueSpecification>[1]): ValueSpecification[1]
{
  $vs->match([
    fe: FunctionExpression[1] | ^$fe(parametersValues = $fe.parametersValues->evaluateAndDeactivate()->map(x | $x->meta::legend::service::validation::inlineValueSpecification($vars))),
    iv: InstanceValue[1] | ^$iv(
      values = $iv.values->evaluateAndDeactivate()->map(val | $val->match([
        l: LambdaFunction<Any>[1] | ^$l(expressionSequence = $l.expressionSequence->evaluateAndDeactivate()->at(0)->meta::legend::service::validation::inlineValueSpecification($vars)),
        v: ValueSpecification[1] | $v->meta::legend::service::validation::inlineValueSpecification($vars),
        a: Any[1] | $a
      ]))
    ),
    ve: VariableExpression[1] | let resolved = $ve->meta::legend::service::validation::resolveVariable($vars); if ($resolved->isEmpty(), | $ve, | $resolved->toOne());,
    v: ValueSpecification[1] | $v
  ]);
}

function <<access.private>> meta::legend::service::validation::resolveVariable(v: VariableExpression[1], vars: Map<VariableExpression, ValueSpecification>[1]): ValueSpecification[0..1]
{
  $vars->keyValues()->filter(p | $p.first.name == $v.name).second->first()->cast(@ValueSpecification);
}

function meta::legend::service::validation::extractAssertMessage(validation: FunctionDefinition<Any>[1]): String[1]
{
  let assertExpression = $validation.expressionSequence->evaluateAndDeactivate()->last()->cast(@SimpleFunctionExpression);
  assert($assertExpression.func->in([
    meta::legend::service::validation::assertTabularDataSetEmpty_TabularDataSet_1__String_1__Boolean_1_,
    meta::legend::service::validation::assertCollectionEmpty_Any_MANY__String_1__Boolean_1_
  ]));

  $assertExpression.parametersValues->at(1)->cast(@InstanceValue).values->toOne()->cast(@String);
}

function meta::legend::service::validation::assertCollectionEmpty(collection: Any[*], message: String[1]):Boolean[1]
{
   $collection->assertEmpty($message);
}

function meta::legend::service::validation::assertTabularDataSetEmpty(tds: TabularDataSet[1], message: String[1]):Boolean[1]
{
   $tds->tdsRows()->assertEmpty($message);
}