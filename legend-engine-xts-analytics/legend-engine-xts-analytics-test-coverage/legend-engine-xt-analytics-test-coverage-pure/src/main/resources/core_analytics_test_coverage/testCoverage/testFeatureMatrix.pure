import meta::pure::test::mft::*;
import meta::pure::testCoverage::featureMatrix::*;
// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


function <<QueryType.tds,QueryFeature.sort,access.private>> meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN():FunctionDefinition<{->Any[1]}>[1]
{ 
     {|'test'};
}

function <<QueryType.tds,QueryFeature.filter,access.private>> meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN2():FunctionDefinition<{->Any[1]}>[1]
{ 
     {|'test'};
}

function <<QueryType.tds,QueryFeature.filter,access.private>> meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN3():FunctionDefinition<{->Any[1]}>[1]
{ 
     {|'test'};
}

function <<QueryType.tds,QueryFeature.filter,access.private>> meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN4():FunctionDefinition<{->Any[1]}>[1]
{ 
     {|'test'};
}

function <<MappingFeature.filter, access.private>> meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestMappingTest():MFTMappingTest[1]
{ 
    ^MFTMappingTest(setupData = ^meta::pure::test::mft::SetupData(),
                    mapping=meta::analytics::testCoverage::featureMatrix::tests::testMapping,
                    assertions = [^TestAssertion(tests = meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN2__FunctionDefinition_1_),
                                  ^IgnoreTest(tests = meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN3__FunctionDefinition_1_,reason='ignored due to error'),
                                  ^TestErrorAssertion(tests = meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN4__FunctionDefinition_1_, expectedErrorMessage = 'Asserted error')
                                 ]
                    )
} 


 function <<test.Test>> meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrix():Boolean[1]
 {
  let featureTests =[pair('meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN2__FunctionDefinition_1_', meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN2__FunctionDefinition_1_ ),
                    pair('meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN__FunctionDefinition_1_', meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN__FunctionDefinition_1_ ),
                    pair('meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN3__FunctionDefinition_1_', meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN3__FunctionDefinition_1_ ),
                    pair('meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN4__FunctionDefinition_1_', meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN4__FunctionDefinition_1_ )

            ]->newMap();
 

  let features = [^FeatureSet(name='testSet',features=[QueryFeature->stereotype('filter'),QueryType->stereotype('tds'),MappingFeature->stereotype('filter')]), //covered should not be in result
                  ^FeatureSet(name='testSet2',features=[MappingFeature->stereotype('filter'),MappingFeature->stereotype('union')]), //not covered
                  ^FeatureSet(name='testSet3',features=[MappingFeature->profileSubSet(['filter'])]) , //covered should not be in result
                  ^FeatureSet(name='testSet4',features=[MappingFeature->profileSubSet(['groupBy'])]) //not supported by test store
                  ];
  



  let report = meta::analytics::testCoverage::featureMatrix::buildStoreReport( meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestMappingTest__MFTMappingTest_1_,$featureTests,$features,'test','testStore', ^FeatureSet(features=[MappingFeature->profileSubSet(['groupBy'])]));
  let expected  = [
         ^FeatureResult(featureTests=^FeatureTest(functionName='meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN2__FunctionDefinition_1_', assertionType=FeatureResultAssertionType.Assertion),  
                                mappingFeature='filter',
                                queryFeature='filter',
                                sourceTypeFeature = 'tds',
                                store = 'testStore',
                                testCollection = 'meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestMappingTest__MFTMappingTest_1_',
                                testType= 'test'),
         ^FeatureResult(featureTests=^FeatureTest(message= 'ignored due to error', functionName='meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN3__FunctionDefinition_1_', assertionType=FeatureResultAssertionType.Ignore),
                                mappingFeature='filter',
                                queryFeature='filter',
                                sourceTypeFeature = 'tds',
                                store = 'testStore',
                                testCollection = 'meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestMappingTest__MFTMappingTest_1_',
                                testType= 'test'),
         ^FeatureResult(featureTests=^FeatureTest(message= 'Asserted error', functionName='meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN4__FunctionDefinition_1_', assertionType=FeatureResultAssertionType.AssertError),
                                mappingFeature='filter',
                                queryFeature='filter',
                                sourceTypeFeature = 'tds',
                                store = 'testStore',
                                testCollection = 'meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestMappingTest__MFTMappingTest_1_',
                                testType= 'test'),

        ^FeatureResult(featureTests=^FeatureTest(functionName='meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestFN__FunctionDefinition_1_', assertionType=FeatureResultAssertionType.Untested),
        mappingFeature='filter',
        queryFeature='sort',
        sourceTypeFeature = 'tds',
        store = 'testStore',
        testCollection = 'meta::analytics::testCoverage::featureMatrix::tests::testFeatureMatrixtestMappingTest__MFTMappingTest_1_',
        testType= 'test'),
       ^FeatureResult(
        mappingFeature=['filter','union'],
        store = 'testStore',
        testType='test') ,
       ^FeatureResult(
        mappingFeature=['groupBy'],
        store = 'testStore',
        testType='test',
        supportedFeature=false)
  ];

assert($report->removeAll($expected,{ a,b | $a.featureTests ==$b.featureTests &&
                                                  $a.mappingFeature == $b.mappingFeature  &&
                                                  $a.queryFeature == $b.queryFeature    &&                     
                                                  $a.testType == $b.testType    &&   
                                                  $a.store == $b.store    &&   
                                                  $a.sourceTypeFeature == $b.sourceTypeFeature  &&
                                                  $a.testCollection == $b.testCollection  &&
                                                  $a.supportedFeature == $b.supportedFeature

      })->isEmpty());
 }
  
  
###Mapping
Mapping meta::analytics::testCoverage::featureMatrix::tests::testMapping
()