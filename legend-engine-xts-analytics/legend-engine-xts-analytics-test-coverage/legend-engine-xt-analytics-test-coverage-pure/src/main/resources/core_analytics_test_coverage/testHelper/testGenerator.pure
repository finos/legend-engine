

###Pure
import meta::analytics::lineage::*;
import meta::analytics::testCoverage::*;
import meta::pure::graphFetch::execution::*;
import meta::core::runtime::*;
import meta::relational::fct::testGeneration::*;
import meta::pure::mapping::*;
import meta::relational::runtime::*;
import meta::protocols::pure::vX_X_X::metamodel::valueSpecification::raw::*;
import meta::protocols::pure::vX_X_X::metamodel::invocation::execution::execute::*;
import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::toPureGrammar::*;
import meta::relational::extension::*;
import meta::relational::fct::*;
import meta::pure::test::fct::*;
import meta::pure::testCoverage::featureMatrix::*;
import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::valueSpecification::*;
   

function  {doc.doc ='Use this function to generate the assertions for a mapping test collection. The collection should be created with a mapping and setup data and this function will generate assertions for any missing features'}
meta::analytics::testCoverage::testGeneratorBulkUpdate(package:Package[1], adapter:FCTAdapter[1], skipTDS:Boolean[1]):String[1]   //FCT mapping   with the mapping and the data setup 
{
  let testFunctions = $package->getAllPackageElements(true)->filter(e|$e->hasStereotype('testCollection',meta::pure::test::fct::model::FCT))->cast(@ConcreteFunctionDefinition<{->FCTMappingTest[1]}>);
    $testFunctions->map(f| 'Mapping'->println(); 
                            $f->elementToPath()->println();
                            
                            let result = $f->cast(@ConcreteFunctionDefinition<{->FCTMappingTest[1]}>)->testGenerator($adapter,$skipTDS);
                            'Done\n'->println();
                            $result->println(););

  'a';
}  


function  {doc.doc ='Use this function to generate the assertions for a mapping test collection. The collection should be created with a mapping and setup data and this function will generate assertions for any missing features'}
meta::analytics::testCoverage::testGenerator(fctTestfn:ConcreteFunctionDefinition<{->FCTMappingTest[1]}>[1], adapter:FCTAdapter[1], skipTDS:Boolean[1]):String[1]   //FCT mapping   with the mapping and the data setup 
{
  let fctTest= $fctTestfn->eval();
  let mapping = $fctTest.mapping->first()->toOne();
  let allTests =  meta::pure::testCoverage::featureMatrix::collectFCTFeatures();  
  let existingTest =  $fctTest.assertions.tests->map(t|$t->elementToPath());
  let lineageSkipLists  =  $fctTest.assertions->filter(a|$a->instanceOf(TestAssertion) ||  $a->instanceOf(IgnoreLineageTest) || $a->instanceOf(TestErrorAssertion)).tests->map(e|$e->elementToPath()); 
  let executionSkipLists  =  $fctTest.assertions->filter(a|$a->instanceOf(TestAssertion) ||  $a->instanceOf(IgnoreExecutionTest) || $a->instanceOf(TestErrorAssertion)).tests->map(e|$e->elementToPath());  
  let setupData =  $fctTest.setupData;
  if($adapter.setup->isNotEmpty(),
      |$adapter.setup->toOne()->eval($fctTestfn),|[]);
  
 
  let rt =  $adapter.runtime->toOne()->eval($fctTest);
  let state = meta::protocols::pure::vX_X_X::transformation::fromPureGraph::toPureGrammar::defaultAlloyToPureState([]);
  let updatedState =  ^$state( removeFunctionPaths= false, 
                                forceFullElementPaths=true,
                              injectFirstParamFuncs = meta::pure::test::fct::expectedLineage_String_MANY__String_MANY__String_1__ExpectedLineage_1_,
                              funcs=$state.funcs->put(meta::pure::test::fct::expectedLineage_String_MANY__String_MANY__String_1__ExpectedLineage_1_.name->toOne(), list(meta::pure::test::fct::expectedLineage_String_MANY__String_MANY__String_1__ExpectedLineage_1_)));


  let asserts = $allTests->keyValues()->sortBy({v:meta::pure::functions::collection::Pair<String,ConcreteFunctionDefinition<Any>>[1]|$v.second->elementToPath()})
                                        ->map( m:meta::pure::functions::collection::Pair<String,ConcreteFunctionDefinition<Any>>[1]|  
                                                  let v = $m.second;
                                                   let fn =  $v.expressionSequence->cast(@InstanceValue)->evaluateAndDeactivate().values->at(0)->cast(@FunctionDefinition<{->Any[*]}>);
                                                  let fnExpression =  $v.expressionSequence->cast(@InstanceValue)->evaluateAndDeactivate().values->at(0)->cast(@FunctionDefinition<{->Any[*]}>).expressionSequence->at(0);
$v->elementToPath()->println();
                                                   let  testExp = $v->testReference();
                                                  if($skipTDS && $v->hasStereotype('tds',QueryType),
                                          |[],

                                                                        
                                                                                      
   
                                           | 
                                            let lineageAssertion =  if(!$m.first->in($lineageSkipLists),
                                                                        |        let config = buildDefaultAnalyticsConfig();
                                                                                  let updatedConfig = ^$config(relationTree=false);

                                                                        
                                                                           let lineage =   meta::analytics::lineage::computeLineage($fn,$mapping,$rt,relationalExtensions(),$updatedConfig);
                                                                         meta::analytics::lineage::lineageAssertion($lineage);,
                                                                         |[]);   
                                             let expectedExecutionResultExp =   if(!$m.first->in($executionSkipLists),
                                                                                | let testType = if($v->hasStereotype('tds',QueryType),|'tds',|'graphFetch');

                                                                                  let execute= if($v->hasStereotype('graphFetch',QueryType),
                                                                                                          |let graph =  $fnExpression->cast(@SimpleFunctionExpression)->toOne().parametersValues->at(1)->cast(@InstanceValue).values->at(0)->cast(@meta::pure::graphFetch::RootGraphFetchTree<Any>);
                                                                                                            meta::legend::executeLegendQuery(|$fnExpression->from( $mapping,$rt)->serialize($graph), [], ^meta::pure::runtime::ExecutionContext(), relationalExtensions()); ,
                                                                                                          | meta::legend::executeLegendQuery(|$fnExpression->from( $mapping,$rt), [], ^meta::pure::runtime::ExecutionContext(), relationalExtensions());  
                                                                                                  );
                                                                                    $execute->meta::relational::fct::testGeneration::buildExpectedInstance($testType);,
                                                                               |[]);
                                                          if($lineageAssertion->isEmpty() &&  $expectedExecutionResultExp ->isEmpty() ,
                                                              |[],
                                                               | let assert =  ^TestAssertion( tests= [],  expectedExecutionResult = [] ,expectedLineageResult=[] )->deactivate();
                                                                let assertVS = $assert->transformValueSpecification([], newMap([]->cast(@meta::pure::functions::collection::Pair<String, meta::pure::functions::collection::List<Any>>)), false, false, relationalExtensions())->cast(@meta::protocols::pure::vX_X_X::metamodel::m3::valuespecification::AppliedFunction);
                                                                let assertKeys =  $assertVS.parameters->at(2)->cast(@meta::protocols::pure::vX_X_X::metamodel::m3::valuespecification::Collection);
                                                                let newCollection = ^$assertKeys(values =$testExp->concatenate($expectedExecutionResultExp)->concatenate($lineageAssertion));
                                                                let updatedParams =  $assertVS.parameters->take(2) ->concatenate($newCollection);
                                                                let updatedAssert =  toPure($updatedState , ^$assertVS( parameters =  $updatedParams)); 
                                                                $updatedAssert;
                                                          );
                                                  );
                              )->joinStrings(',\n');

}


