

###Pure
import meta::relational::fct::testGeneration::*;
import meta::pure::mapping::*;
import meta::relational::runtime::*;
import meta::protocols::pure::vX_X_X::metamodel::valueSpecification::raw::*;
import meta::protocols::pure::vX_X_X::metamodel::invocation::execution::execute::*;
import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::toPureGrammar::*;
import meta::relational::extension::*;
import meta::relational::fct::*;
import meta::pure::test::fct::*;
import meta::pure::testCoverage::featureMatrix::*;
import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::valueSpecification::*;
   
       
function  {doc.doc ='Use this function to generate the assertions for a mapping test collection. The collection should be created with a mapping and setup data and this function will generate assertions for any missing features'}
meta::analytics::testCoverage::testGenerator(fctTest:FCTMappingTest[1]):String[1]   //FCT mapping   with the mapping and the data setup 
{
  let mapping = $fctTest.mapping;
  let allTests =  meta::pure::testCoverage::featureMatrix::collectFCTFeatures();  
  let existingTest =  $fctTest.assertions.tests->map(t|$t->elementToPath());
  let tests = $allTests->keyValues()->filter(t|!$t.first->in( $existingTest)); //filter out exists tests in the mapping .  
  let setupData =  $fctTest.setupData;
 
  meta::relational::fct::setupDataRunner($setupData,DatabaseType.H2);
  let rt = meta::relational::fct::relationalRunTime($fctTest,DatabaseType.H2);
  let state = meta::protocols::pure::vX_X_X::transformation::fromPureGraph::toPureGrammar::defaultAlloyToPureState([]);
  let updatedState =  ^$state( removeFunctionPaths= true, 
                              injectFirstParamFuncs = meta::pure::test::fct::expectedLineage_String_MANY__String_MANY__String_1__ExpectedLineage_1_,
                              funcs=$state.funcs->put(meta::pure::test::fct::expectedLineage_String_MANY__String_MANY__String_1__ExpectedLineage_1_.name->toOne(), list(meta::pure::test::fct::expectedLineage_String_MANY__String_MANY__String_1__ExpectedLineage_1_)));


  let asserts = $tests.second->map( v:ConcreteFunctionDefinition<{->FunctionDefinition<{->Any[1]}>[1]}>[1]|  
  
                        let fn = $v.expressionSequence->cast(@InstanceValue)->evaluateAndDeactivate().values->at(0)->cast(@FunctionDefinition<{->Any[*]}>).expressionSequence;
                        let lineage =   meta::analytics::lineage::computeLineage(|$fn,$mapping,$rt,relationalExtensions());
                       let lineageAssertion =   meta::analytics::lineage::lineageAssertion($lineage);
                         let execute =   meta::legend::executeLegendQuery(|$fn->from( $mapping,$rt), [], ^meta::pure::runtime::ExecutionContext(), relationalExtensions()); 
                        let testType = if($v->hasStereotype('tds',QueryType),|'tds',|'graphFetch');
                        let expectedExecutionResultExp = $execute->meta::relational::fct::testGeneration::buildExpectedInstance($testType);
                        let  testExp = $v->testReference();
                        let assert =  ^TestAssertion( tests= [],  expectedExecutionResult = [] ,expectedLineageResult=[] )->deactivate();
                        let assertVS = $assert->transformValueSpecification([], newMap([]->cast(@meta::pure::functions::collection::Pair<String, meta::pure::functions::collection::List<Any>>)), false, false, relationalExtensions())->cast(@meta::protocols::pure::vX_X_X::metamodel::m3::valuespecification::AppliedFunction);
                        let assertKeys =  $assertVS.parameters->at(2)->cast(@meta::protocols::pure::vX_X_X::metamodel::m3::valuespecification::Collection);
                        let newCollection = ^$assertKeys(values =$testExp->concatenate($expectedExecutionResultExp)->concatenate($lineageAssertion));
                        let updatedParams =  $assertVS.parameters->take(2) ->concatenate($newCollection);
                        let updatedAssert =  toPure($updatedState , ^$assertVS( parameters =  $updatedParams)); 



                              )->joinStrings('/n');

}
