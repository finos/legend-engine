// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::analytics::class::modelCoverage::utility::*;

function {doc.doc = 'Get the parent or super types of the provided class'}
  meta::analytics::class::modelCoverage::utility::superTypes(class : Class<Any>[1], recursive:Boolean[1]) : Class<Any>[*]
{
   let types = if ($recursive, | $class->generalizations(), | $class.generalizations.general.rawType);

   $types->map(rw|
         $rw->match([
               c:Class<Any>[1] | if($c != Any && $c != $class, | $c, | []),
               a:Any[1] | []
            ])
   );
}

function {doc.doc = 'Get the parent or super types of the provided class recursively'}
  meta::analytics::class::modelCoverage::utility::superTypes(class : Class<Any>[1]) : Class<Any>[*]
{
   $class->superTypes(true);
}