import meta::protocols::pure::vX_X_X::metamodel::m3::valuespecification::constant::datatype::primitive::*;
import meta::protocols::pure::vX_X_X::metamodel::v3::valueSpecification::raw::*;
import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::toPureGrammar::*;
import meta::relational::extension::*;
import meta::pure::test::fct::*;
import meta::relational::metamodel::relation::*;

// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



function   meta::analytics::lineage::computeTestLineageWrapper(parameters:meta::pure::test::fct::TestParameters[1]):Boolean[1]
{ 
 
          let fn =  $parameters.test->at(0).expressionSequence->cast(@InstanceValue)->evaluateAndDeactivate().values->at(0)->cast(@FunctionDefinition<{->Any[*]}>);

          if($parameters.expectedErrorMessage->isNotEmpty(),
              |  true, //error messages currently only for execute flow 
              |       let lineage = meta::analytics::lineage::computeLineage(|$fn,$parameters.mapping,$parameters.runtime,relationalExtensions());
                     let result = ^meta::pure::test::fct::LineageResult(result=  ^meta::pure::lineage::result::LineageResult(storeLineage=$lineage.databaseLineage,
                                                                                                classLineage=$lineage.classLineage,
                                                                                                reportLineage= $lineage.reportLineage->meta::analytics::lineage::reportLineageToPureReportLineage() ));
                   meta::pure::test::fct::assertLineageResult($result,$parameters.expectedLineageResult,$parameters.test->elementToPath());
          );
  
}



function meta::analytics::lineage::reportLineageToPureReportLineage(report:meta::analytics::lineage::ReportLineage[1]):meta::pure::lineage::result::ReportLineage[1]
{
   ^meta::pure::lineage::result::ReportLineage(properties=$report.columns->map(c | ^meta::pure::lineage::result::PropertyLineage(propertyName=$c.name, resultDetail=  $c.columns->map(t|$t.column.owner->cast(@Table).name->toOne()+'.'+$t.column.name->toOne()+' <'+$t.context+'>')->removeDuplicates()->sort()->makeString(': [', ', ', ']'))));
}


function   meta::analytics::lineage::lineageAssertion(lineage:meta::analytics::lineage::FunctionAnalytics[1]):meta::protocols::pure::vX_X_X::metamodel::m3::function::KeyExpression[1]
{ 
    let store = $lineage.databaseLineage.nodes.data.id->sort();
    let class =  $lineage.classLineage.nodes.data.id->sort();
    let report = meta::pure::lineage::analytics::reportLineageToString($lineage.reportLineage->meta::analytics::lineage::reportLineageToPureReportLineage());
    let vs = meta::pure::test::fct::expectedLineage($store,$class,$report)->deactivate()->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::valueSpecification::transformValueSpecification([], [pair('store',list($store)),pair('class',list($class)),pair('report',list($report))]->newMap()   , true, true, relationalExtensions())->cast(@meta::protocols::pure::vX_X_X::metamodel::m3::valuespecification::AppliedFunction);
    ^meta::protocols::pure::vX_X_X::metamodel::m3::function::KeyExpression(_type='keyExpression',key=^CString(_type='string',value='expectedLineageResult'),expression=$vs);

}


