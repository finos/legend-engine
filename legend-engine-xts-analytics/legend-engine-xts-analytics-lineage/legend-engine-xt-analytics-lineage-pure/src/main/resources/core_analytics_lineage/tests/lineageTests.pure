// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::analytics::lineage::graph::*;
import meta::relational::extension::*;
import meta::pure::functions::date::calendar::*;
import meta::relational::tests::functions::pureToSqlQuery::calendarAggregations::*;

function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::calendarAggregations():Boolean[1]
{
 let r = meta::analytics::lineage::computeLineage(|  Employee.all()
     ->groupBy(
       [p|$p.hireDate],
       [ agg(p | annualized($p.hireDate, 'NY', %2022-11-16, $p.fteFactor), y | $y->sum()) ],
       ['includedDate','annualized'])
     ->filter(x | isNotEmpty($x.getNumber('annualized')))
     ->restrict(['includedDate'])
   ,EmployeeMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
  assertSameElements(['Lambda','tb_EmployeeDatabasedefaultEmployeeTable','db_EmployeeDatabase'], $r.databaseLineage.nodes.data.id);

}



###Pure 
import meta::analytics::lineage::*;
import meta::relational::extension::*;
import meta::relational::metamodel::join::*;
import meta::relational::tests::tds::tdsJoin::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testMultipleDB():Boolean[1]
{

    let fn= {|testJoinTDS_Person.all()->meta::pure::tds::project([col(p|$p.firstName, 'firstName'), col(p|$p.employerID, 'eID'), col(p|$p.managerID, 'managerID')])
                                     ->join(testJoinTDS_Firm.all()->project([col(p|$p.firmID, 'fID'), col(p|$p.legalName, 'legalName')]), JoinType.INNER, {a,b|$a.getInteger('eID') == $b.getInteger('fID');});};
                       
                        

    let lineage = computeLineage($fn,meta::relational::tests::tds::tdsJoin::testJoinTDSMappingTwoDatabaseWithColumnsMappedViaJoinsAndDynaFunction, meta::relational::tests::tds::tdsJoin::twoDBRunTime(), meta::relational::extension::relationalExtensions());
    assertSameElements(['Lambda', 'tb_dbIncdefaultpersonTable', 'tb_dbIncdefaultfirmTable', 'tb_database2defaultfirmTable', 'db_dbInc', 'db_database2'],$lineage.databaseLineage.nodes.data.id);

}


###Pure
import meta::pure::lineage::scanRelations::*;
import meta::relational::extension::*;
import meta::relational::metamodel::join::*;
import meta::analytics::lineage::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testSelfJoin():Boolean[1]
{

    let fn= {|Firm.all()->project([
                                  f|$f.employees.address.name
                                ],
                                [

                                   'addressName'
                                ])  ->join(Firm.all()->project([
                                  f|$f.employees.address.name
                                ],
                                [
                                   'addressName2'
                                ]) , JoinType.INNER, {a,b|$a.getString('addressName') == $b.getString('addressName2');});};



    let lineage = computeLineage($fn,simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
    assertSameElements(['Lambda', 'tb_dbIncdefaultfirmTable', 'tb_dbIncdefaultpersonTable', 'tb_dbIncdefaultaddressTable', 'db_dbInc'],$lineage.databaseLineage.nodes.data.id);

}


###Pure
import meta::analytics::lineage::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testProjectWithIsolatedFilter():Boolean[1]
{
   let fn =  { |Firm.all()->project([ f|$f.legalName,
                                  f|$f.employees.address->filter(a|$a.name=='Bob'  && $f.legalName=='Co' ).name->toOne()
                                ],
                                [
                                   'legalName',
                                   'addressName'
                                ])};
    let lineage = computeLineage($fn,simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
    assertSameElements(['Lambda', 'tb_dbIncdefaultfirmTable', 'tb_dbIncdefaultpersonTable', 'tb_dbIncdefaultaddressTable', 'db_dbInc'],$lineage.databaseLineage.nodes.data.id);

}

###Pure
import meta::relational::metamodel::join::*;
import meta::analytics::lineage::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testTDSJoinWithAdditionalTables():Boolean[1]
{
    let fn= {|Firm.all()->project([  f|$f.legalName,
                                  f|$f.employees.address.name
                                ],
                                [
                                  'legalName',
                                   'addressName'
                                ])  ->join(Person.all()->project([  f|$f.firstName,
                                  f|$f.address.name
                                ],
                                [ 'firstname',
                                   'addressName2'
                                ]) , JoinType.INNER, {a,b|$a.getString('legalName') == $b.getString('firstname')   && $a.getString('addressName') == $b.getString('addressName2')    ;});};
    let lineage = computeLineage($fn,simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
    assertSameElements(['Lambda', 'tb_dbIncdefaultpersonTable', 'tb_dbIncdefaultaddressTable', 'tb_dbIncdefaultfirmTable', 'db_dbInc'],$lineage.databaseLineage.nodes.data.id);


}
