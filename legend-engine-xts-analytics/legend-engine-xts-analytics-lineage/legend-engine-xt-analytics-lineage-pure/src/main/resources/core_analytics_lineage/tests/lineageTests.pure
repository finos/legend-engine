// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::analytics::lineage::graph::*;
import meta::relational::extension::*;
import meta::pure::functions::date::calendar::*;
import meta::relational::tests::functions::pureToSqlQuery::calendarAggregations::*;

function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::calendarAggregations():Boolean[1]
{
 let lineage = meta::analytics::lineage::computeLineage(|  Employee.all()
     ->groupBy(
       [p|$p.hireDate],
       [ agg(p | annualized($p.hireDate, 'NY', %2022-11-16, $p.fteFactor), y | $y->sum()) ],
       ['includedDate','annualized'])
     ->filter(x | isNotEmpty($x.getNumber('annualized')))
     ->restrict(['includedDate'])
   ,EmployeeMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_EmployeeDatabase', 'tb_EmployeeDatabasedefaultEmployeeTable'],
                                          ['Lambda', 'meta::pure::tds::TDSRow', 'meta::relational::tests::functions::pureToSqlQuery::calendarAggregations::Employee', 'pack_meta::pure::tds', 'pack_meta::relational::tests::functions::pureToSqlQuery::calendarAggregations'],
                                          '[annualized: [EmployeeTable.fteFactor <TableAliasColumn>, EmployeeTable.hireDate <TableAliasColumn>], includedDate: [EmployeeTable.hireDate <TableAliasColumn>]]',
                                           $lineage);
}



###Pure
import meta::analytics::lineage::*;
import meta::relational::extension::*;
import meta::relational::metamodel::join::*;
import meta::relational::tests::tds::tdsJoin::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testMultipleDB():Boolean[1]
{

    let fn= {|testJoinTDS_Person.all()->meta::pure::tds::project([col(p|$p.firstName, 'firstName'), col(p|$p.employerID, 'eID'), col(p|$p.managerID, 'managerID')])
                                     ->join(testJoinTDS_Firm.all()->project([col(p|$p.firmID, 'fID'), col(p|$p.legalName, 'legalName')]), JoinType.INNER, {a,b|$a.getInteger('eID') == $b.getInteger('fID');});};

   let lineage = computeLineage($fn,meta::relational::tests::tds::tdsJoin::testJoinTDSMappingTwoDatabaseWithColumnsMappedViaJoinsAndDynaFunction, meta::relational::tests::tds::tdsJoin::twoDBRunTime(), meta::relational::extension::relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_database2', 'db_dbInc', 'tb_database2defaultfirmTable', 'tb_dbIncdefaultfirmTable', 'tb_dbIncdefaultpersonTable'],
                                            ['Lambda', 'meta::pure::tds::TDSRow', 'meta::relational::tests::tds::tdsJoin::testJoinTDS_Firm', 'meta::relational::tests::tds::tdsJoin::testJoinTDS_Person', 'pack_meta::pure::tds', 'pack_meta::relational::tests::tds::tdsJoin'],
                                            '[eID: [firmTable.ID <JoinTreeNode>, firmTable.ID <RelationalOperationElementWithJoin>, personTable.FIRMID <JoinTreeNode>], fID: [firmTable.ID <TableAliasColumn>], firstName: [personTable.FIRSTNAME <TableAliasColumn>], legalName: [firmTable.LEGALNAME <TableAliasColumn>], managerID: [personTable.MANAGERID <DynaFunction>]]',
                                           $lineage);

 }


###Pure
import meta::pure::lineage::scanRelations::*;
import meta::relational::extension::*;
import meta::relational::metamodel::join::*;
import meta::analytics::lineage::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testSelfJoin():Boolean[1]
{

    let fn= {|Firm.all()->project([
                                  f|$f.employees.address.name
                                ],
                                [

                                   'addressName'
                                ])  ->join(Firm.all()->project([
                                  f|$f.employees.address.name
                                ],
                                [
                                   'addressName2'
                                ]) , JoinType.INNER, {a,b|$a.getString('addressName') == $b.getString('addressName2');});};



    let lineage = computeLineage($fn,simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'tb_dbIncdefaultpersonTable', 'tb_dbIncdefaultaddressTable', 'tb_dbIncdefaultfirmTable', 'db_dbInc'],
                                          ['Lambda', 'meta::pure::tds::TDSRow', 'meta::relational::tests::model::simple::Address', 'meta::relational::tests::model::simple::Firm', 'meta::relational::tests::model::simple::Person', 'pack_meta::pure::tds', 'pack_meta::relational::tests::model::simple'],
                                          '[addressName2: [addressTable.ID <JoinTreeNode>, addressTable.NAME <TableAliasColumn>, firmTable.ID <JoinTreeNode>, personTable.ADDRESSID <JoinTreeNode>, personTable.FIRMID <JoinTreeNode>], addressName: [addressTable.ID <JoinTreeNode>, addressTable.NAME <TableAliasColumn>, firmTable.ID <JoinTreeNode>, personTable.ADDRESSID <JoinTreeNode>, personTable.FIRMID <JoinTreeNode>]]',
                                           $lineage);
}

###Pure 
import meta::pure::lineage::scanRelations::*;
import meta::relational::extension::*;
import meta::relational::metamodel::join::*;
import meta::analytics::lineage::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testTDSJoinOnQualifiedProperty():Boolean[1]
{

    let fn= {|Person.all()->meta::pure::tds::project([col(p|$p.name, 'name')])
                                     ->join(Firm.all()->project([col(p|$p.legalName, 'eName')]), JoinType.INNER, {a,b|$a.getString('name') == $b.getString('eName');});
              };
                       
                        

    let lineage = computeLineage($fn,simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc', 'tb_dbIncdefaultfirmTable', 'tb_dbIncdefaultpersonTable'],
                                          ['Lambda', 'meta::pure::tds::TDSRow', 'meta::relational::tests::model::simple::Firm', 'meta::relational::tests::model::simple::Person', 'pack_meta::pure::tds', 'pack_meta::relational::tests::model::simple'],
                                          '[eName: [firmTable.LEGALNAME <TableAliasColumn>], name: [personTable.FIRSTNAME <TableAliasColumn>, personTable.LASTNAME <TableAliasColumn>]]',
                                           $lineage);
}


###Pure
import meta::analytics::lineage::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testProjectWithIsolatedFilter():Boolean[1]
{
   let fn =  { |Firm.all()->project([ f|$f.legalName,
                                  f|$f.employees.address->filter(a|$a.name=='Bob'  && $f.legalName=='Co' ).name->toOne()
                                ],
                                [
                                   'legalName',
                                  'addressName'
                                ])};
    let lineage = computeLineage($fn,simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'tb_dbIncdefaultpersonTable', 'tb_dbIncdefaultaddressTable', 'tb_dbIncdefaultfirmTable', 'db_dbInc'],
                                          ['Lambda', 'meta::relational::tests::model::simple::Address', 'meta::relational::tests::model::simple::Firm', 'meta::relational::tests::model::simple::Person', 'pack_meta::relational::tests::model::simple'],
                                          '[addressName: [addressTable.ID <JoinTreeNode>, addressTable.NAME <TableAliasColumn>, firmTable.ID <JoinTreeNode>, firmTable.LEGALNAME <TableAliasColumn>, personTable.ADDRESSID <JoinTreeNode>, personTable.FIRMID <JoinTreeNode>], legalName: [firmTable.LEGALNAME <TableAliasColumn>]]',
                                           $lineage);
}

###Pure
import meta::relational::metamodel::join::*;
import meta::analytics::lineage::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testTDSJoinWithAdditionalTables():Boolean[1]
{
    let fn= {|Firm.all()->project([  f|$f.legalName,
                                  f|$f.employees.address.name
                                ],
                                [
                                  'legalName',
                                   'addressName'
                                ])  ->join(Person.all()->project([  f|$f.firstName,
                                  f|$f.address.name
                                ],
                                [ 'firstname',
                                   'addressName2'
                                ]) , JoinType.INNER, {a,b|$a.getString('legalName') == $b.getString('firstname')   && $a.getString('addressName') == $b.getString('addressName2')    ;});};
    let lineage = computeLineage($fn,simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'tb_dbIncdefaultpersonTable', 'tb_dbIncdefaultaddressTable', 'tb_dbIncdefaultfirmTable', 'db_dbInc'],
                                          ['Lambda', 'meta::pure::tds::TDSRow', 'meta::relational::tests::model::simple::Address', 'meta::relational::tests::model::simple::Firm', 'meta::relational::tests::model::simple::Person', 'pack_meta::pure::tds', 'pack_meta::relational::tests::model::simple'],
                                          '[addressName2: [addressTable.ID <JoinTreeNode>, addressTable.NAME <TableAliasColumn>, personTable.ADDRESSID <JoinTreeNode>], addressName: [addressTable.ID <JoinTreeNode>, addressTable.NAME <TableAliasColumn>, firmTable.ID <JoinTreeNode>, personTable.ADDRESSID <JoinTreeNode>, personTable.FIRMID <JoinTreeNode>], firstname: [personTable.FIRSTNAME <TableAliasColumn>], legalName: [firmTable.LEGALNAME <TableAliasColumn>]]',
                                           $lineage);
}



###Pure
import meta::analytics::lineage::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testProjectWithIsolatedFilterMultiJoinTrees():Boolean[1]
{
   let fn =  { |Order.all()-> filter( p| $p.pnlContact->exists(l|$l.address.name == 'Main St' &&  $l.firm.legalName == 'Co' ))
                                 ->project([ f|$f.quantity ], ['quantity'])};
    let lineage = computeLineage($fn,simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_db', 'db_dbInc', 'tb_dbIncdefaultaddressTable', 'tb_dbIncdefaultfirmTable', 'tb_dbIncdefaultpersonTable', 'tb_dbdefaultaccountTable', 'tb_dbdefaultorderPnlTable', 'tb_dbdefaultorderTable', 'tb_dbdefaultsalesPersonTable'],
                                          ['Lambda', 'meta::relational::tests::model::simple::Address', 'meta::relational::tests::model::simple::Firm', 'meta::relational::tests::model::simple::Order', 'meta::relational::tests::model::simple::Person', 'pack_meta::relational::tests::model::simple'],
                                          '[quantity: [orderTable.quantity <TableAliasColumn>]]',
                                           $lineage);
}


###Pure
import meta::relational::metamodel::join::*;
import meta::analytics::lineage::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testFunctionWithLet():Boolean[1]
{
    let fn= {| let co = 'co';
              let foo = Firm.all()->filter(f|$f.legalName==$co)->project([  f|$f.legalName,
                                  f|$f.employees.address.name
                                ],
                                [
                                  'legalName',
                                   'addressName'
                                ]);};
    let lineage = computeLineage($fn,simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc', 'tb_dbIncdefaultaddressTable', 'tb_dbIncdefaultfirmTable', 'tb_dbIncdefaultpersonTable'],
                                          ['Lambda', 'meta::relational::tests::model::simple::Address', 'meta::relational::tests::model::simple::Firm', 'meta::relational::tests::model::simple::Person', 'pack_meta::relational::tests::model::simple'],
                                          '[addressName: [addressTable.ID <JoinTreeNode>, addressTable.NAME <TableAliasColumn>, firmTable.ID <JoinTreeNode>, personTable.ADDRESSID <JoinTreeNode>, personTable.FIRMID <JoinTreeNode>], legalName: [firmTable.LEGALNAME <TableAliasColumn>]]',
                                           $lineage);
}



###Pure
import meta::pure::executionPlan::*;
import meta::relational::metamodel::join::*;
import meta::analytics::lineage::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testFunctionWithMultiExpression():Boolean[1]
{
    let fn= {| 
              let  people = Person.all().firstName;
              Firm.all()->filter(f|$f.legalName->in($people))->project([  f|$f.legalName
                                
                                ],
                                [
                                  'legalName'
                                ]);};
 let lineage = computeLineage($fn,simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc', 'tb_dbIncdefaultfirmTable', 'tb_dbIncdefaultpersonTable'],
                                          ['Lambda', 'meta::relational::tests::model::simple::Firm', 'meta::relational::tests::model::simple::Person', 'pack_meta::relational::tests::model::simple'],
                                          '[legalName: [firmTable.LEGALNAME <TableAliasColumn>]]',
                                           $lineage);
}

###Pure
import meta::pure::graphFetch::execution::*;
import meta::relational::tests::model::simple::*;
function <<test.Test>> meta::analytics::lineage::tests::relational::graphFetch::testForSimpleRelationalGraphFetch():Boolean[1]
{
  let tree = #{
    Person {
        firstName,
        lastName
    }
  }#;

  let query = {|Person.all()->graphFetch($tree)->serialize($tree)};
  let mapping = meta::relational::tests::simpleRelationalMapping;
  let runtime = meta::external::store::relational::tests::testRuntime();

  let lineage = meta::analytics::lineage::computeLineage($query, $mapping, $runtime, meta::relational::extension::relationalExtensions());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc', 'tb_dbIncdefaultpersonTable'],
                                          ['Lambda', 'meta::relational::tests::model::simple::Person', 'pack_meta::relational::tests::model::simple'],
                                          '[Person.firstName: [personTable.FIRSTNAME <TableAliasColumn>], Person.lastName: [personTable.LASTNAME <TableAliasColumn>]]',
                                           $lineage);

}

function <<test.Test>> meta::analytics::lineage::tests::relational::graphFetch::testForComplextRelationalGraphFetch():Boolean[1]
{
  let tree = #{
    Person {
        firstName,
        lastName,
        firm {
          legalName
        },
        address {
          name,
          type
        }
    }
  }#;
  let query = {|Person.all()->graphFetch($tree)->serialize($tree)};
  let mapping = meta::relational::tests::simpleRelationalMapping;
  let runtime = meta::external::store::relational::tests::testRuntime();
  let lineage = meta::analytics::lineage::computeLineage($query, $mapping, $runtime, meta::relational::extension::relationalExtensions());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc', 'tb_dbIncdefaultaddressTable', 'tb_dbIncdefaultfirmTable', 'tb_dbIncdefaultpersonTable'],
                                          ['Lambda', 'meta::relational::tests::model::simple::Address', 'meta::relational::tests::model::simple::Firm', 'meta::relational::tests::model::simple::Person', 'pack_meta::relational::tests::model::simple'],
                                          '[Person.address.name: [addressTable.ID <JoinTreeNode>, addressTable.NAME <TableAliasColumn>, personTable.ADDRESSID <JoinTreeNode>], Person.address.type: [addressTable.ID <JoinTreeNode>, addressTable.TYPE <TableAliasColumn>, personTable.ADDRESSID <JoinTreeNode>], Person.firm.legalName: [firmTable.ID <JoinTreeNode>, firmTable.LEGALNAME <TableAliasColumn>, personTable.FIRMID <JoinTreeNode>], Person.firstName: [personTable.FIRSTNAME <TableAliasColumn>], Person.lastName: [personTable.LASTNAME <TableAliasColumn>]]',
                                           $lineage);
}

###Pure
import meta::relational::tests::milestoning::*;
import meta::pure::graphFetch::execution::*;
function <<test.Test>> meta::analytics::lineage::tests::relational::graphFetch::testForRelationalGraphFetchWithMilestoning():Boolean[1]
{
  let tree = #{
      Order {
         id,
         product(%2015-10-16) {
            name,
            type,
            classificationTypeStr
         }
      }
   }#;
  let query = {|Order.all()->graphFetch($tree)->serialize($tree)};
  let mapping = meta::relational::tests::milestoning::milestoningmap;
  let runtime = meta::external::store::relational::tests::testRuntime();

  let lineage = meta::analytics::lineage::computeLineage($query, $mapping, $runtime, meta::relational::extension::relationalExtensions());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_db', 'tb_dbdefaultOrderTable', 'tb_dbdefaultProductClassificationTable', 'tb_dbdefaultProductTable'],
                                          ['Lambda', 'meta::relational::tests::milestoning::Order', 'meta::relational::tests::milestoning::Product', 'pack_meta::relational::tests::milestoning'],
                                          '[Order.id: [OrderTable.id <TableAliasColumn>], Order.product.classificationTypeStr: [OrderTable.prodFk <JoinTreeNode>, ProductClassificationTable.type <JoinTreeNode>, ProductClassificationTable.type <TableAliasColumn>, ProductTable.id <JoinTreeNode>, ProductTable.type <JoinTreeNode>], Order.product.name: [OrderTable.prodFk <JoinTreeNode>, ProductTable.id <JoinTreeNode>, ProductTable.name <TableAliasColumn>], Order.product.type: [OrderTable.prodFk <JoinTreeNode>, ProductTable.id <JoinTreeNode>, ProductTable.type <TableAliasColumn>]]',
                                           $lineage);
}

###Pure
import meta::pure::graphFetch::tests::XStore::inMemoryAndRelational::*;
import meta::pure::graphFetch::execution::*;
function <<test.Test>> meta::analytics::lineage::tests::relational::graphFetch::testForRelationalGraphFetchWithCrossStore():Boolean[1]
{
  let tree = #{
      Trade {
         tradeId,
         product {
            productName
         }
      }
   }#;

  let query = {|Trade.all()->graphFetch($tree)->serialize($tree)};
  let mapping = meta::pure::graphFetch::tests::XStore::inMemoryAndRelational::crossMapping1;
  let runtime = meta::external::store::relational::tests::testRuntime();

  let lineage = meta::analytics::lineage::computeLineage($query, $mapping, $runtime, meta::relational::extension::relationalExtensions());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_db1', 'db_db2', 'tb_db1defaulttradeTable', 'tb_db2defaultproductTable'],
                                          ['Lambda', 'meta::pure::graphFetch::tests::XStore::inMemoryAndRelational::Product', 'meta::pure::graphFetch::tests::XStore::inMemoryAndRelational::Trade', 'pack_meta::pure::graphFetch::tests::XStore::inMemoryAndRelational'],
                                          '[Trade.product.productName: [productTable.productName <TableAliasColumn>], Trade.tradeId: [tradeTable.tradeId_source <TableAliasColumn>]]',
                                           $lineage);
}

###Pure
import meta::pure::graphFetch::execution::*;
import meta::relational::graphFetch::tests::union::rootLevel::*;
function <<test.Test>> meta::analytics::lineage::tests::relational::graphFetch::testForRelationalGraphFetchWithRootUnionSameStore():Boolean[1]
{
  let tree = #{
      Trade {
          tradeId,
          traderKerb,
          quantity,
          product {
            productId,
            productName,
            description
          }
      }
    }#;
  let query = {|Trade.all()->graphFetch($tree)->serialize($tree)};
  let mapping =  meta::relational::graphFetch::tests::union::rootLevel::SameStoreMapping;

  let runtime = meta::external::store::relational::tests::testRuntime();

  let lineage = meta::analytics::lineage::computeLineage($query, $mapping, $runtime, meta::relational::extension::relationalExtensions());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbUnion', 'tb_dbUniondefaultproductTable', 'tb_dbUniondefaultproductTable2', 'tb_dbUniondefaulttradeTable', 'tb_dbUniondefaulttradeTable2'],
                                          ['Lambda', 'meta::relational::graphFetch::tests::union::rootLevel::Product', 'meta::relational::graphFetch::tests::union::rootLevel::Trade', 'pack_meta::relational::graphFetch::tests::union::rootLevel'],
                                          '[Trade.product.description: [productTable.description <TableAliasColumn>, productTable.productId <JoinTreeNode>, productTable2.description <TableAliasColumn>, productTable2.productId <JoinTreeNode>, tradeTable.productId <JoinTreeNode>, tradeTable2.productId <JoinTreeNode>], Trade.product.productId: [productTable.productId <JoinTreeNode>, productTable.productId <TableAliasColumn>, productTable2.productId <JoinTreeNode>, productTable2.productId <TableAliasColumn>, tradeTable.productId <JoinTreeNode>, tradeTable2.productId <JoinTreeNode>], Trade.product.productName: [productTable.productId <JoinTreeNode>, productTable.productName <TableAliasColumn>, productTable2.productId <JoinTreeNode>, productTable2.productName <TableAliasColumn>, tradeTable.productId <JoinTreeNode>, tradeTable2.productId <JoinTreeNode>], Trade.quantity: [tradeTable.quantity <TableAliasColumn>, tradeTable2.quantity <TableAliasColumn>], Trade.tradeId: [tradeTable.tradeId <TableAliasColumn>, tradeTable2.tradeId <TableAliasColumn>], Trade.traderKerb: [tradeTable.traderKerb <TableAliasColumn>, tradeTable2.traderKerb <TableAliasColumn>]]',
                                          $lineage);
}

function <<test.Test>> meta::analytics::lineage::tests::relational::graphFetch::testForRelationalGraphFetchWithRootUnionCrossStore():Boolean[1]
{
  let tree = #{
        Trade {
          tradeId,
          traderKerb,
          quantity,
          product {
              productId,
              productName,
              description
          }
        }
    }#;
  let query = {|Trade.all()->graphFetch($tree)->serialize($tree)};
  let mapping =  meta::relational::graphFetch::tests::union::rootLevel::CrossStoreMapping;

  let runtime = meta::external::store::relational::tests::testRuntime();let lineage = meta::analytics::lineage::computeLineage($query, $mapping, $runtime, meta::relational::extension::relationalExtensions());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbUnion', 'db_dbUnion_XStore', 'tb_dbUnion_XStoredefaultproductTable_XStore', 'tb_dbUnion_XStoredefaulttradeTable_XStore', 'tb_dbUniondefaultproductTable', 'tb_dbUniondefaulttradeTable'],
                                          ['Lambda', 'meta::relational::graphFetch::tests::union::rootLevel::Product', 'meta::relational::graphFetch::tests::union::rootLevel::Trade', 'pack_meta::relational::graphFetch::tests::union::rootLevel'],
                                          '[Trade.product.description: [productTable.description <TableAliasColumn>, productTable.productId <JoinTreeNode>, productTable_XStore.description <TableAliasColumn>, productTable_XStore.productId <JoinTreeNode>, tradeTable.productId <JoinTreeNode>, tradeTable_XStore.productId <JoinTreeNode>], Trade.product.productId: [productTable.productId <JoinTreeNode>, productTable.productId <TableAliasColumn>, productTable_XStore.productId <JoinTreeNode>, productTable_XStore.productId <TableAliasColumn>, tradeTable.productId <JoinTreeNode>, tradeTable_XStore.productId <JoinTreeNode>], Trade.product.productName: [productTable.productId <JoinTreeNode>, productTable.productName <TableAliasColumn>, productTable_XStore.productId <JoinTreeNode>, productTable_XStore.productName <TableAliasColumn>, tradeTable.productId <JoinTreeNode>, tradeTable_XStore.productId <JoinTreeNode>], Trade.quantity: [tradeTable.quantity <TableAliasColumn>, tradeTable_XStore.quantity <TableAliasColumn>], Trade.tradeId: [tradeTable.tradeId <TableAliasColumn>, tradeTable_XStore.tradeId <TableAliasColumn>], Trade.traderKerb: [tradeTable.traderKerb <TableAliasColumn>, tradeTable_XStore.traderKerb <TableAliasColumn>]]',
                                          $lineage);
}


###Pure
import meta::relational::tests::model::simple::*;
import meta::pure::graphFetch::execution::*;
function <<test.Test>> meta::analytics::lineage::tests::relational::graphFetch::testForRelationalGraphFetchWithPropertyUnion():Boolean[1]
{
  let tree = #{
                Firm{
                  legalName,
                  employees{
                    lastName,
                    address{
                      name
                    }
                  }
                }
              }#;
  let query = {|Firm.all()->graphFetch($tree)->serialize($tree)};

  let mapping =  meta::relational::graphFetch::tests::union::propertyLevel::Mapping6;

  let runtime = meta::external::store::relational::tests::testRuntime();
  
  let lineage = meta::analytics::lineage::computeLineage($query, $mapping, $runtime, meta::relational::extension::relationalExtensions());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_myDB', 'tb_myDBdefaultAddressSet1', 'tb_myDBdefaultAddressSet2', 'tb_myDBdefaultAddressSet3', 'tb_myDBdefaultFirmSet1', 'tb_myDBdefaultFirmSet2', 'tb_myDBdefaultFirmSet3', 'tb_myDBdefaultPersonSet1', 'tb_myDBdefaultPersonSet2', 'tb_myDBdefaultPersonSet3'],
                                          ['Lambda', 'meta::relational::tests::model::simple::Address', 'meta::relational::tests::model::simple::Firm', 'meta::relational::tests::model::simple::Person', 'pack_meta::relational::tests::model::simple'],
                                          '[Firm.employees.address.name: [AddressSet1.ID <JoinTreeNode>, AddressSet1.name <TableAliasColumn>, AddressSet2.ID <JoinTreeNode>, AddressSet2.name <TableAliasColumn>, AddressSet3.ID <JoinTreeNode>, AddressSet3.name <TableAliasColumn>, FirmSet1.ID <JoinTreeNode>, FirmSet2.ID <JoinTreeNode>, FirmSet3.ID <JoinTreeNode>, PersonSet1.ADDRESSID <JoinTreeNode>, PersonSet1.FirmID <JoinTreeNode>, PersonSet2.ADDRESSID <JoinTreeNode>, PersonSet2.FirmID <JoinTreeNode>, PersonSet3.ADDRESSID <JoinTreeNode>, PersonSet3.FirmID <JoinTreeNode>], Firm.employees.lastName: [FirmSet1.ID <JoinTreeNode>, FirmSet2.ID <JoinTreeNode>, FirmSet3.ID <JoinTreeNode>, PersonSet1.FirmID <JoinTreeNode>, PersonSet1.lastName_s1 <TableAliasColumn>, PersonSet2.FirmID <JoinTreeNode>, PersonSet2.lastName_s2 <TableAliasColumn>, PersonSet3.FirmID <JoinTreeNode>, PersonSet3.lastName_s3 <TableAliasColumn>], Firm.legalName: [FirmSet1.name <TableAliasColumn>, FirmSet2.name <TableAliasColumn>, FirmSet3.name <TableAliasColumn>]]',
                                          $lineage);
}

//AggregationAware
###Pure
import meta::analytics::lineage::*;
import meta::relational::functions::asserts::*;
import meta::relational::extension::*;
import meta::relational::tests::aggregationAware::mapping::*;
import meta::relational::tests::aggregationAware::domain::*;
import meta::relational::tests::aggregationAware::*;
function <<test.Test>> meta::analytics::lineage::tests::testLineageForSimpleAggregationAwareQuery():Boolean[1]
{
  let query = {|
    Wholesales.all()->groupBy(
        [x|1],
        [agg(x|$x.revenue.price, y|$y->sum())],
        ['Name', 'Total Price Sum']
    )
  };
  let mapping = mappingWithMonthCannotBeAggregated;
  let runtime = runtime();

  let lineage = computeLineage($query, $mapping, $runtime, relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_aggregationAwareStore', 'tb_aggregationAwareStorebase_viewSalesTable'],
                                        ['Lambda', 'meta::relational::tests::aggregationAware::domain::Revenue', 'meta::relational::tests::aggregationAware::domain::Wholesales', 'pack_meta::relational::tests::aggregationAware::domain'],
                                        '[Name: [], Total Price Sum: [SalesTable.revenue <TableAliasColumn>]]',
                                          $lineage);

  let relationTree = 'root\n' +
                      '  ------> (t) SalesTable_Day [revenue]\n';
  assertEquals($relationTree, meta::pure::lineage::scanRelations::relationTreeAsString($lineage.relationTree));
}

function <<test.Test>> meta::analytics::lineage::tests::testLineageForComplexAggregationAwareQuery():Boolean[1]
{
  let query = {|
    meta::relational::tests::aggregationAware::domain::Wholesales.all()
    ->groupBy([x | $x.product.productId,
        x | $x.discount,
        x | $x.salesDate.date,
        x | $x.salesDate.fiscalMonth,
        x | $x.salesDate.fiscalYear],
              [agg(x | $x.revenue.price, y | $y->sum())],
              ['Product ID',
                  'Discount',
                  'Product Date/Date',
                  'Product Date/Fiscal Month/Value',
                  'Product Date/Fiscal Year/Value',
                  'Revenue/Total Price Sum']
        );
  };
  let mapping = simpleMapping;
  let runtime = runtime();

  let lineage = computeLineage($query, $mapping, $runtime, relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_aggregationAwareStore', 'tb_aggregationAwareStorebase_viewCalendar', 'tb_aggregationAwareStorebase_viewProduct', 'tb_aggregationAwareStorebase_viewSalesTable'],
                                        ['Lambda', 'meta::relational::tests::aggregationAware::domain::FiscalCalendar', 'meta::relational::tests::aggregationAware::domain::Product', 'meta::relational::tests::aggregationAware::domain::Revenue', 'meta::relational::tests::aggregationAware::domain::Wholesales', 'pack_meta::relational::tests::aggregationAware::domain'],
                                        '[Discount: [SalesTable.discount <TableAliasColumn>], Product Date/Date: [Calendar.dt_date <JoinTreeNode>, Calendar.dt_date <TableAliasColumn>, SalesTable.sales_date <JoinTreeNode>], Product Date/Fiscal Month/Value: [Calendar.dt_date <JoinTreeNode>, Calendar.fiscal_month <TableAliasColumn>, SalesTable.sales_date <JoinTreeNode>], Product Date/Fiscal Year/Value: [Calendar.dt_date <JoinTreeNode>, Calendar.fiscal_year <TableAliasColumn>, SalesTable.sales_date <JoinTreeNode>], Product ID: [Product.prod_id <JoinTreeNode>, Product.prod_id <TableAliasColumn>, SalesTable.product_id <JoinTreeNode>], Revenue/Total Price Sum: [SalesTable.revenue <TableAliasColumn>]]',
                                          $lineage);
  
  let relationTree = 'root\n' +
                      '  ------> (t) SalesTable [discount, product_id, revenue, sales_date]\n' +
                      '    ------> (t) Calendar(equal_rootsales_date_Calendar_d#3_d_m2dt_date) [dt_date, fiscal_month, fiscal_year]\n' +
                      '    ------> (t) Product(equal_rootproduct_id_Product_d#4prod_id) [prod_id]\n';

  assertEquals($relationTree, meta::pure::lineage::scanRelations::relationTreeAsString($lineage.relationTree));
}

function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testEmbeddedWithMilestonedDuplicateProperties():Boolean[1]
{
   let fn= {|meta::relational::tests::milestoning::Product.all(%2020-02-02)->project([p|$p.classification(%2020-02-02).type], ['type']) };
   
  let mapping = meta::relational::tests::milestoning::milestoningMapWithEmbeddedDuplicateProperty;
  let runtime = runtime();
  let lineage = computeLineage($fn, $mapping, $runtime, relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_db', 'tb_dbdefaultProductClassificationSystemTable', 'tb_dbdefaultProductTable'],
                                        ['Lambda', 'meta::relational::tests::milestoning::Product', 'meta::relational::tests::milestoning::ProductClassification', 'pack_meta::relational::tests::milestoning'],
                                        '[type: [ProductClassificationSystemTable.id <JoinTreeNode>, ProductClassificationSystemTable.name <RelationalOperationElementWithJoin>, ProductTable.classificationSystemId <JoinTreeNode>]]',
                                          $lineage);
}

function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testLineageWithExtendedPrimitives():Boolean[1]
{
  let fn= {|meta::relational::tests::milestoning::Product_ExtendedPrimitives.all(%2020-02-02)->project([p|$p.classification(%2020-02-02).type], ['type']) };
   
  let mapping = meta::relational::tests::milestoning::milestoningMapWithEmbeddedDuplicateProperty_ExtendedPrimitives;
  let runtime = runtime();
  let lineage = computeLineage($fn, $mapping, $runtime, relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_db', 'tb_dbdefaultProductClassificationSystemTable', 'tb_dbdefaultProductTable'],
                                        ['Lambda', 'meta::relational::tests::milestoning::Product_ExtendedPrimitives', 'meta::relational::tests::milestoning::ProductClassification_ExtendedPrimitives', 'pack_meta::relational::tests::milestoning'],
                                        '[type: [ProductClassificationSystemTable.id <JoinTreeNode>, ProductClassificationSystemTable.name <RelationalOperationElementWithJoin>, ProductTable.classificationSystemId <JoinTreeNode>]]',
                                          $lineage);
}

###Pure
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testMapWithPath():Boolean[1]
{
  let lineage = meta::analytics::lineage::computeLineage( | Person.all()
     ->filter(x | $x->map(#/Person/firm/legalName#) != 'Goldman Sachs')
     ->project([
                p|$p.lastName
              ],
              [
                'employeeLastName'
              ])
    ,
    simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'tb_dbIncdefaultfirmTable','tb_dbIncdefaultpersonTable','db_dbInc'],
                                          ['Lambda', 'meta::relational::tests::model::simple::Firm','meta::relational::tests::model::simple::Person','pack_meta::relational::tests::model::simple'],
                                          '[employeeLastName: [personTable.LASTNAME <TableAliasColumn>]]',
                                           $lineage);
}

###Pure
import meta::legend::*;
import meta::pure::mapping::*;
import meta::core::runtime::*;
import meta::pure::runtime::*;

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> meta::analytics::lineage::tests::relational::testSemiStructuredMapping():Boolean[1]
{
  let grammar = readFile('/core_analytics_lineage/tests/resources/lineageTestSchemaForSemiStructuredJoin.txt')->toOne();
  let elements = compileLegendGrammar($grammar);
  let runtime = $elements->filter(e|$e->instanceOf(PackageableRuntime))->at(0)->cast(@PackageableRuntime).runtimeValue->cast(@meta::core::runtime::Runtime);
  let mapping = $elements->filter(e|$e->instanceOf(Mapping))->at(0)->cast(@Mapping);
  let function = $elements->filter(e|$e->instanceOf(FunctionDefinition))->at(0)->cast(@FunctionDefinition<{->TabularDataSet[1]}>);
  let lineage = meta::analytics::lineage::computeLineage($function, $mapping, $runtime, meta::relational::extension::relationalExtensions());

  let expectedRelationTree =  'root\n' +
                              '  ------> (t) PersonTable [ID, PERSON_DETAILS]\n' +
                              '    ------> (t) PersonTable(equal_rootID_Firm_Person_d#4_d_m2leftJoinKey_0) [ID, PERSON_DETAILS]\n' +
                              '      ------> (t) FirmTable(equal_extractFromSemiStructured_explodedflattened_prop_ID_VARCHAR_FirmTableID) [ID, LEGAL_NAME]\n';
  let actualRelationTree = meta::pure::lineage::scanRelations::relationTreeAsString($lineage.relationTree);
  assertEquals($expectedRelationTree, $actualRelationTree);

  meta::analytics::lineage::assertLineage(['my::test::testSemiStructuredMappingQuery__TabularDataSet_1_','tb_H2DBTEST_SCHEMAPersonTable','tb_H2DBTEST_SCHEMAFirmTable','db_H2DB'],
                                          ['my::test::testSemiStructuredMappingQuery__TabularDataSet_1_','my::model::Person','my::model::Firm','pack_my::model'],
                                          '[employeeName: [PersonTable.PERSON_DETAILS <DynaFunction>], firmName: [FirmTable.ID <JoinTreeNode>, FirmTable.LEGAL_NAME <TableAliasColumn>, PersonTable.PERSON_DETAILS <JoinTreeNode>]]',
                                           $lineage);
}




###Pure
import meta::analytics::lineage::*;
import meta::relational::extension::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testColWithPrimitiveLet():Boolean[1]
{
   let fn= {businessDate:Date[1], type:String[1]|
             let adjustedType = $type+ 'test';
               meta::relational::tests::milestoning::Product.all($businessDate)->project(col(p|$p.classification($businessDate).type,'type'))->filter(f|$f.getString('type')=='adjustedType');};
  let mapping = meta::relational::tests::milestoning::milestoningmap;
  let runtime = meta::external::store::relational::tests::testRuntime();

  let lineage = computeLineage($fn, $mapping, $runtime, relationalExtensions(),buildDefaultAnalyticsConfig());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_db', 'tb_dbdefaultProductClassificationTable', 'tb_dbdefaultProductTable'],
                                         ['Lambda', 'meta::pure::tds::TDSRow', 'meta::relational::tests::milestoning::Product', 'meta::relational::tests::milestoning::ProductClassification', 'pack_meta::pure::tds', 'pack_meta::relational::tests::milestoning'],
                                        '[type: [ProductClassificationTable.type <JoinTreeNode>, ProductClassificationTable.type <TableAliasColumn>, ProductTable.type <JoinTreeNode>]]',
                                          $lineage);
}



###Pure
import meta::analytics::lineage::tests::relation::*;
import meta::pure::graphFetch::execution::*;
import meta::relational::tests::model::simple::*;
function <<test.Test>> meta::analytics::lineage::tests::relational::graphFetch::testForSimpleRelationalGraphFetchChecked():Boolean[1]
{
  let tree = #{
    Person {
        firstName,
        lastName
    }
  }#;

  let query = {|Person.all()->graphFetchChecked($tree)->serialize($tree)};
  let mapping = meta::relational::tests::simpleRelationalMapping;
  let runtime = meta::external::store::relational::tests::testRuntime();

  let lineage = meta::analytics::lineage::computeLineage($query, $mapping, $runtime, meta::relational::extension::relationalExtensions());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc', 'tb_dbIncdefaultpersonTable'],
                                          ['Lambda', 'meta::relational::tests::model::simple::Person', 'pack_meta::relational::tests::model::simple'],
                                          '[Person.firstName: [personTable.FIRSTNAME <TableAliasColumn>], Person.lastName: [personTable.LASTNAME <TableAliasColumn>]]',
                                           $lineage);

} 


###Pure
import meta::analytics::lineage::*;
import meta::pure::mapping::modelToModel::test::shared::*;
import meta::external::store::model::*;
import meta::pure::lineage::scanProperties::propertyTree::*;
import meta::pure::lineage::scanProperties::*;
import meta::pure::mapping::modelToModel::test::simple::*;

function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::modeltomodel::testSimpleChain():Boolean[1]
{
 let  func = {|meta::pure::mapping::modelToModel::test::shared::dest::Firm.all()->project([f|$f.legalName], ['legalNameResult'])};
  let mapping = simpleModelMappingWithAssociation;
  let runtime = ^meta::core::runtime::Runtime(connectionStores = [
                                  ^meta::core::runtime::ConnectionStore(
                                    element = ^ModelStore(),
                                    connection=
                                      ^ModelChainConnection(
                                                        mappings = relationalMapping
                                      )),
                                      getConnection()
                                  ]
                   );
                         
               
  let lineage = meta::analytics::lineage::computeLineage($func, $mapping, $runtime, meta::relational::extension::relationalExtensions(),meta::analytics::lineage::tests::relation::propertyLineageConfig());
      assertSameElements(['db_relationalDB -> tb_relationalDBdefaultFirm', 'tb_relationalDBdefaultFirm -> Lambda'],  $lineage.databaseLineage.edges.data->map(e|  $e.source.data.id+ ' -> ' + $e.target.data.id));
      assertSameElements([ ['MappedClassOwner_meta_pure_mapping_modelToModel_test_shared_dest_Firm_meta::pure::mapping::modelToModel::test::simple::simpleModelMappingWithAssociation -> Query_project_K_MANY__Function_MANY__String_MANY__TabularDataSet_1_',
       'MappedClassOwner_meta_pure_mapping_modelToModel_test_shared_src__Firm_meta::pure::mapping::modelToModel::test::shared::relationalMapping -> MappedClassOwner_meta_pure_mapping_modelToModel_test_shared_dest_Firm_meta::pure::mapping::modelToModel::test::simple::simpleModelMappingWithAssociation', 
       'Query_project_K_MANY__Function_MANY__String_MANY__TabularDataSet_1_ -> Root',
        'RelationalPropertyOwner_meta::pure::mapping::modelToModel::test::shared::relationalDB.default.Firm -> MappedClassOwner_meta_pure_mapping_modelToModel_test_shared_src__Firm_meta::pure::mapping::modelToModel::test::shared::relationalMapping',
       'meta::pure::mapping::modelToModel::test::shared::relationalDB -> RelationalPropertyOwner_meta::pure::mapping::modelToModel::test::shared::relationalDB.default.Firm']],  $lineage.propertyLineage.ownerLink->map(e|  $e.source+ ' -> ' + $e.target));

meta::analytics::lineage::assertLineage(['Lambda', 'db_relationalDB', 'tb_relationalDBdefaultFirm'],
                                          [],
                                          '[legalNameResult: [query.legalNameResult->[MappedClassOwner_meta_pure_mapping_modelToModel_test_shared_dest_Firm_meta::pure::mapping::modelToModel::test::simple::simpleModelMappingWithAssociation.Firm.legalName->[MappedClassOwner_meta_pure_mapping_modelToModel_test_shared_src__Firm_meta::pure::mapping::modelToModel::test::shared::relationalMapping._Firm.name->[RelationalPropertyOwner_meta::pure::mapping::modelToModel::test::shared::relationalDB.default.Firm.name]]]]]',
                                           $lineage);
}



###Pure
import meta::analytics::lineage::tests::relation::*;
import meta::pure::precisePrimitives::*;
import meta::pure::metamodel::relation::*;
import meta::analytics::lineage::*;
import meta::relational::tests::model::simple::*;

function <<test.Test>> meta::analytics::lineage::tests::relation::testRelationOnClass():Boolean[1]
{
  let query = {|Person.all()->project(~['firstName': x| $x.firstName,'firm': x| $x.firm.legalName,'name': x| $x.name,'fullName': x| $x.fullName(true)])};
  let mapping = meta::relational::tests::simpleRelationalMapping;
  let runtime = meta::external::store::relational::tests::testRuntime();

  let lineage = meta::analytics::lineage::computeLineage($query, $mapping, $runtime, meta::relational::extension::relationalExtensions(),meta::analytics::lineage::tests::relation::propertyLineageConfig());
      assertSameElements([['db_dbInc -> tb_dbIncdefaultfirmTable', 'db_dbInc -> tb_dbIncdefaultpersonTable', 'tb_dbIncdefaultfirmTable -> Lambda', 'tb_dbIncdefaultpersonTable -> Lambda']],  $lineage.databaseLineage.edges.data->map(e|  $e.source.data.id+ ' -> ' + $e.target.data.id));

  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc', 'tb_dbIncdefaultfirmTable', 'tb_dbIncdefaultpersonTable'],
                                          [],
                                          '[firm: [query.firm->[MappedClassOwner_meta_relational_tests_model_simple_Person.Person.firm->[RelationalPropertyOwner_meta::relational::tests::dbInc.default.firmTable.ID,RelationalPropertyOwner_meta::relational::tests::dbInc.default.personTable.FIRMID],MappedClassOwner_meta_relational_tests_model_simple_Person.Person.firm.legalName->[RelationalPropertyOwner_meta::relational::tests::dbInc.default.firmTable.ID,RelationalPropertyOwner_meta::relational::tests::dbInc.default.personTable.FIRMID,RelationalPropertyOwner_meta::relational::tests::dbInc.default.firmTable.LEGALNAME],MappedClassOwner_meta_relational_tests_model_simple_Person.Person.firm->[RelationalPropertyOwner_meta::relational::tests::dbInc.default.firmTable.ID,RelationalPropertyOwner_meta::relational::tests::dbInc.default.personTable.FIRMID]]], firstName: [query.firstName->[MappedClassOwner_meta_relational_tests_model_simple_Person.Person.firstName->[RelationalPropertyOwner_meta::relational::tests::dbInc.default.personTable.FIRSTNAME]]], fullName: [query.fullName->[MappedClassOwner_meta_relational_tests_model_simple_Person.Person.fullName.Person.firstName.lastName->[RelationalPropertyOwner_meta::relational::tests::dbInc.default.personTable.FIRSTNAME,RelationalPropertyOwner_meta::relational::tests::dbInc.default.personTable.LASTNAME]]], name: [query.name->[MappedClassOwner_meta_relational_tests_model_simple_Person.Person.name.Person.firstName.lastName->[RelationalPropertyOwner_meta::relational::tests::dbInc.default.personTable.FIRSTNAME,RelationalPropertyOwner_meta::relational::tests::dbInc.default.personTable.LASTNAME]]]]',
                                           $lineage);

}



function <<test.Test>> meta::analytics::lineage::tests::relation::testProject():Boolean[1]
{
  let query = {|#>{meta::analytics::lineage::tests::db.personTable}#->project(~['firstName': x| $x.AGE->toOne() + $x.ADDRESSID->toOne() ])->meta::pure::mapping::from(meta::external::store::relational::tests::testRuntime())};

  let lineage = meta::analytics::lineage::computeLineage($query, [], [], [],meta::analytics::lineage::tests::relation::propertyLineageConfig());


  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc', 'tb_dbIncdefaultpersonTable'],
                                          [],
                                          '[firstName: [Root.firstName->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.AGE,RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.ADDRESSID]]]',
                                          $lineage);

}



function <<test.Test>> meta::analytics::lineage::tests::relation::testConcatenate():Boolean[1]
{
 let query  = { |
                   #>{meta::analytics::lineage::tests::db.personTable}#->project(~['firstName': x| $x.AGE->toOne() + $x.ADDRESSID->toOne() ])->meta::pure::functions::relation::concatenate(#>{meta::analytics::lineage::tests::db.personTable}#->project(~['firstName': x| $x.AGE->toOne() ]));
  };

  let lineage = meta::analytics::lineage::computeLineage($query, [], [], [],meta::analytics::lineage::tests::relation::propertyLineageConfig());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc', 'db_dbInc', 'tb_dbIncdefaultpersonTable', 'tb_dbIncdefaultpersonTable'],
                                          [],
                                          '[firstName: [Root.firstName->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.AGE,RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.ADDRESSID,RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.AGE]]]',
                                          $lineage);

}

function <<access.private>> meta::analytics::lineage::tests::relation::userFn(r:Relation<(FIRSTNAME:meta::pure::precisePrimitives::Varchar(200), ADDRESSID:meta::pure::precisePrimitives::Int, AGE:meta::pure::precisePrimitives::Int)>[1]):Any[1]
{
  
  $r->project(~['firstName': x|   let a = 1;  $x.AGE->toOne() + $x.ADDRESSID->toOne()  +$a; ]);
}

function <<test.Test>> meta::analytics::lineage::tests::relation::testProjectWithUserFn():Boolean[1]
{
  let query = {|#>{meta::analytics::lineage::tests::db.personTable}#->meta::analytics::lineage::tests::relation::userFn()};

  let lineage = meta::analytics::lineage::computeLineage($query, [], [], [],propertyLineageConfig());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc', 'tb_dbIncdefaultpersonTable'],
                                          [],
                                          '[firstName: [Root.firstName->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.AGE,RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.ADDRESSID]]]',
                                          $lineage);

}

function <<test.Test>> meta::analytics::lineage::tests::relation::testJoin():Boolean[1]
{
  let query = {|#>{meta::analytics::lineage::tests::db.personTable}#->project(~['firstName': x| $x.FIRSTNAME, 'FIRMIDFK': x| $x.FIRMID  ])->join(#>{meta::analytics::lineage::tests::db.firmTable}#->project(~['FIRMID': x| $x.FIRM_ID]), JoinKind.INNER, {x,y| $x.FIRMIDFK == $y.FIRMID}) };

  let lineage = meta::analytics::lineage::computeLineage($query, [], [], [],propertyLineageConfig());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc','tb_dbIncdefaultfirmTable', 'tb_dbIncdefaultpersonTable'],
                                          [],
                                          '[FIRMID: [Root.FIRMID->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.firmTable.FIRM_ID]], FIRMIDFK: [Root.FIRMIDFK->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.FIRMID]], firstName: [Root.firstName->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.FIRSTNAME]]]',
                                          $lineage);

}

function <<access.private>> meta::analytics::lineage::tests::relation::joinFN():Relation<(firstName:Any[*],FIRMIDFK:Any[*])>[1]
{
  
#>{meta::analytics::lineage::tests::db.personTable}#->project(~['firstName': x| $x.FIRSTNAME, 'FIRMIDFK': x| $x.FIRMID  ]);
}

function <<access.private>> meta::analytics::lineage::tests::relation::joinFN2():Relation<(FIRMID:Any[*])>[1]
{
  
#>{meta::analytics::lineage::tests::db.firmTable}#->project(~['FIRMID': x| $x.FIRM_ID])
}



function <<test.Test>> meta::analytics::lineage::tests::relation::testJoinChainOnFunction():Boolean[1]
{
  let query = {|meta::analytics::lineage::tests::relation::joinFN()->join(meta::analytics::lineage::tests::relation::joinFN2()->project(~['FIRMID1': x| $x.FIRMID]), JoinKind.INNER, {x,y| $x.FIRMIDFK == $y.FIRMID1})
                                                                   ->join(meta::analytics::lineage::tests::relation::joinFN()->project(~['FIRMID2': x| $x.FIRMIDFK]), JoinKind.INNER, {x,y| $x.FIRMIDFK == $y.FIRMID2})    
  
   };

  let lineage = meta::analytics::lineage::computeLineage($query, [], [], [],propertyLineageConfig());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc','tb_dbIncdefaultfirmTable', 'tb_dbIncdefaultpersonTable'],
                                          [],
                                          '[FIRMID1: [Root.FIRMID1->[Root.FIRMID->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.firmTable.FIRM_ID]]], FIRMID2: [Root.FIRMID2->[Root.FIRMIDFK->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.FIRMID]]], FIRMIDFK: [Root.FIRMIDFK->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.FIRMID]], firstName: [Root.firstName->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.FIRSTNAME]]]',
                                          $lineage);

}


function <<access.private>> meta::analytics::lineage::tests::relation::joinParam(input:Relation<(firstName:Varchar, FIRMIDFK:Integer)>[1]):Relation<Any>[1]
{
  $input->join(#>{meta::analytics::lineage::tests::db.firmTable}#->project(~['FIRMID': x| $x.FIRM_ID]), JoinKind.INNER, {x,y| $x.FIRMIDFK == $y.FIRMID})
}

function <<test.Test>> meta::analytics::lineage::tests::relation::testParameterizedJoin():Boolean[1]
{
  let query = {|#>{meta::analytics::lineage::tests::db.personTable}#->project(~['firstName': x| $x.FIRSTNAME, 'FIRMIDFK': x| $x.FIRMID  ])->meta::analytics::lineage::tests::relation::joinParam() };

  let lineage = meta::analytics::lineage::computeLineage($query, [], [], [],propertyLineageConfig());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc','tb_dbIncdefaultfirmTable', 'tb_dbIncdefaultpersonTable'],
                                          [],
                                          '[FIRMID: [Root.FIRMID->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.firmTable.FIRM_ID]], FIRMIDFK: [Root.FIRMIDFK->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.FIRMID]], firstName: [Root.firstName->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.FIRSTNAME]]]',
                                          $lineage);

}


function <<test.Test>> meta::analytics::lineage::tests::relation::testJoinOnAccessor():Boolean[1]
{
  let query = {|#>{meta::analytics::lineage::tests::db.personTable}#->join(#>{meta::analytics::lineage::tests::db.firmTable}#, JoinKind.INNER, {x,y| $x.FIRMID == $y.FIRM_ID}) };

  let lineage = meta::analytics::lineage::computeLineage($query, [], [], [],propertyLineageConfig());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc','tb_dbIncdefaultfirmTable', 'tb_dbIncdefaultpersonTable'],
                                          [],
                                          '[ADDRESSID: [RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.ADDRESSID], AGE: [RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.AGE], FIRMID: [RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.FIRMID], FIRM_ID: [RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.firmTable.FIRM_ID], FIRSTNAME: [RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.FIRSTNAME], ID: [RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.ID], LASTNAME: [RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.LASTNAME], MANAGERID: [RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.MANAGERID], NAME: [RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.firmTable.NAME]]',
                                          $lineage);

}


function <<test.Test>> meta::analytics::lineage::tests::relation::groupBy():Boolean[1]
{
  let query = { |#>{meta::analytics::lineage::tests::db.personTable}#->groupBy(~ LASTNAME, ~newCol : x | $x.FIRSTNAME : y | $y->joinStrings(''))
               }; 

  let lineage = meta::analytics::lineage::computeLineage($query, [], [], [],propertyLineageConfig());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc', 'tb_dbIncdefaultpersonTable'],
                                          [],
                                          '[LASTNAME: [RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.LASTNAME], newCol: [Root.newCol->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.FIRSTNAME]]]',
                                          $lineage);

}

function <<test.Test>> meta::analytics::lineage::tests::relation::groupByArray():Boolean[1]
{
  let query = { |#>{meta::analytics::lineage::tests::db.personTable}#->groupBy(~ LASTNAME, ~[newCol : x | $x.FIRSTNAME : y | $y->joinStrings(''),  newCol2 : x | $x.LASTNAME : y | $y->joinStrings('')   ])
               }; 
  let lineage = meta::analytics::lineage::computeLineage($query, [], [], [],propertyLineageConfig());
    assertSameElements([['db_dbInc -> tb_dbIncdefaultpersonTable', 'tb_dbIncdefaultpersonTable -> Lambda']],  $lineage.databaseLineage.edges.data->map(e|  $e.source.data.id+ ' -> ' + $e.target.data.id));

  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc', 'tb_dbIncdefaultpersonTable'],
                                          [],
                                          '[LASTNAME: [RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.LASTNAME], newCol2: [Root.newCol2->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.LASTNAME]], newCol: [Root.newCol->[RelationalPropertyOwner_meta::analytics::lineage::tests::dbInc.default.personTable.FIRSTNAME]]]',
                                          $lineage);

}

function <<test.Test,meta::pure::profiles::test.AlloyOnly>> meta::analytics::lineage::tests::relation::testSelectExtend():Boolean[1]
{
  let fn = meta::analytics::lineage::tests::relation::getFunction('selectExtend__Relation_1_');

  let lineage = meta::analytics::lineage::computeLineage($fn, [], [], [],propertyLineageConfig());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_db', 'tb_dbdefaultpersonTable'],
                                          [],
                                          '[FIRSTNAME: [RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.FIRSTNAME], LASTNAME: [RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.LASTNAME], firstNameExtend: [Root.firstNameExtend->[RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.FIRSTNAME]]]',
                                          $lineage);

}


function <<test.Test,meta::pure::profiles::test.AlloyOnly>> meta::analytics::lineage::tests::relation::extendOlap():Boolean[1]
{

  let fn = meta::analytics::lineage::tests::relation::getFunction('extendOlapRelation__Relation_1_');

  let lineage = meta::analytics::lineage::computeLineage($fn, [], [], [],propertyLineageConfig());
 
  meta::analytics::lineage::assertLineage(['Lambda', 'db_db', 'tb_dbdefaultpersonTable'],
                                          [],
                                          '[AGE: [RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.AGE], LASTNAME: [RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.LASTNAME], newCol: [Root.newCol->[RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.AGE]]]',
                                          $lineage);

}
function <<test.Test,meta::pure::profiles::test.AlloyOnly>> meta::analytics::lineage::tests::relation::pivot():Boolean[1]
{
  let fn = meta::analytics::lineage::tests::relation::getFunction('pivot__Relation_1_');

  let lineage = meta::analytics::lineage::computeLineage($fn, [], [], [],propertyLineageConfig());

  meta::analytics::lineage::assertLineage(['Lambda', 'db_db', 'tb_dbdefaultpersonTable'],
                                          [],
                                          '[FIRSTNAME: [RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.FIRSTNAME], newCol_PIVOT: [RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.newCol_PIVOT->[RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.AGE,RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.ADDRESSID,RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.LASTNAME]]]',
                                          $lineage);

}

function <<test.Test,meta::pure::profiles::test.AlloyOnly>> meta::analytics::lineage::tests::relation::extendOlapWithWindow():Boolean[1]
{
  let fn = meta::analytics::lineage::tests::relation::getFunction('olapWindow__Relation_1_');

  let lineage = meta::analytics::lineage::computeLineage($fn, [], [], [],propertyLineageConfig());
  

  meta::analytics::lineage::assertLineage(['Lambda', 'db_db', 'tb_dbdefaultpersonTable'],
                                          [],
                                          '[AGE: [RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.AGE], LASTNAME: [RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.LASTNAME], newCol: [Root.newCol->[RelationalPropertyOwner_meta::analytics::lineage::tests::db.default.personTable.AGE]]]',
                                          $lineage);

}




###Relational
Database meta::analytics::lineage::tests::dbInc
(
   Table personTable (ID INT PRIMARY KEY, FIRSTNAME VARCHAR(200), LASTNAME VARCHAR(200), AGE INT, ADDRESSID INT, FIRMID INT, MANAGERID INT)
    Table firmTable (FIRM_ID INT PRIMARY KEY, NAME VARCHAR(200))

)

###Relational
Database meta::analytics::lineage::tests::db
(
   include meta::analytics::lineage::tests::dbInc
)

###Pure
import meta::pure::lineage::scanRelations::*;
import meta::relational::extension::*;
import meta::relational::metamodel::join::*;
import meta::analytics::lineage::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::tests::relational::testNonExecutingEnumWithCast():Boolean[1]
{
    //Note this pattern does not execute but lineage should still work
    let fn= {|Address.all()->meta::pure::tds::project([col(p|if($p.type->isEmpty(),|'Country'->cast(@meta::relational::tests::model::simple::GeographicEntityType),|$p.type), 'type')])

              };



    let lineage = computeLineage($fn,simpleRelationalMapping, meta::external::store::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
  meta::analytics::lineage::assertLineage(['Lambda', 'db_dbInc', 'tb_dbIncdefaultaddressTable'],
                                          ['Lambda', 'meta::relational::tests::model::simple::Address', 'pack_meta::relational::tests::model::simple'],
                                          '[type: [addressTable.TYPE <TableAliasColumn>]]',
                                           $lineage);
}



function <<access.protected>> meta::analytics::lineage::tests::relation::getFunction(function:String[1]):FunctionDefinition<Any>[1]
{
 let elements = readFile('core_analytics_lineage/tests/resources/relationTest.legend')->toOne()->meta::legend::compileLegendGrammar();
 $elements->filter(x|$x.name == $function)->toOne()->cast(@FunctionDefinition<Any>);
}




function meta::analytics::lineage::tests::relation::propertyLineageConfig(): FunctionAnalyticsConfig[1]
{
  ^FunctionAnalyticsConfig
  (
    databaseLineage = true,
    classLineage = true,
    relationTree = false,
    reportLineage = true,
    propertyLineage = true,
    useV2Lineage= true
  )
}