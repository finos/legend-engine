import meta::analytics::lineage::graph::*;
import meta::relational::extension::*;
import meta::pure::functions::date::calendar::*;
import meta::relational::tests::functions::pureToSqlQuery::calendarAggregations::*;
// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function <<test.Test>> meta::analytics::lineage::test::relational::calendarAggregations():Boolean[1]
{
 let r = meta::analytics::lineage::computeLineage(|  Employee.all()
     ->groupBy(
       [p|$p.hireDate],
       [ agg(p | annualized($p.hireDate, 'NY', %2022-11-16, $p.fteFactor), y | $y->sum()) ],
       ['includedDate','annualized'])
     ->filter(x | isNotEmpty($x.getNumber('annualized')))
     ->restrict(['includedDate'])
   ,EmployeeMapping, meta::external::store::relational::tests::testRuntime(), relationalExtensions());
  assertSameElements(['Lambda','tb_EmployeeDatabasedefaultEmployeeTable','db_EmployeeDatabase'], $r.databaseLineage.nodes.data.id);

}



###Pure 
import meta::analytics::lineage::*;
import meta::relational::extension::*;
import meta::relational::metamodel::join::*;
import meta::relational::tests::tds::tdsJoin::*;
function <<meta::pure::profiles::test.Test>> meta::analytics::lineage::test::relational::testMultipleDB():Boolean[1]
{

    let fn= {|testJoinTDS_Person.all()->meta::pure::tds::project([col(p|$p.firstName, 'firstName'), col(p|$p.employerID, 'eID'), col(p|$p.managerID, 'managerID')])
                                     ->join(testJoinTDS_Firm.all()->project([col(p|$p.firmID, 'fID'), col(p|$p.legalName, 'legalName')]), JoinType.INNER, {a,b|$a.getInteger('eID') == $b.getInteger('fID');});};
                       
                        
     // meta::pure::executionPlan::executionPlan($fn,meta::relational::tests::tds::tdsJoin::testJoinTDSMappingTwoDatabaseWithColumnsMappedViaJoinsAndDynaFunction,meta::relational::tests::tds::tdsJoin::twoDBRunTime() ,relationalExtensions())->meta::pure::executionPlan::toString::planToString(relationalExtensions())->println();
       
    let lineage = computeLineage($fn,meta::relational::tests::tds::tdsJoin::testJoinTDSMappingTwoDatabaseWithColumnsMappedViaJoinsAndDynaFunction, meta::relational::tests::tds::tdsJoin::twoDBRunTime(), relationalExtensions());
    assertEquals(['Lambda', 'tb_dbIncdefaultpersonTable', 'tb_dbIncdefaultfirmTable', 'tb_database2defaultfirmTable', 'db_dbInc', 'db_database2'],$lineage.databaseLineage.nodes.data.id);

  true;
}

###Pure
import meta::pure::graphFetch::execution::*;
import meta::relational::tests::model::simple::*;

function <<test.Test>> meta::analytics::lineage::fullAnalyticasTest::testForSimpleRelationalGraphFetch():Boolean[1]
{
  let tree = #{
    Person {
        firstName,
        lastName
    }
  }#;

  let query = {|Person.all()->graphFetch($tree)->serialize($tree)};
  let mapping = meta::relational::tests::simpleRelationalMapping;
  let runtime = meta::external::store::relational::tests::testRuntime();

  let lineage = meta::analytics::lineage::computeLineage($query, $mapping, $runtime, meta::relational::extension::relationalExtensions());

  assertEquals('[Person.firstName: [personTable.FIRSTNAME <TableAliasColumn>]\n' +
               ', Person.lastName: [personTable.LASTNAME <TableAliasColumn>]\n' +
               ']',meta::analytics::lineage::ReportLineageToString($lineage.reportLineage));

}

function <<test.Test>> meta::analytics::lineage::fullAnalyticasTest::testForComplextRelationalGraphFetch():Boolean[1]
{
  let tree = #{
    Person {
        firstName,
        lastName,
        firm {
          legalName
        },
        address {
          name,
          type
        }
    }
  }#;
  let query = {|Person.all()->graphFetch($tree)->serialize($tree)};
  let mapping = meta::relational::tests::simpleRelationalMapping;
  let runtime = meta::external::store::relational::tests::testRuntime();
  let lineage = meta::analytics::lineage::computeLineage($query, $mapping, $runtime, meta::relational::extension::relationalExtensions());

  assertEquals('[Person.firstName: [personTable.FIRSTNAME <TableAliasColumn>]\n' +
                ', Person.address.name: [addressTable.ID <JoinTreeNode>, addressTable.NAME <TableAliasColumn>, personTable.ADDRESSID <JoinTreeNode>]\n' +
                ', Person.firm.legalName: [firmTable.ID <JoinTreeNode>, firmTable.LEGALNAME <TableAliasColumn>, personTable.FIRMID <JoinTreeNode>]\n' +
                ', Person.lastName: [personTable.LASTNAME <TableAliasColumn>]\n' +
                ', Person.address.type: [addressTable.ID <JoinTreeNode>, addressTable.TYPE <TableAliasColumn>, personTable.ADDRESSID <JoinTreeNode>]\n' +
                ']',meta::analytics::lineage::ReportLineageToString($lineage.reportLineage));
}

###Pure
import meta::relational::tests::milestoning::*;
import meta::pure::graphFetch::execution::*;
function <<test.Test>> meta::analytics::lineage::fullAnalyticasTest::testForRelationalGraphFetchWithMilestoning():Boolean[1]
{
  let tree = #{
      Order {
         id,
         product(%2015-10-16) {
            name,
            type,
            classificationTypeStr
         }
      }
   }#;
  let query = {|Order.all()->graphFetch($tree)->serialize($tree)};
  let mapping = meta::relational::tests::milestoning::milestoningmap;
  let runtime = meta::external::store::relational::tests::testRuntime();

  let lineage = meta::analytics::lineage::computeLineage($query, $mapping, $runtime, meta::relational::extension::relationalExtensions());

  assertEquals('[Order.id: [OrderTable.id <TableAliasColumn>]\n' +
                ', Order.product.classificationTypeStr: [OrderTable.prodFk <JoinTreeNode>, ProductClassificationTable.type <JoinTreeNode>, ProductClassificationTable.type <TableAliasColumn>, ProductTable.id <JoinTreeNode>, ProductTable.type <JoinTreeNode>]\n' +
                ', Order.product.name: [OrderTable.prodFk <JoinTreeNode>, ProductTable.id <JoinTreeNode>, ProductTable.name <TableAliasColumn>]\n' +
                ', Order.product.type: [OrderTable.prodFk <JoinTreeNode>, ProductTable.id <JoinTreeNode>, ProductTable.type <TableAliasColumn>]\n' +
                ']',meta::analytics::lineage::ReportLineageToString($lineage.reportLineage));
}

###Pure
import meta::pure::graphFetch::tests::XStore::inMemoryAndRelational::*;
import meta::pure::graphFetch::execution::*;
function <<test.Test>> meta::analytics::lineage::fullAnalyticasTest::testForRelationalGraphFetchWithCrossStore():Boolean[1]
{
  let tree = #{
      Trade {
         tradeId,
         product {
            productName
         }
      }
   }#;
   
  let query = {|Trade.all()->graphFetch($tree)->serialize($tree)};
  let mapping = meta::pure::graphFetch::tests::XStore::inMemoryAndRelational::crossMapping1;
  let runtime = meta::external::store::relational::tests::testRuntime();

  let lineage = meta::analytics::lineage::computeLineage($query, $mapping, $runtime, meta::relational::extension::relationalExtensions());

  assertEquals('[Trade.product.productName: [productTable.productName <TableAliasColumn>]\n' +
                ', Trade.tradeId: [tradeTable.tradeId_source <TableAliasColumn>]\n' +
                ']',meta::analytics::lineage::ReportLineageToString($lineage.reportLineage));
}
