// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Press F9 to execute the 'go' function...
// Press F10 to run the full test suite

import meta::json::*;
import meta::pure::metamodel::serialization::grammar::*;
import meta::pure::functions::io::http::*;
import meta::external::store::elasticsearch::metamodel::spec::property::*;
import meta::external::store::elasticsearch::metamodel::spec::*;
import meta::external::store::elasticsearch::metamodel::spec::endpoint::*;
import meta::external::store::elasticsearch::metamodel::spec::toPure::*;
import meta::external::store::elasticsearch::metamodel::spec::type::*;

import meta::pure::metamodel::serialization::grammar::*;
import meta::external::store::elasticsearch::metamodel::api::specutils::*;

import meta::external::store::elasticsearch::metamodel::api::v7::endpoint::*;
import meta::external::store::elasticsearch::metamodel::api::v7::types::*;
import meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::*;

import meta::external::store::elasticsearch::metamodel::*;
import meta::external::store::elasticsearch::tds::*;
import meta::pure::executionPlan::*;
import meta::external::store::elasticsearch::extension::*;
import meta::pure::runtime::*;
import meta::pure::executionPlan::toString::*;


function go():Any[*]
{
    let plan = executionPlan(
      |indexToTDS(store(), 'testIndex')
        ->meta::pure::tds::filter(x | $x.getString('stringProp') == 'Hello')
        ->project(^ColumnSpecification<TDSRow>(name = 'stringProp')), 
      EmptyMapping, 
      ^Runtime(), 
      elasticSearchExtension()
    );

    $plan->planToString(elasticSearchExtension())->println();

   [];   
}

function generate(): Any[*]
{
    let esVersion = '7.17';
    // let esVersion = '8.3';

    let pureCode = $esVersion->generatePureCode(false);
    println($pureCode->joinStrings('\n\n'));
}

function store(): ElasticSearchStore[1]
{
    let store = ^ElasticSearchStore(
      name = 'TestStore',
      package = 'test::es::store'->pathToPackage(true)
    );

    let index = ^ElasticSearchStoreIndex(
        owner = $store,
        name = 'testIndex'
    );

    let properties = [
      ^ElasticSearchDocumentProperty(
        name = 'stringProp',
        owner = $index,
        type = ^ElasticSearchKeywordPropertyType()
      )
    ];

    $index->mutateAdd('properties', $properties);
    $store->mutateAdd('indices', $index);
}

###Mapping
Mapping EmptyMapping()