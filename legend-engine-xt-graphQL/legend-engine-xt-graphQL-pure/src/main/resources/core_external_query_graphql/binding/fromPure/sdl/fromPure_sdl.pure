import meta::pure::model::unit::*;
import meta::external::query::graphQL::binding::*;
import meta::external::query::graphQL::binding::fromPure::sdl::*;
import meta::external::query::graphQL::metamodel::sdl::*;
import meta::external::query::graphQL::metamodel::sdl::typeSystem::*;
import meta::external::query::graphQL::metamodel::sdl::executable::*;

Class meta::external::query::graphQL::metamodel::sdl::GraphQLSDLContainer
{
  document : meta::external::query::graphQL::metamodel::sdl::Document[1];
}

Class meta::external::query::graphQL::binding::fromPure::sdl::ModelToGraphQLConfig extends meta::external::shared::format::transformation::fromPure::ModelToSchemaConfiguration
{
}

function meta::external::query::graphQL::binding::fromPure::sdl::pureToGraphQLSDL(modelUnit: ModelUnit[1], config: ModelToGraphQLConfig[1]): meta::external::shared::format::metamodel::SchemaSet[1]
{
  let packageableElements = $modelUnit->resolve().packageableElements;
  let document = 
  ^meta::external::query::graphQL::metamodel::sdl::Document
  (
    definitions = meta::external::query::graphQL::binding::fromPure::sdl::transformPureToGraphQLSDL($packageableElements)
  );
  let sdlcContainer = 
  ^meta::external::query::graphQL::metamodel::sdl::GraphQLSDLContainer
  (
    document = $document
  );
  let schemaSetSepPos  = $config.targetSchemaSet->lastIndexOf('::');
  let schemaSetPkgName = $config.targetSchemaSet->substring(0, $schemaSetSepPos);
  let schemaSet = ^meta::external::shared::format::metamodel::SchemaSet(
      package = pathToPackage($schemaSetPkgName, true),
      name    = $config.targetSchemaSet->substring($schemaSetSepPos+2),
      format  = meta::external::query::graphQL::contract::graphQLSdlContractID()
   );
  let schema = 
  ^meta::external::shared::format::metamodel::Schema(
    set = $schemaSet,
    location = 'types.graphql',
    detail = $sdlcContainer
   );
  ^$schemaSet(
    schemas = $schema
   );
  $schemaSet;
}

function meta::external::query::graphQL::binding::fromPure::sdl::schemaDetailToString(schemaDetail: meta::external::query::graphQL::metamodel::sdl::GraphQLSDLContainer[1]): String[1]
{
  $schemaDetail.document.definitions
                  ->map(x|$x->meta::external::query::graphQL::serialization::graphQLtoString())
                  ->joinStrings('\n');
}

function meta::external::query::graphQL::binding::fromPure::sdl::transformPureToGraphQLSDL(types: meta::pure::metamodel::PackageableElement[*]): meta::external::query::graphQL::metamodel::sdl::typeSystem::TypeSystemDefinition[*]
{
  let allTypes = $types->findTypes();

  let queryClasses = $allTypes->cast(@AnnotatedElement)->filter(t|$t.stereotypes.value->contains('Query'))->cast(@Class<Any>);
  let mutationClasses = $allTypes->cast(@AnnotatedElement)->filter(t|$t.stereotypes.value->contains('Mutation'))->cast(@Class<Any>);
  let subscriptionClasses = $allTypes->cast(@AnnotatedElement)->filter(t|$t.stereotypes.value->contains('Subscription'))->cast(@Class<Any>);

  // Gather all allowed operations
  let operationTypeQualifiedProperties = $queryClasses->concatenate($mutationClasses)->concatenate($subscriptionClasses).qualifiedProperties->cast(@AbstractProperty<Any>);
  
  // All nested classes used as return types -- will be used as object types
  let classReturnTypes = 
    $operationTypeQualifiedProperties
      ->map(q | $q->functionReturnType().rawType)
      ->map(t | 
        $t->match(
          [
            c : Class<Any>[1] | $c->allNestedPropertyTypes(),
            a : Any[1] | []
          ]
        ))
      ->distinct()
      ->filter(t | $t->instanceOf(Class));

  // All nested classes used as input types -- will be used as input types
  let classInputTypes = 
    $operationTypeQualifiedProperties
      ->map(prop | $prop->functionType().parameters->evaluateAndDeactivate()->tail()->map(param | $param.genericType.rawType->toOne()))
      ->map(t | 
        $t->match(
          [
            c : Class<Any>[1] | $c->allNestedPropertyTypes(),
            a : Any[1] | []
          ]
        ))
      ->distinct()
      ->filter(t | $t->instanceOf(Class));

  // Build types
  let graphQLTypes = $allTypes->map(c |
    $c->match(
      [
        c:Class<Any>[1] |
          if ($classInputTypes->contains($c), 
            | 
              buildInputObjectTypeDefinition($c)->concatenate(
                if ($classReturnTypes->contains($c),
                  // Used as both -> needs both input and output types
                  | buildObjectTypeDefinition($c), 
                  // Used as input -> needs input
                  | []
                )
              ),
              // Not used as input --> needs output (unused types will result in output types)
            | buildObjectTypeDefinition($c)
          ),
        e:Enumeration<Any>[1] |
          ^EnumTypeDefinition(
            name = $c.name->toOne(),
            values = $e->enumValues()->map(z | ^EnumValueDefinition(value = $z->id()))
          )
      ]
    );
  );

  let query = $queryClasses->map(x|^RootOperationTypeDefinition(operationType = OperationType.query, type = $x.name->toOne()));
  let mutation = $mutationClasses->map(x|^RootOperationTypeDefinition(operationType = OperationType.mutation, type = $x.name->toOne()));
  let subscription = $subscriptionClasses->map(x|^RootOperationTypeDefinition(operationType = OperationType.subscription, type = $x.name->toOne()));

  let partitioned = $graphQLTypes->partition(type | $type->instanceOf(ScalarTypeDefinition));
  
  let processingDirectives = $allTypes
    ->map(t | $t->getTemporalStereotypes())
    ->distinct()
    ->map(s | temporalityToDirectives()->get($s)->toOne());

  $partitioned.second.values
    // Remove duplicated scalar definitions
    ->concatenate($partitioned.first.values->cast(@ScalarTypeDefinition)->removeDuplicatesBy(s | $s.name->toOne()))
    ->concatenate($processingDirectives)
    ->meta::pure::functions::collection::sortBy(t | 
      $t->match(
        [
          o : ObjectTypeDefinition[1] | $o.name, 
          i : InputObjectTypeDefinition[1] | $i.name, 
          e : EnumTypeDefinition[1] | $e.name,
          s : ScalarTypeDefinition[1] | $s.name,
          d : DirectiveDefinition[1] | $d.name
        ]
      )->toOne())
    ->concatenate(
      if($query->concatenate($mutation)->concatenate($subscription)->isNotEmpty(),
        | 
          ^SchemaDefinition
          (
            rootOperationTypeDefinitions = $query->concatenate($mutation)->concatenate($subscription)
          ),
        |
          []
      )
    );
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::sdl::getTemporalStereotypes(t: meta::pure::metamodel::type::Type[1]): String[*]
{
  $t->cast(@AnnotatedElement)
    ->map(t | $t.stereotypes)
    ->filter(s | $s.profile == meta::pure::profiles::temporal)
    ->map(s | $s.value)
}


function <<access.private>> meta::external::query::graphQL::binding::fromPure::sdl::isValidPropertyForGraphQL(p: AbstractProperty<Any>[1]): Boolean[1]
{
  !$p.name->in(['processingDate', 'businessDate', 'milestoning']);
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::sdl::buildNonBuiltInGraphQLScalars(props: AbstractProperty<Any>[*]): ScalarTypeDefinition[*]
{
  $props
    ->map(p | $p.genericType.rawType->toOne())
    ->map(p | $p->match(
      [
        p : PrimitiveType[1] | purePrimitivesToCustomGraphQLScalarTypes()->newMap()->get($p),
        a : Any[1] | []
      ]
    ))
  ->map(customScalar | ^ScalarTypeDefinition(name = $customScalar))
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::sdl::buildInputObjectTypeDefinition(c: Class<Any>[1]): TypeSystemDefinition[*]
{
  let props = $c->allProperties()->filter(p | $p->isValidPropertyForGraphQL());
  let nonBuiltInScalars = $props->buildNonBuiltInGraphQLScalars();

  let temporalStereotypes = $c->getTemporalStereotypes();
  $nonBuiltInScalars
    ->concatenate(
      ^InputObjectTypeDefinition(
        name = toInputTypeName($c.name->toOne()),
        directives = if($temporalStereotypes->isEmpty(), | [], | $temporalStereotypes->map(s | temporalityToDirectives()->get($s)->toOne())->map(def | ^Directive(name = $def.name))),
        fields = $props
                  ->map(p |
                      ^InputValueDefinition
                      (
                        name = $p.name->toOne(),
                        type = buildInputTypeCompatibleTypeReference($p.genericType, $p.multiplicity)
                      ))
      ));            
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::sdl::buildObjectTypeDefinition(c: Class<Any>[1]): TypeSystemDefinition[*]
{
  let props = $c->allProperties()->filter(p | $p->isValidPropertyForGraphQL());
  let nonBuiltInScalars = $props->buildNonBuiltInGraphQLScalars();

  let temporalStereotypes = $c->getTemporalStereotypes();
  $nonBuiltInScalars
    ->concatenate(
      ^ObjectTypeDefinition(
        name = $c.name->toOne(),
        directives = if($temporalStereotypes->isEmpty(), | [], | $temporalStereotypes->map(s | temporalityToDirectives()->get($s)->toOne())->map(def | ^Directive(name = $def.name))),
        fields = $c->allProperties()
                    ->filter(p | $p->isValidPropertyForGraphQL())
                    ->map(p |
                      ^FieldDefinition
                      (
                        name = $p.name->toOne(),
                        type = buildObjectTypeCompatibleTypeReference($p->functionReturnType(), $p->functionReturnMultiplicity()),
                        argumentDefinitions = 
                          if ($p->instanceOf(QualifiedProperty),
                            | 
                              $p->functionType().parameters->evaluateAndDeactivate()->tail()->map(pa |
                                    ^InputValueDefinition
                                    (
                                      name = $pa.name,
                                      type = buildInputTypeCompatibleTypeReference($pa.genericType, $pa.multiplicity)
                                    )
                                ),
                            | 
                              []
                          )
                      )
                    )
      ));
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::sdl::buildObjectTypeCompatibleTypeReference(type:meta::pure::metamodel::type::generics::GenericType[1], mul:Multiplicity[1]): TypeReference[1]
{
  buildTypeReference($type, $mul, false)
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::sdl::buildInputTypeCompatibleTypeReference(type:meta::pure::metamodel::type::generics::GenericType[1], mul:Multiplicity[1]): TypeReference[1]
{
  buildTypeReference($type, $mul, true)
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::sdl::buildTypeReference(type:meta::pure::metamodel::type::generics::GenericType[1], mul:Multiplicity[1], forInput: Boolean[1]): TypeReference[1]
{
  let typeName = 
    if ($type.rawType->toOne()->instanceOf(Class) && $forInput, 
      | 
        // Must create reference to input type
        toInputTypeName($type.rawType.name->toOne()),
      | 
        let primitives = purePrimitivesToGraphQLScalarTypes()->concatenate(purePrimitivesToCustomGraphQLScalarTypes())->newMap();
        let foundPrimitiveName = $primitives->get($type.rawType->toOne());
        let fName = if($foundPrimitiveName->isEmpty(), | $type.rawType.name,| $foundPrimitiveName->toOne());
    )->toOne();

  if ($mul == ZeroOne,
    | ^NamedTypeReference(name = $typeName, nullable = true),
    | if ($mul == PureOne,
      | ^NamedTypeReference(name = $typeName, nullable = false),
      | ^ListTypeReference(itemType=^NamedTypeReference(name = $typeName, nullable = false), nullable = false)
    )
  );
}

function meta::external::query::graphQL::binding::fromPure::sdl::findTypes(pElems:meta::pure::metamodel::PackageableElement[*]):meta::pure::metamodel::type::Type[*]
{
  $pElems
    ->filter(i|$i->instanceOf(meta::pure::metamodel::type::Type))
    ->cast(@meta::pure::metamodel::type::Type)
    ->removeDuplicates()
}

