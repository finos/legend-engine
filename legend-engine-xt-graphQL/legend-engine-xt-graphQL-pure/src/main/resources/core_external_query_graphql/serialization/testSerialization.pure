// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::graphQL::metamodel::sdl::*;
import meta::external::query::graphQL::metamodel::sdl::executable::*;
import meta::external::query::graphQL::metamodel::sdl::value::*;
import meta::external::query::graphQL::metamodel::sdl::typeSystem::*;
import meta::external::query::graphQL::serialization::*;

function <<test.Test>> meta::external::query::graphQL::serialization::tests::testSimpleSerialization():Boolean[1]
{
  let res = ^Document(
    definitions = 
      [
        ^OperationDefinition(
          type = OperationType.query,
          name = 'myQuery',
          variables = [
            ^VariableDefinition(
              name = 'var',
              type = ^NamedTypeReference(name='Int', nullable=false),
              defaultValue = ^IntValue(value=3)
            )
          ],
          directives = [
            ^Directive(
              name='deprecated',
              arguments = [
                ^Argument(name='reason', value=^StringValue(value='wow'))
              ]
            )
          ],
          selectionSet = ^Field(
            name = 'user',
            arguments = [
              ^Argument(name='id', value=^StringValue(value='Pierre')),
              ^Argument(name='filter', value=^BooleanValue(value=true))
            ],
            directives = [
              ^Directive(
                name='deprecated',
                arguments = [
                  ^Argument(name='reason', value=^StringValue(value='because!'))
                ]
              )
            ],
            selectionSet = ^Field(
              alias = 'newName',
              name = 'name',
              arguments = [
                ^Argument(name='id', value=^StringValue(value='Bla'))
              ],
              selectionSet = [
                ^InLineFragment(
                  typeCondition = 'MyType',
                  selectionSet = [
                    ^Field(
                      name = 'ok'
                    ),
                    ^FragmentSpread(
                      name = 'name'
                    )
                  ]
                )
              ]
            )
          )
        ),
        ^ObjectTypeDefinition(
          name = 'MyType',
           directives = [
            ^Directive(
              name='deprecated',
              arguments = [
                ^Argument(name='reason', value=^StringValue(value='wow'))
              ]
            )
          ],       
          fields = [
            ^FieldDefinition(
              name = 'prop',
              argumentDefinitions = [
                ^InputValueDefinition(
                  name = 'v',
                  type = ^NamedTypeReference(name='Int', nullable=false)
                ),
                ^InputValueDefinition(
                  name = 'x',
                  type = ^NamedTypeReference(name='String', nullable=false)
                )
              ],
              type = ^NamedTypeReference(name='MyType', nullable=false)
            ),
            ^FieldDefinition(
              name = 'other',
              type = ^NamedTypeReference(name='String', nullable=false)
            )
          ]
        ),
        ^InputObjectTypeDefinition(
          name = 'MyInputType',
           directives = [
            ^Directive(
              name='deprecated',
              arguments = [
                ^Argument(name='reason', value=^StringValue(value='wow'))
              ]
            )
          ],       
          fields = [
            ^InputValueDefinition(
              name = 'v',
              type = ^NamedTypeReference(name='Int', nullable=false)
            ),
            ^InputValueDefinition(
              name = 'x',
              type = ^NamedTypeReference(name='String', nullable=false)
            )
          ]
        ),
        ^UnionTypeDefinition(
          name = 'UnionTest',
          directives = [
            ^Directive(
              name='deprecated',
              arguments = [
                ^Argument(name='reason', value=^StringValue(value='wow'))
              ]
            )
          ],       
          members = ['a','b']
        ),
        ^EnumTypeDefinition(
          name = 'IncType',
          directives = [
            ^Directive(
              name='deprecated',
              arguments = [
                ^Argument(name='reason', value=^StringValue(value='wow'))
              ]
            )
          ],
          values = [
            ^EnumValueDefinition(
              value = 'Corp'
            ),
            ^EnumValueDefinition(
              value = 'LLC',
              directives = [
                ^Directive(
                  name='deprecated',
                  arguments = [
                    ^Argument(name='reason', value=^StringValue(value='wow'))
                  ]
                )
              ]
            )
          ]
        ),
        ^FragmentDefinition(
          name = 'MyFragment',
          typeCondition = 'TypeCond',
          selectionSet = ^Field(
            alias = 'newName',
            name = 'name',
            arguments = [
              ^Argument(name='id', value=^StringValue(value='Bla'))
            ]
          )
        )
      ]
  );

  assertEquals( 'query myQuery(var: Int! = 3) @deprecated(reason: \"wow\") {\n' +
                '  user(id: \"Pierre\", filter: true) @deprecated(reason: \"because!\") {\n' +
                '    newName: name(id: \"Bla\") {\n' +
                '      ... on MyType  {\n' +
                '        ok\n' +
                '        ... name\n' +
                '      }\n' +
                '    }\n' +
                '  }\n' +
                '}\n' +
                '\n' +
                'type MyType @deprecated(reason: \"wow\") {\n' +
                '  prop(v: Int!, x: String!): MyType!\n' +
                '  other: String!\n' +
                '}\n' +
                '\n' +
                'input MyInputType @deprecated(reason: \"wow\") {\n' +
                '  v: Int!\n' +
                '  x: String!\n' +
                '}\n' +
                '\n' +
                'union UnionTest @deprecated(reason: \"wow\") = a | b\n' +
                '\n' +
                'enum IncType @deprecated(reason: \"wow\") {\n' +
                '  Corp\n' +
                '  LLC @deprecated(reason: \"wow\")\n' +
                '}\n' +
                '\n' +
                'fragment MyFragment on TypeCond {\n' +
                '  newName: name(id: \"Bla\")\n' +
                '}', $res->graphQLtoString());
}