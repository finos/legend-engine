import meta::pure::router::printer::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::relational::functions::asserts::*;
import meta::relational::tests::aggregationAware::*;
import meta::relational::runtime::*;
import meta::relational::tests::aggregationAware::domain::*;
import meta::relational::tests::aggregationAware::mapping::*;
import meta::relational::tests::aggregationAware::store::*;

function <<test.Test>> meta::relational::tests::aggregationAware::testRewriteAsNOP::nonGroupBy::testRewriteGetAllQuery():Boolean[1]
{
   let query = {|Wholesales.all()};
   let mapping = simpleMapping;
   let runtime = runtime();
   
   let result = execute($query, $mapping, $runtime, relationalExtensions());
   
   assertEquals(' | [SCT_Main Class Wholesales].all();', $result.activities->filter(s|$s->instanceOf(meta::pure::mapping::aggregationAware::AggregationAwareActivity))->at(0)->cast(@meta::pure::mapping::aggregationAware::AggregationAwareActivity).rewrittenQuery);
   assertSameSQL('select "root".id as "pk_0", "root".sales_date as "pk_1", "root".is_cancelled_flag as "pk_2", "root".product_id as "pk_3", "root".revenue as "pk_4", "root".emp_id as "pk_5", case when "root".is_cancelled_flag = \'Y\' then \'true\' else \'false\' end as "isCancelled", "root".discount as "discount" from base_view.SalesTable as "root"', $result);
}

function <<test.Test>> meta::relational::tests::aggregationAware::testRewriteAsNOP::nonGroupBy::testRewriteFilter():Boolean[1]
{
   let query = {|Wholesales.all()->filter(x|$x.isCancelled == 'N').product.productId};
   let mapping = simpleMapping;
   let runtime = runtime();
   
   let result = execute($query, $mapping, $runtime, relationalExtensions());
   
   assertEquals(' | [SCT_Main Class Wholesales].all() -> filter(x:meta::relational::tests::aggregationAware::domain::Wholesales[1] | $x.isCancelled == \'N\';) -> map(v_automap:meta::relational::tests::aggregationAware::domain::Wholesales[1] | $v_automap.product;) -> map(v_automap:meta::relational::tests::aggregationAware::domain::Product[1] | $v_automap.productId;);', $result.activities->filter(s|$s->instanceOf(meta::pure::mapping::aggregationAware::AggregationAwareActivity))->at(0)->cast(@meta::pure::mapping::aggregationAware::AggregationAwareActivity).rewrittenQuery);
   assertSameSQL('select "product_0".prod_id from base_view.SalesTable as "root" left outer join base_view.Product as "product_0" on ("root".product_id = "product_0".prod_id) where case when "root".is_cancelled_flag = \'Y\' then \'true\' else \'false\' end = \'N\'', $result);
}

function <<test.Test>> meta::relational::tests::aggregationAware::testRewriteAsNOP::nonGroupBy::testRewriteProjectFunction():Boolean[1]
{
   let query = {|Wholesales.all()->project(x|$x.product.productId, ['Product ID'])};
   let mapping = simpleMapping;
   let runtime = runtime();
   
   let result = execute($query, $mapping, $runtime, relationalExtensions());
   
   assertEquals(' | [SCT_Main Class Wholesales].all() -> project(x:meta::relational::tests::aggregationAware::domain::Wholesales[1] | $x.product -> map(v_automap:meta::relational::tests::aggregationAware::domain::Product[1] | $v_automap.productId;);, \'Product ID\');', $result.activities->filter(s|$s->instanceOf(meta::pure::mapping::aggregationAware::AggregationAwareActivity))->at(0)->cast(@meta::pure::mapping::aggregationAware::AggregationAwareActivity).rewrittenQuery);
   assertSameSQL('select "product_0".prod_id as "Product ID" from base_view.SalesTable as "root" left outer join base_view.Product as "product_0" on ("root".product_id = "product_0".prod_id)', $result);
}

function <<test.Test>> meta::relational::tests::aggregationAware::testRewriteAsNOP::nonGroupBy::testRewriteProjectCol():Boolean[1]
{
   let query = {|Wholesales.all()->project(col(x|$x.product.productId, 'Product ID'))};
   let mapping = simpleMapping;
   let runtime = runtime();
   
   let result = execute($query, $mapping, $runtime, relationalExtensions());
   
   assertSameSQL('select "product_0".prod_id as "Product ID" from base_view.SalesTable as "root" left outer join base_view.Product as "product_0" on ("root".product_id = "product_0".prod_id)', $result);
}

function <<test.Test>> meta::relational::tests::aggregationAware::testRewriteAsNOP::nonGroupBy::testRewriteProjectFunctionMulti():Boolean[1]
{
   let query = {|Wholesales.all()->project([x|$x.product.productId, x|$x.isCancelled], ['Product ID', 'Is Cancelled'])};
   let mapping = simpleMapping;
   let runtime = runtime();
   
   let result = execute($query, $mapping, $runtime, relationalExtensions());
   
   assertEquals(' | [SCT_Main Class Wholesales].all() -> project([x:meta::relational::tests::aggregationAware::domain::Wholesales[1] | $x.product -> map(v_automap:meta::relational::tests::aggregationAware::domain::Product[1] | $v_automap.productId;);, x:meta::relational::tests::aggregationAware::domain::Wholesales[1] | $x.isCancelled;], [\'Product ID\', \'Is Cancelled\']);', $result.activities->filter(s|$s->instanceOf(meta::pure::mapping::aggregationAware::AggregationAwareActivity))->at(0)->cast(@meta::pure::mapping::aggregationAware::AggregationAwareActivity).rewrittenQuery);
   assertSameSQL('select "product_0".prod_id as "Product ID", case when "root".is_cancelled_flag = \'Y\' then \'true\' else \'false\' end as "Is Cancelled" from base_view.SalesTable as "root" left outer join base_view.Product as "product_0" on ("root".product_id = "product_0".prod_id)', $result);
}

function <<test.Test>> meta::relational::tests::aggregationAware::testRewriteAsNOP::nonGroupBy::testRewriteProjectColMulti():Boolean[1]
{
   let query = {|Wholesales.all()->project([col(x|$x.product.productId, 'Product ID'), col(x|$x.isCancelled, 'Is Cancelled')])};
   let mapping = simpleMapping;
   let runtime = runtime();
   
   let result = execute($query, $mapping, $runtime, relationalExtensions());
   
   assertSameSQL('select "product_0".prod_id as "Product ID", case when "root".is_cancelled_flag = \'Y\' then \'true\' else \'false\' end as "Is Cancelled" from base_view.SalesTable as "root" left outer join base_view.Product as "product_0" on ("root".product_id = "product_0".prod_id)', $result);
}

function <<test.Test>> meta::relational::tests::aggregationAware::testRewriteAsNOP::nonGroupBy::testRewriteTDSOperation():Boolean[1]
{
   let query = {|
      Wholesales.all()
      ->project([x|$x.product.productId, x|$x.isCancelled], ['Product ID', 'Is Cancelled'])
      ->restrict(['Product ID'])
   };
   let mapping = simpleMapping;
   let runtime = runtime();
   
   let result = execute($query, $mapping, $runtime, relationalExtensions());
   
   assertEquals(' | [SCT_Main Class Wholesales].all() -> project([x:meta::relational::tests::aggregationAware::domain::Wholesales[1] | $x.product -> map(v_automap:meta::relational::tests::aggregationAware::domain::Product[1] | $v_automap.productId;);, x:meta::relational::tests::aggregationAware::domain::Wholesales[1] | $x.isCancelled;], [\'Product ID\', \'Is Cancelled\']) -> restrict(\'Product ID\');', $result.activities->filter(s|$s->instanceOf(meta::pure::mapping::aggregationAware::AggregationAwareActivity))->at(0)->cast(@meta::pure::mapping::aggregationAware::AggregationAwareActivity).rewrittenQuery);
   assertSameSQL('select "product_0".prod_id as "Product ID" from base_view.SalesTable as "root" left outer join base_view.Product as "product_0" on ("root".product_id = "product_0".prod_id)', $result);
}
