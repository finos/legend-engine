// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::mapping::*;
import meta::relational::runtime::*;
import meta::relational::metamodel::*;
import meta::pure::mapping::*;
import meta::pure::runtime::*;

function meta::relational::mapping::userPlanPostProcessors(result:PostProcessorResult[1], runtime:Runtime[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], store:Database[0..1], exeCtx:ExecutionContext[1]): PostProcessorResult[1]
{
   let postProcessorsWithParameters = $runtime.connections->filter(c|$c->instanceOf(DatabaseConnection))->cast(@DatabaseConnection).queryPostProcessorsWithParameter;
   let postProcessorResult = if($postProcessorsWithParameters->isNotEmpty(),
                                | $postProcessorsWithParameters->fold({i, prevResult|let struct = $i.postProcessor->cast(@ConcreteFunctionDefinition<{->PostProcessor[1]}>)->eval();
                                                                       let res = $struct.sqlQueryPostProcessorForPlan->cast(@ConcreteFunctionDefinition<{SQLQuery[1], Mapping[0..1], Runtime[1], Database[0..1], ExecutionContext[1], PostProcessorParameter[*]->PostProcessorResult[1]}>)->toOne()->eval($prevResult.query,$m,$runtime->toOne(),$store,$exeCtx,$i.parameters)->toOne();
                                                                       ^$prevResult(query = $res.query, templateFunctions = $prevResult.templateFunctions->concatenate($res.templateFunctions),executionNodes =$prevResult.executionNodes->concatenate( $res.executionNodes), postExecutionNodes=$prevResult.postExecutionNodes->concatenate($res.postExecutionNodes));},
                                                                       $result),
                                |$result;
                             );
}