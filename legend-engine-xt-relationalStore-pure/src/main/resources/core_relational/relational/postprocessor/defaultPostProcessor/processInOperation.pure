// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::runtime::*;
import meta::relational::translation::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::functions::sqlQueryToString::default::*;
import meta::pure::executionPlan::*;
import meta::pure::mapping::*;
import meta::relational::metamodel::relation::*;
import meta::relational::functions::pureToSqlQuery::*;
import meta::relational::functions::pureToSqlQuery::metamodel::*;
import meta::relational::postProcessor::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::pure::runtime::*;
import meta::relational::metamodel::*;
import meta::relational::mapping::*;
import meta::pure::alloy::connections::*;
import meta::pure::alloy::connections::alloy::specification::*;

function meta::relational::postProcessor::getCollectionThresholdLimitForDatabaseType(dbType:DatabaseType[1], isTestRun:Boolean[1]):Integer[0..1]
{
   let thresholdForTests = 50;

   if($isTestRun, | $thresholdForTests, | $dbType->createDbConfig([]).dbExtension.collectionThresholdLimit);
}

function meta::relational::postProcessor::getDbSpecificTempTableCreationLogicSupplierForDatabaseType(dbType:DatabaseType[1], isTestRun:Boolean[1]):Function<{String[1]->String[1]}>[0..1]
{
   if($isTestRun, 
      | {varName:String[1] | 'instanceOf(' + $varName + ', "StreamingResult")'}, 
      | $dbType->createDbConfig([]).dbExtension.extraTempTableCreationLogicSupplierForIn);
}

function <<access.private>> meta::relational::postProcessor::prefixForWrapperAllocationNodeName():String[1]
{
   'inFilterClause_';
}

function meta::relational::postProcessor::processInOperation(query:SQLQuery[1], runtime:Runtime[1], store:Database[0..1], exeCtx:ExecutionContext[1], extensions:Extension[*]):PostProcessorResult[1]
{
   let connection = $runtime->connectionByElement($store->toOne())->meta::relational::mapping::updateConnection($extensions)->cast(@DatabaseConnection);
   let isTestRun  = $connection->instanceOf(TestDatabaseConnection) 
                    || ($connection->instanceOf(RelationalDatabaseConnection) && $connection->cast(@RelationalDatabaseConnection).datasourceSpecification->instanceOf(LocalH2DatasourceSpecification));
   let dbThreshold = $connection.type->getCollectionThresholdLimitForDatabaseType($isTestRun);
   let dbSpecificTempTableCreationLogicSupplier = $connection.type->getDbSpecificTempTableCreationLogicSupplierForDatabaseType($isTestRun);

   if($dbThreshold->isEmpty(),
      |^meta::relational::mapping::PostProcessorResult(query = $query),
      |
      let transformNotRequiringConditionNode  =  {r: RelationalOperationElement[1], uniqueId: Integer[1] |
                                                      $r->match([
                                                         d  : DynaFunction[1] | if($d.name == 'in' &&  $d.parameters->at(1)->instanceOf(LiteralList) && ($d.parameters->at(1)->cast(@LiteralList).values->size() > $dbThreshold->toOne()),
                                                                                   |
                                                                                   let tempTableName        = 'tempTableForIn_' + $uniqueId->toString();
                                                                                   let tempTableColumnName  = 'ColumnForStoringInCollection';

                                                                                   let firstLiteralValue    = $d.parameters->at(1)->cast(@LiteralList).values->map(l | $l.value)->at(0);
                                                                                   let collectionValueType  = if($firstLiteralValue->instanceOf(VarPlaceHolder), | $firstLiteralValue->cast(@VarPlaceHolder).type, | $firstLiteralValue->type());
                                                                                   let selectSQLQuery       = generateTempTableSelectSQLQuery('default', $tempTableName, $tempTableColumnName, meta::relational::transform::fromPure::pureTypeToDataTypeMap()->get($collectionValueType)->translateCoreTypeToDbSpecificType(^TranslationContext(dbType=$connection.type))->toOne());

                                                                                   ^$d(parameters           = [$d.parameters->at(0), $selectSQLQuery]);,
                                                                                   |$d);,
                                                         rel : RelationalOperationElement[1] | $rel;
                                                      ])
                                                };

      let transformRequiringConditionNode =  {r: RelationalOperationElement[1], uniqueId: Integer[1] |
                                                   $r->match([
                                                      d  : DynaFunction[1] | if($d.name == 'in' && $d.parameters->at(1)->instanceOf(LiteralList) && ($d.parameters->at(1)->cast(@LiteralList).values->filter(l | $l.value->instanceOf(VarPlaceHolder)).value->cast(@VarPlaceHolder)->exists(v | $v.multiplicity->isNotEmpty() && $v.multiplicity == ZeroMany)),
                                                                                |let uniqueSuffix = if($d.parameters->at(1)->cast(@LiteralList).values.value->forAll(x | $x->instanceOf(VarPlaceHolder)), |$d.parameters->at(1)->buildUniqueName(false, $extensions), |$uniqueId->toString());
                                                                                 ^$d(parameters = [$d.parameters->at(0), ^VarPlaceHolder(name = prefixForWrapperAllocationNodeName() + $uniqueSuffix, type = String)]);,
                                                                                |$d);,
                                                      rel: RelationalOperationElement[1] | $rel;
                                                   ])
                                             };

      let transformedQueryNotRequiringConditionNode = $query->transform($transformNotRequiringConditionNode, ^Map<RelationalOperationElement, RelationalOperationElement>());
      let transformedQueryRequiringConditionNode    = $transformedQueryNotRequiringConditionNode.first->transform($transformRequiringConditionNode, ^Map<RelationalOperationElement, RelationalOperationElement>());

      let changedFunctionsNotRequiringConditionNode = $transformedQueryNotRequiringConditionNode.second->keyValues()->filter(p | $p.first->instanceOf(DynaFunction) && $p.first->cast(@DynaFunction).name == 'in' && $p.first->buildUniqueName(true, $extensions) != $p.second->buildUniqueName(true, $extensions));
      let changedFunctionsRequiringConditionNode    = $transformedQueryRequiringConditionNode.second->keyValues()->filter(p | $p.first->instanceOf(DynaFunction) && $p.first->cast(@DynaFunction).name == 'in' && $p.first->buildUniqueName(true, $extensions) != $p.second->buildUniqueName(true, $extensions));

      $changedFunctionsNotRequiringConditionNode->concatenate($changedFunctionsRequiringConditionNode)->generatePostProcessorResult($transformedQueryRequiringConditionNode.first->cast(@SQLQuery), $connection, $dbThreshold->toOne(), $dbSpecificTempTableCreationLogicSupplier, $runtime, $store->toOne(), $exeCtx, $extensions);
   );
}

function meta::relational::postProcessor::generatePostProcessorResult(changedFunctions:Pair<RelationalOperationElement, RelationalOperationElement>[*], query:SQLQuery[1], connection:DatabaseConnection[1], dbThreshold:Integer[1], dbSpecificTempTableCreationLogicSupplier:Function<{String[1]->String[1]}>[0..1], runtime:Runtime[1], store:Database[1], exeCtx:ExecutionContext[1], extensions:Extension[*]):PostProcessorResult[1]
{
   let getTypeLambda = {val:Any[1] |if($val->instanceOf(VarPlaceHolder), | $val->cast(@VarPlaceHolder).type, | $val->type())};

   $changedFunctions->fold({func, result |
                          let origInFunction                        = $func.first->cast(@DynaFunction);
                          let newInFunction                         = $func.second->cast(@DynaFunction);

                          let outerAllocationNodeName               = if($newInFunction.parameters->at(1)->instanceOf(VarPlaceHolder),
                                                                         |$newInFunction.parameters->at(1)->cast(@VarPlaceHolder).name,
                                                                         |$newInFunction.parameters->at(1)->cast(@SelectSQLQuery).data.alias.name->toOne()->replace('tempTableForIn_', prefixForWrapperAllocationNodeName()));
                          let tempTableName                         = $outerAllocationNodeName->replace(prefixForWrapperAllocationNodeName(), 'tempTableForIn_');
                          let tempTableColumnName                   = 'ColumnForStoringInCollection';
                          let allocationNodeName                    = $outerAllocationNodeName->replace(prefixForWrapperAllocationNodeName(), 'tempVarForIn_');

                          let collectionValues                      = $origInFunction.parameters->at(1)->cast(@LiteralList).values->map(l | $l.value);
                          let collectionValueType                   = $getTypeLambda->eval($collectionValues->at(0));

                          assert($collectionValueType->instanceOf(DataType), 'Values inside in expression should be of type DataType');
                          assert($collectionValues->forAll(v | $getTypeLambda->eval($v) == $collectionValueType), 'Values inside in expression should have same type');  // Expensive should we have this check

                          let collectionValuesWithoutVarPlaceHolder = $collectionValues->filter(val | !$val->instanceOf(VarPlaceHolder));
                          let varPlaceHoldersInCollection           = $collectionValues->filter(val | $val->instanceOf(VarPlaceHolder))->cast(@VarPlaceHolder);

                          let translationContext = ^TranslationContext(dbType=$connection.type);
                          let selectSqlQueryForTempTable            = generateTempTableSelectSQLQuery('default', $tempTableName, $tempTableColumnName, meta::relational::transform::fromPure::pureTypeToDataTypeMap()->get($collectionValueType)->translateCoreTypeToDbSpecificType($translationContext)->toOne());
                          let processedResultForTempTable           = $selectSqlQueryForTempTable->postProcessSQLQueryWithDefaultPostProcessors($store->toOne(), [], ^Mapping(), $runtime, $exeCtx, $extensions);

                          let allocationNode                        = if($collectionValuesWithoutVarPlaceHolder->isNotEmpty(),
                                                                           |^AllocationExecutionNode(
                                                                                varName        = $allocationNodeName,
                                                                                executionNodes = ^ConstantExecutionNode(
                                                                                                     values     = list(list(if($collectionValuesWithoutVarPlaceHolder->at(0)->instanceOf(Date),
                                                                                                                                |$collectionValuesWithoutVarPlaceHolder->map(d | $d->cast(@Date)->convertDateToSqlString([])),
                                                                                                                                |$collectionValuesWithoutVarPlaceHolder))),
                                                                                                     resultType = ^ResultType(type = List)
                                                                                                  ),
                                                                                resultType     = ^ResultType(type = List)
                                                                             );,
                                                                           |[]
                                                                        );

                          let createAndPopulateTempTableNode        = ^CreateAndPopulateTempTableExecutionNode(
                                                                          inputVarNames           = $varPlaceHoldersInCollection.name->concatenate($allocationNode.varName),
                                                                          tempTableName           = $tempTableName,
                                                                          tempTableColumnMetaData = ^TempTableColumnMetaData(
                                                                                                        column = ^SQLResultColumn(label = $tempTableColumnName,
                                                                                                                                  dataType = meta::relational::transform::fromPure::pureTypeToDataTypeMap()->get($collectionValueType)->toOne()->translateCoreTypeToDbSpecificType($translationContext))
                                                                                                     ),
                                                                          connection              = $connection,
                                                                          resultType              = ^VoidResultType(type=meta::pure::router::store::routing::Void)
                                                                       );

                           let executionNodeToBeAdded               = if($collectionValues->size() > $dbThreshold,
                                                                              | $allocationNode->concatenate($createAndPopulateTempTableNode),
                                                                              | let conditionString            = $varPlaceHoldersInCollection->map(var | 'collectionSize(' + $var.name +'![])?number')
                                                                                                                                       ->concatenate(if($collectionValuesWithoutVarPlaceHolder->isEmpty(), | [], |$collectionValuesWithoutVarPlaceHolder->size()->toString()))
                                                                                                                                       ->joinStrings('((' ,' + ',') > ' + $dbThreshold->toString() + ')');
                                                                                let conditionWithStreamHandled = $varPlaceHoldersInCollection->map(var | let streamCheck     = 'instanceOf(' +$var.name + ', "Stream")';
                                                                                                                                                         let dbSpecificCheck = if($dbSpecificTempTableCreationLogicSupplier->isNotEmpty(), | $dbSpecificTempTableCreationLogicSupplier->toOne()->eval($var.name), | []);
                                                                                                                                                         $streamCheck->concatenate($dbSpecificCheck);
                                                                                                                                                  )->concatenate($conditionString)->joinStrings('(', ' || ', ')');

                                                                                let trueString                 = $processedResultForTempTable.query->sqlQueryToString($connection.type, $connection.timeZone, $connection.quoteIdentifiers, $extensions);
                                                                                let trueExecutionNodes         = $allocationNode->concatenate($createAndPopulateTempTableNode)->concatenate(^ConstantExecutionNode(values = $trueString, resultType = ^ResultType(type = String)));

                                                                                let falseString                = $origInFunction.parameters->at(1)->processOperation($connection.type, $connection.timeZone, $connection.quoteIdentifiers, $extensions);
                                                                                let processedfalseString       = if($falseString->startsWith('(') && $falseString->endsWith(')'), | $falseString->substring(1, $falseString->length()-1), | $falseString);

                                                                                let conditionalnode      = ^FreeMarkerConditionalExecutionNode(
                                                                                                               freeMarkerBooleanExpression  = '${' + $conditionWithStreamHandled + '?c}',
                                                                                                               trueBlock                    = ^SequenceExecutionNode(executionNodes = $trueExecutionNodes, resultType = ^ResultType(type = String)),
                                                                                                               falseBlock                   = ^ConstantExecutionNode(values = $processedfalseString, resultType = ^ResultType(type = String)),
                                                                                                               resultType                   = ^ResultType(type = String)
                                                                                                           );
                                                                                ^AllocationExecutionNode(
                                                                                         varName        = $outerAllocationNodeName,
                                                                                         executionNodes = $conditionalnode,
                                                                                         resultType     = ^ResultType(type = String)
                                                                                     );
                                                                        );

                           if($outerAllocationNodeName->in($result.executionNodes->filter(node | $node->instanceOf(AllocationExecutionNode))->cast(@AllocationExecutionNode).varName), 
                              |$result,
                              |^$result(executionNodes += $processedResultForTempTable.executionNodes->concatenate($executionNodeToBeAdded), postExecutionNodes +=$processedResultForTempTable.postExecutionNodes, templateFunctions +=$processedResultForTempTable.templateFunctions));
            }, ^PostProcessorResult(query = $query));
}
