// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::mapping::*;
import meta::relational::metamodel::join::*;
import meta::relational::runtime::*;
import meta::relational::metamodel::relation::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::pure::mapping::*;
import meta::pure::runtime::*;
import meta::relational::metamodel::*;


function meta::relational::mapping::defaultPlanPostProcessors(query: SQLQuery[1], runtime:Runtime[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1],store:Database[0..1], exeCtx:ExecutionContext[1], extensions:Extension[*]): PostProcessorResult[1]
{
   let postProcessors = postProcessorList();
   let result = $postProcessors->fold({pp,queryHolder| let result = $pp->eval($queryHolder.query,$runtime->toOne(),$store,$exeCtx,$extensions);
                                                                         ^$queryHolder(query = $result.query,resultPostProcessor =$result.resultPostProcessor , executionNodes += $result.executionNodes, finallyExecutionNodes += $result.finallyExecutionNodes, postExecutionNodes +=$result.postExecutionNodes, templateFunctions +=$result.templateFunctions);},
                                                       ^PostProcessorResult(query =$query,resultPostProcessor = { result:Result<Any|*>[1] | $result},executionNodes = [])
                                    );

}

function meta::relational::mapping::postProcessorList():meta::pure::metamodel::function::Function<{SQLQuery[1], Runtime[1], Database[0..1], ExecutionContext[1], Extension[*]->PostProcessorResult[1]}>[*]
{
   [
      meta::relational::postProcessor::processInOperation_SQLQuery_1__Runtime_1__Database_$0_1$__ExecutionContext_1__Extension_MANY__PostProcessorResult_1_,
      meta::relational::postProcessor::processObjectReferenceInOperation_SQLQuery_1__Runtime_1__Database_$0_1$__ExecutionContext_1__Extension_MANY__PostProcessorResult_1_,
      meta::relational::mapping::defaultProcessors_SQLQuery_1__Runtime_1__Database_$0_1$__ExecutionContext_1__Extension_MANY__PostProcessorResult_1_,
      meta::relational::mapping::connectionAwareProcessors_SQLQuery_1__Runtime_1__Database_$0_1$__ExecutionContext_1__Extension_MANY__PostProcessorResult_1_,
      meta::relational::mapping::dbSpecificProcessor_SQLQuery_1__Runtime_1__Database_$0_1$__ExecutionContext_1__Extension_MANY__PostProcessorResult_1_
   ]
}

function meta::relational::mapping::defaultProcessors(query:SQLQuery[1], runtime:Runtime[1], store:Database[0..1], exeCtx:ExecutionContext[1], extensions:Extension[*]): PostProcessorResult[1]
{
   let connection = if($store->isNotEmpty(),|let connection =$runtime->connectionByElement($store->toOne()),|$runtime.connections->at(0));
   let connectionProcessors =  if($connection->instanceOf(DatabaseConnection), | $connection->cast(@DatabaseConnection).sqlQueryPostProcessors, | []);

   let defaultPostProcessorOutput = sqlQueryDefaultPostProcessors()->fold({pp,q|$pp->eval($q, $extensions).values->toOne()}, $query->cast(@SelectSQLQuery));
   let connectionPostProcessorOutput = $connectionProcessors->fold({pp,q|$pp->eval($q).values->toOne()}, $defaultPostProcessorOutput->cast(@SelectSQLQuery));
   ^PostProcessorResult(query = $connectionPostProcessorOutput,resultPostProcessor = {result:Result<Any|*>[1] | $result});
}

function meta::relational::mapping::sqlQueryDefaultPostProcessors():meta::pure::metamodel::function::Function<{SelectSQLQuery[1], Extension[*]->Result<SelectSQLQuery|1>[1]}>[*]
{
   [
      meta::relational::postProcessor::filterPushDown::pushFiltersDownToJoins_SelectSQLQuery_1__Extension_MANY__Result_1_,
      meta::relational::postProcessor::reAlias::replaceAliasName_SelectSQLQuery_1__Extension_MANY__Result_1_,
      meta::relational::postProcessor::comments::prependSQLComments_SelectSQLQuery_1__Extension_MANY__Result_1_
   ]
}

function meta::relational::postProcessor::comments::prependSQLComments(selectSQLQuery:SelectSQLQuery[1], extensions:Extension[*]):Result<SelectSQLQuery|1>[1]
{
   ^Result<SelectSQLQuery|1>(values= ^$selectSQLQuery(comment= '-- "executionTraceID" : "${execID}"'));
}

function meta::relational::postProcessor::generateTempTableSelectSQLQuery(tempTableSchemaName:String[1], tempTableName:String[1], tempTableColumnName: String[1], tempTableColumnType:meta::relational::metamodel::datatype::DataType[1]):SelectSQLQuery[1]
{
   let tempTableColumn            = ^Column(name = $tempTableColumnName, type = $tempTableColumnType);
   let tempTableAlias             = ^TableAlias(name = $tempTableName,
                                                relationalElement = ^Table(name = $tempTableName,
                                                                           schema = ^Schema(name = $tempTableSchemaName, database = ^Database(name='TempTableDb')),
                                                                           temporaryTable = true
                                                                     )
                                     );

   let tempTableAliasColumn       = ^TableAliasColumn(alias = $tempTableAlias, column = $tempTableColumn);
   ^SelectSQLQuery(
      columns = ^Alias(name = $tempTableAliasColumn.column.name, relationalElement = $tempTableAliasColumn),
      data    = ^RootJoinTreeNode(alias = $tempTableAlias)
   );
}
