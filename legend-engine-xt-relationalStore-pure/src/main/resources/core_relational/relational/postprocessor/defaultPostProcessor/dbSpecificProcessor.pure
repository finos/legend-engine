// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::alloy::connections::*;
import meta::relational::mapping::*;
import meta::pure::mapping::*;
import meta::relational::metamodel::relation::*;
import meta::relational::runtime::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::pure::runtime::*;
import meta::relational::metamodel::*;
import meta::pure::functions::collection::*;
import meta::relational::functions::sqlQueryToString::*;

function meta::relational::mapping::dbSpecificProcessor(query:SQLQuery[1], runtime:Runtime[1], store:Database[0..1], exeCtx:ExecutionContext[1], extensions:Extension[*]): PostProcessorResult[1]
{
   let conn = $runtime.connections->filter(c|$c->instanceOf(DatabaseConnection))->cast(@DatabaseConnection);
   let postProcessorQuery = if($conn->isNotEmpty(),
                                | let type = $conn.type;
                                  assert(type->size()==1, 'found not enough or too many DB types');
                                  if ($type->toOne()->createDbConfig([]).dbExtension.aliasLimit->isNotEmpty(),
                                     | trimColumnNamePostProcessors()->fold({pp,q|$pp->eval($q,$runtime).values->toOne()}, $query->cast(@SelectSQLQuery));,
                                     | $query);,
                                | $query);

   let postProcessorOutput = ^PostProcessorResult(query = $postProcessorQuery, resultPostProcessor = {result:Result<Any|*>[1] | $result});

   let dbConfig = createDbConfig($conn.type->toOne());
   if($dbConfig.dbExtension.preAndFinallyExecutionSQLQuery->isNotEmpty(),
                | let sqlPairs = if($conn->isNotEmpty() && $conn->toOne()->instanceOf(RelationalDatabaseConnection),
                                      |$dbConfig.preAndFinallyExecutionSQLQuery($conn->toOne()->cast(@RelationalDatabaseConnection).datasourceSpecification),
                                      |[]);
                  if($sqlPairs->isNotEmpty(),
                    | let executionNodes = $sqlPairs->map(p | $p->cast(@PreAndFinallyExecutionSQLQuery).preQueryExecutionSQLQuery->toOne()->generateSQLExecNode($conn->toOne()));
                      let finallyExecutionNodes = $sqlPairs->map(p | $p->cast(@PreAndFinallyExecutionSQLQuery).finallyQueryExecutionSQLQuery->toOne()->generateSQLExecNode($conn->toOne()));
                      ^$postProcessorOutput(executionNodes = $executionNodes, finallyExecutionNodes = $finallyExecutionNodes);,
                    | $postProcessorOutput);,
                | $postProcessorOutput);
}

Class meta::relational::mapping::PreAndFinallyExecutionSQLQuery
[
  atleast_one_execution: !($this.preQueryExecutionSQLQuery->isEmpty() && $this.finallyQueryExecutionSQLQuery->isEmpty())
]
{
   preQueryExecutionSQLQuery  : String[0..1];
   finallyQueryExecutionSQLQuery : String[0..1];
}

function <<access.private>> meta::relational::mapping::generateSQLExecNode(sql:String[1], dbCon:DatabaseConnection[1]) : SQLExecutionNode[1]
{
   ^SQLExecutionNode(sqlQuery = $sql, resultType = ^meta::pure::executionPlan::VoidResultType(type=meta::pure::router::store::routing::Void), connection = $dbCon);
}

function meta::relational::mapping::trimColumnNamePostProcessors():meta::pure::metamodel::function::Function<{SelectSQLQuery[1],Runtime[1]->Result<SelectSQLQuery|1>[1]}>[1]
{
   [
      meta::relational::postProcessor::reAliasColumnName::trimColumnName_SelectSQLQuery_1__Runtime_1__Result_1_
   ]
}