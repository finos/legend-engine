// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::runtime::*;
import meta::relational::dbTestRunner::*;
import meta::pure::alloy::connections::*;


Class meta::relational::dbTestRunner::DbTestConfig
{
   dbType: DatabaseType[1];
   connection: RelationalDatabaseConnection[0..1];
   expectedSql: String[0..1];
}

function meta::relational::dbTestRunner::getTestConnection(dbType:DatabaseType[1], extensions:meta::pure::router::extension::RouterExtension[*]):RelationalDatabaseConnection[0..1]
{
  meta::legend::test::mayExecuteLegendTest
     (
       {clientVersion, serverVersion, serializationKind, host, port |
         let fStr = 'meta::protocols::pure::'+$clientVersion+'::invocation::execution::testConnection::getTestConnection_DatabaseType_1__String_1__Integer_1__RouterExtension_MANY__RelationalDatabaseConnection_$0_1$_';
         let xf = $fStr->pathToElement()->cast(@Function<{DatabaseType[1], String[1], Integer[1], meta::pure::router::extension::RouterExtension[*]->RelationalDatabaseConnection[0..1]}>);
         let res= $xf->evaluate([$dbType, $host, $port]->map(v|list($v))->concatenate(list($extensions)));
         if($res->isNotEmpty(), 
           |$res->toOne()->cast(@RelationalDatabaseConnection),
           | println('**** Warning **** : Test Connection for dbType: '+ $dbType->toString() + ' not available on Legend Engine Server, tests will only generate execution plans without asserting actual data');
             []->cast(@RelationalDatabaseConnection);
           );
         },
       { |
         println('**** Warning **** : Legend Engine Server not available');
         []->cast(@RelationalDatabaseConnection);
       }
     );
}

function meta::relational::dbTestRunner::collectTests(pack: Package[1]): Function<{DbTestConfig[1] -> Boolean[1]}>[*]
{
   $pack.children->map(c| $c->match([
      f:Function<Any>[1]| if($f.stereotypes->contains(meta::pure::test::paramTest->stereotype('Test')), |$f->cast(@Function<{DbTestConfig[1] -> Boolean[1]}>), |[]),
      p:Package[1]| collectTests($p),
      x:Any[1]| []
   ]));
}

function meta::relational::dbTestRunner::executeInRelationalDb(sqls:String[*], conn:RelationalDatabaseConnection[1], extensions:meta::pure::router::extension::RouterExtension[*]):Boolean[1]
{
  meta::legend::test::mayExecuteLegendTest
     (
       {clientVersion, serverVersion, serializationKind, host, port |
         let fStr = 'meta::protocols::pure::'+$clientVersion+'::invocation::execution::executeInRelationalDb::executeInRelationalDb_String_MANY__RelationalDatabaseConnection_1__String_1__Integer_1__RouterExtension_MANY__Boolean_1_';
         let xf = $fStr->pathToElement()->cast(@Function<{String[*], RelationalDatabaseConnection[1], String[1], Integer[1], meta::pure::router::extension::RouterExtension[*]->Boolean[1]}>);
         let res= $xf->evaluate(list($sqls)->concatenate([$conn, $host, $port]->map(v|list($v)))->concatenate(list($extensions)));
         $res->cast(@Boolean)->toOne();
         },
       { |
         println('**** Warning **** : Legend Engine Server not available');
         false;
       }
     );
}