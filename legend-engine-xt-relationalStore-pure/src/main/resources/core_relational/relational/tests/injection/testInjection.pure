// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::injection::model::*;
import meta::relational::tests::injection::store::*;
import meta::relational::tests::injection::mapping::*;
import meta::relational::runtime::*;
import meta::relational::metamodel::execute::*;


function <<test.BeforePackage>> meta::relational::tests::injection::setUp():Boolean[1]
{
    meta::relational::tests::injection::createTablesAndInsert();
    true;
}

Class meta::relational::tests::injection::model::Book
{
   name : String[1];
   trades : Trade[*];
}

Class meta::relational::tests::injection::model::Trade
{
   name : String[1];
   d :Date[1];
   products : meta::relational::tests::injection::model::Product[*];
   productAtTimeOfTrade(){$this.products->filter(p|$p.date == $this.d)->toOne()}:Product[1];
   
}

Class meta::relational::tests::injection::model::Product
{
   name : String[1];
   date : Date[1];
}

function <<test.Test>>  meta::relational::tests::injection::testProject():Boolean[1]
{
   let tds = execute(|Trade.all()->project([t|$t.name, t|$t.productAtTimeOfTrade.name], ['a','b']), myMapping, meta::relational::tests::injection::testRuntime(), meta::relational::extension::relationalExtensions()).values->toOne();
   assertEquals(4, $tds.rows->size());
   assertSameElements(['Trade 1 prod 1 V2','Trade 2 prod 2 V1','Trade 3 prod 3 V1','Trade 4 prod 4 V2'], $tds.rows->map(r|$r.get('a')->toString()+' '+$r.get('b')->toString()));
}

function <<test.Test>>  meta::relational::tests::injection::testProjectThroughAssociation():Boolean[1]
{
   let tds = execute(|Book.all()->project([b|$b.name, b|$b.trades->map(t|$t.productAtTimeOfTrade.name)], ['a','b']), myMapping, meta::relational::tests::injection::testRuntime(), meta::relational::extension::relationalExtensions()).values->toOne();
   assertEquals(4, $tds.rows->size());
   assertSameElements(['Book 1 prod 1 V2','Book 1 prod 2 V1','Book 1 prod 3 V1','Book 2 prod 4 V2'], $tds.rows->map(r|$r.get('a')->toString()+' '+$r.get('b')->toString()));
}

function <<test.Test>>  meta::relational::tests::injection::testProjectThroughAssociationAutoMap():Boolean[1]
{
   let tds = execute(|Book.all()->project([b|$b.name, b|$b.trades.productAtTimeOfTrade.name], ['a','b']), myMapping, meta::relational::tests::injection::testRuntime(), meta::relational::extension::relationalExtensions()).values->toOne();
   assertEquals(4, $tds.rows->size());
   assertSameElements(['Book 1 prod 1 V2','Book 1 prod 2 V1','Book 1 prod 3 V1','Book 2 prod 4 V2'], $tds.rows->map(r|$r.get('a')->toString()+' '+$r.get('b')->toString()));
}



function meta::relational::tests::injection::createTablesAndInsert():Boolean[1]
{
   let connection = meta::relational::tests::injection::testRuntime().connectionByElement(myDB)->cast(@TestDatabaseConnection);

   meta::relational::functions::toDDL::dropAndCreateTableInDb(myDB, 'Trade', $connection);

   executeInDb('insert into Trade (id, name, tradeDate, bookId) values (1, \'Trade 1\', \'2014-12-02 21:00:00\', 1);', $connection);
   executeInDb('insert into Trade (id, name, tradeDate, bookId) values (2, \'Trade 2\', \'2014-12-03 21:00:00\', 1);', $connection);
   executeInDb('insert into Trade (id, name, tradeDate, bookId) values (3, \'Trade 3\', \'2014-12-04 21:00:00\', 1);', $connection);
   executeInDb('insert into Trade (id, name, tradeDate, bookId) values (4, \'Trade 4\', \'2014-12-05 21:00:00\', 2);', $connection);


   meta::relational::functions::toDDL::dropAndCreateTableInDb(myDB, 'Product', $connection);

   executeInDb('insert into Product (id, productDate, name, tradeId) values (1, \'2014-12-01 21:00:00\', \'prod 1 V1\', 1);', $connection);
   executeInDb('insert into Product (id, productDate, name, tradeId) values (2, \'2014-12-02 21:00:00\', \'prod 1 V2\', 1);', $connection);
   executeInDb('insert into Product (id, productDate, name, tradeId) values (3, \'2014-12-03 21:00:00\', \'prod 1 V3\', 1);', $connection);
   executeInDb('insert into Product (id, productDate, name, tradeId) values (4, \'2014-12-03 21:00:00\', \'prod 2 V1\', 2);', $connection);
   executeInDb('insert into Product (id, productDate, name, tradeId) values (5, \'2014-12-04 21:00:00\', \'prod 3 V1\', 3);', $connection);
   executeInDb('insert into Product (id, productDate, name, tradeId) values (6, \'2014-12-06 21:00:00\', \'prod 4 V1\', 4);', $connection);
   executeInDb('insert into Product (id, productDate, name, tradeId) values (7, \'2014-12-05 21:00:00\', \'prod 4 V2\', 4);', $connection);

   meta::relational::functions::toDDL::dropAndCreateTableInDb(myDB, 'Book', $connection);

   executeInDb('insert into Book (id, name) values (1, \'Book 1\');', $connection);
   executeInDb('insert into Book (id, name) values (2, \'Book 2\');', $connection);
   
   true;
   
}

function meta::relational::tests::injection::testRuntime():meta::pure::runtime::Runtime[1]
{
   meta::relational::tests::testRuntime(myDB);
}

###Relational
Database meta::relational::tests::injection::store::myDB
(
   Table Book(id INT PRIMARY KEY, name VARCHAR(200))
   Table Trade(id INT PRIMARY KEY, name VARCHAR(200), tradeDate TIMESTAMP, bookId INT)
   Table Product(id INTEGER PRIMARY KEY, productDate TIMESTAMP, name VARCHAR(200), tradeId INT)
   Join TradeProduct(Trade.id = Product.tradeId)
   Join BookTrade(Book.id = Trade.bookId)
)

###Mapping
import meta::relational::tests::injection::store::*;
import meta::relational::tests::injection::model::*;

Mapping meta::relational::tests::injection::mapping::myMapping
(
   Trade : Relational
           {
              name : [myDB]Trade.name,
              d : [myDB]Trade.tradeDate,
              products : [myDB]@TradeProduct
           }
           
   Product : Relational
             {
                name : [myDB]Product.name,
                date : [myDB]Product.productDate
             }

   Book : Relational
             {
                name : [myDB]Book.name,
                trades : [myDB]@BookTrade
             }
)