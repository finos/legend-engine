// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;
import meta::relational::tests::mapping::database::*;
import meta::relational::runtime::*;
import meta::relational::metamodel::execute::*;
import meta::pure::runtime::*;
import meta::relational::mapping::*;


function <<test.Test>> meta::relational::tests::mapping::database::testColumnNames():Boolean[1]
{
   let result = execute(| MyClass.all(), testMapping, testRuntime(), meta::pure::router::extension::defaultRelationalExtensions());
   assertSize($result, 1);
   assertEquals(2, $result.values->first()->cast(@MyClass).a);
   assertEquals(MyEnum.NO, $result.values->first()->cast(@MyClass).d);
   
   let result2 = execute(| MyClassB.all(), testMapping, testRuntime(), meta::pure::router::extension::defaultRelationalExtensions());
   assertSize($result2, 1);
   assertEquals('Description A', $result2.values->first()->cast(@MyClassB).c);
         
   let filteredResult = execute(| MyClass.all()->filter(m | $m.a == 2), testMapping, testRuntime(), meta::pure::router::extension::defaultRelationalExtensions());
   assertSize($filteredResult, 1);
   assertEquals(2, $result.values->first()->cast(@MyClass).a);
}

function <<test.Test>> meta::relational::tests::mapping::database::testTableNameInJoinAlias():Boolean[1]
{
   let result = execute(| MyClass.all()->project([c | $c.b.c], ['c']), testMapping, testRuntime(), meta::pure::router::extension::defaultRelationalExtensions());
   assertSize($result, 1);
   assertEquals('select "test table2_0"."My#Data" as "c" from testTable as "root" left outer join "test Table2" as "test table2_0" on ("root"."Column.ID" = "test table2_0"."Column&ID")', $result->sqlRemoveFormatting());
}


function meta::relational::tests::mapping::database::testRuntime():Runtime[1]
{
   meta::relational::tests::testRuntime(myDB);
}

function <<test.BeforePackage>> meta::relational::tests::mapping::database::createTablesAndFillDb():Boolean[1]
{
   let connection = testRuntime().connectionByElement(myDB)->cast(@TestDatabaseConnection);

   executeInDb('Drop table if exists testTable;', $connection);
   executeInDb('Create Table testTable(ID INT, "Column Name with Space" INT, "Column&A" INT, "Column.ID" INT);', $connection);
   executeInDb('insert into testTable(ID, "Column Name with Space", "Column&A", "Column.ID") values (1,2,0,3);', $connection);
   
   executeInDb('Drop table if exists "test Table2";', $connection);
   executeInDb('Create Table "test Table2"("Column&ID" INT, "My#Data" VARCHAR(20));', $connection);
   executeInDb('insert into "test Table2"("Column&ID", "My#Data") values (3,\'Description A\');', $connection);
   
   true;
}


Class meta::relational::tests::mapping::database::MyClass
{

   a:Integer[1];
   b:MyClassB[0..1];
   d:MyEnum[0..1];
}

Class meta::relational::tests::mapping::database::MyClassB
{

   c:String[1];
}

Enum meta::relational::tests::mapping::database::MyEnum
{
   YES,
   NO
}


###Relational


Database meta::relational::tests::mapping::database::myDB
(
    Table testTable
    (
       ID INT PRIMARY KEY,
       "Column Name with Space" INT,
       "Column&A" INT,
       "Column.ID" INT
    )
    
    Table "test Table2"
    (
       "Column&ID" INT PRIMARY KEY,
       "My#Data" VARCHAR(20)
    )
    
    Join testJoin
    (
        testTable."Column.ID" = "test Table2"."Column&ID"
    )
)

###Mapping

import meta::relational::tests::mapping::database::*;

Mapping meta::relational::tests::mapping::database::testMapping
(
    MyEnum: EnumerationMapping Active
    {
        YES:  1,
        NO: 0
    }
    
    MyClass: Relational
    {
        a: [myDB] testTable."Column Name with Space",
        b: [myDB] @testJoin,
        d: EnumerationMapping Active : [myDB] testTable."Column&A"
    }
    
    MyClassB: Relational
    {
       c: [myDB] "test Table2"."My#Data"
    }
    

)
