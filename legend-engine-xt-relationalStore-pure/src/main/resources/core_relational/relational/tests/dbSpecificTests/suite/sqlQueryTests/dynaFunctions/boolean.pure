// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::metamodel::*;
import meta::relational::dbTestRunner::*;

//boolean operations
function <<dbTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::and::testAnd(config:DbTestConfig[1]):String[0..1]
{
  let dynaFunc = ^DynaFunction(name='and', parameters=[^DynaFunction(name='greaterThan', parameters=[^Literal(value=11), ^Literal(value=1)]),
                                                       ^DynaFunction(name='lessThan', parameters=[^Literal(value=11), ^Literal(value=1)])]);
  // let dynaFunc = ^DynaFunction(name='and', parameters=[^Literal(value=true), ^Literal(value=false)]);   // use conditions instead of booleans directly , as some dbs dont support boolean datatype
 
  let expected = ^Literal(value=false);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<dbTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::or::testOr(config:DbTestConfig[1]):String[0..1]
{
  let dynaFunc = ^DynaFunction(name='or', parameters=[^DynaFunction(name='greaterThan', parameters=[^Literal(value=11), ^Literal(value=1)]),
                                                      ^DynaFunction(name='lessThan', parameters=[^Literal(value=11), ^Literal(value=1)])]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

// object equality
function <<dbTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::equal::testNumberEquality(config:DbTestConfig[1]):String[0..1]
{
  let dynaFunc = ^DynaFunction(name='equal', parameters=[^Literal(value=11), ^Literal(value=11)]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<dbTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::notEqual::testNumberInequality(config:DbTestConfig[1]):String[0..1]
{
  let dynaFunc = ^DynaFunction(name='notEqual', parameters=[^Literal(value=11), ^Literal(value=11)]);
  let expected = ^Literal(value=false);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<dbTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::notEqualAnsi::testNumberInequality(config:DbTestConfig[1]):String[0..1]
{
  let dynaFunc = ^DynaFunction(name='notEqualAnsi', parameters=[^Literal(value=11), ^Literal(value=11)]);
  let expected = ^Literal(value=false);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}


// Number comparison
function <<dbTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::greaterThan::testNumbers(config:DbTestConfig[1]):String[0..1]
{
  let dynaFunc = ^DynaFunction(name='greaterThan', parameters=[^Literal(value=11), ^Literal(value=1)]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<dbTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::greaterThanEqual::testNumbers(config:DbTestConfig[1]):String[0..1]
{
  let dynaFunc = ^DynaFunction(name='greaterThanEqual', parameters=[^Literal(value=11), ^Literal(value=1)]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<dbTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::lessThan::testNumbers(config:DbTestConfig[1]):String[0..1]
{
  let dynaFunc = ^DynaFunction(name='lessThan', parameters=[^Literal(value=1), ^Literal(value=11)]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<dbTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::lessThanEqual::testNumbers(config:DbTestConfig[1]):String[0..1]
{
  let dynaFunc = ^DynaFunction(name='lessThanEqual', parameters=[^Literal(value=1), ^Literal(value=11)]);
  let expected = ^Literal(value=true);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}