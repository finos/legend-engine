//Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::metamodel::*;
import meta::relational::dbTestRunner::*;
import meta::pure::test::*;
import meta::relational::mapping::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::relational::dbTestRunner::*;
import meta::pure::test::*;
import meta::pure::runtime::*;
import meta::relational::metamodel::*;
import meta::relational::runtime::*;
import meta::pure::alloy::connections::*;
import  meta::relational::metamodel::relation::*;

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::aggregateFunctions::count::testOnAllRows(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name= 'count' , parameters=[]);

  let table= meta::relational::tests::db->cast(@Database).schema('default').table('personTable')->toOne();
  let sqlQuery = ^SelectSQLQuery(columns=[$dynaFunc],
                                 data= ^meta::relational::metamodel::join::RootJoinTreeNode(
                                     alias=^TableAlias(name= 'myTable' , relationalElement=$table)));

  let expected = ^Literal(value=7);
  runSqlQueryTest($sqlQuery, $expected,[], $config);
}

// size and count are functionally same
function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::aggregateFunctions::size::testSize(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name= 'size' , parameters=[]);

  let table= meta::relational::tests::db->cast(@Database).schema('default').table('personTable')->toOne();
  let sqlQuery = ^SelectSQLQuery(columns=[$dynaFunc],
                                 data= ^meta::relational::metamodel::join::RootJoinTreeNode(
                                     alias=^TableAlias(name= 'myTable' , relationalElement=$table)));

  let expected = ^Literal(value=7);
  runSqlQueryTest($sqlQuery, $expected,[], $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::aggregateFunctions::average::testAverage(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name= 'average' , parameters=[^ColumnName(name='AGE')]);

  let table= meta::relational::tests::db->cast(@Database).schema('default').table('personTable')->toOne();
  let sqlQuery = ^SelectSQLQuery(columns=[$dynaFunc],
                                 data= ^meta::relational::metamodel::join::RootJoinTreeNode(
                                     alias=^TableAlias(name= 'myTable' , relationalElement=$table)));

  let expected = ^Literal(value=25.714);
  let equalityComparator =  floatEqualityComparatorGenerator([0.099]);
  runSqlQueryTest($sqlQuery, $expected,$equalityComparator, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::aggregateFunctions::sum::testSum(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name= 'sum' , parameters=[^ColumnName(name='AGE')]);

  let table= meta::relational::tests::db->cast(@Database).schema('default').table('personTable')->toOne();
  let sqlQuery = ^SelectSQLQuery(columns=[$dynaFunc],
                                 data= ^meta::relational::metamodel::join::RootJoinTreeNode(
                                     alias=^TableAlias(name= 'myTable' , relationalElement=$table)));

  let expected = ^Literal(value=180);
  runSqlQueryTest($sqlQuery, $expected,[], $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::aggregateFunctions::max::testMax(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name= 'max' , parameters=[^ColumnName(name='AGE')]);

  let table= meta::relational::tests::db->cast(@Database).schema('default').table('personTable')->toOne();
  let sqlQuery = ^SelectSQLQuery(columns=[$dynaFunc],
                                 data= ^meta::relational::metamodel::join::RootJoinTreeNode(
                                     alias=^TableAlias(name= 'myTable' , relationalElement=$table)));

  let expected = ^Literal(value=35);
  runSqlQueryTest($sqlQuery, $expected,[], $config);
}


function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::aggregateFunctions::min::testMin(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name= 'min' , parameters=[^ColumnName(name='AGE')]);

  let table= meta::relational::tests::db->cast(@Database).schema('default').table('personTable')->toOne();
  let sqlQuery = ^SelectSQLQuery(columns=[$dynaFunc],
                                 data= ^meta::relational::metamodel::join::RootJoinTreeNode(
                                     alias=^TableAlias(name= 'myTable' , relationalElement=$table)));

  let expected = ^Literal(value=12);
  runSqlQueryTest($sqlQuery, $expected,[], $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::aggregateFunctions::stdDevSample::testStdDevSample(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name= 'stdDevSample' , parameters=[^ColumnName(name='AGE')]);

  let table= meta::relational::tests::db->cast(@Database).schema('default').table('personTable')->toOne();
  let sqlQuery = ^SelectSQLQuery(columns=[$dynaFunc],
                                 data= ^meta::relational::metamodel::join::RootJoinTreeNode(
                                     alias=^TableAlias(name= 'myTable' , relationalElement=$table)));

  let expected = ^Literal(value=8.34);
  let equalityComparator =  floatEqualityComparatorGenerator([0.01]);
  runSqlQueryTest($sqlQuery, $expected,$equalityComparator, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::aggregateFunctions::stdDevPopulation::testStdDevPopulation(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name= 'stdDevPopulation' , parameters=[^ColumnName(name='AGE')]);

  let table= meta::relational::tests::db->cast(@Database).schema('default').table('personTable')->toOne();
  let sqlQuery = ^SelectSQLQuery(columns=[$dynaFunc],
                                 data= ^meta::relational::metamodel::join::RootJoinTreeNode(
                                     alias=^TableAlias(name= 'myTable' , relationalElement=$table)));

  let expected = ^Literal(value=7.72);
  let equalityComparator =  floatEqualityComparatorGenerator([0.01]);
  runSqlQueryTest($sqlQuery, $expected,$equalityComparator, $config);
}

//Tests on groups
function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::aggregateFunctions::groupBy::simpleGroupByCount(config:DbTestConfig[1]):Boolean[1]
{
   let result = executeViaPlan(|Trade.all()
                         ->project([#/Trade/quantity!quantity#, #/Trade/product/name!prodName#])
                         ->groupBy('prodName', agg('cnt', x|$x, y| $y->count())),
                         simpleRelationalMapping, meta::relational::tests::db, $config, meta::relational::extension::relationalExtensions());
   
  if($result->isEmpty(), | true,
  |let tds = $result.values->at(0);
   assertEquals([String, Integer], $result.values.columns.type);
   assertEquals(4, $tds.rows->size());
   let resultStrs = $tds.rows->map(r| if($r.values->at(0) == ^TDSNull(), |'Null', |$r.values->at(0)->cast(@String)) + ', ' + $r.values->at(1)->toString())->sort();
   assertEquals(['Firm A, 3', 'Firm C, 5', 'Firm X, 2', 'Null, 1'], $resultStrs);
  );
}


