// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::asserts::*;
import meta::relational::mapping::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::pure::profiles::*;

function <<test.Test>> meta::relational::tests::query::openvariables::testGroupOpenVariable():Boolean[1]
{
   let var = 'Johnson';
   let other = 'John';
   let result = execute(|Person.all()->filter(p|$p.firstName == $other && ($p.lastName == $var || $p.lastName == 'Allen')), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 1);
   assertEquals('Johnson', $result.values->toOne().lastName);
   assertSameSQL('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" where ("root".FIRSTNAME = \'John\' and ("root".LASTNAME = \'Johnson\' or "root".LASTNAME = \'Allen\'))', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::query::openvariables::testExistsOpenVariable():Boolean[1]
{
   let var = 'Roberts';
   let result = execute(|Firm.all()->filter(f|$f.employees->exists(e|$e.lastName == $var)), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 1);
   assertEquals('Firm A', $result.values->toOne().legalName);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" where "persontable_1".LASTNAME = \'Roberts\') as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".FIRMID is not null', $result);
}

// Alloy exclusion reason: 3. Using getter on an instance
function <<test.Test, test.ExcludeAlloy>> meta::relational::tests::query::openvariables::testExistsOpenVariableClass():Boolean[1]
{
   let var = ^Person(firstName='Bob', lastName='Roberts');
   let result = execute(|Firm.all()->filter(f|$f.employees->exists(e|$e.lastName == $var.lastName)), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 1);
   assertEquals('Firm A', $result.values->toOne().legalName);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" where "persontable_1".LASTNAME = \'Roberts\') as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".FIRMID is not null', $result);
}


function <<test.Test>> meta::relational::tests::query::openvariables::testExistsAndBooleanOpenVariables():Boolean[1]
{
   let var1 = 'Roberts';
   let var2 = 'Smith';
   let result = execute(|Firm.all()->filter(f|$f.employees->exists(e|$e.lastName == $var1 || $e.lastName == $var2)), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 3);
   assertSameElements(['Firm A', 'Firm C', 'Firm X'], $result.values.legalName);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" where ("persontable_1".LASTNAME = \'Roberts\' or "persontable_1".LASTNAME = \'Smith\')) as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".FIRMID is not null', $result);
}
