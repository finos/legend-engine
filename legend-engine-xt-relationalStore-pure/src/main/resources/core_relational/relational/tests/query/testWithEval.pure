// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::mapping::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::pure::profiles::*;

function <<test.Test>> meta::relational::tests::query::eval::testAssociationToOneThroughEval():Boolean[1]
{
   let result = execute(|Person.all()->filter(p|eval(f|$f.legalName == 'Firm X' || $f.legalName == 'Firm A', $p.firm->toOne())), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 7);
   assertSameElements(['Allen', 'Smith', 'Johnson', 'New York', 'Roberts', 'Hill', 'York'], $result.values.lastName);
   assertEquals('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID) where ("firmtable_0".LEGALNAME = \'Firm X\' or "firmtable_0".LEGALNAME = \'Firm A\')', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::query::eval::testPredicateThroughEval():Boolean[1]
{
   let result = execute(|Person.all()->filter(p|eval(f|$p.lastName == 'Johnson' || $p.firstName == 'Fabrice', $p)), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 2);
   assertSameElements(['Johnson', 'Roberts'], $result.values.lastName);
   assertEquals('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" where ("root".LASTNAME = \'Johnson\' or "root".FIRSTNAME = \'Fabrice\')', $result->sqlRemoveFormatting());
}
