// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::mapping::inheritance::*;
import meta::relational::mapping::*;
import meta::relational::tests::mapping::association::inheritence::*;
import meta::relational::tests::model::inheritance::*;
import meta::relational::tests::*;
import meta::pure::profiles::*;
import meta::pure::mapping::*;
import meta::relational::metamodel::execute::*;
import meta::relational::runtime::*;

function <<test.BeforePackage>> meta::relational::tests::mapping::association::inheritence::setUp():Boolean[1]
{
    meta::relational::tests::mapping::inheritance::createTablesAndFillDb();
}

function <<test.Test>> meta::relational::tests::mapping::association::inheritence::testProjectTwoLambdas():Boolean[1]
{
   let result1 = execute(|Person.all()->project([p|$p.name, p|$p.roadVehicles->map(r|$r.wheelCount)], ['name', 'wheelCount']), assocMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   assertEquals(5, $result1.rows->size());
   assertSameElements(['Atul Anand 3', 'Atul Anand 4', 'David Scott 2', 'David Scott 4', 'David Scott 4'], $result1.rows->map(r|$r.getString('name')+' '+$r.getInteger('wheelCount')->toString()));
}

function <<test.Test>> meta::relational::tests::mapping::association::inheritence::testGroupBy():Boolean[1]
{
   let result1 = execute(|Person.all()->project([p|$p.name, p|$p.roadVehicles->map(r|$r.wheelCount)], ['name', 'wheelCount'])->groupBy('name', agg('wheelCountSum', r|$r.getInteger('wheelCount'), s|$s->sum())), assocMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   assertEquals(2, $result1.rows->size());
   assertSameElements(['Atul Anand 7', 'David Scott 10'], $result1.rows->map(r|$r.getString('name')+' '+$r.getInteger('wheelCountSum')->toString()));
}

function <<test.Test>> meta::relational::tests::mapping::association::inheritence::testBuilderRoutingOfAggFunctionParameters():Boolean[1]
{
   let result = execute(|Person.all()->groupBy([p|$p.name], [agg(p|$p.ownedVehiclesWithEmptyDescription()->subType(@Car).wheelCount, s|$s->sum())],['name', 'wheelCountSum']), assocMapping2, testRuntime(), meta::relational::extension::relationalExtensions());
   println($result);
   assertEquals(2, $result.values.rows->size());
   assertEquals('select "root".name as "name", sum("car_0".db_car_wheelCount) as "wheelCountSum" from Person as "root" left outer join Car as "car_0" on ("root".ID = "car_0".c_PersonID and "car_0".c_Description = \'\') group by "name"', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::mapping::association::inheritence::testQuery():Boolean[1]
{
   let result1 = execute(|Person.all()->filter(p|$p.roadVehicles->exists(r|$r.id == 1)), assocMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values;
   assertEquals(1, $result1->size());
   assertEquals('David Scott', $result1.name);
}

function <<test.Test>> meta::relational::tests::mapping::association::inheritence::testFilterProject():Boolean[1]
{
   let result1 = execute(|Person.all()->filter(p|$p.roadVehicles->exists(r|$r.id == 1))->project([p|$p.name], ['name']), assocMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   assertEquals(1, $result1->size());
   assertEquals('David Scott', $result1.rows.values);
}

function <<test.Test>> meta::relational::tests::mapping::association::inheritence::testFilterProjectBooleanInFilter():Boolean[1]
{
   let result1 = execute(|Person.all()->filter(p|$p.roadVehicles->exists(r|$r.id == 1 || $r.description->startsWith('Nissan')))->project([p|$p.name], ['name']), assocMapping, testRuntime()
   , meta::relational::extension::relationalExtensions()).values->at(0);
   assertEquals(2, $result1.rows.values->size());
   assertEquals(['Atul Anand','David Scott'], $result1.rows.values->sort());
}

function <<test.Test>> meta::relational::tests::mapping::association::inheritence::testGetAllFilterWithAssociation():Boolean[1]
{
   let result1 = execute(|RoadVehicle.all()->filter(r|$r.person.name == 'David Scott'), assocMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values;
   assertEquals(3, $result1->size());

   let result2 = execute(|RoadVehicle.all()->filter(r|$r.person.name == 'Atul Anand'), assocMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values;
   assertEquals(2, $result2->size());
}

function <<test.Test>> meta::relational::tests::mapping::association::inheritence::testSubTypeFilter():Boolean[1]
{
   let result1 = execute(|Person.all()->filter(p|$p.roadVehicles->subType(@Car)->exists(c|$c.engineType == EngineType.V)), assocMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values;
   assertEquals(1, $result1->size());
   assertEquals('David Scott', $result1->at(0).name);

   let result2 = execute(|Person.all()->filter(p|$p.roadVehicles->subType(@Bicycle)->exists(c|$c.wheelCount == 3)), assocMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values;
   assertEquals(1, $result2->size());
   assertEquals('Atul Anand', $result2->at(0).name);
}

function <<test.Test>> meta::relational::tests::mapping::association::inheritence::testSubTypeProjectWithAssociation():Boolean[1]
{
   let result1 = execute(|Person.all()->project([p|$p.name, p|$p.roadVehicles->subType(@Car).engineType], ['name', 'engine']), assocMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   assertEquals(3, $result1.rows->size());
   assertSameElements(['David Scott V','David Scott U','Atul Anand H'], $result1.rows->map(r|$r.get('name')->toString()+' '+$r.get('engine')->toString()));
}


function <<test.Test>> meta::relational::tests::mapping::association::inheritence::testSubTypeProjectSharedNonDirectlyRouted():Boolean[1]
{
   let result1 = execute(|Person.all().roadVehicles->project([p|$p.id, p|$p->subType(@Car).engineType], ['id', 'engine']), assocMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   assertEquals(5, $result1.rows->size());
   assertSameElements(['1 TDSNull', '1 V', '2 TDSNull', '2 U', '3 H'], $result1.rows->map(r|$r.get('id')->toString()+' '+$r.get('engine')->toString()));
}

function <<test.Test, test.ToFix>> meta::relational::tests::mapping::association::inheritence::testSubTypeProjectSharedNonDirectlyRoutedWithFilter():Boolean[1]
{
   let result1 = execute(|Person.all().roadVehicles->filter(r|$r.person.name == 'David Scott')->project([p|$p.id, p|$p->subType(@Car).engineType], ['id', 'engine']), assocMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   assertEquals(5, $result1.rows->size());
   assertSameElements(['1 TDSNull', '1 V', '2 TDSNull', '2 U', '3 H'], $result1.rows->map(r|$r.get('id')->toString()+' '+$r.get('engine')->toString()));
}


function <<test.Test>> meta::relational::tests::mapping::association::inheritence::testSubTypeInColumnProjectionsWithInlineMappings():Boolean[1]
{
   let result1 = execute(|Vehicle.all()->project([col(x | $x.vehicleOwner->subType(@Person).name, 'Person Name')]), ineritanceMappingWithInlineEmbeddedSets, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   assertEquals(5, $result1.rows->size());
   assertSameElements(['Atul Anand', 'David Scott', 'TDSNull', 'TDSNull', 'TDSNull'], $result1.rows->map(r|$r.values->makeString(',')));
}


###Mapping
import meta::relational::tests::model::inheritance::*;
import meta::relational::tests::mapping::inheritance::*;

Mapping meta::relational::tests::mapping::association::inheritence::childMapping
(
   Person[per1] : Relational
            {
               name : [myDB] Person.name,
               vehicles[map1] : [myDB]@PersonCar,
               vehicles[map2] : [myDB]@PersonBicycle
            }
            
   Car[map1]: Relational
            {
               id : [myDB] Car.ID,
               engineType : EnumerationMapping engineTypeMapping : [myDB] Car.engineType,
               wheelCount :  [myDB] Car.db_car_wheelCount,
               description : [myDB] Car.c_Description
            }

   Bicycle[map2] : Relational
            {
               id : [myDB] Bicycle.ID,
               wheelCount :  [myDB] Bicycle.db_bic_wheelCount,
               description : [myDB] Bicycle.b_Description
               
            }
            


   EngineType: EnumerationMapping engineTypeMapping
   {
      V: [1],
      U: [2],
      H: [3],
      W: [4],
      X: [5]
   }
)

###Mapping
import meta::relational::tests::mapping::association::*;
import meta::relational::tests::model::inheritance::*;
import meta::relational::tests::mapping::inheritance::*;

Mapping meta::relational::tests::mapping::association::inheritence::assocMapping
(
   include meta::relational::tests::mapping::association::inheritence::childMapping

   Vehicle : Operation
                 {
                    meta::pure::router::operations::inheritance_OperationSetImplementation_1__SetImplementation_MANY_()
                 }

   RoadVehicle : Operation
                 {
                    meta::pure::router::operations::inheritance_OperationSetImplementation_1__SetImplementation_MANY_()
                 }
                 
   Driver : Relational
   {
      AssociationMapping
      (
          roadVehicles[per1, map1] : [myDB]@PersonCar,
          person[map1, per1] : [myDB]@PersonCar,
          roadVehicles[per1, map2] : [myDB]@PersonBicycle,
          person[map2, per1] : [myDB]@PersonBicycle
      )
   }              
)

Mapping meta::relational::tests::mapping::association::inheritence::assocMapping2
(
   include meta::relational::tests::mapping::association::inheritence::childMapping

   Airline[airline] : Relational
            {
               name : [myDB] Airline.name
            }   
   
   Vehicle : Operation
                 {
                    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(map1, map2)
                 }

   VehicleOwner : Operation
                 {
                    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(airline, per1)
                 }
                 
   VehicleOwnerVehicle : Relational
   {
      AssociationMapping
      (
          ownedVehicles[airline, map1] : [myDB]@AirlineCar,
          ownedVehicles[airline, map2] : [myDB]@AirlineBicycle,
          ownedVehicles[per1, map1] : [myDB]@PersonCar,
          ownedVehicles[per1, map2] : [myDB]@PersonBicycle
      )
   }                
)

Mapping meta::relational::tests::mapping::association::inheritence::ineritanceMappingWithInlineEmbeddedSets
(

   Vehicle : Operation
   {
      meta::pure::router::operations::inheritance_OperationSetImplementation_1__SetImplementation_MANY_()
   }

   VehicleOwner : Operation
   {
      meta::pure::router::operations::inheritance_OperationSetImplementation_1__SetImplementation_MANY_()
   }

   Bicycle[bicycle] : Relational
   {
      id : [myDB] Bicycle.ID,
      vehicleOwner() Inline[person]
   } 

   Car[car]: Relational
   {
      id : [myDB] Car.ID,
      vehicleOwner() Inline[airline]
   }

   Person[person] : Relational
   {
      ~mainTable [myDB] Bicycle
      name : [myDB] @PersonBicycle | Person.name
   }

   Airline[airline] : Relational
   {
      ~mainTable [myDB] Car
      planes (
         description: [myDB] @AirlineCar | Airline.name
      )
   }   
)
