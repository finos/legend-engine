// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::mapping::union::partial::*;
import meta::relational::tests::*;
import meta::relational::metamodel::execute::*;
import meta::relational::runtime::*;
import meta::relational::tests::model::simple::*;

function <<test.Test>> meta::relational::tests::mapping::union::partial::testSimpleQueryTo():Boolean[1]
{
   let result1 = execute(|Firm.all()->filter(f|$f.employees->exists(e|$e.lastName == 'Wright')), unionMapping, testRuntime(), meta::pure::router::extension::defaultRelationalExtensions()).values;
   assertEquals(1, $result1->size());
   assertSameElements('Firm X', $result1.legalName);
   let result2 = execute(|Firm.all()->filter(f|$f.employees->exists(e|$e.lastName == 'Roberts')), unionMapping, testRuntime(), meta::pure::router::extension::defaultRelationalExtensions()).values;
   assertEquals(0, $result2->size());
}

function <<test.Test>> meta::relational::tests::mapping::union::partial::testProject():Boolean[1]
{
   let result1 = execute(|Firm.all()->project([f|$f.legalName, f|$f.employees->map(l|$l.lastName)], ['legalName', 'name']), unionMapping, testRuntime(), meta::pure::router::extension::defaultRelationalExtensions()).values->at(0);
   assertEquals(3, $result1.rows->size());
   assertSameElements(['Taylor Firm X', 'Wright Firm X', 'TDSNull Firm A'], $result1.rows->map(r|$r.get('name')->toString()+' '+$r.getString('legalName')));
}

function <<test.Test>> meta::relational::tests::mapping::union::partial::testProjectShareSet():Boolean[1]
{
   let result1 = execute(|Firm.all()->project([f|$f.legalName, f|$f.employees->map(l|$l.lastName), f|$f.employees->map(l|$l.lastName)], ['legalName', 'firstName', 'lastName']), unionMapping, testRuntime(), meta::pure::router::extension::defaultRelationalExtensions()).values->at(0);
   assertEquals(3, $result1.rows->size());
   assertSameElements(['Taylor Firm X', 'Wright Firm X', 'TDSNull Firm A'], $result1.rows->map(r|$r.get('lastName')->toString()+' '+$r.getString('legalName')));
}

function <<test.Test>> meta::relational::tests::mapping::union::partial::testProjectAutoMap():Boolean[1]
{
   let result1 = execute(|Firm.all()->project([f|$f.legalName, f|$f.employees.lastName], ['legalName', 'name']), unionMapping, testRuntime(), meta::pure::router::extension::defaultRelationalExtensions()).values->at(0);
   assertEquals(3, $result1.rows->size());
   assertSameElements(['Taylor Firm X', 'Wright Firm X', 'TDSNull Firm A'], $result1.rows->map(r|$r.get('name')->toString()+' '+$r.getString('legalName')));
}

###Mapping
import meta::relational::tests::mapping::union::*;
import meta::relational::tests::model::simple::*;

Mapping meta::relational::tests::mapping::union::partial::unionMapping
(
   *Person : Operation
            {
               meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(set1, set2)   
            }
            

   Person[set1] : Relational
            {
               lastName : [myDB]PersonSet1.lastName_s1,
               firm : [myDB]@PersonSet1Firm
            }
            
   Person[set2] : Relational
            {
               lastName : [myDB]PersonSet2.lastName_s2,
               firm : [myDB]@PersonSet2Firm
            }
            
   Firm : Relational
          {
             legalName : [myDB]Firm.name,
             employees[set2]:[myDB]@PersonSet2Firm
          }
)