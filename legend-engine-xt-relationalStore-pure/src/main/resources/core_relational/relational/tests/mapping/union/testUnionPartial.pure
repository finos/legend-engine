// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::mapping::union::partial::*;
import meta::relational::tests::*;
import meta::relational::metamodel::execute::*;
import meta::relational::runtime::*;
import meta::relational::tests::model::simple::*;

function <<test.Test>> meta::relational::tests::mapping::union::partial::testSimpleQueryTo():Boolean[1]
{
   let result1 = execute(|Firm.all()->filter(f|$f.employees->exists(e|$e.lastName == 'Wright')), unionMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values;
   assertEquals(1, $result1->size());
   assertSameElements('Firm X', $result1.legalName);
   let result2 = execute(|Firm.all()->filter(f|$f.employees->exists(e|$e.lastName == 'Roberts')), unionMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values;
   assertEquals(0, $result2->size());
}

function <<test.Test>> meta::relational::tests::mapping::union::partial::testProject():Boolean[1]
{
   let result1 = execute(|Firm.all()->project([f|$f.legalName, f|$f.employees->map(l|$l.lastName)], ['legalName', 'name']), unionMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   assertEquals(3, $result1.rows->size());
   assertSameElements(['Taylor Firm X', 'Wright Firm X', 'TDSNull Firm A'], $result1.rows->map(r|$r.get('name')->toString()+' '+$r.getString('legalName')));
}

function <<test.Test>> meta::relational::tests::mapping::union::partial::testProjectShareSet():Boolean[1]
{
   let result1 = execute(|Firm.all()->project([f|$f.legalName, f|$f.employees->map(l|$l.lastName), f|$f.employees->map(l|$l.lastName)], ['legalName', 'firstName', 'lastName']), unionMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   assertEquals(3, $result1.rows->size());
   assertSameElements(['Taylor Firm X', 'Wright Firm X', 'TDSNull Firm A'], $result1.rows->map(r|$r.get('lastName')->toString()+' '+$r.getString('legalName')));
}

function <<test.Test>> meta::relational::tests::mapping::union::partial::testProjectAutoMap():Boolean[1]
{
   let result1 = execute(|Firm.all()->project([f|$f.legalName, f|$f.employees.lastName], ['legalName', 'name']), unionMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   assertEquals(3, $result1.rows->size());
   assertSameElements(['Taylor Firm X', 'Wright Firm X', 'TDSNull Firm A'], $result1.rows->map(r|$r.get('name')->toString()+' '+$r.getString('legalName')));
}

function <<test.Test>> meta::relational::tests::mapping::union::partial::testPartialUnionAtNestedPropertyWithManyPropertyMappings_AddressIdKey():Boolean[1]
{
   let result = execute(
      |Firm.all()->project([f|$f.legalName, f|$f.employees.lastName, f|$f.employees.address.name], ['firmName', 'employeeName', 'addressName']),
      partialUnionMappingOfAddressWithManyPropertyMappings_AddressIdKey,
      testRuntime(),
      meta::relational::extension::relationalExtensions()
   );
   
   meta::relational::functions::asserts::assertSameSQL(
      'select "root".name as "firmName", "unionalias_0"."PersonSet1lastName_s1_PersonSet2lastName_s2" as "employeeName", "unionalias_1"."AddressSet1name_AddressSet2name" as "addressName" from Firm as "root" left outer join (select "root".FirmID as FirmID_0, null as FirmID_1, "root".lastName_s1 as "PersonSet1lastName_s1_PersonSet2lastName_s2", "root".ADDRESSID as ADDRESSID_0 from PersonSet1 as "root" UNION ALL select null as FirmID_0, "root".FirmID as FirmID_1, "root".lastName_s2 as "PersonSet1lastName_s1_PersonSet2lastName_s2", null as ADDRESSID_0 from PersonSet2 as "root") as "unionalias_0" on ("unionalias_0".FirmID_0 = "root".ID or "unionalias_0".FirmID_1 = "root".ID) left outer join (select "root".ID as ID_0, null as ID_1, "root".name as "AddressSet1name_AddressSet2name" from AddressSet1 as "root" UNION ALL select null as ID_0, "root".ID as ID_1, "root".name as "AddressSet1name_AddressSet2name" from AddressSet2 as "root") as "unionalias_1" on ("unionalias_0".ADDRESSID_0 = "unionalias_1".ID_0 or "unionalias_0".ADDRESSID_0 = "unionalias_1".ID_1)',
      $result
   );
}

function <<test.Test>> meta::relational::tests::mapping::union::partial::testPartialUnionAtNestedPropertyWithManyPropertyMappings_FirmIdKey_Unmapped():Boolean[1]
{
   let result = execute(
      |Firm.all()->project([f|$f.legalName, f|$f.employees.lastName, f|$f.employees.address.name], ['firmName', 'employeeName', 'addressName']),
      partialUnionMappingOfAddressWithManyPropertyMappings_FirmIdKey_Unmapped,
      testRuntime(),
      meta::relational::extension::relationalExtensions()
   );
   
   meta::relational::functions::asserts::assertSameSQL(
      'select "root".name as "firmName", "unionalias_0"."PersonSet1lastName_s1_PersonSet2lastName_s2" as "employeeName", "unionalias_1"."AddressSet1name_AddressSet2name" as "addressName" from Firm as "root" left outer join (select "root".FirmID as FirmID_0, null as FirmID_1, "root".lastName_s1 as "PersonSet1lastName_s1_PersonSet2lastName_s2" from PersonSet1 as "root" UNION ALL select null as FirmID_0, "root".FirmID as FirmID_1, "root".lastName_s2 as "PersonSet1lastName_s1_PersonSet2lastName_s2" from PersonSet2 as "root") as "unionalias_0" on ("unionalias_0".FirmID_0 = "root".ID or "unionalias_0".FirmID_1 = "root".ID) left outer join (select "root".ID as ID_0, null as ID_1, "root".name as "AddressSet1name_AddressSet2name" from AddressSet1 as "root" UNION ALL select null as ID_0, "root".ID as ID_1, "root".name as "AddressSet1name_AddressSet2name" from AddressSet2 as "root") as "unionalias_1" on ("unionalias_0".FirmID_0 = "unionalias_1".ID_0 or "unionalias_0".FirmID_0 = "unionalias_1".ID_1)',
      $result
   );
}

function <<test.Test>> meta::relational::tests::mapping::union::partial::testPartialUnionAtNestedPropertyWithManyPropertyMappings_FirmIdKey_Mapped():Boolean[1]
{
   let result = execute(
      |Firm.all()->project([f|$f.legalName, f|$f.employees.lastName, f|$f.employees.address.name], ['firmName', 'employeeName', 'addressName']),
      partialUnionMappingOfAddressWithManyPropertyMappings_FirmIdKey_Mapped,
      testRuntime(),
      meta::relational::extension::relationalExtensions()
   );
   
   meta::relational::functions::asserts::assertSameSQL(
      'select "root".name as "firmName", "unionalias_0"."PersonSet1lastName_s1_PersonSet2lastName_s2" as "employeeName", "unionalias_1"."AddressSet1name_AddressSet2name" as "addressName" from Firm as "root" left outer join (select "root".FirmID as firmId, "root".lastName_s1 as "PersonSet1lastName_s1_PersonSet2lastName_s2", "root".FirmID as FirmID_0 from PersonSet1 as "root" UNION ALL select "root".FirmID as firmId, "root".lastName_s2 as "PersonSet1lastName_s1_PersonSet2lastName_s2", null as FirmID_0 from PersonSet2 as "root") as "unionalias_0" on ("unionalias_0".firmId = "root".ID) left outer join (select "root".ID as ID_0, null as ID_1, "root".name as "AddressSet1name_AddressSet2name" from AddressSet1 as "root" UNION ALL select null as ID_0, "root".ID as ID_1, "root".name as "AddressSet1name_AddressSet2name" from AddressSet2 as "root") as "unionalias_1" on ("unionalias_0".FirmID_0 = "unionalias_1".ID_0 or "unionalias_0".FirmID_0 = "unionalias_1".ID_1)',
      $result
   );
}

function <<test.Test>> meta::relational::tests::mapping::union::partial::testPartialUnionMappingOfSubTypePrimitiveProperties_MappingToColumn():Boolean[1]
{
   let result = execute(|PersonBase.all()->project([p|$p.lastName, p|$p->subType(@PersonExt1).ext1LastName, p|$p->subType(@PersonExt2).ext2LastName], ['lastName', 'ext1LastName', 'ext2LastName']), partialUnionMappingOfSubTypePrimitiveProperties, testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('lastName,ext1LastName,ext2LastName\nScott,Scott,\nAnand,Anand,\nRoberts,Roberts,\nScott,,Scott\nAnand,,Anand\nRoberts,,Roberts\n', $result.values->at(0)->meta::relational::tests::csv::toCSV());

   meta::relational::functions::asserts::assertSameSQL(
      'select "unionBase"."PersonSet1lastName_s1_PersonSet1lastName_s1" as "lastName", "unionBase"."PersonSet1lastName_s1___SQLNULL__" as "ext1LastName", "unionBase"."__SQLNULL___PersonSet1lastName_s1" as "ext2LastName" from (select "root".ID as "pk_0_0", null as "pk_0_1", "root".lastName_s1 as "PersonSet1lastName_s1_PersonSet1lastName_s1", "root".lastName_s1 as "PersonSet1lastName_s1___SQLNULL__", null as "__SQLNULL___PersonSet1lastName_s1" from PersonSet1 as "root" UNION ALL select null as "pk_0_0", "root".ID as "pk_0_1", "root".lastName_s1 as "PersonSet1lastName_s1_PersonSet1lastName_s1", null as "PersonSet1lastName_s1___SQLNULL__", "root".lastName_s1 as "__SQLNULL___PersonSet1lastName_s1" from PersonSet1 as "root") as "unionBase"',
      $result
   );
}

function <<test.Test>> meta::relational::tests::mapping::union::partial::testPartialUnionMappingOfSubTypePrimitiveProperties_MappingToRelationalOperation():Boolean[1]
{
   let result = execute(|PersonBase.all()->project([p|$p.lastName, p|$p->subType(@PersonExt1).ext1LastNameUpperCase, p|$p->subType(@PersonExt2).ext2LastNameUpperCase], ['lastName', 'ext1LastName', 'ext2LastName']), partialUnionMappingOfSubTypePrimitiveProperties, testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('lastName,ext1LastName,ext2LastName\nScott,SCOTT,\nAnand,ANAND,\nRoberts,ROBERTS,\nScott,,SCOTT\nAnand,,ANAND\nRoberts,,ROBERTS\n', $result.values->at(0)->meta::relational::tests::csv::toCSV());

   meta::relational::functions::asserts::assertSameSQL(
      'select "unionBase"."PersonSet1lastName_s1_PersonSet1lastName_s1" as "lastName", "unionBase"."toUpper_PersonSet1lastName_s1___SQLNULL__" as "ext1LastName", "unionBase"."__SQLNULL___toUpper_PersonSet1lastName_s1" as "ext2LastName" from (select "root".ID as "pk_0_0", null as "pk_0_1", "root".lastName_s1 as "PersonSet1lastName_s1_PersonSet1lastName_s1", upper("root".lastName_s1) as "toUpper_PersonSet1lastName_s1___SQLNULL__", null as "__SQLNULL___toUpper_PersonSet1lastName_s1" from PersonSet1 as "root" UNION ALL select null as "pk_0_0", "root".ID as "pk_0_1", "root".lastName_s1 as "PersonSet1lastName_s1_PersonSet1lastName_s1", null as "toUpper_PersonSet1lastName_s1___SQLNULL__", upper("root".lastName_s1) as "__SQLNULL___toUpper_PersonSet1lastName_s1" from PersonSet1 as "root") as "unionBase"',
      $result
   );
}

function <<test.Test>> meta::relational::tests::mapping::union::partial::testPartialUnionMappingOfSubTypePrimitiveProperties_EmbeddedMapping():Boolean[1]
{
   let result = execute(|PersonBase.all()->project([p|$p.lastName, p|$p->subType(@PersonExt1).ext1Address.name, p|$p->subType(@PersonExt2).ext2Address.name], ['lastName', 'ext1Address', 'ext2Address']), partialUnionMappingOfSubTypePrimitiveProperties, testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals('lastName,ext1Address,ext2Address\nScott,New York,\nAnand,New York,\nRoberts,,\nScott,,New York\nAnand,,New York\nRoberts,,\n', $result.values->at(0)->meta::relational::tests::csv::toCSV());

   meta::relational::functions::asserts::assertSameSQL(
      'select "unionBase"."PersonSet1lastName_s1_PersonSet1lastName_s1" as "lastName", "unionBase"."PersonSet1AddressSet1_ADDRESSIDAddressSet1name___SQLNULL__" as "ext1Address", "unionBase"."__SQLNULL___PersonSet1AddressSet1_ADDRESSIDAddressSet1name" as "ext2Address" from (select "root".ID as "pk_0_0", null as "pk_0_1", "root".lastName_s1 as "PersonSet1lastName_s1_PersonSet1lastName_s1", "addressset1_0".name as "PersonSet1AddressSet1_ADDRESSIDAddressSet1name___SQLNULL__", null as "__SQLNULL___PersonSet1AddressSet1_ADDRESSIDAddressSet1name" from PersonSet1 as "root" left outer join AddressSet1 as "addressset1_0" on ("root".ADDRESSID = "addressset1_0".ID) UNION ALL select null as "pk_0_0", "root".ID as "pk_0_1", "root".lastName_s1 as "PersonSet1lastName_s1_PersonSet1lastName_s1", null as "PersonSet1AddressSet1_ADDRESSIDAddressSet1name___SQLNULL__", "addressset1_1".name as "__SQLNULL___PersonSet1AddressSet1_ADDRESSIDAddressSet1name" from PersonSet1 as "root" left outer join AddressSet1 as "addressset1_1" on ("root".ADDRESSID = "addressset1_1".ID)) as "unionBase"',
      $result
   );
}

###Mapping
import meta::relational::tests::mapping::union::*;
import meta::relational::tests::model::simple::*;

Mapping meta::relational::tests::mapping::union::partial::unionMapping
(
   *Person : Operation
            {
               meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(set1, set2)   
            }
            

   Person[set1] : Relational
            {
               lastName : [myDB]PersonSet1.lastName_s1,
               firm : [myDB]@PersonSet1Firm
            }
            
   Person[set2] : Relational
            {
               lastName : [myDB]PersonSet2.lastName_s2,
               firm : [myDB]@PersonSet2Firm
            }
            
   Firm : Relational
          {
             legalName : [myDB]Firm.name,
             employees[set2]:[myDB]@PersonSet2Firm
          }
)

###Mapping
import meta::relational::tests::mapping::union::*;
import meta::relational::tests::model::simple::*;

Mapping meta::relational::tests::mapping::union::partial::partialUnionMappingOfAddressWithManyPropertyMappings_AddressIdKey
(
   *Firm : Relational
   {
      legalName : [myDB]Firm.name,
      employees[set1]:[myDB]@PersonSet1Firm,
      employees[set2]:[myDB]@PersonSet2Firm
   }
   
   *Person : Operation
   {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(set1, set2)   
   }

   *Address : Operation
   {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(add1, add2)   
   }
   
   Person[set1] : Relational
   {
      lastName : [myDB]PersonSet1.lastName_s1,
      address[add1] : [myDB]@PersonSet1AddressSet1_ADDRESSID,
      address[add2] : [myDB]@PersonSet1AddressSet2_ADDRESSID
   }
   
   Person[set2] : Relational
   {
      lastName : [myDB]PersonSet2.lastName_s2
   }

   Address[add1] : Relational
   {
      name : [myDB]AddressSet1.name
   }
   
   Address[add2] : Relational
   {
      name : [myDB]AddressSet2.name
   }    
)

###Mapping
import meta::relational::tests::mapping::union::*;
import meta::relational::tests::model::simple::*;

Mapping meta::relational::tests::mapping::union::partial::partialUnionMappingOfAddressWithManyPropertyMappings_FirmIdKey_Unmapped
(
   *Firm : Relational
   {
      legalName : [myDB]Firm.name,
      employees[set1]:[myDB]@PersonSet1Firm,
      employees[set2]:[myDB]@PersonSet2Firm
   }
   
   *Person : Operation
   {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(set1, set2)   
   }

   *Address : Operation
   {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(add1, add2)   
   }
   
   Person[set1] : Relational
   {
      lastName : [myDB]PersonSet1.lastName_s1,
      address[add1] : [myDB]@PersonSet1AddressSet1, // Join key is FIRMID in person table
      address[add2] : [myDB]@PersonSet1AddressSet2  // Join key is FIRMID in person table
   }
   
   Person[set2] : Relational
   {
      lastName : [myDB]PersonSet2.lastName_s2
   }

   Address[add1] : Relational
   {
      name : [myDB]AddressSet1.name
   }
   
   Address[add2] : Relational
   {
      name : [myDB]AddressSet2.name
   }    
)

###Mapping
import meta::relational::tests::mapping::union::*;
import meta::relational::tests::model::simple::*;

Mapping meta::relational::tests::mapping::union::partial::partialUnionMappingOfAddressWithManyPropertyMappings_FirmIdKey_Mapped
(
   *Firm : Relational
   {
      legalName : [myDB]Firm.name,
      employees[set1]:[myDB]@PersonSet1Firm,
      employees[set2]:[myDB]@PersonSet2Firm
   }
   
   *Person : Operation
   {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(set1, set2)   
   }

   *Address : Operation
   {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(add1, add2)   
   }
   
   Person[set1] : Relational
   {
      +firmId : Integer[0..1] : [myDB]PersonSet1.FirmID,
      lastName : [myDB]PersonSet1.lastName_s1,
      address[add1] : [myDB]@PersonSet1AddressSet1, // Join key is FIRMID in person table
      address[add2] : [myDB]@PersonSet1AddressSet2  // Join key is FIRMID in person table
   }
   
   Person[set2] : Relational
   {
      +firmId : Integer[0..1] : [myDB]PersonSet2.FirmID,
      lastName : [myDB]PersonSet2.lastName_s2
   }

   Address[add1] : Relational
   {
      name : [myDB]AddressSet1.name
   }
   
   Address[add2] : Relational
   {
      name : [myDB]AddressSet2.name
   }    
)


###Pure
import meta::relational::tests::mapping::union::partial::*;

Class meta::relational::tests::mapping::union::partial::PersonBase
{
   lastName : String[1];
}

Class meta::relational::tests::mapping::union::partial::Address
{
   name : String[1];
}

Class meta::relational::tests::mapping::union::partial::PersonExt1 extends PersonBase
{
   ext1LastName: String[1];
   ext1LastNameUpperCase: String[1];
   ext1Address: Address[1];
}

Class meta::relational::tests::mapping::union::partial::PersonExt2 extends PersonBase
{
   ext2LastName: String[1];
   ext2LastNameUpperCase: String[1];
   ext2Address: Address[1];
}

###Mapping
import meta::relational::tests::mapping::union::*;
import meta::relational::tests::mapping::union::partial::*;

Mapping meta::relational::tests::mapping::union::partial::partialUnionMappingOfSubTypePrimitiveProperties
(
   *PersonBase : Operation
   {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(set1, set2)   
   }
   
   PersonExt1[set1] : Relational
   {
      lastName : [myDB]PersonSet1.lastName_s1,
      ext1LastName : [myDB]PersonSet1.lastName_s1,
      ext1LastNameUpperCase : toUpper([myDB]PersonSet1.lastName_s1),
      ext1Address (
        name: [myDB] @PersonSet1AddressSet1_ADDRESSID | AddressSet1.name
      )
   }
   
   PersonExt2[set2] : Relational
   {
      lastName : [myDB]PersonSet1.lastName_s1,
      ext2LastName : [myDB]PersonSet1.lastName_s1,
      ext2LastNameUpperCase : toUpper([myDB]PersonSet1.lastName_s1),
      ext2Address (
        name: [myDB] @PersonSet1AddressSet1_ADDRESSID | AddressSet1.name
      )
   }   
)
