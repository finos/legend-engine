// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Mapping
import meta::relational::tests::mapping::extend::filter::*;
import meta::relational::tests::mapping::extend::store::*;
import meta::relational::tests::mapping::extend::model::*;

Mapping meta::relational::tests::mapping::extend::filter::testMapping
(
   A[a] : Relational
   {
      ~filter [testDatabase]AFilter
      id : [testDatabase]ABC.id,
      aName : [testDatabase]ABC.aName
   }

   B[b] extends [a]: Relational
   {
      bName : [testDatabase]ABC.bName
   }

   C[c] extends [b]: Relational
   {
      ~filter [testDatabase]CFilter
      cName : [testDatabase]ABC.cName
   }
)

###Pure
import meta::relational::mapping::*;
import meta::relational::tests::mapping::extend::*;
import meta::relational::tests::mapping::extend::filter::*;
import meta::relational::tests::mapping::extend::model::*;

function <<test.Test>> meta::relational::tests::mapping::extend::filter::testFilterForB():Any[*]
{
   let result = execute(|B.all(), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL = 'select "root".id as "pk_0", "root".bName as "bName", "root".id as "id", "root".aName as "aName" from ABC as "root" where "root".aName = \'aName1\'';
   assertEquals($expectedSQL, $result->sqlRemoveFormatting());
   assertSameElements([1, 3], $result.values.id);
}

function <<test.Test>> meta::relational::tests::mapping::extend::filter::testFilterForC():Any[*]
{
   let result = execute(|C.all(), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL = 'select "root".id as "pk_0", "root".cName as "cName", "root".bName as "bName", "root".id as "id", "root".aName as "aName" from ABC as "root" where "root".cName = \'cName1\'';
   assertEquals($expectedSQL, $result->sqlRemoveFormatting());
   assertSameElements([1, 3], $result.values.id);
}
