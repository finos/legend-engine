// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Mapping
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::store::*;

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::baseMappingWithInnerJoinInFilter
(
   Person : Relational
            {
               ~filter [dbInc] (INNER) @Firm_Person | [dbInc] FirmXFilter
                scope([dbInc])
                (
                    firstName : personTable.FIRSTNAME
                )
            }

)

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::mappingWithInnerJoinInFilter
(

   Person : Relational
            {
               ~filter [dbInc] (INNER) @Firm_Person | [dbInc] FirmXFilter
                scope([dbInc])
                (
                    firstName : personTable.FIRSTNAME,
                    age : personTable.AGE,
                    lastName : @Firm_Person | firmTable.LEGALNAME
                )
            }

)

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::classOwnedMappingWithInnerJoinInFilter
(

   Person : Relational
            {
               ~filter [dbInc] (INNER) @Firm_Person | [dbInc] FirmXFilter
                scope([dbInc])
                (
                    firstName : personTable.FIRSTNAME,
                    lastName : @Firm_Person | firmTable.LEGALNAME
                ),
               firm : [dbInc]  @Firm_Person

            }

   Firm : Relational
         {
            scope([dbInc])
                (
                   legalName : firmTable.LEGALNAME,
                   employees : @Firm_Person
                )
         }

)

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::mappingWithMultipleClassMappings
(
   *meta::relational::tests::mapping::classMappingFilterWithInnerJoin::model::Person[p1] : Relational
            {
               ~filter [dbInc] (INNER) @Firm_Person | [dbInc] FirmXFilter
                scope([dbInc])
                (
                    firstName : personTable.FIRSTNAME,
                    lastName : personTable.LASTNAME
                )

            }
   
   meta::relational::tests::mapping::classMappingFilterWithInnerJoin::model::Person[p2] : Relational
            {
               ~filter [dbInc] (INNER) @Firm_Person2 | [dbInc] FirmXFilter
                scope([dbInc])
                (
                    firstName : personTable.FIRSTNAME,
                    lastName : personTable.LASTNAME
                )

            }
   
   meta::relational::tests::mapping::classMappingFilterWithInnerJoin::model::Person[p3] : Relational
            {
               ~filter [dbInc] (INNER) @Firm_Person | [dbInc] FirmBFilter
                scope([dbInc])
                (
                    firstName : personTable.FIRSTNAME,
                    lastName : personTable.LASTNAME
                )

            }

   meta::relational::tests::mapping::classMappingFilterWithInnerJoin::model::Firm : Relational
         {
            scope([dbInc])
                (
                   legalName : firmTable.LEGALNAME,
                   employees1[p1] : @Firm_Person,
                   employees2[p2] : @Firm_Person,
                   employees3[p3] : @Firm_Person
                )
         }
)

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::testMappingEmbeddedWithInnerJoinFilter
(

    GeographicEntityType: EnumerationMapping GE
    {
        CITY:  1,
        REGION: 2
    }

    Person: Relational
    {
       ~filter  [dbWithInnerJoinFilter] (INNER) @Firm_Address_location | [dbWithInnerJoinFilter] twoHundredWestFilter
       scope([dbWithInnerJoinFilter]PERSON_FIRM_DENORM)
       (
          lastName: PERSON_LASTNAME,
          firm
          (
             legalName: FIRM_LEGALNAME,

             address
             (
                name: FIRM_ADDRESS_NAME,
                type : EnumerationMapping GE : FIRM_ADDRESS_TYPE
             ),

             employees: [dbWithInnerJoinFilter]@firmEmployees
          ),
          address
          (
             name: PERSON_ADDRESS_NAME,
             type : EnumerationMapping GE : PERSON_ADDRESS_TYPE
          )
       )

    }

    Firm: Relational
    {
       ~distinct
       scope([dbWithInnerJoinFilter]PERSON_FIRM_DENORM)
       (
          legalName: FIRM_LEGALNAME
       ),
       employees: [dbWithInnerJoinFilter]@firmEmployees
    }

)

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::chainedJoinsWithUnionsAndIsolation
(

   *Firm : Operation
   {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(FirmSet1, FirmSet2)
   }

   *Person : Operation
   {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(set1, set2)
   }


   Firm[FirmSet1]: Relational
   {
      legalName: [unionDBWithInnerJoinFilter]FirmSet1.name,
      employees[FirmSet1,set1]: [unionDBWithInnerJoinFilter]@firm1_person1_join
   }

   Firm[FirmSet2]: Relational
   {
      legalName: [unionDBWithInnerJoinFilter]FirmSet2.name,
      employees[FirmSet2,set2]:  [unionDBWithInnerJoinFilter]@firm2_person2_join
   }

   Person[set1] : Relational
   {
      ~filter [unionDBWithInnerJoinFilter] (INNER) @PersonSet1AddressSet1 | [unionDBWithInnerJoinFilter] cityFilter1
      lastName : [unionDBWithInnerJoinFilter]PersonSet1.lastName_s1,
      firm[set1,FirmSet1] : [unionDBWithInnerJoinFilter]@PersonSet1FirmSet1
   }

   Person[set2] : Relational
   {
      ~filter [unionDBWithInnerJoinFilter] (INNER) @PersonSet2AddressSet2 | [unionDBWithInnerJoinFilter] cityFilter2
      lastName : [unionDBWithInnerJoinFilter]PersonSet2.lastName_s2,
      firm[set2,FirmSet2] : [unionDBWithInnerJoinFilter]@PersonSet2FirmSet2
   }
)

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::inheritanceMappingWithInnerJoin
(
   meta::relational::tests::model::inheritance::Person : Relational
            {
               name : [inheritanceMappingDBWithInnerJoinFilter] Person.name,
               vehicles[map2] : [inheritanceMappingDBWithInnerJoinFilter]@PersonPersonMid > @PersonBicycle,
               roadVehicles[map2] : [inheritanceMappingDBWithInnerJoinFilter]@PersonPersonMid > @PersonBicycle
            }

   meta::relational::tests::model::inheritance::Bicycle[map2] : Relational
            {
               ~filter [inheritanceMappingDBWithInnerJoinFilter] (INNER) @PersonBicycle > (INNER) @PersonPersonMid | [inheritanceMappingDBWithInnerJoinFilter] personFilter
               id : [inheritanceMappingDBWithInnerJoinFilter] Bicycle.ID,
               wheelCount :  [inheritanceMappingDBWithInnerJoinFilter] Bicycle.db_bic_wheelCount,
               description : [inheritanceMappingDBWithInnerJoinFilter] Bicycle.b_Description,
               person : [inheritanceMappingDBWithInnerJoinFilter] @PersonBicycle > @PersonPersonMid
            }

   meta::relational::tests::model::inheritance::EngineType: EnumerationMapping engineTypeMapping
   {
      V: [1],
      U: [2],
      H: [3],
      W: [4],
      X: [5]
   }

   meta::relational::tests::model::inheritance::Vehicle : Operation
                 {
                    meta::pure::router::operations::inheritance_OperationSetImplementation_1__SetImplementation_MANY_()
                 }

   meta::relational::tests::model::inheritance::RoadVehicle : Operation
                 {
                    meta::pure::router::operations::inheritance_OperationSetImplementation_1__SetImplementation_MANY_()
                 }

)

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::milestoningmapWithInnerJoin
(
   meta::relational::tests::milestoning::Order : Relational{
      id : [milestongingDB]OrderTable.id,
      orderDate : [milestongingDB]OrderTable.orderDate,
      product : [milestongingDB]@Order_Product,
      biTemporalProduct : [milestongingDB]@Order_BiTemporalProduct,
      description : [milestongingDB]@Order_OrderDescription,
      orderDetails : [milestongingDB]@Order_OrderDetails,
      ascProduct : [milestongingDB]@Order_Product
   }

   meta::relational::tests::milestoning::Product : Relational
   {
      ~filter [milestongingDB] (INNER) @Order_Product| [milestongingDB] stockFilter
      id : [milestongingDB]ProductTable.id,
      name : [milestongingDB]ProductTable.name,
      type : [milestongingDB]ProductTable.type,
      exchange : [milestongingDB]@Product_Exchange,
      classification : [milestongingDB]@Product_Classification
   }
    meta::relational::tests::milestoning::ProductClassification : Relational{
      type : [milestongingDB]ProductClassificationTable.type,
      description : [milestongingDB]ProductClassificationTable.type_description,
      system : [milestongingDB]@Classification_System,
      exchange : [milestongingDB]@Classification_Exchange,
      exchangeName : [milestongingDB]@Classification_Exchange | ProductExchangeTable.name,
      product : [milestongingDB]@Product_Classification
   }
   meta::relational::tests::milestoning::Exchange : Relational{
      name : [milestongingDB]ProductExchangeTable.name
   }
)

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::mappingWithInnerJoinInFilterEdgeCases
(

   Person : Relational
            {
               ~filter [dbInc] (INNER) @Firm_Person | [dbInc] FirmXFilter
                scope([dbInc])
                (
                    firstName : personTable.FIRSTNAME,
                    age : personTable.AGE,
                    lastName         : @Firm_Person > (INNER) @Firm_Person | personTable.LASTNAME,
                    extraInformation : @Firm_Person > @Firm_Person > (INNER) @Firm_Person | firmTable.LEGALNAME
                )
            }

   Firm : Relational
         {
            scope([dbInc])
                (
                   legalName : firmTable.LEGALNAME,
                   nickName  : @Firm_Person > (INNER) @Firm_Person | firmTable.LEGALNAME,
                   employees : @Firm_Person
                )
         }

)

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::mappingWithInnerJoinInFilterEdgeCases1
(

   Person : Relational
            {
               ~filter [dbInc] (INNER) @Firm_Person1 | [dbInc] FirmXFilter
                scope([dbInc])
                (
                    firstName : personTable.FIRSTNAME,
                    age : personTable.AGE
                )
            }

   Firm : Relational
         {
            ~filter [dbInc] (INNER) @Firm_Person > (INNER) @Firm_Person | [dbInc] FirmXFilter
            scope([dbInc])
                (
                   legalName : firmTable.LEGALNAME
                )
         }
)

###Mapping
import meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::store::*;
Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::MergeAliasMappingWithInnerJoinFilter
(

    *meta::relational::tests::model::simple::Firm : Operation
            {
               meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(firm_set1, firm_set2)
            }

   meta::relational::tests::model::simple::Firm[firm_set1] : Relational
          {
              legalName : [MergeAliasDbWithInnerJoinFilter]FirmSet1.LegalName

          }

   meta::relational::tests::model::simple::Firm[firm_set2]  : Relational
          {
             legalName : [MergeAliasDbWithInnerJoinFilter]FirmSet2.LegalName

          }
   meta::relational::tests::model::simple::Person:Relational
   {
      ~filter [MergeAliasDbWithInnerJoinFilter] (INNER) @personSet_organization_Join | [MergeAliasDbWithInnerJoinFilter] myFilter
      scope([MergeAliasDbWithInnerJoinFilter])
      (
         lastName: [MergeAliasDbWithInnerJoinFilter]personSet.lastName,
         extraInformation:concat('Ayco Certified: ',
                            case(
                               and(
                                     equal('Ayco', @personSet_organization_Join| organizationSet.name),
                                  or(
                                     equal('30 Hudson', @personSet_organization_Join> @firmSet1_organization_Join> @firmSet1_addressJoin| addressSet.name),
                                     equal('200 W' ,@personSet_organization_Join> @firmSet2_organization_Join> @firmSet2_addressJoin| addressSet.name),
                                     equal('200 W',@personSet_organization_Join>  @firmSet1_organization_Join> @firmSet1_addressJoin| addressSet.name),
                                     equal('30 Hudson',@personSet_organization_Join> @firmSet2_organization_Join> @firmSet2_addressJoin| addressSet.name)
                                  )


                               ),
                               'Yes',
                               'No'
                               )
                            )


         )
   }

   meta::relational::tests::model::simple::Organization: Relational
   {
      scope([MergeAliasDbWithInnerJoinFilter]organizationSet)
      (
         name:name
      )
   }
)

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::testViewToTableMapping
(

   meta::relational::tests::model::simple::Person : Relational
            {
                ~filter [testViewToTableMappingDB] (INNER) @Address_myPersonView | [testViewToTableMappingDB] addressNewYorkFilter
                scope([testViewToTableMappingDB])
                (
                   firstName : myPersonView.firstName,
                   age : myPersonView.age,
                   firm : [testViewToTableMappingDB]  @Firm_myPersonView
                )
            }

    meta::relational::tests::model::simple::Firm : Relational
         {
            scope([testViewToTableMappingDB])
                (
                   legalName : firmTable.LEGALNAME,
                   employees : @Firm_myPersonView
                )
         }

)

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::testTableToViewMapping
(

   meta::relational::tests::model::simple::Person : Relational
            {
               ~filter [testViewToTableMappingDB] (INNER) @PersonWithPersonView | [testViewToTableMappingDB] personViewWithGroupByFilter
                scope([testViewToTableMappingDB])
                (
                   firstName : personTable.FIRSTNAME,
                   age : personTable.AGE,
                   firm : [testViewToTableMappingDB]  @Firm_Person
                )
            }
   meta::relational::tests::model::simple::Firm : Relational
         {
            scope([testViewToTableMappingDB])
                (
                   legalName : firmTable.LEGALNAME,
                   employees : @Firm_Person
                )
         }

)

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::testViewToViewMapping
(

   meta::relational::tests::model::simple::Person : Relational
            {
               ~filter [testViewToTableMappingDB] (INNER) @myFirmView_myPersonView | [testViewToTableMappingDB] FirmCViewFilter
                scope([testViewToTableMappingDB])
                (
                   firstName : myPersonView.firstName,
                   firm : [testViewToTableMappingDB]  @Firm_myPersonView
                )
            }

    meta::relational::tests::model::simple::Firm : Relational
         {
            scope([testViewToTableMappingDB])
                (
                   legalName : firmTable.LEGALNAME,
                   employees : @Firm_myPersonView
                )
         }
)

###Relational
Database meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::store::dbWithInnerJoinFilter
(
   include meta::relational::tests::mapping::embedded::model::store::myDB
   Filter twoHundredWestFilter(ADDRESS_LOCATION.ADDRESS_ID = '200 west')
)

###Relational
Database meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::store::unionDBWithInnerJoinFilter
(
   include meta::relational::tests::mapping::union::myDB
   Filter cityFilter1(AddressSet1.ID = '1')
   Filter cityFilter2(AddressSet2.ID = '2')
)

###Relational
Database meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::store::inheritanceMappingDBWithInnerJoinFilter
(
   include meta::relational::tests::mapping::inheritance::relational::multiJoins::myDB
   Filter personFilter(Person.ID = '1')
)

###Relational
Database meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::store::milestongingDB
(
   include meta::relational::tests::milestoning::db
   Filter stockFilter(OrderTable.prodFk = '2')
)

###Relational
Database meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::store::MergeAliasDbWithInnerJoinFilter
(
   include meta::relational::tests::mapping::merge::MergeAliasDb
   Filter myFilter(organizationSet.parentId = '1')
)

###Relational
Database meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::store::testViewToTableMappingDB
(
   include meta::relational::tests::dbInc
   Table personTable1 (ID INT PRIMARY KEY, FIRSTNAME VARCHAR(200), LASTNAME VARCHAR(200), AGE INT, ADDRESSID INT, FIRMID INT, MANAGERID INT)
   View myPersonView
   (
        PERSON_ID: personTable.ID PRIMARY KEY,
        firstName : personTable.FIRSTNAME,
        lastName:  personTable.LASTNAME,
        age : personTable.AGE,
        firmID : personTable.FIRMID,
        addressID : personTable.ADDRESSID
   )
   View myFirmView
   (
        FIRM_ID: firmTable.ID PRIMARY KEY,
        legalName:  firmTable.LEGALNAME,
        CEO_ID : firmTable.CEOID,
        addressID : firmTable.ADDRESSID
   )

   Join Firm_myPersonView(firmTable.ID = myPersonView.firmID)
   Join Address_myPersonView(addressTable.ID = myPersonView.addressID)
   Join myFirmView_myPersonView(myFirmView.FIRM_ID = myPersonView.firmID)
   Filter personViewWithGroupByFilter(personViewWithGroupBy.maxage < 30)
   Filter addressNewYorkFilter(addressTable.NAME = 'New York')
   Filter FirmCViewFilter(myFirmView.legalName = 'Firm C')

)

###Pure
import meta::relational::tests::mapping::union::*;
import meta::relational::metamodel::execute::*;

Class meta::relational::tests::mapping::classMappingFilterWithInnerJoin::model::Firm
{
   legalName : String[1];
   employees1 : meta::relational::tests::mapping::classMappingFilterWithInnerJoin::model::Person[*];
   employees2 : meta::relational::tests::mapping::classMappingFilterWithInnerJoin::model::Person[*];
   employees3 : meta::relational::tests::mapping::classMappingFilterWithInnerJoin::model::Person[*];
}

Class meta::relational::tests::mapping::classMappingFilterWithInnerJoin::model::Person
{
   firstName : String[1];
   lastName : String[1];
}

function meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::createTablesAndFillDb():Boolean[1]
{

   let connection = meta::relational::tests::testRuntime().connectionByElement(meta::relational::tests::db)->cast(@meta::relational::runtime::TestDatabaseConnection);
   meta::relational::tests::mapping::union::createTablesAndFillDb();

   executeInDb2('Drop table if exists PersonSet1;', $connection);
   executeInDb2('Create Table PersonSet1 (ID INT, firstName_s1 VARCHAR(200), lastName_s1 VARCHAR(200), FirmID INT, ADDRESSID INT, NICKNAME VARCHAR(200));', $connection);
   executeInDb2('insert into PersonSet1 (ID, firstName_s1, lastName_s1, FirmID, ADDRESSID) values (1, \'David\', \'Scott\', 1, 1);', $connection);
   executeInDb2('insert into PersonSet1 (ID, firstName_s1, lastName_s1, FirmID, ADDRESSID) values (2, \'John\', \'Anand\', 1, 1);', $connection);
   executeInDb2('insert into PersonSet1 (ID, firstName_s1, lastName_s1, FirmID, ADDRESSID) values (3, \'Tom\', \'Roberts\', 2, 2);', $connection);

   executeInDb2('Drop table if exists PersonSet2;', $connection);
   executeInDb2('Create Table PersonSet2 (ID INT,  firstName_s2 VARCHAR(200), lastName_s2 VARCHAR(200), FirmID INT, ADDRESSID INT);', $connection);
   executeInDb2('insert into PersonSet2 (ID, firstName_s2, lastName_s2, FirmID, ADDRESSID) values (1, \'Doug\', \'Taylor\', 1, 1);', $connection);
   executeInDb2('insert into PersonSet2 (ID, firstName_s2, lastName_s2, FirmID, ADDRESSID) values (2, \'Jack\', \'Wright\', 1, 1);', $connection);
   executeInDb2('insert into PersonSet2 (ID, firstName_s2, lastName_s2, FirmID, ADDRESSID) values (3, \'Peter\', \'Smith\', 2, 2);', $connection);

   executeInDb2('Drop table if exists AddressSet1;', $connection);
   executeInDb2('Create Table AddressSet1(id INT, name VARCHAR(200));', $connection);
   executeInDb2('insert into AddressSet1 (id, name) values (1, \'New York\');', $connection);
   executeInDb2('insert into AddressSet1 (id, name) values (2, \'Hoboken\');', $connection);

   executeInDb2('Drop table if exists AddressSet2;', $connection);
   executeInDb2('Create Table AddressSet2(id INT, name VARCHAR(200));', $connection);
   executeInDb2('insert into AddressSet2 (id, name) values (1, \'New York\');', $connection);
   executeInDb2('insert into AddressSet2 (id, name) values (2, \'Hoboken\');', $connection);

   true;
}

###Mapping
import meta::relational::tests::model::simple::*;
import meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::store::*;

Mapping meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::TestClassMappingsWithInnerFilterJoinedByChainOfJoins
(
  meta::relational::tests::milestoning::Product : Relational
  {
    id : [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore]ProductTable.id,
    name : [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore]ProductTable.name,
    classification : [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore]@ProductTable_ProductTableView > (INNER) [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore]@ProductTableView_ProductClassificationTable
  }

  meta::relational::tests::milestoning::ProductClassification : Relational
  {
    ~filter [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore] (INNER) @ProductClassificationTable_ProductClassificationFilterTable | [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore] NonNullFilter
    type : [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore]ProductClassificationTable.type,
    description : [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore]ProductClassificationTable.type_description
  }

  Account : Relational
  {
    name : [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore]accountTable.name,
    trades: [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore]@Account_AccountView > (INNER)[TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore]@AccountView_Trade
  }

  Trade : Relational
  {
    ~filter [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore] (INNER) @Trade_TradeFilter | [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore] PositiveQuanityFilter
    id : [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore]tradeTable.ID,
    quantity : [TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore]tradeTable.quantity
  }
)

###Relational
Database meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::store::TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore
(
  Table tradeTable(ID INT PRIMARY KEY, prodId INT, accountID INT, quantity FLOAT, tradeDate DATE, settlementDateTime TIMESTAMP)
  Table accountTable(ID INT PRIMARY KEY, name VARCHAR(200), createDate DATE)

  Table tradeFilterTable(ID INT PRIMARY KEY, prodId INT, accountID INT, quantity FLOAT, tradeDate DATE, settlementDateTime TIMESTAMP)

  View accountView
  (
    accountId : accountTable.ID PRIMARY KEY,
    name : case(isNull(accountTable.name), accountTable.ID , accountTable.name),
    createDate : accountTable.createDate
  )

  Join Account_AccountView(accountTable.ID = accountView.accountId)
  Join AccountView_Trade(accountView.accountId = tradeTable.accountID)
  Join Trade_TradeFilter(tradeTable.ID = tradeFilterTable.ID)

  Filter PositiveQuanityFilter(tradeFilterTable.quantity > 0)

  Table ProductTable(
          milestoning(
              business(BUS_FROM=from_z, BUS_THRU=thru_z, INFINITY_DATE=%9999-12-31T00:00:00.0000)
          )
          id Integer PRIMARY KEY, 
          name VARCHAR(200) PRIMARY KEY,
          type VARCHAR(200),
          exchange VARCHAR(200),
          classificationSystemId Integer,
          referenceSystemName VARCHAR(200),
          externalReferenceSystemName VARCHAR(200),
          from_z DATE,
          thru_z DATE
  )

  View ProductTableView(
    id : ProductTable.id PRIMARY KEY,
    name : ProductTable.name PRIMARY KEY,
    type : ProductTable.type
  )

  Table ProductClassificationTable(
          milestoning(
              business(BUS_FROM=from_z, BUS_THRU=thru_z, INFINITY_DATE=%9999-12-31T00:00:00.0000)
          )
          type VARCHAR(200) PRIMARY KEY,
          type_description VARCHAR(400),
          system VARCHAR(200),
          exchange VARCHAR(200),
          from_z DATE, 
          thru_z DATE
  )     

  Table ProductClassificationFilterTable(
          type VARCHAR(200) PRIMARY KEY,
          type_description VARCHAR(400),
          system VARCHAR(200),
          exchange VARCHAR(200)
  )

  Join ProductTable_ProductTableView(ProductTable.id = ProductTableView.id and ProductTable.name = ProductTableView.name)
  Join ProductTableView_ProductClassificationTable(ProductTableView.type = ProductClassificationTable.type)
  Join ProductClassificationTable_ProductClassificationFilterTable(ProductClassificationTable.type = ProductClassificationFilterTable.type)

  Filter NonNullFilter(ProductClassificationFilterTable.exchange is not null)
)

###Pure
import meta::relational::metamodel::execute::*;
import meta::relational::runtime::*;

function meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::store::initDatabase():Boolean[1]
{
  let connection = meta::relational::tests::testRuntime(meta::relational::tests::mapping::classMappingFilterWithInnerJoin::mapping::store::TestClassMappingsWithInnerFilterJoinedByChainOfJoinsStore).connections->toOne()->cast(@TestDatabaseConnection);
  
  executeInDb('drop table if exists ProductClassificationFilterTable;',$connection);
  executeInDb('create table ProductClassificationFilterTable (type VARCHAR(200),type_description VARCHAR(400),system VARCHAR(200), exchange VARCHAR(200), from_z TIMESTAMP, thru_z TIMESTAMP);',$connection);
  executeInDb('insert into ProductClassificationFilterTable values(\'STOCK\',\'STOCK DESC-V1\',\'SYS1\', \'LNSE\', \'2015-8-15 00:00:00\', \'2015-8-17 00:00:00\');',$connection);

  true;
}