// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Mapping
import meta::relational::tests::mapping::extend::store::*;
import meta::relational::tests::mapping::extend::model::*;

Mapping meta::relational::tests::mapping::extend::propertyMapping::testMapping
(
   A[a] : Relational
   {
      id : [testDatabase]ABC.id,
      aName : [testDatabase]ABC.aName
   }

   B[b] extends [a]: Relational
   {
      aName : concat('bName_', [testDatabase]ABC.aName),
      bName : [testDatabase]ABC.bName
   }
   
   C[c] extends [b] : Relational
   {
      aName : concat('cName_', [testDatabase]ABC.aName),
      bName : concat('cName_', [testDatabase]ABC.bName),
      cName : [testDatabase]ABC.cName
   }
   
   D[d] : Relational
   {
      id : [testDatabase]DEF.id,
      dName : [testDatabase]DEF.dName
   }

   E[e] extends [d]: Relational
   {
      dName : concat('eName_', [testDatabase]DEF.dName),
      eName : [testDatabase]DEF.eName
   }
   
   F[f] extends [e] : Relational
   {
      dName : concat('fName_', [testDatabase]DEF.dName),
      eName : concat('fName_', [testDatabase]DEF.eName),
      fName : [testDatabase]DEF.fName
   }
   
   G[g] : Relational
   {
      id : [testDatabase]GHI.id,
      gName : [testDatabase]GHI.gName
   }

   H[h] extends [g]: Relational
   {
      gName : concat('hName_', [testDatabase]GHI.gName),
      hName : [testDatabase]GHI.hName
   }
   
   I[i] extends [h] : Relational
   {
      gName : concat('iName_', [testDatabase]GHI.gName),
      hName : concat('iName_', [testDatabase]GHI.hName),
      iName : [testDatabase]GHI.iName
   }
   
   J[j] : Relational
   {
      id : [testDatabase]JKL.id,
      jName : [testDatabase]JKL.jName
   }

   K[k] extends [j]: Relational
   {
      jName : concat('kName_', [testDatabase]JKL.jName),
      kName : [testDatabase]JKL.kName
   }
   
   L[l] extends [k] : Relational
   {
      jName : concat('lName_', [testDatabase]JKL.jName),
      kName : concat('lName_', [testDatabase]JKL.kName),
      lName : [testDatabase]JKL.lName
   }

   AE : Relational
   {
      AssociationMapping
      (
         a[e, a] : [testDatabase]@AE,
         e[a, e] : [testDatabase]@AE
      )
   }
   
   BH : Relational
   {
      AssociationMapping
      (
         b[h, b] : [testDatabase]@BH,
         h[b, h] : [testDatabase]@BH
      )
   }
   
   CK : Relational
   {
      AssociationMapping
      (
         c[k, c] : [testDatabase]@CK,
         k[c, k] : [testDatabase]@CK
      )
   }
)

###Pure
import meta::relational::mapping::*;
import meta::relational::tests::mapping::extend::*;
import meta::relational::tests::mapping::extend::propertyMapping::*;
import meta::relational::tests::mapping::extend::model::*;

###Pure
import meta::relational::mapping::*;
import meta::relational::tests::mapping::extend::*;
import meta::relational::tests::mapping::extend::propertyMapping::*;
import meta::relational::tests::mapping::extend::model::*;

function <<test.Test>> meta::relational::tests::mapping::extend::propertyMapping::testPropertyMappingsForA():Any[*]
{
   let result1 = execute(|A.all()->filter(a|$a.aName == 'aName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL1 = 'select "root".id as "pk_0", "root".id as "id", "root".aName as "aName" from ABC as "root" where "root".aName = \'aName1\'';
   assertEquals($expectedSQL1, $result1->sqlRemoveFormatting());
   assertSameElements([1, 3], $result1.values.id);
   
   let result2 = execute(|A.all()->filter(a|$a.e.dName == 'eName_dName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL2 = 'select "root".id as "pk_0", "root".id as "id", "root".aName as "aName" from ABC as "root" left outer join DEF as "def_0" on ("root".id = "def_0".id) where concat(\'eName_\', "def_0".dName) = \'eName_dName1\'';
   assertEquals($expectedSQL2, $result2->sqlRemoveFormatting());
   assertSameElements([1, 3], $result2.values.id);
   
   let result3 = execute(|A.all()->filter(a|$a.e.eName == 'eName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL3 = 'select "root".id as "pk_0", "root".id as "id", "root".aName as "aName" from ABC as "root" left outer join DEF as "def_0" on ("root".id = "def_0".id) where "def_0".eName = \'eName1\'';
   assertEquals($expectedSQL3, $result3->sqlRemoveFormatting());
   assertSameElements([1, 3], $result3.values.id);
   
   let result4 = execute(|A.all()->filter(a|$a.e->subType(@F).fName == 'fName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL4 = 'select "root".id as "pk_0", "root".id as "id", "root".aName as "aName" from ABC as "root" left outer join DEF as "def_0" on ("root".id = "def_0".id) where "def_0".fName = \'fName1\'';
   assertEquals($expectedSQL4, $result4->sqlRemoveFormatting());
   assertSameElements([1, 3], $result4.values.id);
}

function <<test.Test>> meta::relational::tests::mapping::extend::propertyMapping::testPropertyMappingsForB():Any[*]
{
   let result1 = execute(|B.all()->filter(b|$b.aName == 'bName_aName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL1 =  'select "root".id as "pk_0", concat(\'bName_\', "root".aName) as "aName", "root".bName as "bName", "root".id as "id" from ABC as "root" where concat(\'bName_\', "root".aName) = \'bName_aName1\'';
   assertEquals($expectedSQL1, $result1->sqlRemoveFormatting());
   assertSameElements([1, 3], $result1.values.id);
   
   let result2 = execute(|B.all()->filter(b|$b.e.dName == 'eName_dName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL2 = 'select "root".id as "pk_0", concat(\'bName_\', "root".aName) as "aName", "root".bName as "bName", "root".id as "id" from ABC as "root" left outer join DEF as "def_0" on ("root".id = "def_0".id) where concat(\'eName_\', "def_0".dName) = \'eName_dName1\'';
   assertEquals($expectedSQL2, $result2->sqlRemoveFormatting());
   assertSameElements([1, 3], $result2.values.id);
   
   let result3 = execute(|B.all()->filter(b|$b.e.eName == 'eName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL3 = 'select "root".id as "pk_0", concat(\'bName_\', "root".aName) as "aName", "root".bName as "bName", "root".id as "id" from ABC as "root" left outer join DEF as "def_0" on ("root".id = "def_0".id) where "def_0".eName = \'eName1\'';
   assertEquals($expectedSQL3, $result3->sqlRemoveFormatting());
   assertSameElements([1, 3], $result3.values.id);
   
   let result4 = execute(|B.all()->filter(b|$b.e->subType(@F).fName == 'fName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL4 = 'select "root".id as "pk_0", concat(\'bName_\', "root".aName) as "aName", "root".bName as "bName", "root".id as "id" from ABC as "root" left outer join DEF as "def_0" on ("root".id = "def_0".id) where "def_0".fName = \'fName1\'';
   assertEquals($expectedSQL4, $result4->sqlRemoveFormatting());
   assertSameElements([1, 3], $result4.values.id);
   
   let result5 = execute(|B.all()->filter(b|$b.bName == 'bName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL5 = 'select "root".id as "pk_0", concat(\'bName_\', "root".aName) as "aName", "root".bName as "bName", "root".id as "id" from ABC as "root" where "root".bName = \'bName1\'';
   assertEquals($expectedSQL5, $result5->sqlRemoveFormatting());
   assertSameElements([1, 3], $result5.values.id);
   
   let result6 = execute(|B.all()->filter(b|$b.h.gName == 'hName_gName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL6 = 'select "root".id as "pk_0", concat(\'bName_\', "root".aName) as "aName", "root".bName as "bName", "root".id as "id" from ABC as "root" left outer join GHI as "ghi_0" on ("root".id = "ghi_0".id) where concat(\'hName_\', "ghi_0".gName) = \'hName_gName1\'';
   assertEquals($expectedSQL6, $result6->sqlRemoveFormatting());
   assertSameElements([1, 3], $result6.values.id);
   
   let result7 = execute(|B.all()->filter(b|$b.h.hName == 'hName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL7 = 'select "root".id as "pk_0", concat(\'bName_\', "root".aName) as "aName", "root".bName as "bName", "root".id as "id" from ABC as "root" left outer join GHI as "ghi_0" on ("root".id = "ghi_0".id) where "ghi_0".hName = \'hName1\'';
   assertEquals($expectedSQL7, $result7->sqlRemoveFormatting());
   assertSameElements([1, 3], $result7.values.id);
   
   let result8 = execute(|B.all()->filter(b|$b.h->subType(@I).iName == 'iName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL8 = 'select "root".id as "pk_0", concat(\'bName_\', "root".aName) as "aName", "root".bName as "bName", "root".id as "id" from ABC as "root" left outer join GHI as "ghi_0" on ("root".id = "ghi_0".id) where "ghi_0".iName = \'iName1\'';
   assertEquals($expectedSQL8, $result8->sqlRemoveFormatting());
   assertSameElements([1, 3], $result8.values.id);
}

function <<test.Test>> meta::relational::tests::mapping::extend::propertyMapping::testPropertyMappingsForC():Any[*]
{
   let result1 = execute(|C.all()->filter(c|$c.aName == 'cName_aName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL1 = 'select "root".id as "pk_0", concat(\'cName_\', "root".aName) as "aName", concat(\'cName_\', "root".bName) as "bName", "root".cName as "cName", "root".id as "id" from ABC as "root" where concat(\'cName_\', "root".aName) = \'cName_aName1\'';
   assertEquals($expectedSQL1, $result1->sqlRemoveFormatting());
   assertSameElements([1, 3], $result1.values.id);
   
   let result2 = execute(|C.all()->filter(c|$c.e.dName == 'eName_dName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL2 = 'select "root".id as "pk_0", concat(\'cName_\', "root".aName) as "aName", concat(\'cName_\', "root".bName) as "bName", "root".cName as "cName", "root".id as "id" from ABC as "root" left outer join DEF as "def_0" on ("root".id = "def_0".id) where concat(\'eName_\', "def_0".dName) = \'eName_dName1\'';
   assertEquals($expectedSQL2, $result2->sqlRemoveFormatting());
   assertSameElements([1, 3], $result2.values.id);
   
   let result3 = execute(|C.all()->filter(c|$c.e.eName == 'eName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL3 = 'select "root".id as "pk_0", concat(\'cName_\', "root".aName) as "aName", concat(\'cName_\', "root".bName) as "bName", "root".cName as "cName", "root".id as "id" from ABC as "root" left outer join DEF as "def_0" on ("root".id = "def_0".id) where "def_0".eName = \'eName1\'';
   assertEquals($expectedSQL3, $result3->sqlRemoveFormatting());
   assertSameElements([1, 3], $result3.values.id);
   
   let result4 = execute(|C.all()->filter(c|$c.e->subType(@F).fName == 'fName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL4 = 'select "root".id as "pk_0", concat(\'cName_\', "root".aName) as "aName", concat(\'cName_\', "root".bName) as "bName", "root".cName as "cName", "root".id as "id" from ABC as "root" left outer join DEF as "def_0" on ("root".id = "def_0".id) where "def_0".fName = \'fName1\'';
   assertEquals($expectedSQL4, $result4->sqlRemoveFormatting());
   assertSameElements([1, 3], $result4.values.id);
   
   let result5 = execute(|C.all()->filter(c|$c.bName == 'cName_bName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL5 = 'select "root".id as "pk_0", concat(\'cName_\', "root".aName) as "aName", concat(\'cName_\', "root".bName) as "bName", "root".cName as "cName", "root".id as "id" from ABC as "root" where concat(\'cName_\', "root".bName) = \'cName_bName1\'';
   assertEquals($expectedSQL5, $result5->sqlRemoveFormatting());
   assertSameElements([1, 3], $result5.values.id);
   
   let result6 = execute(|C.all()->filter(c|$c.h.gName == 'hName_gName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL6 = 'select "root".id as "pk_0", concat(\'cName_\', "root".aName) as "aName", concat(\'cName_\', "root".bName) as "bName", "root".cName as "cName", "root".id as "id" from ABC as "root" left outer join GHI as "ghi_0" on ("root".id = "ghi_0".id) where concat(\'hName_\', "ghi_0".gName) = \'hName_gName1\'';
   assertEquals($expectedSQL6, $result6->sqlRemoveFormatting());
   assertSameElements([1, 3], $result6.values.id);
   
   let result7 = execute(|C.all()->filter(c|$c.h.hName == 'hName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL7 = 'select "root".id as "pk_0", concat(\'cName_\', "root".aName) as "aName", concat(\'cName_\', "root".bName) as "bName", "root".cName as "cName", "root".id as "id" from ABC as "root" left outer join GHI as "ghi_0" on ("root".id = "ghi_0".id) where "ghi_0".hName = \'hName1\'';
   assertEquals($expectedSQL7, $result7->sqlRemoveFormatting());
   assertSameElements([1, 3], $result7.values.id);
   
   let result8 = execute(|C.all()->filter(c|$c.h->subType(@I).iName == 'iName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL8 = 'select "root".id as "pk_0", concat(\'cName_\', "root".aName) as "aName", concat(\'cName_\', "root".bName) as "bName", "root".cName as "cName", "root".id as "id" from ABC as "root" left outer join GHI as "ghi_0" on ("root".id = "ghi_0".id) where "ghi_0".iName = \'iName1\'';
   assertEquals($expectedSQL8, $result8->sqlRemoveFormatting());
   assertSameElements([1, 3], $result8.values.id);
   
   let result9 = execute(|C.all()->filter(c|$c.cName == 'cName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL9 = 'select "root".id as "pk_0", concat(\'cName_\', "root".aName) as "aName", concat(\'cName_\', "root".bName) as "bName", "root".cName as "cName", "root".id as "id" from ABC as "root" where "root".cName = \'cName1\'';
   assertEquals($expectedSQL9, $result9->sqlRemoveFormatting());
   assertSameElements([1, 3], $result9.values.id);
   
   let result10 = execute(|C.all()->filter(c|$c.k.jName == 'kName_jName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL10 = 'select "root".id as "pk_0", concat(\'cName_\', "root".aName) as "aName", concat(\'cName_\', "root".bName) as "bName", "root".cName as "cName", "root".id as "id" from ABC as "root" left outer join JKL as "jkl_0" on ("root".id = "jkl_0".id) where concat(\'kName_\', "jkl_0".jName) = \'kName_jName1\'';
   assertEquals($expectedSQL10, $result10->sqlRemoveFormatting());
   assertSameElements([1, 3], $result10.values.id);
   
   let result11 = execute(|C.all()->filter(c|$c.k.kName == 'kName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL11 = 'select "root".id as "pk_0", concat(\'cName_\', "root".aName) as "aName", concat(\'cName_\', "root".bName) as "bName", "root".cName as "cName", "root".id as "id" from ABC as "root" left outer join JKL as "jkl_0" on ("root".id = "jkl_0".id) where "jkl_0".kName = \'kName1\'';
   assertEquals($expectedSQL11, $result11->sqlRemoveFormatting());
   assertSameElements([1, 3], $result11.values.id);
   
   let result12 = execute(|C.all()->filter(c|$c.k->subType(@L).lName == 'lName1'), testMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let expectedSQL12 = 'select "root".id as "pk_0", concat(\'cName_\', "root".aName) as "aName", concat(\'cName_\', "root".bName) as "bName", "root".cName as "cName", "root".id as "id" from ABC as "root" left outer join JKL as "jkl_0" on ("root".id = "jkl_0".id) where "jkl_0".lName = \'lName1\'';
   assertEquals($expectedSQL12, $result12->sqlRemoveFormatting());
   assertSameElements([1, 3], $result12.values.id);
}
