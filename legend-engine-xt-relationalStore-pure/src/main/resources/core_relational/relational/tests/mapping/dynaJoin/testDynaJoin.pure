// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::model::simple::*;
import meta::relational::mapping::*;


function <<test.BeforePackage>> meta::relational::tests::mapping::dynajoin::setUp():Boolean[1]
{
    meta::relational::tests::createTablesAndFillDb();
}

// Alloy exclusion reason: 4. Use getter relational protocol
function <<test.Test, test.ExcludeAlloy>> meta::relational::tests::mapping::dynajoin::testGet():Boolean[1]
{
   let result = execute(|Account.all()->filter(a|$a.name=='Account 1'), meta::relational::tests::simpleRelationalMapping,meta::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertSameElements([%2014-12-03,%2014-12-04],$result.values->at(0).trades.latestEventDate);
}

function <<test.Test>> meta::relational::tests::mapping::dynajoin::testFilterOnMultiLevelJoinWithNonAggregateFunction():Boolean[1]
{
    let result = execute(|TradeEvent.all()->project([e|$e.eventType, e|$e.traderAddress],['eventType','traderAddress']),
                                                     meta::relational::tests::simpleRelationalMapping,
                                                     meta::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   let tds = $result.values->toOne();
   assertEquals(['New,Hoboken', 'Correct,New York', 'Settle,New York', 'New,New York', 'Cancel,San Fransisco'], $tds.rows->map(r|$r.values->makeString(',')));
   assertEquals('select "root".eventType as "eventType", concat("addresstable_0".NAME, "addresstable_0".STREET) as "traderAddress" from tradeEventTable as "root" left outer join personTable as "persontable_0" on ("root".person_id = "persontable_0".ID) left outer join addressTable as "addresstable_0" on ("addresstable_0".ID = "persontable_0".ADDRESSID)', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::mapping::dynajoin::testJoinWithAggregateFunction():Boolean[1]
{
   let result = execute(|Trade.all()->filter(t|$t.id->in([1,6])), meta::relational::tests::simpleRelationalMapping,meta::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 2);
   assertSameElements(['1','6'],$result.values->map(r |$r.id->toString()));
   assertSameElements([%2014-12-03,%2014-12-04],$result.values->map(r |$r.latestEventDate));
   assertEquals('select "root".ID as "pk_0", "root".ID as "id", "root".quantity as "quantity", "root".tradeDate as "date", "root".settlementDateTime as "settlementDateTime", "tradeeventviewmaxtradeeventdate_0".maxTradeEventDate as "latestEventDate" from tradeTable as "root" left outer join (select "root".trade_id as trade_id, max("root".eventDate) as maxTradeEventDate from tradeEventTable as "root" group by "root".trade_id) as "tradeeventviewmaxtradeeventdate_0" on ("root".ID = "tradeeventviewmaxtradeeventdate_0".trade_id and "tradeeventviewmaxtradeeventdate_0".trade_id in (1, 6)) where "root".ID in (1, 6)', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::mapping::dynajoin::testFilterOnJoinWithAggregateFunction():Boolean[1]
{
   let result = execute(|Trade.all()->filter(t|$t.id->in([1,6]) && ($t.latestEventDate == '2014-12-03')), meta::relational::tests::simpleRelationalMapping,meta::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 1);
   assertSameElements(['1'],$result.values->map(r |$r.id->toString() ));
   assertSameElements([%2014-12-03],$result.values->map(r |$r.latestEventDate));
   assertEquals('select "root".ID as "pk_0", "root".ID as "id", "root".quantity as "quantity", "root".tradeDate as "date", "root".settlementDateTime as "settlementDateTime", "tradeeventviewmaxtradeeventdate_0".maxTradeEventDate as "latestEventDate" from tradeTable as "root" left outer join (select "root".trade_id as trade_id, max("root".eventDate) as maxTradeEventDate from tradeEventTable as "root" group by "root".trade_id) as "tradeeventviewmaxtradeeventdate_0" on ("root".ID = "tradeeventviewmaxtradeeventdate_0".trade_id and "tradeeventviewmaxtradeeventdate_0".trade_id in (1, 6)) where ("root".ID in (1, 6) and "tradeeventviewmaxtradeeventdate_0".maxTradeEventDate = \'2014-12-03\')', $result->sqlRemoveFormatting() );
}
 
function <<test.Test>> meta::relational::tests::mapping::dynajoin::testFilterOnJoinWithAggregateFunctionWithProject():Boolean[1]
{
    let result = execute(|Trade.all()->filter(t|$t.id->in([1,6]))->project([
                                                  t|$t.id,
                                                  t|$t.latestEventDate
                                              ],
                                              [
                                                  'id',
                                                  'latestEventDate'
                           ]), meta::relational::tests::simpleRelationalMapping,meta::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   let tds = $result.values->toOne();
   assertSize($tds.rows, 2);
   assertEquals([1, %2014-12-03], $tds.rows->at(0).values);
   assertEquals([6, %2014-12-04], $tds.rows->at(1).values);
   assertEquals('select "root".ID as "id", "tradeeventviewmaxtradeeventdate_0".maxTradeEventDate as "latestEventDate" from tradeTable as "root" left outer join (select "root".trade_id as trade_id, max("root".eventDate) as maxTradeEventDate from tradeEventTable as "root" group by "root".trade_id) as "tradeeventviewmaxtradeeventdate_0" on ("root".ID = "tradeeventviewmaxtradeeventdate_0".trade_id and "tradeeventviewmaxtradeeventdate_0".trade_id in (1, 6)) where "root".ID in (1, 6)', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::mapping::dynajoin::testSelfJoinWithAggregateFunction():Boolean[1]
{
   let toManyResult = execute(|Interaction.all()->filter(i|$i.source.firstName == 'Peter' && $i.target.lastName=='Johnson' ), meta::relational::tests::simpleRelationalMapping,meta::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($toManyResult.values, 2);
   assertSameElements(['1','2'], $toManyResult.values->map(r |$r.id));
   assertSameElements([6,6], $toManyResult.values->map(r |$r.longestInteractionBetweenSourceAndTarget));
   
   let toOneResult = execute(|Interaction.all()->filter(i|$i.source.firstName == 'Peter' && $i.target.lastName=='Hill' ), meta::relational::tests::simpleRelationalMapping,meta::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($toOneResult.values, 1);
   assertSameElements(['2'], $toOneResult.values->map(r |$r.id));
   assertSameElements([12], $toOneResult.values->map(r |$r.longestInteractionBetweenSourceAndTarget));
}

function <<test.ToFix>> meta::relational::tests::mapping::dynajoin::testJoinWithAggregateFunctionQualifier():Boolean[1]
{
   let result = execute(|Trade.all()->filter(t|$t.id->in([1,6]))->project([t | $t.id, t | $t.latestEvent.date, t | $t.daysToLastEvent], ['id', 'latestDate', 'daysToLastEvent']), 
                     meta::relational::tests::simpleRelationalMapping,meta::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 2);
   assertSameElements(['1','6'],$result.values->toOne().rows.values);
   
   assertEquals('select root.ID as "pk_0", root.ID as "id", root.quantity as "quantity", root.tradeDate as "date", root.settlementDateTime as "settlementDateTime", tradeEventTable_d_d_d_d_m5.max_eventDate as "latestEventDate" from tradeTable as root left outer join (select tradeEventTable.trade_id, max(tradeEventTable.eventDate) as max_eventDate from tradeEventTable as tradeEventTable group by tradeEventTable.trade_id) as tradeEventTable_d_d_d_d_m5 on (root.ID = tradeEventTable_d_d_d_d_m5.trade_id) where root.ID in (1, 6)', $result->sqlRemoveFormatting());
}

function <<test.ToFix>> meta::relational::tests::mapping::dynajoin::testJoinWithAggregateFunctionQualifierWithAssociation():Boolean[1]
{
   let result = execute(|Trade.all()->filter(t|$t.id->in([1,6]))->project([t | $t.id, t | $t.latestEvent.date, t | $t.latestEvent.eventType], ['id', 'date', 'type']), 
                     meta::relational::tests::simpleRelationalMapping,meta::relational::tests::testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 2);
   assertSameElements(['1','6'],$result.values->toOne().rows.values);
   
   assertEquals('select root.ID as "pk_0", root.ID as "id", root.quantity as "quantity", root.tradeDate as "date", root.settlementDateTime as "settlementDateTime", tradeEventTable_d_d_d_d_m5.max_eventDate as "latestEventDate" from tradeTable as root left outer join (select tradeEventTable.trade_id, max(tradeEventTable.eventDate) as max_eventDate from tradeEventTable as tradeEventTable group by tradeEventTable.trade_id) as tradeEventTable_d_d_d_d_m5 on (root.ID = tradeEventTable_d_d_d_d_m5.trade_id) where root.ID in (1, 6)', $result->sqlRemoveFormatting());
}
