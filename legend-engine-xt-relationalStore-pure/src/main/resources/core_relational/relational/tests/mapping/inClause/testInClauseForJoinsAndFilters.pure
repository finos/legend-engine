// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::relational::tests::model::simple::*;
import meta::relational::tests::csv::*;
import meta::relational::functions::asserts::*;
import meta::relational::mapping::*;
import meta::pure::runtime::*;
import meta::relational::tests::mapping::in::*;


function <<test.Test, meta::pure::profiles::test.AlloyOnly>>
{ meta::pure::executionPlan::profiles::serverVersion.start='v1_13_0' }
meta::relational::tests::mapping::in::testJoinWithInClause0():Boolean[1]
{
   let result = execute(|Person.all()->project([p|$p.lastName, p|$p.firm.legalName], ['person', 'firm']), inClauseMapping0, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSameSQL('select "root".LASTNAME as "person", "firmtable_0".LEGALNAME as "firm" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID and ("firmtable_0".ID = 2 or "firmtable_0".ID = 3 or "firmtable_0".ID = 4))', $result->sqlRemoveFormatting());
}

function <<test.Test, meta::pure::profiles::test.AlloyOnly>>
{ meta::pure::executionPlan::profiles::serverVersion.start='v1_13_0' }
meta::relational::tests::mapping::in::testJoinWithPrefixInClauseContainingNumberLiterals():Boolean[1]
{
   let result = execute(|Person.all()->project([p|$p.lastName, p|$p.firm.legalName], ['person', 'firm']), inClausePrefixMapping1, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSameSQL('select "root".LASTNAME as "person", "firmtable_0".LEGALNAME as "firm" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID and "firmtable_0".ID in (2, 3, 4))', $result->sqlRemoveFormatting());
}

function <<test.Test, meta::pure::profiles::test.AlloyOnly>>
{ meta::pure::executionPlan::profiles::serverVersion.start='v1_13_0' }
meta::relational::tests::mapping::in::testJoinWithPrefixInClauseContainingStringLiterals():Boolean[1]
{
   let result = execute(|Person.all()->project([p|$p.lastName, p|$p.firm.legalName], ['person', 'firm']), inClausePrefixMapping2, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSameSQL('select "root".LASTNAME as "person", "firmtable_0".LEGALNAME as "firm" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID and "firmtable_0".LEGALNAME in (\'Firm C\', \'Firm A\'))', $result->sqlRemoveFormatting());
}

function <<test.Test, meta::pure::profiles::test.AlloyOnly>>
{ meta::pure::executionPlan::profiles::serverVersion.start='v1_13_0' }
meta::relational::tests::mapping::in::testFilterMappingWithPrefixInClause():Boolean[1]
{
   let result = execute(|Firm.all(), filterMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   // assertSameElements(['ROOT', 'Firm X', 'Firm A', 'Securities', 'Banking', 'Federation'], $result.values.name);
   assertEquals('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" where "root".LEGALNAME in (\'Firm C\', \'Firm A\')', $result->sqlRemoveFormatting());
}

function <<test.BeforePackage>>
meta::relational::tests::mapping::in::setUp():Boolean[1]
{
    meta::relational::tests::mapping::join::setUp();
}

function meta::relational::tests::mapping::in::testRuntime():Runtime[1]
{
   meta::relational::tests::testRuntime(db);
}

###Relational
Database meta::relational::tests::mapping::in::db
(
    Table personTable (ID INT PRIMARY KEY, FIRSTNAME VARCHAR(200), LASTNAME VARCHAR(200), ADDRESSID INT, FIRMID INT, FLAG INT,AGE INT)
    Table firmTable(ID INT PRIMARY KEY, LEGALNAME VARCHAR(200), ADDRESSID INT, FLAG INT)

    Join Firm_Person_In0(firmTable.ID = personTable.FIRMID and firmTable.ID = 2 or firmTable.ID = 3 or firmTable.ID = 4)
    Join Firm_Person_In1_Prefix(firmTable.ID = personTable.FIRMID and in(firmTable.ID, [2,3,4]))
    Join Firm_Person_In2_Prefix(firmTable.ID = personTable.FIRMID and in(firmTable.LEGALNAME, ['Firm C', 'Firm A']))

    Filter myfilterWithPrefixinClause(in(firmTable.LEGALNAME, ['Firm C', 'Firm A']))
)

###Mapping
import meta::relational::tests::model::simple::*;
import meta::relational::tests::mapping::in::*;

Mapping meta::relational::tests::mapping::in::inClauseMapping0
(
   Person : Relational
            {
                scope([db]default.personTable)
                (
                    firstName : FIRSTNAME,
                    lastName : LASTNAME
                ),
                firm : [db]@Firm_Person_In0
            }

   Firm : Relational
          {
             legalName : [db]firmTable.LEGALNAME,
             employees : [db]@Firm_Person_In0
          }
)

Mapping meta::relational::tests::mapping::in::inClausePrefixMapping1
(
   Person : Relational
            {
                scope([db]default.personTable)
                (
                    firstName : FIRSTNAME,
                    lastName : LASTNAME
                ),
                firm : [db]@Firm_Person_In1_Prefix
            }

   Firm : Relational
          {
             legalName : [db]firmTable.LEGALNAME,
             employees : [db]@Firm_Person_In1_Prefix
          }
)

Mapping meta::relational::tests::mapping::in::inClausePrefixMapping2
(
   Person : Relational
            {
                scope([db]default.personTable)
                (
                    firstName : FIRSTNAME,
                    lastName : LASTNAME
                ),
                firm : [db]@Firm_Person_In2_Prefix
            }

   Firm : Relational
          {
             legalName : [db]firmTable.LEGALNAME,
             employees : [db]@Firm_Person_In2_Prefix
          }
)

Mapping meta::relational::tests::mapping::in::filterMapping
(
   Firm : Relational
          {
             ~filter [db]myfilterWithPrefixinClause
             legalName : [db]firmTable.LEGALNAME,
             employees : [db]@Firm_Person_In2_Prefix
          }
)
