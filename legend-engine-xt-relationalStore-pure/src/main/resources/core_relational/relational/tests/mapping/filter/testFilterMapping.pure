// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::mapping::*;
import meta::relational::tests::*;
import meta::relational::tests::mapping::filter::*;
import meta::relational::tests::model::simple::*;

function <<test.Test>> meta::relational::tests::mapping::filter::filterMappingWithJoinInFilterAndPropertyGetAll():Boolean[1]
{
   let result1 = execute(|Person.all()
                         , filterMappingWithJoinInFilterAndProperty, testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals(['Peter', 'John', 'John', 'Anthony'], $result1.values.firstName);
   assertEquals('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "firmtable_0".LEGALNAME as "lastName" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID) where "firmtable_0".LEGALNAME = \'Firm X\'', $result1->sqlRemoveFormatting());
}



###Mapping
import meta::relational::tests::*;
import meta::relational::tests::mapping::filter::*;
import meta::relational::tests::model::simple::*;

Mapping meta::relational::tests::mapping::filter::filterMappingWithJoinInFilterAndProperty
(

   Person : Relational
            {
               ~filter [dbInc]@Firm_Person | [dbInc]FirmXFilter
                scope([dbInc])
                (
                    firstName : personTable.FIRSTNAME,
                    lastName : @Firm_Person | firmTable.LEGALNAME
                )

            }

)
