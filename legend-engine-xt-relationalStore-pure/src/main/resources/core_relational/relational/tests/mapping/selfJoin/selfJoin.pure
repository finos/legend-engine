// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::mapping::selfJoin::model::domain::*;
import meta::relational::tests::mapping::selfJoin::model::store::*;
import meta::relational::tests::mapping::selfJoin::model::mapping::*;
import meta::relational::runtime::*;
import meta::relational::runtime::authentication::*;
import meta::pure::profiles::*;
import meta::pure::runtime::*;
import meta::relational::metamodel::execute::*;
import meta::relational::mapping::*;


function <<test.Test>> meta::relational::tests::mapping::selfJoin::testSelfJoinPropertyMapping():Boolean[1]
{
   let result = execute(|Org.all()->project([#/Org/name#, #/Org/parent/name!parentName#]), meta::relational::tests::mapping::selfJoin::model::mapping::orgTestMapping, testDataTypeMappingRuntime(), meta::relational::extension::relationalExtensions());
   let tds = $result.values->at(0);
   assertSameElements(['name','parentName'], $tds.columns.name);
   assertEquals(9, $tds.rows->size());
   assertSameElements([
                        pair('ROOT',^TDSNull()),
                        pair('Firm X','ROOT'),
                        pair('Firm A','ROOT'),
                        pair('Securities','Firm X'),
                        pair('Banking','Firm X'),
                        pair('Federation','Firm X'),
                        pair('Banking_c1','Banking'),
                        pair('Banking_c2','Banking'),
                        pair('Banking_c1_c1','Banking_c1')
                      ],$tds.rows->map(r|pair($r.values->at(0),$r.values->at(1))));
}

function <<test.Test>> meta::relational::tests::mapping::selfJoin::testSelfJoinPropertyMappingOverlap():Boolean[1]
{
   let result = execute(|Org.all()->project([#/Org/name#, #/Org/parent/name!p_name#, #/Org/parent/parent/name!p_p_name#]), meta::relational::tests::mapping::selfJoin::model::mapping::orgTestMapping, testDataTypeMappingRuntime(), meta::relational::extension::relationalExtensions());
   let tds = $result.values->at(0);
   assertSameElements(['name', 'p_name', 'p_p_name'], $tds.columns.name);
   assertEquals(9, $tds.rows->size());
   assertEquals(['ROOT',^TDSNull(),^TDSNull()], $result.values.rows->at(0).values);
   assertEquals(['Firm X','ROOT',^TDSNull()], $result.values.rows->at(1).values);
   assertEquals(['Firm A','ROOT',^TDSNull()], $result.values.rows->at(2).values);
   assertEquals(['Securities','Firm X','ROOT'], $result.values.rows->at(3).values);
   assertEquals(['Banking','Firm X','ROOT'], $result.values.rows->at(4).values);
   assertEquals(['Federation','Firm X','ROOT'], $result.values.rows->at(5).values);
   assertEquals(['Banking_c1', 'Banking', 'Firm X'], $result.values.rows->at(6).values);
   assertEquals(['Banking_c2', 'Banking', 'Firm X'], $result.values.rows->at(7).values);
   assertEquals(['Banking_c1_c1', 'Banking_c1', 'Banking'], $result.values.rows->at(8).values);
   assertEquals('select "root".name as "name", "orgtable_1".name as "p_name", "orgtable_2".name as "p_p_name" from orgTable as "root" left outer join orgTable as "orgtable_1" on ("root".parentId = "orgtable_1".id) left outer join orgTable as "orgtable_2" on ("orgtable_1".parentId = "orgtable_2".id)', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::mapping::selfJoin::testSelfJoinPropertyMappingWithDynaFunction():Boolean[1]
{
   let result = execute(|Org.all()->project([o | $o.name,
                                             o | $o.parent.parent.parent.name,
                                             o | $o.parent.parent.parent.parent.name,
                                             o | $o.parent.parent.parent.parent.name->isEmpty() && $o.parent.parent.parent.name->isEmpty()], 
                                            ['orgName',
                                             '3rd parent',
                                             '4th parent',
                                             'dyna operation']), meta::relational::tests::mapping::selfJoin::model::mapping::orgTestMapping, testDataTypeMappingRuntime(), meta::relational::extension::relationalExtensions(), debug());
   let tds = $result.values->at(0);
   
   assertEquals('select "root".name as "orgName", "orgtable_3".name as "3rd parent", "orgtable_4".name as "4th parent", ("orgtable_4".name is null and "orgtable_3".name is null) as "dyna operation" from orgTable as "root" left outer join orgTable as "orgtable_1" on ("root".parentId = "orgtable_1".id) left outer join orgTable as "orgtable_2" on ("orgtable_1".parentId = "orgtable_2".id) left outer join orgTable as "orgtable_3" on ("orgtable_2".parentId = "orgtable_3".id) left outer join orgTable as "orgtable_4" on ("orgtable_3".parentId = "orgtable_4".id)', $result->sqlRemoveFormatting());
   assertSameElements(['orgName', '3rd parent', '4th parent', 'dyna operation'], $tds.columns.name);
   assertEquals(9, $tds.rows->size());
   assertEquals(['ROOT', ^TDSNull(),^TDSNull(), true], $result.values.rows->at(0).values);
   assertEquals(['Firm X', ^TDSNull(),^TDSNull(), true], $result.values.rows->at(1).values);
   assertEquals(['Firm A', ^TDSNull(),^TDSNull(), true], $result.values.rows->at(2).values);
   assertEquals(['Securities', ^TDSNull(),^TDSNull(), true], $result.values.rows->at(3).values);
   assertEquals(['Banking', ^TDSNull(),^TDSNull(), true], $result.values.rows->at(4).values);
   assertEquals(['Federation', ^TDSNull(),^TDSNull(), true], $result.values.rows->at(5).values);
   assertEquals(['Banking_c1','ROOT',^TDSNull(), false], $result.values.rows->at(6).values);
   assertEquals(['Banking_c2','ROOT',^TDSNull(), false], $result.values.rows->at(7).values);
   assertEquals(['Banking_c1_c1','Firm X', 'ROOT', false], $result.values.rows->at(8).values);
}

function <<test.BeforePackage>> meta::relational::tests::mapping::selfJoin::setUp():Boolean[1]
{
    createTablesAndFillDb();
}

Class meta::relational::tests::mapping::selfJoin::model::domain::Org
{
    name : String[1];
    parent: Org[0..1];
    children: Org[*];
}

function meta::relational::tests::mapping::selfJoin::model::store::testDataTypeMappingRuntime():Runtime[1]
{
   meta::relational::tests::testRuntime(myDB);
}


function meta::relational::tests::mapping::selfJoin::model::store::createTablesAndFillDb():Boolean[1]
{
   let connection = testDataTypeMappingRuntime().connectionByElement(myDB)->cast(@TestDatabaseConnection);

   executeInDb('Drop table if exists orgTable;', $connection);
   executeInDb('Create Table orgTable(id INT, parentId INT, name VARCHAR(200));', $connection);
   executeInDb('insert into orgTable (id, parentId, name) values (1, -1, \'ROOT\');', $connection);
   executeInDb('insert into orgTable (id, parentId, name) values (2, 1, \'Firm X\');', $connection);
   executeInDb('insert into orgTable (id, parentId, name) values (3, 1, \'Firm A\');', $connection);
   executeInDb('insert into orgTable (id, parentId, name) values (4, 2, \'Securities\');', $connection);
   executeInDb('insert into orgTable (id, parentId, name) values (5, 2, \'Banking\');', $connection);
   executeInDb('insert into orgTable (id, parentId, name) values (6, 2, \'Federation\');', $connection);
   executeInDb('insert into orgTable (id, parentId, name) values (7, 5, \'Banking_c1\');', $connection);
   executeInDb('insert into orgTable (id, parentId, name) values (8, 5, \'Banking_c2\');', $connection);
   executeInDb('insert into orgTable (id, parentId, name) values (9, 7, \'Banking_c1_c1\');', $connection);
   true;
}


###Relational

Database meta::relational::tests::mapping::selfJoin::model::store::myDB
(
    Table orgTable
    (
        id INT PRIMARY KEY,
        parentId INT,
        name VARCHAR(200)
    )
    
    Join OrgOrgParent
    (
       orgTable.parentId = {target}.id
    )
    
    Join OrgParentOrg
    (
       orgTable.id = {target}.parentId
    )
)

###Mapping
import meta::relational::tests::mapping::selfJoin::model::domain::*;
import meta::relational::tests::mapping::selfJoin::model::store::*;

Mapping meta::relational::tests::mapping::selfJoin::model::mapping::orgTestMapping
(
    Org: Relational
    {
        name: [myDB] orgTable.name,
        parent : [myDB]@OrgOrgParent,
        children : [myDB]@OrgParentOrg
    }
)
