// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::milestoning::*;
import meta::relational::functions::asserts::*;
import meta::relational::metamodel::execute::*;
import meta::relational::tests::*;
import meta::relational::tests::query::qualifier::advanced::*;
import meta::relational::runtime::*;
import meta::relational::tests::model::simple::*;
import meta::pure::runtime::*;




function meta::relational::tests::query::qualifier::advanced::conditionRightTable(f:Firm[1],s:String[1]):Person[0..1]
{
   $f.employees->filter(e|$e.lastName == $s)->toOne();
   
}

function meta::relational::tests::query::qualifier::advanced::conditionRightTableNested(f:Firm[1], s:String[1]):Person[0..1]
{
   $f.employees->filter(e|$e.address.name == $s)->first()
}

function meta::relational::tests::query::qualifier::advanced::conditionLeftAndRightTables(f:Firm[1]):Person[1]
{
   $f.employees->filter(e|$e.lastName == $f.legalName)->first()->toOne();
} 

function meta::relational::tests::query::qualifier::advanced::conditionLeftAndRightTablesNestedDynaFunction(f:Firm[1]):Person[0..1]
{
   $f.employees->filter(e|$e.name == $f.address.name)->first();
}

function meta::relational::tests::query::qualifier::advanced::conditionLeftAndRightTablesNested(f:Firm[1]):Person[0..1]
{
   $f.employees->filter(e|$e.lastName == $f.address.name)->first();
}

function <<test.Test>> meta::relational::tests::query::qualifier::advanced::projectFunctionExpressionWithConditionOnRightTable():Boolean[1]
{
   let result1 = execute(|Firm.all()->project([p| $p->conditionRightTable('lala').lastName],['c1']) , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values->at(0).rows,5);
   assertSameSQL('select "persontable_0".LASTNAME as "c1" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and "persontable_0".LASTNAME = \'lala\')', $result1); 
}
   
function <<test.Test>> meta::relational::tests::query::qualifier::advanced::projectAbstractPropertyWithConditionOnRightTable():Boolean[1]
{ 
   let result2 = execute(|Firm.all()->project([p| $p.employeeByLastName('lala').lastName],['c1']) , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result2.values->at(0).rows,5);
   assertSameSQL('select "persontable_0".LASTNAME as "c1" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and "persontable_0".LASTNAME = \'lala\')', $result2); 
}


function <<test.Test>> meta::relational::tests::query::qualifier::advanced::projectAbstractPropertyWithConditionOnRightTableNested():Boolean[1]
{
   let result1 = execute(|Firm.all()->project([p| $p.employeeWithAddressName('lala').lastName],['c1']) , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values->at(0).rows,5);
   assertSameSQL('select "persontable_0".LASTNAME as "c1" from firmTable as "root" left outer join (select "persontable_1".FIRMID as FIRMID, "persontable_1".LASTNAME as LASTNAME from personTable as "persontable_1" left outer join addressTable as "addresstable_0" on ("addresstable_0".ID = "persontable_1".ADDRESSID) where "addresstable_0".NAME = \'lala\') as "persontable_0" on ("root".ID = "persontable_0".FIRMID)', $result1); 

}

function <<test.Test>> meta::relational::tests::query::qualifier::advanced::projectFunctionExpressionWithConditionOnRightTableNested():Boolean[1]
{
   let result3 = execute(|Firm.all()->project([p| $p->conditionRightTableNested('lala').lastName],['c1']) , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result3.values->at(0).rows,5);
   assertSameSQL('select "persontable_0".LASTNAME as "c1" from firmTable as "root" left outer join (select "persontable_1".FIRMID as FIRMID, "persontable_1".LASTNAME as LASTNAME from personTable as "persontable_1" left outer join addressTable as "addresstable_0" on ("addresstable_0".ID = "persontable_1".ADDRESSID) where "addresstable_0".NAME = \'lala\') as "persontable_0" on ("root".ID = "persontable_0".FIRMID)', $result3); 
}

 
function <<test.Test>> meta::relational::tests::query::qualifier::advanced::projectAbstractPropertyWithConditionOnLeftAndRightTable():Boolean[1]
{  
   let result1 = execute(|Firm.all()->project([p| $p.employeeWithFirmAddressName().lastName],['c1']) , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values->at(0).rows,5);
   assertSameSQL('select "firmtable_1".LASTNAME as "c1" from firmTable as "root" left outer join (select "firmtable_2".ID as ID, "persontable_0".LASTNAME as LASTNAME from firmTable as "firmtable_2" left outer join personTable as "persontable_0" on ("firmtable_2".ID = "persontable_0".FIRMID) left outer join addressTable as "addresstable_0" on ("addresstable_0".ID = "firmtable_2".ADDRESSID) where concat("persontable_0".FIRSTNAME, \' \', "persontable_0".LASTNAME) = "addresstable_0".NAME) as "firmtable_1" on ("root".ID = "firmtable_1".ID)', $result1); 
}


function <<test.Test>> meta::relational::tests::query::qualifier::advanced::projectFunctionExpressionWithConditionOnLeftAndRightTableNestedDynaFunction():Boolean[1]
{  

   let result2 = execute(|Firm.all()->project([p| $p->conditionLeftAndRightTablesNestedDynaFunction().firstName],['c1']) , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result2.values->at(0).rows,5);
   assertSameSQL('select "firmtable_1".FIRSTNAME as "c1" from firmTable as "root" left outer join (select "firmtable_2".ID as ID, "persontable_0".FIRSTNAME as FIRSTNAME from firmTable as "firmtable_2" left outer join personTable as "persontable_0" on ("firmtable_2".ID = "persontable_0".FIRMID) left outer join addressTable as "addresstable_0" on ("addresstable_0".ID = "firmtable_2".ADDRESSID) where concat("persontable_0".FIRSTNAME, \' \', "persontable_0".LASTNAME) = "addresstable_0".NAME) as "firmtable_1" on ("root".ID = "firmtable_1".ID)', $result2); 
}


function <<test.Test>> meta::relational::tests::query::qualifier::advanced::projectFunctionExpressionWithConditionOnLeftAndRightTableNested():Boolean[1]
{  

   let result2 = execute(|Firm.all()->project([p| $p->conditionLeftAndRightTablesNested().lastName],['c1']) , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result2.values->at(0).rows,5);
   assertSameSQL('select "firmtable_1".LASTNAME as "c1" from firmTable as "root" left outer join (select "firmtable_2".ID as ID, "persontable_0".LASTNAME as LASTNAME from firmTable as "firmtable_2" left outer join personTable as "persontable_0" on ("firmtable_2".ID = "persontable_0".FIRMID) left outer join addressTable as "addresstable_0" on ("addresstable_0".ID = "firmtable_2".ADDRESSID) where ("persontable_0".LASTNAME = "addresstable_0".NAME OR ("persontable_0".LASTNAME is null AND "addresstable_0".NAME is null))) as "firmtable_1" on ("root".ID = "firmtable_1".ID)', $result2);
}

function <<test.Test>> meta::relational::tests::query::qualifier::advanced::projectFunctionExpressionWithConditionOnLeftAndRightTable():Boolean[1]
{  
   let result3 = execute(|Firm.all()->project([p| $p->conditionLeftAndRightTables().lastName],['c1']) , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result3.values->at(0).rows,5);
   assertSameSQL('select "persontable_0".LASTNAME as "c1" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and "persontable_0".LASTNAME = "root".LEGALNAME)', $result3); 
}

function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterFunctionExpressionWithConditionRightTable():Boolean[1]
{ 
   
   let result1 = execute(|Firm.all()->filter(f| $f->conditionRightTable('Smith').firstName == 'Peter') , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,1);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and "persontable_0".LASTNAME = \'Smith\') where "persontable_0".FIRSTNAME = \'Peter\'', $result1);

}


function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterAsbtractPropertyWithConditionRightTable():Boolean[1]
{ 
   
   let result2 = execute(|Firm.all()->filter(f |$f.employeeByLastName('Smith').firstName == 'Peter') , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result2.values,1);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and "persontable_0".LASTNAME = \'Smith\') where "persontable_0".FIRSTNAME = \'Peter\'', $result2);

}


function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterAbstractPropertyWithConditionOnLeftAndRightTable():Boolean[1]
{ 
    let result1 = execute(|Firm.all()->filter(p| $p.employeeWithFirmAddressName().lastName == 'York') , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,1);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID) left outer join addressTable as "addresstable_0" on ("addresstable_0".ID = "root".ADDRESSID) where concat("persontable_0".FIRSTNAME, \' \', "persontable_0".LASTNAME) = "addresstable_0".NAME and "persontable_0".LASTNAME = \'York\'', $result1); 

}
  
function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterFunctionExpressionWithConditionOnLeftAndRightTableNested():Boolean[1]
{ 

   let result2 = execute(|Firm.all()->filter(p| $p->conditionLeftAndRightTablesNested().firstName == 'Don') , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result2.values,1);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID) left outer join addressTable as "addresstable_0" on ("addresstable_0".ID = "root".ADDRESSID) where ("persontable_0".LASTNAME = "addresstable_0".NAME OR ("persontable_0".LASTNAME is null AND "addresstable_0".NAME is null)) and "persontable_0".FIRSTNAME = \'Don\'', $result2); 

}

function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterFunctionExpressionWithConditionOnLeftAndRightTableNestedDynaFunction():Boolean[1]
{ 

   let result2 = execute(|Firm.all()->filter(p| $p->conditionLeftAndRightTablesNestedDynaFunction().lastName == 'York') , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
  assertSize($result2.values,1);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID) left outer join addressTable as "addresstable_0" on ("addresstable_0".ID = "root".ADDRESSID) where concat("persontable_0".FIRSTNAME, \' \', "persontable_0".LASTNAME) = "addresstable_0".NAME and "persontable_0".LASTNAME = \'York\'', $result2); 

}

function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterFunctionExpressionWithConditionOnLeftAndRightTable():Boolean[1]
{ 

   let result3 = execute(|Firm.all()->filter(p| $p->conditionLeftAndRightTables().lastName == 'Firm B') , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result3.values,1);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and "persontable_0".LASTNAME = "root".LEGALNAME) where "persontable_0".LASTNAME = \'Firm B\'', $result3);


}

function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterAndProjectFunctionExpressionWithConditionOnRightTable():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| $f->conditionRightTable('Smith').firstName == 'Peter')
                         ->project([p| $p->conditionRightTable('Smith').firstName],['c1']) , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values->at(0).rows,1);
   assertSameSQL('select "persontable_0".FIRSTNAME as "c1" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and "persontable_0".LASTNAME = \'Smith\') where "persontable_0".FIRSTNAME = \'Peter\'', $result1);
}

 


//and use cases

function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterFunctionExpressionWithConditionOnRightTableAndExpression():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| $f->conditionRightTable('Firm B').firstName == 'Elena' && $f.employees.firstName != '123')  , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,2);
   assertSameElements($result1.values.legalName,['Firm B','Firm B']);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and "persontable_0".LASTNAME = \'Firm B\') left outer join personTable as "persontable_1" on ("root".ID = "persontable_1".FIRMID) where ("persontable_0".FIRSTNAME = \'Elena\' and ("persontable_1".FIRSTNAME <> \'123\' OR "persontable_1".FIRSTNAME is null))', $result1);
}

function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterFunctionExpressionWithAndConditionOnRightTable():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| $f.employees->filter(e|$e.lastName == 'Roberts' && ($e.age > 20) )->toOne().firstName == 'Fabrice' )  , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,1);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and ("persontable_0".LASTNAME = \'Roberts\' and ("persontable_0".AGE is not null and "persontable_0".AGE > 20))) where "persontable_0".FIRSTNAME = \'Fabrice\'', $result1);
}

function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterFunctionExpressionWithAndConditionOnRootAndRightTable():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| $f.employees->filter(e|$e.lastName == $f.legalName && ($e.age > 20) )->toOne().firstName == 'Fabrice' )  , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,0);
   assertSameSQL( 'select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and ("persontable_0".LASTNAME = "root".LEGALNAME and ("persontable_0".AGE is not null and "persontable_0".AGE > 20))) where "persontable_0".FIRSTNAME = \'Fabrice\'', $result1); 
}


function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterFunctionExpressionWithConditionOnRightTableOrExpression():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| $f->conditionRightTable('Firm B').firstName == 'Elena' || $f.employees.firstName == 'David')  , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
  
   assertSize($result1.values,3);
   assertSameElements(['Firm C','Firm B','Firm B'],$result1.values.legalName->sort());
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and "persontable_0".LASTNAME = \'Firm B\') left outer join personTable as "persontable_1" on ("root".ID = "persontable_1".FIRMID) where ("persontable_0".FIRSTNAME = \'Elena\' or "persontable_1".FIRSTNAME = \'David\')', $result1);
}

function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterFunctionExpressionWithOrConditionOnRightTable():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| $f.employees->filter(e|$e.lastName == 'Lopez' || ($e.age > 20) )->toOne().lastName == 'Smith' )  , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,2);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and ("persontable_0".LASTNAME = \'Lopez\' or ("persontable_0".AGE is not null and "persontable_0".AGE > 20))) where "persontable_0".LASTNAME = \'Smith\'', $result1);
}


function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterAbstractPropertyWithConditionOnRightTableExistsExpression():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| $f.employeeByLastName('Smith')->exists(x| $x.age >20) )  , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,2);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" where "persontable_1".LASTNAME = \'Smith\' and ("persontable_1".AGE is not null and "persontable_1".AGE > 20)) as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".FIRMID is not null', $result1);
}

function <<test.ToFix>> meta::relational::tests::query::qualifier::advanced::filterFunctionExpressionWithConditionOnRightTableExistsExpression():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| $f.employees->filter(e|$e.lastName != 'Lopez')->exists(x| $x.age >20) )  , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,4);
   // SQL does not contain lastName codition
   sqlContains('Lopez',$result1);
 }



function <<test.Test>> meta::relational::tests::query::qualifier::advanced::filterFunctionExpressionWithConditionOnRightTableIsEmptyExpression():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| $f.employees->filter(e|$e.lastName == 'Lopez')->isEmpty() )  , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,5);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_0".FIRMID from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".LASTNAME = \'Lopez\') as "firmtable_1" on ("root".ID = "firmtable_1".FIRMID) where "firmtable_1".FIRMID is null', $result1); 
}

function <<test.Test>> meta::relational::tests::query::qualifier::advanced::nestedFilterFunctionExpressionWithOrCondition():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| ($f.employees->filter(e|$e.lastName == 'Smith')->toOne().age > 20) || $f.legalName=='Firm B' )
                         ->project([f|$f.legalName],['Firm Name'])
                         , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());

  assertSize($result1.values.rows,3);
  assertSameElements(['Firm X','Firm C', 'Firm B'],$result1.values.rows->map(r | $r.getString('Firm Name'))->sort());
  assertSameSQL('select "root".LEGALNAME as "Firm Name" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and "persontable_0".LASTNAME = \'Smith\') left outer join personTable as "persontable_1" on ("root".ID = "persontable_1".FIRMID and "persontable_1".LASTNAME = \'Smith\') where (("persontable_0".AGE is not null and "persontable_1".AGE > 20) or "root".LEGALNAME = \'Firm B\')', $result1);

}  


function <<test.Test>> meta::relational::tests::query::qualifier::advanced::nestedFilterInQualifierWithOrCondition():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| ($f.employeeByLastName('Smith')->toOne().age > 20) || $f.legalName=='Firm B' )
                         ->project([f|$f.legalName],['Firm Name'])
                         , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   

   assertSize($result1.values.rows,3);
   assertSameElements(['Firm X', 'Firm C', 'Firm B'],$result1.values.rows->map(r | $r.getString('Firm Name'))->sort());
   assertSameSQL('select "root".LEGALNAME as "Firm Name" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID and "persontable_0".LASTNAME = \'Smith\') left outer join personTable as "persontable_1" on ("root".ID = "persontable_1".FIRMID and "persontable_1".LASTNAME = \'Smith\') where (("persontable_0".AGE is not null and "persontable_1".AGE > 20) or "root".LEGALNAME = \'Firm B\')', $result1);
}  

function <<test.Test>> meta::relational::tests::query::qualifier::advanced::projectionInvolvingOneNestedAtributeOnTriangularJoinAndOtherJoin():Boolean[1]
{
   let result1 = execute(|Firm.all()->project([f| $f.legalName,f| ($f.employees->filter(e| $e.locations.place == $f.legalName)->toOne().lastName) , f| ($f.employees->filter(e| $e.locations.place == $f.legalName)->toOne().lastName)  + $f.address->toOne().name],['c1','c2','c3'])
                         , simpleRelationalMapping,  testRuntime(), meta::relational::extension::relationalExtensions());
   

  assertSize($result1.values.rows,5);
  assertSameElements(['Firm A:TDSNull:Cupertino', 'Firm X:TDSNull:New York', 'Firm C:TDSNull:Mountain View', 'No Employees:TDSNull:Mountain View', 'Firm B:TDSNull:Tokyo'],$result1.values.rows->map(r | $r.getString('c1')+':'+$r.get('c2')->toString() +':'+$r.getString('c3'))->sort());
  assertSameSQL('select "root".LEGALNAME as "c1", "persontable_0".LASTNAME as "c2", concat("persontable_0".LASTNAME, "addresstable_0".NAME) as "c3" from firmTable as "root" left outer join (select "persontable_1".FIRMID as FIRMID, "locationtable_0".PLACE as PLACE, "persontable_1".LASTNAME as LASTNAME from personTable as "persontable_1" left outer join locationTable as "locationtable_0" on ("persontable_1".ID = "locationtable_0".PERSONID)) as "persontable_0" on ("persontable_0".PLACE = "root".LEGALNAME and "root".ID = "persontable_0".FIRMID) left outer join addressTable as "addresstable_0" on ("addresstable_0".ID = "root".ADDRESSID)', $result1); 
}  
