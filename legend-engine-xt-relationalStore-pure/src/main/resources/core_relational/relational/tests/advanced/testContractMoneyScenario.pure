// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::model::simple::*;
import meta::relational::tests::advanced::contractmoneyscenario::*;
import meta::relational::runtime::*;
import meta::pure::runtime::*;
import meta::relational::metamodel::execute::*;
import meta::relational::mapping::*;

function <<test.BeforePackage>> meta::relational::tests::advanced::contractmoneyscenario::setUp():Boolean[1]
{
    createTablesAndFillDb();
}

function <<test.Test>> meta::relational::tests::advanced::contractmoneyscenario::test1():Boolean[1]
{
   let result = execute(|Contract.all()->project([
                                                    c|$c.id,
                                                    c|$c.money.amount,
                                                    c|$c.money.usdRate(%2003-10-10,NonStandardTenorQualifier.S).rate,
                                                    c|$c.money.usdValueNoMap(%2003-10-10,NonStandardTenorQualifier.S)

                                                 ],
                                                 [
                                                    'id',
                                                    'amount',
                                                    'rate',
                                                    'value'
                                                 ]
                                                 ), ContractMoney, testRuntime(), meta::relational::extension::relationalExtensions());

   assertEquals('select "root".id as "id", "root".price as "amount", "fx_0".rate as "rate", case when "currency_0".value = \'USD\' then "root".price else ("root".price * "fx_0".rate) end as "value" from Contract as "root" left outer join Currency as "currency_0" on ("root".id = "currency_0".contractId) left outer join FX as "fx_0" on ("root".currency = "fx_0".currency and ("fx_0".date = \'2003-10-10\' and "fx_0".tenor = 1))', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::advanced::contractmoneyscenario::test2():Boolean[1]
{
   let result = execute(|Contract.all()->project([
                                                    c|$c.id,
                                                    c|$c.money.amount,
                                                    c|$c.money.usdRate(%2003-10-10,NonStandardTenorQualifier.S).rate,
                                                    c|$c.money.usdValueWithMap(%2003-10-10,NonStandardTenorQualifier.S)

                                                 ],
                                                 [
                                                    'id',
                                                    'amount',
                                                    'rate',
                                                    'value'
                                                 ]
                                                 ), ContractMoney, testRuntime(), meta::relational::extension::relationalExtensions());

   assertEquals('select "root".id as "id", "root".price as "amount", "fx_0".rate as "rate", case when "currency_0".value = \'USD\' then "root".price else ("root".price * "fx_0".rate) end as "value" from Contract as "root" left outer join Currency as "currency_0" on ("root".id = "currency_0".contractId) left outer join FX as "fx_0" on ("root".currency = "fx_0".currency and ("fx_0".date = \'2003-10-10\' and "fx_0".tenor = 1))', $result->sqlRemoveFormatting());
}

function meta::relational::tests::advanced::contractmoneyscenario::createDatabase():Boolean[1]
{
   let connection = testRuntime().connectionByElement(db)->cast(@TestDatabaseConnection);

   meta::relational::functions::toDDL::dropAndCreateTableInDb(db, 'Contract', $connection);
   executeInDb('insert into Contract (id, Price, Currency) values (1, 5, \'EUR\');', $connection);
   meta::relational::functions::toDDL::dropAndCreateTableInDb(db, 'FX', $connection);
   executeInDb('insert into Fx (id, Rate, Currency) values (1, 1.1, \'EUR\');', $connection);
   true;
}

function meta::relational::tests::advanced::contractmoneyscenario::testRuntime():Runtime[1]
{
   meta::relational::tests::testRuntime(db);
}

function meta::relational::tests::advanced::contractmoneyscenario::createTablesAndFillDb():Boolean[1]
{
   let connection = testRuntime().connectionByElement(db)->cast(@TestDatabaseConnection);

   meta::relational::functions::toDDL::dropAndCreateTableInDb(db, 'Contract', $connection);
//   executeInDb2('insert into productTable (id, name) values (1, \'Firm X\');', $connection);

   meta::relational::functions::toDDL::dropAndCreateTableInDb(db, 'FX', $connection);

   meta::relational::functions::toDDL::dropAndCreateTableInDb(db, 'Currency', $connection);
   executeInDb('insert into Contract (id, Price, Currency) values (1, 5, \'EUR\');', $connection);
   executeInDb('insert into Contract (id, Price, Currency) values (2, 5, \'EUR\');', $connection);
   executeInDb('insert into Contract (id, Price, Currency) values (3, 5.75, \'EUR\');', $connection);


   executeInDb('insert into Fx (id, Rate, Currency) values (1, 1.1, \'EUR\');', $connection);
   executeInDb('insert into Fx (id, Rate, Currency) values (2, 1.5, \'EUR\');', $connection);
   executeInDb('insert into Fx (id, Rate, Currency) values (3, 1.5, \'EUR\');', $connection);
    
   executeInDb('insert into Currency (contractId,  Value) values (1, \'EUR\');', $connection);
   executeInDb('insert into Currency (contractId,  Value) values (2, \'EUR\');', $connection);

   true;
}


###Mapping
import meta::relational::tests::advanced::contractmoneyscenario::*;
import meta::relational::tests::model::simple::*;

Mapping meta::relational::tests::advanced::contractmoneyscenario::ContractMoney
(
   Contract : Relational
              {
                 id : [db]Contract.id,
                 money
                 (
                    amount:[db]Contract.price,
                    usdRates : [db]@ContractFx,
                    currency : [db]@ContractCurrency
                 )
              }

   Currency : Relational
                     {
                        currency:[db]Currency.value
                     }

   FxReferenceRate : Relational
                     {
                        rate:[db]FX.rate,
                        observationDate : [db]FX.date,
                        nonStandardTenorQualifier: EnumerationMapping NonStandardTenorQualifierEnumMap :[db]FX.tenor
                     }

   NonStandardTenorQualifier: EnumerationMapping NonStandardTenorQualifierEnumMap
                 {
                    S:  1,
                    F: 2,
                    None: 3
                 }
)

###Relational
Database meta::relational::tests::advanced::contractmoneyscenario::db
(
   Table Contract(id INT PRIMARY KEY, price FLOAT, currency VARCHAR(200))
   Table FX(id INT PRIMARY KEY, rate FLOAT, currency VARCHAR(200), tenor INT, date TIMESTAMP)
   Table Currency(contractId INT PRIMARY KEY, value VARCHAR(200))
   Join ContractFx(Contract.currency = FX.currency)
   Join ContractCurrency(Contract.id = Currency.contractId)
)
