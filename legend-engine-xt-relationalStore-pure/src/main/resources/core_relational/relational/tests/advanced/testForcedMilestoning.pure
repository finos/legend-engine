// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::asserts::*;
import meta::pure::runtime::*;
import meta::relational::mapping::*;
import meta::relational::metamodel::execute::*;
import meta::relational::runtime::*;
import meta::relational::tests::milestoning::*;
import meta::relational::functions::*;
import meta::relational::functions::pureToSqlQuery::*;
import meta::pure::mapping::*;

function <<test.Test>> meta::relational::tests::advanced::forced::milestoning::testMilestoningQueryWithSimpleProjectWithMilestoneFilterForcedCorrelated():Boolean[1]
{
   let result = meta::relational::tests::advanced::forced::milestoning::testMilestoningQueryWithSimpleProjectWithMilestoneFilter(IsolationStrategy.BuildCorrelatedSubQuery);
   assertEquals('select "root".name as "name", "productclassificationtable_0".type_description as "classificationDescription" from ProductTable as "root" left outer join (select "productexchangetable_1".name as name from ProductExchangeTable as "productexchangetable_1" where "productexchangetable_1".from_z <= \'2015-10-17\' and "productexchangetable_1".thru_z > \'2015-10-17\') as "productexchangetable_0" on ("root".exchange = "productexchangetable_0".name) left outer join (select "productclassificationtable_1".type as type, "productclassificationtable_1".type_description as type_description from ProductClassificationTable as "productclassificationtable_1" where "productclassificationtable_1".from_z <= \'2015-10-16\' and "productclassificationtable_1".thru_z > \'2015-10-16\') as "productclassificationtable_0" on ("root".type = "productclassificationtable_0".type) where ("productclassificationtable_0".type = \'STOCK\' and "productexchangetable_0".name = \'LNSE\') and "root".from_z <= \'2015-10-16\' and "root".thru_z > \'2015-10-16\'', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::advanced::forced::milestoning::testMilestoningQueryWithSimpleProjectWithMilestoneFilterForcedOnClause():Boolean[1]
{
   let result = meta::relational::tests::advanced::forced::milestoning::testMilestoningQueryWithSimpleProjectWithMilestoneFilter(IsolationStrategy.MoveFilterInOnClause);
   assertEquals('select "root".name as "name", "productclassificationtable_0".type_description as "classificationDescription" from ProductTable as "root" left outer join ProductExchangeTable as "productexchangetable_0" on ("root".exchange = "productexchangetable_0".name and "productexchangetable_0".from_z <= \'2015-10-17\' and "productexchangetable_0".thru_z > \'2015-10-17\') left outer join ProductClassificationTable as "productclassificationtable_0" on ("root".type = "productclassificationtable_0".type and "productclassificationtable_0".from_z <= \'2015-10-16\' and "productclassificationtable_0".thru_z > \'2015-10-16\') where ("productclassificationtable_0".type = \'STOCK\' and "productexchangetable_0".name = \'LNSE\') and "root".from_z <= \'2015-10-16\' and "root".thru_z > \'2015-10-16\'', $result->sqlRemoveFormatting());
}

function meta::relational::tests::advanced::forced::milestoning::testMilestoningQueryWithSimpleProjectWithMilestoneFilter(isolation:IsolationStrategy[1]):Result<Any|*>[1]
{
   let runtime = initDatabase();
   let result = execute(|Product.all(%2015-10-16)->filter(p|$p.classification(%2015-10-16).type=='STOCK' && $p.exchange(%2015-10-17).name=='LNSE')
                                      ->project([p|$p.name, p|$p.classification(%2015-10-16).description],['name','classificationDescription']), milestoningmap, $runtime
                                      ,  meta::relational::extension::relationalExtensions(),^RelationalDebugContext(debug=false, space='', forcedIsolation = $isolation));
   let tds = $result.values->at(0);
   assertEquals(['ProductName2,STOCK DESC-V3'],$tds.rows->map(r|$r.values->makeString(',')));
   $result;
}


function <<test.Test>> meta::relational::tests::advanced::forced::milestoning::testNonMilestoningQueryWithMilestoneFilterProjectForcedCorrelated():Boolean[1]
{
   let result = meta::relational::tests::advanced::forced::milestoning::testNonMilestoningQueryWithMilestoneFilterProject(IsolationStrategy.BuildCorrelatedSubQuery);
   assertSameSQL('select "root".id as "orderId", "producttable_2".name as "productName" from OrderTable as "root" left outer join (select distinct "producttable_1".id from (select "producttable_1".id as id from ProductTable as "producttable_1" where "producttable_1".from_z <= \'2015-10-15\' and "producttable_1".thru_z > \'2015-10-15\') as "producttable_1" where "producttable_1".id = 2) as "producttable_0" on ("root".prodFk = "producttable_0".id) left outer join (select "producttable_1".id as id, "producttable_1".name as name from ProductTable as "producttable_1" where "producttable_1".from_z <= \'2015-10-15\' and "producttable_1".thru_z > \'2015-10-15\') as "producttable_2" on ("root".prodFk = "producttable_2".id) where "producttable_0".id is not null', $result);
}

function <<test.Test>> meta::relational::tests::advanced::forced::milestoning::testNonMilestoningQueryWithMilestoneFilterProjectForcedOnClause():Boolean[1]
{
   let result = meta::relational::tests::advanced::forced::milestoning::testNonMilestoningQueryWithMilestoneFilterProject(IsolationStrategy.MoveFilterInOnClause);
   assertSameSQL('select "root".id as "orderId", "producttable_2".name as "productName" from OrderTable as "root" left outer join (select distinct "producttable_1".id, "producttable_1".from_z, "producttable_1".thru_z from ProductTable as "producttable_1" where "producttable_1".id = 2) as "producttable_0" on ("root".prodFk = "producttable_0".id and "producttable_0".from_z <= \'2015-10-15\' and "producttable_0".thru_z > \'2015-10-15\') left outer join ProductTable as "producttable_2" on ("root".prodFk = "producttable_2".id and "producttable_2".from_z <= \'2015-10-15\' and "producttable_2".thru_z > \'2015-10-15\') where "producttable_0".thru_z is not null and "producttable_0".from_z is not null and "producttable_0".id is not null', $result);
}

function meta::relational::tests::advanced::forced::milestoning::testNonMilestoningQueryWithMilestoneFilterProject(isolation:IsolationStrategy[1]):Result<Any|*>[1]
{
   let runtime = initDatabase();
   let result = execute(|Order.all()->filter(o|$o.product(%2015-10-15)->exists(p|$p.id==2))
                            ->project([o|$o.id,o|$o.product(%2015-10-15).name],['orderId','productName']), milestoningmap, $runtime, meta::relational::extension::relationalExtensions(),
                            ^RelationalDebugContext(debug=false, space='', forcedIsolation = $isolation));
   let tds = $result.values->at(0);
   assertEquals(['2,ProductName1'],$tds.rows->map(r|$r.values->makeString(',')));
   $result;
}
