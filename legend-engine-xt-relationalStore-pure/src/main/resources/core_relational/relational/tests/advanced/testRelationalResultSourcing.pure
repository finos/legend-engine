// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::runtime::*;
import meta::relational::tests::csv::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::executionPlan::profiles::*;
import meta::relational::runtime::*;
import meta::pure::executionPlan::toString::*;

function meta::relational::tests::advanced::resultSourcing::getConnection():Connection[1]
{
   let connection = meta::relational::tests::testRuntime().connectionByElement(meta::relational::tests::db)->cast(@TestDatabaseConnection);
   meta::relational::tests::createTablesAndFillDb();
   $connection;
 }

function <<meta::pure::profiles::test.Test>> meta::relational::tests::advanced::resultSourcing::relationalResultSourcingOfList():Boolean[1]
{
   let result = meta::pure::router::execute({|
      let nameList = meta::relational::tests::model::simple::Firm.all()->filter(x|$x.isFirmXGroup()).legalName->distinct();
      meta::relational::tests::model::simple::Person.all()->filter(y|$y.firm.legalName->in($nameList))->project([col(y|$y.firstName,'firstName')])->sort(['firstName']);
   }, meta::relational::tests::simpleRelationalMapping, ^Runtime(connections = [meta::relational::tests::advanced::resultSourcing::getConnection()]),meta::relational::extension::relationalExtensions());
   let expectedValue = 'firstName\n'+
                        'Anthony\n'+
                        'John\n'+
                        'John\n'+
                        'Peter\n';                   
   assertSameElements($expectedValue, $result.values->toCSV());
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::advanced::resultSourcing::relationalResultSourcingOfDateList():Boolean[1]
{
   let result = meta::pure::router::execute({|
      let dateList = meta::relational::tests::model::simple::Trade.all()->filter(x|$x.latestEventDate->isNotEmpty()).latestEventDate->distinct()->take(2);
      meta::relational::tests::model::simple::Trade.all()->filter(y|$y.latestEventDate->in($dateList))->project([col(y|$y.id,'id')])->sort(['id']);
   }, meta::relational::tests::simpleRelationalMapping, ^Runtime(connections = [meta::relational::tests::advanced::resultSourcing::getConnection()]), meta::relational::extension::relationalExtensions());
   let expectedValue = 'id\n'+
                        '1\n'+
                        '6\n';
   assertSameElements($expectedValue,$result.values->toCSV());
}

function <<meta::pure::profiles::test.Test>> meta::relational::tests::advanced::resultSourcing::relationalResultSourcingOfListExecutionPlan():Boolean[1]
{
   let result = meta::pure::executionPlan::executionPlan({|
      let nameList = meta::relational::tests::model::simple::Firm.all()->filter(x|$x.isFirmXGroup()).legalName->distinct();
      meta::relational::tests::model::simple::Person.all()->filter(y|$y.firm.legalName->in($nameList))->project([col(y|$y.firstName,'firstName')])->sort(['firstName']);
   }, meta::relational::tests::simpleRelationalMapping, ^Runtime(connections = [meta::relational::tests::advanced::resultSourcing::getConnection()]),meta::relational::extension::relationalExtensions());
   let expectedPlan = 'Sequence(type=TDS[(firstName,String,VARCHAR(200),"")](Allocation(type=StringresultSizeRange=*name=nameListvalue=(Relational(type=StringresultSizeRange=*resultColumns=[("root".LEGALNAME,VARCHAR(200))]sql=selectdistinct"root".LEGALNAMEfromfirmTableas"root"where"root".LEGALNAMEin(\'FirmX\',\'FirmX&Co.\',\'FirmXandGroup\')connection=TestDatabaseConnection(type="H2"))))RelationalBlockExecutionNode(type=TDS[(firstName,String,VARCHAR(200),"")](Allocation(type=Stringname=inFilterClause_nameListvalue=(FreeMarkerConditionalExecutionNode(type=Stringcondition=${(instanceOf(nameList,"Stream")||instanceOf(nameList,"StreamingResult")||((collectionSize(nameList![])?number)>50))?c}trueBlock=(Sequence(type=String(CreateAndPopulateTempTable(type=VoidinputVarNames=[nameList]tempTableName=tempTableForIn_nameListtempTableColumns=[(ColumnForStoringInCollection,VARCHAR(200))]connection=TestDatabaseConnection(type="H2"))Constant(type=Stringvalues=[select"temptableforin_namelist_0".ColumnForStoringInCollectionasColumnForStoringInCollectionfromtempTableForIn_nameListas"temptableforin_namelist_0"]))))falseBlock=(Constant(type=Stringvalues=[${renderCollection(nameList![]",""\'""\'"{"\'":"\'\'"}"null")}])))))Relational(type=TDS[(firstName,String,VARCHAR(200),"")]resultColumns=[("firstName",VARCHAR(200))]sql=select"root".FIRSTNAMEas"firstName"frompersonTableas"root"leftouterjoinfirmTableas"firmtable_0"on("firmtable_0".ID="root".FIRMID)where"firmtable_0".LEGALNAMEin(${inFilterClause_nameList})orderby"firstName"connection=TestDatabaseConnection(type="H2"))))))';                  
  assertEquals($result->planToStringWithoutFormatting(meta::relational::extension::relationalExtensions()), $expectedPlan);
}
