// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::mapping::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::advanced::failures::moveFilterInOnClause::*;

function <<test.BeforePackage>> meta::relational::tests::advanced::failures::moveFilterInOnClause::setUp():Boolean[1]
{
    createTablesAndFillDb();
}

function <<test.Test>> meta::relational::tests::advanced::failures::moveFilterInOnClause::failMoveFilterInOnClauseJoin():Boolean[1]
{
    let result = execute(|Product.all()->project([p|$p.name, p|$p.synonymByType(ProductSynonymType.CUSIP).name],['name', 'cusip']), mapping, testRuntime(), meta::relational::extension::relationalExtensions());
    assertSize($result.values.rows, 4);
    assertEquals('CUSIP1,CUSIP2,CUSIP3,Firm A,Firm C,Firm D,Firm X,TDSNull', $result.values.rows->map(r|$r.values)->sort()->makeString(','));
    assertEquals('select "root".NAME as "name", "synonymtable_0".NAME as "cusip" from productTable as "root" left outer join (select "synonymtable_1".PRODID as PRODID, "synonymtable_1".NAME as NAME from synonymTable as "synonymtable_1" left outer join synonymType as "synonymtype_0" on ("synonymtable_1".ID = "synonymtype_0".ID) where "synonymtype_0".TYPE = \'CUSIP\') as "synonymtable_0" on ("root".ID = "synonymtable_0".PRODID)', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::advanced::failures::moveFilterInOnClause::failMoveFilterInOnClauseModel():Boolean[1]
{
    let result = execute(|FProduct.all()->project([p|$p.name, p|$p.synonymByType(ProductSynonymType.CUSIP).name],['name', 'cusip']), mapping, testRuntime(), meta::relational::extension::relationalExtensions());
    assertSize($result.values.rows, 4);
    assertEquals('CUSIP1,CUSIP2,CUSIP3,Firm A,Firm C,Firm D,Firm X,TDSNull', $result.values.rows->map(r|$r.values)->sort()->makeString(','));
    assertEquals('select "root".NAME as "name", "synonymtable_0".NAME as "cusip" from productTable as "root" left outer join (select "synonymtable_1".PRODID as PRODID, "synonymtable_1".NAME as NAME from synonymTable as "synonymtable_1" left outer join synonymType as "synonymtype_0" on ("synonymtable_1".ID = "synonymtype_0".ID) where "synonymtype_0".TYPE = \'CUSIP\') as "synonymtable_0" on ("root".ID = "synonymtable_0".PRODID)', $result->sqlRemoveFormatting());
}


function <<test.Test>> meta::relational::tests::advanced::failures::failMoveFilterOnTop():Boolean[1]
{
   true;
}

function <<test.Test>> meta::relational::tests::advanced::failures::BuildCorrelatedSubQuery():Boolean[1]
{
   true;
}

Class meta::relational::tests::advanced::failures::moveFilterInOnClause::FProduct
{
   synonyms : FSynonym[*];
   synonymByType(type:ProductSynonymType[1]){$this.synonyms->filter(s|$s.type.value == $type)->toOne()}:FSynonym[1];
   name : String[1];
}

Class meta::relational::tests::advanced::failures::moveFilterInOnClause::FSynonym
{
   type : FSynonymType[1];
   name : String[1];
}

Class meta::relational::tests::advanced::failures::moveFilterInOnClause::FSynonymType
{
   value : ProductSynonymType[1];
}

###Relational
Database meta::relational::tests::advanced::failures::moveFilterInOnClause::db
(
   Table productTable(ID INT PRIMARY KEY, NAME VARCHAR(200))
   Table synonymTable(ID INT PRIMARY KEY, PRODID INT, NAME VARCHAR(200))
   Table synonymType(ID INT PRIMARY KEY, TYPE VARCHAR(200))
   Join Product_Synonym(productTable.ID = synonymTable.PRODID)
   Join Synonym_SynonymType(synonymTable.ID = synonymType.ID)
)

###Mapping
import meta::relational::tests::model::simple::*;
import meta::relational::tests::advanced::failures::moveFilterInOnClause::*;

Mapping meta::relational::tests::advanced::failures::moveFilterInOnClause::mapping
(
   Product : Relational
             {
                name : [db]productTable.NAME,
                synonyms : [db]@Product_Synonym
             }
             
   ProductSynonymType: EnumerationMapping SynonymEnum
   {
        CUSIP:  'CUSIP',
        ISIN: 'ISIN'
   }

   Synonym : Relational
             {
                name : [db]synonymTable.NAME,
                type : EnumerationMapping SynonymEnum: [db]@Synonym_SynonymType|synonymType.TYPE,
                product : [db]@Product_Synonym
             }

   FProduct : Relational
             {
                name : [db]productTable.NAME,
                synonyms : [db]@Product_Synonym
             }              

   FSynonym : Relational
             {
                name : [db]synonymTable.NAME,
                type : [db]@Synonym_SynonymType
             }             
             
   FSynonymType : Relational
             {
                value : EnumerationMapping SynonymEnum: [db]synonymType.TYPE
             }             
)


###Pure
import meta::relational::tests::advanced::failures::moveFilterInOnClause::*;
import meta::relational::metamodel::*;
import meta::pure::profiles::*;
import meta::relational::metamodel::execute::*;
import meta::pure::runtime::*;
import meta::relational::runtime::*;
import meta::relational::functions::toDDL::*;

function meta::relational::tests::advanced::failures::moveFilterInOnClause::testRuntime():Runtime[1]
{
   meta::relational::tests::testRuntime(db);
}

function meta::relational::tests::advanced::failures::moveFilterInOnClause::createTablesAndFillDb():Boolean[1]
{
   let connection = testRuntime().connectionByElement(db)->cast(@TestDatabaseConnection);

   meta::relational::functions::toDDL::dropAndCreateTableInDb(db, 'productTable', $connection);
   executeInDb2('insert into productTable (id, name) values (1, \'Firm X\');', $connection);
   executeInDb2('insert into productTable (id, name) values (2, \'Firm A\');', $connection);
   executeInDb2('insert into productTable (id, name) values (3, \'Firm C\');', $connection);
   executeInDb2('insert into productTable (id, name) values (4, \'Firm D\');', $connection);

   meta::relational::functions::toDDL::dropAndCreateTableInDb(db, 'synonymTable', $connection);
   executeInDb2('insert into SynonymTable (id, prodid, name) values (1, 1, \'CUSIP1\');', $connection);
   executeInDb2('insert into SynonymTable (id, prodid, name) values (2, 1, \'ISIN1\');', $connection);
   executeInDb2('insert into SynonymTable (id, prodid, name) values (3, 2, \'CUSIP2\');', $connection);
   executeInDb2('insert into SynonymTable (id, prodid, name) values (4, 2, \'ISIN2\');', $connection);
   executeInDb2('insert into SynonymTable (id, prodid, name) values (5, 3, \'CUSIP3\');', $connection);
   executeInDb2('insert into SynonymTable (id, prodid, name) values (6, 3, \'ISIN3\');', $connection);

   meta::relational::functions::toDDL::dropAndCreateTableInDb(db, 'synonymType', $connection);
   executeInDb2('insert into SynonymType (id, type) values (1, \'CUSIP\');', $connection);
   executeInDb2('insert into SynonymType (id, type) values (2, \'ISIN\');', $connection);
   executeInDb2('insert into SynonymType (id, type) values (3, \'CUSIP\');', $connection);
   executeInDb2('insert into SynonymType (id, type) values (4, \'ISIN\');', $connection);
   executeInDb2('insert into SynonymType (id, type) values (5, \'CUSIP\');', $connection);
   executeInDb2('insert into SynonymType (id, type) values (6, \'ISIN\');', $connection);
   true;
}

function meta::relational::functions::toDDL::executeInDb2(sql:String[1], databaseConnection:DatabaseConnection[1]):ResultSet[1]
{
   println($sql);
   executeInDb($sql, $databaseConnection);
}
