// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::metamodel::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::operation::*;

function <<test.Test>> meta::relational::tests::milestoning::applyMilestoningFilters::testMilestoningFilterApplicationOnSemiStructuredRelationalOperationElements():Any[*]
{
   let extensions = meta::relational::extension::relationalExtensions();
   
   let ssp = ^SemiStructuredPropertyAccess(
      operand = ^TableAliasColumn(alias = ^TableAlias(name = 'root', relationalElement = ^Table(name = 't', schema = ^Schema(name = 's', database = ^Database(name = 'd', package = ::)))), column = ^Column(name = 'result', type = ^meta::relational::metamodel::datatype::SemiStructured())),
      property = ^Literal(value = 'prop')
   );
   meta::relational::milestoning::applyMilestoningFilters($ssp, {t|[]}, {t|$t}, false, $extensions);

   let ssa = ^SemiStructuredArrayElementAccess(
      operand = ^TableAliasColumn(alias = ^TableAlias(name = 'root', relationalElement = ^Table(name = 't', schema = ^Schema(name = 's', database = ^Database(name = 'd', package = ::)))), column = ^Column(name = 'result', type = ^meta::relational::metamodel::datatype::SemiStructured())),
      index = ^Literal(value = 0)
   );
   meta::relational::milestoning::applyMilestoningFilters($ssa, {t|[]}, {t|$t}, false, $extensions);

   let ssf = ^SemiStructuredArrayFlatten(navigation = $ssp);
   meta::relational::milestoning::applyMilestoningFilters($ssf, {t|[]}, {t|$t}, false, $extensions);

   let ssfo = ^SemiStructuredArrayFlattenOutput(tableAliasColumn = ^TableAliasColumn(alias = ^TableAlias(name = 'ssf', relationalElement = $ssf), column = ^Column(name = 'result', type = ^meta::relational::metamodel::datatype::Integer())), returnType  = Integer);
   meta::relational::milestoning::applyMilestoningFilters($ssfo, {t|[]}, {t|$t}, false, $extensions);
}
