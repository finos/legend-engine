// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::asserts::*;
import meta::relational::mapping::*;
import meta::relational::metamodel::execute::*;
import meta::relational::runtime::*;
import meta::relational::tests::milestoning::inheritance::union::*;
import meta::relational::tests::*;
import meta::relational::tests::milestoning::*;


//Alloy Exclusion Reason: Store Resolution Wrong (Cant Find Join)
function <<test.Test , test.ExcludeAlloy>> meta::relational::tests::milestoning::inheritance::union::testLinkageBetweenUnionWithIsolatedMultiJoinSelectLHS():Boolean[1]
{
   let result = execute(|Order.all()->project([o|$o.id, o|$o.product(%2016-9-23).synonymsByType('CUSIP').createActivity.createdBy], ['orderId','productSynonymCreator']), inheritanceUnionMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals(['1,TDSNull', '2,smith', '2,smith', '2,smith', '2,smith'], $result.values->at(0).rows->map(r|$r.values->makeString(',')));
   assertSameSQL('select "root".id as "orderId", "productsynonymintermediate_0"."ProductSynonymTablecreatedBy_ProductSynonymTablecreatedBy" as "productSynonymCreator" from OrderTable as "root" left outer join (select "orderproductintermediate_1".orderId as orderId, "producttable_0".id as id from orderProductIntermediate as "orderproductintermediate_1" inner join ProductTable as "producttable_0" on ("orderproductintermediate_1".prodId = "producttable_0".id) where "producttable_0".from_z <= \'2016-09-23\' and "producttable_0".thru_z > \'2016-09-23\') as "orderproductintermediate_0" on ("root".id = "orderproductintermediate_0".orderId) left outer join (select "productsynonymintermediate_1".prodId as prodId, "unionalias_0"."ProductSynonymTablecreatedBy_ProductSynonymTablecreatedBy" as "ProductSynonymTablecreatedBy_ProductSynonymTablecreatedBy" from productSynonymIntermediate as "productsynonymintermediate_1" inner join (select "root".from_z as "from_z_0", "root".thru_z as "thru_z_0", null as "from_z_1", null as "thru_z_1", "root".prodId as prodId_0, null as prodId_1, \'CUSIP\' as "CUSIP_ISIN", "root".createdBy as "ProductSynonymTablecreatedBy_ProductSynonymTablecreatedBy" from ProductSynonymTable as "root" UNION ALL select null as "from_z_0", null as "thru_z_0", "root".from_z as "from_z_1", "root".thru_z as "thru_z_1", null as prodId_0, "root".prodId as prodId_1, \'ISIN\' as "CUSIP_ISIN", "root".createdBy as "ProductSynonymTablecreatedBy_ProductSynonymTablecreatedBy" from ProductSynonymTable as "root") as "unionalias_0" on ("productsynonymintermediate_1".synProdId = "unionalias_0".prodId_0 or "productsynonymintermediate_1".synProdId = "unionalias_0".prodId_1) where "unionalias_0"."CUSIP_ISIN" = \'CUSIP\') as "productsynonymintermediate_0" on ("orderproductintermediate_0".id = "productsynonymintermediate_0".prodId)', $result->sqlRemoveFormatting()); 
}

//Alloy Exclusion Reason: Store Resolution Wrong (Cant Find Join)
function <<test.Test , test.ExcludeAlloy>> meta::relational::tests::milestoning::inheritance::union::testIsolationOfSubselectWithChildNodesUsingCorrelatedSubQueryStrategy():Boolean[1]
{
   let result = execute(|Order.all()->project([o|$o.id, o|$o.product(%2016-9-23)->filter(p|($p.id==1 || $p.id==2) && $p.referenceSystem.name=='SYS1').id], ['orderId','filteredProductId']), inheritanceUnionMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals(['1,TDSNull', '2,2'], $result.values->at(0).rows->map(r|$r.values->makeString(',')));
   assertSameSQL('select "root".id as "orderId", "orderproductintermediate_0".id as "filteredProductId" from OrderTable as "root" left outer join (select "orderproductintermediate_1".orderId as orderId, "producttable_0".id as id, "producttable_0".referenceSystemName as referenceSystemName from orderProductIntermediate as "orderproductintermediate_1" inner join ProductTable as "producttable_0" on ("orderproductintermediate_1".prodId = "producttable_0".id) left outer join SystemTable as "systemtable_0" on ("producttable_0".referenceSystemName = "systemtable_0".name) where (("producttable_0".id = 1 or "producttable_0".id = 2) and "systemtable_0".name = \'SYS1\') and "producttable_0".from_z <= \'2016-09-23\' and "producttable_0".thru_z > \'2016-09-23\') as "orderproductintermediate_0" on ("root".id = "orderproductintermediate_0".orderId)', $result->sqlRemoveFormatting());
}

//Alloy Exclusion Reason: Store Resolution Wrong (Cant Find Join)
function <<test.Test , test.ExcludeAlloy>> meta::relational::tests::milestoning::inheritance::union::testSubSelectsWithDifferentColumnsMerge():Boolean[1]
{
   let result = execute(|Order.all()->project([o|$o.id, o|$o.product(%2016-9-23)->filter(p|$p.id==2).id, o|$o.product(%2016-9-23)->filter(p|$p.id==2).name], ['orderId','productId','productName']), inheritanceUnionMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals(['1,TDSNull,TDSNull', '2,2,ProductName2'], $result.values->at(0).rows->map(r|$r.values->makeString(',')));
   assertSameSQL('select "root".id as "orderId", "orderproductintermediate_0".id as "productId", "orderproductintermediate_0".name as "productName" from OrderTable as "root" left outer join (select "orderproductintermediate_1".orderId as orderId, "producttable_0".id as id, "producttable_0".name as name from orderProductIntermediate as "orderproductintermediate_1" inner join ProductTable as "producttable_0" on ("orderproductintermediate_1".prodId = "producttable_0".id) where "producttable_0".from_z <= \'2016-09-23\' and "producttable_0".thru_z > \'2016-09-23\') as "orderproductintermediate_0" on ("root".id = "orderproductintermediate_0".orderId and "orderproductintermediate_0".id = 2)', $result->sqlRemoveFormatting());
}


//Alloy Exclusion Reason: Store Resolution Wrong (Cant Find Join)
function <<test.Test , test.ExcludeAlloy>> meta::relational::tests::milestoning::inheritance::union::testRootUnionQueryWithRelationalJoinsForDataTypes():Boolean[1]
{
   let result = execute(|BiTemporalProduct.all(%2018-05-10, %2018-05-09)->project([p|$p.name, p|$p.type],['name', 'type']), inheritanceUnionMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals(['p1s1,STOCK', 'p2s1,STOCK', 'p3s1,STOCK', 'p10s2,notSet', 'p11s2,notSet'], $result.values->at(0).rows->map(r|$r.values->makeString(',')));
   assertSameSQL('select "unionBase"."BiTemporalProductTable_Out_From_Inclusivename_BiTemporalProductTable_Out_Thru_Inclusivename" as "name", "unionBase"."BiTemporalProductTable_Out_From_Inclusive_ClassificationProductClassificationTabletype_notSet" as "type" from (select "root".from_z as "from_z_0", "root".thru_z as "thru_z_0", "root".in_z as "in_z_0", "root".out_z as "out_z_0", null as "from_z_1", null as "thru_z_1", null as "in_z_1", null as "out_z_1", "root".id as "pk_0_0", "root".name as "pk_1_0", null as "pk_0_1", null as "pk_1_1", "root".name as "BiTemporalProductTable_Out_From_Inclusivename_BiTemporalProductTable_Out_Thru_Inclusivename", "productclassificationtable_0".type as "BiTemporalProductTable_Out_From_Inclusive_ClassificationProductClassificationTabletype_notSet" from BiTemporalProductTable_Out_From_Inclusive as "root" left outer join ProductClassificationTable as "productclassificationtable_0" on ("root".type = "productclassificationtable_0".type and "productclassificationtable_0".from_z <= \'2018-05-09\' and "productclassificationtable_0".thru_z > \'2018-05-09\') where "root".in_z < \'2018-05-10\' and "root".out_z >= \'2018-05-10\' and "root".from_z <= \'2018-05-09\' and "root".thru_z > \'2018-05-09\' UNION ALL select null as "from_z_0", null as "thru_z_0", null as "in_z_0", null as "out_z_0", "root".from_z as "from_z_1", "root".thru_z as "thru_z_1", "root".in_z as "in_z_1", "root".out_z as "out_z_1", null as "pk_0_0", null as "pk_1_0", "root".id as "pk_0_1", "root".name as "pk_1_1", "root".name as "BiTemporalProductTable_Out_From_Inclusivename_BiTemporalProductTable_Out_Thru_Inclusivename", \'notSet\' as "BiTemporalProductTable_Out_From_Inclusive_ClassificationProductClassificationTabletype_notSet" from BiTemporalProductTable_Out_Thru_Inclusive as "root" where "root".in_z < \'2018-05-10\' and "root".out_z >= \'2018-05-10\' and "root".from_z < \'2018-05-09\' and "root".thru_z >= \'2018-05-09\') as "unionBase"', $result->sqlRemoveFormatting());
}

//Alloy Exclusion Reason: Store Resolution Wrong (Cant Find Join)
function <<test.Test , test.ExcludeAlloy>> meta::relational::tests::milestoning::inheritance::union::testRootUnionQueryWithRelationalPropertyJoin():Boolean[1]
{
   let result = execute(|BiTemporalProduct.all(%2018-05-10, %2018-05-09)->project([p|$p.name,p|$p.classification.type],['name', 'type']), inheritanceUnionMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals(['p1s1,STOCK', 'p2s1,STOCK', 'p3s1,STOCK', 'p10s2,STOCK', 'p11s2,STOCK'], $result.values->at(0).rows->map(r|$r.values->makeString(',')));
   assertSameSQL('select "unionBase"."BiTemporalProductTable_Out_From_Inclusivename_BiTemporalProductTable_Out_Thru_Inclusivename" as "name", "productclassificationtable_0".type as "type" from (select "root".from_z as "from_z_0", "root".thru_z as "thru_z_0", "root".in_z as "in_z_0", "root".out_z as "out_z_0", null as "from_z_1", null as "thru_z_1", null as "in_z_1", null as "out_z_1", "root".id as "pk_0_0", "root".name as "pk_1_0", null as "pk_0_1", null as "pk_1_1", "root".name as "BiTemporalProductTable_Out_From_Inclusivename_BiTemporalProductTable_Out_Thru_Inclusivename", "root".type as type_0, null as type_1 from BiTemporalProductTable_Out_From_Inclusive as "root" where "root".in_z < \'2018-05-10\' and "root".out_z >= \'2018-05-10\' and "root".from_z <= \'2018-05-09\' and "root".thru_z > \'2018-05-09\' UNION ALL select null as "from_z_0", null as "thru_z_0", null as "in_z_0", null as "out_z_0", "root".from_z as "from_z_1", "root".thru_z as "thru_z_1", "root".in_z as "in_z_1", "root".out_z as "out_z_1", null as "pk_0_0", null as "pk_1_0", "root".id as "pk_0_1", "root".name as "pk_1_1", "root".name as "BiTemporalProductTable_Out_From_Inclusivename_BiTemporalProductTable_Out_Thru_Inclusivename", null as type_0, "root".type as type_1 from BiTemporalProductTable_Out_Thru_Inclusive as "root" where "root".in_z < \'2018-05-10\' and "root".out_z >= \'2018-05-10\' and "root".from_z < \'2018-05-09\' and "root".thru_z >= \'2018-05-09\') as "unionBase" left outer join ProductClassificationTable as "productclassificationtable_0" on (("unionBase".type_0 = "productclassificationtable_0".type or "unionBase".type_1 = "productclassificationtable_0".type) and "productclassificationtable_0".from_z <= \'2018-05-09\' and "productclassificationtable_0".thru_z > \'2018-05-09\')', $result->sqlRemoveFormatting());
}

function <<test.BeforePackage>> meta::relational::tests::milestoning::inheritance::union::createTablesAndFillDb():Any[0..1]
{
  let runtime = meta::relational::tests::milestoning::initDatabase();
   
  let connection = $runtime.connections->at(0)->cast(@TestDatabaseConnection);
  
  executeInDb('Drop table if exists productSynonymIntermediate;', $connection);
  executeInDb('Create Table productSynonymIntermediate (prodId INT, synProdId INT);', $connection);
  executeInDb('insert into productSynonymIntermediate values(1, 1);', $connection);
  executeInDb('insert into productSynonymIntermediate values(2, 2);', $connection);
   
  executeInDb('Drop table if exists orderProductIntermediate;', $connection);
  executeInDb('Create Table orderProductIntermediate (orderId INT, prodId INT);', $connection);
  executeInDb('insert into orderProductIntermediate values(1, 1);', $connection);
  executeInDb('insert into orderProductIntermediate values(2, 2);', $connection);

  executeInDb('drop table if exists BiTemporalProductTable_Out_From_Inclusive;', $connection);
  executeInDb('create table BiTemporalProductTable_Out_From_Inclusive (id Integer, name VARCHAR(200), type VARCHAR(200), in_z TIMESTAMP, out_z TIMESTAMP, from_z TIMESTAMP, thru_z TIMESTAMP);' ,$connection);
  executeInDb('insert into BiTemporalProductTable_Out_From_Inclusive values(1, \'p1s1\', \'STOCK\', \'2018-05-02 00:00:00\', \'9999-12-31 00:00:00\', \'2018-05-01 00:00:00\', \'9999-12-31 00:00:00\');', $connection);
  executeInDb('insert into BiTemporalProductTable_Out_From_Inclusive values(2, \'p2s1\', \'STOCK\', \'2018-05-07 00:00:00\', \'9999-12-31 00:00:00\', \'2018-05-06 00:00:00\', \'9999-12-31 00:00:00\');', $connection);
  executeInDb('insert into BiTemporalProductTable_Out_From_Inclusive values(3, \'p3s1\', \'STOCK\', \'2018-05-09 00:00:00\', \'9999-12-31 00:00:00\', \'2018-05-08 00:00:00\', \'9999-12-31 00:00:00\');', $connection);
   
  executeInDb('drop table if exists BiTemporalProductTable_Out_Thru_Inclusive;', $connection);
  executeInDb('create table BiTemporalProductTable_Out_Thru_Inclusive (id Integer, name VARCHAR(200), type VARCHAR(200), in_z TIMESTAMP, out_z TIMESTAMP, from_z TIMESTAMP, thru_z TIMESTAMP);', $connection);
  executeInDb('insert into BiTemporalProductTable_Out_Thru_Inclusive values(10, \'p10s2\', \'STOCK\', \'2018-05-07 00:00:00\', \'9999-12-31 00:00:00\', \'2018-05-06 00:00:00\', \'9999-12-31 00:00:00\');', $connection);
  executeInDb('insert into BiTemporalProductTable_Out_Thru_Inclusive values(11, \'p11s2\', \'STOCK\', \'2018-05-09 00:00:00\', \'9999-12-31 00:00:00\', \'2018-05-08 00:00:00\', \'9999-12-31 00:00:00\');', $connection);
   
}

###Mapping

import meta::relational::tests::milestoning::inheritance::union::*;
import meta::relational::tests::*;
import meta::relational::tests::milestoning::*;

Mapping meta::relational::tests::milestoning::inheritance::union::inheritanceUnionMapping
(
   meta::relational::tests::milestoning::Order : Relational{
      ~mainTable [inheritanceUnionDB]OrderTable
      id : [inheritanceUnionDB]OrderTable.id,
      product : [inheritanceUnionDB]@Order_OrderProductIntermediate > (INNER) @OrderProductIntermediate_Product
   } 

   meta::relational::tests::milestoning::Product : Relational{
      ~mainTable [inheritanceUnionDB]ProductTable     
      id : [inheritanceUnionDB]ProductTable.id, 
      name : [inheritanceUnionDB]ProductTable.name, 
      referenceSystem : [inheritanceUnionDB]@Product_System,
      
      synonyms[cusip] : [inheritanceUnionDB]@Product_SynonymIntermediate > (INNER) @SynonymIntermediate_Synonym,
      synonyms[isin] : [inheritanceUnionDB]@Product_SynonymIntermediate > (INNER) @SynonymIntermediate_Synonym
   }  
   
   *ProductSynonym[unionedSynonyms] : Operation
   {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(cusip,isin);
   }

   meta::relational::tests::milestoning::ProductSynonym[cusip] : Relational{
      scope([inheritanceUnionDB]ProductSynonymTable)
      (
         synonym : synonym,
         type : 'CUSIP',
         createActivity( createdBy : createdBy)
      )     
   }  
   
   meta::relational::tests::milestoning::ProductSynonym[isin] : Relational{
     scope([inheritanceUnionDB]ProductSynonymTable)
      (
         synonym : synonym,
         type : 'ISIN',
         createActivity( createdBy : createdBy)
      )  
   }
   
   meta::relational::tests::milestoning::System : Relational{
      name : [inheritanceUnionDB]SystemTable.name
   }
   
   *BiTemporalProduct : Operation
   {
      meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(set1, set2)
   }
   
   BiTemporalProduct[set1] : Relational
   {
      id : [inheritanceUnionDB]BiTemporalProductTable_Out_From_Inclusive.id,
      name : [inheritanceUnionDB]BiTemporalProductTable_Out_From_Inclusive.name,
      type : [inheritanceUnionDB]@BiTemporalProductTable_Out_From_Inclusive_Classification | ProductClassificationTable.type,
      classification : [inheritanceUnionDB]@BiTemporalProductTable_Out_From_Inclusive_Classification
   }
   
   BiTemporalProduct[set2] : Relational
   {
      id : [inheritanceUnionDB]BiTemporalProductTable_Out_Thru_Inclusive.id,
      name : [inheritanceUnionDB]BiTemporalProductTable_Out_Thru_Inclusive.name,
      type : 'notSet',
      classification : [inheritanceUnionDB]@BiTemporalProductTable_Out_Thru_Inclusive_Classification
   }
      
    meta::relational::tests::milestoning::ProductClassification : Relational{
      type : [inheritanceUnionDB]ProductClassificationTable.type
   }     
)



###Relational

Database meta::relational::tests::milestoning::inheritance::union::inheritanceUnionDB
(
   include meta::relational::tests::milestoning::db
   
   Table orderProductIntermediate(orderId INT PRIMARY KEY, prodId INT PRIMARY KEY)
   Table productSynonymIntermediate(prodId INT PRIMARY KEY, synProdId INT PRIMARY KEY)
   
   Join Order_OrderProductIntermediate(OrderTable.id = orderProductIntermediate.orderId)
   Join OrderProductIntermediate_Product(orderProductIntermediate.prodId = ProductTable.id)
   
   Join Product_SynonymIntermediate(ProductTable.id = productSynonymIntermediate.prodId)
   Join SynonymIntermediate_Synonym(productSynonymIntermediate.synProdId = ProductSynonymTable.prodId )
)
