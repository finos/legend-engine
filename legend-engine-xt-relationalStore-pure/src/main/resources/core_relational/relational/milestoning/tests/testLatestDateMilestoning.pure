// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::asserts::*;
import meta::relational::tests::milestoning::*;
import meta::relational::tests::*;

function <<test.BeforePackage>> meta::relational::tests::milestoning::latestDate::setUp():Any[0..1]
{
   initDatabase();
}


function <<test.Test>> meta::relational::tests::milestoning::latestDate::testLatestIgnoredForNonMilestonedMappedClassesAllQuery():Boolean[1]
{
   let result = execute(|Product.all(%latest), noMilestoningMap, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSameSQL('select "root".id as "pk_0", "root".name as "pk_1", "root".id as "id", "root".type as "type" from ProductTableNoMilestoning as "root"',$result);   
}


function <<test.Test>> meta::relational::tests::milestoning::latestDate::testLatestIgnoredForNonMilestonedMappedBiTemporalClassesAllQuery():Boolean[1]
{
   let result = execute(|BiTemporalProduct.all(%latest, %latest), noMilestoningMap, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSameSQL('select "root".id as "pk_0", "root".name as "pk_1", "root".id as "id", "root".name as "name", "root".type as "type" from ProductTableNoMilestoning as "root"',$result);   
}

function <<test.Test>> meta::relational::tests::milestoning::latestDate::testLatestIgnoredForNonMilestonedMappedClasses():Boolean[1]
{
   let result = execute(|Order.all()->filter(o|or($o.product(%latest).type=='STOCK',$o.product(%latest).type=='OPTION')), noMilestoningMap, testRuntime(), meta::relational::extension::relationalExtensions());
   let result2 = execute(|Order.all()->filter(o|or($o.product(%2015-08-15).type=='STOCK',$o.product(%2015-10-16).type=='OPTION')), noMilestoningMap, testRuntime(), meta::relational::extension::relationalExtensions());
   
   let orders = $result.values;
   assertEquals(1,$orders->size());
   assertEquals(1, $orders->at(0).id);
   assertSameSQL('select "root".id as "pk_0", "root".id as "id" from OrderTable as "root" left outer join ProductTableNoMilestoning as "producttablenomilestoning_0" on ("root".prodFk = "producttablenomilestoning_0".id) where ("producttablenomilestoning_0".type = \'STOCK\' or "producttablenomilestoning_0".type = \'OPTION\')', $result);
   assertSameSQL('select "root".id as "pk_0", "root".id as "id" from OrderTable as "root" left outer join ProductTableNoMilestoning as "producttablenomilestoning_0" on ("root".prodFk = "producttablenomilestoning_0".id) where ("producttablenomilestoning_0".type = \'STOCK\' or "producttablenomilestoning_0".type = \'OPTION\')',$result2);
}

function <<test.Test>> meta::relational::tests::milestoning::latestDate::testLatestIgnoredForNonMilestonedMappedBiTemporalClasses():Boolean[1]
{
   let result = execute(|Order.all()->filter(o|or($o.biTemporalProduct(%latest, %latest).type=='STOCK',$o.biTemporalProduct(%latest, %latest).type=='OPTION')), noMilestoningMap, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSameSQL('select "root".id as "pk_0", "root".id as "id" from OrderTable as "root" left outer join ProductTableNoMilestoning as "producttablenomilestoning_0" on ("root".prodFk = "producttablenomilestoning_0".id) where ("producttablenomilestoning_0".type = \'STOCK\' or "producttablenomilestoning_0".type = \'OPTION\')', $result);
}

function <<test.Test>> meta::relational::tests::milestoning::latestDate::testLatestIgnoredForNonMilestonedMappedBiTemporalClassesWithProject():Boolean[1]
{
   let result = execute(|Order.all()->project([o|$o.biTemporalProduct(%latest, %latest).type],'productType'), noMilestoningMap, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSameSQL('select "producttablenomilestoning_0".type as "productType" from OrderTable as "root" left outer join ProductTableNoMilestoning as "producttablenomilestoning_0" on ("root".prodFk = "producttablenomilestoning_0".id)', $result);

   let pathResult = execute(|Order.all()->project(#/Order/biTemporalProduct(%latest, %latest)/type#), noMilestoningMap, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSameSQL('select "producttablenomilestoning_0".type as "type" from OrderTable as "root" left outer join ProductTableNoMilestoning as "producttablenomilestoning_0" on ("root".prodFk = "producttablenomilestoning_0".id)',$pathResult);


}
