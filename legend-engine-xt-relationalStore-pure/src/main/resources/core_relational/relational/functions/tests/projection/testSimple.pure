// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::model::simple::*;
import meta::relational::mapping::*;
import meta::relational::tests::*;
import meta::pure::mapping::*;
import meta::pure::metamodel::path::*;
import meta::relational::tests::projection::simple::*;

function <<test.BeforePackage>> meta::relational::tests::projection::setUp():Boolean[1]
{
    meta::relational::tests::mapping::join::model::store::createTablesAndFillDb();
    createTablesAndFillDb();
}

function <<test.Test>> meta::relational::tests::projection::simple::testAllOneSimpleProperty():Boolean[1]
{
   let result = execute(|Person.all()->project(p|$p.firstName, 'firstName'), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertEquals('Anthony,David,Fabrice,John,John,Oliver,Peter', $result.values.rows->map(r|$r.values)->sort()->makeString(','));
   assertEquals('select "root".FIRSTNAME as "firstName" from personTable as "root"', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::projection::simple::testAllOneSimplePropertyUsingVariable():Boolean[1]
{
   let p = [#/Person/firstName#];
   let result = execute(|Person.all()->project($p), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertEquals('Anthony,David,Fabrice,John,John,Oliver,Peter', $result.values.rows->map(r|$r.values)->sort()->makeString(','));
   assertEquals('select "root".FIRSTNAME as "firstName" from personTable as "root"', $result->sqlRemoveFormatting());
}


function <<test.Test>> meta::relational::tests::projection::simple::testAllOneSimplePropertyUsingVariables():Boolean[1]
{
   let p = [#/Person/firstName#];
   let n = ['First Name'];
   let result = execute(|Person.all()->project($p, $n), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertEquals('Anthony,David,Fabrice,John,John,Oliver,Peter', $result.values.rows->map(r|$r.values)->sort()->makeString(','));
   assertEquals('select "root".FIRSTNAME as "First Name" from personTable as "root"', $result->sqlRemoveFormatting());
}

// Alloy exclusion reason: 10. Tricky usage of variables
function <<test.Test, test.ExcludeAlloy>> meta::relational::tests::projection::simple::testAllOneSimplePropertyUsingVariables2():Boolean[1]
{
   let result = execute({|
         let p = [#/Person/firstName#];
         let n = ['First Name'];
      
         Person.all()->project($p, $n);
         }, simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertEquals('Anthony,David,Fabrice,John,John,Oliver,Peter', $result.values.rows->map(r|$r.values)->sort()->makeString(','));
   assertEquals('select "root".FIRSTNAME as "First Name" from personTable as "root"', $result->sqlRemoveFormatting());
}

function <<test.ToFix>> meta::relational::tests::projection::simple::testAllOneSimplePropertyUsingVariables3():Boolean[1]
{
   let result = execute({|
         let n = 'First Name';
      
         Person.all()->project(col({p2:Person[1]|$p2.firstName}, $n));
         }, simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertEquals('Anthony,David,Fabrice,John,John,Oliver,Peter', $result.values.rows->map(r|$r.values)->sort()->makeString(','));
   assertEquals('select "root".FIRSTNAME as "First Name" from personTable as "root"', $result->sqlRemoveFormatting());
}




function <<test.Test>> meta::relational::tests::projection::simple::testAllOneSimplePropertyUsingOpenVariables():Boolean[1]
{
   let p = [#/Person/firstName#];
   let result = runQuery($p);
   assertSize($result.values.rows, 7 );
   assertEquals('Anthony,David,Fabrice,John,John,Oliver,Peter', $result.values.rows->map(r|$r.values)->sort()->makeString(','));
   assertEquals('select "root".FIRSTNAME as "firstName" from personTable as "root"', $result->sqlRemoveFormatting());
}

function meta::relational::tests::projection::simple::runQuery(path:Path<Person, String|1>[1]):Result<TabularDataSet|1>[1]
{
   execute(|Person.all()->project($path), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
}

function <<test.Test>> meta::relational::tests::projection::simple::testAllTwoSimpleProperties():Boolean[1]
{
   let result = execute(|Person.all()->project([p|$p.firstName, p|$p.lastName], ['firstName', 'lastName']), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7);
   assertEquals('Allen,Anthony,David,Fabrice,Harris,Hill,Hill,John,John,Johnson,Oliver,Peter,Roberts,Smith', $result.values.rows->map(r|$r.values)->sort()->makeString(','));
   assertEquals('select "root".FIRSTNAME as "firstName", "root".LASTNAME as "lastName" from personTable as "root"', $result->sqlRemoveFormatting());
}



