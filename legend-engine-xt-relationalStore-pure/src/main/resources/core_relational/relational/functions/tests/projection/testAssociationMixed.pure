// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::asserts::*;
import meta::relational::mapping::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::pure::profiles::*;
import meta::pure::metamodel::tds::*;

function <<test.Test>> meta::relational::tests::projection::association::mixed::testAssociationMixed():Boolean[1]
{
   let result = execute(|Person.all()->filter(p | $p.firm.employees->exists(e | $e.firstName == 'Oliver'))->project(#/Person/firm/legalName#), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals(1, $result.values.rows->size());
   assertEquals('Firm B', $result.values.rows->at(0).values);
}

function <<test.Test>> meta::relational::tests::projection::association::mixed::testAssociationMixedAdvanced():Boolean[1]
{
   let result = execute(|Person.all()->filter(p|$p.firm.employees->exists(e|$e.name == 'Peter Smith' && $e.lastName == 'Smith') && $p.firm.legalName == 'Firm X')->project([#/Person/name#, #/Person/firstName#, #/Person/firm/legalName#]), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 4);
   let sortedRows = $result.values.rows->map(a|$a.getString('name')+','+$a.getString('firstName')+','+$a.getString('legalName'))->sort();
   
   assertEquals(['Anthony Allen,Anthony,Firm X'], $sortedRows->at(0));
   assertEquals(['John Hill,John,Firm X'], $sortedRows->at(1));
   assertEquals(['John Johnson,John,Firm X'], $sortedRows->at(2));
   assertEquals(['Peter Smith,Peter,Firm X'], $sortedRows->at(3));
  
   assertSameSQL('select concat("root".FIRSTNAME, \' \', "root".LASTNAME) as "name", "root".FIRSTNAME as "firstName", "firmtable_0".LEGALNAME as "legalName" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID) left outer join (select distinct "persontable_2".FIRMID from personTable as "persontable_2" where (concat("persontable_2".FIRSTNAME, \' \', "persontable_2".LASTNAME) = \'Peter Smith\' and "persontable_2".LASTNAME = \'Smith\')) as "persontable_1" on ("firmtable_0".ID = "persontable_1".FIRMID) where ("persontable_1".FIRMID is not null and "firmtable_0".LEGALNAME = \'Firm X\')', $result);
}
