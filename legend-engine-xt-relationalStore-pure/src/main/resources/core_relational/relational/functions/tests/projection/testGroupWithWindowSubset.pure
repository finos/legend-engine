// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::csv::*;
import meta::relational::mapping::*;
import meta::relational::tests::advanced::contractmoneyscenario::*;
import meta::relational::tests::model::simple::*;

function <<test.Test>> meta::relational::tests::projection::testGroupByWithWindowSubset():Any[*]
{
   meta::relational::tests::advanced::contractmoneyscenario::setUp();
   let ContractMoney = meta::relational::tests::advanced::contractmoneyscenario::ContractMoney;   
   let results = execute(|Contract.all()->groupByWithWindowSubset([
                                                    c |$c.id, 
                                                    c|$c.money.amount ,
                                                    c|$c.money.usdRate(%2003-10-10,NonStandardTenorQualifier.S).rate,   
                                                    c|$c.money.usdValueNoMap(%2003-10-10,NonStandardTenorQualifier.S) 
      
                                                 ] ,
                                                 [
                                                      agg(  g|$g.money.amount, y| $y->sum()) 
                                                     ,agg(  g|$g.money.usdValueNoMap(%2003-10-10,NonStandardTenorQualifier.S), y| $y->average()) 
                                                    
                                                 ]                               
                                                 , [ 'Contract ID' , 'Amount' , 'Rate' , 'Value' , 'Amount-Sum' , 'Rate-Average']                  
                                                 , [ 'Amount'  ]
                                                 ,[ 'Amount-Sum' ]                                                                  
                                                 ) , ContractMoney, testRuntime(), meta::relational::extension::relationalExtensions());
      
   assertEquals( 'select "root".price as "Amount", sum("root".price) as "Amount-Sum" from Contract as "root" group by "Amount"' , $results->sqlRemoveFormatting() ) ;
   assertEquals( $results.values.rows->filter ( x| $x.getFloat('Amount-Sum') == 10.0 )->size() , 1 );
   assertEquals( $results.values.rows->filter ( x| $x.getFloat('Amount-Sum') == 5.75 )->size() , 1 );
      
   let results2 = execute(|Contract.all()->groupByWithWindowSubset([
                                                    c |$c.id, 
                                                    c|$c.money.amount ,
                                                    c|$c.money.usdRate(%2003-10-10,NonStandardTenorQualifier.S).rate,   
                                                    c|$c.money.usdValueNoMap(%2003-10-10,NonStandardTenorQualifier.S) 
      
                                                 ] ,
                                                 [
                                                      agg(  g|$g.money.amount, y| $y->sum()) 
                                                     ,agg(  g|$g.money.usdValueNoMap(%2003-10-10,NonStandardTenorQualifier.S), y| $y->average()) 
                                                    
                                                 ]                               
                                                 , [ 'Contract ID' , 'Amount' , 'Rate' , 'Value' , 'Amount-Sum' , 'Rate-Average']                  
                                                 , [ 'Amount' , 'Rate' ]
                                                 ,[  'Amount-Sum', 'Rate-Average' ]                                                                  
                                                 ) , ContractMoney, testRuntime(), meta::relational::extension::relationalExtensions());

   //check for base table attributes are being selected only 
   assertEquals( 'select "root".price as "Amount", "fx_0".rate as "Rate", sum("root".price) as "Amount-Sum", avg(1.0 * case when "currency_0".value = \'USD\' then "root".price else ("root".price * "fx_0".rate) end) as "Rate-Average" from Contract as "root" left outer join Currency as "currency_0" on ("root".id = "currency_0".contractId) left outer join FX as "fx_0" on ("root".currency = "fx_0".currency and ("fx_0".date = \'2003-10-10\' and "fx_0".tenor = 1)) group by "Amount","Rate"', $results2->sqlRemoveFormatting() );      
   assertEquals( 'Amount | Rate | Amount-Sum | Rate-Average',$results2.values.columns->map(r|$r.name->makeString(','))->makeString(' | ')->cast(@String) );
   

    let results3 = execute(|Contract.all()->groupByWithWindowSubset([
                                                    c |$c.id, 
                                                    c|$c.money.amount ,
                                                    c|$c.money.usdRate(%2003-10-10,NonStandardTenorQualifier.S).rate,   
                                                    c|$c.money.usdValueNoMap(%2003-10-10,NonStandardTenorQualifier.S) 
      
                                                 ] ,
                                                 [
                                                      agg(  g|$g.money.amount, y| $y->sum()) 
                                                     ,agg(  g|$g.money.usdValueNoMap(%2003-10-10,NonStandardTenorQualifier.S), y| $y->average()) 
                                                    
                                                 ]                               
                                                 , [ 'Contract ID' , 'Amount' , 'Rate' , 'Value' , 'Amount-Sum' , 'Rate-Average']                  
                                                 , [  'Rate', 'Amount'  ]
                                                 , ['Rate-Average',  'Amount-Sum'  ]                                                                  
                                                 ) , ContractMoney, testRuntime(), meta::relational::extension::relationalExtensions());

   //check for attributes that are in different order than the input parmeters    
   assertEquals( 'select "fx_0".rate as "Rate", "root".price as "Amount", avg(1.0 * case when "currency_0".value = \'USD\' then "root".price else ("root".price * "fx_0".rate) end) as "Rate-Average", sum("root".price) as "Amount-Sum" from Contract as "root" left outer join Currency as "currency_0" on ("root".id = "currency_0".contractId) left outer join FX as "fx_0" on ("root".currency = "fx_0".currency and ("fx_0".date = \'2003-10-10\' and "fx_0".tenor = 1)) group by "Rate","Amount"', $results3->sqlRemoveFormatting() );
   assertEquals( $results.values.rows->filter ( x| $x.getFloat('Amount-Sum') == 10.0 && $x.getFloat('Amount') == 5.0 )->size() , 1 );
   assertEquals( $results.values.rows->filter ( x| $x.getFloat('Amount-Sum') == 5.75 && $x.getFloat('Amount')== 5.75 )->size() , 1 );
   assertEquals( 'Rate | Amount | Rate-Average | Amount-Sum',$results3.values.columns->map(r|$r.name->makeString(','))->makeString(' | ')->cast(@String) );

}
