// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::mapping::distinct::model::mapping::*;
import meta::relational::tests::mapping::distinct::model::domain::*;
import meta::pure::functions::math::olap::*;
import meta::relational::runtime::*;
import meta::relational::functions::sqlstring::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;

function <<test.Test>>meta::relational::tests::projection::window::testWindowWithSortSingle():Boolean[1]
{
   let func = {|meta::relational::tests::model::simple::Person.all()
      ->project([
         col(p |$p.lastName,'lastName') 
         ,col(window(p |$p.firstName ),sortAsc(p |$p.lastName), func(p |$p.age->toOne(), y| $y->average()),'ageAverageWindow')
      ])};
   let res= toSQLString($func, simpleRelationalMappingInc, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LASTNAME as "lastName", avg(1.0 * "root".AGE) OVER (Partition By "root".FIRSTNAME Order By "root".LASTNAME ASC) as "ageAverageWindow" from personTable as "root"',$res);
}


function <<test.Test>>meta::relational::tests::projection::window::testWindowWithMultiplePartitions():Boolean[1]
{
   let func ={|meta::relational::tests::model::simple::Person.all()
      ->project([
         col(p |$p.lastName,'lastName') 
         ,col(window([p |$p.lastName,p |$p.firstName] ),sortAsc(p |$p.lastName), func(p |$p.age->toOne(), y| $y->average()),'ageAverageMultiplePartitions')
      ])};

   let res= toSQLString($func, simpleRelationalMappingInc, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LASTNAME as "lastName", avg(1.0 * "root".AGE) OVER (Partition By "root".LASTNAME,"root".FIRSTNAME Order By "root".LASTNAME ASC) as "ageAverageMultiplePartitions" from personTable as "root"',$res);
}


function <<test.Test>>meta::relational::tests::projection::window::testwindowWithSortMultiple():Boolean[1]
{
   let func ={|meta::relational::tests::model::simple::Person.all()
      ->project([
         col(p |$p.lastName,'lastName') 
         ,col(window(p |$p.firstName ),sortAsc(p |$p.lastName), func(p |$p.age->toOne(), y| $y->average()),'ageAverageWindow')
         ,col(window(p |$p.manager.lastName->toOne() ),sortDesc(p |$p.manager.firstName->toOne()), func(p |$p.age->toOne(), y| $y->sum()),'ageSumWindow')

      ])};

   let res= toSQLString($func, simpleRelationalMappingInc, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LASTNAME as "lastName", avg(1.0 * "root".AGE) OVER (Partition By "root".FIRSTNAME Order By "root".LASTNAME ASC) as "ageAverageWindow", sum("root".AGE) OVER (Partition By "personTable_d#5_d_m1_d_m2_d_m2".LASTNAME Order By "personTable_d#5_d_m1_d_m2_d_m2".FIRSTNAME DESC) as "ageSumWindow" from personTable as "root" left outer join personTable as "personTable_d#5_d_m1_d_m2_d_m2" on ("root".MANAGERID = "personTable_d#5_d_m1_d_m2_d_m2".ID)',$res);
}

function <<test.Test>>meta::relational::tests::projection::window::testWindowWithoutSortSingle():Boolean[1]
{
   let func ={|meta::relational::tests::model::simple::Person.all()
      ->project([
         col(p |$p.lastName,'lastName') 
         ,col(window(p |$p.firstName ), func(p |$p.age->toOne(), y| $y->average()),'ageWindow')
      ])};
   let res= toSQLString($func, simpleRelationalMappingInc, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LASTNAME as "lastName", avg(1.0 * "root".AGE) OVER (Partition By "root".FIRSTNAME ) as "ageWindow" from personTable as "root"',$res);
}

function <<test.Test>>meta::relational::tests::projection::window::testWindowWithoutSortMultiple():Boolean[1]
{
   let func ={|meta::relational::tests::model::simple::Person.all()
      ->project([
         col(p |$p.lastName,'lastName') 
         ,col(window(p |$p.firstName ), func(p |$p.age->toOne(), y| $y->max()),'ageMaxWindow')
         ,col(window(p |$p.manager.lastName->toOne() ), func(p |$p.age->toOne(), y| $y->sum()),'ageSumWindow')
      ])};
   let res= toSQLString($func, simpleRelationalMappingInc, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LASTNAME as "lastName", max("root".AGE) OVER (Partition By "root".FIRSTNAME ) as "ageMaxWindow", sum("root".AGE) OVER (Partition By "personTable_d#5_d_m1_d_m2_d_m2".LASTNAME ) as "ageSumWindow" from personTable as "root" left outer join personTable as "personTable_d#5_d_m1_d_m2_d_m2" on ("root".MANAGERID = "personTable_d#5_d_m1_d_m2_d_m2".ID)',$res);
}

function <<test.Test>>meta::relational::tests::projection::window::testRankSingle():Boolean[1]
{
   let func ={|meta::relational::tests::model::simple::Person.all()
      ->project([
         col(p |$p.lastName,'lastName') 
         ,col(window(p |$p.firstName ),sortAsc(p|$p.lastName),y | $y->rank(),'ageRankWindow')])
         };

         let res= toSQLString($func, simpleRelationalMappingInc, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
         assertEquals('select "root".LASTNAME as "lastName", rank() OVER (Partition By "root".FIRSTNAME Order By "root".LASTNAME ASC) as "ageRankWindow" from personTable as "root"',$res);
}

function <<test.Test>>meta::relational::tests::projection::window::testRankMultiple():Boolean[1]
{
   let func ={|meta::relational::tests::model::simple::Person.all()
      ->project([
         col(p |$p.lastName,'lastName') 
         ,col(window(p |$p.firstName ),sortAsc(p |$p.lastName), y | $y->rank(),'ageRankWindow1')
         ,col(window(p |$p.manager.lastName->toOne() ),sortDesc(p |$p.lastName), y | $y->rank(),'ageRankWindow2')

      ])};
   let res= toSQLString($func, simpleRelationalMappingInc, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LASTNAME as "lastName", rank() OVER (Partition By "root".FIRSTNAME Order By "root".LASTNAME ASC) as "ageRankWindow1", rank() OVER (Partition By "personTable_d#5_d_m1_d_m2_d_m2".LASTNAME Order By "root".LASTNAME DESC) as "ageRankWindow2" from personTable as "root" left outer join personTable as "personTable_d#5_d_m1_d_m2_d_m2" on ("root".MANAGERID = "personTable_d#5_d_m1_d_m2_d_m2".ID)',$res);
}


function <<test.Test>>meta::relational::tests::projection::window::testDifferentWindowFunctionFamilies():Boolean[1]
{
   let func ={|meta::relational::tests::model::simple::Person.all()
      ->project([
         col(p |$p.lastName,'lastName') 
         ,col(window(p |$p.firstName ),sortAsc(p |$p.lastName), func(p |$p.age->toOne(), y| $y->average()),'ageAverage')
         ,col(window(p |$p.manager.lastName->toOne() ),sortDesc(p |$p.lastName),y | $y->rank(),'lastNameRank')

      ])};

   let res= toSQLString($func, simpleRelationalMappingInc, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LASTNAME as "lastName", avg(1.0 * "root".AGE) OVER (Partition By "root".FIRSTNAME Order By "root".LASTNAME ASC) as "ageAverage", rank() OVER (Partition By "personTable_d#5_d_m1_d_m2_d_m2".LASTNAME Order By "root".LASTNAME DESC) as "lastNameRank" from personTable as "root" left outer join personTable as "personTable_d#5_d_m1_d_m2_d_m2" on ("root".MANAGERID = "personTable_d#5_d_m1_d_m2_d_m2".ID)',$res);
}


function <<test.Test>>meta::relational::tests::projection::window::testWindowwithGroupBy():Boolean[1]
{
   let func ={|Trade.all()
      ->project([
         col(t |$t.quantity, 'cnt')
         ,col(t |$t.product.name, 'prodName')
         , col(window(t |$t.product.name->toOne()),func(t |$t.quantity, y|$y->sum()), 'testWindowwithGroupBy')
      ])
      ->groupBy('prodName', agg('avg', x|$x.getFloat('cnt'), y| $y->average()))};

   let res= toSQLString($func, simpleRelationalMapping, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "productTable_d#5_d#2_m2".NAME as "prodName", avg(1.0 * "root".quantity) as "avg" from tradeTable as "root" left outer join productSchema.productTable as "productTable_d#5_d#2_m2" on ("root".prodId = "productTable_d#5_d#2_m2".ID) group by "prodName"',$res);
}


function <<test.Test>>meta::relational::tests::projection::window::testWindowWithSortAndGroupBy():Boolean[1]
{
   let func ={|meta::relational::tests::model::simple::Trade.all()
      ->project([
         col(t |$t.quantity, 'cnt'),
         col(t |$t.product.name, 'prodName')
         ,col(window(t |$t.product.name->toOne()),sortAsc(t |$t.product.name->toOne()),func(t |$t.quantity, y|$y->sum()), 'testWindowWithSortAndGroupBy')
      ])
      ->groupBy('prodName', agg('avg', x|$x.getFloat('cnt'), y| $y->average()))
      ->sort('prodName', SortDirection.DESC)};

   let res= toSQLString($func, simpleRelationalMapping, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "productTable_d#6_d#3_m2".NAME as "prodName", avg(1.0 * "root".quantity) as "avg" from tradeTable as "root" left outer join productSchema.productTable as "productTable_d#6_d#3_m2" on ("root".prodId = "productTable_d#6_d#3_m2".ID) group by "prodName" order by "prodName" desc',$res);
}

function <<test.Test>>meta::relational::tests::projection::window::testNoPartition():Boolean[1]
{
   let func ={|meta::relational::tests::model::simple::Trade.all()
               ->project([
                    col(t|$t.product.name, 'prodName'),
                    col(sortAsc(t|$t.id),func(t|$t.quantity, y|$y->sum()), 'testWindow')
               ])};
               
   let res= toSQLString($func,simpleRelationalMapping,DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "productTable_d#4_d_m1".NAME as "prodName", sum("root".quantity) OVER (Order By "root".ID ASC) as "testWindow" from tradeTable as "root" left outer join productSchema.productTable as "productTable_d#4_d_m1" on ("root".prodId = "productTable_d#4_d_m1".ID)',$res);   
}

function <<test.Test>>meta::relational::tests::projection::window::testWindowColumnWithTdsDistinct():Boolean[1]
{
   let func ={|meta::relational::tests::model::simple::Trade.all()
               ->project([
                    col(t|$t.product.name, 'prodName'),
                    col(sortAsc(t|$t.id),func(t|$t.quantity, y|$y->sum()), 'testWindow')
               ])->distinct()};
               
   let res= toSQLString($func,simpleRelationalMapping,DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select distinct "productTable_d#5_d#2_m1".NAME as "prodName", sum("root".quantity) OVER (Order By "root".ID ASC) as "testWindow" from tradeTable as "root" left outer join productSchema.productTable as "productTable_d#5_d#2_m1" on ("root".prodId = "productTable_d#5_d#2_m1".ID)',$res);   
}

function <<test.Test>>meta::relational::tests::projection::window::testProjectWithColumnSubSetAndWindowColumn():Boolean[1]
{
   let func = {| Person.all()->projectWithColumnSubset( [ 
                   col(p| $p.firstName , 'first_name'  ),
                   col(p| $p.lastName   , 'last_name'   ),                          
                   col(p|$p.age, 'age'),
                   col(window(p |$p.firstName ),sortAsc(p |$p.lastName), func(p |$p.age->toOne(), y| $y->average()),'ageAverage')
                  ], [ 
                     'first_name' , 
                     'age'
                  ])
               ->filter( x| $x.getString('first_name' ) == 'David' )};   
   let res = toSQLString($func, simpleRelationalMapping,DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals ('select "root".FIRSTNAME as "first_name", "root".AGE as "age", avg(1.0 * "root".AGE) OVER (Partition By "root".FIRSTNAME Order By "root".LASTNAME ASC) as "ageAverage" from personTable as "root" where "root".FIRSTNAME = \'David\'' , $res);

}

function <<test.Test>> meta::relational::tests::projection::window::testDistinctWithWindowColumn():Boolean[1]
{
   let func = {|IncomeFunction.all()->project([col(c|$c.name,'name'),col(sortAsc(c|$c.IfName->toOne()),y|$y->rank(),'name2')])->distinct()}; //, testDataTypeMappingRuntime(),debug())};
   let res = toSQLString($func, testMappingWithJoin, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select distinct "root".IF_NAME as "name", rank() OVER (Order By "IF_OTHER_INFO_d#3_d#3_m3_d#2_m2".IF_OTHER_NAME ASC) as "name2" from (select distinct "_sub_d#2".IF_CODE as IF_CODE, "_sub_d#2".IF_NAME as IF_NAME, "IF_OTHER_INFO_d#3_d#3_m3".IF_OTHER_NAME as IF_OTHER_NAME from ACCOUNT_INFO as "_sub_d#2" left outer join IF_OTHER_INFO as "IF_OTHER_INFO_d#3_d#3_m3" on ("_sub_d#2".IF_CODE = "IF_OTHER_INFO_d#3_d#3_m3".IF_CODE)) as "root" left outer join IF_OTHER_INFO as "IF_OTHER_INFO_d#3_d#3_m3_d#2_m2" on ("root".IF_CODE = "IF_OTHER_INFO_d#3_d#3_m3_d#2_m2".IF_CODE)',$res);
}


function <<test.Test>> meta::relational::tests::projection::window::testUsingWindowAttributeInFilter():Boolean[1]
{     
    let func ={|
      meta::relational::tests::model::simple::Person.all()
      ->project([
         col(x |$x.lastName,'firstName') 
         ,col(window([p |$p.lastName]),sortAsc(p |$p.age->toOne()), y| $y->rank(),'rank_test') 
        

      ])
       ->filter(row | $row.getInteger('rank_test') ==1); 
   };
   
   let res = toSQLString($func, simpleRelationalMappingInc, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LASTNAME as "firstName", "root"."rank_test" as "rank_test" from (select "_subroot".LASTNAME as LASTNAME, rank() OVER (Partition By "_subroot".LASTNAME Order By "_subroot".AGE ASC) as "rank_test" from personTable as "_subroot") as "root" where "root"."rank_test" = 1',$res);
}

function <<test.Test>> meta::relational::tests::projection::window::testQueryWithJoinUsingWindowAttributeInFilter():Boolean[1]
{     
    let func ={|
      meta::relational::tests::model::simple::Person.all()
      ->project([
         col(x |$x.lastName,'firstName') 
         ,col(window([p |$p.lastName ,p|$p.manager.lastName->toOne()]),sortAsc(p |$p.age->toOne()), y| $y->rank(),'rank_test') 
        

      ])
       ->filter(row | $row.getInteger('rank_test') ==1)->filter(row| $row.getInteger('rank_test')==2);
   };
   
   let res = toSQLString($func, simpleRelationalMappingInc, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LASTNAME as "firstName", "root"."rank_test" as "rank_test" from (select "_subroot".LASTNAME as LASTNAME, rank() OVER (Partition By "_subroot".LASTNAME,"personTable_d#7_d#3_m2_d#3_m1_d#3_m2".LASTNAME Order By "_subroot".AGE ASC) as "rank_test" from personTable as "_subroot" left outer join personTable as "personTable_d#7_d#3_m2_d#3_m1_d#3_m2" on ("_subroot".MANAGERID = "personTable_d#7_d#3_m2_d#3_m1_d#3_m2".ID)) as "root" where "root"."rank_test" = 1 and "root"."rank_test" = 2',$res);
}

function <<test.Test>> meta::relational::tests::projection::window::testQueryWithFilterBeforeWindowColInFilter():Boolean[1]
{
   let func ={|
      meta::relational::tests::model::simple::Person.all()
      ->project([
         col(x |$x.lastName,'firstName') 
         ,col(x|$x.manager.firstName ,'managerFirstName')
         ,col(window([p |$p.lastName ,p|$p.manager.lastName->toOne()]),sortAsc(p |$p.age->toOne()), y| $y->rank(),'rank_test') 
      ])
       ->filter(row | $row.getString('firstName') =='Mohammed')
      ->filter(row|$row.getString('managerFirstName')=='Scott')
      ->filter(row| $row.getInteger('rank_test')==2);
   };
   
   let res = toSQLString($func, simpleRelationalMappingInc, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LASTNAME as "firstName", "root".FIRSTNAME as "managerFirstName", "root"."rank_test" as "rank_test" from (select "_subroot".LASTNAME as LASTNAME, "personTable_d#7_d#4_m2".FIRSTNAME as FIRSTNAME, rank() OVER (Partition By "_subroot".LASTNAME,"personTable_d#7_d#4_m2".LASTNAME Order By "_subroot".AGE ASC) as "rank_test" from personTable as "_subroot" left outer join personTable as "personTable_d#7_d#4_m2" on ("_subroot".MANAGERID = "personTable_d#7_d#4_m2".ID) where "_subroot".LASTNAME = \'Mohammed\' and "personTable_d#7_d#4_m2".FIRSTNAME = \'Scott\') as "root" where "root"."rank_test" = 2',$res);
}

function <<test.Test>> meta::relational::tests::projection::window::testDynaFunctionInWindow():Boolean[1]
{
   let func = {|Order.all()->project([col(o|$o.id, 'id'), col(window(o|$o.zeroPnl), sortAsc(o|$o.quantity), y|$y->rank(), 'testCol')]) };
   let result =  toSQLString($func, simpleRelationalMapping, DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".ID as "id", rank() OVER (Partition By case when "orderPnlView_d#2_dy0#2_d_m1_d_m1_d_m2".pnl = 0 then \'true\' else \'false\' end Order By "root".quantity ASC) as "testCol" from orderTable as "root" left outer join (select distinct "root".ORDER_ID as ORDER_ID, "root".pnl as pnl, "accountTable_d#2_dy0#2_l_d#2_dy0#2_m3_r".ID as accountId, "salesPersonTable_d#2_dy0#2_l_d#2_dy0#2_m4_md".NAME as supportContact, "salesPersonTable_d#2_dy0#2_l_d#2_dy0#2_m4_md".PERSON_ID as supportContactId from orderPnlTable as "root" left outer join orderTable as "orderTable_d#2_dy0#2_d#2_dy0#2_m3" on ("root".ORDER_ID = "orderTable_d#2_dy0#2_d#2_dy0#2_m3".ID) left outer join accountTable as "accountTable_d#2_dy0#2_l_d#2_dy0#2_m3_r" on ("orderTable_d#2_dy0#2_d#2_dy0#2_m3".accountID = "accountTable_d#2_dy0#2_l_d#2_dy0#2_m3_r".ID) left outer join salesPersonTable as "salesPersonTable_d#2_dy0#2_l_d#2_dy0#2_m4_md" on ("orderTable_d#2_dy0#2_d#2_dy0#2_m3".accountID = "salesPersonTable_d#2_dy0#2_l_d#2_dy0#2_m4_md".ACCOUNT_ID) where "root".pnl > 0) as "orderPnlView_d#2_dy0#2_d_m1_d_m1_d_m2" on ("orderPnlView_d#2_dy0#2_d_m1_d_m1_d_m2".ORDER_ID = "root".ID)', $result);
}

function <<test.Test>> meta::relational::tests::projection::window::testProjectWindowColumnSnowflake():Boolean[1]
{
   let func = {|
      meta::relational::tests::model::simple::Person.all()
         ->project([
            col(p|$p.lastName, 'lastName'),
            col(window(p|$p.firstName), sortAsc(p|$p.lastName), func(p|$p.age->toOne(), y|$y->average()), 'ageAverageWindow')
         ])
   };
   let result = toSQLString($func, simpleRelationalMappingInc, DatabaseType.Snowflake, meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LASTNAME as "lastName", avg(1.0 * "root".AGE) OVER (Partition By "root".FIRSTNAME Order By "root".LASTNAME ASC) as "ageAverageWindow" from personTable as "root"', $result);
}