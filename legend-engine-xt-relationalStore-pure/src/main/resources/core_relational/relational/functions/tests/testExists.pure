// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::asserts::*;
import meta::relational::functions::asserts::*;
import meta::relational::metamodel::execute::*;
import meta::relational::runtime::*;
import meta::pure::functions::collection::*;
import meta::pure::tds::*;
import meta::relational::mapping::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::relational::tests::mapping::embedded::model::mapping::*;
import meta::relational::tests::mapping::embedded::model::store::*;
import meta::pure::functions::math::*;



function <<test.Test>> meta::relational::tests::query::filter::exists::testExistsToManyProperty():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| $f.employees->exists(e | $e.lastName->toOne() == 'Smith')), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 2);
   assertSameElements(['Firm X', 'Firm C'], $result.values.legalName);
   assertSameSQL( 'select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" where "persontable_1".LASTNAME = \'Smith\') as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".FIRMID is not null', $result);
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testExistsToManyPropertyWithAndFilter():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| 1==1 && $f.employees->exists(e | $e.lastName->toOne() == 'Smith')), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 2);
   assertSameElements(['Firm X', 'Firm C'], $result.values.legalName);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" where "persontable_1".LASTNAME = \'Smith\') as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where (1 = 1 and "persontable_0".FIRMID is not null)', $result);
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testExistsToManyPropertyWithAndFilterAndLiteralConditions():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| $f.employees->exists(e | 1==1 && $e.lastName->toOne() == 'Smith')), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 2);
   assertSameElements(['Firm X', 'Firm C'], $result.values.legalName);
   assertSameSQL( 'select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" where (1 = 1 and "persontable_1".LASTNAME = \'Smith\')) as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".FIRMID is not null', $result);
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testExistsToManyPropertyWithAndFilterAndLiteralConditionsDeep():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| $f.employees.locations->exists(e | 1==1)), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 7);
   assert($result.values.legalName->contains('Firm B'));
   assertFalse($result.values.legalName->contains('No Employees'));
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID) left outer join (select distinct "locationtable_1".PERSONID from locationTable as "locationtable_1" where 1 = 1) as "locationtable_0" on ("persontable_0".ID = "locationtable_0".PERSONID) where "locationtable_0".PERSONID is not null', $result);
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testExistsToManyPropertySwapped():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| $f.employees->exists(e | 'Smith' == $e.lastName->toOne() )), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 2);
   assertSameElements(['Firm X', 'Firm C'], $result.values.legalName);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" where \'Smith\' = "persontable_1".LASTNAME) as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".FIRMID is not null', $result);
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testComplexExistsToManyProperty():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| $f.legalName =='Firm X' && $f.employees->exists(e | $e.lastName->toOne() == 'Smith')), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 1);
   assertEquals('Firm X', $result.values->toOne().legalName);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" where "persontable_1".LASTNAME = \'Smith\') as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where ("root".LEGALNAME = \'Firm X\' and "persontable_0".FIRMID is not null)', $result);
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testComplexOrExistsToManyProperty():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| $f.legalName =='Firm A' || $f.employees->exists(e | $e.lastName->toOne() == 'Smith')), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 3);
   $result.values.legalName->map( f | assert(['Firm X','Firm C','Firm A']->contains($f)));
   
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" where "persontable_1".LASTNAME = \'Smith\') as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where ("root".LEGALNAME = \'Firm A\' or "persontable_0".FIRMID is not null)', $result);
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testNotExists():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f|  ! $f.employees->exists(e | $e.lastName == 'Smith')), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   
   assertSize($result.values, 3);
   assertFalse($result.values.legalName->contains('Firm X'));
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" where "persontable_1".LASTNAME = \'Smith\') as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where not "persontable_0".FIRMID is not null', $result);
}


function <<test.Test>> meta::relational::tests::query::filter::exists::testIn():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| $f.employees.lastName->toOne()->in(['Smith','other name'])), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 2);
   assert($result.values.legalName->contains('Firm X'));
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".LASTNAME in (\'Smith\', \'other name\')', $result);
}


function <<test.Test>> meta::relational::tests::query::filter::exists::testContains():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| ['Smith','other name']->contains($f.employees.lastName->toOne())), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 2);
   assert($result.values.legalName->contains('Firm X'));
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".LASTNAME in (\'Smith\', \'other name\')', $result);
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testInNegated():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| ! $f.employees.lastName->toOne()->in(['Smith','other name'])), simpleRelationalMapping, testRuntime() , meta::relational::extension::relationalExtensions());
   assertSize($result.values, 10);
   assert($result.values.legalName->contains('Firm X'));
   assertSameSQL( 'select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where ("persontable_0".LASTNAME not in (\'Smith\', \'other name\') OR "persontable_0".LASTNAME is null)', $result);
}


function <<test.Test>> meta::relational::tests::query::filter::exists::testContainsNegated():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| ! ['Smith','other name']->contains($f.employees.lastName->toOne())), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 10);
   assert($result.values.legalName->contains('Firm X'));
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where ("persontable_0".LASTNAME not in (\'Smith\', \'other name\') OR "persontable_0".LASTNAME is null)', $result);
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testDupsFilterProject():Boolean[1]
{
   let result1 = execute(|Firm.all()->filter(f| $f.employees->exists(e | $e.lastName->toOne() == 'Smith' || $e.lastName == 'Johnson'))->project([f|$f.legalName,f|$f.isFirmX], ['name','isGS']), simpleRelationalMapping, testRuntime()  , meta::relational::extension::relationalExtensions()).values->at(0);
   println($result1.rows);
   assertEquals(2,  $result1.rows->size());
   assertEquals('Firm X', $result1.rows->first().values->at(0));
}


function <<test.Test>> meta::relational::tests::query::filter::exists::testDupsFilterNoProjection():Boolean[1]
{
   let result1 = execute(|Firm.all()->filter(f| $f.employees->exists(e | $e.lastName->toOne() == 'Smith' || $e.lastName == 'Johnson')), simpleRelationalMapping, testRuntime()  , meta::relational::extension::relationalExtensions());
   println($result1.values);
   assertEquals(2,  $result1.values->size());
   assertEquals('Firm X', $result1.values->first().legalName);
}




function <<test.Test>> meta::relational::tests::mapping::embedded::testExistsWithEmbedded():Boolean[1]
{
   let results = execute(|Firm.all()->filter(f | ! $f.employees->exists(e| $e.lastName == 'Smith'))
                                     ->project([p | $p.legalName],['name'])
                                     ,testMappingEmbeddedWithFirmDistinct, testDataTypeMappingRuntime(), meta::relational::extension::relationalExtensions());
  
  assertEquals(1, $results.values->at(0).rows->size());
  assertEquals('Firm A', $results.values->at(0).rows->first().values);
  assertSameSQL('select "root".FIRM_LEGALNAME as "name" from (select distinct "person_firm_denorm_1".FIRM_LEGALNAME as FIRM_LEGALNAME, "person_firm_denorm_1".FIRM_ID as FIRM_ID from PERSON_FIRM_DENORM as "person_firm_denorm_1" left outer join (select distinct "person_firm_denorm_3".FIRM_ID from PERSON_FIRM_DENORM as "person_firm_denorm_3" where "person_firm_denorm_3".PERSON_LASTNAME = \'Smith\') as "person_firm_denorm_2" on ("person_firm_denorm_1".FIRM_ID = "person_firm_denorm_2".FIRM_ID) where not "person_firm_denorm_2".FIRM_ID is not null) as "root"', $results);
}


function <<test.Test>> meta::relational::tests::mapping::embedded::testExistsWithEmbeddedWithPostProcessor():Boolean[1]
{
   let runtime = testDataTypeMappingRuntime();
   let conn = $runtime.connections->at(0)->cast(@TestDatabaseConnection);
   let runtimeWithPostProcessor = ^$runtime(connections = ^$conn(sqlQueryPostProcessors= [{query:meta::relational::metamodel::relation::SelectSQLQuery[1] | $query->meta::relational::postProcessor::postprocess({rel | $rel}) }]));
   let result = execute(|Firm.all()->filter(f | ! $f.employees->exists(p | $p.firstName == 'John'))->project([p|$p.legalName],['Name']), testMappingEmbeddedWithFirmDistinct, $runtimeWithPostProcessor, meta::relational::extension::relationalExtensions());

   assertSameSQL('select "root".FIRM_LEGALNAME as "Name" from (select distinct "person_firm_denorm_1".FIRM_LEGALNAME as FIRM_LEGALNAME, "person_firm_denorm_1".FIRM_ID as FIRM_ID from PERSON_FIRM_DENORM as "person_firm_denorm_1" left outer join (select distinct "person_firm_denorm_3".FIRM_ID from PERSON_FIRM_DENORM as "person_firm_denorm_3" where "person_firm_denorm_3".PERSON_FIRSTNAME = \'John\') as "person_firm_denorm_2" on ("person_firm_denorm_1".FIRM_ID = "person_firm_denorm_2".FIRM_ID) where not "person_firm_denorm_2".FIRM_ID is not null) as "root"', $result);
}



function <<test.Test>> meta::relational::tests::query::filter::exists::testInExistsCombined():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| $f.employees->exists(e | ['Smith','other name']->contains($e.lastName))), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
    assertSize($result.values, 2);
    assert($result.values.legalName->contains('Firm X'));
 }


function <<test.Test>> meta::relational::tests::query::filter::exists::testWithFilterGroupBy():Boolean[1]
{
   let result = execute(|Person.all()
                               ->filter(p| $p.firm.employees->isNotEmpty())
                               ->project([p | $p.firm.legalName,p | $p.firstName,p | $p.age],['firm','name','age'])
                        ,simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);

   $result.rows->map(r | println($r.values->makeString(',')));
   assertEquals(11,$result.rows->size());
   
   let result1 = execute(|Person.all()
                               ->filter(f| $f.firm.employees->isNotEmpty())
                               ->groupBy([k|$k.firm.legalName],
                                [agg(s|$s.age, t|$t->sum())],
                            ['firm','age sum'])
                            
                               
                 , simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   
      println($result1.rows->map(r| $r.values->makeString(',')));
      assertEquals(4,  $result1.rows->size());
      assertEquals(['firm','age sum'],  $result1.columns.name);
      assertSameElements(['Firm A,34', 'Firm X,149', 'Firm C,70', 'Firm B,67'],  $result1.rows->map(r| $r.values->makeString(','))->sort());

}

function <<test.Test>> meta::relational::tests::query::filter::exists::testWithFilterGroupByNestedAssociation():Boolean[1]
{
   let result = execute(|Person.all()
                               ->filter(p| $p.firm.employees->exists(e| $e.address.name == 'New York'))
                               ->project([p | $p.firstName,p | $p.firm.legalName,p | $p.address.name],['name','firm','address'])
                        ,simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);

   $result.rows->map(r|  println($r.values->makeString(',')));
   assertEquals(10,$result.rows->size());
   
   let result1 = execute(|Person.all()
                               ->filter(f| $f.firm.employees->exists(e| $e.address.name == 'New York'))
                               ->groupBy([k|$k.firm.legalName],
                                [agg(s|$s.age, t|$t->sum())],
                            ['firm','age sum'])
                            
                               
                 , simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   
      println($result1.rows->map(r| $r.values->makeString(',')));
      assertEquals(3,  $result1.rows->size());
      assertEquals(['firm','age sum'],  $result1.columns.name);
      assertSameElements(['Firm X,149', 'Firm C,70', 'Firm B,67'],  $result1.rows->map(r| $r.values->makeString(','))->sort());

}

function <<test.Test>> meta::relational::tests::query::filter::exists::testWithProjectGroupByRemoveDups():Boolean[1]
{
   let result1 = execute(|Firm.all()
                               ->filter(f| $f.employees->exists(e | $e.age > 18))
                               ->project([f|$f.legalName,f|$f.employees.lastName,f|$f.employees.age], ['firm','employee','age'])
                               ->groupBy(['firm'], [ agg('sum age',r|$r.getInteger('age'), c|$c->sum()),
                      	                             agg('max age',r|$r.getInteger('age'), c|$c->max()->toOne())
                               ])
                               
                 , simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   
   println($result1.rows->map(r| $r.values->makeString(',')));
   assertEquals(4,  $result1.rows->size());
   assertEquals(['firm','sum age','max age'],  $result1.columns.name);
   assertSameElements(['Firm A,34,34', 'Firm X,149,35', 'Firm C,70,35', 'Firm B,67,35'],  $result1.rows->map(r| $r.values->makeString(','))->sort());

}

function <<test.Test>> meta::relational::tests::query::filter::exists::testWithProjectGroupByRemoveDupsTwo():Boolean[1]
{
   let result1 = execute(|Firm.all()
                               ->filter(f| $f.employees->exists(e | $e.age > 18))
                               ->project([f|$f.legalName,f|$f.employees.age], ['firm','age'])
                               ->groupBy(['firm'], [ agg('sum age',r|$r.getInteger('age'), c|$c->sum()),
                      	                             agg('max age',r|$r.getInteger('age'), c|$c->max()->toOne())
                               ])
                               
                 , simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions()).values->at(0);
   
   println($result1.rows->map(r| $r.values->makeString(',')));
   assertEquals(4,  $result1.rows->size());
   assertEquals(['firm','sum age','max age'],  $result1.columns.name);
   assertSameElements(['Firm A,34,34', 'Firm X,149,35', 'Firm C,70,35', 'Firm B,67,35'],  $result1.rows->map(r| $r.values->makeString(','))->sort());

}

function <<test.Test>> meta::relational::tests::query::filter::exists::testNestedExistsOne():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| $f.employees->exists(e | $e.locations->isNotEmpty())), 
                        simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
    println($result.values.legalName);
    assertSize($result.values, 4);
    assert($result.values.legalName->contains('Firm B'));
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testNestedNotExists():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| !$f.employees->exists(e | $e.locations->isEmpty())), 
                        simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
    assertSize($result.values, 2);
    assert($result.values.legalName->contains('No Employees'));
}


function <<test.Test>> meta::relational::tests::query::filter::exists::testIsEmptyNested():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| $f.employees.locations->isEmpty()),
                        simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 5);
   assertSameElements(['Firm X', 'Firm X', 'Firm C', 'No Employees', 'Firm B'],$result.values.legalName->sort());
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID) left outer join (select distinct "locationtable_0".PERSONID from firmTable as "root" left outer join personTable as "persontable_1" on ("root".ID = "persontable_1".FIRMID) left outer join locationTable as "locationtable_0" on ("persontable_1".ID = "locationtable_0".PERSONID)) as "firmtable_1" on ("persontable_0".ID = "firmtable_1".PERSONID) where "firmtable_1".PERSONID is null', $result);

}

function <<test.Test>> meta::relational::tests::query::filter::exists::testIsEmpty():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f| $f.employees->isEmpty()),
                        simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_0".FIRMID from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID)) as "firmtable_1" on ("root".ID = "firmtable_1".FIRMID) where "firmtable_1".FIRMID is null', $result);

   assertSize($result.values, 1);
   assertSameElements(['No Employees'],$result.values.legalName->sort());
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_0".FIRMID from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID)) as "firmtable_1" on ("root".ID = "firmtable_1".FIRMID) where "firmtable_1".FIRMID is null', $result);
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testIsNotEmpty():Boolean[1]
{

   let result = execute(|Firm.all()->filter(f| $f.employees.locations->isNotEmpty()),
                        simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
  
    assertSize($result.values.legalName->removeDuplicates(), 4);
    assertSameElements(['Firm A', 'Firm X','Firm B', 'Firm C'],$result.values.legalName->removeDuplicates()->sort());
    assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID) left outer join (select distinct "locationtable_0".PERSONID from firmTable as "root" left outer join personTable as "persontable_1" on ("root".ID = "persontable_1".FIRMID) left outer join locationTable as "locationtable_0" on ("persontable_1".ID = "locationtable_0".PERSONID)) as "firmtable_1" on ("persontable_0".ID = "firmtable_1".PERSONID) where not "firmtable_1".PERSONID is null', $result);
}


function <<test.Test>> meta::relational::tests::query::filter::exists::testAssociationOneLevelDeep():Boolean[1]
{
   let result = execute(|Person.all()->filter(p | $p.firm.employees->exists(e | $e.lastName->toOne() =='Smith'  )), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());

   assertSize($result.values.firstName->removeDuplicates(), 7);
   assertSameElements(['Anthony', 'David', 'Don', 'John', 'John', 'New', 'No address', 'Peter'],$result.values.firstName->sort());
   assertSameSQL('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID) left outer join (select distinct "persontable_2".FIRMID from personTable as "persontable_2" where "persontable_2".LASTNAME = \'Smith\') as "persontable_1" on ("firmtable_0".ID = "persontable_1".FIRMID) where "persontable_1".FIRMID is not null', $result);
  
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testAssociationTwoLevelDeep():Boolean[1]
{
   let result = execute(|Person.all()->filter(p | $p.firm.employees->exists(e | $e.address.name == 'Hong Kong')), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values->removeDuplicates(), 2);
   assertEquals('Oliver,Elena', $result.values->removeDuplicates().firstName->makeString(','));
   assertSameSQL('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID) left outer join (select distinct "persontable_2".FIRMID from personTable as "persontable_2" left outer join addressTable as "addresstable_0" on ("addresstable_0".ID = "persontable_2".ADDRESSID) where "addresstable_0".NAME = \'Hong Kong\') as "persontable_1" on ("firmtable_0".ID = "persontable_1".FIRMID) where "persontable_1".FIRMID is not null', $result);
  
   let result2 = execute(|Person.all()->filter(p | $p.firm.employees->exists(e | $e.address.name == 'Hoboken')), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result2.values, 6);
   assertEquals('Anthony, Don, John, John, New, Peter', $result2.values.firstName->sort()->makeString(', '));
   assertSameSQL('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID) left outer join (select distinct "persontable_2".FIRMID from personTable as "persontable_2" left outer join addressTable as "addresstable_0" on ("addresstable_0".ID = "persontable_2".ADDRESSID) where "addresstable_0".NAME = \'Hoboken\') as "persontable_1" on ("firmtable_0".ID = "persontable_1".FIRMID) where "persontable_1".FIRMID is not null', $result2);
}


function <<test.Test>> meta::relational::tests::query::filter::exists::testAssociationThreeLevelDeep():Boolean[1]
{
   let result = execute(|Firm.all()->filter(p | $p.employees->exists(e | $e.locations.placeOfInterest.name == 'Hoboken City Hall')), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values->removeDuplicates(), 1);
   assertEquals('Firm X', $result.values->removeDuplicates()->toOne().legalName);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" left outer join locationTable as "locationtable_0" on ("persontable_1".ID = "locationtable_0".PERSONID) left outer join placeOfInterestTable as "placeofinteresttable_0" on ("locationtable_0".ID = "placeofinteresttable_0".locationID) where "placeofinteresttable_0".NAME = \'Hoboken City Hall\') as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".FIRMID is not null', $result);
  
 }

function <<test.Test>> meta::relational::tests::query::filter::exists::testAssociationHandlingDups():Boolean[1]
{
   let result = execute(|Firm.all()->filter(p | $p.employees->exists(e | $e.locations.placeOfInterest.name == 'Broadway')), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 1);
   assertEquals('Firm X', $result.values->toOne().legalName);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" left outer join locationTable as "locationtable_0" on ("persontable_1".ID = "locationtable_0".PERSONID) left outer join placeOfInterestTable as "placeofinteresttable_0" on ("locationtable_0".ID = "placeofinteresttable_0".locationID) where "placeofinteresttable_0".NAME = \'Broadway\') as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".FIRMID is not null', $result);
  
 }

function <<test.Test>> meta::relational::tests::query::filter::exists::testAssociationWithProjectionHandlingDups():Boolean[1]
{
   let result = execute(|Person.all()
                              ->filter(p | $p.firm.employees->exists(e | $e.locations.placeOfInterest.name == 'Broadway'))
                              ->project([f|$f.firm.legalName], ['firm'])           
                       , simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let results = $result.values->at(0);
   assertSize($results.rows, 6);
   assertSameElements(['Firm X'],  $results.rows->map(r| $r.values->makeString(','))->sort()->removeDuplicates());
   assertSameSQL('select "firmtable_0".LEGALNAME as "firm" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID) left outer join (select distinct "persontable_2".FIRMID from personTable as "persontable_2" left outer join locationTable as "locationtable_0" on ("persontable_2".ID = "locationtable_0".PERSONID) left outer join placeOfInterestTable as "placeofinteresttable_0" on ("locationtable_0".ID = "placeofinteresttable_0".locationID) where "placeofinteresttable_0".NAME = \'Broadway\') as "persontable_1" on ("firmtable_0".ID = "persontable_1".FIRMID) where "persontable_1".FIRMID is not null', $result);
  
}
 
function <<test.Test>> meta::relational::tests::query::filter::exists::testExistsInAbstractProperty():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f | $f.hasEmployeeBelowAge(15)),simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let results = $result.values;
   assertSize($results, 1);
   assertSameElements(['Firm X'],  $results.legalName->sort());
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" where "persontable_1".AGE < 15) as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".FIRMID is not null', $result);
  
}
 
function <<test.Test>> meta::relational::tests::query::filter::exists::testNestedExistsWithExistsInAbstractProperty():Boolean[1]
{
   let result = execute(|Firm.all()->filter(f | exists($f.employees,e| $e.firm->toOne().hasEmployeeBelowAge(15))),simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let results = $result.values;
   assertSize($results, 1);
   assertSameElements(['Firm X'],  $results.legalName->sort());
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" left outer join firmTable as "firmtable_1" on ("firmtable_1".ID = "persontable_1".FIRMID) left outer join (select distinct "persontable_3".FIRMID from personTable as "persontable_3" where "persontable_3".AGE < 15) as "persontable_2" on ("firmtable_1".ID = "persontable_2".FIRMID) where "persontable_2".FIRMID is not null) as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".FIRMID is not null', $result);
  
}
 
function <<test.Test>> meta::relational::tests::query::filter::exists::testExistsWithOrCondition():Boolean[1]
{
   let result = execute(|Person.all()->filter(p | $p.firm.employees->exists(e| $e.age >= 35 || $e.locations.placeOfInterest.name == 'Hoboken Town Hall')),simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let results = $result.values;
   assertSize($results, 10);
   assertSameElements(['Allen', 'Hill', 'Smith', 'Johnson', 'Harris', 'New York', 'Firm B', 'Smith', 'Hill', 'York'],  $results.lastName->sort());
   assertSameSQL('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID) left outer join (select distinct "persontable_2".FIRMID from personTable as "persontable_2" left outer join locationTable as "locationtable_0" on ("persontable_2".ID = "locationtable_0".PERSONID) left outer join placeOfInterestTable as "placeofinteresttable_0" on ("locationtable_0".ID = "placeofinteresttable_0".locationID) where (("persontable_2".AGE is not null and "persontable_2".AGE >= 35) or "placeofinteresttable_0".NAME = \'Hoboken Town Hall\')) as "persontable_1" on ("firmtable_0".ID = "persontable_1".FIRMID) where "persontable_1".FIRMID is not null', $result); 
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testExistsWithAttributesFromLeftInAndCondition():Boolean[1]
{
   let result = execute(|Person.all()->filter(p | $p.firm.employees->exists(e| $e.age >= 35 && $p.name !='Smith')),simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let results = $result.values;
   assertSize($results, 10);
   assertSameElements(['Allen', 'Hill', 'Smith', 'Johnson', 'Harris', 'New York', 'Firm B', 'Smith', 'Hill', 'York'],  $results.lastName->sort());
   assertSameSQL('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID) left outer join (select distinct "persontable_2".FIRMID from personTable as "persontable_2" where (("persontable_2".AGE is not null and "persontable_2".AGE >= 35) and (concat("persontable_2".FIRSTNAME, \' \', "persontable_2".LASTNAME) <> \'Smith\' OR concat("persontable_2".FIRSTNAME, \' \', "persontable_2".LASTNAME) is null))) as "persontable_1" on ("firmtable_0".ID = "persontable_1".FIRMID) where "persontable_1".FIRMID is not null', $result);
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testExistsWithAttributesFromLeftInOrCondition():Boolean[1]
{
   let result = execute(|Person.all()->filter(p | $p.firm.employees->exists(e| $e.age >= 35 || $p.lastName =='Smith')),simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   let results = $result.values;
   assertSize($results, 10);
   assertSameElements(['Allen', 'Hill', 'Smith', 'Johnson', 'Harris', 'New York', 'Firm B', 'Smith', 'Hill', 'York'],  $results.lastName->sort());
   assertSameSQL( 'select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID) left outer join (select distinct "persontable_2".FIRMID from personTable as "persontable_2" where (("persontable_2".AGE is not null and "persontable_2".AGE >= 35) or "persontable_2".LASTNAME = \'Smith\')) as "persontable_1" on ("firmtable_0".ID = "persontable_1".FIRMID) where "persontable_1".FIRMID is not null', $result);
}

function <<test.ToFix>> meta::relational::tests::query::filter::exists::testFilterFunctionExpressionWithConditionOnRightTableExistsExpression():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| $f.employees->filter(e|$e.lastName != 'Lopez')->exists(x| $x.age >20) )  , simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,4);
   //SQL does not contain condition in filter
   sqlContains( 'LASTNAME <> \'Lopez\'',$result1); 
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testFilterFunctionExpressionWithConditionOnRightTableIsEmptyExpression():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| $f.employees->filter(e|$e.lastName == 'Smith')->isEmpty()),simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,3);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_0".FIRMID from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where "persontable_0".LASTNAME = \'Smith\') as "firmtable_1" on ("root".ID = "firmtable_1".FIRMID) where "firmtable_1".FIRMID is null', $result1);
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testFilterFunctionExpressionWithAndConditionOnRightTableIsEmptyExpression():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| $f.employees->filter(e|$e.lastName == 'Smith' && ($e.age > 20))->isEmpty()),simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,3);
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_0".FIRMID from firmTable as "root" left outer join personTable as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where ("persontable_0".LASTNAME = \'Smith\' and ("persontable_0".AGE is not null and "persontable_0".AGE > 20))) as "firmtable_1" on ("root".ID = "firmtable_1".FIRMID) where "firmtable_1".FIRMID is null', $result1);
}

function <<test.Test>> meta::relational::tests::query::filter::exists::testFilterAfterFilterWithExistsExpression():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(f| $f.legalName!='Firm B' && $f.employees->exists( x | $x.age > 30)),simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   
   assertSize($result1.values,3);
   
   assertSameSQL('select "root".ID as "pk_0", "root".LEGALNAME as "legalName" from firmTable as "root" left outer join (select distinct "persontable_1".FIRMID from personTable as "persontable_1" where ("persontable_1".AGE is not null and "persontable_1".AGE > 30)) as "persontable_0" on ("root".ID = "persontable_0".FIRMID) where (("root".LEGALNAME <> \'Firm B\' OR "root".LEGALNAME is null) and "persontable_0".FIRMID is not null)', $result1);
}

function <<test.ToFix>> meta::relational::tests::query::filter::exists::testFilterAfterFilterFunctionExpressionWithAndConditionOnRightTableIsEmptyExpression():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(x| $x.legalName!='Firm B')
                         ->filter(f| $f.employees->filter(e|$e.lastName == 'Smith')->exists( x | $x.age > 20)),simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,3);
   
  //SQL does not contain condition in filter
   sqlContains( 'LASTNAME = \'Smith\'',$result1);
}

function <<test.ToFix>> meta::relational::tests::query::filter::exists::testFilterWithNestedNotExists():Boolean[1]
{
   let result1 = execute(|Account.all()
                         ->filter(a | $a.name == 'Unknown')
                         ->filter(b| !$b.trades->exists(t | 1==1))
                         ->filter(c| !$c.trades->exists(t|!$t.events->exists(e| 1==1)))
                         ->project(col(a | $a.name, 'Acct Name'))
                         , simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   
   //missing join to trade event table
   assertSameSQL('select "root".name as "Acct Name" from accountTable as "root" left outer join (select distinct "tradeTable_d#6".accountID from tradeTable as "tradeTable_d#6" where 1 = 1) as "tradeTable_d#6_ecq_d#3_m1" on ("tradeTable_d#6_ecq_d#3_m1".accountID = "root".ID) where not "tradeTable_d#6_ecq_d#3_m1".accountID is not null and not "tradeTable_d#6_ecq_d#3_m1".accountID is not null and "root".name = \'Unknown\'',$result1); 
   assertSize($result1.values,1);

}

function <<test.ToFix>> meta::relational::tests::query::filter::exists::testFilterWithNestedNotExistsFilterInlined():Boolean[1]
{
   let result1 = execute(|Account.all()
                         ->filter(a | $a.name == 'Unknown' && !$a.trades->exists(t | 1==1) && !$a.trades->exists(t|!$t.events->exists(e| 1==1)))
                         ->project(col(a | $a.name, 'Acct Name'))
                         , simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   
   //missing join to trade event table
   assertSameSQL('select "root".name as "Acct Name" from accountTable as "root" left outer join (select distinct "tradeTable_d#6".accountID from tradeTable as "tradeTable_d#6" where 1 = 1) as "tradeTable_d#6_ecq_d#3_m1" on ("tradeTable_d#6_ecq_d#3_m1".accountID = "root".ID) where not "tradeTable_d#6_ecq_d#3_m1".accountID is not null and not "tradeTable_d#6_ecq_d#3_m1".accountID is not null and "root".name = \'Unknown\'',$result1); 
   assertSize($result1.values,1);

}

function <<test.ToFix>> meta::relational::tests::query::filter::exists::testFilterAfterFilterWithNestedExists():Boolean[1]
{
   let result1 = execute(|Firm.all()
                         ->filter(x| $x.legalName!='Firm B')
                         ->filter(f| $f.employees->filter(e|$e.firstName != 'Don')->exists(e| $e.lastName == 'Smith' && $e.address->exists(e| 1==1))), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result1.values,1);
     //SQL does not contain condition in filter
   sqlContains( 'FIRSTNAME <> \'Don\'',$result1); 

}

// Alloy exclusion reason: 13. The scanner doesn't serialize the right store (scan only mainTables)
function <<test.Test, test.ExcludeAlloy>> meta::relational::tests::query::filter::exists::testExistsForDataType():Boolean[1]
{
   let result = execute(|Person.all()->filter(p|$p.otherNames->exists(o|$o == 'abc'))->project([p|$p.firstName],['firstName']), PersonOtherNamesMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values, 1);
   assertSize($result.values->at(0).rows, 1);
   assertEquals('Peter', $result.values->at(0).rows->at(0).getString('firstName'));
   assertSameSQL('select "root".FIRSTNAME as "firstName" from personTable as "root" left outer join (select distinct "othernamestable_1".PERSON_ID from otherNamesTable as "othernamestable_1" where "othernamestable_1".OTHER_NAME = \'abc\') as "othernamestable_0" on ("root".ID = "othernamestable_0".PERSON_ID) where "othernamestable_0".PERSON_ID is not null', $result);
}

function <<test.ToFix>> meta::relational::tests::query::filter::exists::testMultipleExistsOnSameProperty():Boolean[1]
{
   let result1 = execute(
      |Firm.all()->filter(f|$f.employees->exists(e|$e.firstName == 'Peter'))->project(col(x|$x.legalName, 'name')),
      simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions()
   );
   assertEquals('name\nFirm X\n', $result1.values->meta::relational::tests::csv::toCSV());

   let result2 = execute(
      |Firm.all()->filter(f|$f.employees->exists(e|$e.lastName == 'Harris'))->project(col(x|$x.legalName, 'name')),
      simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions()
   );
   assertEquals('name\nFirm C\n', $result2.values->meta::relational::tests::csv::toCSV());

   let result3 = execute(
      |Firm.all()->filter(f|$f.employees->exists(e|$e.firstName == 'Peter') || $f.employees->exists(e|$e.lastName == 'Harris'))->project(col(x|$x.legalName, 'name')),
      simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions()
   );
   assertEquals('name\nFirm X\nFirm C\n', $result3.values->meta::relational::tests::csv::toCSV());
}