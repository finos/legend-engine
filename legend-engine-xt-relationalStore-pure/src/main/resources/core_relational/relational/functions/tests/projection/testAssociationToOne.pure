// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::mapping::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::pure::profiles::*;
import meta::pure::metamodel::tds::*;

function <<test.Test>> meta::relational::tests::projection::association::toOne::testAssociationToOne():Boolean[1]
{
   let result = execute(|Person.all()->project([#/Person/firstName#, #/Person/firm/legalName#]), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7);
   assertEquals('Anthony,David,Fabrice,Firm A,Firm B,Firm C,Firm X,Firm X,Firm X,Firm X,John,John,Oliver,Peter', $result.values.rows->map(r|$r.values)->sort()->makeString(','));
   assertEquals('select "root".FIRSTNAME as "firstName", "firmtable_0".LEGALNAME as "legalName" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID)', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::projection::association::toOne::testAssociationToOneWithQuery():Boolean[1]
{
   let result = execute(|Person.all()->filter(p|$p.firm.legalName == 'Firm X')->project([#/Person/firstName#, #/Person/firm/legalName#]), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 4);
   assertEquals('Anthony,Firm X,Firm X,Firm X,Firm X,John,John,Peter', $result.values.rows->map(r|$r.values)->sort()->makeString(','));
   assertEquals('select "root".FIRSTNAME as "firstName", "firmtable_0".LEGALNAME as "legalName" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID) where "firmtable_0".LEGALNAME = \'Firm X\'', $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::projection::association::toOne::testTwoAssociationsToOneBranchWithQuery():Boolean[1]
{
   let result = execute(|Person.all()->filter(p|$p.firm->toOne().legalName == 'Firm X' && $p.address->toOne().name == 'Hoboken')->project([#/Person/lastName#, #/Person/firm/legalName#, #/Person/address/name#]), simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values->at(0), 1);
   assertEquals(['Smith', 'Firm X', 'Hoboken'], $result.values->toOne().rows.values);
   assertEquals('select "root".LASTNAME as "lastName", "firmtable_0".LEGALNAME as "legalName", "addresstable_0".NAME as "name" from personTable as "root" left outer join firmTable as "firmtable_0" on ("firmtable_0".ID = "root".FIRMID) left outer join addressTable as "addresstable_0" on ("addresstable_0".ID = "root".ADDRESSID) where ("firmtable_0".LEGALNAME = \'Firm X\' and "addresstable_0".NAME = \'Hoboken\')', $result->sqlRemoveFormatting());
}
