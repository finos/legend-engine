// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Press F9 to execute the 'go' function...
// Press F10 to run the full test suite

import meta::pure::extension::*;
import meta::pure::router::preeval::*;
import meta::pure::router::preeval::tests::*;
import meta::external::shared::format::binding::*;
import meta::external::shared::format::functions::*;
import meta::json::*;
import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::valueSpecification::*;
import meta::protocols::pure::vX_X_X::transformation::toPureGrammar::*;
import apps::protocols::tds::preeval::router::tests::prerouting::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::test::simple::*;
import meta::pure::mapping::modelToModel::test::shared::dest::*;
import meta::pure::mapping::modelToModel::test::shared::src::*;
import meta::pure::runtime::*;

function <<test.Test>> meta::pure::router::preeval::tests::testPrerouting41():Boolean[1]
{
  let runtime = ^Runtime();
  let context = ^ExecutionContext();

  let input = {|
       meta::pure::router::preeval::tests::Person.all()
	      ->project([
             col({p:meta::pure::router::preeval::tests::Person[1]|$p.firstName}, 'firstName')
          ])->from(meta::relational::tests::simpleRelationalMapping, $runtime, $context)->join(
               meta::pure::router::preeval::tests::Person.all()
	            ->project([
                   col({p:meta::pure::router::preeval::tests::Person[1]|$p.firstName}, 'firstName')
                ])->from(meta::relational::tests::simpleRelationalMapping, $runtime),
               meta::relational::metamodel::join::JoinType.LEFT_OUTER, 'firstName')
      };

  let expected = {|
       meta::pure::router::preeval::tests::Person.all()
	      ->project([
             ^BasicColumnSpecification<meta::pure::router::preeval::tests::Person>(name = 'firstName', func = {p:meta::pure::router::preeval::tests::Person[1]|$p.firstName})
          ])->from(meta::relational::tests::simpleRelationalMapping, $runtime, $context)->join(
               meta::pure::router::preeval::tests::Person.all()
	            ->project([
                   ^BasicColumnSpecification<meta::pure::router::preeval::tests::Person>(name = 'firstName', func = {p:meta::pure::router::preeval::tests::Person[1]|$p.firstName})
                ])->from(meta::relational::tests::simpleRelationalMapping, $runtime),
               meta::relational::metamodel::join::JoinType.LEFT_OUTER, 'firstName', 'firstName')
      };

  assertRoundTrip($input, $expected);
}

function <<test.Test>> meta::pure::router::preeval::tests::testPrerouting42():Boolean[1]
{
  let runtime = ^Runtime();
   
  let input = {name:String[1]|
    let person = meta::pure::router::preeval::tests::Person.all()->toOne()->graphFetch(
        #{
            meta::pure::router::preeval::tests::Person{
                firstName
            }
        }#
    );
       
    let person2 = meta::pure::router::preeval::tests::Person.all()->toOne()->graphFetch(
        #{
            meta::pure::router::preeval::tests::Person{
                firstName
            }
        }#
    )->from(meta::relational::tests::simpleRelationalMapping, $runtime);
       
    meta::pure::router::preeval::tests::Person.all()
       ->filter(x | ($x.firstName == $person.firstName) || ($x.firstName == $name) || $x.firstName == $person2.firstName)
       ->project([
          col({p:meta::pure::router::preeval::tests::Person[1]|$p.firstName}, 'firstName'),
          col({p:meta::pure::router::preeval::tests::Person[1]|$p.lastName}, 'lastName'),
          col({p:meta::pure::router::preeval::tests::Person[1]|$p.age}, 'age'),
          col({p:meta::pure::router::preeval::tests::Person[1]|today()}, 'today')
       ]);
  };

  let expected = {name:String[1]|
      
        let person = meta::pure::router::preeval::tests::Person.all()->toOne()->graphFetch(
            #{
                meta::pure::router::preeval::tests::Person{
                    firstName
                }
            }#
        );  
      
        let person2 = meta::pure::router::preeval::tests::Person.all()->toOne()->graphFetch(
            #{
                meta::pure::router::preeval::tests::Person{
                    firstName
                }
            }#
        )->from(meta::relational::tests::simpleRelationalMapping, $runtime);


        meta::pure::router::preeval::tests::Person.all()
          ->filter(x | ($x.firstName == $person.firstName) || ($x.firstName == $name) || $x.firstName == $person2.firstName)
          ->project([
              ^BasicColumnSpecification<meta::pure::router::preeval::tests::Person>(name = 'firstName', func = {p:meta::pure::router::preeval::tests::Person[1]|$p.firstName}),
              ^BasicColumnSpecification<meta::pure::router::preeval::tests::Person>(name = 'lastName', func = {p:meta::pure::router::preeval::tests::Person[1]|$p.lastName}),
              ^BasicColumnSpecification<meta::pure::router::preeval::tests::Person>(name = 'age', func = {p:meta::pure::router::preeval::tests::Person[1]|$p.age}),
              ^BasicColumnSpecification<meta::pure::router::preeval::tests::Person>(name = 'today', func = {p:meta::pure::router::preeval::tests::Person[1]|today()})
            ]);
    };

  assertRoundTrip($input, $expected, noDebug());
}

function <<test.Test>> meta::pure::router::preeval::tests::testPrerouting_Store():Boolean[1]
{
  let input = {| meta::relational::tests::db};
  let expected = {| meta::relational::tests::db};
  assertRoundTrip($input, $expected);
}