// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::router::routing::*;
import meta::relational::metamodel::operation::*;
import meta::relational::metamodel::join::*;
import meta::pure::lineage::scanProperties::*;
import meta::relational::metamodel::relation::*;
import meta::relational::mapping::*;
import meta::pure::lineage::scanColumns::*;
import meta::pure::mapping::*;
import meta::pure::lineage::scanProperties::propertyTree::*;
import meta::relational::metamodel::*;

function meta::pure::lineage::scanColumns::scanColumns(p:PropertyPathTree[1], m:Mapping[1]):ColumnWithContext[*]
{
   $p->scanColumns($m, ^Map<Class<Any>, List<InstanceSetImplementation>>(), ^Map<String, List<SetImplementation>>()).colRes.columns;
}

function meta::pure::lineage::scanColumns::scanColumns(p:PropertyPathTree[1], m:Mapping[1], classToSets: Map<Class<Any>, List<InstanceSetImplementation>>[1], idToSet: Map<String, List<SetImplementation>>[1]):ColResWithState[*]
{
   $p->scanColumns($m, [], $classToSets, $idToSet, true, noDebug());
}

Class meta::pure::lineage::scanColumns::ColumnWithContext
{
   <<equality.Key>> column: Column[1];
   <<equality.Key>> context: String[1];
}

Class meta::pure::lineage::scanColumns::ColRes
{
   columns : ColumnWithContext[*];
   sets : SetImplementation[*];
}

Class meta::pure::lineage::scanColumns::ColResWithState
{
   colRes: ColRes[*];
   classToSets: Map<Class<Any>, List<InstanceSetImplementation>>[1];
   idToSet: Map<String, List<SetImplementation>>[1];
}

function <<access.private>> meta::pure::lineage::scanColumns::scanColumns(p:PropertyPathTree[1], m:Mapping[1], sets:SetImplementation[*], classToSets: Map<Class<Any>, List<InstanceSetImplementation>>[1], idToSet: Map<String,List<SetImplementation>>[1], isRoot:Boolean[1], debug:DebugContext[1]):ColResWithState[*]
{
    print(if($debug.debug,|$debug.space+'sets: '+$sets.id->joinStrings(',')+'\n',|''));
    $p.value->match([
                     pr:PropertyPathNode[1]|
                          let possiblePropertyTargetClasses = $p.children.value->map(vv|$vv->match([
                             v:PropertyPathNode[1]|$v.class,
                             o:Any[1]|[];
                          ]))->removeDuplicates();
                          let nsets = $sets->filter(s|$s->instanceOf(PropertyMappingsImplementation))->cast(@PropertyMappingsImplementation);
                          $pr.property->match([
                             sp:Property<Nil,Any|*>[1]|

                                      print(if($debug.debug,|$debug.space+'Process Property:'+$pr.property.name->toOne()+'\n',|''));
                                      let propertyMappings = $nsets->map(s|$s->_propertyMappingsByPropertyName($pr.property.name->toOne()));
                                      print(if($debug.debug,|$debug.space + 'property mappings:'+$propertyMappings->map(pm|$pm.sourceSetImplementationId+' -> '+$pm.targetSetImplementationId)->joinStrings('\n                    '+$debug.space)+'\n',|''));
                                      let isDataTypeProperty = !$pr.property.genericType.rawType->isEmpty() && $pr.property.genericType.rawType->toOne()->instanceOf(DataType);

                                      if ($isDataTypeProperty,
                                          | ^ColResWithState(colRes=^ColRes(columns = $propertyMappings
                                                                            ->filter(pm|$pm->instanceOf(RelationalPropertyMapping))
                                                                            ->cast(@RelationalPropertyMapping)->map(pm|$pm->getColumns()), sets=$sets),
                                                             classToSets=$classToSets,
                                                             idToSet=$idToSet);,
                                          | $propertyMappings->fold({pm, state|meta::pure::lineage::scanColumns::processNonDataTypeProperty($p, $pm, $possiblePropertyTargetClasses, $m, $state, ^$debug(space=$debug.space+'    '))},
                                                                ^meta::pure::lineage::scanColumns::ColResWithState(classToSets=$classToSets, idToSet=$idToSet));
                                      );,
                             q:QualifiedProperty<Any>[1]|
                                      print(if($debug.debug,|$debug.space+'Process Qualifier:'+$pr.property.name->toOne()+'\n',|''));
                                      if($q->meta::pure::milestoning::hasGeneratedMilestoningPropertyStereotype(),
                                                            | let propertyMappings = $nsets->map(s|$s->_propertyMappingsByPropertyName($pr.property.functionName->toOne()+'AllVersions'));
                                                              $propertyMappings->fold({pm,state|processNonDataTypeProperty($p, $pm, $possiblePropertyTargetClasses, $m, $state, $debug)},
                                                                        ^meta::pure::lineage::scanColumns::ColResWithState(classToSets=$classToSets, idToSet=$idToSet));,
                                                            | let afterQualifier = $p.qualifierSubTree->toOne()->scanColumns($m, $sets, $classToSets, $idToSet, false, $debug);
                                         $p.children->map(x|$x->scanColumns($m, $afterQualifier.colRes.sets, $classToSets, $idToSet, false, ^$debug(space=$debug.space+'    ')))
                                              ->concatenate($afterQualifier););
                          ]);
                          ,
                     cl: Class<Any>[1]|
                         print(if($debug.debug,|$debug.space+'Process Class: '+$cl.name->toOne()+'\n',|''));
                          if($isRoot,
                             |
                                let nClassToSets = if($classToSets->keys()->contains($cl), |$classToSets, | $classToSets->keyValues()->concatenate(pair($cl, list($m->_classMappingByClass($cl)->map(s|$s->resolveOperation($m)))))->newMap());
                                let nsets = $nClassToSets->get($cl).values;
                                $p.children->map(c|$c->scanColumns($m, $sets->concatenate($nsets)->removeDuplicates({a,b|$a.id == $b.id}), $nClassToSets, $idToSet, false, ^$debug(space=$debug.space+'    ')));,
                             |
                                $p.children->map(c|$c->scanColumns($m, $sets, $classToSets, $idToSet, false, ^$debug(space=$debug.space+'    '))););,
                     a :Any[1]|
                         print(if($debug.debug,|$debug.space+'Process Any\n',|''));
                         $p.children->map(c|$c->scanColumns($m, $sets, $classToSets, $idToSet, $isRoot, ^$debug(space=$debug.space+'    ')));
                   ]);
}

function <<access.private>> meta::pure::lineage::scanColumns::processNonDataTypeProperty(p:PropertyPathTree[1], pm: PropertyMapping[1], possiblePropertyTargetClasses: Class<Any>[*], m:Mapping[1],
                                                                                         state: ColResWithState[1],
                                                                                         debug:DebugContext[1]): ColResWithState[1]
{
   let targetSetImplementationId = $pm->match([
      i: InlineEmbeddedRelationalInstanceSetImplementation[1]|
      $m->allSubSetImplementationIds($i.inlineSetImplementationId)->removeDuplicates(),
      p:PropertyMapping[1]|
      let targetSiId = $p.targetSetImplementationId;
      let nIdToSet = $targetSiId->fold({sid,res|if($res->keys()->contains($sid), |$res ,|$res->keyValues()->concatenate(pair($sid,list($m->classMappingById($sid))))->newMap())}, $state.idToSet);
      let targetClass = $nIdToSet->get($targetSiId).values.class;

      if ($targetClass->isNotEmpty() && $possiblePropertyTargetClasses->isNotEmpty() && !$possiblePropertyTargetClasses->exists(c|$targetClass->toOne()->_subTypeOf($c)),
          | if($possiblePropertyTargetClasses->exists(c|$c->_subTypeOf($targetClass->toOne())),
               |$m->_classMappingByClass($possiblePropertyTargetClasses->filter(c|$c->_subTypeOf($targetClass->toOne()))->toOne())->map(s|$s->resolveOperation($m)).id, |[]),
      | $targetSiId;);
                                           ]);

   let potentialColumnsFromJoin = $pm->match([
      r:RelationalPropertyMapping[1]|
      if($targetSetImplementationId->contains($r.targetSetImplementationId),
         | $r->getColumns(),
         | []),
      a:Any[1]|[]
   ]);

   let nIdToSet = $targetSetImplementationId->fold({sid,res|if($res->keys()->contains($sid), |$res ,|$res->keyValues()->concatenate(pair($sid,list($m->classMappingById($sid))))->newMap())}, $state.idToSet);

   let columnsFromChildren = meta::pure::lineage::scanColumns::manageQualifiers($p.children, [])
   ->map(c|$c->scanColumns($m, $targetSetImplementationId->map(id|$nIdToSet->get($id).values->toOne()), $state.classToSets, $nIdToSet, false, $debug));

   ^ColResWithState(colRes=^ColRes(columns = $state.colRes.columns->concatenate($potentialColumnsFromJoin)->concatenate($columnsFromChildren.colRes.columns), sets=$targetSetImplementationId->map(id|$nIdToSet->get($id).values)),
                    classToSets=$columnsFromChildren.classToSets->map(n|$n->keyValues())->newMap(),
                    idToSet=$columnsFromChildren.idToSet->map(n|$n->keyValues())->newMap());
}

function meta::pure::lineage::scanColumns::allSubSetImplementationIds(m:Mapping[1], ids: String[*]):String[*]
{
   if($ids->isEmpty(), |[], |
   $ids->concatenate($m->allSubSetImplementationIds($m->classMappings()->filter(si|!$si.superSetImplementationId->isEmpty()&& $ids->contains($si.superSetImplementationId->toOne())).id)));
}

function <<access.private>> meta::pure::lineage::scanColumns::extractTableAliasColumns(elements:JoinTreeNode[*], context:String[1]):ColumnWithContext[*]
{
   $elements->map(element|
                  let context = $element->type().name->toOne();
                  $element.join.operation->extractTableAliasColumns($context)->concatenate($element->children()->map(c|$c->extractTableAliasColumns($context))););
}

function <<access.private>> meta::pure::lineage::scanColumns::extractTableAliasColumns(element:RelationalOperationElement[*], context:String[1]):ColumnWithContext[*]
{
  $element->map(e|
                let nContext = if($context==JoinTreeNode.name->toOne(), |$context, |$e->type().name->toOne());
                $e->match(
                          [
                              s:SelectSQLQuery[1]|$s.columns->extractTableAliasColumns($nContext)->concatenate($s.filteringOperation->extractTableAliasColumns($nContext)),
                              u:UnaryOperation[1]| $u.nested->extractTableAliasColumns($nContext),
                              i:BinaryOperation[1]|$i.left->extractTableAliasColumns($nContext)->concatenate($i.right->extractTableAliasColumns($nContext)),
                              c:TableAliasColumn[1]|if($c.column.owner->isNotEmpty() && $c.column.owner->toOne()->instanceOf(View),
                                                       | $c.column.owner->cast(@View).columnMappings->filter(cm|$cm.columnName == $c.column.name).relationalOperationElement->meta::pure::lineage::scanColumns::extractTableAliasColumns($nContext),
                                                       | ^ColumnWithContext(column=$c.column, context=$context)),
                              l:Literal[1]|[],
                              l:LiteralList[1]|[],
                              j:JoinStrings[1]|$j.strings->extractTableAliasColumns($nContext),
                              d:DynaFunction[1]|$d.parameters->extractTableAliasColumns($nContext),
                              a:Alias[1]|$a.relationalElement->extractTableAliasColumns($nContext),
                              v:VariableArityOperation[1]|$v.args->extractTableAliasColumns($nContext),
                              n:ColumnName[1]|[],
                              r:RelationalOperationElementWithJoin[1]|$r.relationalOperationElement->extractTableAliasColumns($nContext)->concatenate($r.joinTreeNode->extractTableAliasColumns($nContext)),
                              wc: WindowColumn[1]| $wc.window->extractTableAliasColumns($nContext)->concatenate($wc.func->extractTableAliasColumns($nContext)),
                              w:meta::relational::metamodel::Window[1]| $w.partition->extractTableAliasColumns($nContext)->concatenate($w.sortBy->extractTableAliasColumns($nContext)),
                              f:meta::relational::functions::pureToSqlQuery::metamodel::FreeMarkerOperationHolder[1]| $f.parameters->map(p|$p->extractTableAliasColumns($nContext));,
                              s:SemiStructuredObjectNavigation[1]|if($s.operand->type() != RelationalOperationElement, | $s.operand->extractTableAliasColumns($nContext), | []),
                              s:SemiStructuredArrayFlatten[1]|$s.navigation->extractTableAliasColumns($nContext),
                              s:SemiStructuredArrayFlattenOutput[1]|$s.tableAliasColumn->extractTableAliasColumns($nContext)
                          ]
                      );
               );
}

function <<access.private>> meta::pure::lineage::scanColumns::getColumns(r:RelationalPropertyMapping[1]):ColumnWithContext[*]
{
   $r.relationalOperationElement->extractTableAliasColumns(TableAliasColumn.name->toOne())->removeDuplicates();
}

function <<access.private>> meta::pure::lineage::scanColumns::getTables(r:RelationalPropertyMapping[1]):NamedRelation[*]
{
   $r.relationalOperationElement->meta::relational::functions::pureToSqlQuery::extractTableAliasColumns().alias.relationalElement->cast(@NamedRelation);
}

function <<access.private>> meta::pure::lineage::scanColumns::manageQualifiers(children:PropertyPathTree[*], extraChildren:PropertyPathTree[*]):PropertyPathTree[*]
{
   if ($children->isEmpty(), |$extraChildren, |$children);
}

// For testing purpose
function meta::pure::lineage::scanColumns::scanColumnsAndReturnString(valueSpec: ValueSpecification[1], m: Mapping[1]): String[1]
{
   $valueSpec
      ->scanProperties().result->buildPropertyTree()
      ->scanColumns($m)
      ->map(t|$t.column.owner->cast(@Table).name->toOne()+'.'+$t.column.name->toOne()+' <'+$t.context+'>')->removeDuplicates()->sort()->makeString('[', ', ', ']')
}
