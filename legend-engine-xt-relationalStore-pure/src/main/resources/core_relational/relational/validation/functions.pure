// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::router::execution::*;
import meta::pure::router::clustering::*;
import meta::json::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::functions::io::http::*;
import meta::relational::mapping::*;
import meta::relational::runtime::*;
import meta::relational::metamodel::operation::*;
import meta::relational::metamodel::*;
import meta::relational::metamodel::join::*;
import meta::relational::metamodel::relation::*;
import meta::relational::validation::functions::*;
import meta::pure::constraints::functions::util::*;
import meta::relational::validation::utils::*;
import meta::relational::validation::*;
import meta::pure::constraints::functions::*;
import meta::pure::runtime::*;
import meta::pure::metamodel::constraint::*;
import meta::pure::mapping::*;
import meta::relational::validation::functions::*;
import meta::relational::validation::model::*;

function meta::relational::validation::functions::tranformPostTDSOperation(postTDSOperation: FunctionDefinition<{TabularDataSet[1]->TabularDataSet[1]}>[1], varMap: Map<String, List<Any>>[1]):FunctionExpression[1]
{
   let expressionSequence = $postTDSOperation.expressionSequence->evaluateAndDeactivate();
   assert($expressionSequence->size() == 1, 'Functions of more than one expression are not supported');
   $expressionSequence->toOne()->resolveVars($varMap)->cast(@FunctionExpression);
}

function meta::relational::validation::functions::resolveVars(vs: ValueSpecification[1], varMap: Map<String, List<Any>>[1]):ValueSpecification[1]
{
   $vs->match([
      fe: FunctionExpression[1] | ^$fe(parametersValues = $fe.parametersValues->evaluateAndDeactivate()->map(p |  $p->resolveVars($varMap))),
      iv: InstanceValue[1] | ^$iv(values = $iv.values->evaluateAndDeactivate()->map(v | $v->match([val: ValueSpecification[1] | $val->resolveVars($varMap), fd: LambdaFunction<Any>[1] | ^$fd(openVariables=[], expressionSequence=$fd.expressionSequence->evaluateAndDeactivate()->map(e|$e->resolveVars($varMap->putAll($fd->openVariableValues())))), ke: KeyExpression[1] | ^$ke(expression=$ke.expression->evaluateAndDeactivate()->resolveVars($varMap)), _:Any[1] | $v]))),
      v: VariableExpression[1] | if($varMap->keys()->contains($v.name), | $v->resolve(^Map<VariableExpression, ValueSpecification>(), $varMap)->toOne(), | $v)
   ]);
}

function meta::relational::validation::functions::generateConstraintNegatedProjectQuery<T>(func: FunctionDefinition<{->T[*]}>[1], projections: BasicColumnSpecification<T>[*], constraint: Constraint[1], constraintInformation: ConstraintContextInformation<Any>[*]):FunctionExpression[1]
{
   let class = $func->functionType().returnType.rawType->toOne()->cast(@Class<Any>);
   let constraintFilteredQuery = generateConstraintNegatedFilteredQuery($class, $func.expressionSequence->evaluateAndDeactivate()->toOne()->cast(@FunctionExpression)->resolveVars($func->openVariableValues())->cast(@FunctionExpression), $constraint);
   let constraintInfo = getContextInformationForConstraint($constraint, $constraintInformation);
  
   ^SimpleFunctionExpression 
   ( 
      func = project_K_MANY__Function_MANY__String_MANY__TabularDataSet_1_,
      multiplicity = PureOne,
      genericType  = ^GenericType(rawType = TabularDataSet),
      importGroup  = system::imports::coreImport,
      parametersValues = 
      [  $constraintFilteredQuery, 
         ^InstanceValue (
            genericType = ^GenericType(rawType = FunctionDefinition, typeArguments = ^GenericType(rawType = Any)), 
            multiplicity = ZeroMany, 
            values = [
               generateProjection($class, $constraint.name->toOne()),
               generateProjection($class, $constraintInfo.enforcementLevel.name),
               $constraintInfo.message->isEmpty()->if( 
                  | $constraintInfo.messageFunction->isEmpty()->if(
                     | generateProjection($class, ''),
                     | $constraintInfo.messageFunction->toOne()
                    ),
                  | generateProjection($class, $constraintInfo.message->toOne())
               )
            ]->concatenate($projections->map(col | 
                                             let colfn = $col.func->cast(@LambdaFunction<Any>);
                                             ^$colfn(openVariables=[], expressionSequence=$colfn.expressionSequence->evaluateAndDeactivate()->toOne()->resolveVars($colfn->openVariableValues()));
                                            ))
         ),
         ^InstanceValue (
            genericType = ^GenericType(rawType = String), 
            multiplicity = ZeroMany, 
            values = getConstraintValidationColumns().name->concatenate($projections->map(col | $col.name))
         )
     ]
   )->evaluateAndDeactivate();
}

function meta::relational::validation::functions::generateConstraintNegatedFilteredQuery<T>(c:Class<T>[1], f: FunctionExpression[1], constraint: Constraint[1]):FunctionExpression[1]
{
   let constraintExprSequence = $constraint.functionDefinition.expressionSequence->evaluateAndDeactivate()->toOne();
   let negatedExprSequence = $constraintExprSequence->negatedFunctionExpression();
   let dummyLambda = {|'ok'};
   ^SimpleFunctionExpression 
   ( 
      func = filter_T_MANY__Function_1__T_MANY_,
      multiplicity = ZeroMany,
      genericType  = ^GenericType(rawType = $c),
      importGroup  = system::imports::coreImport,
      parametersValues = 
      [  $f, 
         ^InstanceValue (
            genericType = $constraint.functionDefinition.classifierGenericType->toOne(), 
            multiplicity = PureOne, 
            values = ^$dummyLambda 
            (
               classifierGenericType = $constraint.functionDefinition.classifierGenericType, 
               expressionSequence = $negatedExprSequence
            )
         )
     ]
   )->evaluateAndDeactivate();
}

function <<access.private>> {doc.doc = 'Genrates a "!$f" query'}
meta::relational::validation::functions::negatedFunctionExpression(f: ValueSpecification[1]):ValueSpecification[1]
{
   if($f->instanceOf(SimpleFunctionExpression) && $f->cast(@SimpleFunctionExpression).func->evaluateAndDeactivate() == not_Boolean_1__Boolean_1_,
      | $f->cast(@SimpleFunctionExpression).parametersValues->evaluateAndDeactivate()->at(0),
      | ^SimpleFunctionExpression 
         ( 
            func = not_Boolean_1__Boolean_1_,
            multiplicity = PureOne,
            genericType  = ^GenericType(rawType = Boolean),
            importGroup  = system::imports::coreImport,
            parametersValues = $f
         )->evaluateAndDeactivate()
   )
}

function <<access.private>> {doc.doc = 'Genrates a "$collection->project([x|Constant, <Name>])" query"'}
meta::relational::validation::functions::generateProjection<T>(c:Class<T>[1], projectedValue: String[1]):FunctionDefinition<{Nil[1]->Any[*]}>[1]
{
   let dummyLambda = {|'ok'};
   let v = ^VariableExpression(name='p', genericType=^GenericType(rawType = $c), multiplicity=PureOne);
   let func = ^$dummyLambda
   (
      classifierGenericType = ^GenericType
                              (
                                 rawType = LambdaFunction,
                                 typeArguments = ^GenericType
                                                 (
                                                    rawType = ^FunctionType
                                                              (
                                                                 parameters = $v,
                                                                 returnMultiplicity = PureOne,
                                                                 returnType = ^GenericType(rawType = String)
                                                              )
                                                 )
                              ),
      expressionSequence = ^InstanceValue
                           (
                              genericType = ^GenericType(rawType = String),
                              multiplicity = PureOne,
                              values = $projectedValue
                           )

   );
   $func->cast(@LambdaFunction<{Nil[1]->Any[*]}>)->evaluateAndDeactivate();
}

function <<access.private>> {doc.doc = 'Genrates a "$collection->project([x|Constant, <Name>])" query"'}
meta::relational::validation::functions::generateProjectBasicColumnSpecification<T>(c:Class<T>[1], name: String[1], projectedValue: String[1]):BasicColumnSpecification<Nil>[1]
{
   let func = generateProjection($c, $projectedValue);
   ^BasicColumnSpecification<Nil>(func = $func->cast(@LambdaFunction<{Nil[1]->Any[*]}>), name = $name)->evaluateAndDeactivate();
}

function <<access.private>> {doc.doc = 'Genrates a "$collection->project([x|Constant, <Name>])" query"'}
meta::relational::validation::functions::generateProjectBasicColumnSpecification<T>(c:Class<T>[1], name: String[1], projectedFunction: FunctionDefinition<{Nil[1]->String[1]}>[1]):BasicColumnSpecification<Nil>[1]
{
   ^BasicColumnSpecification<Nil>(func = $projectedFunction, name = $name)->evaluateAndDeactivate();
}

function {doc.doc = 'Columns specific to violation of constraint'}
meta::relational::validation::functions::getConstraintValidationColumns():TDSColumn[*]
{
   [
      ^TDSColumn(offset = 0, name = 'CONSTRAINT_ID', type = String),
      ^TDSColumn(offset = 1, name = 'ENFORCEMENT_LEVEL', type = String),      
      ^TDSColumn(offset = 2, name = 'MESSAGE', type = String)
   ]
}

function meta::relational::validation::functions::getTables(r:RelationalTreeNode[1]):Table[*]
{
     $r->match([
                 j:JoinTreeNode[1] | $j.join.aliases->map(a | $a.first->getTables()->concatenate($a.second->getTables()))
                                                    ->concatenate(if(!$j.join.target->isEmpty(), | $j.join.target->toOne()->getTables(), | []))
                                                    ->concatenate($j.alias->getTables())
                                                    ->concatenate($j.childrenData->map(c | $c->cast(@JoinTreeNode)->getTables())),
                 r:RelationalTreeNode[1] | $r.alias->getTables()->concatenate($r.childrenData->map(c | $c->cast(@JoinTreeNode)->getTables()))                                    
     ])->removeDuplicates();
}

function meta::relational::validation::functions::getTables(r:RelationalOperationElement[1]):Table[*]
{
   $r->match([
                s:SelectSQLQuery[1] | if($s.data->isEmpty(), |[], |$s.data->toOne()->getTables())
                                       ->concatenate($s.columns->map(c| $c->getTables()))->concatenate($s.filteringOperation->map(fo | $fo->getTables())),
                v:ViewSelectSQLQuery[1] | $v.selectSQLQuery->getTables(),
                u:Union[1] | $u.queries->map(q|$q->getTables()),
                tac:TableAliasColumn[1] | $tac.alias->getTables(),
                a:Alias[1] | $a.relationalElement->getTables(),
                t:Table[1] | if($t->isTemporaryTable(), | [], | [$t]),
                u:UnaryOperation[1] | $u.nested->getTables(),
                b:BinaryOperation[1] | $b.left->getTables()->concatenate($b.right->getTables()),
                va:VariableArityOperation[1] | $va.args->map(e | $e->getTables()),
                d:DynaFunction[1] | $d.parameters->map(p | $p->getTables()),
                j:JoinStrings[1] | $j.strings->map(v | $v->getTables())
                                             ->concatenate(if($j.prefix->isEmpty(), | [], | $j.prefix->toOne()->getTables()))
                                             ->concatenate(if($j.separator->isEmpty(), | [], | $j.separator->toOne()->getTables()))
                                             ->concatenate(if($j.suffix->isEmpty(), | [], | $j.suffix->toOne()->getTables())),
                r:RelationalOperationElementWithJoin[1]|$r.joinTreeNode->toOne()->getTables()->concatenate(if($r.relationalOperationElement->isEmpty(),|[],|$r.relationalOperationElement->toOne()->getTables())),
                rel: RelationalOperationElement[1] | []
   ])->removeDuplicates();
}