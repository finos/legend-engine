// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::router::metamodel::*;
import meta::pure::router::systemMapping::tests::*;
import meta::relational::mapping::*;
import meta::pure::store::*;
import meta::pure::runtime::*;
import meta::pure::mapping::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::pure::executionPlan::*;
import meta::relational::runtime::*;
import meta::relational::metamodel::*;
import meta::relational::functions::pureToSqlQuery::*;
import meta::pure::router::routing::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::router::clustering::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::graphFetch::routing::*;

function meta::relational::contract::relationalStoreContract():StoreContract[1]
{
   ^StoreContract
   (
     id = 'relationalStore',

     planExecution = meta::relational::contract::planExecution_StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_$0_1$__Runtime_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_,
     planGraphFetchExecution = meta::relational::contract::planGraphFetchExecution_StoreMappingLocalGraphFetchExecutionNodeGenerationInput_1__LocalGraphFetchExecutionNode_1_,
     planCrossGraphFetchExecution = meta::relational::contract::planCrossGraphFetchExecution_StoreMappingCrossLocalGraphFetchExecutionNodeGenerationInput_1__LocalGraphFetchExecutionNode_1_,
    
     supports = meta::relational::contract::supports_FunctionExpression_1__Boolean_1_,
     supportsStreamFunction = meta::relational::contract::supportsStream_FunctionExpression_1__Boolean_1_,
     shouldStopRouting = [
                            meta::pure::tds::project_TableTDS_1__ColumnSpecification_MANY__TabularDataSet_1_,
                            meta::pure::tds::tableToTDS_Table_1__TableTDS_1_,
                            meta::pure::tds::viewToTDS_View_1__TableTDS_1_,
                            meta::pure::tds::join_TabularDataSet_1__TabularDataSet_1__JoinType_1__Function_1__TabularDataSet_1_,
                            meta::pure::tds::join_TabularDataSet_1__TabularDataSet_1__JoinType_1__String_$1_MANY$__String_$1_MANY$__TabularDataSet_1_,
                            meta::relational::functions::database::tableReference_Database_1__String_1__String_1__Table_1_,
                            meta::relational::functions::columnProjectionsFromRoot_Any_MANY__NamedRelation_1__String_MANY__Boolean_$0_1$__Integer_$0_1$__RelationData_1_
                         ],
     shouldStopPreeval = {a:Any[*] | $a->match([p: meta::relational::metamodel::Database[1] | true,
                                                p: meta::relational::metamodel::Column[*] | true,
                                                p: meta::relational::metamodel::Schema[*] | true,
                                                p: meta::relational::metamodel::relation::Table[*] | true,
                                                f: SimpleFunctionExpression[1] | $f.func->in([meta::relational::functions::database::tableReference_Database_1__String_1__String_1__Table_1_]),
                                                a: Any[*] | false
                                     ])},
     routeFunctionExpressions = pair(
            fe:FunctionExpression[1] | $fe->evaluateAndDeactivate().genericType.rawType == meta::relational::mapping::TableTDS,
            {f:Function<Any>[1], fe:FunctionExpression[1], state:RoutingState[1], executionContext:ExecutionContext[1], vars:Map<VariableExpression, ValueSpecification>[1], inScopeVars:Map<String, List<Any>>[1], extensions:meta::pure::extension::Extension[*], debug:DebugContext[1] |
              let mapping = $state.routingStrategy->cast(@meta::pure::router::store::metamodel::StoreMappingRoutingStrategy).mapping;
              let runtime = $state.routingStrategy->cast(@meta::pure::router::store::metamodel::StoreMappingRoutingStrategy).runtime;
              let name = $fe.parametersValues->at(0)->cast(@FunctionExpression).functionName;
              assert($fe.parametersValues->at(0)->cast(@FunctionExpression).func->in([meta::relational::functions::database::tableReference_Database_1__String_1__String_1__Table_1_, meta::relational::functions::database::viewReference_Database_1__String_1__String_1__View_1_]), 'Must use meta::pure::tds::tableReference / viewReference function to specify table / view ');
              let store = $fe.parametersValues->at(0)->cast(@FunctionExpression).parametersValues->at(0)->cast(@InstanceValue).values->cast(@meta::pure::store::Store)->toOne();
              ^$state(value = ^TDSRoutedValueSpecification(
                                  genericType = $fe.genericType,
                                  multiplicity = $fe.multiplicity,
                                  id = 'Table TDS',
                                  store = $store,
                                  runtime = $runtime,
                                  mapping = $mapping,
                                  executionContext = $executionContext,
                                  value = $fe
                              )
              );
            }
      ),
     supportsNativeJoinAmongElements = true,
     reprocessConnection = {connection:Connection[1] |
                              $connection->match(
                                  [
                                    t:meta::relational::runtime::TestDatabaseConnection[1] |
                                          ^$t(testDataSetupSqls = if ($t.testDataSetupCsv->isEmpty() || !$t.element->instanceOf(meta::relational::metamodel::Database),
                                                            | [];,
                                                            | if ($t.testDataSetupSqls->isEmpty(),
                                                                  | $t.testDataSetupCsv->toOne()->meta::alloy::service::execution::setUpDataSQLs($t.element->cast(@meta::relational::metamodel::Database)),
                                                                  | $t.testDataSetupSqls))),
                                    r:meta::pure::alloy::connections::RelationalDatabaseConnection[1] |
                                          ^$r(
                                            datasourceSpecification = $r.datasourceSpecification->match([
                                                l:meta::pure::alloy::connections::alloy::specification::LocalH2DatasourceSpecification[1] |
                                                  ^$l
                                                  (
                                                        testDataSetupSqls =
                                                            $l.testDataSetupSqls->concatenate(
                                                                if ($l.testDataSetupCsv->isEmpty() || !$r.element->instanceOf(meta::relational::metamodel::Database),
                                                                    | [];,
                                                                    | $l.testDataSetupCsv->toOne()->meta::alloy::service::execution::setUpDataSQLs($r.element->cast(@meta::relational::metamodel::Database))
                                                                )
                                                            )
                                                  ),
                                                d:meta::pure::alloy::connections::alloy::specification::DatasourceSpecification[1] | $d
                                            ])
                                          ),
                                    c:Connection[1] | $c
                                ]);
                           },

      printPlanNodeToString = {space : String[1], extensions:meta::pure::extension::Extension[*]|
                                       [
                                          cpt:CreateAndPopulateTempTableExecutionNode[1]|'CreateAndPopulateTempTable\n'+$space+'('+header($cpt, $space, $extensions)+'\n'+$space+'  inputVarNames = ' + $cpt.inputVarNames->joinStrings('[', ', ', ']') + '\n' + $space + '  tempTableName = ' + $cpt.tempTableName + '\n' +$space+'  tempTableColumns = '+$cpt.tempTableColumnMetaData->map(col|'('+$col.column.label+', '+if($col.column.dataType->isEmpty(),|'""',| $col.column.dataType->toOne()->meta::relational::metamodel::datatype::dataTypeToSqlText()) + if($col.identifierForGetter->isEmpty(), | '', | ', ' + $col.identifierForGetter->toOne() + ', ' + if($col.parametersForGetter->isEmpty(),|'[""]',| $col.parametersForGetter->toOne()->keyValues()->map(param| '(' + $param.first + ', ' + $param.second->toString() + ')')->joinStrings('[', ', ', ']') )) + ' )')->joinStrings('[',', ',']') +'\n' + $space + '  connection = '+$cpt.connection ->connectionToString($extensions) +'\n' + $cpt.implementation->printImplementation('implementation', $space+'  ', $extensions) + $space+')\n',
                                          r:SQLExecutionNode[1]|'SQL\n'+$space+'('+header($r, $space, $extensions)+'\n'+$space+'  resultColumns = '+$r.resultColumns->map(rc|'('+$rc.label+', '+if($rc.dataType->isEmpty(),|'""',| $rc.dataType->toOne()->meta::relational::metamodel::datatype::dataTypeToSqlText())+')')->joinStrings('[',', ',']')+'\n'+$space+'  sql = '+$r.sqlQuery+'\n'+ $space + '  connection = '+$r.connection ->connectionToString($extensions) +'\n'+$r.implementation->printImplementation('implementation', $space+'  ', $extensions)+ $space+')\n',
                                          r:RelationalSaveNode[1]|'RelationalSave\n'+$space+'('+header($r, $space, $extensions)+'\n'+$space+'  sql = '+$r.sqlQuery+'\n'+ +$space+'  generatedVariableName = '+$r.generatedVariableName+'\n'+$space + '  columnValueGenerators =\n' + $space + $r.columnValueGenerators->keyValues()->sortBy(p | $p.first)->map(p| '    (\n' + $space + '      ' + $p.first + ',\n' + $space + $p.second->planNodeToString($space + '      ', $extensions) + '    )')->joinStrings('  [\n', ',\n', '\n  ]') +'\n'+$space + '  connection = '+$r.connection->connectionToString($extensions) +'\n'+$r.implementation->printImplementation('implementation', $space+'  ', $extensions)+'\n'+ $space+ $r->childrenToString($space+'  ', $extensions) +' \n'+$space+')\n',
                                          r:RelationalInstantiationExecutionNode[1]|'Relational\n'+$space+'('+header($r, $space, $extensions)+'\n'+$space+'  resultColumns = '+$r.executionNodes->at(0)->cast(@meta::relational::mapping::SQLExecutionNode).resultColumns->map(rc|'('+$rc.label+', '+if($rc.dataType->isEmpty(),|'""',| $rc.dataType->toOne()->meta::relational::metamodel::datatype::dataTypeToSqlText())+')')->joinStrings('[',', ',']')+'\n'+$space+'  sql = '+$r.executionNodes->at(0)->cast(@meta::relational::mapping::SQLExecutionNode).sqlQuery+'\n'+ $space + '  connection = '+$r.executionNodes->at(0)->cast(@meta::relational::mapping::SQLExecutionNode).connection ->connectionToString($extensions) +'\n'+$r.implementation->printImplementation('implementation', $space+'  ', $extensions)+ $space+')\n',
                                          rb:RelationalBlockExecutionNode[1]|'RelationalBlockExecutionNode\n'+ $space+ '(' + header($rb, $space, $extensions) + $rb->childrenToString($space+'  ', $extensions) +' \n' + if($rb.finallyExecutionNodes->isNotEmpty(),| '  finallyExecutionNodes = ' + $rb.finallyExecutionNodes->nodesToString($space+'  ', $extensions) + '\n',|'') +$space+ ')\n',
                                          r: meta::relational::graphFetch::executionPlan::RelationalGraphFetchExecutionNode[1] | $r->relationalGraphFetchExecutionNodeToString($space, $extensions)
                                       ]},
      printConnectionToString = {extensions:meta::pure::extension::Extension[*]|
                                       [
                                           testDatabase:TestDatabaseConnection[1]|databaseConnectionTypeToString($testDatabase),
                                           db:DatabaseConnection[1]|  databaseConnectionTypeToString($db)
                                       ]},
      printTypeToString = {space : String[1], extensions:meta::pure::extension::Extension[*]|
                                       [
                                           tdsResultType:TDSResultType[1]|'TDS['+$tdsResultType.tdsColumns->map(c|'('+$c.name+', '+$c.type->toOne()->elementToPath()+ ', '+ if($c.sourceDataType->isEmpty(),|'""',| $c.sourceDataType->toOne()->cast(@meta::relational::metamodel::datatype::DataType)->meta::relational::metamodel::datatype::dataTypeToSqlText()) + if($c.documentation->isEmpty(),|', ""',|', "'+$c.documentation->toOne()+'"')+if($c.enumMappingId->isEmpty(),|'',|', '+$c.enumMappingId->toOne())+')')->joinStrings(', ')+']',
                                           relationResultType : RelationResultType[1]|'Relation[name='+$relationResultType.relationName+', type='+$relationResultType.relationType->toString()+', schema='+$relationResultType.schemaName+', database='+$relationResultType.database+$relationResultType.columns->map(c | '('+$c.name+','+$c.type->meta::relational::metamodel::datatype::dataTypeToSqlText()+')')->joinStrings(', columns=[', ', ', ']')+']'
                                      ]},


     supportsSetImplementation = s:SetImplementation[1]|$s->instanceOf(RelationalInstanceSetImplementation) ||
                                                        ($s->instanceOf(CrossSetImplementation) && $s->cast(@CrossSetImplementation).targetStore->instanceOf(Database)),
     supportsStore = s:Store[1]|$s->instanceOf(Database),
     resolveStoreFromSetImplementation = s:InstanceSetImplementation[1]|$s->meta::relational::contract::getStore(),

     executeStoreQuery = meta::relational::contract::execution_StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_1__Runtime_1__ExecutionContext_1__Extension_MANY__DebugContext_1__Result_1_,
     localGetterOverrideMapped = meta::relational::contract::getterOverrideMapped_Any_1__PropertyMapping_1__Any_MANY_,
     instance_equals = {a:Any[1], b:Any[1] |
                          $a->getHiddenPayload()->cast(@meta::relational::mapping::KeyInformation).pk == $b->getHiddenPayload()->toOne()->cast(@meta::relational::mapping::KeyInformation).pk;
                       }

   )
}

// Execution flow
function meta::relational::contract::execution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[1], runtime:Runtime[1], exeCtx:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):Result<Any|*>[1]
{
   execution($sq.store->cast(@Database), $sq.fe, $ext, $m, $runtime, $sq.inScopeVars, $exeCtx, $extensions, $debug);
}

// Functions supported by relational execution
function meta::relational::contract::supports(f:FunctionExpression[1]):Boolean[1]
{
  if($f->meta::pure::router::utils::isUnionOnGraphFetch(true),
    | false,
    |
      !meta::relational::functions::pureToSqlQuery::findSupportedFunction(
                        $f,
                        meta::relational::functions::pureToSqlQuery::getSupportedFunctions(),
                        meta::relational::functions::pureToSqlQuery::getContextBasedSupportedFunctions()
                    )->isEmpty()
      //These are here because the router does not go deep enough, should remove
      || [
            meta::pure::functions::math::sum_Float_MANY__Float_1_,
            meta::pure::functions::math::sum_Integer_MANY__Integer_1_,
            meta::pure::functions::math::sum_Number_MANY__Number_1_,
            meta::pure::tds::func_String_1__FunctionDefinition_1__TdsOlapAggregation_1_
         ]->contains($f.func);
  );
}

function meta::relational::contract::supportsStream(f:FunctionExpression[1]):Boolean[1]
{
  [
      meta::pure::functions::collection::in_Any_1__Any_MANY__Boolean_1_,
      meta::pure::functions::collection::in_Any_$0_1$__Any_MANY__Boolean_1_
  ]->contains($f.func);
}

// Execution Plan
function meta::relational::contract::planExecution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let store = $sq.store->cast(@Database);
   let fe = $sq.fe->evaluateAndDeactivate();
   if($fe.func->in([meta::pure::graphFetch::execution::graphFetchFunctions()]),
      |
        // Graph Fetch Flow
        $sq->meta::pure::graphFetch::executionPlan::planGraphFetchExecution($ext, $m->toOne(), $runtime->toOne(), $exeCtx, $extensions, $debug);,

      |
        if($fe.func->in(meta::pure::mutation::mutationFunctions()),
           |
             // Write Flow
            $sq->meta::relational::mutation::executionPlan::planMutationExecution($ext, $m->toOne(), $runtime->toOne(), $exeCtx, $extensions, $debug);,
           |
             // Normal Flow
            let connections = $runtime.connections->filter(c | $c->instanceOf(DatabaseConnection));
            let storeRuntime = if($connections->size() <= 1,
                               | $runtime->toOne(),
                               | let oldRuntime = $runtime->toOne();
                                 let dbConn = $oldRuntime->connectionByElement($store)->cast(@DatabaseConnection);
                                 ^$oldRuntime(connections = $dbConn);
                            );

            let queryExeCtx = if($exeCtx->instanceOf(RelationalExecutionContext),|$exeCtx,|[])->cast(@RelationalExecutionContext);
            let originalQuery = $sq.fe->toSQLQuery($m->toOne(), $sq.inScopeVars, $queryExeCtx, $debug, $extensions);
            $originalQuery->postProcessSQLQuery($store, $ext, $m->toOne(), $storeRuntime, $exeCtx, $extensions)
                          ->generateExecutionNodeForPostProcessedResult($sq, $store, $ext, $m->toOne(), $storeRuntime, $exeCtx, $debug, $extensions);
      );
   );
}

function meta::relational::contract::planGraphFetchExecution(input: StoreMappingLocalGraphFetchExecutionNodeGenerationInput[1]): LocalGraphFetchExecutionNode[1]
{
  meta::relational::graphFetch::executionPlan::planRootGraphFetchExecutionRelational($input.storeQuery, $input.ext, $input.clusteredTree, $input.orderedPaths, $input.mapping, $input.runtime, $input.exeCtx, $input.enableConstraints, $input.checked, $input.extensions, $input.debug)
}

function meta::relational::contract::planCrossGraphFetchExecution(input: StoreMappingCrossLocalGraphFetchExecutionNodeGenerationInput[1]): LocalGraphFetchExecutionNode[1]
{
  meta::relational::graphFetch::executionPlan::planCrossRootGraphFetchExecutionRelational($input.clusteredTree, $input.orderedPaths, $input.parentPath, $input.inScopeVars, $input.mapping, $input.runtime, $input.exeCtx, $input.extensions, $input.debug);
}

// Lazy Execution of property
function meta::relational::contract::getterOverrideMapped(o:Any[1], propertyMapping:PropertyMapping[1]):Any[*]
{
   $o->processProperty($propertyMapping.property);
}

function meta::relational::contract::getStore(r:InstanceSetImplementation[1]):Store[1]
{
  $r->match(
    [
      r:RootRelationalInstanceSetImplementation[1]|
          let mainTableAlias = $r.mainTableAlias;
          if ($mainTableAlias.database->isEmpty(),
            |$r->mainTable().schema.database,
            |$mainTableAlias.database->toOne()
          );,
      e:EmbeddedRelationalInstanceSetImplementation[1]|
          $e->resolveRootFromEmbedded()->meta::relational::contract::getStore(),
      s:CrossSetImplementation[1]|$s.targetStore
    ]
  )  
}