// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::tempTable::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::pure::alloy::connections::alloy::isolation::*;
import meta::relational::metamodel::relation::*;
import meta::relational::runtime::*;
import meta::relational::metamodel::*;
import meta::relational::executionPlan::*;
import meta::pure::executionPlan::*;
import meta::relational::commands::*;

function meta::relational::functions::tempTable::sqlStringToUpdateNode(sql: String[*]): UpdateSqlExecutionNode[1]
{
  ^meta::relational::executionPlan::UpdateSqlExecutionNode(sqlCommands = $sql, resultType = ^VoidResultType(type=meta::pure::router::store::routing::Void));
}

function meta::relational::functions::tempTable::updateNodeToFinallyNode(updateNodes: ExecutionNode[*]): FinallyExecutionNode[1]
{
  ^meta::relational::executionPlan::FinallyExecutionNode(executionNodes= $updateNodes, resultType = ^UpdateNodeResultType(type= UpdateNodeResultType));
}

function meta::relational::functions::tempTable::toLazyVoidRelationalResult(updateNode: UpdateSqlExecutionNode[1]): UpdateSqlExecutionNode[1]
{
  ^$updateNode(resultType = ^LazyVoidResultType(type=meta::pure::router::store::routing::Void));
}

function meta::relational::functions::tempTable::generateUpdateNode(s: TempTableIsolationStrategy[1], r: UpdateSQLQueryCommands[1], dbConfig: DbConfig[1]): UpdateSqlExecutionNode[*]
{
  $s->toOne()->match([
    authId: IsolateByAuthId[1] | $authId.updateNodes($r, $dbConfig),
    default: DefaultIsolationStrategy[1] | $default.updateNodes($r, $dbConfig)
  ]);
}

function meta::relational::functions::tempTable::generateUpdateNodeForFinallyNode(s: TempTableIsolationStrategy[1], r: UpdateSQLQueryCommands[1], dbExtensions: DbExtension[1]): UpdateSqlExecutionNode[1]
{
  $s->toOne()->match([
    authId: IsolateByAuthId[1] | $authId.updateNodeForFinally($r,$dbExtensions),
    default: DefaultIsolationStrategy[1] | $default.updateNodeForFinally($r,$dbExtensions)
  ]);
}

function meta::relational::functions::tempTable::generateTablePath(s: TempTableIsolationStrategy[1], t: Table[1]) : String[1]
{
  $s->toOne()->match([
    authId: IsolateByAuthId[1] | $authId.generateTempTablePath($t),
    default: DefaultIsolationStrategy[1] | $default.generateTempTablePath($t)
  ]);
}

function meta::relational::functions::tempTable::generateTable(s: TempTableIsolationStrategy[1], tempTableName: String[1], tempTableColumnName: String[1], tempTableColumnType: meta::relational::metamodel::datatype::DataType[1], addSuffix: Boolean[1], isTestRun: Boolean[1]): Table[1]
{
  let testRequestId = 'testId';
  let requestIdVarPlaceHolder = if($isTestRun,| $testRequestId ,| stringToPlaceHolder('request_id'));
  let schema = $s->toOne()->match([
                                    authId: IsolateByAuthId[1] | $authId.createSchema($requestIdVarPlaceHolder),
                                    default: DefaultIsolationStrategy[1] | $default.createSchema()
                                  ]);

  ^Table(name = $tempTableName + if($addSuffix ,| '_' + $requestIdVarPlaceHolder ,| ''),
          columns = ^Column(name = $tempTableColumnName , type = $tempTableColumnType),
          schema = $schema,
          temporaryTable = true);
}

function meta::relational::functions::tempTable::generateUpdateSQLNodeforCreateTempTable(): GenerateUpdateSQLNodesForCreateTempTable[1]
{
  ^GenerateUpdateSQLNodesForCreateTempTable(
    updateNodeForFinallyGenerator = generateUpdateNodeForFinallyNode_TempTableIsolationStrategy_1__UpdateSQLQueryCommands_1__DbExtension_1__UpdateSqlExecutionNode_1_,
    updateNodeGenerator = generateUpdateNode_TempTableIsolationStrategy_1__UpdateSQLQueryCommands_1__DbConfig_1__UpdateSqlExecutionNode_MANY_,
    generateTable = generateTable_TempTableIsolationStrategy_1__String_1__String_1__DataType_1__Boolean_1__Boolean_1__Table_1_,
    generateFullyQualifiedTempTableName = generateTablePath_TempTableIsolationStrategy_1__Table_1__String_1_
  );
}

function meta::relational::functions::tempTable::generateUpdateSQLQueryCommands(tempTable: Table[1], dbConnection: DatabaseConnection[1]): UpdateSQLQueryCommands[1]
{
  ^UpdateSQLQueryCommands(
    createTempTable = getCreateTempTableSQLQuery($tempTable),
    dropTable = getDropTableSQLQuery($tempTable),
    loadTable = getLoadTableSQLQuery($tempTable),
    createSchema = getCreateSchemaSQLQuery($tempTable.schema),
    dropSchema = getDropSchemaSQLQuery($tempTable.schema),
    useDb =  getUseDbSQLQuery($dbConnection)
  );
}

function meta::relational::functions::tempTable::getCreateTempTableSQLQuery(tempTable: Table[1]): CreateTableSQL[1]
{
   ^CreateTableSQL(table = $tempTable, isTempTable = true);
}

function meta::relational::functions::tempTable::getDropTableSQLQuery(table: Table[1]): DropTableSQL[1]
{
   ^DropTableSQL(table = $table);
}

function meta::relational::functions::tempTable::getLoadTableSQLQuery(table: Table[1]): LoadTableSQL[1]
{
   ^LoadTableSQL(table = $table, csvFileLocationVarPlaceHolder = stringToPlaceHolder('csv_file_location'));
}

function meta::relational::functions::tempTable::getCreateSchemaSQLQuery(schema: Schema[1]): CreateSchemaSQL[1]
{
   ^CreateSchemaSQL(schema = $schema);
}

function meta::relational::functions::tempTable::getDropSchemaSQLQuery(schema: Schema[1]): DropSchemaSQL[1]
{
   ^DropSchemaSQL(schema = $schema);
}

function meta::relational::functions::tempTable::getUseDbSQLQuery(dbConnection: DatabaseConnection[1]): UseDbSQL[1]
{
   ^UseDbSQL(dbOnConnection = $dbConnection);
}
