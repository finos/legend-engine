import meta::pure::graphFetch::domain::*;
import meta::pure::graphFetch::domain::tests::*;
import meta::relational::graphFetch::domain::tests::*;


//---------------------------------------------------------------------------------
// Would need to add this to a project that depends both on graphQL and Relational
//---------------------------------------------------------------------------------

// function <<test.Test>> meta::relational::graphFetch::tests::domain::testGraphQLQuery():Boolean[1]
// {
//   let graphQLQuery = ^meta::external::query::graphQL::metamodel::sdl::ExecutableDocument (
//                         definitions = ^meta::external::query::graphQL::metamodel::sdl::executable::OperationDefinition (
//                           name = 'MyQuery',
//                           selectionSet = [^meta::external::query::graphQL::metamodel::sdl::executable::Field (
//                             arguments = ^meta::external::query::graphQL::metamodel::sdl::executable::Argument (
//                               name = 'legalName',
//                               value = ^meta::external::query::graphQL::metamodel::sdl::value::StringValue (
//                                 value = 'ork'
//                               )
//                             ),
//                             name = 'firmByLegalName',
//                             selectionSet = [^meta::external::query::graphQL::metamodel::sdl::executable::Field (
//                               name = 'legalName'
//                             ), ^meta::external::query::graphQL::metamodel::sdl::executable::Field (
//                               name = 'employees',
//                               selectionSet = ^meta::external::query::graphQL::metamodel::sdl::executable::Field (
//                                 name = 'lastName'
//                               )
//                             )]
//                           ), ^meta::external::query::graphQL::metamodel::sdl::executable::Field (
//                             arguments = ^meta::external::query::graphQL::metamodel::sdl::executable::Argument (
//                               name = 'lastName',
//                               value = ^meta::external::query::graphQL::metamodel::sdl::value::StringValue (
//                                 value = 'yro'
//                               )
//                             ),
//                             name = 'employeeByLastName',
//                             selectionSet = ^meta::external::query::graphQL::metamodel::sdl::executable::Field (
//                               name = 'firstName'
//                             )
//                           )],
//                           type = meta::external::query::graphQL::metamodel::sdl::executable::OperationType.query
//                         )
//                       );

//   let plans =  meta::external::query::graphQL::transformation::queryToPure::getPlansFromGraphQL(Domain, TestMapping, testRuntime(), $graphQLQuery, meta::relational::extension::relationalExtensions());

//   checkPlans($plans.second);
// }


function <<test.Test>> meta::relational::graphFetch::domain::tests::testGraphFetch():Boolean[1]
{
  let res = extractDomainTypeClassFromFunction(|Domain.all()->meta::pure::graphFetch::execution::graphFetch(
                                                                #{
                                                                  Domain
                                                                  {
                                                                    firmByLegalName('ork')
                                                                    {
                                                                      legalName,
                                                                      employees
                                                                      {
                                                                        lastName
                                                                      }
                                                                    },
                                                                    employeeByLastName('yro')
                                                                    {
                                                                      firstName
                                                                    }
                                                                  }
                                                                }#
                                                              )
                                                );

  let plans = $res->map(r|
              meta::pure::executionPlan::executionPlan(
                $r.second,
                TestMapping,
                testRuntime(),
                meta::relational::extension::relationalExtensions()
              );
        );

  checkPlans($plans);
}

function <<access.private>> meta::relational::graphFetch::domain::tests::checkPlans(plans:meta::pure::executionPlan::ExecutionPlan[*]):Boolean[1]
{
    assertEquals(
      'PureExp\n' +
      '(\n' +
      '  type = String\n' +
      '  expression =  -> serialize(#{meta::pure::graphFetch::domain::tests::Firm {legalName, employees {lastName}}}#)\n' +
      '  (\n' +
      '    StoreMappingGlobalGraphFetch\n' +
      '    (\n' +
      '      type = PartialClass[impls=[(meta::pure::graphFetch::domain::tests::Firm | TestMapping.meta_pure_graphFetch_domain_tests_Firm)], propertiesWithParameters = [employees, legalName]]\n' +
      '      resultSizeRange = 0..1\n' +
      '      store = meta::relational::graphFetch::domain::tests::TestStore\n' +
      '      localGraphFetchExecutionNode = \n' +
      '         RelationalGraphFetch\n' +
      '         (\n' +
      '           type = PartialClass[impls=[(meta::pure::graphFetch::domain::tests::Firm | TestMapping.meta_pure_graphFetch_domain_tests_Firm)], propertiesWithParameters = [employees, legalName]]\n' +
      '           nodeIndex = 0\n' +
      '           relationalNode = \n' +
      '              SQL\n' +
      '              (\n' +
      '                type = meta::pure::metamodel::type::Any\n' +
      '                resultColumns = [(\"pk_0\", INT), (\"legalName\", VARCHAR(200))]\n' +
      '                sql = select \"root\".id as \"pk_0\", \"root\".legal_name as \"legalName\" from FirmTable as \"root\" where \"root\".legal_name = \'ork\'\n' +
      '                connection = TestDatabaseConnection(type = \"H2\")\n' +
      '              )\n' +
      '           children = [\n' +
      '              RelationalGraphFetch\n' +
      '              (\n' +
      '                type = PartialClass[impls=[(meta::pure::graphFetch::domain::tests::Person | TestMapping.meta_pure_graphFetch_domain_tests_Person)], propertiesWithParameters = [lastName]]\n' +
      '                nodeIndex = 2\n' +
      '                relationalNode = \n' +
      '                   SQL\n' +
      '                   (\n' +
      '                     type = meta::pure::metamodel::type::Any\n' +
      '                     resultColumns = [(\"parent_key_gen_0\", INT), (\"pk_0\", INT), (\"lastName\", VARCHAR(200))]\n' +
      '                     sql = select distinct \"temp_table_node_0_0\".pk_0 as \"parent_key_gen_0\", \"persontable_0\".id as \"pk_0\", \"persontable_0\".last_name as \"lastName\" from (select * from (${temp_table_node_0}) as \"root\") as \"temp_table_node_0_0\" inner join FirmTable as \"root\" on (\"temp_table_node_0_0\".pk_0 = \"root\".id) left outer join PersonTable as \"persontable_0\" on (\"root\".id = \"persontable_0\".firm_id) where \"persontable_0\".id is not null\n' +
      '                     connection = TestDatabaseConnection(type = \"H2\")\n' +
      '                   )\n' +
      '                children = [\n' +
      '                   \n' +
      '                ]\n' +
      '              )\n' +
      '\n' +
      '           ]\n' +
      '         )\n' +
      '      children = [\n' +
      '         \n' +
      '      ]\n' +
      '      localTreeIndices = [0, 1, 2, 3]\n' +
      '      dependencyIndices = []\n' +
      '    )\n' +
      '  )\n' +
      ')\n', $plans->at(0)->meta::pure::executionPlan::toString::planToString(meta::relational::extension::relationalExtensions()));

    assertEquals(
      'PureExp\n' +
      '(\n' +
      '  type = String\n' +
      '  expression =  -> serialize(#{meta::pure::graphFetch::domain::tests::Person {firstName}}#)\n' +
      '  (\n' +
      '    StoreMappingGlobalGraphFetch\n' +
      '    (\n' +
      '      type = PartialClass[impls=[(meta::pure::graphFetch::domain::tests::Person | TestMapping.meta_pure_graphFetch_domain_tests_Person)], propertiesWithParameters = [firstName]]\n' +
      '      resultSizeRange = 0..1\n' +
      '      store = meta::relational::graphFetch::domain::tests::TestStore\n' +
      '      localGraphFetchExecutionNode = \n' +
      '         RelationalGraphFetch\n' +
      '         (\n' +
      '           type = PartialClass[impls=[(meta::pure::graphFetch::domain::tests::Person | TestMapping.meta_pure_graphFetch_domain_tests_Person)], propertiesWithParameters = [firstName]]\n' +
      '           nodeIndex = 0\n' +
      '           relationalNode = \n' +
      '              SQL\n' +
      '              (\n' +
      '                type = meta::pure::metamodel::type::Any\n' +
      '                resultColumns = [(\"pk_0\", INT), (\"firstName\", VARCHAR(200))]\n' +
      '                sql = select \"root\".id as \"pk_0\", \"root\".first_name as \"firstName\" from PersonTable as \"root\" where \"root\".last_name = \'yro\'\n' +
      '                connection = TestDatabaseConnection(type = \"H2\")\n' +
      '              )\n' +
      '           children = [\n' +
      '              \n' +
      '           ]\n' +
      '         )\n' +
      '      children = [\n' +
      '         \n' +
      '      ]\n' +
      '      localTreeIndices = [0, 1]\n' +
      '      dependencyIndices = []\n' +
      '    )\n' +
      '  )\n' +
      ')\n', $plans->at(1)->meta::pure::executionPlan::toString::planToString(meta::relational::extension::relationalExtensions()));
}

function meta::relational::graphFetch::domain::tests::testRuntime():meta::pure::runtime::Runtime[1]
{
   ^meta::pure::runtime::Runtime(
     connections = ^meta::relational::runtime::TestDatabaseConnection(
                      element = TestStore,
                      type = meta::relational::runtime::DatabaseType.H2,
                      timeZone = 'GMT',
                      testDataSetupSqls =
                          'drop table if exists Firm;\n'+
                          'create table Firm(id INT, legal_name VARCHAR(200));\n'+
                          'insert into Firm (id, legal_name) values (1, \'FirmA\');\n'+
                          'insert into Firm (id, legal_name) values (2, \'FirmB\');\n'+
                          'drop table if exists Person;\n'+
                          'create table Person(id INT, firm_id INT, first_name, last_name VARCHAR(200));\n'+
                          'insert into Person (id, firm_id, first_name, last_name) values (1, 1, \'John\', \'Doe\');\n'+
                          'insert into Person (id, firm_id, first_name, last_name) values (2, 1, \'Jane\', \'Smith\');\n'+
                          'insert into Person (id, firm_id, first_name, last_name) values (3, 2, \'Mark\', \'Moe\');\n'
                   )
    );
}

###Relational
Database meta::relational::graphFetch::domain::tests::TestStore
(
  Table FirmTable
  (
    id INT PRIMARY KEY,
    legal_name VARCHAR(200)    
  )

  Table PersonTable
  (
    id INT PRIMARY KEY,
    firm_id INT,
    first_name VARCHAR(200),
    last_name VARCHAR(200)
  )

  Join Firm_Person
  (
    FirmTable.id = PersonTable.firm_id
  )
)

###Mapping
import meta::pure::graphFetch::domain::tests::*;
import meta::relational::graphFetch::domain::tests::*;

Mapping meta::relational::graphFetch::domain::tests::TestMapping
(
  Domain : Relational
           {
             val : [TestStore]PersonTable.first_name
           }

  Person : Relational
           {
             firstName : [TestStore]PersonTable.first_name,
             lastName : [TestStore]PersonTable.last_name
           }

  Firm : Relational
           {
             legalName : [TestStore]FirmTable.legal_name,
             employees : [TestStore]@Firm_Person
           }
)


