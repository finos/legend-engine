// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::model::simple::*;
import meta::relational::graphFetch::tests::chain::*;
import meta::pure::executionPlan::profiles::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::alloy::connections::*;

function <<test.BeforePackage>> meta::relational::graphFetch::tests::chain::setup(): Boolean[1]
{
   meta::relational::tests::createTablesAndFillDb();
}

function <<test.Test, test.AlloyOnly>> {serverVersion.start='v1_19_0'} meta::relational::graphFetch::tests::chain::testRelationalChainExecutionFlat(): Boolean[1]
{
   let tree = #{
      Target_Firm {
         firmName,
         employeeCount
      }
   }#;
   
   let query = {|Target_Firm.all()->graphFetch($tree)->serialize($tree)};
   let mapping = M2M_Mapping;
   let modelChainConnection = ^meta::pure::mapping::modelToModel::ModelChainConnection(
      element = ^meta::pure::mapping::modelToModel::ModelStore(),
      mappings = [meta::relational::tests::simpleRelationalMapping]
   );
   let runtime = ^meta::pure::runtime::Runtime(
      connections = meta::relational::tests::testRuntime().connections->concatenate($modelChainConnection)
   );

   let result = execute($query, $mapping, $runtime, meta::relational::extension::relationalExtensions()).values;

   assertJsonStringsEqual(
      '[' +
         '{"firmName":"FIRM X","employeeCount":4},' +
         '{"firmName":"FIRM A","employeeCount":1},' +
         '{"firmName":"FIRM B","employeeCount":1},' +
         '{"firmName":"FIRM C","employeeCount":1}' +
      ']',
      $result
   );
}

function <<test.Test, test.AlloyOnly>> {serverVersion.start='v1_19_0'} meta::relational::graphFetch::tests::chain::testRelationalChainExecutionNested(): Boolean[1]
{
   let tree = #{
      Target_Firm {
         firmName,
         employeeCount,
         employees {
            fullName,
            managers
         }
      }
   }#;
   
   let query = {|Target_Firm.all()->graphFetch($tree)->serialize($tree)};
   let mapping = M2M_Mapping;
   let modelChainConnection = ^meta::pure::mapping::modelToModel::ModelChainConnection(
      element = ^meta::pure::mapping::modelToModel::ModelStore(),
      mappings = [meta::relational::tests::simpleRelationalMapping]
   );
   let runtime = ^meta::pure::runtime::Runtime(
      connections = meta::relational::tests::testRuntime().connections->concatenate($modelChainConnection)
   );

   let result = execute($query, $mapping, $runtime, meta::relational::extension::relationalExtensions()).values;

   assertJsonStringsEqual(
      '[' +
      '  {' +
      '    "firmName": "FIRM X",' +
      '    "employees": [' +
      '      {' +
      '        "fullName": "PETER SMITH",' +
      '        "managers": "John,Anthony"' +
      '      },' +
      '      {' +
      '        "fullName": "JOHN JOHNSON",' +
      '        "managers": "Anthony"' +
      '      },' +
      '      {' +
      '        "fullName": "JOHN HILL",' +
      '        "managers": "John,Anthony"' +
      '      },' +
      '      {' +
      '        "fullName": "ANTHONY ALLEN",' +
      '        "managers": ""' +
      '      }' +
      '    ],' +
      '    "employeeCount": 4' +
      '  },' +
      '  {' +
      '    "firmName": "FIRM A",' +
      '    "employees": [' +
      '      {' +
      '        "fullName": "FABRICE ROBERTS",' +
      '        "managers": ""' +
      '      }' +
      '    ],' +
      '    "employeeCount": 1' +
      '  },' +
      '  {' +
      '    "firmName": "FIRM B",' +
      '    "employees": [' +
      '      {' +
      '        "fullName": "OLIVER HILL",' +
      '        "managers": ""' +
      '      }' +
      '    ],' +
      '    "employeeCount": 1' +
      '  },' +
      '  {' +
      '    "firmName": "FIRM C",' +
      '    "employees": [' +
      '      {' +
      '        "fullName": "DAVID HARRIS",' +
      '        "managers": ""' +
      '      }' +
      '    ],' +
      '    "employeeCount": 1' +
      '  }' +
      ']',
      $result
   );
}

function <<test.Test, test.AlloyOnly>> {serverVersion.start='v1_19_0'} meta::relational::graphFetch::tests::chain::testRelationalChainExecutionWithFilter(): Boolean[1]
{
   let tree = #{
      Target_Firm {
         firmName,
         employeeCount
      }
   }#;
   
   let query = {|Target_Firm.all()->filter(x | $x.firmName == 'FIRM X')->graphFetch($tree)->serialize($tree)};
   let mapping = M2M_Mapping;
   let modelChainConnection = ^meta::pure::mapping::modelToModel::ModelChainConnection(
      element = ^meta::pure::mapping::modelToModel::ModelStore(),
      mappings = [meta::relational::tests::simpleRelationalMapping]
   );
   let runtime = ^meta::pure::runtime::Runtime(
      connections = meta::relational::tests::testRuntime().connections->concatenate($modelChainConnection)
   );

   let result = execute($query, $mapping, $runtime, meta::relational::extension::relationalExtensions()).values;

   assertJsonStringsEqual('{"firmName":"FIRM X","employeeCount":4}', $result);
}

function <<test.Test, test.AlloyOnly>> {serverVersion.start='v1_19_0'} meta::relational::graphFetch::tests::chain::testRelationalChainExecutionWithInScopeVariableFilter(): Boolean[1]
{
   let tree = #{
      Target_Firm {
         firmName,
         employeeCount
      }
   }#;
   
   let query = {|
      let name = 'FIRM X';
      Target_Firm.all()->filter(x | $x.firmName == $name)->graphFetch($tree)->serialize($tree);
   };
   let mapping = M2M_Mapping;
   let modelChainConnection = ^meta::pure::mapping::modelToModel::ModelChainConnection(
      element = ^meta::pure::mapping::modelToModel::ModelStore(),
      mappings = [meta::relational::tests::simpleRelationalMapping]
   );
   let runtime = ^meta::pure::runtime::Runtime(
      connections = meta::relational::tests::testRuntime().connections->concatenate($modelChainConnection)
   );

   let result = execute($query, $mapping, $runtime, meta::relational::extension::relationalExtensions()).values;

   assertJsonStringsEqual('{"firmName":"FIRM X","employeeCount":4}', $result);
}

###Pure
import meta::relational::graphFetch::tests::chain::*;

Class meta::relational::graphFetch::tests::chain::Target_Firm
{
   firmName      : String[1];
   employeeCount : Integer[1];
   employees     : Target_Person[*];
}

Class meta::relational::graphFetch::tests::chain::Target_Person
{
   fullName : String[1];
   managers : String[0..1]; 
}

###Mapping
import meta::relational::tests::model::simple::*;
import meta::relational::graphFetch::tests::chain::*;

Mapping meta::relational::graphFetch::tests::chain::M2M_Mapping
(
   Target_Firm : Pure {
      ~src Firm
      firmName      : $src.legalName->toUpper(),
      employeeCount : $src.employees->count(),
      employees     : $src.employees
   }
   
   Target_Person : Pure {
      ~src Person
      fullName : $src.firstName->toUpper() + ' ' + $src.lastName->toUpper(),
      managers : $src.manager.firstName->concatenate($src.manager.manager.firstName)->concatenate($src.manager.manager.manager.firstName)->joinStrings(',')
   }
)
