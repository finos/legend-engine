// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::profiles::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::runtime::*;
import meta::relational::functions::toDDL::*;
import meta::relational::graphFetch::tests::isolation::*;
import meta::relational::metamodel::*;
import meta::relational::metamodel::execute::*;
import meta::relational::runtime::*;

function <<access.private>> meta::relational::graphFetch::tests::isolation::getRuntime(db: Database[1]):Runtime[1]
{
   ^Runtime(connections = ^TestDatabaseConnection(element=$db, type=DatabaseType.H2))
}

function <<test.Test, test.AlloyOnly>> {serverVersion.start='v1_19_0'} meta::relational::graphFetch::tests::isolation::testIsolationOfPropertyTargetFilter(): Boolean[1]
{
   let runtime = getRuntime(IsolationTestDB1);

   let connection = $runtime.connections->at(0)->cast(@DatabaseConnection);
   dropAndCreateTableInDb(IsolationTestDB1, 'firmTable', $connection);
   dropAndCreateTableInDb(IsolationTestDB1, 'personTable', $connection);
   dropAndCreateTableInDb(IsolationTestDB1, 'personFirmBridgeTable', $connection);
   executeInDb('insert into firmTable (id, name) values (1, \'Firm1\');', $connection);
   executeInDb('insert into personTable (id, firstName, lastName, active) values (1, \'F1\', \'L1\', 0);', $connection);
   executeInDb('insert into personTable (id, firstName, lastName, active) values (2, \'F2\', \'L2\', 1);', $connection);
   executeInDb('insert into personTable (id, firstName, lastName, active) values (3, \'F3\', \'L3\', 1);', $connection);
   executeInDb('insert into personFirmBridgeTable (firmId, personId, isCeo) values (1, 1, 1);', $connection);
   executeInDb('insert into personFirmBridgeTable (firmId, personId, isCeo) values (1, 2, 1);', $connection);
   executeInDb('insert into personFirmBridgeTable (firmId, personId, isCeo) values (1, 3, 0);', $connection);

   let tree = #{
      Firm1 {
         legalName,
         employees {
            firstName,
            lastName
         },
         ceo {
            firstName,
            lastName
         }
      }
   }#;
   let query = {|Firm1.all()->graphFetch($tree)->serialize($tree)};
   let mapping = IsolationTestMapping1;

   let result = execute($query, $mapping, $runtime, meta::relational::extension::relationalExtensions()).values;

   assertJsonStringsEqual(
      '{"legalName":"Firm1","employees":[{"firstName":"F2","lastName":"L2"},{"firstName":"F3","lastName":"L3"}],"ceo":{"firstName":"F2","lastName":"L2"}}',
      $result
   );
}



###Pure
import meta::relational::graphFetch::tests::isolation::*;

Class meta::relational::graphFetch::tests::isolation::Firm1
{
   legalName: String[1];
   employees: Person1[*];
   ceo: Person1[1];
}

Class meta::relational::graphFetch::tests::isolation::Person1
{
   firstName: String[1];
   lastName: String[1];
}

###Relational
Database meta::relational::graphFetch::tests::isolation::IsolationTestDB1
(
   Table firmTable(id INT PRIMARY KEY, name VARCHAR(100))
   Table personTable(id INT PRIMARY KEY, firstName VARCHAR(100), lastName VARCHAR(100), active BIT)
   Table personFirmBridgeTable(firmId INT PRIMARY KEY, personId INT PRIMARY KEY, isCeo BIT)

   Join firmTable_personFirmBridgeTable(firmTable.id = personFirmBridgeTable.firmId)
   Join personTable_personFirmBridgeTable_employees(personTable.id = personFirmBridgeTable.personId)
   Join personTable_personFirmBridgeTable_ceo(personTable.id = personFirmBridgeTable.personId and personFirmBridgeTable.isCeo = 1)

   Filter activePersonFilter(personTable.active = 1)
)

###Mapping
import meta::relational::graphFetch::tests::isolation::*;

Mapping meta::relational::graphFetch::tests::isolation::IsolationTestMapping1
(
   Firm1 : Relational
   {
      scope([IsolationTestDB1]firmTable)
      (
         legalName: name,
         employees: @firmTable_personFirmBridgeTable > @personTable_personFirmBridgeTable_employees,
         ceo: @firmTable_personFirmBridgeTable > (INNER) @personTable_personFirmBridgeTable_ceo
      )
   }

   Person1 : Relational
   {
      ~filter [IsolationTestDB1]activePersonFilter
      scope([IsolationTestDB1]personTable)
      (
         firstName: firstName,
         lastName: lastName
      )
   }
)
