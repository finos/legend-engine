// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


###Pure
import meta::relational::graphFetch::tests::crossDatabase::*;

Class meta::relational::graphFetch::tests::crossDatabase::Firm
{
   legalName : String[1];
}

Class meta::relational::graphFetch::tests::crossDatabase::Employee
{
   name : String[1];
}

Class meta::relational::graphFetch::tests::crossDatabase::Ceo
{
   id   : Integer[1];
   name : String[1];
}

Association meta::relational::graphFetch::tests::crossDatabase::EmploymentAssociation
{
   firm      : Firm[0..1];
   employees : Employee[*];
}

Association meta::relational::graphFetch::tests::crossDatabase::CeoAssociation
{
   firm : Firm[0..1];
   ceo  : Ceo[1];
}

###Relational
Database meta::relational::graphFetch::tests::crossDatabase::FirmDB
(
   Table firm(id INT PRIMARY KEY, legalName VARCHAR(100), ceoIdentifier INT)
)

###Relational
Database meta::relational::graphFetch::tests::crossDatabase::EmployeeDB
(
   Table employee(name VARCHAR(100) PRIMARY KEY, id INT, ceoName VARCHAR(100))

   Table ceo(name VARCHAR(100) PRIMARY KEY, identifier INT)

   Join employee_ceo(employee.ceoName = ceo.name)
)


###Mapping
import meta::relational::graphFetch::tests::crossDatabase::*;

Mapping meta::relational::graphFetch::tests::crossDatabase::CrossMappingWithRelOpWithJoinKeys
(
   Firm : Relational
   {
      +ceoId : Integer[1] : [FirmDB]firm.ceoIdentifier,
      legalName : [FirmDB]firm.legalName
   }

   Employee : Relational
   {
      +ceoId : Integer[1] : [EmployeeDB]@employee_ceo | ceo.identifier,
      name : [EmployeeDB]employee.name
   }

   Ceo : Relational
   {
      id : [EmployeeDB]ceo.identifier,
      name : [EmployeeDB]ceo.name
   }

   CeoAssociation : XStore
   {
      ceo : $this.ceoId == $that.id
   }

   EmploymentAssociation : XStore
   {
      employees : $this.ceoId == $that.ceoId
   }
)

###Pure
import meta::pure::executionPlan::profiles::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::runtime::*;
import meta::relational::graphFetch::tests::crossDatabase::*;
import meta::relational::metamodel::execute::*;
import meta::relational::runtime::*;

function <<test.BeforePackage>> meta::relational::graphFetch::tests::crossDatabase::setUpDBs():Any[*]
{
   let runtime1 = meta::relational::tests::testRuntime(EmployeeDB);
   let connection1 = $runtime1.connections->toOne()->cast(@DatabaseConnection);

   executeInDb('Drop table if exists employee;', $connection1);
   executeInDb('Create Table employee(name VARCHAR(100), id INT, ceoName VARCHAR(100));', $connection1);
   executeInDb('Insert into employee values (\'E1\', 1, \'C1\');', $connection1);
   executeInDb('Insert into employee values (\'E2\', 2, \'C1\');', $connection1);
   executeInDb('Insert into employee values (\'E3\', 3, \'C2\');', $connection1);

   executeInDb('Drop table if exists ceo;', $connection1);
   executeInDb('Create Table ceo(name VARCHAR(100), identifier INT);', $connection1);
   executeInDb('Insert into ceo values (\'C1\', 1);', $connection1);
   executeInDb('Insert into ceo values (\'C2\', 2);', $connection1);


   let runtime2 = meta::relational::tests::testRuntime(FirmDB);
   let connection2 = $runtime2.connections->toOne()->cast(@DatabaseConnection);

   executeInDb('Drop table if exists firm;', $connection2);
   executeInDb('Create Table firm(id INT, legalName VARCHAR(100), ceoIdentifier INT);', $connection2);
   executeInDb('Insert into firm values (1, \'F1\', 1);', $connection2);
   executeInDb('Insert into firm values (2, \'F2\', 2);', $connection2);
}

function <<test.Test, test.AlloyOnly>> {serverVersion.start='v1_19_0'} meta::relational::graphFetch::tests::crossDatabase::testCrossMappingWithRelOpWithJoinKeys():Boolean[1]
{
   let tree = #{
      Firm {
         legalName,
         ceo {
            name
         },
         employees {
            name
         }
      }
   }#;
   
   
   let runtime = ^Runtime(connections = meta::relational::tests::testRuntime(EmployeeDB)->concatenate(meta::relational::tests::testRuntime(FirmDB)).connections);
   
   let result = execute(
      {|Firm.all()->graphFetch($tree)->serialize($tree)},
      CrossMappingWithRelOpWithJoinKeys,
      $runtime,
      meta::relational::extension::relationalExtensions()
   ).values;
   
   assertJsonStringsEqual(
      '[' +
         '{"legalName":"F1","ceo":{"name":"C1"},"employees":[{"name":"E1"},{"name":"E2"}]},' + 
         '{"legalName":"F2","ceo":{"name":"C2"},"employees":[{"name":"E3"}]}' +
      ']',
      $result
   );
}
