// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::engine::java::typeInfo::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::engine::*;
import meta::pure::mapping::*;
import meta::pure::executionPlan::*;
import meta::relational::mapping::*;

function meta::pure::executionPlan::engine::java::storeObjectReferenceIdentifier(conventions:Conventions[1]):String[1]
{
   let methodName = $conventions->className(IReferencedObject).methods->toOne().name;
   let identifier = $methodName->substring(3, 4)->toLower()+$methodName->substring(4);
   assert($methodName == $conventions->getterName($identifier), 'Getter name assumptions violated');
   $identifier;
}

function meta::pure::executionPlan::engine::java::setIdPropertyName():String[1]
{
   'setId$'
}

function meta::pure::executionPlan::engine::java::prepareForClassResult(node: RelationalClassInstantiationExecutionNode[1], path: String[1], context:GenerationContext[1], debug: DebugContext[1]):GenerationContext[1]
{  
   let classResultType = $node.resultType->cast(@ClassResultType);
   let newInfo = $context.typeInfos->addForInstanceSetImplementations($classResultType.setImplementations->cast(@InstanceSetImplementation));
   ^$context(typeInfos = $newInfo);
}