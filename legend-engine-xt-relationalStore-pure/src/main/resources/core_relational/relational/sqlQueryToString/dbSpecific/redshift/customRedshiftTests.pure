// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
Class meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::domain::Person
{
   firstName: String[1];
   lastName: String[1];
   age:Integer[1];
   key:Integer[1];
}

Class meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::domain::Thing
{
   name: String[1];
   id: Integer[1];
}

###Relational
Database meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::db::rsDb
(
   Table "person table" (ID INT PRIMARY KEY, firstName VARCHAR(200), lastName VARCHAR(200), age INT, key INT)
   Schema dataset1
   (
      Table "thing table" (ID INT PRIMARY KEY, NAME VARCHAR(200))
   )

   Join Person_Person("person table".key = {target}.key)
)

###Mapping
Mapping meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::mapping::simpleRelationalMappingPersonForBQ
(
   meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::domain::Person : Relational
   {
      scope([meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::db::rsDb])
      (
         firstName : "person table".firstName,
         lastName: "person table".lastName,
         age : @Person_Person|"person table".key
      )
   }

   meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::domain::Thing : Relational
   {
    ~primaryKey
    (
      [meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::db::rsDb]dataset1."thing table".ID
    )
    ~mainTable [meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::db::rsDb]dataset1."thing table"
    id: [meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::db::rsDb]dataset1."thing table".ID,
    name: [meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::db::rsDb]dataset1."thing table".NAME
  }

)

###Pure
import meta::relational::runtime::*;
import meta::relational::metamodel::execute::*;
import meta::relational::mapping::*;
import meta::relational::functions::asserts::*;
import meta::relational::runtime::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::relational::functions::sqlstring::*;
import meta::relational::tests::mapping::sqlFunction::model::domain::*;
import meta::relational::tests::mapping::sqlFunction::model::mapping::*;
import meta::pure::runtime::*;
import meta::pure::profiles::*;



function meta::relational::functions::sqlQueryToString::tests::redshift::testRuntimeForRedshift():Runtime[1]
{
   meta::relational::tests::testRuntime(meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::db::rsDb);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::tableAndColumnNamesAreQuoted():Boolean[1]
{
   let result = toSQLString(
    |meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::domain::Person.all()->project([s | $s.age], ['KEY']),
    meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::mapping::simpleRelationalMappingPersonForBQ,
    meta::relational::runtime::DatabaseType.Redshift,
    meta::relational::extension::relationalExtensions());
   assertEquals('select "person_table_d#2_d_m1".key as "KEY" from "person table" as "root" left outer join "person table" as "person_table_d#2_d_m1" on ("root".key = "person_table_d#2_d_m1".key)', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::tableWithSchema():Boolean[1]
{
   let result = toSQLString(
    |meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::domain::Thing.all()->project([s | $s.id], ['ID']),
    meta::relational::functions::sqlQueryToString::tests::redshift::testQuoting::mapping::simpleRelationalMappingPersonForBQ,
    meta::relational::runtime::DatabaseType.Redshift,
    meta::relational::extension::relationalExtensions());
   assertEquals('select "root".ID as "ID" from dataset1."thing table" as "root"', $result);
}


function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::windowFunction():Boolean[1]
{
   let func = {|meta::relational::tests::model::simple::Person.all()
      ->project([
         col(p |$p.lastName,'lastName')
         ,col(window(p |$p.firstName ),sortAsc(p |$p.lastName), func(p |$p.age->toOne(), y| $y->average()),'ageAverageWindow')
      ])};
   let result = toSQLString(
     $func,
     meta::relational::tests::simpleRelationalMappingInc,
     DatabaseType.Redshift,
     meta::relational::extension::relationalExtensions());
   assertEquals('select "root".LASTNAME as "lastName", avg(1.0 * "root".AGE) OVER (Partition By "root".FIRSTNAME Order By "root".LASTNAME ASC) as "ageAverageWindow" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::testParseDateTime():Boolean[1]
{
   let dt = %2015-01-01T00:00:00.000;
   let result = toSQLString(
    |Trade.all()->project(t | $t.settlementDateTime, 'settlementDateTime')->filter(r | $r.getDateTime('settlementDateTime') < $dt),
    meta::relational::tests::simpleRelationalMapping,
    DatabaseType.Redshift,
    meta::relational::extension::relationalExtensions());
   assertEquals('select "root".settlementDateTime as "settlementDateTime" from tradeTable as "root" where "root".settlementDateTime < Timestamp\'2015-01-01 00:00:00.000\'', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::testParseDate():Boolean[1]
{
   let dt = %2015-01-01T00:00:00.000;
   let result = toSQLString(
    |Trade.all()->project(t | $t.date, 'date')->filter(r | $r.getDate('date') < $dt),
    meta::relational::tests::simpleRelationalMapping,
     DatabaseType.Redshift,
     meta::relational::extension::relationalExtensions());
   assertEquals('select "root".tradeDate as "date" from tradeTable as "root" where "root".tradeDate < Timestamp\'2015-01-01 00:00:00.000\'', $result);
}


function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::testSimpleJoinStrings():Boolean[1]
{
   let result = toSQLString(
     |Person.all()->groupBy([p|$p.firstName], agg( x|$x.lastName, y|$y->joinStrings('*')),['firstName', 'lastNames']),
      meta::relational::tests::simpleRelationalMapping,
      DatabaseType.Redshift,
      meta::relational::extension::relationalExtensions());
   assertSameSQL('select "root".FIRSTNAME as "firstName", listagg("root".LASTNAME, \'*\') as "lastNames" from personTable as "root" group by "firstName"', $result);
}


function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::testConcat():Boolean[1]
{
   let result = toSQLString(
    |Person.all()->project([p|$p.name, p|$p.addresses.name], ['name','address']),
    meta::relational::tests::simpleRelationalMapping,
    DatabaseType.Redshift,
    meta::relational::extension::relationalExtensions());
   assertSameSQL('select concat("root".FIRSTNAME, \' \', "root".LASTNAME) as "name", "union_d#5_d_m2"."addressTableNAME" as "address" from personTable as "root" left outer join (select "addressTable_d#6".ID as ID, null as ADDRESSID, "addressTable_d#6".NAME as "addressTableNAME" from addressTable as "addressTable_d#6" UNION ALL select "firmTable_d#8".ID as ID, "firmTable_d#8".ADDRESSID as ADDRESSID, "addressTable_d#6_f_d".NAME as "addressTableNAME" from firmTable as "firmTable_d#8" left outer join addressTable as "addressTable_d#6_f_d" on ("addressTable_d#6_f_d".ID = "firmTable_d#8".ADDRESSID)) as "union_d#5_d_m2" on ("union_d#5_d_m2".ID = "root".FIRMID or "union_d#5_d_m2".ID = "root".ADDRESSID)', $result);

}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::atan2():Boolean[1]
{
   let result = toSQLString(
    |SqlFunctionDemo.all()->project([s | $s.floatATan2Result], ['atan2']),
      meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
      DatabaseType.Redshift,
      meta::relational::extension::relationalExtensions());
   assertSameSQL('select atan2("root".float1,"root".int1) as "atan2" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::concat():Boolean[1]
{
   let result = toSQLString(
     |Person.all()->project([p|$p.name] ,['name']),
      meta::relational::tests::simpleRelationalMapping,
      DatabaseType.Redshift,
      meta::relational::extension::relationalExtensions());
   assertSameSQL('select concat("root".FIRSTNAME, \' \', "root".LASTNAME) as "name" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::hour():Boolean[1]
{
    let result = toSQLString(
        |SqlFunctionDemo.all()->project([s | $s.hour], ['hour']),
        meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
        meta::relational::runtime::DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select date_part(hour, "root".dateTime) as "hour" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::weekofyear():Boolean[1]
{
    let result = toSQLString(
        |SqlFunctionDemo.all()->project([s | $s.week], ['weekofyear']),
        meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
        meta::relational::runtime::DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select extract(week from "root".dateTime) as "weekofyear" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::cast():Boolean[1]
{
    let result = toSQLString(
        |SqlFunctionDemo.all()->project([s | $s.string3Integer], ['string3Integer']),
        meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
        meta::relational::runtime::DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select cast("root".string3 as integer) as "string3Integer" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::toString():Boolean[1]
{
    let result = toSQLString(
        |SqlFunctionDemo.all()->project([s | $s.int1String], ['int1String']),
        meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
        meta::relational::runtime::DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select cast("root".int1 as varchar) as "int1String" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::today():Boolean[1]
{
    let result = toSQLString(
        |Trade.all()->filter(d | $d.date == today())->project(x | $x.date, 'date'),
        meta::relational::tests::simpleRelationalMapping,
        meta::relational::runtime::DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select "root".tradeDate as "date" from tradeTable as "root" where "root".tradeDate = current_date', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::stddev_samp():Boolean[1]
{
    let result = toSQLString(
        |SqlFunctionDemo.all()->project([s | $s.float1StdDevSample], 'stdDevSample'),
        meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
        meta::relational::runtime::DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select stddev_samp("root".int1) as "stdDevSample" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::stddev_pop():Boolean[1]
{

    let result = toSQLString(
        |SqlFunctionDemo.all()->project([s | $s.float1StdDevPopulation], 'float1StdDevPopulation'),
        meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
        meta::relational::runtime::DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select stddev_pop("root".int1) as "float1StdDevPopulation" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::substring():Boolean[1]
{
    let result = toSQLString(
        |Person.all()->filter(p|$p.firstName->substring(1, 5) == 'John'),
        meta::relational::tests::simpleRelationalMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select "root".ID as "pk_0", "root".FIRSTNAME as "firstName", "root".AGE as "age", "root".LASTNAME as "lastName" from personTable as "root" where substring("root".FIRSTNAME, 1, 5) = \'John\'', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::second():Boolean[1]
{
    let result = toSQLString(
        |Trade.all()->project([ t | $t.settlementDateTime->cast(@Date)->toOne()->second()], ['second']),
        meta::relational::tests::simpleRelationalMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select extract( second from "root".settlementDateTime) as "second" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::rtrim():Boolean[1]
{
    let result = toSQLString(
        |SqlFunctionDemo.all()->project([s | $s.rtrimResult], ['rtrim']),
        meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select rtrim("root".string2) as "rtrim" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::round():Boolean[1]
{
    let result = toSQLString(
        |SqlFunctionDemo.all()->project([s | $s.float1Round], ['round']),
        meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select round("root".float1, 0) as "round" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::right():Boolean[1]
{
    let result = toSQLString(
        |SqlFunctionDemo.all()->project([s | $s.string1Right], ['right']),
        meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select right("root".string1,2) as "right" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::rem():Boolean[1]
{
    let result = toSQLString(
        |Trade.all()->project([t| rem($t.quantity, $t.id)], ['rem']),
        meta::relational::tests::simpleRelationalMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select mod("root".quantity,"root".ID) as "rem" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::position():Boolean[1]
{
    let result = toSQLString(
        |meta::relational::tests::mapping::propertyfunc::model::domain::Person.all()->project(p|$p.firstName, 'firstName'),
        meta::relational::tests::mapping::propertyfunc::model::mapping::PropertyfuncMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select substring("root".FULLNAME, 0, position(\',\' in "root".FULLNAME)-1) as "firstName" from personTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::parseInteger():Boolean[1]
{
    let result = toSQLString(
        |SqlFunctionDemo.all()->project([s | $s.string2Integer], ['parseInteger']),
        meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select cast("root".string2Integer as integer) as "parseInteger" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::parseFloat():Boolean[1]
{
    let result = toSQLString(
        |SqlFunctionDemo.all()->project([s | $s.string2Float], ['string2Float']),
        meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select cast("root".string2float as float) as "string2Float" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::parseDecimal():Boolean[1]
{
    let result = toSQLString(
        |SqlFunctionDemo.all()->project([s | $s.string2Decimal], ['string2Decimal']),
        meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select cast("root".string2Decimal as decimal) as "string2Decimal" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::now():Boolean[1]
{
    let result = toSQLString(
        |Trade.all()->filter(d | $d.date == now())->project(x | $x.date, 'date'),
        meta::relational::tests::simpleRelationalMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select "root".tradeDate as "date" from tradeTable as "root" where "root".tradeDate = now()', $result);
}

// month same as month number
function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::monthNumber():Boolean[1]
{
    let result = toSQLString(
        |Trade.all()->project([t| monthNumber($t.settlementDateTime)], ['settlementMonthNumber']),
        meta::relational::tests::simpleRelationalMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select extract(month from "root".settlementDateTime) as "settlementMonthNumber" from tradeTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::mod():Boolean[1]
{
    let result = toSQLString(
        |SqlFunctionDemo.all()->project([s | $s.floatModResult ], ['mod']),
        meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select mod("root".int1,2) as "mod" from dataTable as "root"', $result);
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::redshift::minute():Boolean[1]
{
    let result = toSQLString(
        |Trade.all()->project([t | $t.settlementDateTime->cast(@Date)->toOne()->minute()],['settlementDateTimeMinute']),
        meta::relational::tests::simpleRelationalMapping,
        DatabaseType.Redshift,
        meta::relational::extension::relationalExtensions());
    assertEquals('select extract(minute from "root".settlementDateTime) as "settlementDateTimeMinute" from tradeTable as "root"', $result);
}