import meta::relational::functions::sqlQueryToString::db2::*;
import meta::relational::functions::sqlQueryToString::default::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::metamodel::*;
import meta::relational::metamodel::operation::*;
import meta::relational::metamodel::relation::*;
import meta::relational::runtime::*;
import meta::pure::extension::*;
import meta::relational::extension::*;

function <<db.ExtensionLoader>> meta::relational::functions::sqlQueryToString::db2::dbExtensionLoaderForDB2():DbExtensionLoader[1]
{
  ^DbExtensionLoader(dbType = DatabaseType.DB2, loader = createDbExtensionForDB2__DbExtension_1_);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::db2::createDbExtensionForDB2():DbExtension[1]
{
   let reservedWords = defaultReservedWords();
   let literalProcessors = getDefaultLiteralProcessors();
   let literalProcessor = {type:Type[1]| $literalProcessors->get(if($type->instanceOf(Enumeration), | Enum, | $type))->toOne()};
   let dynaFuncDispatch = getDynaFunctionToSqlDefault($literalProcessor)->groupBy(d| $d.funcName)->putAll(
     getDynaFunctionToSqlForDB2()->groupBy(d| $d.funcName))->getDynaFunctionDispatcher();

   ^DbExtension(
      isBooleanLiteralSupported = false,
      collectionThresholdLimit = 32767,
      aliasLimit = 128,
      isDbReservedIdentifier = {str:String[1]| $str->in($reservedWords)},
      literalProcessor = $literalProcessor,
      windowColumnProcessor = processWindowColumn_WindowColumn_1__SqlGenerationContext_1__String_1_,
      joinStringsProcessor = processJoinStringsOperationForDB2_JoinStrings_1__SqlGenerationContext_1__String_1_,
      selectSQLQueryProcessor = processSelectSQLQueryForDB2_SelectSQLQuery_1__SqlGenerationContext_1__Boolean_1__String_1_,
      columnNameToIdentifier = columnNameToIdentifierDefault_String_1__DbConfig_1__String_1_,
      identifierProcessor = processIdentifierWithDoubleQuotes_String_1__DbConfig_1__String_1_,
      dynaFuncDispatch = $dynaFuncDispatch,
      ddlCommandsTranslator = getDDLCommandsTranslator(),
      processTempTableName = processTempTableNameDB2_String_1__String_1_
   );
}

function meta::relational::functions::sqlQueryToString::db2::getDDLCommandsTranslator(): RelationalDDLCommandsTranslator[1]
{
  ^RelationalDDLCommandsTranslator(
                createTable = translateCreateTableStatementForDB2_CreateTableSQL_1__DbConfig_1__String_1_,
                dropTable = translateDropTableStatementForDB2_DropTableSQL_1__DbConfig_1__String_1_,
                loadTable = loadValuesToDbTableForDB2_LoadTableSQL_1__DbConfig_1__String_MANY_
              );
}

function meta::relational::functions::sqlQueryToString::db2::processTempTableNameDB2(tempTableName:String[1]) : String[1]
{
  'SESSION.' + $tempTableName;
}  

function meta::relational::functions::sqlQueryToString::db2::translateCreateTableStatementForDB2(c:CreateTableSQL[1], dbConfig: DbConfig[1]): String[1]
{
   if($c.isTempTable->isTrue(),| 'DECLARE GLOBAL TEMPORARY TABLE ' + $c.table->tableToString($dbConfig) + '('+ $c.table.columns->map(r|$r->match([c:Column[1]| $c.name->processColumnName($dbConfig) + ' ' + getColumnTypeSqlTextDefault($c.type),
                                                                                                                                          r:RelationalOperationElement[1]| fail('Only \'Column\' types are supported when creating temporary tables, found: '+$r->type()->toOne()->elementToPath());'';]))->joinStrings(',') + ') ON COMMIT PRESERVE ROWS NOT LOGGED'
                              ,| $c->meta::relational::functions::sqlQueryToString::default::translateCreateTableStatementDefault($dbConfig))

}

function meta::relational::functions::sqlQueryToString::db2::translateDropTableStatementForDB2(d:DropTableSQL[1], dbConfig: DbConfig[1]): String[1]
{
   let t= $d.table;
   'Drop table '+if($t.schema.name == 'default',|'',|$t.schema.name+'.')+$t.name;
}

function meta::relational::functions::sqlQueryToString::db2::loadValuesToDbTableForDB2(l:LoadTableSQL[1], dbConfig: DbConfig[1]): String[*]
{

  if($l.absolutePathToFile->isNotEmpty(),| fail('Loading data into a table using a file is not supported for DB2'),|[]);
  $l->meta::relational::functions::sqlQueryToString::default::loadValuesToDbTableDefault($dbConfig);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::db2::getDynaFunctionToSqlForDB2(): DynaFunctionToSql[*]
{
  let allStates = allGenerationStates();

  [
    dynaFnToSql('adjust',                 $allStates,            ^ToSql(format='%s', transform=transformAdjustDB2SQL_String_3__String_1_)),
    dynaFnToSql('atan2',                  $allStates,            ^ToSql(format='atan2(%s,%s)')),
    dynaFnToSql('concat',                 $allStates,            ^ToSql(format='%s', transform={p:String[*]|$p->joinStrings('(',' concat ', ')')})),
    dynaFnToSql('convertDate',            $allStates,            ^ToSql(format='%s', transform={p:String[*] | $p->convertToDateDB2()})),
    dynaFnToSql('convertDateTime',        $allStates,            ^ToSql(format='%s' , transform={p:String[*] | $p->convertToDateTimeDB2()})),
    dynaFnToSql('convertVarchar128',      $allStates,            ^ToSql(format='cast(%s as VARCHAR(128))')),
    dynaFnToSql('datePart',               $allStates,            ^ToSql(format='date(%s)')),
    dynaFnToSql('dayOfWeekNumber',        $allStates,            ^ToSql(format='dayofweek_iso(%s)')),
    dynaFnToSql('firstDayOfMonth',        $allStates,            ^ToSql(format='date(1) + (year(%s)-1) YEARS + (month(%s)-1) MONTHS', transform={p:String[1] | $p->repeat(2)})),
    dynaFnToSql('firstDayOfQuarter',      $allStates,            ^ToSql(format='date(1) + ((year(%s)-1) YEARS) + (3 * QUARTER(%s) - 3) MONTHS', transform={p:String[1] | $p->repeat(2)})),
    dynaFnToSql('firstDayOfThisMonth',    $allStates,            ^ToSql(format='date(1) + (year(current date)-1) YEARS + (month(current date)-1) MONTHS')),
    dynaFnToSql('firstDayOfThisQuarter',  $allStates,            ^ToSql(format='date(1) + ((year(current date)-1) YEARS) + (3 * QUARTER(current date) - 3) MONTHS')),
    dynaFnToSql('firstDayOfThisYear',     $allStates,            ^ToSql(format='date(1) + (year(current date)-1) YEARS')),
    dynaFnToSql('firstDayOfYear',         $allStates,            ^ToSql(format='date(1) + (year(%s)-1) YEARS')),
    dynaFnToSql('hour',                   $allStates,            ^ToSql(format='hour(%s)')),
    dynaFnToSql('joinStrings',            $allStates,            ^ToSql(format='listagg(%s,%s)')),
    dynaFnToSql('length',                 $allStates,            ^ToSql(format='CHARACTER_LENGTH(%s,CODEUNITS32)')),
    dynaFnToSql('minute',                 $allStates,            ^ToSql(format='minute(%s)')),
    dynaFnToSql('mod',                    $allStates,            ^ToSql(format='mod(%s,%s)')),
    dynaFnToSql('month',                  $allStates,            ^ToSql(format='month(%s)')),
    dynaFnToSql('monthNumber',            $allStates,            ^ToSql(format='month(%s)')),
    dynaFnToSql('mostRecentDayOfWeek',    $allStates,            ^ToSql(format='%s + case when %s - dayofweek(%s) > 0 then %s - dayofweek(%s) - 7 else %s - dayofweek(%s) end DAY', transform={p:String[1..2] | $p->formatMostRecentDb2('current date')}, parametersWithinWhenClause = [false, false])),
    dynaFnToSql('now',                    $allStates,            ^ToSql(format='current timestamp')),
    dynaFnToSql('parseFloat',             $allStates,            ^ToSql(format='cast(%s as float)')),
    dynaFnToSql('parseInteger',           $allStates,            ^ToSql(format='cast(%s as integer)')),
    dynaFnToSql('position',               $allStates,            ^ToSql(format='position(%s, %s)')),
    dynaFnToSql('previousDayOfWeek',      $allStates,            ^ToSql(format='%s + case when %s - dayofweek(%s) >= 0 then %s - dayofweek(%s) - 7 else %s - dayofweek(%s) end DAY', transform={p:String[1..2] | $p->formatMostRecentDb2('current date')}, parametersWithinWhenClause = [false, false])),
    dynaFnToSql('quarter',                $allStates,            ^ToSql(format='quarter(%s)')),
    dynaFnToSql('quarterNumber',          $allStates,            ^ToSql(format='quarter(%s)')),
    dynaFnToSql('rem',                    $allStates,            ^ToSql(format='mod(%s,%s)')),
    dynaFnToSql('round',                  $allStates,            ^ToSql(format='round(%s, %s)', transform=transformRound_String_MANY__String_MANY_)),
    dynaFnToSql('rtrim',                  $allStates,            ^ToSql(format='rtrim(%s)')),
    dynaFnToSql('second',                 $allStates,            ^ToSql(format='second(%s)')),
    dynaFnToSql('substring',              $allStates,            ^ToSql(format='substr%s', transform={p:String[*]|$p->joinStrings('(', ', ', ')')})),
    dynaFnToSql('stdDevPopulation',       $allStates,            ^ToSql(format='stddev_pop(%s)')),
    dynaFnToSql('stdDevSample',           $allStates,            ^ToSql(format='stddev_samp(%s)')),
    dynaFnToSql('today',                  $allStates,            ^ToSql(format='current date')),
    dynaFnToSql('toString',               $allStates,            ^ToSql(format='cast(%s as varchar(16000))')),
    dynaFnToSql('weekOfYear',             $allStates,            ^ToSql(format='week_iso(%s)')),
    dynaFnToSql('year',                   $allStates,            ^ToSql(format='year(%s)'))
  ];
}

function <<access.private>> meta::relational::functions::sqlQueryToString::db2::transformAdjustDB2SQL(p:String[3]):String[1]
{
   let startDate = $p->at(0);
   let number = $p->at(1)->parseInteger();
   let unit = $p->at(2)->removeQuotesIfExist();

   'date(%s) %s %s %s'->format([
      $startDate,
      if ($number < 0 , | '-', | '+'),
      if($unit == 'WEEKS', | $number * 7, | $number)->abs()->toString(),
      if($unit == 'WEEKS', | 'DAYS', | $unit)
   ]);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::db2::convertToDateDB2(params:String[*]):String[1]
{
   $params->convertDateFunctionHasCorrectParams();
   let dateFormat = if( $params->size() == 1 ,|'\'YYYY-MM-DD\'',| $params->at(1));
   //http://www.ibm.com/support/knowledgecenter/SSEPEK_10.0.0/sqlref/src/tpc/db2z_bif_todate.html
   'to_date('+$params->at(0)+','+$dateFormat +')';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::db2::convertToDateTimeDB2(params:String[*]):String[1]
{
   $params->convertDateTimeFunctionHasCorrectParams();
   let dateTimeFormat = if( $params->size() == 1,|'\'YYYY-MM-DD HH24:MI:SS\'',| $params->at(1));
   //http://www.ibm.com/support/knowledgecenter/SSEPGG_9.7.0/com.ibm.db2.luw.sql.ref.doc/doc/r0007107.html
   'timestamp_format('+$params->at(0)+','+$dateTimeFormat +')';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::db2::formatMostRecentDb2(p:String[1..2], defaultDay:String[1]):String[*]
{
   let day = $p->last()->toOne()->mapToDBDayOfWeekNumber()->toString();
   let current = if ($p->size() == 2, | $p->first()->toOne(), | $defaultDay);
   [$current, $day, $current, $day, $current, $day, $current];
}

function <<access.private>> meta::relational::functions::sqlQueryToString::db2::processJoinStringsOperationForDB2(js:JoinStrings[1], sgc:SqlGenerationContext[1]): String[1]
{
   processJoinStringsOperation($js, $sgc, [], {strs, sep| $strs->joinStrings('(', if('\'\'' == $sep, |' concat ', |' concat ' + $sep + ' concat '), ')')});
}

function <<access.private>> meta::relational::functions::sqlQueryToString::db2::processSelectSQLQueryForDB2(s:SelectSQLQuery[1], sgc:SqlGenerationContext[1], isSubSelect:Boolean[1]):String[1]
{
   $s->processSelectSQLQueryForDB2($sgc.dbConfig, $sgc.format, $sgc.config, $isSubSelect, $sgc.extensions);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::db2::processSelectSQLQueryForDB2(s:SelectSQLQuery[1], dbConfig : DbConfig[1], format:Format[1], config:Config[1], isSubSelect : Boolean[1], extensions:Extension[*]):String[1]
{
  let opStr = if($s.filteringOperation->isEmpty(), |'', |$s.filteringOperation->map(s|$s->wrapAsBooleanOperation($extensions)->processOperation($dbConfig, $format->indent(), ^$config(callingFromFilter = true), $extensions))->filter(s|$s != '')->joinStrings(' <||> '));
  let havingStr = if($s.havingOperation->isEmpty(), |'', |$s.havingOperation->map(s|$s->processOperation($dbConfig, $format->indent(), $config, $extensions))->filter(s|$s != '')->joinStrings(' <||> '));

  $format.separator + 'select ' + if($s.distinct == true,|'distinct ',|'') +
  processSelectColumns($s.columns, $dbConfig, $format->indent(), false, $extensions) +
  if($s.data == [],|'',| ' ' + $format.separator + 'from ' + $s.data->toOne()->processJoinTreeNode([], $dbConfig, $format->indent(), [], $extensions)) +
  if (eq($opStr, ''), |'', | ' ' + $format.separator + 'where ' + $opStr) +
  if ($s.groupBy->isEmpty(),|'',| ' ' + $format.separator + 'group by '+$s.groupBy->processGroupByColumns($dbConfig, $format->indent(), false, $extensions)->makeString(','))+
  if (eq($havingStr, ''), |'', | ' ' + $format.separator + 'having ' + $havingStr) +
  if ($s.orderBy->isEmpty(),|'',| ' ' + $format.separator + 'order by '+ $s.orderBy->processOrderBy($dbConfig, $format->indent(), $config, $extensions)->makeString(','))+
  + processLimit($s, $format, processTakeForDB2_SelectSQLQuery_1__Format_1__String_1_, processSliceOrDropDefault_SelectSQLQuery_1__Format_1__Any_1__String_1_);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::db2::processTakeForDB2(s:SelectSQLQuery[1], format:Format[1]):String[1]
{
   ' ' + $format.separator +'fetch first ' + $s.toRow->toOne()->getValueForTake()->toString() +' rows only';
}
