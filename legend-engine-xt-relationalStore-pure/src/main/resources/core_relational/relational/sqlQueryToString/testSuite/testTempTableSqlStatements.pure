// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::sqlQueryToString::tests::*;
import meta::relational::functions::pureToSqlQuery::metamodel::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::metamodel::*;
import meta::relational::runtime::*;
import meta::relational::metamodel::relation::*;

function meta::relational::functions::sqlQueryToString::tests::createTable(tempTableSchemaName: String[0..1], dbType: DatabaseType[1]): Table[1]
{
  let columns = [
    ^Column(name='integer_Column', type=^meta::relational::metamodel::datatype::Integer()),
    ^Column(name='float_Column', type=^meta::relational::metamodel::datatype::Float()),
    ^Column(name='string_Column', type=^meta::relational::metamodel::datatype::Varchar(size = 128)),
    ^Column(name='datetime_Column', type=^meta::relational::metamodel::datatype::Timestamp()),
    ^Column(name='date_Column', type=^meta::relational::metamodel::datatype::Date())
  ];
  let dbConfig  = $dbType->createDbConfig([]);
  ^Table( name = $dbConfig.procesTempTableName('temp_table_test'),
          schema = ^Schema(name = if($tempTableSchemaName->isNotEmpty(),|$tempTableSchemaName->toOne(),|'default') , database = ^Database(name='TempTableDb')),
          columns = $columns,
          temporaryTable = true
        );
}

function meta::relational::functions::sqlQueryToString::tests::getProccessedTempTableName(databaseType: String[1], tempTableName: String[1]): String[0..1]
{
  let dbTypeEnum = DatabaseType->enumValues()->map(x|if($x.name==$databaseType,|$x,|[]));
  if($dbTypeEnum->isNotEmpty(),
  |let dbType = $dbTypeEnum->at(0)->toOne();
  let dbConfig  = $dbType->createDbConfig([]);
  $dbConfig.procesTempTableName($tempTableName);,
  |[]);
}
function meta::relational::functions::sqlQueryToString::tests::getCreateTempTableSqlStatements(databaseType: String[1]): String[*]
{
  let dbTypeEnum = DatabaseType->enumValues()->map(x|if($x.name==$databaseType,|$x,|[]));
  if($dbTypeEnum->isNotEmpty(),
  |let dbType = $dbTypeEnum->at(0)->toOne();
  let dbConfig  = $dbType->createDbConfig([]);
  let temporaryTable = meta::relational::functions::sqlQueryToString::tests::createTable([],$dbType);
  let createSql = ^CreateTableSQL(table = $temporaryTable, isTempTable=true);
  $createSql->meta::relational::functions::sqlQueryToString::ddlSqlQueryToString($dbConfig);,|[]);
}

function meta::relational::functions::sqlQueryToString::tests::getLoadTempTableSqlStatements(databaseType: String[1]): String[*]
{
  let dbTypeEnum = DatabaseType->enumValues()->map(x|if($x.name==$databaseType,|$x,|[]));
  if($dbTypeEnum->isNotEmpty(),
  |let dbType = $dbTypeEnum->at(0)->toOne();
  let dbConfig  = $dbType->createDbConfig([]);
  let VarPlaceHolder = 'csv_file_location';
  let temporaryTable = meta::relational::functions::sqlQueryToString::tests::createTable([],$dbType);
  let loadSql = ^LoadTableSQL(table = $temporaryTable, absolutePathToFile=^VarPlaceHolder(name= $VarPlaceHolder, type = $VarPlaceHolder->type()), columnsToLoad=$temporaryTable.columns->cast(@Column));
  $loadSql->meta::relational::functions::sqlQueryToString::ddlSqlQueryToString($dbConfig);,|[]);
}

function meta::relational::functions::sqlQueryToString::tests::getLoadFromResultSetSqlStatements(databaseType: String[1]): String[*]
{
  let dbTypeEnum = DatabaseType->enumValues()->map(x|if($x.name==$databaseType,|$x,|[]));
  if($dbTypeEnum->isNotEmpty(),
  |let dbType = $dbTypeEnum->at(0)->toOne();
  let temporaryTable = meta::relational::functions::sqlQueryToString::tests::createTable([],$dbType);
  meta::relational::graphFetch::executionPlan::sqlsForInsertIntoTableUsingResultSet($dbType,$temporaryTable);,|[]);
}

function meta::relational::functions::sqlQueryToString::tests::getDropTempTableSqlStatements(databaseType: String[1]): String[*]
{
  let dbTypeEnum = DatabaseType->enumValues()->map(x|if($x.name==$databaseType,|$x,|[]));
  if($dbTypeEnum->isNotEmpty(),
  |let dbType = $dbTypeEnum->at(0)->toOne();
  let dbConfig  = $dbType->createDbConfig([]);
  let temporaryTable = meta::relational::functions::sqlQueryToString::tests::createTable([],$dbType);
  ^DropTableSQL(table = $temporaryTable)->meta::relational::functions::sqlQueryToString::ddlSqlQueryToString($dbConfig);,|[]);
}

function meta::relational::functions::sqlQueryToString::tests::getTempTableSqlStatements(dbType: DatabaseType[1]): String[*]
{
  let dbConfig  = $dbType->createDbConfig([]);
  let VarPlaceHolder = 'csv_file_location';
  let temporaryTable = meta::relational::functions::sqlQueryToString::tests::createTable([],$dbType);
  let createSql = ^CreateTableSQL(table = $temporaryTable, isTempTable=true);
  let loadSql = ^LoadTableSQL(table = $temporaryTable, absolutePathToFile=^VarPlaceHolder(name= $VarPlaceHolder, type = $VarPlaceHolder->type()), columnsToLoad=$temporaryTable.columns->cast(@Column));
  
  $createSql->meta::relational::functions::sqlQueryToString::ddlSqlQueryToString($dbConfig)->concatenate(
    $loadSql->meta::relational::functions::sqlQueryToString::ddlSqlQueryToString($dbConfig))->concatenate(
      ^DropTableSQL(table = $temporaryTable)->meta::relational::functions::sqlQueryToString::ddlSqlQueryToString($dbConfig));
}

function meta::relational::functions::sqlQueryToString::tests::compareSqls(actualSqls: String[*], expectedSqls: String[*]): Boolean[1]
{
  let r = $actualSqls->fold({item, result |
    if ($result == false,
    | $result,
    | assert($expectedSqls->contains($item))
    )
    }, true);
  assert($r);
}


function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::testTempTableSqlStatementsForSnowflake(): Boolean[*]
{
 let actualSqls = getTempTableSqlStatements(DatabaseType.Snowflake);
 let expectedSqls = [
   'CREATE TEMPORARY TABLE LEGEND_TEMP_DB.LEGEND_TEMP_SCHEMA.temp_table_test(integer_Column INT,float_Column FLOAT,string_Column VARCHAR(128),datetime_Column TIMESTAMP,date_Column DATE);',
   'CREATE OR REPLACE TEMPORARY STAGE LEGEND_TEMP_DB.LEGEND_TEMP_SCHEMA.LEGEND_TEMP_STAGE',
   'PUT file://${csv_file_location} @LEGEND_TEMP_DB.LEGEND_TEMP_SCHEMA.LEGEND_TEMP_STAGE${csv_file_location} PARALLEL= 16 AUTO_COMPRESS=TRUE;',
   'COPY INTO LEGEND_TEMP_DB.LEGEND_TEMP_SCHEMA.temp_table_test FROM @LEGEND_TEMP_DB.LEGEND_TEMP_SCHEMA.LEGEND_TEMP_STAGE${csv_file_location} file_format = (type= CSV field_optionally_enclosed_by= \'"\');',
   'DROP STAGE LEGEND_TEMP_DB.LEGEND_TEMP_SCHEMA.LEGEND_TEMP_STAGE',
   'Drop table if exists LEGEND_TEMP_DB.LEGEND_TEMP_SCHEMA.temp_table_test;'
  ];
  meta::relational::functions::sqlQueryToString::tests::compareSqls($actualSqls, $expectedSqls);  
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::testTempTableSqlStatementsForH2(): Boolean[*]
{
 let actualSqls = getTempTableSqlStatements(DatabaseType.H2);
 let expectedSqls = [
   'CREATE LOCAL TEMPORARY TABLE temp_table_test(integer_Column INT,float_Column FLOAT,string_Column VARCHAR(128),datetime_Column TIMESTAMP,date_Column DATE);',
   'INSERT INTO temp_table_test SELECT * FROM CSVREAD(\'${csv_file_location}\');',
   'Drop table if exists temp_table_test;'
  ];
  meta::relational::functions::sqlQueryToString::tests::compareSqls($actualSqls, $expectedSqls);  
}

function <<test.Test>> meta::relational::functions::sqlQueryToString::tests::testTempTableSqlStatementsForSybaseIQ(): Boolean[*]
{
 let actualSqls = getTempTableSqlStatements(DatabaseType.SybaseIQ);
 let expectedSqls = [
   'DECLARE LOCAL TEMPORARY TABLE temp_table_test([integer_Column] INT,[float_Column] FLOAT,[string_Column] VARCHAR(128),[datetime_Column] TIMESTAMP,[date_Column] DATE) ON COMMIT PRESERVE ROWS',
   ['load table temp_table_test( [integer_Column] null(blanks),[float_Column] null(blanks),[string_Column] null(blanks),[datetime_Column] null(blanks),[date_Column] null(blanks) ) USING CLIENT FILE \'${csv_file_location}\' FORMAT BCP ',
   '\nwith checkpoint on ',
   '\nquotes on ',
   '\nescapes off ',
   '\ndelimited by \',\' ',
   '\nROW DELIMITED BY \'\r\n\'']->joinStrings(''),
   'Drop table if exists temp_table_test;'
  ];
  meta::relational::functions::sqlQueryToString::tests::compareSqls($actualSqls, $expectedSqls);  
}
