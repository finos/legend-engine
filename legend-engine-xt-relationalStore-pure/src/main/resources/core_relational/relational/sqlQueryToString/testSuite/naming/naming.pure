// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::profiles::*;
import meta::relational::tests::mapping::database::*;
import meta::relational::runtime::*;
import meta::relational::metamodel::execute::*;
import meta::pure::runtime::*;
import meta::relational::mapping::*;
import meta::relational::dbTestRunner::*;
import meta::pure::alloy::connections::*;
import meta::pure::test::*;
import meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::*;


function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::testColumnNames(config:DbTestConfig[1]):Boolean[1]
{
   let result = executeViaPlan(| MyClass.all(), testMapping, meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::myDB, $config, meta::relational::extension::relationalExtensions());
   runDataAssertion($result, $config,
   | 
      assertSize($result->toOne(), 1);
      assertEquals(2, $result.values->first()->cast(@MyClass).a);
      assertEquals(MyEnum.NO, $result.values->first()->cast(@MyClass).d);
   );
   
   let result2 = executeViaPlan(| MyClassB.all(), testMapping, meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::myDB, $config, meta::relational::extension::relationalExtensions());
   runDataAssertion($result2, $config,
    |  assertSize($result2, 1);
       assertEquals('\'Description A\'', $result2.values->first()->cast(@MyClassB).c);
    );
         
   let filteredResult = executeViaPlan(| MyClass.all()->filter(m | $m.a == 2), testMapping, meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::myDB, $config, meta::relational::extension::relationalExtensions());
   runDataAssertion($filteredResult, $config,
    |  assertSize($filteredResult, 1);
       assertEquals(2, $filteredResult.values->first()->cast(@MyClass).a);
   );
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::testTableNameInJoinAlias(config:DbTestConfig[1]):Boolean[1]
{
  let runtime = ^Runtime(connections=$config.connection);
  
   let result = executeViaPlan(| MyClass.all()->project([c | $c.b.c], ['c']), testMapping, meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::myDB, $config, meta::relational::extension::relationalExtensions());
    runDataAssertion($result, $config,
       | assertSize($result, 1);
    );
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::testASCiiColumnName(config:DbTestConfig[1]):Boolean[1]
{
  let result = executeViaPlan(| MyClassC.all(), testMapping, meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::myDB, $config, meta::relational::extension::relationalExtensions());
   runDataAssertion($result, $config,
   | 
      assertSize($result->toOne(), 1);
      assertEquals(0, $result.values->first()->cast(@MyClassC).capitalAlphabets);
      assertEquals(1, $result.values->first()->cast(@MyClassC).numbers);
      assertEquals('testData', $result.values->first()->cast(@MyClassC).specialCharacters);
      assertEquals(2, $result.values->first()->cast(@MyClassC).smallAlphabets);

   );
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::testASCiiAliasName(config:DbTestConfig[1]):Boolean[1]
{
  let specialCharacters = '!#$%&()*+-,./:;<=>?@[\\]^_`{|}';  //TODO- double quotes doesn't works
  let numbers = '0123456789';
  let smallAlphabets = 'abcdefghijklmnopqrstuvwxzy';
  let capitalAlphabets = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

  let runtime = ^Runtime(connections=$config.connection);
  let result = executeViaPlan(| MyClassD.all()->project([x | $x.a, x | $x.b, x | $x.c, x | $x.d] ,[$specialCharacters, $numbers, $smallAlphabets, $capitalAlphabets]), testMapping, meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::myDB, $config, meta::relational::extension::relationalExtensions());
  
  runDataAssertion($result, $config,
  | 
  assertEquals($result.values.columns->map(x | $x.name), [$specialCharacters, $numbers, $smallAlphabets, $capitalAlphabets]);
  );
 
   true;
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::testAsciiColumnNameAndAsciiAliasName(config:DbTestConfig[1]):Boolean[1]
{
  let specialCharacters = '!#$%&()*+-,./:;<=>?@[\'\\]^_`{|}';  //TODO- double quotes doesn't works
  let numbers = '0123456789';
  let smallAlphabets = 'abcdefghijklmnopqrstuvwxzy';
  let capitalAlphabets = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

   let result = executeViaPlan(| MyClassC.all()->project([x | $x.specialCharacters, x | $x.numbers, x | $x.smallAlphabets, x | $x.capitalAlphabets] ,[$specialCharacters, $numbers, $smallAlphabets, $capitalAlphabets]),testMapping, meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::myDB, $config, meta::relational::extension::relationalExtensions());

  runDataAssertion($result, $config,
  | 
   assertEquals($result.values.rows->map(x | $x.values), ['testData', 1, 2, 0]);
   assertEquals($result.values.columns->map(x | $x.name), [$specialCharacters, $numbers, $smallAlphabets, $capitalAlphabets]);
  );
}

function <<paramTest.BeforePackage>> meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::setUp(config:DbTestConfig[1]):Boolean[1]
{
  // let setupSqls = ['Drop table if exists testTable;',
  //  'Create Table testTable(ID INT, "Column Name with Space" INT, "Column&A" INT, "Column.ID" INT);',
  //  'insert into testTable(ID, "Column Name with Space", "Column&A", "Column.ID") values (1,2,0,3);',
   
  //  'Drop table if exists "test Table2";',
  //  'Create Table "test Table2"("Column&ID" INT, "My#Data" VARCHAR(20));',
  //  'insert into "test Table2"("Column&ID", "My#Data") values (3,\'Description A\');'
  //  ];
   
   let records ='default\n'+
                'testTable\n'+
                'ID, "Column Name with Space", "Column&A", "Column.ID"\n'+
                '1,2,0,3\n'+
                '\n\n\n'+
                '---\n'+
                'default\n'+
                '"test Table2"\n'+
                '"Column&ID", "My#Data"\n'+
                '3,\'Description A\'\n'+
                 '---\n'+
                'default\n'+
                'testTable3\n'+
                'ABCDEFGHIJKLMNOPQRSTUVWXYZ,"0123456789","!\"#$%&()*+-./:;<=>?@[\]^_`{|}",abcdefghijklmnopqrstuvwxzy\n'+
                '0,1,testData,2\n'+
                 '---\n'+
                'default\n'+
                'testTable4\n'+
                'a,b,c,d\n'+
                '0,1,data,2\n'
                ;

  meta::relational::dbTestRunner::doSetupOnConnection($records, meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::myDB,
                                                     $config, meta::relational::extension::relationalExtensions());
}

Class meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::MyClass
{

   a:Integer[1];
   b:MyClassB[0..1];
   d:MyEnum[0..1];
}

Class meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::MyClassB
{

   c:String[1];
}

Class meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::MyClassC
{
   capitalAlphabets: Integer[1];
   numbers: Integer[1];
   specialCharacters: String[1];
   smallAlphabets: Integer[1];
}

Class meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::MyClassD
{
  a : Integer[1];
  b : Integer[1];
  c : String[1];
  d : Integer[1];
} 

Enum meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::MyEnum
{
   YES,
   NO
}


###Relational


Database meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::myDB
(
    Table testTable
    (
       ID INT PRIMARY KEY,
       "Column Name with Space" INT,
       "Column&A" INT,
       "Column.ID" INT
    )
    
    Table "test Table2"
    (
       "Column&ID" INT PRIMARY KEY,
       "My#Data" VARCHAR(20)
    )
    
    Table testTable3
    (
      ABCDEFGHIJKLMNOPQRSTUVWXYZ INT PRIMARY KEY,
      "0123456789" INT,
      "!\"#$%&()*+-./:;<=>?@[\]^_`{|}" VARCHAR(20),   //single and double quotes not working
      abcdefghijklmnopqrstuvwxzy INT
    )

    Table testTable4
    (
      a INT PRIMARY KEY,
      b INT,
      c VARCHAR(20),
      d INT
    )

    Join testJoin
    (
        testTable."Column.ID" = "test Table2"."Column&ID"
    )
)

###Mapping

import meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::*;

Mapping meta::relational::tests::dbSpecificTests::sqlQueryTests::namingTests::testMapping
(
    MyEnum: EnumerationMapping Active
    {
        YES:  1,
        NO: 0
    }
    
    MyClass: Relational
    {
        a: [myDB] testTable."Column Name with Space",
        b: [myDB] @testJoin,
        d: EnumerationMapping Active : [myDB] testTable."Column&A"
    }
    
    MyClassB: Relational
    {
       c: [myDB] "test Table2"."My#Data"
    }
    
    MyClassC: Relational
    {
       capitalAlphabets: [myDB] testTable3.ABCDEFGHIJKLMNOPQRSTUVWXYZ,
       smallAlphabets: [myDB] testTable3.abcdefghijklmnopqrstuvwxzy,
       numbers: [myDB] testTable3."0123456789",
       specialCharacters: [myDB] testTable3."!\"#$%&()*+-./:;<=>?@[\]^_`{|}"
    }

    MyClassD: Relational
    {
       a: [myDB] testTable4.a,
       b: [myDB] testTable4.b,
       c: [myDB] testTable4.c,
       d: [myDB] testTable4.d
    }

)
