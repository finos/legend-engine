// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::metamodel::*;
import meta::relational::dbTestRunner::*;
import meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::*;
import meta::pure::test::*;

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::adjust::testAdjust(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='adjust', parameters=[^Literal(value=%2014-11-30), ^Literal(value=1), ^Literal(value=DurationUnit.DAYS)]);
  let expected = ^Literal(value=%2014-12-01);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::adjust::testAdjustWithMicroseconds(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='adjust', parameters=[^Literal(value=%2014-12-04T15:22:23), ^Literal(value=123456), ^Literal(value=DurationUnit.MICROSECONDS)]);
  let expected = ^Literal(value=%2014-12-04T15:22:23.123456000);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::adjust::testAdjustWithStringUnit(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='adjust', parameters=[^Literal(value=%2014-11-30), ^Literal(value=1), ^Literal(value='DAYS')]);
  let expected = ^Literal(value=%2014-12-01);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

//get datetime subpart
function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::second::testSecond(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='second', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=23);          
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::minute::testminute(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='minute', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=22);          
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::hour::testHour(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='hour', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=15);         
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::dayOfWeekNumber::testDayOfWeekNumber(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='dayOfWeekNumber', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=5);          //Thursday  - day number is db specific ?
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::dayOfMonth::testDayOfMonth(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='dayOfMonth', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=4);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::weekOfYear::testWeekOfYear(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='weekOfYear', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=49);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::month::testMonthAsNumber(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='month', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=12);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::monthNumber::testMonthNumber(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='monthNumber', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=12);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::quarter::testQuarterAsNumber(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='quarter', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=4);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::quarterNumber::testQuarterNumber(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='quarterNumber', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=4);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::year::testYear(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='year', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=2014);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::datePart::testDatePartWithDateTime(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='datePart', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=%2014-12-04->convertToDateTime());
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::datePart::testDatePartWithStrictDate(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='datePart', parameters=[^Literal(value=%2014-12-04)]);
  let expected = ^Literal(value=%2014-12-04->convertToDateTime());
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::dateDiff::testDatePartAsString(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='dateDiff', parameters=[^Literal(value=%2013-12-04T15:22:23), ^Literal(value=%2014-12-04T15:22:23), ^Literal(value='YEARS') ]);
  let expected = ^Literal(value=1);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::dateDiff::testYearsDiffPositive(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='dateDiff', parameters=[^Literal(value=%2013-12-04T15:22:23), ^Literal(value=%2014-12-04T15:22:23), ^Literal(value=DurationUnit.YEARS) ]);
  let expected = ^Literal(value=1);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::dateDiff::testYearsDiffZero(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='dateDiff', parameters=[^Literal(value=%2014-12-04T15:22:23), ^Literal(value=%2014-12-04T15:22:23), ^Literal(value=DurationUnit.YEARS) ]);
  let expected = ^Literal(value=0);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}


function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::dateDiff::testYearsDiffNegative(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='dateDiff', parameters=[^Literal(value=%2014-12-04T15:22:23), ^Literal(value=%2013-12-04T15:22:23), ^Literal(value=DurationUnit.YEARS) ]);
  let expected = ^Literal(value=-1);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::dateDiff::testMonthsDiff(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='dateDiff', parameters=[^Literal(value=%2013-12-04T15:22:23), ^Literal(value=%2014-12-04T15:22:23), ^Literal(value=DurationUnit.MONTHS) ]);
  let expected = ^Literal(value=12);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::dateDiff::testDaysDiff(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='dateDiff', parameters=[^Literal(value=%2014-12-01T15:22:23), ^Literal(value=%2014-12-04T15:22:23), ^Literal(value=DurationUnit.DAYS) ]);
  let expected = ^Literal(value=3);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::dateDiff::testHoursDiff(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='dateDiff', parameters=[^Literal(value=%2014-12-03T14:22:23), ^Literal(value=%2014-12-04T15:22:23), ^Literal(value=DurationUnit.HOURS) ]);
  let expected = ^Literal(value=25);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::dateDiff::testMinutesDiff(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='dateDiff', parameters=[^Literal(value=%2014-12-04T14:22:23), ^Literal(value=%2014-12-04T15:22:23), ^Literal(value=DurationUnit.MINUTES) ]);
  let expected = ^Literal(value=60);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::dateDiff::testSecondsDiff(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='dateDiff', parameters=[^Literal(value=%2014-12-04T14:22:23), ^Literal(value=%2014-12-04T15:22:23), ^Literal(value=DurationUnit.SECONDS) ]);
  let expected = ^Literal(value=3600);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::dateDiff::testMilliSecondsDiff(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='dateDiff', parameters=[^Literal(value=%2014-12-04T14:22:23), ^Literal(value=%2014-12-04T15:22:23), ^Literal(value=DurationUnit.MILLISECONDS) ]);
  let expected = ^Literal(value=3600000);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}
//TODO - micro and nanoseconds are not supported by any db yet 

//firstDay
function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::firstDayOfWeek::testFirstDayOfWeek(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='firstDayOfWeek', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=%2014-12-01);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::previousDayOfWeek::testPreviousDayOfWeekWithDate(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='previousDayOfWeek', parameters=[^Literal(value=%2014-12-04), ^Literal(value=DayOfWeek.Monday)]);
  let expected = ^Literal(value=%2014-12-01);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::mostRecentDayOfWeek::testMostRecentDayOfWeekWithDate(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='mostRecentDayOfWeek', parameters=[^Literal(value=%2014-12-04), ^Literal(value=DayOfWeek.Monday)]);
  let expected = ^Literal(value=%2014-12-01);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::firstDayOfMonth::testFirstDayOfMonth(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='firstDayOfMonth', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=%2014-12-01);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::firstDayOfQuarter::testFirstDayOfQuarter(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='firstDayOfQuarter', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=%2014-10-01);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::firstDayOfYear::testFirstDayOfYear(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='firstDayOfYear', parameters=[^Literal(value=%2014-12-04T15:22:23)]);
  let expected = ^Literal(value=%2014-01-01);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $config);
}


//variable result functions - get value from pure/legend engine and compare with value returned with db engine
function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::now::testNow(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='now', parameters=[]);
  let expected = ^Literal(value=now());      

  let equalityComparator = timestampEqualityComparatorGenerator([30] ,DurationUnit.SECONDS);              // assuming clocks of db engine and legend engine are synced within 30 seconds 
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $equalityComparator, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::today::testToday(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='today', parameters=[]);
  let expected = ^Literal(value=today()->convertToDateTime());                              
  let equalityComparator = timestampEqualityComparatorGenerator([1] ,DurationUnit.DAYS);             
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $equalityComparator, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::firstDayOfThisMonth::testFirstDayOfThisMonth(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='firstDayOfThisMonth', parameters=[]);
  let expected = ^Literal(value=firstDayOfThisMonth()->convertToDateTime());   
  let equalityComparator = timestampEqualityComparatorGenerator([0] ,DurationUnit.DAYS);            
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $equalityComparator, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::firstDayOfThisQuarter::testFirstDayOfThisQuarter(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='firstDayOfThisQuarter', parameters=[]);
  let expected = ^Literal(value=firstDayOfThisQuarter()->convertToDateTime());   
  let equalityComparator = timestampEqualityComparatorGenerator([0] ,DurationUnit.DAYS);            
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $equalityComparator, $config);
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::firstDayOfThisYear::testFirstDayOfThisYear(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='firstDayOfThisYear', parameters=[]);
  let expected = ^Literal(value=firstDayOfThisYear()->convertToDateTime());   
  let equalityComparator = timestampEqualityComparatorGenerator([0] ,DurationUnit.DAYS);              // use datediff to compare dates
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $equalityComparator, $config);
}       

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::toTimestamp::testToTimestamp(config:DbTestConfig[1]):Boolean[1]
{
  let dynaFunc = ^DynaFunction(name='toTimestamp', parameters=[^Literal(value='2016-06-23 13:20:10'), ^Literal(value='YYYY-MM-DD HH24:MI:SS')]);
  let expected = ^Literal(value=parseDate(%2016-06-23T13:20:10->toString()));
  let equalityComparator = timestampEqualityComparatorGenerator([0] ,DurationUnit.SECONDS);
  runDynaFunctionDatabaseTest($dynaFunc, $expected, $equalityComparator, $config);
}  

function meta::relational::tests::dbSpecificTests::sqlQueryTests::dynaFunctions::convertToDateTime(d:Date[1]): DateTime[1]
{
  $d->match([
      sd :StrictDate[1] |  meta::pure::functions::date::date(year($sd), monthNumber($sd), dayOfMonth($sd), 0, 0 ,0); ,                 // type cast StrictDate to dateTime,(as strictdates in expected value are converted to datetime,to retain timezone info)
      dt: DateTime[1]   | $dt;
  ]);
}          