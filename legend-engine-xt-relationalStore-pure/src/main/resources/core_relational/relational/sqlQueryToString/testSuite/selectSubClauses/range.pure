// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::mapping::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::pure::profiles::*;
import meta::relational::functions::sqlstring::*;
import meta::relational::dbTestRunner::*;
import meta::pure::test::*;
import meta::pure::runtime::*;
import meta::pure::executionPlan::*;

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::slice::testSlice(config:DbTestConfig[1]):Boolean[1]
{
  let runtime = ^Runtime(connections=$config.connection);

  let result = executeViaPlan(|Person.all()->slice(1,4), simpleRelationalMapping, meta::relational::tests::dbInc, $config, meta::relational::extension::relationalExtensions());
  runDataAssertion($result, $config,  | assertSize($result.values, 3););

  let result2 = executeViaPlan(|Person.all()->slice(0,1), simpleRelationalMapping, meta::relational::tests::dbInc, $config, meta::relational::extension::relationalExtensions());
  runDataAssertion($result2, $config, | assertSize($result2.values, 1););
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::slice::testSliceWithRestrict(config:DbTestConfig[1]):Boolean[1]
{              
  let runtime = ^Runtime(connections=$config.connection);

   let f1 = {|Person.all()->project([col(p|$p.firstName, 'firstName'), col(p|$p.lastName, 'lastName')])->slice(0,50)->restrict('firstName')->sort(asc('firstName'))->slice(3, 5);};
   let result = executeViaPlan($f1, simpleRelationalMapping, meta::relational::tests::dbInc, $config, meta::relational::extension::relationalExtensions());
   runDataAssertion($result, $config, | assertSize($result.values.rows, 2););

   let f2 = {|Person.all()->project([col(p|$p.firstName, 'firstName'), col(p|$p.lastName, 'lastName')])->sort(asc('firstName'))->slice(0,50)->restrict('firstName');};
   let result2 = executeViaPlan($f2, simpleRelationalMapping, meta::relational::tests::dbInc, $config, meta::relational::extension::relationalExtensions());
   runDataAssertion($result2, $config, | assertSize($result2.values.rows,7););
}

function <<paramTest.Test>>  meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::limit::testSimpleLimit(config:DbTestConfig[1]):Boolean[1]
{
  let runtime = ^Runtime(connections=$config.connection);

   let result = executeViaPlan(|Person.all()->limit(0), simpleRelationalMapping, meta::relational::tests::dbInc, $config, meta::relational::extension::relationalExtensions());
    runDataAssertion($result, $config, | assertSize($result.values, 0 ););

   let result2 = executeViaPlan(|Person.all()->limit(1), simpleRelationalMapping, meta::relational::tests::dbInc, $config, meta::relational::extension::relationalExtensions());
    runDataAssertion($result2, $config, | assertSize($result2.values, 1 ););
}

function <<paramTest.Test>>  meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::take::testSimpleTake(config:DbTestConfig[1]):Boolean[1]
{
  let runtime = ^Runtime(connections=$config.connection);

   let result = executeViaPlan(|Person.all()->take(0), simpleRelationalMapping, meta::relational::tests::dbInc, $config, meta::relational::extension::relationalExtensions());
    runDataAssertion($result, $config, | assertSize($result.values, 0 ););

   let result2 = executeViaPlan(|Person.all()->take(1), simpleRelationalMapping, meta::relational::tests::dbInc, $config, meta::relational::extension::relationalExtensions());
    runDataAssertion($result2, $config, | assertSize($result2.values, 1 ));
}

function <<paramTest.Test>>  meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::drop::testSimpleDrop(config:DbTestConfig[1]):Boolean[1]
{
   let runtime = ^Runtime(connections=$config.connection);

   let result = executeViaPlan(|Person.all()->drop(0), simpleRelationalMapping, meta::relational::tests::dbInc, $config, meta::relational::extension::relationalExtensions());
    runDataAssertion($result, $config, | assertSize($result.values, 7 ););

   let result2 = executeViaPlan(|Person.all()->drop(1), simpleRelationalMapping, meta::relational::tests::dbInc, $config, meta::relational::extension::relationalExtensions());
   runDataAssertion($result2, $config, |  assertSize($result2.values, 6););
}

function <<paramTest.Test>>  meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::drop::testDropLimitByVendor(config:DbTestConfig[1]):Boolean[1]
{
  let runtime = ^Runtime(connections=$config.connection);
  let result = executeViaPlan(|Person.all()->project([col(p|$p.firstName, 'firstName'), col(p|$p.lastName, 'lastName')])->drop(10)->limit(100);, meta::relational::tests::simpleRelationalMapping,  meta::relational::tests::dbInc, $config, meta::relational::extension::relationalExtensions());
  runDataAssertion($result, $config, | assertSize($result.values, 1 ););
}
