// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::mapping::*;
import meta::relational::tests::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::tds::tdsJoin::*;
import meta::relational::metamodel::join::*;
import meta::relational::dbTestRunner::*;
import meta::pure::test::*;
import meta::relational::tests::dbSpecificTests::shared::*;
import meta::pure::runtime::*;

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::mixtureOfCluases::testFilterAfterJoinInner(config:DbTestConfig[1]):Boolean[1]
{
   let type = JoinType.INNER;
   let result = executeViaPlan(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->filter(p | $p.getInteger('personAge') > 30), testJoinTDSMapping, meta::relational::tests::db, $config, meta::relational::extension::relationalExtensions());
                    
  runDataAssertion($result, $config,
  | assertSameElements(['Roberts,34,9', 'Hill,32,10', 'Harris,35,11'], $result.values.rows->map(r|$r.values->makeString(',')));
  );
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::mixtureOfCluases::testFilterAfterJoinOuter(config:DbTestConfig[1]):Boolean[1]
{
   let type = JoinType.LEFT_OUTER;
   let result = executeViaPlan(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->filter(p | $p.getInteger('personAge') > 30), testJoinTDSMapping, meta::relational::tests::db, $config, meta::relational::extension::relationalExtensions());

  runDataAssertion($result, $config,
  | assertSameElements(['Roberts,34,9', 'Hill,32,10', 'Harris,35,11'], $result.values.rows->map(r|$r.values->makeString(',')));
  );
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::mixtureOfCluases::testGroupByAfterJoinInner(config:DbTestConfig[1]):Boolean[1]
{
   let type = JoinType.INNER;
   let result = executeViaPlan(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->groupBy('faID', agg('cnt', x|$x, y| $y->count())), testJoinTDSMapping, meta::relational::tests::db, $config, meta::relational::extension::relationalExtensions());

  runDataAssertion($result, $config,
  | assertSameElements(['8,4', '9,1', '11,1', '10,1'], $result.values.rows->map(r|$r.values->makeString(',')));
  );
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::mixtureOfCluases::testGroupByAfterJoinOuter(config:DbTestConfig[1]):Boolean[1]
{
   let type = JoinType.LEFT_OUTER;
   let result = executeViaPlan(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->groupBy('faID', agg('cnt', x|$x, y| $y->count())), testJoinTDSMapping, meta::relational::tests::db, $config, meta::relational::extension::relationalExtensions());

  runDataAssertion($result, $config,
  | assertSameElements(['8,4', '9,1', '11,1', '10,1'], $result.values.rows->map(r|$r.values->makeString(',')));
  );
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::mixtureOfCluases::groupByAfterConcatenate(config:DbTestConfig[1]):Boolean[1]
{
   let result = executeViaPlan(|Firm.all()
                         ->project([#/Firm/legalName!legalName#,#/Firm/employees/lastName!lastName#])
                         ->concatenate(
                            Firm.all()
                               ->project([#/Firm/legalName!legalName#,#/Firm/employees/lastName!lastName#])
                         )
                         ->distinct()
                         ->groupBy('legalName', agg('lastNamesCount', x|$x.getString('lastName'), y|$y->distinct()->count())), simpleRelationalMapping, meta::relational::tests::db, $config, meta::relational::extension::relationalExtensions());
   
  runDataAssertion($result, $config,
  | let tds = $result.values->at(0);
    assertEquals(4, $tds.rows->size());
    assertEquals(4, $result.values->first().rows->filter(r | $r.getString('legalName') == 'Firm X')->first()->toOne().getInteger('lastNamesCount')->sort());
  );
}

