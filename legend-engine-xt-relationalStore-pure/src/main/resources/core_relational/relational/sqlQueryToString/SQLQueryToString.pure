// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::pureToSqlQuery::metamodel::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::metamodel::*;
import meta::relational::metamodel::operation::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::join::*;
import meta::relational::runtime::*;
import meta::relational::metamodel::datatype::*;
import meta::pure::profiles::*;
import meta::relational::functions::sqlQueryToString::default::*;

function meta::relational::functions::sqlQueryToString::convertDateToSqlString(date:Date[1], dbTimeZone:String[0..1]):String[1]
{
   //Default to UTC, if timezone is not specified. GMT is the same as UTC, UTC is not actually a timezone
   let timeZone = if( $dbTimeZone->isEmpty(), | 'GMT', |  $dbTimeZone->toOne());
   if($date->hasSecond(),
      | if ($date->hasSubsecond(),
            | format('%t{[' + $timeZone + ']yyyy-MM-dd HH:mm:ss.SSSSSS}', $date),
            | format('%t{[' + $timeZone + ']yyyy-MM-dd HH:mm:ss}', $date)),
      | format('%t{[' + $timeZone + ']yyyy-MM-dd}', $date));
}

function  meta::relational::functions::sqlQueryToString::processLiteralDefaultForPlanService(a:Any[1], dbType:DatabaseType[1], dbTimeZone : String[0..1], quoteIdentifiers:Boolean[0..1]): String[1]
{
   let dbConfig = createDbConfig($dbType, $dbTimeZone, $quoteIdentifiers);
   let type = if($a->instanceOf(List),
                 |
                 if($a->cast(@List<Any>).values->isNotEmpty(),
                    |$a->cast(@List<Any>).values->type(),
                    |let typeArgumentType = $a.classifierGenericType.typeArguments.rawType; if($typeArgumentType->isEmpty(),|String,|$typeArgumentType->toOne());),
                 |$a->type());
   let processor = $dbConfig.literalProcessor($type);
   if(!$a->type()==String,
      | if($a->type()==List,
           | $a->cast(@List<Any>)->processLiteralListForPlanService($type, $dbConfig, $dbType, $dbTimeZone)->joinStrings(','),
           | $processor.formatValue($a, $dbTimeZone)),
      |$processor.formatValue($a, $dbTimeZone)->replace('\'\'', '\''));
}

function meta::relational::functions::sqlQueryToString::processLiteralListForPlanService(a:List<Any>[*], type:Type[1], dbConfig : DbConfig[1], dbType:DatabaseType[1], dbTimeZone : String[0..1]): String[1]
{

   $a.values->map(v|$v->match([
                     s:String[1]| $dbConfig.literalProcessor($type).formatValue($s, $dbTimeZone)->replace('\'\'', '\''),
                     a:Any[1]| $dbConfig.literalProcessor($type).formatValue($a, $dbTimeZone)
                  ]))
   ->joinStrings(',');
}

function meta::relational::functions::sqlQueryToString::createSelectOneRowSql(table:Table[1], schema:Schema[1], dbType:DatabaseType[1]):String[1]
{
   'select top 1 ' + $table.columns->cast(@Column).name->map(s | $s->processColumnName(createDbConfig($dbType, [])))->makeString(',') + ' from ' + $schema.name + '.' + $table.name;
}

function  meta::relational::functions::sqlQueryToString::getValueForTake(l:Literal[1]):String[1]
{
   $l.value->match([
      i:Integer[1]| $i->toString(),
      v:VarPlaceHolder[1] |$v->processPlaceHolder($v->getVariableType(), '', '', [])
   ]);
}

function meta::relational::functions::sqlQueryToString::convertPlaceHolderToSQLString(v:VarPlaceHolder[1], literalProcessor: meta::pure::metamodel::function::Function<{Type[1] -> LiteralProcessor[1]}>[1], dbTimeZone:String[0..1]):String[1]
{
   let vType        = $v->getVariableType();

   let prefixSuffix = getPrefixAndSuffixForType($vType, $literalProcessor);
   let prefix       = $prefixSuffix.first;
   let suffix       = $prefixSuffix.second;
   let value        = processPlaceHolder($v, $vType, $prefix, $suffix, $dbTimeZone);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::getPrefixAndSuffixForType(type:Type[1], literalProcessor: meta::pure::metamodel::function::Function<{Type[1] -> LiteralProcessor[1]}>[1]):Pair<String, String>[1]
{
   let lp           = $literalProcessor->eval($type);
   // We need this replace here to mimic what we would have done if we had executed the format string on input.
   // %% is used in format to escape a required % symbol. We don't need to do this while building freemarker context
   let lpFormat     = $lp.format->replace('%%', '%');

   let index        = $lpFormat->indexOf('%s');
   let prefix       = $lpFormat->substring(0, $index);
   let suffix       = $lpFormat->substring($index+2);

   ^Pair<String, String>(first = $prefix, second = $suffix);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::getVariableType(v:VarPlaceHolder[1]):Type[1]
{
   if ($v.propertyPath->isNotEmpty(),
       | $v.propertyPath->last().genericType.rawType->toOne(),
       | $v.type);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::processPlaceHolder(v:VarPlaceHolder[1], type:Type[1], prefix:String[1], suffix:String[1], dbTimeZone:String[0..1]): String[1]
{
   let noPropertyPath              = $v.propertyPath->isEmpty();
   let placeHolderWithPath         = $v.name+if($noPropertyPath,|'',|'[\"')+$v.propertyPath->map(p|$p.name)->joinStrings('.')+if($noPropertyPath,|'',|'\"]');
   let resolvedPlaceHolder         = if($type == String,
                                           | $placeHolderWithPath->convertStringToSQLString(),
                                           | $placeHolderWithPath);

   let isPossibleDateTimeType      = [Date, DateTime]->contains($v.type);
   let possiblyApplyDateTzFunction = if($isPossibleDateTimeType,| processDatePlaceHolder($resolvedPlaceHolder, $dbTimeZone),| $resolvedPlaceHolder);

   if($v->isCollectionPlaceHolder(),
      |if($resolvedPlaceHolder == $possiblyApplyDateTzFunction,
         |'${renderCollection('+$resolvedPlaceHolder + ' \",\" \"' + $prefix + '\" \"'+ $suffix + '\" ' + placeHolderDefaultValue() +')}',
         |'${renderCollectionWithTz('+ $resolvedPlaceHolder + ' "['+$dbTimeZone->toOne()+']" '+ '\",\" \"' + $prefix + '\" \"'+ $suffix + '\" ' + placeHolderDefaultValue() +')}'),
      |if($v.multiplicity->isNotEmpty() && $v.multiplicity->toOne()->isZeroOne() && $resolvedPlaceHolder == $possiblyApplyDateTzFunction,
          |'${varPlaceHolderToString(' + $possiblyApplyDateTzFunction + '![] ' + ' \"' + $prefix + '\" \"'+ $suffix + '\" '+ placeHolderDefaultValue()+')}',
          |$prefix + '${'+$possiblyApplyDateTzFunction+'}' + $suffix)
      );
}

function <<access.private>> meta::relational::functions::sqlQueryToString::isCollectionPlaceHolder(v:VarPlaceHolder[1]):Boolean[1]
{
   $v.multiplicity->isNotEmpty() && $v.multiplicity == ZeroMany;
}

function <<access.private>> meta::relational::functions::sqlQueryToString::placeHolderDefaultValue():String[1]
{
   '\"' + convertSQLNullToSQLString(^SQLNull()) +'\"';
}

function <<access.private>> meta::relational::functions::sqlQueryToString::processDatePlaceHolder(dateParameter:String[1], dbTimeZone:String[0..1]): String[1]
{
   let isNonSystemTz = $dbTimeZone->isNotEmpty() && !meta::pure::functions::date::systemDefaultTimeZones()->contains($dbTimeZone->toOne());
   if($isNonSystemTz,|'GMTtoTZ( "['+$dbTimeZone->toOne()+']" '+$dateParameter+')'
                    ,| $dateParameter);
}

function <<access.private>> meta::relational::functions::sqlQueryToString::processFreeMarkerOperationHolder(freeMarkerOp:FreeMarkerOperationHolder[1], dbConfig : DbConfig[1], format:Format[1], generationState:GenerationState[1], config: Config[1], nestedFreeMarkerOperationHolder: Boolean[1], extensions:Extension[*]):String[1]
{
   let freeMarkerOpMap = getFreeMarkerOperationMap();
   let res = $freeMarkerOpMap->get($freeMarkerOp.name);
   assert($res->isNotEmpty(),  | $freeMarkerOp.name + 'freeMarker Operation is not supported!');

   let processedParams = $freeMarkerOp.parameters->map(p | $p->match([
                                                               f:FreeMarkerOperationHolder[1] | $f->processFreeMarkerOperationHolder($dbConfig, $format, $generationState, $config, true, $extensions);,
                                                               l:Literal[1]                   | $l.value->match([v:VarPlaceHolder[1] | if($v.multiplicity->isNotEmpty() && $v.multiplicity->toOne()->isZeroOne(), |$v.name + '![]', |$v.name);,
                                                                                                                 a:Any[1]            | $a->toString();]),
                                                               a:RelationalOperationElement[1]| '\'' + $a->processOperation($dbConfig, $format, $generationState, $config, $extensions)->replace('\'', '\\\'') + '\'';
   ]));
   let params = if($res.transform->isEmpty(), | $processedParams, | $res.transform->toOne()->eval($processedParams));

   if($nestedFreeMarkerOperationHolder, |format($res->toOne().format, $params), |'(${' + format($res->toOne().format, $params) + '})');
}

function <<access.private>> meta::relational::functions::sqlQueryToString::getFreeMarkerOperationMap():Map<String, ToSql>[1]
{
   let freeMarkerOpMap = [
      pair('variableCollectionSize', ^ToSql(format='collectionSize(%s)')),
      pair('optionalVarPlaceHolderOpSelector', ^ToSql(format='optionalVarPlaceHolderOperationSelector(%s, %s, %s)'))
   ]->newMap();
}
