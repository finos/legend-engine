// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::pure::mapping::*;
import meta::pure::runtime::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::*;
import meta::relational::runtime::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::functions::typeInference::*;
import meta::relational::mapping::*;
import meta::relational::dbTestRunner::*;

function meta::relational::dbTestRunner::runDynaFunctionDatabaseTest(dynaFunc:DynaFunction[1], expectedResult:Literal[1..*], testConfig:DbTestConfig[1]): Boolean[1]
{
  runDynaFunctionDatabaseTest($dynaFunc, $expectedResult, [] , $testConfig);
} 

function meta::relational::dbTestRunner::runDynaFunctionDatabaseTest(dynaFunc:DynaFunction[1], expectedResult:Literal[1..*], equalityComparator: Function<{Any[1..*],Any[1..*]->Boolean[1]}>[0..1] , testConfig:DbTestConfig[1]): Boolean[1]
{ 
  //sqlQueryGenerator
  let sqlQuery = defaultDynaFunctionSqlQueryGenerator($dynaFunc,$expectedResult, $testConfig);
  $sqlQuery->runSqlQueryTest(overwriteDynaFunctionExpectedResult($expectedResult, $testConfig), $equalityComparator, $testConfig);
}

function meta::relational::dbTestRunner::defaultDynaFunctionSqlQueryGenerator(dynaFunc:DynaFunction[1] , expectedResult:Literal[1..*], testConfig:DbTestConfig[1]): SQLQuery[1]
{ 
  $expectedResult->match([
    l:Literal[1] | $l.value->match([
                        b: Boolean[1] | ^SelectSQLQuery(columns = [^DynaFunction(name = 'case', parameters= [$dynaFunc, ^Literal(value=1), ^Literal(value=0)])]
                                                        );  ,              // if return type is boolean, wrap as : select case when 'dynaFunc'  then 1 else 0 
                        a: Any[1] | ^SelectSQLQuery(columns=[$dynaFunc]);
                  ]);,
    a:Any[*] | ^SelectSQLQuery(columns=[$dynaFunc]);
  ]);
}

function meta::relational::dbTestRunner::overwriteDynaFunctionExpectedResult(expectedResult:Literal[1..*], testConfig:DbTestConfig[1]): Literal[1..*]
{ 
  $expectedResult.value->match([
          b: Boolean[1] | if($b==true, |^Literal(value=1), |^Literal(value=0)),  // if dynaFunc returns true , returns 1 , else 0
          a: Any[1] |  $expectedResult
    ]);
}