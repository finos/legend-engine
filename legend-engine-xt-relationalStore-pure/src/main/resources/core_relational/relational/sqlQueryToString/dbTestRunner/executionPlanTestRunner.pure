// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::runtime::*;
import meta::relational::mapping::*;
import meta::relational::dbTestRunner::*;
import meta::pure::alloy::connections::*;
import meta::pure::mapping::*;
import meta::pure::runtime::*;

Class meta::relational::dbTestRunner::DbTestConfig
{
   dbType: DatabaseType[1];
   connection: RelationalDatabaseConnection[0..1];
   expectedSql: String[0..1];
   deviatesFromStandard: Boolean[0..1];
}

function meta::relational::dbTestRunner::getTestConnection(dbType:DatabaseType[1], extensions:meta::pure::extension::Extension[*]):RelationalDatabaseConnection[0..1]
{
  meta::legend::test::mayExecuteLegendTest
     (
       {clientVersion, serverVersion, serializationKind, host, port |
         let fStr = 'meta::protocols::pure::'+$clientVersion+'::invocation::execution::testConnection::getTestConnection_DatabaseType_1__String_1__Integer_1__Extension_MANY__RelationalDatabaseConnection_$0_1$_';
         let xf = $fStr->pathToElement()->cast(@Function<{DatabaseType[1], String[1], Integer[1], meta::pure::extension::Extension[*]->RelationalDatabaseConnection[0..1]}>);
         let res= $xf->evaluate([$dbType, $host, $port]->map(v|list($v))->concatenate(list($extensions)));
         if($res->isNotEmpty(), 
           |$res->toOne()->cast(@RelationalDatabaseConnection),
           | fail('**** Error **** : Test Connection for dbType: '+ $dbType->toString() + ' not available on Legend Engine Server');
             []->cast(@RelationalDatabaseConnection);
           );
         },
       { |
         println('**** Warning **** : Legend Engine Server not available');
         []->cast(@RelationalDatabaseConnection);
       }
     );
}

function meta::relational::dbTestRunner::findParameterizedTests(packOrFn: Any[*]): Function<{DbTestConfig[1] -> Boolean[1]}>[*]
{
   $packOrFn->map(pof| $pof->match([
      f:Function<Any>[1]| if($f->instanceOf(AnnotatedElement) && $f->cast(@AnnotatedElement).stereotypes->contains(meta::pure::test::paramTest->stereotype('Test')), |$f->cast(@Function<{DbTestConfig[1] -> Boolean[1]}>), |[]),
      p:Package[1]| $p.children->findParameterizedTests(),
      x:Any[1]| []
   ]));
}

function meta::relational::dbTestRunner::doSetupOnConnection(records:String[1], db:meta::relational::metamodel::Database[1], config:DbTestConfig[1], extensions:meta::pure::extension::Extension[*]):Boolean[1]
{
  if($config.connection->isEmpty(),
    |  
        println('**** Warning **** : No connection available for given dbtype, Skipping execution of setup sqls');
        false;,
    |   
        let setupSqls = meta::alloy::service::execution::setUpDataSQLs($records, $db, meta::relational::functions::sqlQueryToString::createDbConfig($config.dbType));

        let con = $config.connection->cast(@RelationalDatabaseConnection)->toOne();
        let connWithDb= ^$con(element= $db);

        $setupSqls->executeInRelationalDb($connWithDb,meta::relational::extension::relationalExtensions());
        println('setup done');
        true;
   )   
}

function meta::relational::dbTestRunner::executeInRelationalDb(sqls:String[*], conn:RelationalDatabaseConnection[1], extensions:meta::pure::extension::Extension[*]):Boolean[1]
{
  meta::legend::test::mayExecuteLegendTest
     (
       {clientVersion, serverVersion, serializationKind, host, port |
            let fStr = 'meta::protocols::pure::'+$clientVersion+'::invocation::execution::executeInRelationalDb::executeInRelationalDb_String_MANY__RelationalDatabaseConnection_1__String_1__Integer_1__Extension_MANY__Boolean_1_';
            let xf = $fStr->pathToElement()->cast(@Function<{String[*], RelationalDatabaseConnection[1], String[1], Integer[1], meta::pure::extension::Extension[*]->Boolean[1]}>);
            let res= $xf->evaluate(list($sqls)->concatenate([$conn->toOne(), $host, $port]->map(v|list($v)))->concatenate(list($extensions)));
            $res->cast(@Boolean)->toOne();
         },
       { |
         println('**** Warning **** : Legend Engine Server not available');
         false;
       }
     );
}

function meta::relational::dbTestRunner::executeViaPlan<T|m>(f:FunctionDefinition<{->T[m]}>[1], m:Mapping[1], db:meta::relational::metamodel::Database[1], config:DbTestConfig[1], extensions:meta::pure::extension::Extension[*]):meta::pure::mapping::Result<T|m>[0..1]
{
  let pureRuntime = if($config.connection->isEmpty(),
     | 
       println('**** Warning **** : No connection available for given dbtype, Skipping execution of plan');
       ^Runtime(connections= ^TestDatabaseConnection(element = $db, type= $config.dbType));,
     |
       let conn = $config.connection->cast(@RelationalDatabaseConnection)->toOne();
       let connWithDb= ^$conn(element=$db);
       ^Runtime(connections=$connWithDb);
  );

  let basicPlan = meta::pure::executionPlan::executionPlan($f, $m, $pureRuntime,^ExecutionContext(), $extensions, noDebug());

  if($config.expectedSql->isEmpty(), |true,
    |assertEquals($config.expectedSql->toOne(), $basicPlan.rootExecutionNode.childNodes()->filter(n|$n->instanceOf(SQLExecutionNode))->at(0)->cast(@SQLExecutionNode).sqlQuery));

  if($config.connection->isEmpty(), |[],             
     | let boundPlan = meta::pure::executionPlan::platformBinding::localBinding::bindTestPlanToPlatformLocally($basicPlan, $extensions);
       let res=meta::pure::router::executePlan($boundPlan,$extensions);
       let values = $res.values->cast(@T);
       ^Result<T|m>(values = $values, activities= $res.activities);
  );  
}

function meta::relational::dbTestRunner::runDataAssertion(result:Any[0..1], config:DbTestConfig[1], assertion:Function<{->Boolean[1]}>[1]): Boolean[1]
{
  if($result->isEmpty(), |true,
    |if($config.deviatesFromStandard == true,
        | $assertion->runDataAssertionWhichDeviatesFromStandard();
          fail('**** Error **** : The dbType is configured as deviating from standard for this case, but the data assertion passes. Please reconfigure the dbType as not deviating');,
        | $assertion->eval()));
}

function meta::relational::dbTestRunner::runDataAssertionWhichDeviatesFromStandard(assertion:Function<{->Boolean[1]}>[1]): Boolean[1]
{
  println('**** Warning **** : The dbType is configured as deviating from standard for this case, hence data assertion results are expected to fail');
  $assertion->eval();
}
