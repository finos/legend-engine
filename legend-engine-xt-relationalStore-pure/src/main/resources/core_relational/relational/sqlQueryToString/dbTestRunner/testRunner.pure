// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::pureToSqlQuery::metamodel::*;
import meta::pure::executionPlan::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::pure::mapping::*;
import meta::pure::runtime::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::*;
import meta::relational::runtime::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::functions::typeInference::*;
import meta::relational::mapping::*;
import meta::relational::dbTestRunner::*;

function meta::relational::dbTestRunner::runSqlQueryTest(sqlQuery:SQLQuery[1], expectedResult:Literal[1..*], equalityComparator: Function<{Any[1..*],Any[1..*]->Boolean[1]}>[0..1] , testConfig:DbTestConfig[1]): Boolean[1]
{
  runSqlQueryTest($sqlQuery, $expectedResult, []->cast(@Pair<VarPlaceHolder, Any>), $equalityComparator, $testConfig);
}

function meta::relational::dbTestRunner::runSqlQueryTest(sqlQuery:SQLQuery[1], expectedResult:Literal[1..*], inputs:Pair<VarPlaceHolder, Any>[*], equalityComparator: Function<{Any[1..*],Any[1..*]->Boolean[1]}>[0..1] , testConfig:DbTestConfig[1]): Boolean[1]
{
  let sqlString = sqlQueryToString($sqlQuery, $testConfig.dbType, []);

  if($testConfig.expectedSql->isNotEmpty(),
      | assertEquals($testConfig.expectedSql->toOne(), $sqlString),
      | true
    );
  
  if($testConfig.connection->isEmpty(),
    |   true ,                                                     // test Connection not available ,do nothing further,
    |     let conn1= $testConfig.connection->toOne();
          let conn = ^$conn1(element= ^Database(name='dummyDB'));                      // overwite given connection db 
          
          let expectedResultTypes = $expectedResult->map(e|$e->inferRelationalType())->toOneMany();
          let plan = wrapSQLStringInExecutionPlan($sqlString, $expectedResultTypes, $testConfig.dbType,$conn, $inputs);
          
          let res = executePlan($plan,relationalExtensions());

          runDataAssertion($res, $testConfig,                                  
                | let areEqual = if($equalityComparator->isNotEmpty(),
                                  | $equalityComparator->toOne()->eval($res.values->toOneMany(), $expectedResult.value->toOneMany());, // expected values are wrapped in Literals currently
                                  | defaultEqualityComparator($res.values->toOneMany(), $expectedResult.value->toOneMany());
                                 );

                  let expectedStr = $expectedResult.value->map(v|$v->toString())->makeString('[',', ',']');
                  let resStr = $res.values->map(v|$v->toString())->makeString('[',', ',']');
                  let errMsg = 'Result assert failed, expected Values : '+ $expectedStr  +', actual Values : ' + $resStr;
                  
                  assert($areEqual , $errMsg);
                  assert($res.activities->cast(@RelationalActivity).comment->toOne()->meta::pure::functions::string::matches('-- \"executionTraceID\" : \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\"'));
              );
     );
}


function meta::relational::dbTestRunner::defaultEqualityComparator(actual:Any[1..*], expected:Any[1..*] ): Boolean[1]
{
  zip($actual ,$expected)->map(x|
            $x.first->match([
              n1:Number[1] |   $x.second->match([ 
                   n2:Number[1] |  (abs($n1 - $n2) == 0)  ||  (abs($n1 - $n2) == 0.0) ;
                  ]);,              // use number diff to avoid following : 1.0 == 1 (float vs int)  OR  1.000 == 1.0 ( difference in precision digits )
              sd1:StrictDate[1] | $x.second->match([ 
                   sd2:StrictDate[1]  |   abs(dateDiff($sd1, $sd2, DurationUnit.DAYS)) == 0 ; 
                  ]);,              // use date diff to compare as dates might have varying precision but same values : %2022-10-01 == %2022-10-01T00:00:00+0000
              dt1:DateTime[1] | $x.second->match([ 
                   dt2:DateTime[1]  |   abs(dateDiff($dt1, $dt2, DurationUnit.SECONDS)) == 0 ; 
                  ]);,              // use date diff to compare as dates might have varying precision but same values : %2022-10-01T00:00:00+0000 == %2022-10-01T00:00:00.0000+0000
              a:Any[1] |     equal($x.first , $x.second);
            ]);
            )->and();
}


function meta::relational::dbTestRunner::floatEqualityComparatorGenerator(tolerance:Any[1..*]) :  Function<{Any[1..*], Any[1..*] -> Boolean[1]}>[1]
{
  {actual:Any[1..*], expected:Any[1..*] |      
        assert($expected->size() == $actual->size());
        assert($expected->size() == $tolerance->size());
        
        zip(zip($actual ,$expected ), $tolerance )->map(x|
                  $x->match([
                    a:Pair<Pair<Number,Number>,Number>[1] |
                          if( abs($a.first->cast(@Pair<Number,Number>).first - $a.first->cast(@Pair<Number,Number>).second) <= abs($a.second->cast(@Number)), |true, |false);,
                    b:Any[1] | false;
                  ]))->and();
  }
}

function meta::relational::dbTestRunner::timestampEqualityComparatorGenerator(tolerance:Any[1..*], du:DurationUnit[1]) :  Function<{Any[1..*], Any[1..*] -> Boolean[1]}>[1]
{
  {actual:Any[1..*], expected:Any[1..*] |      
        assert($expected->size() == $actual->size());
        assert($expected->size() == $tolerance->size());
        
        zip(zip($actual ,$expected ), $tolerance )->map(x|
                  $x->match([
                    a:Pair<Pair<Date,Date>,Number>[1] |
                          if(abs(dateDiff($a.first->cast(@Pair<Date,Date>).first, $a.first->cast(@Pair<Date,Date>).second, $du)) <= abs($a.second->cast(@Number)), |true, |false);,
                    b:Any[1] | false;
                  ]))->and();
  }
}

function meta::relational::dbTestRunner::wrapSQLStringInExecutionPlan(sqlString:String[1], resultTypes:meta::relational::metamodel::datatype::DataType[1..*], dbType:DatabaseType[1], connection:DatabaseConnection[1], inputs:Pair<VarPlaceHolder, Any>[*]):ExecutionPlan[1]
{
  let allocationNodes = $inputs->map(v | ^AllocationExecutionNode
                                             (
                                               varName        = $v.first.name, 
                                               resultType     = ^DataTypeResultType(type=$v.first.type), 
                                               executionNodes = ^ConstantExecutionNode
                                                                 (
                                                                    resultType=^DataTypeResultType(type=$v.first.type),
                                                                    values=$v.second
                                                                 )
                                             ));

  let runtime = ^Runtime(connections=$connection);
  
  let resultType = ^DataTypeResultType(type= $resultTypes->at(0)->meta::relational::metamodel::datatype::dataTypeToCompatiblePureType());

  let resultColumns = $resultTypes->toIndexed()->map(e| 
            ^SQLResultColumn(label='result' + $e.first->toString(), dataType=$e.second));
  
  let sqlExecutionNode = ^RelationalDataTypeInstantiationExecutionNode(
                           resultType=$resultType,
                           executionNodes=^SQLExecutionNode(
                                sqlComment= '-- "executionTraceID" : "${execID}"',
                                sqlQuery=$sqlString ,
                                connection=$connection , 
                                resultType=$resultType,
                                resultColumns=$resultColumns));
 
  let rootExecutionNode = if($allocationNodes->isEmpty(),
                            |$sqlExecutionNode,
                            |^SequenceExecutionNode(resultType=$resultType, executionNodes=$allocationNodes->concatenate($sqlExecutionNode))
                          );

  ^ExecutionPlan(
    authDependent=false,
    runtime=$runtime,
    func={|true},
    mapping=^Mapping(name='dummyMapping'),
    rootExecutionNode=$rootExecutionNode
    );
}
