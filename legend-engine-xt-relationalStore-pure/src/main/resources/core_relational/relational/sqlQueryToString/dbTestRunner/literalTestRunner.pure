// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::*;
import meta::pure::extension::*;
import meta::relational::extension::*;
import meta::pure::mapping::*;
import meta::pure::runtime::*;
import meta::relational::metamodel::relation::*;
import meta::relational::metamodel::*;
import meta::relational::runtime::*;
import meta::relational::functions::pureToSqlQuery::metamodel::*;
import meta::relational::functions::sqlQueryToString::*;
import meta::relational::functions::typeInference::*;
import meta::relational::mapping::*;
import meta::relational::dbTestRunner::*;

function meta::relational::dbTestRunner::runLiteralDatabaseTest(literal:Literal[1], expectedResult:Literal[1], testConfig:DbTestConfig[1]): Boolean[1]
{
  runLiteralDatabaseTest($literal, $expectedResult, []->cast(@Pair<VarPlaceHolder, Any>), [] , $testConfig);
}

function meta::relational::dbTestRunner::runLiteralDatabaseTest(literal:Literal[1], expectedResult:Literal[1], inputs:Pair<VarPlaceHolder, Any>[*], testConfig:DbTestConfig[1]): Boolean[1]
{
  runLiteralDatabaseTest($literal, $expectedResult, $inputs, [] , $testConfig);
}

function meta::relational::dbTestRunner::runLiteralDatabaseTest(literal:Literal[1], expectedResult:Literal[1], inputs:Pair<VarPlaceHolder, Any>[*], equalityComparator: Function<{Any[1..*],Any[1..*]->Boolean[1]}>[0..1] , testConfig:DbTestConfig[1]): Boolean[1]
{ 
  //sqlQueryGenerator
  let sqlQuery = defaultLiteralSqlQueryGenerator($literal);
  $sqlQuery->runSqlQueryTest($expectedResult, $inputs, $equalityComparator, $testConfig);
}

function meta::relational::dbTestRunner::defaultLiteralSqlQueryGenerator(literal:Literal[1]): SQLQuery[1]
{ 
  ^SelectSQLQuery(columns=[$literal])
}