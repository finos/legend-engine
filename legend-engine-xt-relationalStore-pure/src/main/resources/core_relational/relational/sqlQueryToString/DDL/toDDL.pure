// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::sqlQueryToString::*;
import meta::relational::metamodel::*;
import meta::relational::metamodel::relation::*;
import meta::relational::runtime::*;
import meta::relational::functions::toDDL::*;
import meta::relational::functions::database::*;
import meta::relational::metamodel::execute::*;

function meta::relational::functions::toDDL::createSchemaStatement(schemaName:String[1], dbConfig:DbConfig[1]) : String[*]
{
  $dbConfig.translateCreateSchema(^CreateSchemaSQL(schema= ^Schema(name= $schemaName, database=^Database(name='dummy'))));
}

function meta::relational::functions::toDDL::dropSchemaStatement(schemaName:String[1], dbConfig:DbConfig[1]) : String[*]
{
   $dbConfig.translateDropSchema(^DropSchemaSQL(schema= ^Schema(name= $schemaName, database=^Database(name='dummy'))));
}

function meta::relational::functions::toDDL::dropTableStatement(database:Database[1], tableName: String[1], dbConfig:DbConfig[1]) : String[*]
{
    dropTableStatement($database, 'default', $tableName, $dbConfig);
}

function meta::relational::functions::toDDL::createTableStatement(database:Database[1], tableName: String[1], dbConfig:DbConfig[1]) : String[*]
{
    createTableStatement($database, 'default', $tableName, $dbConfig);
}

function meta::relational::functions::toDDL::dropTableStatement(database:Database[1], schema: String[1], tableName: String[1], dbConfig:DbConfig[1]) : String[*]
{
   dropTableStatement($database, $schema, $tableName, getTableToTableIdentityFunction(), $dbConfig);
}

function meta::relational::functions::toDDL::dropTableStatement(t:Table[1], dbConfig:DbConfig[1]) : String[*]
{
   $dbConfig.translateDropTable(^DropTableSQL(table=$t));
}

function meta::relational::functions::toDDL::createTableStatement(database:Database[1], schema: String[1], tableName: String[1], dbConfig:DbConfig[1]) : String[*]
{
   createTableStatement($database, $schema, $tableName, getTableToTableIdentityFunction(), true, $dbConfig);
}

function meta::relational::functions::toDDL::createTableStatement(t:Table[1], applyConstraints:Boolean[1], dbConfig:DbConfig[1]) : String[*]
{
   $dbConfig.translateCreateTable(^CreateTableSQL(table= $t, applyConstraints= $applyConstraints));
}

function meta::relational::functions::toDDL::dropTableStatement(database:Database[1], schema: String[1], tableName: String[1], tablePostProcess: Function<{Table[1]->Table[1]}>[1], dbConfig:DbConfig[1]) : String[*]
{
   let t = $tablePostProcess->eval(getTable($database, $schema, $tableName));
   dropTableStatement($t, $dbConfig);
}

function meta::relational::functions::toDDL::createTableStatement(database:Database[1], schema: String[1], tableName: String[1], tablePostProcess: Function<{Table[1]->Table[1]}>[1], applyConstraints:Boolean[1], dbConfig:DbConfig[1]) : String[*]
{
   let t = $tablePostProcess->eval(getTable($database, $schema, $tableName));
   $t->createTableStatement($applyConstraints, $dbConfig);
}

function
{doc.doc = 'Input CSV file must contain one empty line between each table and two empty lines after the last table'}
meta::relational::functions::database::loadCsvDataToDbTable(csvData:List<String>[*],
                                                         db:Database[1],
                                                         databaseConnection:DatabaseConnection[1],
                                                         tablePostProcessor:Function<{Table[1]->Table[1]}>[1]
                                                         ):Any[*]
{
   let dbConfig = createDbConfig($databaseConnection.type);
   loadCsvDataToDbTable($csvData, $db, $dbConfig, $tablePostProcessor)->map(sql|executeInDb($sql, $databaseConnection));
}

Class meta::relational::functions::database::Res
{
   p : List<List<String>>[1];
   s : String[*];
}

function meta::relational::functions::database::loadCsvDataToDbTable(csvData:List<String>[*],
                                                         db:Database[1],
                                                         dbConfig:DbConfig[1],
                                                         tablePostProcessor:Function<{Table[1]->Table[1]}>[1]
                                                         ) : String[*]
{
   $csvData->fold({row,tab |if(($row.values->at(0) == '' || $row.values->at(0)->startsWith('-')) && !$tab.p.values->isEmpty() && $row.values->size()==1,
                                | let schemaName = $tab.p.values->at(0).values->at(0);
                                  let tableName = $tab.p.values->at(1).values->at(0);
                                  let columnNames = $tab.p.values->at(2).values;
                                  let schema = $db->schema($schemaName);
                                  assertNotEmpty($schema, | 'Schema "' + $schemaName + '" not found in database "' + $db->elementToPath() + '"');
                                  let table = $schema->toOne()->table($tableName);
                                  assertNotEmpty($table,| 'Table "' + $tableName + '" not found in Schema "' + $schemaName + '" in Database "' + $db->elementToPath() + '"');
                                  let pTable = $tablePostProcessor->eval($table)->toOne();
                                  let columns = $columnNames->map(cName | let c = $pTable->toOne().columns->cast(@Column)->filter(tc| $tc.name->equalIgnoreCase($cName->trim()))->first();
                                                                          assertNotEmpty($c,| 'Column "' + $cName + '" not found in Table "' + $tableName + '" in Database "' + $db->elementToPath() + '"');
                                                                          $c;  );
                                  let sql = loadValuesToDbTable2(list($tab.p.values->slice(3,$tab.p.values->size())),
                                                       $pTable, $columns, $dbConfig);
                                  ^Res(p=^List<List<String>>(), s=$tab.s->concatenate($sql));,
                                | let r = $tab.p;
                                  ^Res(p=^$r(values+=$row), s = $tab.s);
                            );
                  },^Res(p=^List<List<String>>(), s = [])
            ).s;
}

function meta::relational::functions::database::loadValuesToDbTable2(data : List<List<String>>[1], table:Table[1],columns : Column[*], dbConfig: DbConfig[1]) : String[*]
{
    $dbConfig.translateLoadTable(^LoadTableSQL(table=$table, columnsToLoad=$columns, parsedData=$data));
}

function meta::alloy::service::execution::schemaAndTableSetup(db:Database[1], dbConfig:DbConfig[1]):String[*]
{
   let allSchemas = $db->allSchemas();

   let schemaSetup = $allSchemas->map({schema |
      meta::relational::functions::toDDL::dropSchemaStatement($schema.name, $dbConfig)->concatenate(
          meta::relational::functions::toDDL::createSchemaStatement($schema.name, $dbConfig))
   });

   let tableSetup = $allSchemas->map({schema |
      $schema.tables->map({t |
        dropTableStatement($db, $schema.name, $t.name, $dbConfig)->concatenate(
            createTableStatement($db, $schema.name, $t.name, $dbConfig))
      })
   });

   $schemaSetup->concatenate($tableSetup);
}

function meta::alloy::service::execution::setUpDataSQLs(data:String[1], db:Database[1], dbConfig:DbConfig[1]) : String[*]
{
   let schemaAndTableSetup = $db->meta::alloy::service::execution::schemaAndTableSetup($dbConfig);

   let formattedData = $data->split('\n')
                            ->map(l|list($l->meta::alloy::service::execution::splitWithEmptyValue()))
                            ->concatenate(list(''));

   $schemaAndTableSetup->concatenate(loadCsvDataToDbTable($formattedData, $db, $dbConfig, t:Table[1]|$t));
}

function meta::alloy::service::execution::setUpDataSQLs(records:List<String>[*], db:Database[1], dbConfig:DbConfig[1]) : String[*]
{
   let schemaAndTableSetup = $db->meta::alloy::service::execution::schemaAndTableSetup($dbConfig);
   $schemaAndTableSetup->concatenate(loadCsvDataToDbTable($records, $db, $dbConfig, t:Table[1]|$t));
}
