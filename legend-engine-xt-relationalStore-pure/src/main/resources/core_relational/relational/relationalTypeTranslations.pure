// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::runtime::*;
import meta::relational::translation::*;

Class meta::relational::translation::TranslationContext
{
   dbType: DatabaseType[0..1];
   coreTypeToDbSpecificSqlTranslator: Function<{meta::relational::metamodel::datatype::DataType[1] -> String[0..1]}>[0..1];
}

function meta::relational::translation::translateCoreTypeToDbSpecificType(type: meta::relational::metamodel::datatype::DataType[0..1], translationContext : TranslationContext[1]): meta::relational::metamodel::datatype::DataType[0..1]
{
   if($type->isEmpty() || ($translationContext.dbType->isEmpty() && $translationContext.coreTypeToDbSpecificSqlTranslator->isEmpty()), |$type,
      |let translator = if($translationContext.coreTypeToDbSpecificSqlTranslator->isEmpty(), |coreTypeToDbSpecificSqlTranslator($translationContext.dbType->toOne()), |$translationContext.coreTypeToDbSpecificSqlTranslator);
       if($translator->isEmpty(), |$type,
          |let dbSpecificSql = $translator->toOne()->eval($type->toOne());
           if($dbSpecificSql->isEmpty(), |$type, |^meta::relational::metamodel::datatype::DbSpecificDataType(
                                                    coreDataType=$type->toOne()->cast(@meta::relational::metamodel::datatype::CoreDataType),
                                                    dbSpecificSql=$dbSpecificSql->toOne())
           );
       );
   );
}

function <<access.private>> meta::relational::translation::coreTypeToDbSpecificSqlTranslator(dbType:DatabaseType[1]): Function<{meta::relational::metamodel::datatype::DataType[1] -> String[0..1]}>[0..1]
{
  //  newMap([
  //     pair(DatabaseType.BigQuery,
  //          type: meta::relational::metamodel::datatype::DataType[1]| $type->match([
  //             v: meta::relational::metamodel::datatype::Varchar[1]| format('STRING(%d)', $v.size),
  //             a: meta::relational::metamodel::datatype::DataType[1]| []
  //          ])
  //     )
  //  ])->get($dbType);
  [];
}
