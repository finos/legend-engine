// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::model::simple::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::executionPlan::*;
import meta::relational::mapping::*;
import meta::relational::runtime::*;
import meta::relational::tests::*;

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testStringLiteral():Boolean[1]
{
   let result = execute(
      |Person.all()
         ->project(p|$p.firstName,'firstName')
         ->extend([col({r:TDSRow[1]|'Hello'}, 'hello')]),
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());

   assertSize($result.values.columns, 2);   
   
   assertEquals('Peter|Hello,John|Hello,John|Hello,Anthony|Hello,Fabrice|Hello,Oliver|Hello,David|Hello',
      $result.values.rows->map(r|$r.values->makeString('|'))->makeString(','));
   
   assertEquals('select "root".FIRSTNAME as "firstName", \'Hello\' as "hello" from personTable as "root"', 
      $result->sqlRemoveFormatting());   
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testFunctionOnVariable():Boolean[1]
{
   let plan = executionPlan({ var:String[1]| Person.all()->project(p|$p.firstName,'firstName')
                                                           ->extend(^BasicColumnSpecification<TDSRow>(func={r:TDSRow[1]|$var}, name='var'))}, simpleRelationalMapping, testRuntime(), meta::relational::extension::relationalExtensions());

   assertEquals('Sequence (   type = TDS[(firstName, String, VARCHAR(200), ""), (var, String, "", "")]   (     FunctionParametersValidationNode     (       functionParameters = [var:String[1]]     )     Relational     (       type = TDS[(firstName, String, VARCHAR(200), ""), (var, String, "", "")]       resultColumns = [("firstName", VARCHAR(200)), ("var", "")]       sql = select "root".FIRSTNAME as "firstName", \'${var?replace("\'", "\'\'")}\' as "var" from personTable as "root"       connection = TestDatabaseConnection(type = "H2")     )   ) ) ', $plan->planToString(meta::relational::extension::relationalExtensions())->replace('\n',' '));
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testFunctionOnStringLiteral():Boolean[1]
{
   let result = execute(
      |Person.all()
         ->project(p|$p.firstName,'first_name')
         ->extend([col({r:TDSRow[1]|'Hello'->length()}, 'hello_length')]),
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());
   
   assertSize($result.values.columns, 2);
   
   assertEquals('Peter|5,John|5,John|5,Anthony|5,Fabrice|5,Oliver|5,David|5',
      $result.values.rows->map(r|$r.values->makeString('|'))->makeString(','));  
   
   assertEquals('select "root".FIRSTNAME as "first_name", char_length(\'Hello\') as "hello_length" from personTable as "root"',
      $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testStringColumn():Boolean[1]
{
   let result = execute(
      |Person.all()
         ->project(p|$p.firstName,'first_name')
         ->extend([col({r:TDSRow[1]|$r.getString('first_name')}, 'name_again')]),
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());
   
   assertSize($result.values.columns, 2);  
   
   assertEquals('Peter|Peter,John|John,John|John,Anthony|Anthony,Fabrice|Fabrice,Oliver|Oliver,David|David',
      $result.values.rows->map(r|$r.values->makeString('|'))->makeString(',')); 
   
   assertEquals('select "root".FIRSTNAME as "first_name", "root".FIRSTNAME as "name_again" from personTable as "root"',
      $result->sqlRemoveFormatting());  
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testFunctionOnStringColumn():Boolean[1]
{
   let result = execute(
      |Person.all()
         ->project(p|$p.firstName,'first_name')
         ->extend([col({r:TDSRow[1]| $r.getString('first_name')->length()}, 'name_length')]),
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals([String, Integer], $result.values.columns.type);
   assertSize($result.values.columns, 2);  
   
   assertEquals('Peter|5,John|4,John|4,Anthony|7,Fabrice|7,Oliver|6,David|5',
      $result.values.rows->map(r|$r.values->makeString('|'))->makeString(',')); 
   
   assertEquals('select "root".FIRSTNAME as "first_name", char_length("root".FIRSTNAME) as "name_length" from personTable as "root"',
      $result->sqlRemoveFormatting());  
}

function <<test.ToFix>> meta::relational::tests::tds::tdsExtend::testFunctionOnEnumColumn():Boolean[1]
{
   let result = execute(
      |Address.all()
         ->project([a|$a.name, a|$a.type],['name', 'type'])
         ->extend([col({r:TDSRow[1]|$r.getEnum('type') == GeographicEntityType.CITY}, 'type_enum')]),
      simpleRelationalMapping,
      testRuntime(), meta::relational::extension::relationalExtensions());
   
   assertSize($result.values.columns, 3);   
      
   assertEquals('Hoboken|CITY|1,New York|CITY|1,New York|CITY|1,New York|CITY|1,San Fransisco|CITY|1,Hong Kong|CITY|1,New York|CITY|1,New York|CITY|1,Cupertino|CITY|1,Tokyo|CITY|1,Mountain View|CITY|1',
      $result.values.rows->map(r|$r.values->makeString('|'))->makeString(','));
   
   assertEquals('select "root".NAME as "name", "root".TYPE as "type" from addressTable as "root" where "root".TYPE = 1',
      $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testMultipleFunctions():Boolean[1]
{
   let result = execute(
      |Person.all()
         ->project(p|$p.firstName,'first_name')
         ->extend([col({r:TDSRow[1]|'Hello'}, 'const'),
                   col({r:TDSRow[1]|$r.getString('first_name')->length()}, 'name_length')]),
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());
      
   assertSize($result.values.columns, 3);
   
   assertEquals('Peter|Hello|5,John|Hello|4,John|Hello|4,Anthony|Hello|7,Fabrice|Hello|7,Oliver|Hello|6,David|Hello|5',
      $result.values.rows->map(r|$r.values->makeString('|'))->makeString(',')); 
   
   assertEquals('select "root".FIRSTNAME as "first_name", \'Hello\' as "const", char_length("root".FIRSTNAME) as "name_length" from personTable as "root"',
      $result->sqlRemoveFormatting());  
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testExtendAndExtendAgain():Boolean[1]
{
   let result = execute(
      |Person.all()
         ->project(p|$p.firstName,'first_name')
         ->extend([col({r:TDSRow[1]|$r.getString('first_name')->length()}, 'name_length')])
         ->extend([col({r:TDSRow[1]|$r.getInteger('name_length') * 2}, 'double_name_length')]),
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());
   
   assertSize($result.values.columns, 3);  
   
   assertEquals('Peter|5|10,John|4|8,John|4|8,Anthony|7|14,Fabrice|7|14,Oliver|6|12,David|5|10',
      $result.values.rows->map(r|$r.values->makeString('|'))->makeString(',')); 
   
   assertEquals('select "root".FIRSTNAME as "first_name", char_length("root".FIRSTNAME) as "name_length", (char_length("root".FIRSTNAME) * 2) as "double_name_length" from personTable as "root"',
      $result->sqlRemoveFormatting());  
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testExtendOnDynaFunctionColumn():Boolean[1]
{
   let result = execute(
      |Person.all()
         ->project([p|$p.firstName, p|$p.lastName->toUpper()], ['first', 'LAST'])
         ->extend([col({r:TDSRow[1]|$r.getString('LAST')->length()}, 'name_length')]),
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());
      
   assertSize($result.values.rows, 7);
   
   assertEquals('Peter|SMITH|5,John|JOHNSON|7,John|HILL|4,Anthony|ALLEN|5,Fabrice|ROBERTS|7,Oliver|HILL|4,David|HARRIS|6',
      $result.values.rows->map(r|$r.values->makeString('|'))->makeString(','));
   
   assertEquals('select "root".FIRSTNAME as "first", upper("root".LASTNAME) as "LAST", char_length(upper("root".LASTNAME)) as "name_length" from personTable as "root"',
      $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testExtendOnMultiple():Boolean[1]
{
   let result = execute(
      |Person.all()
         ->project([#/Person/firstName!first_name#, #/Person/lastName!last_name#])
         ->extend([col({r:TDSRow[1]| $r.getString('first_name')->length() + $r.getString('last_name')->length()}, 'combined_length')]),
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());
   
   assertSize($result.values.columns, 3);  
   
   assertEquals('Peter|Smith|10,John|Johnson|11,John|Hill|8,Anthony|Allen|12,Fabrice|Roberts|14,Oliver|Hill|10,David|Harris|11',
      $result.values.rows->map(r|$r.values->makeString('|'))->makeString(',')); 
   
   assertEquals('select "root".FIRSTNAME as "first_name", "root".LASTNAME as "last_name", (char_length("root".FIRSTNAME) + char_length("root".LASTNAME)) as "combined_length" from personTable as "root"',
      $result->sqlRemoveFormatting());  
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testDateLiteral():Boolean[1]
{
   let result = execute(
      |Person.all()
         ->project(p|$p.firstName,'firstName')
         ->extend([col({r:TDSRow[1]|%2016-08-10}, 'dateLiteral')]),
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());
   
   let tds = $result.values->at(0);
   
   assertSize($tds.columns, 2); 
   
   assertEquals('Peter|2016-08-10,John|2016-08-10,John|2016-08-10,Anthony|2016-08-10,Fabrice|2016-08-10,Oliver|2016-08-10,David|2016-08-10',
      $tds.rows->map(r|$r.values->makeString('|'))->makeString(','));
   
   assertEquals('select "root".FIRSTNAME as "firstName", \'2016-08-10\' as "dateLiteral" from personTable as "root"', 
      $result->sqlRemoveFormatting());   
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testNoopFunctions():Boolean[1]
{
   let result = execute(
      |Person.all()
         ->project(p|$p.firstName,'firstName')
         ->extend([
          col({r:TDSRow[1]|$r.getString('firstName')->toOne()}, 'toOne'),
          col({r:TDSRow[1]|$r.getString('firstName')->first()}, 'first'),
          col({r:TDSRow[1]|[]->cast(@String)}, 'castNull'),
          col({r:TDSRow[1]|$r.getString('firstName')->cast(@String)}, 'cast')
          ]),
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());

   assertSize($result.values.columns, 5);   
   
   assertEquals('Peter|Peter|Peter|TDSNull|Peter,John|John|John|TDSNull|John,John|John|John|TDSNull|John,Anthony|Anthony|Anthony|TDSNull|Anthony,Fabrice|Fabrice|Fabrice|TDSNull|Fabrice,Oliver|Oliver|Oliver|TDSNull|Oliver,David|David|David|TDSNull|David',
      $result.values.rows->map(r|$r.values->makeString('|'))->makeString(','));
   
   assertEquals('select "root".FIRSTNAME as "firstName", "root".FIRSTNAME as "toOne", "root".FIRSTNAME as "first", null as "castNull", "root".FIRSTNAME as "cast" from personTable as "root"', 
      $result->sqlRemoveFormatting());   
}


// Alloy exclusion reason: 10. Tricky usage of variables
function <<test.Test, test.ExcludeAlloy>> {test.excludePlatform = 'Java compiled'} meta::relational::tests::tds::tdsExtend::testExtendWithVariables1():Boolean[1]
{
   let result = execute(
      |
         let firstNameColName = 'first_name';
      
         Person.all()
            ->project([#/Person/firstName!first_name#, #/Person/lastName!last_name#])
            ->extend([col({r:TDSRow[1]| $r.getString($firstNameColName)->length()}, 'first_name_length')]);
      ,
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());
   
   assertSize($result.values.columns, 3);  
   
   assertEquals('Peter|Smith|5,John|Johnson|4,John|Hill|4,Anthony|Allen|7,Fabrice|Roberts|7,Oliver|Hill|6,David|Harris|5',
      $result.values.rows->map(r|$r.values->makeString('|'))->makeString(',')); 
   
   assertEquals('select "root".FIRSTNAME as "first_name", "root".LASTNAME as "last_name", char_length("root".FIRSTNAME) as "first_name_length" from personTable as "root"',
      $result->sqlRemoveFormatting());  
}

function <<test.ToFix>> meta::relational::tests::tds::tdsExtend::testExtendWithVariables2():Boolean[1]
{
   let result = execute(
      |
         let outColName = 'first_name_length';
      
         Person.all()
            ->project([#/Person/firstName!first_name#, #/Person/lastName!last_name#])
            ->extend([col({r:TDSRow[1]| $r.getString('first_name')->length()}, $outColName)]);
      ,
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());
   
   assertSize($result.values.columns, 3);  
   
   assertEquals('Peter|Smith|6,John|Johnson|4,John|Hill|4,Anthony|Allen|7,Fabrice|Roberts|7,Oliver|Hill|7,David|Harris|5',
      $result.values.rows->map(r|$r.values->makeString('|'))->makeString(',')); 
   
   assertEquals('select "root".FIRSTNAME as "first_name", "root".LASTNAME as "last_name", char_length("root".FIRSTNAME) as "first_name_length" from personTable as "root"',
      $result->sqlRemoveFormatting());  
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testNull():Boolean[1]
{
   let result = execute(
      |Person.all()
         ->project(p|$p.firstName,'firstName')
         ->extend([
            col({r:TDSRow[1]|$r.isNull('firstName')}, 'isNull'),
            col({r:TDSRow[1]|$r.isNotNull('firstName')}, 'isNotNull')
            ]),
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());
   
   assertSize($result.values.columns, 3);   
   
   assertEquals('Peter|false|true,John|false|true,John|false|true,Anthony|false|true,Fabrice|false|true,Oliver|false|true,David|false|true',
      $result.values.rows->map(r|$r.values->makeString('|'))->makeString(','));
   
   assertEquals('select "root".FIRSTNAME as "firstName", "root".FIRSTNAME is null as "isNull", "root".FIRSTNAME is not null as "isNotNull" from personTable as "root"', 
      $result->sqlRemoveFormatting());   
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testStringConcatSQLGeneration():Boolean[1]
{
   let func = {|meta::relational::tests::model::simple::Person.all()
	      ->project([col({p:meta::relational::tests::model::simple::Person[1]|$p.firstName}, 'firstName'),
                     col({p:meta::relational::tests::model::simple::Person[1]|$p.lastName}, 'lastName'),
                     col({p:meta::relational::tests::model::simple::Person[1]|$p.age}, 'age')])
	      ->extend(col({row:TDSRow[1]|$row.getString('firstName') + $row.getString('lastName')}, 'exprString3'))};
   
   let mapping = meta::relational::tests::simpleRelationalMapping;
   
   let sqlResultH2 = meta::relational::functions::sqlstring::toSQLString($func, $mapping, meta::relational::runtime::DatabaseType.H2, meta::relational::extension::relationalExtensions());
   assertEquals($sqlResultH2, 'select "root".FIRSTNAME as "firstName", "root".LASTNAME as "lastName", "root".AGE as "age", concat("root".FIRSTNAME, "root".LASTNAME) as "exprString3" from personTable as "root"');
 
   let sqlResultSybaseIQ = meta::relational::functions::sqlstring::toSQLString($func, $mapping, meta::relational::runtime::DatabaseType.SybaseIQ, meta::relational::extension::relationalExtensions());
   assertEquals($sqlResultSybaseIQ, 'select "root".FIRSTNAME as "firstName", "root".LASTNAME as "lastName", "root".AGE as "age", "root".FIRSTNAME+"root".LASTNAME as "exprString3" from personTable as "root"');  
   
   let sqlResultDB2 = meta::relational::functions::sqlstring::toSQLString($func, $mapping, meta::relational::runtime::DatabaseType.DB2, meta::relational::extension::relationalExtensions());
   assertEquals($sqlResultDB2, 'select "root".FIRSTNAME as "firstName", "root".LASTNAME as "lastName", "root".AGE as "age", ("root".FIRSTNAME concat "root".LASTNAME) as "exprString3" from personTable as "root"'
);
}


function <<test.Test>> meta::relational::tests::tds::tdsExtend::testIfWithEmptyExtension():Boolean[1]
{
   let result = execute(
      |Person.all()
         ->project(p|$p.firstName,'firstName')
         ->extend([
            col({r:TDSRow[1]|if($r.isNotNull('firstName'), | $r.getString('firstName'), | [])}, 'extended')
            ]),
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions());
   
   assertEquals('select "root".FIRSTNAME as "firstName", case when "root".FIRSTNAME is not null then "root".FIRSTNAME else null end as "extended" from personTable as "root"', 
      $result->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testExtendWithQuotedColumnWithTableToTDS():Boolean[1]
{
   let queryWithoutQuotes   = {|tableToTDS(meta::relational::functions::database::tableReference(meta::relational::tests::db,'default','tableWithQuotedColumns'))
                   ->project([
                               col({r:TDSRow[1]|$r.getString('FIRST NAME')}, 'FIRST NAME'),
                               col({r:TDSRow[1]|$r.getString('LAST NAME')}, 'LAST NAME'),
                               col({r:TDSRow[1]|$r.getString('1columnStartsWithNumber')}, '1columnStartsWithNumber')
                              ])
                   ->extend([
                               col({r:TDSRow[1]|$r.getString('FIRST NAME')+'_hello'}, 'name_again'),
                               col({r:TDSRow[1]|$r.getString('1columnStartsWithNumber')+'_hello'}, 'numbercol_again')
                            ])};
   
   let mapping = meta::relational::tests::tds::tabletds::EmptyMapping;
   let runtime = meta::relational::tests::testRuntime();
   
   let resultWithoutQuotes = execute($queryWithoutQuotes, $mapping, $runtime, meta::relational::extension::relationalExtensions());
   
   let queryWithQuotes   = {|tableToTDS(meta::relational::functions::database::tableReference(meta::relational::tests::db,'default','tableWithQuotedColumns'))
      ->project([
                               col({r:TDSRow[1]|$r.getString('FIRST NAME')}, 'FIRST NAME'),
                               col({r:TDSRow[1]|$r.getString('LAST NAME')}, 'LAST NAME'),
                               col({r:TDSRow[1]|$r.getString('1columnStartsWithNumber')}, '1columnStartsWithNumber')


                              ])
                   ->extend([
                               col({r:TDSRow[1]|$r.getString('"FIRST NAME"')+'_hello'}, 'name_again'),
                               col({r:TDSRow[1]|$r.getString('"1columnStartsWithNumber"')+'_hello'}, 'numbercol_again')
                         
                            ])};
   
   let resultWithQuotes = execute($queryWithQuotes, $mapping, $runtime, meta::relational::extension::relationalExtensions());
   
   let expectedSql = 'select "root"."FIRST NAME" as "FIRST NAME", "root"."LAST NAME" as "LAST NAME", "root"."1columnStartsWithNumber" as "1columnStartsWithNumber", concat("root"."FIRST NAME", \'_hello\') as "name_again", concat("root"."1columnStartsWithNumber", \'_hello\') as "numbercol_again" from tableWithQuotedColumns as "root"';

   assertEquals($expectedSql, $resultWithoutQuotes->sqlRemoveFormatting());
      
   assertEquals($expectedSql, $resultWithQuotes->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::tds::tdsExtend::testExtendsWithInClause():Boolean[1]
{
   let result = execute(
      |Person.all()
         ->project([
            col(p | $p.firstName, 'firstName'),
            col(p | $p.age, 'age'),
            col(p | %2021-01-01, 'dt'),
            col(p | $p.age > 50, 'ageGreaterThan50')
         ])
         ->extend([
            col(r:TDSRow[1] | $r.getString('firstName')->in('Peter'), 'stringExtends1'),
            col(r:TDSRow[1] | $r.getString('firstName')->in(['Peter', 'John']), 'stringExtends2'),
            col(r:TDSRow[1] | $r.getInteger('age')->in([22, 23]), 'numberExtends'),
            col(r:TDSRow[1] | $r.getDate('dt')->in([%2021-01-01, %2021-01-02]), 'dateExtends'),
            col(r:TDSRow[1] | $r.getBoolean('ageGreaterThan50')->in([true, false]), 'booleanExtends')
         ]),
      simpleRelationalMapping, 
      testRuntime(), meta::relational::extension::relationalExtensions(), noDebug());
   
   assertEquals('select "root".FIRSTNAME as "firstName", "root".AGE as "age", \'2021-01-01\' as "dt", ("root".AGE is not null and "root".AGE > 50) as "ageGreaterThan50", "root".FIRSTNAME in (\'Peter\') as "stringExtends1", "root".FIRSTNAME in (\'Peter\', \'John\') as "stringExtends2", "root".AGE in (22, 23) as "numberExtends", \'2021-01-01\' in (\'2021-01-01\', \'2021-01-02\') as "dateExtends", ("root".AGE is not null and "root".AGE > 50) in (true, false) as "booleanExtends" from personTable as "root"', $result->sqlRemoveFormatting());
}
