// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::extension::*;
import meta::relational::metamodel::join::*;
import meta::pure::functions::tests::model::*;
import meta::pure::extension::*;
import meta::pure::router::extension::*;
import meta::pure::tds::extensions::*;
import meta::pure::tests::model::simple::*;
import meta::relational::tds::schema::tests::*;

//NOTE: These tests should be combined with the rest of the tdsSchema tests if/when join and columnValuDifference are moved to non relational space.
function <<test.Test>> meta::relational::tds::schema::tests::resolveSchemaTest() : Boolean[1]
{   
   
    assertSchemaRoundTripEquality({|
         Address.all()
            ->project([a|$a.name, a|$a.type, a|'left'],['name', 'type', 'left'])
            ->join(
                  Address.all()
                     ->project([a|$a.name, a|$a.type, a|'right'],['name', 'type', 'right'])
                  , 
                  JoinType.LEFT_OUTER, 
                  ['name', 'type'] 
                  );
      });  
   
    assertSchemaRoundTripEquality({|
         Address.all()
            ->project([a|$a.name, a|$a.type, a|'left'],['name', 'type', 'left'])
            ->join(
                  Address.all()
                     ->project([a|$a.name, a|$a.type, a|'right'],['name', 'type', 'right'])
                  , 
                  JoinType.LEFT_OUTER, 
                  ['name', 'type'],
                  ['name', 'type'] 
                  );
      });    

    assertSchemaRoundTripEquality({|
         Address.all()
            ->project([a|$a.name, a|$a.type, a|'left'],['left_name', 'left_type', 'left'])
            ->join(
                  Address.all()
                     ->project([a|$a.name, a|$a.type, a|'right'],['right_name', 'right_type', 'right'])
                  , 
                  JoinType.LEFT_OUTER, 
                  {a,b|$a.getString('left_name') == $b.getString('right_name') && $a.getString('left_type') == $b.getString('right_type')}
                  );
      }); 

   assertSchemaRoundTripEquality(
      [
         ^TDSColumn(name = 'first_name', offset= 0, type = String), 
         ^TDSColumn(name = 'name_again', offset= 1, type = String)
      ], 
      {|
      tableToTDS(meta::relational::functions::database::tableReference(meta::relational::tests::db,'default','personTable'))
            ->project([col(r:TDSRow[1]|$r.getString('FIRSTNAME'), 'first_name'), col(r:TDSRow[1]|$r.getString('FIRSTNAME'), 'name_again')])
            ->sort(asc('first_name'))
   }); 

  assertSchemaRoundTripEquality({|
         Trade.all()
            ->groupBy([x|$x.date->adjust(0, DurationUnit.DAYS)], 
               [ agg(x | $x.quantity, y | $y->sum()), agg(x | $x.quantity, y | $y->sum())], 
               ['tradeDate', 'quantityA', 'quantityB']
               )  
            ->columnValueDifference(
                  Trade.all()
                     ->groupBy([x|$x.date->adjust(1, DurationUnit.DAYS)], 
                        [agg(x | $x.quantity, y | $y->sum()), agg(x | $x.quantity, y | $y->sum())], 
                        ['tradeDate', 'quantityA', 'quantityB']
                        )               
                  ,               
                  ['tradeDate'], ['quantityA', 'quantityB'])
            ->sort(asc('tradeDate'))
   });  

  assertSchemaRoundTripEquality({|
         Trade.all()
            ->groupBy([x|$x.date->adjust(0, DurationUnit.DAYS)], 
               [ agg(x | $x.quantity, y | $y->sum()), agg(x | $x.quantity, y | $y->sum())], 
               ['tradeDate', 'quantityA', 'quantityB']
               )  
            ->columnValueDifference(
                  Trade.all()
                     ->groupBy([x|$x.date->adjust(1, DurationUnit.DAYS)], 
                        [agg(x | $x.quantity, y | $y->sum()), agg(x | $x.quantity, y | $y->sum())], 
                        ['tradeDate', 'quantityA', 'quantityC']
                        )               
                  ,               
                  ['tradeDate'], ['quantityA'])
            ->sort(asc('tradeDate'))
   }); 
}

function meta::relational::tds::schema::tests::assertSchemaRoundTripEquality(query : FunctionDefinition<{->TabularDataSet[1]}>[1]) : Boolean[1]
{
   meta::pure::tds::schema::tests::assertSchemaRoundTripEquality($query, extensions());
}
   
function meta::relational::tds::schema::tests::assertSchemaRoundTripEquality(expected:TDSColumn[*], query : FunctionDefinition<{->TabularDataSet[1]}>[1]) : Boolean[1]
{   
   meta::pure::tds::schema::tests::assertSchemaRoundTripEquality($expected, $query, extensions());
}  

function meta::relational::tds::schema::tests::extensions(): Extension[*]
{
  defaultExtensions()->concatenate(relationalExtensions());
} 