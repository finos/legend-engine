// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::tds::extensions::*;
import meta::relational::tests::csv::*;
import meta::protocols::tds::preeval::router::prerouting::*;
import meta::relational::tests::model::simple::*;

function <<test.Test>>
   meta::pure::tds::tests::extensions::iqrClassifyTest() : Boolean[1]
{
   let scores = [-100, 3, 4, 5, 5, 6, 7, 11, 13, 1, 4, 100, 101];
   let data = range($scores->size())->map(i|'student_' +toString($i))->zip($scores);
   
   let tds = $data->project([col(p|$p.first, 'name'), col(p|$p.second, 'score')]);
   
   let result = $tds->iqrClassify([], 'score', 'irq_classification');

   println($result->toCSV());

   let summary = $result->groupBy('irq_classification', agg('count', r:TDSRow[1]|$r, y|$y->count()))->sort(desc('count'));
   println($summary->toCSV());

   assertEquals([10,2,1], $summary->columnValues('count'));
}

function <<test.Test>>
   meta::pure::tds::tests::extensions::zScoreTest() : Boolean[1]
{
   let scores = [-1000,-100, 3, 4, 5, 5, 6, 7, 11, 13, 1, 4,6,7,8,3,54,6,2,3,4,5,6,7,8, 100, 1001];
   let data = range($scores->size())->map(i|'student_' +toString($i))->zip($scores);
   
   let tds = $data->project([col(p|$p.first, 'name'), col(p|$p.second, 'score')]);
   
   let result = $tds->zScore([], 'score', 'zscore');

   println($result->toCSV());

   let summary = $result->filter(r:TDSRow[1]|abs($r.getFloat('zscore')) >= 3)->sort(asc('score'));
   println($summary->toCSV());

   assertEquals([-1000, 1001], $summary->columnValues('score'));
}

function  <<test.BeforePackage>> meta::pure::tds::tests::setup() : Boolean[1]
{
   meta::relational::tests::createTablesAndFillDb();
}

function <<test.Test>>
   meta::pure::tds::tests::extensions::columnValueDifferenceTest() : Boolean[1]
{
   let mapping = meta::relational::tests::simpleRelationalMapping;
   let runtime = meta::relational::tests::testRuntime();
   
   let rawTradeDate = execute({|
            Trade.all()
            ->groupBy([x|$x.date->adjust(0, DurationUnit.DAYS)], 
               [
                  agg(x | $x.quantity, y | $y->sum()), 
                  agg(x | $x.id, y | $y->count())
               ], 
               ['tradeDate', 'quantity', 'count']
               )
            ->extend(col(x:TDSRow[1]|$x.isNotNull('tradeDate'), 'isNullTradeDate'))
            ->sort(asc('tradeDate'))
         }, $mapping, $runtime, meta::relational::extension::relationalExtensions()).values;
   
   let rawPrevTradeDateR = execute({|
            Trade.all()
            ->groupBy([x|$x.date->adjust(1, DurationUnit.DAYS)], 
               [
                  agg(x | $x.quantity, y | $y->sum()), 
                  agg(x | $x.id, y | $y->count())
               ], 
               ['tradeDate', 'quantity', 'count']
               )
               ->sort(asc('tradeDate'))}, $mapping, $runtime, meta::relational::extension::relationalExtensions() );
   let rawPrevTradeDate = $rawPrevTradeDateR.values;
   
   println('raw data, trade date:');
   println($rawTradeDate.columns->map(c|$c.name + ':' + $c.type->toOne()->elementToPath())->joinStrings(','));
   println($rawTradeDate->toCSV());
   println($rawTradeDate);

   println('raw data, prev date:');
   println($rawPrevTradeDate.columns->map(c|$c.name + ':' + $c.type->toOne()->elementToPath())->joinStrings(','));
   println($rawPrevTradeDate->toCSV());

   
   let q = {|
         Trade.all()
            ->groupBy([x|$x.date->adjust(0, DurationUnit.DAYS)], 
               [
                  agg(x | $x.quantity, y | $y->sum()), 
                  agg(x | $x.id, y | $y->count())
               ], 
               ['tradeDate', 'quantity', 'count']
               )  
            ->extend(col(x:TDSRow[1]|$x.isNotNull('tradeDate'), 'isNullTradeDate'))
            ->sort(asc('tradeDate'))      
            ->columnValueDifference(
                  Trade.all()
                     ->groupBy([x|$x.date->adjust(1, DurationUnit.DAYS)], 
                        [
                           agg(x | $x.quantity, y | $y->sum()), 
                           agg(x | $x.id, y | $y->count())
                        ], 
                        ['tradeDate', 'quantity', 'count']
                        )               
                  ,               
                  ['tradeDate'], ['quantity', 'count'])
            ->sort(asc('tradeDate'))
         };

   let r = execute($q, $mapping, $runtime, meta::relational::extension::relationalExtensions() );

   println('Relational results:');
   println($r.activities);

   let relationalResult = $r.values;
   
   println($relationalResult.columns->map(c|$c.name + ':' + $c.type->toOne()->elementToPath())->joinStrings(','));
   println($relationalResult->toCSV());

   assertNotEmpty($relationalResult.rows);

   let inMemoryResult = $rawTradeDate->columnValueDifference($rawPrevTradeDate, ['tradeDate'], ['quantity', 'count'])
      ->sort('tradeDate');

   println('In memory results:');
   println($inMemoryResult->toCSV());

   assertNotEmpty($inMemoryResult.rows);

   assertEquals($relationalResult->toCSV(), $inMemoryResult->toCSV());

   assertEquals('2014-12-01|true|356.0|TDSNull|356.0|3|TDSNull|3;2014-12-02|true|55.0|356.0|-301.0|2|3|-1;2014-12-03|true|71.0|55.0|16.0|2|2|0;2014-12-04|true|105.0|71.0|34.0|3|2|1;2014-12-05|true|5.0|105.0|-100.0|1|3|-2;2014-12-06|TDSNull|TDSNull|5.0|-5.0|TDSNull|1|-1',
      $relationalResult.rows->map(r|$r.values->makeString('|'))->joinStrings(';')); 
}

function <<test.Test, test.AlloyOnly>>
   meta::pure::tds::tests::extensions::columnValueDifferenceWithoutPrevalTest() : Boolean[1]
{
   let mapping = meta::relational::tests::simpleRelationalMapping;
   let runtime = meta::relational::tests::testRuntime();

   let rawTradeDate = execute({|
            Trade.all()
            ->groupBy([x|$x.date->adjust(0, DurationUnit.DAYS)],
               [
                  agg(x | $x.quantity, y | $y->sum()),
                  agg(x | $x.id, y | $y->count())
               ],
               ['tradeDate', 'quantity', 'count']
               )
            ->extend(col(x:TDSRow[1]|$x.isNotNull('tradeDate'), 'isNullTradeDate'))
            ->sort(asc('tradeDate'))
         }, $mapping, $runtime,  meta::relational::extension::relationalExtensions()).values;

   let rawPrevTradeDateR = execute({|
            Trade.all()
            ->groupBy([x|$x.date->adjust(1, DurationUnit.DAYS)],
               [
                  agg(x | $x.quantity, y | $y->sum()),
                  agg(x | $x.id, y | $y->count())
               ],
               ['tradeDate', 'quantity', 'count']
               )
               ->sort(asc('tradeDate'))}, $mapping, $runtime, meta::relational::extension::relationalExtensions() );
   let rawPrevTradeDate = $rawPrevTradeDateR.values;

   let q = {|
         Trade.all()
            ->groupBy([x|$x.date->adjust(0, DurationUnit.DAYS)],
               [
                  agg(x | $x.quantity, y | $y->sum()),
                  agg(x | $x.id, y | $y->count())
               ],
               ['tradeDate', 'quantity', 'count']
               )
            ->extend(col(x:TDSRow[1]|$x.isNotNull('tradeDate'), 'isNullTradeDate'))
            ->sort(asc('tradeDate'))
            ->columnValueDifference(
                  Trade.all()
                     ->groupBy([x|$x.date->adjust(1, DurationUnit.DAYS)],
                        [
                           agg(x | $x.quantity, y | $y->sum()),
                           agg(x | $x.id, y | $y->count())
                        ],
                        ['tradeDate', 'quantity', 'count']
                        )
                  ,
                  ['tradeDate'], ['quantity', 'count'])
            ->sort(asc('tradeDate'))
         };

   let r = execute($q, $mapping, $runtime,meta::relational::extension::relationalExtensions() );

   let relationalResult = $r.values;

   assertNotEmpty($relationalResult.rows);

   let inMemoryResult = $rawTradeDate->columnValueDifference($rawPrevTradeDate, ['tradeDate'], ['quantity', 'count'])
      ->sort('tradeDate');

   assertNotEmpty($inMemoryResult.rows);

   assertEquals($relationalResult->toCSV(), $inMemoryResult->toCSV());

   assertEquals('2014-12-01T00:00:00.000000000+0000|true|356.0|TDSNull|356.0|3|TDSNull|3;2014-12-02T00:00:00.000000000+0000|true|55.0|356.0|-301.0|2|3|-1;2014-12-03T00:00:00.000000000+0000|true|71.0|55.0|16.0|2|2|0;2014-12-04T00:00:00.000000000+0000|true|105.0|71.0|34.0|3|2|1;2014-12-05T00:00:00.000000000+0000|true|5.0|105.0|-100.0|1|3|-2;2014-12-06T00:00:00.000000000+0000|TDSNull|TDSNull|5.0|-5.0|TDSNull|1|-1',
      $relationalResult.rows->map(r|$r.values->makeString('|'))->joinStrings(';'));
}

function <<test.Test>>
   meta::pure::tds::tests::extensions::columnValueDifference_DupeJoinKeys_Test() : Boolean[1]
{
   let mapping = meta::relational::tests::simpleRelationalMapping;
   let runtime = meta::relational::tests::testRuntime();
   
   let q = {|
         Trade.all()
            ->groupBy([x|$x.date->adjust(0, DurationUnit.DAYS)], 
               [
                  agg(x | $x.quantity, y | $y->sum()), 
                  agg(x | $x.id, y | $y->count())
               ], 
               ['tradeDate', 'quantity', 'count']
               )  
            ->columnValueDifference(
                  Trade.all()
                     ->groupBy([x|$x.date->adjust(1, DurationUnit.DAYS)], 
                        [
                           agg(x | $x.quantity, y | $y->sum()), 
                           agg(x | $x.id, y | $y->count())
                        ], 
                        ['tradeDate', 'quantity', 'count']
                        )               
                  ,               
                  ['tradeDate', 'tradeDate'], ['quantity', 'count'])
            ->sort(asc('tradeDate'))
         };

   let r = execute($q, $mapping, $runtime, meta::relational::extension::relationalExtensions());

   assertEquals(['tradeDate', 'quantity_1', 'quantity_2', 'quantity_valueDifference', 'count_1', 'count_2', 'count_valueDifference'], $r.values.columns.name);
}

function <<test.Test, test.AlloyOnly>>
   meta::pure::tds::tests::extensions::columnValueDifferenceWithoutPreval_DupeJoinKeys_Test() : Boolean[1]
{
   let mapping = meta::relational::tests::simpleRelationalMapping;
   let runtime = meta::relational::tests::testRuntime();

   let q = {|
         Trade.all()
            ->groupBy([x|$x.date->adjust(0, DurationUnit.DAYS)],
               [
                  agg(x | $x.quantity, y | $y->sum()),
                  agg(x | $x.id, y | $y->count())
               ],
               ['tradeDate', 'quantity', 'count']
               )
            ->columnValueDifference(
                  Trade.all()
                     ->groupBy([x|$x.date->adjust(1, DurationUnit.DAYS)],
                        [
                           agg(x | $x.quantity, y | $y->sum()),
                           agg(x | $x.id, y | $y->count())
                        ],
                        ['tradeDate', 'quantity', 'count']
                        )
                  ,
                  ['tradeDate', 'tradeDate'], ['quantity', 'count'])
            ->sort(asc('tradeDate'))
         };

   let r = execute($q, $mapping, $runtime, meta::relational::extension::relationalExtensions());

   assertEquals(['tradeDate', 'quantity_1', 'quantity_2', 'quantity_valueDifference', 'count_1', 'count_2', 'count_valueDifference'], $r.values.columns.name);
}

function <<test.Test>>
   meta::pure::tds::tests::extensions::columnValueDifference_ExtraCols_Test() : Boolean[1]
{
   let mapping = meta::relational::tests::simpleRelationalMapping;
   let runtime = meta::relational::tests::testRuntime();
   
   let q = {|
         Trade.all()
            ->groupBy([x|$x.date->adjust(0, DurationUnit.DAYS)], 
               [
                  agg(x | $x.quantity, y | $y->sum()), 
                  agg(x | $x.id, y | $y->count())
               ], 
               ['tradeDate', 'leftQty', 'count']
               )  
            ->columnValueDifference(
                  Trade.all()
                     ->groupBy([x|$x.date->adjust(1, DurationUnit.DAYS)], 
                        [
                           agg(x | $x.quantity, y | $y->sum()), 
                           agg(x | $x.id, y | $y->count())
                        ], 
                        ['tradeDate', 'rightQuantity', 'count']
                        )               
                  ,               
                  ['tradeDate', 'tradeDate'], ['count'])
            ->sort(asc('tradeDate'))
         };

   let r = execute($q, $mapping, $runtime, meta::relational::extension::relationalExtensions());

   assertEquals(['tradeDate', 'leftQty', 'rightQuantity', 'count_1', 'count_2', 'count_valueDifference'], $r.values.columns.name);
}

function <<test.Test, test.AlloyOnly>>
   meta::pure::tds::tests::extensions::columnValueDifferenceWithoutPreval_ExtraCols_Test() : Boolean[1]
{
   let mapping = meta::relational::tests::simpleRelationalMapping;
   let runtime = meta::relational::tests::testRuntime();

   let q = {|
         Trade.all()
            ->groupBy([x|$x.date->adjust(0, DurationUnit.DAYS)],
               [
                  agg(x | $x.quantity, y | $y->sum()),
                  agg(x | $x.id, y | $y->count())
               ],
               ['tradeDate', 'leftQty', 'count']
               )
            ->columnValueDifference(
                  Trade.all()
                     ->groupBy([x|$x.date->adjust(1, DurationUnit.DAYS)],
                        [
                           agg(x | $x.quantity, y | $y->sum()),
                           agg(x | $x.id, y | $y->count())
                        ],
                        ['tradeDate', 'rightQuantity', 'count']
                        )
                  ,
                  ['tradeDate', 'tradeDate'], ['count'])
            ->sort(asc('tradeDate'))
         };

   let r = execute($q, $mapping, $runtime, meta::relational::extension::relationalExtensions());

   assertEquals(['tradeDate', 'leftQty', 'rightQuantity', 'count_1', 'count_2', 'count_valueDifference'], $r.values.columns.name);
}

function /* This should fail, so can't be enabled as a test */
   meta::pure::tds::tests::extensions::columnValueDifference_DuplicateNonKeyCols_Test() : Boolean[1]
{
   let mapping = meta::relational::tests::simpleRelationalMapping;
   let runtime = meta::relational::tests::testRuntime();
   
   let q = {|
         Trade.all()
            ->groupBy([x|$x.date->adjust(0, DurationUnit.DAYS)], 
               [
                  agg(x | $x.quantity, y | $y->sum()), 
                  agg(x | $x.id, y | $y->count())
               ], 
               ['tradeDate', 'quantity', 'count']
               )  
            ->columnValueDifference(
                  Trade.all()
                     ->groupBy([x|$x.date->adjust(1, DurationUnit.DAYS)], 
                        [
                           agg(x | $x.quantity, y | $y->sum()), 
                           agg(x | $x.id, y | $y->count())
                        ], 
                        ['tradeDate', 'quantity', 'count']
                        )               
                  ,               
                  ['tradeDate', 'tradeDate'], ['count'])
            ->sort(asc('tradeDate'))
         };

   let r = execute($q, $mapping, $runtime, meta::relational::extension::relationalExtensions());

   assertEquals(['tradeDate', 'leftQty', 'rightQuantity', 'count_1', 'count_2', 'count_valueDifference'], $r.values.columns.name);
}

function <<test.Test>>
   meta::pure::tds::tests::extensions::rowValueDifferenceTest() : Boolean[1]
{
   let mapping = meta::relational::tests::simpleRelationalMapping;
   let runtime = meta::relational::tests::testRuntime();
   
   let rawTradeDate = execute({|
            Trade.all()
            ->groupBy([x|$x.date->adjust(0, DurationUnit.DAYS)], 
               [
                  agg(x | $x.quantity, y | $y->sum()), 
                  agg(x | $x.id, y | $y->count())
               ], 
               ['tradeDate', 'quantity', 'count']
               )
            ->extend(col(x:TDSRow[1]|$x.isNotNull('tradeDate'), 'isNullTradeDate'))
            ->sort(asc('tradeDate'))
         }, $mapping, $runtime, meta::relational::extension::relationalExtensions()).values;
   
   let rawPrevTradeDateR = execute({|
            Trade.all()
            ->groupBy([x|$x.date->adjust(1, DurationUnit.DAYS)], 
               [
                  agg(x | $x.quantity, y | $y->sum()), 
                  agg(x | $x.id, y | $y->count())
               ], 
               ['tradeDate', 'quantity', 'count']
               )
               ->sort(asc('tradeDate'))}, $mapping, $runtime, meta::relational::extension::relationalExtensions());
   let rawPrevTradeDate = $rawPrevTradeDateR.values;
   
   println('raw data, trade date:');
   println($rawTradeDate.columns->map(c|$c.name + ':' + $c.type->toOne()->elementToPath())->joinStrings(','));
   println($rawTradeDate->toCSV());
   println($rawTradeDate);

   println('raw data, prev date:');
   println($rawPrevTradeDate.columns->map(c|$c.name + ':' + $c.type->toOne()->elementToPath())->joinStrings(','));
   println($rawPrevTradeDate->toCSV());

   
   let q = {|
         Trade.all()
            ->groupBy([x|$x.date->adjust(0, DurationUnit.DAYS)], 
               [
                  agg(x | $x.quantity, y | $y->sum()), 
                  agg(x | $x.id, y | $y->count())
               ], 
               ['tradeDate', 'quantity', 'count']
               )  
            ->rowValueDifference(
                  Trade.all()
                     ->groupBy([x|$x.date->adjust(1, DurationUnit.DAYS)], 
                        [
                           agg(x | $x.quantity, y | $y->sum()), 
                           agg(x | $x.id, y | $y->count())
                        ], 
                        ['tradeDate', 'quantity', 'count']
                        )               
                  ,               
                  ['tradeDate'], ['quantity', 'count'])
            ->sort(asc('tradeDate'))
         };

   let r = execute($q, $mapping, $runtime, meta::relational::extension::relationalExtensions());

   println('Relational results:');
   println($r.activities);

   let relationalResult = $r.values;
   
   println($relationalResult.columns->map(c|$c.name + ':' + $c.type->toOne()->elementToPath())->joinStrings(','));
   println($relationalResult->toCSV());

   assertNotEmpty($relationalResult.rows);

   let inMemoryResult = $rawTradeDate->rowValueDifference($rawPrevTradeDate, ['tradeDate'], ['quantity', 'count'])
      ->sort('tradeDate');

   println('In memory results:');
   println($inMemoryResult->toCSV());

   assertNotEmpty($inMemoryResult.rows);

   assertEquals($relationalResult->toCSV(), $inMemoryResult->toCSV());

   assertEquals('2014-12-01|356.0|3|TDSNull|TDSNull|false|false|false,2014-12-02|55.0|2|356.0|3|false|false|false,2014-12-03|71.0|2|55.0|2|false|true|false,2014-12-04|105.0|3|71.0|2|false|false|false,2014-12-05|5.0|1|105.0|3|false|false|false,2014-12-06|TDSNull|TDSNull|5.0|1|false|false|false',
      $relationalResult.rows->map(r|$r.values->makeString('|'))->makeString(',')); 
}