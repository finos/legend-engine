// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

Class meta::relational::tests::tds::tdsJoin::testJoinTDS_Person
{
   personID: Integer[1];
   firstName: String[1];
   lastName: String[1];
   age: Integer[0..1];
   employerID: Integer[0..1];
   managerID: Integer[0..1];
   
   fullName() {
      $this.firstName + ' ' + $this.lastName;
   }:String[1];
}

Class meta::relational::tests::tds::tdsJoin::testJoinTDS_Firm
{
   legalName: String[1];
   firmID: Integer[1];
   firmAddrID: Integer[1];
}

Class meta::relational::tests::tds::tdsJoin::testJoinTDS_Address
{
   addrName: String[1];
   addrID: Integer[1];
}

###Mapping
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::relational::tests::tds::tdsJoin::*;

Mapping meta::relational::tests::tds::tdsJoin::testJoinTDSMapping
(
   testJoinTDS_Person : Relational
            {
                scope([dbInc])
                (
                    personID : personTable.ID,
                    firstName : personTable.FIRSTNAME,
                    lastName : personTable.LASTNAME,
                    age : personTable.AGE,
                    employerID : personTable.FIRMID,
                    managerID : personTable.MANAGERID
                )
            }

   testJoinTDS_Firm : Relational
          {
                scope([dbInc])
                (
                   legalName : firmTable.LEGALNAME,
                   firmID : firmTable.ID,
                   firmAddrID: firmTable.ADDRESSID
                )
          }
   
   testJoinTDS_Address : Relational
          {
                scope([dbInc])
                (
                   addrName : addressTable.NAME,
                   addrID : addressTable.ID
                )
          }
)

Mapping meta::relational::tests::tds::tdsJoin::testJoinTDSMappingWithFilter
(
   testJoinTDS_Person : Relational
            {
                scope([dbInc])
                (
                    personID : personTable.ID,
                    firstName : personTable.FIRSTNAME,
                    lastName : personTable.LASTNAME,
                    age : personTable.AGE,
                    employerID : personTable.FIRMID,
                    managerID : personTable.MANAGERID
                )
            }

   testJoinTDS_Firm : Relational
          {
             ~filter [dbInc] FirmXFilter
             scope([dbInc])
                (
                   legalName : firmTable.LEGALNAME,
                   firmID : firmTable.ID,
                   firmAddrID: firmTable.ADDRESSID
                ) 
          }
)

Mapping meta::relational::tests::tds::tdsJoin::testJoinTDSMappingTwoDatabase
(
  
   testJoinTDS_Person : Relational
            {
                scope([dbInc])
                (
                    personID : personTable.ID,
                    firstName : personTable.FIRSTNAME,
                    lastName : personTable.LASTNAME,
                    age : personTable.AGE,
                    employerID : personTable.FIRMID,
                    managerID : personTable.MANAGERID
                )
            }


   testJoinTDS_Firm : Relational
          {
                scope([database2])
                (
                   legalName : firmTable.LEGALNAME,
                   firmID : firmTable.ID,
                   firmAddrID: firmTable.ADDRESSID
                )
          }

   testJoinTDS_Address : Relational
          {
                scope([database2])
                (
                   addrName : addressTable.NAME,
                   addrID : addressTable.ID
                )
          }

)

Mapping meta::relational::tests::tds::tdsJoin::testJoinTDSMappingTwoDatabaseWithColumnsMappedViaJoinsAndDynaFunction
(

   testJoinTDS_Person : Relational
            {
                scope([dbInc])
                (
                    personID : personTable.ID,
                    firstName : personTable.FIRSTNAME,
                    lastName : personTable.LASTNAME,
                    employerID : @Firm_Person | firmTable.ID,
                    managerID : case(equal(personTable.MANAGERID, 0), 0, personTable.MANAGERID)
                )
            }


   testJoinTDS_Firm : Relational
          {
                scope([database2])
                (
                   legalName : firmTable.LEGALNAME,
                   firmID : firmTable.ID,
                   firmAddrID: @Address_Firm | addressTable.ID
                )
          }

)


Mapping meta::relational::tests::tds::tdsJoin::testJoinTDSMappingThreeDatabase
(

   testJoinTDS_Person : Relational
            {
                scope([dbInc])
                (
                    personID : personTable.ID,
                    firstName : personTable.FIRSTNAME,
                    lastName : personTable.LASTNAME,
                    age : personTable.AGE,
                    employerID : personTable.FIRMID,
                    managerID : personTable.MANAGERID
                )
            }


   testJoinTDS_Firm : Relational
          {
                scope([database2])
                (
                   legalName : firmTable.LEGALNAME,
                   firmID : firmTable.ID,
                   firmAddrID: firmTable.ADDRESSID
                )
          }

   testJoinTDS_Address : Relational
          {
                scope([database3])
                (
                   addrName : addressTable.NAME,
                   addrID : addressTable.ID
                )
          }

)

###Pure
import meta::relational::metamodel::execute::*;
import meta::relational::functions::sqlstring::*;
import meta::relational::mapping::*;
import meta::relational::runtime::*;
import meta::relational::tests::*;
import meta::pure::metamodel::tds::*;
import meta::pure::profiles::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::tds::tdsJoin::*;
import meta::relational::metamodel::join::*;

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testInnerJoinSimple():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.INNER, {a,b|$a.getInteger('eID') == $b.getInteger('fID');}), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertSameElements(['1,Smith,1,Firm X,1', '2,Johnson,1,Firm X,1', '3,Hill,1,Firm X,1', '4,Allen,1,Firm X,1',
                       '5,Roberts,2,Firm A,2', '6,Hill,3,Firm B,3', '7,Harris,4,Firm C,4'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testLeftOuterJoinSimple():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.LEFT_OUTER, {a,b|($a.getInteger('eID') + 2) == $b.getInteger('fID')}), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7);
   assertSameElements(['1,Smith,1,Firm B,3', '2,Johnson,1,Firm B,3', '3,Hill,1,Firm B,3', '4,Allen,1,Firm B,3',
                       '5,Roberts,2,Firm C,4', '6,Hill,3,TDSNull,TDSNull', '7,Harris,4,TDSNull,TDSNull'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testRightOuterJoinSimple():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.RIGHT_OUTER, {a,b|($a.getInteger('eID') + 2) == $b.getInteger('fID');}), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertEquals([Integer , String, Integer, String, Integer], $result.values.columns.type);
   assertSize($result.values.rows, 7);
   assertSameElements(['1,Smith,1,Firm B,3', '2,Johnson,1,Firm B,3', '3,Hill,1,Firm B,3', '4,Allen,1,Firm B,3',
                       '5,Roberts,2,Firm C,4', 'TDSNull,TDSNull,TDSNull,Firm A,2', 'TDSNull,TDSNull,TDSNull,Firm X,1'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testInnerJoinConditionTrueUsingCol():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()->project([col(t|$t.personID,'personID'), col(t|$t.lastName,'personName'), col(t|$t.employerID,'eID')])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.INNER, {a,b|true}), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 28);
   assertSameElements(['1,Smith,1,Firm X,1', '1,Smith,1,Firm A,2', '1,Smith,1,Firm B,3', '1,Smith,1,Firm C,4',
                       '2,Johnson,1,Firm X,1', '2,Johnson,1,Firm A,2', '2,Johnson,1,Firm B,3', '2,Johnson,1,Firm C,4',
                       '3,Hill,1,Firm X,1', '3,Hill,1,Firm A,2', '3,Hill,1,Firm B,3', '3,Hill,1,Firm C,4',
                       '4,Allen,1,Firm X,1', '4,Allen,1,Firm A,2', '4,Allen,1,Firm B,3','4,Allen,1,Firm C,4',
                       '5,Roberts,2,Firm X,1', '5,Roberts,2,Firm A,2', '5,Roberts,2,Firm B,3', '5,Roberts,2,Firm C,4',
                       '6,Hill,3,Firm X,1', '6,Hill,3,Firm A,2', '6,Hill,3,Firm B,3', '6,Hill,3,Firm C,4',
                       '7,Harris,4,Firm X,1', '7,Harris,4,Firm A,2', '7,Harris,4,Firm B,3', '7,Harris,4,Firm C,4'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testInnerJoinConditionTrue():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.INNER, {a,b|true}), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 28);
   assertSameElements(['1,Smith,1,Firm X,1', '1,Smith,1,Firm A,2', '1,Smith,1,Firm B,3', '1,Smith,1,Firm C,4',
                       '2,Johnson,1,Firm X,1', '2,Johnson,1,Firm A,2', '2,Johnson,1,Firm B,3', '2,Johnson,1,Firm C,4',
                       '3,Hill,1,Firm X,1', '3,Hill,1,Firm A,2', '3,Hill,1,Firm B,3', '3,Hill,1,Firm C,4',
                       '4,Allen,1,Firm X,1', '4,Allen,1,Firm A,2', '4,Allen,1,Firm B,3','4,Allen,1,Firm C,4',
                       '5,Roberts,2,Firm X,1', '5,Roberts,2,Firm A,2', '5,Roberts,2,Firm B,3', '5,Roberts,2,Firm C,4',
                       '6,Hill,3,Firm X,1', '6,Hill,3,Firm A,2', '6,Hill,3,Firm B,3', '6,Hill,3,Firm C,4',
                       '7,Harris,4,Firm X,1', '7,Harris,4,Firm A,2', '7,Harris,4,Firm B,3', '7,Harris,4,Firm C,4'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testInnerJoinConditionFalse():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.INNER, {a,b|false}), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 0);
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testLeftOuterJoinConditionFalse():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.LEFT_OUTER, {a,b|false}), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7);
   assertSameElements(['1,Smith,1,TDSNull,TDSNull', '2,Johnson,1,TDSNull,TDSNull', '3,Hill,1,TDSNull,TDSNull', '4,Allen,1,TDSNull,TDSNull',
                       '5,Roberts,2,TDSNull,TDSNull', '6,Hill,3,TDSNull,TDSNull', '7,Harris,4,TDSNull,TDSNull'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testRightOuterJoinConditionFalse():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.RIGHT_OUTER, {a,b|false}), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 4);
   assertSameElements(['TDSNull,TDSNull,TDSNull,Firm X,1', 'TDSNull,TDSNull,TDSNull,Firm A,2', 'TDSNull,TDSNull,TDSNull,Firm B,3', 'TDSNull,TDSNull,TDSNull,Firm C,4'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinVariableInLambda():Boolean[1]
{
   let val = 0;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.INNER,  {a,b |($a.getInteger('eID') + $val) == $b.getInteger('fID');}), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertSameElements(['1,Smith,1,Firm X,1', '2,Johnson,1,Firm X,1', '3,Hill,1,Firm X,1', '4,Allen,1,Firm X,1',
                       '5,Roberts,2,Firm A,2', '6,Hill,3,Firm B,3', '7,Harris,4,Firm C,4'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinLambdaAsVariable():Boolean[1]
{
   let jc =  {a:TDSRow[1], b:TDSRow[1] |$a.getInteger('eID') == $b.getInteger('fID');};
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.INNER, $jc), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertSameElements(['1,Smith,1,Firm X,1', '2,Johnson,1,Firm X,1', '3,Hill,1,Firm X,1', '4,Allen,1,Firm X,1',
                       '5,Roberts,2,Firm A,2', '6,Hill,3,Firm B,3', '7,Harris,4,Firm C,4'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinWithLiteralColumn():Boolean[1]
{
   let jc =  {a:TDSRow[1], b:TDSRow[1] |$a.getInteger('eID') == $b.getInteger('fID');};
   let result = execute(|testJoinTDS_Person.all()->project([ col(p|$p.personID, 'personID'), col(p|$p.lastName, 'personName') , col(p|$p.employerID, 'eID'), col(p|true, 'Literal') ])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.INNER, $jc), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertSameElements(['1,Smith,1,true,Firm X,1', '2,Johnson,1,true,Firm X,1', '3,Hill,1,true,Firm X,1', '4,Allen,1,true,Firm X,1',
                       '5,Roberts,2,true,Firm A,2', '6,Hill,3,true,Firm B,3', '7,Harris,4,true,Firm C,4'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinTypeAsVariable():Boolean[1]
{
   let type = JoinType.INNER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');}), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertSameElements(['1,Smith,1,Firm X,1', '2,Johnson,1,Firm X,1', '3,Hill,1,Firm X,1', '4,Allen,1,Firm X,1',
                       '5,Roberts,2,Firm A,2', '6,Hill,3,Firm B,3', '7,Harris,4,Firm C,4'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testRestrictAfterJoin():Boolean[1]
{
   let type = JoinType.INNER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'faID']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertSameElements(['Smith,8', 'Johnson,8', 'Hill,8', 'Allen,8',
                       'Roberts,9', 'Hill,10', 'Harris,11'], $result.values.rows->map(r|$r.values->makeString(',')));
}


function <<test.Test>> meta::relational::tests::tds::tdsJoin::testMultipleJoins():Boolean[1]
{
   let type = JoinType.INNER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'faID'])
                        ->join(testJoinTDS_Address.all()->project([#/testJoinTDS_Address/addrName!addrName#, #/testJoinTDS_Address/addrID!aID#]), $type, {a,b |$a.getInteger('faID')  == $b.getInteger('aID');})
                        ->restrict(['personName', 'addrName']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7);
   assertSameElements(['Smith,New York', 'Johnson,New York', 'Hill,New York', 'Allen,New York',
                       'Roberts,Cupertino', 'Hill,Tokyo', 'Harris,Mountain View'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testFilterAfterJoinInner():Boolean[1]
{
   let type = JoinType.INNER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->filter(p | $p.getInteger('personAge') > 30), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 3 );
   assertSameElements(['Roberts,34,9', 'Hill,32,10', 'Harris,35,11'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testFilterAfterJoinOuter():Boolean[1]
{
   let type = JoinType.LEFT_OUTER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->filter(p | $p.getInteger('personAge') > 30), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 3 );
   assertSameElements(['Roberts,34,9', 'Hill,32,10', 'Harris,35,11'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testExtendAfterJoinInner():Boolean[1]
{
   let type = JoinType.INNER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->extend([col({r:TDSRow[1]|$r.getString('personName')->length()}, 'name_length')]), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7);
   assertSameElements(['Smith,23,8,5', 'Johnson,22,8,7', 'Hill,12,8,4', 'Allen,22,8,5',
                       'Roberts,34,9,7', 'Hill,32,10,4', 'Harris,35,11,6'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testExtendAfterJoinOuter():Boolean[1]
{
   let type = JoinType.LEFT_OUTER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->extend([col({r:TDSRow[1]|$r.getString('personName')->length()}, 'name_length')]), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7);
   assertSameElements(['Smith,23,8,5', 'Johnson,22,8,7', 'Hill,12,8,4', 'Allen,22,8,5',
                       'Roberts,34,9,7', 'Hill,32,10,4', 'Harris,35,11,6'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinAfterExtendInner():Boolean[1]
{
   let type = JoinType.INNER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->extend([col({r:TDSRow[1]|$r.getString('personName')->length()}, 'name_length')])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('name_length')  == $b.getInteger('faID') - 3;})
                        ->restrict(['personName', 'personAge', 'faID', 'name_length']) , testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 5);
   assertSameElements(['Allen,22,8,5', 'Harris,35,9,6', 'Johnson,22,10,7', 'Roberts,34,10,7', 'Smith,23,8,5'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinAfterExtendOuter():Boolean[1]
{
   let type = JoinType.LEFT_OUTER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->extend([col({r:TDSRow[1]|$r.getString('personName')->length()}, 'name_length')])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('name_length')  == $b.getInteger('faID') - 3;})
                        ->restrict(['personName', 'personAge', 'faID', 'name_length']) , testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7);
   assertSameElements(['Smith,23,8,5', 'Johnson,22,10,7', 'Hill,12,TDSNull,4', 'Allen,22,8,5',
                       'Roberts,34,10,7', 'Hill,32,TDSNull,4', 'Harris,35,9,6'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testSelfJoinInner():Boolean[1]
{
   let type = JoinType.INNER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/managerID!mID#])
                        ->join(testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!pID#, #/testJoinTDS_Person/lastName!managerName#]), $type, {a,b |$a.getInteger('mID')  == $b.getInteger('pID');})
                        ->restrict(['personName', 'managerName']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 3);
   assertSameElements(['Smith,Johnson', 'Johnson,Allen', 'Hill,Johnson'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testSelfJoinOuter():Boolean[1]
{
   let type = JoinType.LEFT_OUTER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/managerID!mID#])
                        ->join(testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!pID#, #/testJoinTDS_Person/lastName!managerName#]), $type, {a,b |$a.getInteger('mID')  == $b.getInteger('pID');})
                        ->restrict(['personName', 'managerName']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7);
   assertSameElements(['Smith,Johnson', 'Johnson,Allen', 'Hill,Johnson', 'Allen,TDSNull',
                       'Roberts,TDSNull', 'Hill,TDSNull', 'Harris,TDSNull'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testGroupByAfterJoinInner():Boolean[1]
{
   let type = JoinType.INNER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->groupBy('faID', agg('cnt', x|$x, y| $y->count())), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 4);
   assertSameElements(['8,4', '9,1', '11,1', '10,1'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testGroupByAfterJoinOuter():Boolean[1]
{
   let type = JoinType.LEFT_OUTER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->groupBy('faID', agg('cnt', x|$x, y| $y->count())), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 4);
   assertSameElements(['8,4', '9,1', '11,1', '10,1'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinAfterGroupByAfterJoinInner():Boolean[1]
{
   let type = JoinType.INNER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->groupBy('faID', agg('cnt', x|$x, y| $y->count()))
                        ->join(testJoinTDS_Address.all()->project([#/testJoinTDS_Address/addrID!aID#, #/testJoinTDS_Address/addrName!addrName#]), $type, {a,b |$a.getInteger('aID')  == $b.getInteger('faID');})
                        ->restrict(['addrName', 'cnt']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 4);
   assertSameElements(['New York,4', 'Cupertino,1', 'Mountain View,1', 'Tokyo,1'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinAfterGroupByAfterJoinOuter():Boolean[1]
{
   let type = JoinType.LEFT_OUTER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->groupBy('faID', agg('cnt', x|$x, y| $y->count()))
                        ->join(testJoinTDS_Address.all()->project([#/testJoinTDS_Address/addrID!aID#, #/testJoinTDS_Address/addrName!addrName#]), $type, {a,b |$a.getInteger('aID')  == $b.getInteger('faID');})
                        ->restrict(['addrName', 'cnt']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 4);
   assertSameElements(['New York,4', 'Cupertino,1', 'Mountain View,1', 'Tokyo,1'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testExtendAfterJoinAfterAfterGroupByAfterJoinInner():Boolean[1]
{
   let type = JoinType.INNER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->groupBy('faID', agg('cnt', x|$x, y| $y->count()))
                        ->join(testJoinTDS_Address.all()->project([#/testJoinTDS_Address/addrID!aID#, #/testJoinTDS_Address/addrName!addrName#]), $type, {a,b |$a.getInteger('aID')  == $b.getInteger('faID');})
                        ->extend([col({r:TDSRow[1]|$r.getString('addrName')->length()}, 'addr_length')])
                        ->restrict(['addrName', 'addr_length', 'cnt']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 4);
   assertSameElements(['New York,8,4', 'Cupertino,9,1', 'Mountain View,13,1', 'Tokyo,5,1'], $result.values.rows->map(r|$r.values->makeString(',')));
}


function <<test.Test>> meta::relational::tests::tds::tdsJoin::testExtendAfterJoinAfterAfterGroupByAfterJoinOuter():Boolean[1]
{
   let type = JoinType.LEFT_OUTER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->groupBy('faID', agg('cnt', x|$x, y| $y->count()))
                        ->join(testJoinTDS_Address.all()->project([#/testJoinTDS_Address/addrID!aID#, #/testJoinTDS_Address/addrName!addrName#]), $type, {a,b |$a.getInteger('aID')  == $b.getInteger('faID');})
                        ->extend([col({r:TDSRow[1]|$r.getString('addrName')->length()}, 'addr_length')])
                        ->restrict(['addrName', 'addr_length', 'cnt']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 4);
   assertSameElements(['New York,8,4', 'Cupertino,9,1', 'Mountain View,13,1', 'Tokyo,5,1'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testFilterAfterExtendJoinAfterAfterGroupByAfterJoinInner():Boolean[1]
{
   let type = JoinType.INNER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->groupBy('faID', agg('cnt', x|$x, y| $y->count()))
                        ->join(testJoinTDS_Address.all()->project([#/testJoinTDS_Address/addrID!aID#, #/testJoinTDS_Address/addrName!addrName#]), $type, {a,b |$a.getInteger('aID')  == $b.getInteger('faID');})
                        ->extend([col({r:TDSRow[1]|$r.getString('addrName')->length()}, 'addr_length')])
                        ->filter({p| $p.getInteger('addr_length') > 8})
                        ->restrict(['addrName', 'addr_length', 'cnt']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 2);
   assertSameElements(['Cupertino,9,1', 'Mountain View,13,1'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testFilterAfterExtendJoinAfterAfterGroupByAfterJoinOuter():Boolean[1]
{
   let type = JoinType.LEFT_OUTER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->groupBy('faID', agg('cnt', x|$x, y| $y->count()))
                        ->join(testJoinTDS_Address.all()->project([#/testJoinTDS_Address/addrID!aID#, #/testJoinTDS_Address/addrName!addrName#]), $type, {a,b |$a.getInteger('aID')  == $b.getInteger('faID');})
                        ->extend([col({r:TDSRow[1]|$r.getString('addrName')->length()}, 'addr_length')])
                        ->filter({p| $p.getInteger('addr_length') > 8})
                        ->restrict(['addrName', 'addr_length', 'cnt']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 2);
   assertSameElements(['Cupertino,9,1', 'Mountain View,13,1'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testGroupByAfterFilterAfterExtendJoinAfterAfterGroupByAfterJoinInner():Boolean[1]
{
   let type = JoinType.INNER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->groupBy('faID', agg('cnt', x|$x, y| $y->count()))
                        ->join(testJoinTDS_Address.all()->project([#/testJoinTDS_Address/addrID!aID#, #/testJoinTDS_Address/addrName!addrName#]), $type, {a,b |$a.getInteger('aID')  == $b.getInteger('faID');})
                        ->extend([col({r:TDSRow[1]|$r.getString('addrName')->length()}, 'addr_length')])
                        ->filter({p| $p.getInteger('addr_length') > 8})
                        ->restrict(['addrName', 'addr_length', 'cnt'])
                        ->groupBy('addrName', agg('cnt', x|$x, y| $y->count())), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 2);
   assertSameElements(['Cupertino,1', 'Mountain View,1'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testGroupByAfterFilterAfterExtendJoinAfterAfterGroupByAfterJoinOuter():Boolean[1]
{
   let type = JoinType.LEFT_OUTER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#]), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['personName', 'personAge', 'faID'])
                        ->groupBy('faID', agg('cnt', x|$x, y| $y->count()))
                        ->join(testJoinTDS_Address.all()->project([#/testJoinTDS_Address/addrID!aID#, #/testJoinTDS_Address/addrName!addrName#]), $type, {a,b |$a.getInteger('aID')  == $b.getInteger('faID');})
                        ->extend([col({r:TDSRow[1]|$r.getString('addrName')->length()}, 'addr_length')])
                        ->filter({p| $p.getInteger('addr_length') > 8})
                        ->restrict(['addrName', 'addr_length', 'cnt'])
                        ->groupBy('addrName', agg('cnt', x|$x, y| $y->count())), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 2);
   assertSameElements(['Cupertino,1', 'Mountain View,1'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinAfterGroupByBothInner():Boolean[1]
{
   let type = JoinType.INNER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->groupBy('eID', agg('cnt1', x|$x, y| $y->count()))
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#])
                               ->groupBy('fID', agg('cnt2', x|$x, y| $y->count())), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['fID', 'cnt1']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 4);
   assertSameElements(['1,4', '2,1', '3,1', '4,1'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinAfterGroupByBothOuter():Boolean[1]
{
   let type = JoinType.LEFT_OUTER;
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/age!personAge#, #/testJoinTDS_Person/employerID!eID#])
                        ->groupBy('eID', agg('cnt1', x|$x, y| $y->count()))
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#,  #/testJoinTDS_Firm/firmAddrID!faID#])
                               ->groupBy('fID', agg('cnt2', x|$x, y| $y->count())), $type, {a,b |$a.getInteger('eID')  == $b.getInteger('fID');})
                        ->restrict(['fID', 'cnt1']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 4);
   assertSameElements(['1,4', '2,1', '3,1', '4,1'], $result.values.rows->map(r|$r.values->makeString(',')));
}


function <<test.Test>> meta::relational::tests::tds::tdsJoin::testInnerJoinWithQualifiedPropertiesOnLeft():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/fullName!fullName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.INNER, {a,b|$a.getInteger('eID') == $b.getInteger('fID');})
                        ->restrict(['firmName', 'fullName']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertSameElements(['Firm A,Fabrice Roberts', 'Firm X,Anthony Allen', 'Firm X,John Johnson', 'Firm X,John Hill', 'Firm X,Peter Smith',
      'Firm C,David Harris', 'Firm B,Oliver Hill'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testInnerJoinWithQualifiedPropertiesOnRight():Boolean[1]
{
   let result = execute(|testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#])
                        ->join(testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/fullName!fullName#, #/testJoinTDS_Person/employerID!eID#]), JoinType.INNER, {a,b|$a.getInteger('eID') == $b.getInteger('fID');})
                        ->restrict(['firmName', 'fullName']), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertSameElements(['Firm A,Fabrice Roberts', 'Firm X,Anthony Allen', 'Firm X,John Johnson', 'Firm X,John Hill', 'Firm X,Peter Smith',
      'Firm C,David Harris', 'Firm B,Oliver Hill'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinBySingleColumnName():Boolean[1]
{
   let result = execute(
      |testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
         ->join(
               testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]),
               JoinType.INNER,
               ['eID'], ['fID']
         ), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());

   assertSize($result.values.rows, 7 );
   assertEquals(['personID', 'personName', 'eID', 'firmName', 'fID'], $result.values.columns.name);
   assertSameElements(['1,Smith,1,Firm X,1', '2,Johnson,1,Firm X,1', '3,Hill,1,Firm X,1', '4,Allen,1,Firm X,1',
                       '5,Roberts,2,Firm A,2', '6,Hill,3,Firm B,3', '7,Harris,4,Firm C,4'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinBySingleColumnNameLeftOuter():Boolean[1]
{
   let result = execute(
      |testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
         ->join(
               testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#])->filter(r:TDSRow[1]|false),
               JoinType.LEFT_OUTER,
               ['eID'], ['fID']
         ), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());

   assertSize($result.values.rows, 7 );
   assertEquals(['personID', 'personName', 'eID', 'firmName', 'fID'], $result.values.columns.name);
   assertSameElements(['1,Smith,1,TDSNull,TDSNull', '2,Johnson,1,TDSNull,TDSNull', '3,Hill,1,TDSNull,TDSNull',
         '4,Allen,1,TDSNull,TDSNull', '5,Roberts,2,TDSNull,TDSNull', '6,Hill,3,TDSNull,TDSNull', '7,Harris,4,TDSNull,TDSNull'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinBySingleColumnNameRightOuter():Boolean[1]
{
   let result = execute(
      |testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])->filter(r:TDSRow[1]|false)
         ->join(
               testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]),
               JoinType.RIGHT_OUTER,
               ['eID'], ['fID']
         ), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());

   assertSize($result.values.rows, 4 );
   assertEquals(['personID', 'personName', 'eID', 'firmName', 'fID'], $result.values.columns.name);
   assertFalse($result.values->columnValues('fID')->contains(^TDSNull()));
   assert($result.values->columnValues('eID')->contains(^TDSNull()));
   assertSameElements(['TDSNull,TDSNull,TDSNull,Firm A,2', 'TDSNull,TDSNull,TDSNull,Firm X,1',
      'TDSNull,TDSNull,TDSNull,Firm C,4', 'TDSNull,TDSNull,TDSNull,Firm B,3'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinByMultiColumnName():Boolean[1]
{
   let result = execute(
      |testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
         ->join(
               testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]),
               JoinType.INNER,
               ['eID', 'eID'], ['fID', 'fID']
         ), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());

   assertSize($result.values.rows, 7 );
   assertEquals(['personID', 'personName', 'eID', 'firmName', 'fID'], $result.values.columns.name);
   assertSameElements(['1,Smith,1,Firm X,1', '2,Johnson,1,Firm X,1', '3,Hill,1,Firm X,1', '4,Allen,1,Firm X,1',
                       '5,Roberts,2,Firm A,2', '6,Hill,3,Firm B,3', '7,Harris,4,Firm C,4'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinByCommonColumnName():Boolean[1]
{
   let result = execute(
      |testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!fID#])
         ->join(
               testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]),
               JoinType.INNER,
               ['fID'], ['fID']
         ), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());

   assertSize($result.values.rows, 7 );
   assertEquals($result.values.columns.name, ['personID', 'personName', 'fID', 'firmName']);
   assertSameElements(['1,Smith,1,Firm X', '2,Johnson,1,Firm X', '3,Hill,1,Firm X',
      '4,Allen,1,Firm X', '5,Roberts,2,Firm A', '6,Hill,3,Firm B', '7,Harris,4,Firm C'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinByCommonColumnName_RightOuter():Boolean[1]
{
   let result = execute(
      |testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!fID#])->filter(r|false)
         ->join(
               testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]),
               JoinType.RIGHT_OUTER,
               ['fID'], ['fID']
         ), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());

   assertSize($result.values.rows, 4);
   assertEquals(['personID', 'personName', 'firmName', 'fID'], $result.values.columns.name);
   assertFalse($result.values->columnValues('fID')->contains(^TDSNull()));
   assertSameElements(['TDSNull,TDSNull,Firm A,2', 'TDSNull,TDSNull,Firm X,1', 'TDSNull,TDSNull,Firm C,4', 'TDSNull,TDSNull,Firm B,3'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinByColumnName_AfterLimit():Boolean[1]
{
   let result = execute(
      |testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!fID#])->limit(100)
         ->join(
               testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]),
               JoinType.INNER,
               ['fID'], ['fID']
         ), testJoinTDSMapping, testRuntime(), meta::relational::extension::relationalExtensions());

   assertSize($result.values.rows, 7);
   assertEquals(['personID', 'personName', 'fID', 'firmName'], $result.values.columns.name);
   assertFalse($result.values->columnValues('fID')->contains(^TDSNull()));
   assertSameElements(['1,Smith,1,Firm X', '2,Johnson,1,Firm X', '3,Hill,1,Firm X',
      '4,Allen,1,Firm X', '5,Roberts,2,Firm A', '6,Hill,3,Firm B', '7,Harris,4,Firm C'], $result.values.rows->map(r|$r.values->makeString(',')));
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testLeftOuterJoinWithFilterOnClassAndFunction():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
                        ->join(testJoinTDS_Firm.all()->filter(f|$f.legalName->length()>20)->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.LEFT_OUTER, {a,b|($a.getInteger('eID') + 2) == $b.getInteger('fID');}), testJoinTDSMappingWithFilter, testRuntime(), meta::relational::extension::relationalExtensions());
   meta::relational::functions::asserts::assertSameSQL('select "persontable_0"."personID" as "personID", "persontable_0"."personName" as "personName", "persontable_0"."eID" as "eID", "persontable_0"."firmName" as "firmName", "persontable_0"."fID" as "fID" from (select "persontable_1"."personID" as "personID", "persontable_1"."personName" as "personName", "persontable_1"."eID" as "eID", "firmtable_0"."firmName" as "firmName", "firmtable_0"."fID" as "fID" from (select "root".ID as "personID", "root".LASTNAME as "personName", "root".FIRMID as "eID" from personTable as "root") as "persontable_1" left outer join (select "root".LEGALNAME as "firmName", "root".ID as "fID" from firmTable as "root" where "root".LEGALNAME = \'Firm X\' and char_length("root".LEGALNAME) > 20) as "firmtable_0" on (("persontable_1"."eID" + 2) = "firmtable_0"."fID")) as "persontable_0"',$result);
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinOnColumnsAfterConcatenate():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()
                        ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name'),
                                   col({p:testJoinTDS_Person[1]|$p.age}, 'Age_1')])

                        ->concatenate(testJoinTDS_Person.all()
                                      ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name'),
                                                 col({p:testJoinTDS_Person[1]|$p.age}, 'Age_1')]))

                        ->join(
                           testJoinTDS_Person.all()
                           ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name_2'),
                                      col({p:testJoinTDS_Person[1]|$p.age}, 'Age')]),
                           JoinType.LEFT_OUTER,
                           'First Name',
                           'First Name_2'
                        ),
                        testJoinTDSMapping,
                        testRuntime(), meta::relational::extension::relationalExtensions());

   meta::relational::functions::asserts::assertSameSQL('select "unionalias_0"."First Name" as "First Name", "unionalias_0"."Age_1" as "Age_1", "unionalias_0"."First Name_2" as "First Name_2", "unionalias_0"."Age" as "Age" from (select "unionalias_1"."First Name" as "First Name", "unionalias_1"."Age_1" as "Age_1", "persontable_1"."First Name_2" as "First Name_2", "persontable_1"."Age" as "Age" from (select "unionalias_2"."First Name" as "First Name", "unionalias_2"."Age_1" as "Age_1" from (select "root".FIRSTNAME as "First Name", "root".AGE as "Age_1" from personTable as "root" UNION ALL select "root".FIRSTNAME as "First Name", "root".AGE as "Age_1" from personTable as "root") as "unionalias_2") as "unionalias_1" left outer join (select "root".FIRSTNAME as "First Name_2", "root".AGE as "Age" from personTable as "root") as "persontable_1" on ("unionalias_1"."First Name" = "persontable_1"."First Name_2")) as "unionalias_0"',$result);


}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinFuncByColAfterQueryWithConcatenate():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()
                        ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name'),
                                   col({p:testJoinTDS_Person[1]|$p.age}, 'Age_1')])

                        ->concatenate(testJoinTDS_Person.all()
                                      ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name'),
                                                 col({p:testJoinTDS_Person[1]|$p.age}, 'Age_1')]))

                        ->join(
                           testJoinTDS_Person.all()
                           ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name_2'),
                                      col({p:testJoinTDS_Person[1]|$p.age}, 'Age')]),
                           JoinType.LEFT_OUTER,
                           {a:TDSRow[1], b:TDSRow[1]|$a.getString('First Name') == $b.getString('First Name_2')}
                        ),

                        testJoinTDSMapping,
                        testRuntime(), meta::relational::extension::relationalExtensions());

   meta::relational::functions::asserts::assertSameSQL('select "unionalias_0"."First Name" as "First Name", "unionalias_0"."Age_1" as "Age_1", "unionalias_0"."First Name_2" as "First Name_2", "unionalias_0"."Age" as "Age" from (select "unionalias_1"."First Name" as "First Name", "unionalias_1"."Age_1" as "Age_1", "persontable_1"."First Name_2" as "First Name_2", "persontable_1"."Age" as "Age" from (select "unionalias_2"."First Name" as "First Name", "unionalias_2"."Age_1" as "Age_1" from (select "root".FIRSTNAME as "First Name", "root".AGE as "Age_1" from personTable as "root" UNION ALL select "root".FIRSTNAME as "First Name", "root".AGE as "Age_1" from personTable as "root") as "unionalias_2") as "unionalias_1" left outer join (select "root".FIRSTNAME as "First Name_2", "root".AGE as "Age" from personTable as "root") as "persontable_1" on ("unionalias_1"."First Name" = "persontable_1"."First Name_2")) as "unionalias_0"',$result);
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinFuncByColToQueryWithConcatenate():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()
                        ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name'),
                                   col({p:testJoinTDS_Person[1]|$p.age}, 'Age_1')])

                        ->join(
                           testJoinTDS_Person.all()
                           ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name_2'),
                                      col({p:testJoinTDS_Person[1]|$p.age}, 'Age')])
                           ->concatenate(testJoinTDS_Person.all()
                                      ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name_2'),
                                                 col({p:testJoinTDS_Person[1]|$p.age}, 'Age')])),


                           JoinType.LEFT_OUTER,
                           {a:TDSRow[1], b:TDSRow[1]|$a.getString('First Name') == $b.getString('First Name_2')}

                        ),

                        testJoinTDSMapping,
                        testRuntime(), meta::relational::extension::relationalExtensions());

   meta::relational::functions::asserts::assertSameSQL('select "persontable_0"."First Name" as "First Name", "persontable_0"."Age_1" as "Age_1", "persontable_0"."First Name_2" as "First Name_2", "persontable_0"."Age" as "Age" from (select "persontable_1"."First Name" as "First Name", "persontable_1"."Age_1" as "Age_1", "unionalias_0"."First Name_2" as "First Name_2", "unionalias_0"."Age" as "Age" from (select "root".FIRSTNAME as "First Name", "root".AGE as "Age_1" from personTable as "root") as "persontable_1" left outer join (select "unionalias_1"."First Name_2" as "First Name_2", "unionalias_1"."Age" as "Age" from (select "root".FIRSTNAME as "First Name_2", "root".AGE as "Age" from personTable as "root" UNION ALL select "root".FIRSTNAME as "First Name_2", "root".AGE as "Age" from personTable as "root") as "unionalias_1") as "unionalias_0" on ("persontable_1"."First Name" = "unionalias_0"."First Name_2")) as "persontable_0"',$result);
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinFuncByColAfterQueryWithConcatenateToQueryWithConcatenate():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()
                        ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name'),
                                   col({p:testJoinTDS_Person[1]|$p.age}, 'Age_1')])

                        ->concatenate(testJoinTDS_Person.all()
                                      ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name'),
                                                 col({p:testJoinTDS_Person[1]|$p.age}, 'Age_1')]))
                        ->join(
                           testJoinTDS_Person.all()
                           ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name_2'),
                                      col({p:testJoinTDS_Person[1]|$p.age}, 'Age')])
                           ->concatenate(testJoinTDS_Person.all()
                                      ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name_2'),
                                                 col({p:testJoinTDS_Person[1]|$p.age}, 'Age')])),


                           JoinType.LEFT_OUTER,
                           {a:TDSRow[1], b:TDSRow[1]|$a.getString('First Name') == $b.getString('First Name_2')}

                        ),

                        testJoinTDSMapping,
                        testRuntime(), meta::relational::extension::relationalExtensions());

   meta::relational::functions::asserts::assertSameSQL('select "unionalias_0"."First Name" as "First Name", "unionalias_0"."Age_1" as "Age_1", "unionalias_0"."First Name_2" as "First Name_2", "unionalias_0"."Age" as "Age" from (select "unionalias_1"."First Name" as "First Name", "unionalias_1"."Age_1" as "Age_1", "unionalias_3"."First Name_2" as "First Name_2", "unionalias_3"."Age" as "Age" from (select "unionalias_2"."First Name" as "First Name", "unionalias_2"."Age_1" as "Age_1" from (select "root".FIRSTNAME as "First Name", "root".AGE as "Age_1" from personTable as "root" UNION ALL select "root".FIRSTNAME as "First Name", "root".AGE as "Age_1" from personTable as "root") as "unionalias_2") as "unionalias_1" left outer join (select "unionalias_2"."First Name_2" as "First Name_2", "unionalias_2"."Age" as "Age" from (select "root".FIRSTNAME as "First Name_2", "root".AGE as "Age" from personTable as "root" UNION ALL select "root".FIRSTNAME as "First Name_2", "root".AGE as "Age" from personTable as "root") as "unionalias_2") as "unionalias_3" on ("unionalias_1"."First Name" = "unionalias_3"."First Name_2")) as "unionalias_0"',$result);
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinByColToQueryWithConcatenate():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()
                        ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name'),
                                   col({p:testJoinTDS_Person[1]|$p.age}, 'Age_1')])

                        ->join(
                           testJoinTDS_Person.all()
                           ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name_2'),
                                      col({p:testJoinTDS_Person[1]|$p.age}, 'Age')])
                           ->concatenate(testJoinTDS_Person.all()
                                      ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name_2'),
                                                 col({p:testJoinTDS_Person[1]|$p.age}, 'Age')])),


                           JoinType.LEFT_OUTER,
                           ['First Name'],
                           ['First Name_2']
                        ),

                        testJoinTDSMapping,
                        testRuntime(), meta::relational::extension::relationalExtensions());

   meta::relational::functions::asserts::assertSameSQL('select "persontable_0"."First Name" as "First Name", "persontable_0"."Age_1" as "Age_1", "persontable_0"."First Name_2" as "First Name_2", "persontable_0"."Age" as "Age" from (select "persontable_1"."First Name" as "First Name", "persontable_1"."Age_1" as "Age_1", "unionalias_0"."First Name_2" as "First Name_2", "unionalias_0"."Age" as "Age" from (select "root".FIRSTNAME as "First Name", "root".AGE as "Age_1" from personTable as "root") as "persontable_1" left outer join (select "unionalias_1"."First Name_2" as "First Name_2", "unionalias_1"."Age" as "Age" from (select "root".FIRSTNAME as "First Name_2", "root".AGE as "Age" from personTable as "root" UNION ALL select "root".FIRSTNAME as "First Name_2", "root".AGE as "Age" from personTable as "root") as "unionalias_1") as "unionalias_0" on ("persontable_1"."First Name" = "unionalias_0"."First Name_2")) as "persontable_0"',$result);
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testTableToTDSWithQuotesGroupBy():Boolean[1]
{
   let queryWithoutQuotes = {|tableToTDS(meta::relational::functions::database::tableReference(meta::relational::tests::db, 'default', 'tableWithQuotedColumns'))

                             ->project([
                               col({r:TDSRow[1]|$r.getString('FIRST NAME')}, 'FIRST NAME'),
                               col({r:TDSRow[1]|$r.getString('LAST NAME')}, 'LAST NAME'),
                               col({r:TDSRow[1]|$r.getString('1columnStartsWithNumber')}, '1columnStartsWithNumber')


                              ])
                             ->restrict(['FIRST NAME', 'LAST NAME'])
                                 ->join(
                                    tableToTDS(meta::relational::functions::database::tableReference(meta::relational::tests::db, 'default', 'tableWithQuotedColumns'))

                                    ->project([col(r:TDSRow[1]| $r.getString('FIRST NAME'), 'FIRST NAME_2'),
                                               col(r:TDSRow[1]| $r.getString('LAST NAME'), 'LAST NAME_2')
                                              ]),
                                    meta::relational::metamodel::join::JoinType.LEFT_OUTER,
                                    'FIRST NAME',
                                    'FIRST NAME_2'
                                 )};

   let mapping = meta::relational::tests::tds::tabletds::EmptyMapping;
   let runtime = meta::relational::tests::testRuntime();
   let resWithoutQuotes = execute($queryWithoutQuotes, $mapping, $runtime, meta::relational::extension::relationalExtensions());

   let expected = 'select "tablewithquotedcolumns_0"."FIRST NAME" as "FIRST NAME", "tablewithquotedcolumns_0"."LAST NAME" as "LAST NAME", "tablewithquotedcolumns_0"."FIRST NAME_2" as "FIRST NAME_2", "tablewithquotedcolumns_0"."LAST NAME_2" as "LAST NAME_2" from (select "tablewithquotedcolumns_1"."FIRST NAME" as "FIRST NAME", "tablewithquotedcolumns_1"."LAST NAME" as "LAST NAME", "tablewithquotedcolumns_3"."FIRST NAME_2" as "FIRST NAME_2", "tablewithquotedcolumns_3"."LAST NAME_2" as "LAST NAME_2" from (select "root"."FIRST NAME" as "FIRST NAME", "root"."LAST NAME" as "LAST NAME" from tableWithQuotedColumns as "root") as "tablewithquotedcolumns_1" left outer join (select "root"."FIRST NAME" as "FIRST NAME_2", "root"."LAST NAME" as "LAST NAME_2" from tableWithQuotedColumns as "root") as "tablewithquotedcolumns_3" on ("tablewithquotedcolumns_1"."FIRST NAME" = "tablewithquotedcolumns_3"."FIRST NAME_2")) as "tablewithquotedcolumns_0"';

   assertEquals($expected, $resWithoutQuotes->sqlRemoveFormatting());

   let queryWithQuotes = {|tableToTDS(meta::relational::functions::database::tableReference(meta::relational::tests::db, 'default', 'tableWithQuotedColumns'))
                            ->project([
                               col({r:TDSRow[1]|$r.getString('FIRST NAME')}, 'FIRST NAME'),
                               col({r:TDSRow[1]|$r.getString('LAST NAME')}, 'LAST NAME'),
                               col({r:TDSRow[1]|$r.getString('1columnStartsWithNumber')}, '1columnStartsWithNumber')


                              ])
                                 ->restrict(['"FIRST NAME"', '"LAST NAME"'])
                                 ->join(
                                    tableToTDS(meta::relational::functions::database::tableReference(meta::relational::tests::db, 'default', 'tableWithQuotedColumns'))
                                    ->project([col(r:TDSRow[1]| $r.getString('FIRST NAME'), 'FIRST NAME_2'),
                                               col(r:TDSRow[1]| $r.getString('LAST NAME'), 'LAST NAME_2')
                                              ]),
                                    meta::relational::metamodel::join::JoinType.LEFT_OUTER,
                                    '"FIRST NAME"',
                                    'FIRST NAME_2'
                                 )};
   let resWithQuotes = execute($queryWithQuotes, $mapping, $runtime, meta::relational::extension::relationalExtensions());

   assertEquals($expected, $resWithQuotes->sqlRemoveFormatting());
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinByColAfterQueryWithConcatenate():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()
                        ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name'),
                                   col({p:testJoinTDS_Person[1]|$p.age}, 'Age_1')])
                        ->concatenate(testJoinTDS_Person.all()
                                      ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name'),
                                                 col({p:testJoinTDS_Person[1]|$p.age}, 'Age_1')]))
                        ->join(
                           testJoinTDS_Person.all()
                           ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name_2'),
                                      col({p:testJoinTDS_Person[1]|$p.age}, 'Age')])
                              ,
                           JoinType.LEFT_OUTER,
                           ['First Name'],
                           ['First Name_2']
                        ),

                        testJoinTDSMapping,
                        testRuntime(), meta::relational::extension::relationalExtensions());

   meta::relational::functions::asserts::assertSameSQL('select "unionalias_0"."First Name" as "First Name", "unionalias_0"."Age_1" as "Age_1", "unionalias_0"."First Name_2" as "First Name_2", "unionalias_0"."Age" as "Age" from (select "unionalias_1"."First Name" as "First Name", "unionalias_1"."Age_1" as "Age_1", "persontable_1"."First Name_2" as "First Name_2", "persontable_1"."Age" as "Age" from (select "unionalias_2"."First Name" as "First Name", "unionalias_2"."Age_1" as "Age_1" from (select "root".FIRSTNAME as "First Name", "root".AGE as "Age_1" from personTable as "root" UNION ALL select "root".FIRSTNAME as "First Name", "root".AGE as "Age_1" from personTable as "root") as "unionalias_2") as "unionalias_1" left outer join (select "root".FIRSTNAME as "First Name_2", "root".AGE as "Age" from personTable as "root") as "persontable_1" on ("unionalias_1"."First Name" = "persontable_1"."First Name_2")) as "unionalias_0"',$result);
}

function <<test.Test>> meta::relational::tests::tds::tdsJoin::testJoinByColAfterQueryWithConcatenateToQueryWithConcatenate():Boolean[1]
{
   let result = execute(|testJoinTDS_Person.all()
                        ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name'),
                                   col({p:testJoinTDS_Person[1]|$p.age}, 'Age_1')])

                        ->concatenate(testJoinTDS_Person.all()
                                      ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name'),
                                                 col({p:testJoinTDS_Person[1]|$p.age}, 'Age_1')]))
                        ->join(
                           testJoinTDS_Person.all()
                           ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name_2'),
                                      col({p:testJoinTDS_Person[1]|$p.age}, 'Age')])
                           ->concatenate(testJoinTDS_Person.all()
                                      ->project([col({p:testJoinTDS_Person[1]|$p.firstName}, 'First Name_2'),
                                                 col({p:testJoinTDS_Person[1]|$p.age}, 'Age')])),


                           JoinType.LEFT_OUTER,
                           ['First Name'],
                           ['First Name_2']
                        ),

                        testJoinTDSMapping,
                        testRuntime(), meta::relational::extension::relationalExtensions());

   meta::relational::functions::asserts::assertSameSQL('select "unionalias_0"."First Name" as "First Name", "unionalias_0"."Age_1" as "Age_1", "unionalias_0"."First Name_2" as "First Name_2", "unionalias_0"."Age" as "Age" from (select "unionalias_1"."First Name" as "First Name", "unionalias_1"."Age_1" as "Age_1", "unionalias_3"."First Name_2" as "First Name_2", "unionalias_3"."Age" as "Age" from (select "unionalias_2"."First Name" as "First Name", "unionalias_2"."Age_1" as "Age_1" from (select "root".FIRSTNAME as "First Name", "root".AGE as "Age_1" from personTable as "root" UNION ALL select "root".FIRSTNAME as "First Name", "root".AGE as "Age_1" from personTable as "root") as "unionalias_2") as "unionalias_1" left outer join (select "unionalias_2"."First Name_2" as "First Name_2", "unionalias_2"."Age" as "Age" from (select "root".FIRSTNAME as "First Name_2", "root".AGE as "Age" from personTable as "root" UNION ALL select "root".FIRSTNAME as "First Name_2", "root".AGE as "Age" from personTable as "root") as "unionalias_2") as "unionalias_3" on ("unionalias_1"."First Name" = "unionalias_3"."First Name_2")) as "unionalias_0"',$result);
}


function meta::relational::tests::tds::tdsJoin::twoDBRunTime():	meta::pure::runtime::Runtime[1]
{
   ^meta::pure::runtime::Runtime
   (
      connections = [^TestDatabaseConnection(
                        element = dbInc,
                        type=DatabaseType.H2
                    ),^TestDatabaseConnection(
                        element = database2,
                        type=DatabaseType.H2
                    )]
   );
}


function <<test.BeforePackage>> meta::relational::tests::tds::tdsJoin::alloy::createAndFillDatabaseForMultiDBJoins():Boolean[1]
{
   let connection2 = meta::relational::tests::tds::tdsJoin::twoDBRunTime().connectionByElement(database2)->cast(@TestDatabaseConnection);
   meta::relational::functions::toDDL::dropAndCreateTableInDb(dbInc, 'firmTable', $connection2);

   meta::relational::functions::toDDL::dropAndCreateTableInDb(dbInc, 'addressTable', $connection2);
  executeInDb('Drop schema schemaB if exists cascade;', $connection2);
  executeInDb('create schema schemaB;', $connection2);

   executeInDb('insert into addressTable (id, type, name, street, comments) values (1,1,\'Hoboken\', null, \'A comment with a % in the middle\');', $connection2);
   executeInDb('insert into addressTable (id, type, name, street, comments) values (2,1,\'New York\', null, \'A comment with a _ in the middle\');', $connection2);
   executeInDb('insert into addressTable (id, type, name, street) values (3,1,\'New York\', null);', $connection2);
   executeInDb('insert into addressTable (id, type, name, street) values (4,1,\'New York\', null);', $connection2);
   executeInDb('insert into addressTable (id, type, name, street) values (5,1,\'San Fransisco\', null);', $connection2);
   executeInDb('insert into addressTable (id, type, name, street) values (6,1,\'Hong Kong\', null);', $connection2);
   executeInDb('insert into addressTable (id, type, name, street) values (7,1,\'New York\', null);', $connection2);
   executeInDb('insert into addressTable (id, type, name, street) values (8,1,\'New York\', \'West Street\');', $connection2);
   executeInDb('insert into addressTable (id, type, name, street) values (9,1,\'Cupertino\', \'Infinite Loop\');', $connection2);
   executeInDb('insert into addressTable (id, type, name, street) values (10,1,\'Tokyo\', null);', $connection2);
   executeInDb('insert into addressTable (id, type, name, street) values (11,1,\'Mountain View\', null);', $connection2);

   executeInDb('insert into firmTable (id, legalName, addressId) values (1, \'Firm X\', 8);', $connection2);
   executeInDb('insert into firmTable (id, legalName, addressId) values (2, \'Firm A\', 9);', $connection2);
   executeInDb('insert into firmTable (id, legalName, addressId) values (3, \'Firm B\', 10);', $connection2);
   executeInDb('insert into firmTable (id, legalName, addressId) values (4, \'Firm C\', 11);', $connection2);

   true;
}


//TODO Mark as AlloyOnly
function <<test.Test>> meta::relational::tests::tds::tdsJoin::alloy::testSimpleJoin():Boolean[1]
{

    meta::alloy::test::mayExecuteAlloyTest(
       {clientVersion, serverVersion, host, port |

   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
               ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.INNER, {a,b|$a.getInteger('eID') == $b.getInteger('fID');}), testJoinTDSMappingTwoDatabase, twoDBRunTime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertSameElements(['1,Smith,1,Firm X,1', '2,Johnson,1,Firm X,1', '3,Hill,1,Firm X,1', '4,Allen,1,Firm X,1',
                       '5,Roberts,2,Firm A,2', '6,Hill,3,Firm B,3', '7,Harris,4,Firm C,4'], $result.values.rows->map(r|$r.values->makeString(',')));
       },
       | true);

}


//TODO Mark as AlloyOnly
function <<test.Test>> meta::relational::tests::tds::tdsJoin::alloy::testSimpleJoinColumns():Boolean[1]
{

    meta::alloy::test::mayExecuteAlloyTest(

       {clientVersion, serverVersion, host, port |

   let result = execute(|testJoinTDS_Person.all()->project([#/testJoinTDS_Person/personID!personID#, #/testJoinTDS_Person/lastName!personName#, #/testJoinTDS_Person/employerID!eID#])
               ->join(testJoinTDS_Firm.all()->project([#/testJoinTDS_Firm/legalName!firmName#, #/testJoinTDS_Firm/firmID!fID#]), JoinType.INNER, ['eID'],['fID']), testJoinTDSMappingTwoDatabase, twoDBRunTime(), meta::relational::extension::relationalExtensions());
   assertSize($result.values.rows, 7 );
   assertSameElements(['1,Smith,1,Firm X,1', '2,Johnson,1,Firm X,1', '3,Hill,1,Firm X,1', '4,Allen,1,Firm X,1',
                       '5,Roberts,2,Firm A,2', '6,Hill,3,Firm B,3', '7,Harris,4,Firm C,4'], $result.values.rows->map(r|$r.values->makeString(',')));
       },
       | true);

}


###Relational
Database meta::relational::tests::tds::tdsJoin::database2
(
    Join Address_Firm(addressTable.ID = firmTable.ADDRESSID)
    Table firmTable(ID INT PRIMARY KEY, LEGALNAME VARCHAR(200), ADDRESSID INT)
    Table addressTable(ID INT PRIMARY KEY, TYPE INT, NAME VARCHAR(200), STREET VARCHAR(100), COMMENTS VARCHAR(100))
)


###Relational
Database meta::relational::tests::tds::tdsJoin::database3
(

    Table addressTable(ID INT PRIMARY KEY, TYPE INT, NAME VARCHAR(200), STREET VARCHAR(100), COMMENTS VARCHAR(100))
)

