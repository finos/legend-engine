// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::metamodel::project::*;
import meta::external::store::elasticsearch::specification::metamodel::*;
import meta::external::language::java::factory::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::transform::*;
import meta::protocols::generation::java::*;

function meta::external::store::elasticsearch::specification::metamodel::elasticsearchGenerator(): JavaProtocolGenerator[1]
{
  ^JavaProtocolGenerator(
    configureConventions = configureConventions_Package_1__String_1__JavaProtocolGenerator_1__Conventions_1_,

    generateEnumEntry = generateEnumEntry_Enum_1__Conventions_1__JavaProtocolGenerator_1__EnumerationEntry_1_,
    postProcessEnum = postProcessEnum_Enumeration_1__Enumeration_1__Conventions_1__JavaProtocolGenerator_1__Class_MANY_,

    generateClassField = generateClassField_Property_1__Conventions_1__JavaProtocolGenerator_1__Field_1_,
    generateClassFieldMethods = generateClassFieldMethods_Property_1__Field_1__Conventions_1__JavaProtocolGenerator_1__Function_1_,
    postProcessClass = postProcessClass_Class_1__Class_1__Conventions_1__JavaProtocolGenerator_1__Class_MANY_,

    finalizeProject = finalizeProject_Project_1__Conventions_1__JavaProtocolGenerator_1__Project_1_
  );
}

Class <<access.private>> meta::external::store::elasticsearch::specification::metamodel::ElasticsearchPurpose
{
  profile: Profile[1];
}

function <<access.private>> meta::external::store::elasticsearch::specification::metamodel::esProfile(conventions: Conventions[1]): Profile[1]
{
  $conventions.defaultClassPurpose->cast(@ElasticsearchPurpose).profile;
}

function meta::external::store::elasticsearch::specification::metamodel::configureConventions(purePackage: Package[1], javaPackage: String[1], ge: JavaProtocolGenerator[1]): Conventions[1]
{
  let defaultConventions = defaultConfigureConventions($purePackage, $javaPackage, $ge)
                 ->configureConventionsWithCoreProtocolClasses();
  let profile = '%s::ESProfile'->format($purePackage->elementToPath())->pathToElement()->cast(@Profile);
  ^$defaultConventions(defaultClassPurpose = ^ElasticsearchPurpose(profile = $profile));
}

function meta::external::store::elasticsearch::specification::metamodel::generateEnumEntry(e: Enum[1], c: Conventions[1], ge: JavaProtocolGenerator[1]): EnumerationEntry[1]
{
  let enumName = defaultIfEmpty(value4Tag($e, 'name', $c->esProfile())->first().value->cast(@String), $e.name)->toOne();
  $c->identifier($e.name)->javaEnumEntry($enumName);
}

function meta::external::store::elasticsearch::specification::metamodel::postProcessEnum(e: meta::pure::metamodel::type::Enumeration<Any>[1], javaE: meta::external::language::java::metamodel::Enumeration[1], c: Conventions[1], ge: JavaProtocolGenerator[1]): meta::external::language::java::metamodel::Class[*]
{
  // add field for esName, constructor, and getter
  let enumClass = $javaE
    ->addField(javaField(['private', 'final'], javaString(), 'esName'))
    ->addConstructor({cls|
          let param = j_parameter(javaString(), 'esName');
          javaConstructor([], $param, j_this($cls)->j_field('esName')->j_assign($param));
      })
    ->addMethod({cls|
          javaMethod('public', javaString(), 'esName', [], j_return(j_this($cls)->j_field('esName')));
      });

  // create mixin to annotate name getter
  let mixIn = createMixIn($enumClass, $c, $ge)
    ->addMethod(
        javaMethod(['public', 'abstract'], javaString(), 'esName', [])
          ->addAnnotation(^meta::external::language::java::metamodel::annotations::json::JsonValue())
      );

  [$enumClass, $mixIn];
}

function meta::external::store::elasticsearch::specification::metamodel::generateClassField(p: Property<Nil, Any | *>[1], c: Conventions[1], ge: JavaProtocolGenerator[1]): Field[1]
{
  let field = defaultGenerateClassField($p, $c, $ge);
}

function meta::external::store::elasticsearch::specification::metamodel::generateClassFieldMethods(prop: Property<Nil, Any | *>[1], field: Field[1], c: Conventions[1], ge: JavaProtocolGenerator[1]): Function<{meta::external::language::java::metamodel::Class[1]->Method[*]}>[1]
{
  {javaClass: meta::external::language::java::metamodel::Class[1] |
    // if the property is additional property, means that the object have unknown key names, and need to serialize as map
    if($prop->hasStereotype('AdditionalProperty', $c->esProfile()),
      |
        let entryValueType = $prop->functionReturnType().typeArguments->at(0).rawType;
        let isExternalTaggedValue = $entryValueType->isNotEmpty() && $entryValueType->toOne()->hasStereotype('ExternalTagged', $c->esProfile());

        let fieldType = $field.type->cast(@meta::external::language::java::metamodel::ParameterizedType);
        let dictionaryClassName = $fieldType.rawType->cast(@meta::external::language::java::metamodel::Class).simpleName;
        let additionalPropertiesRawType = if($prop.multiplicity->hasToOneUpperBound(), |$fieldType.typeArguments->at(0), |$fieldType.typeArguments->at(0)->cast(@meta::external::language::java::metamodel::ParameterizedType).typeArguments->at(0));
        let additionalPropertiesType = if($dictionaryClassName == 'DictionaryEntryMultiValue', |javaList($additionalPropertiesRawType), |$additionalPropertiesRawType);
        let anyGetterReturnType = javaMap(javaString(), $additionalPropertiesType);

        // generate a "any getter" that returns a Map<String, object>
        let anyGetterCode = if($prop.multiplicity->hasToOneUpperBound(),
          |
            let lambdaX = j_parameter($field.type, 'x');
            javaOptional()
              ->j_invoke('ofNullable', j_this($javaClass)->j_field($field.name), javaOptional($field.type))
              ->j_invoke('map', j_lambda($lambdaX, javaCollections()->j_invoke('singletonMap', [$lambdaX->j_field('key', javaString()), $lambdaX->j_field('value', $additionalPropertiesType)], $anyGetterReturnType)), javaOptional($anyGetterReturnType))
              ->j_invoke('orElseGet', javaCollections()->j_methodReference('emptyMap', javaFunctionType([], javaMap(javaString(), $additionalPropertiesType))), $anyGetterReturnType)
              ->j_return();,
          |
            let lambdaX = j_parameter($fieldType.typeArguments->at(0), 'x');
            j_this($javaClass)->j_field($field.name)
              ->j_streamOf()
              ->j_invoke('collect', javaCollectors()->j_invoke('toMap', [j_lambda($lambdaX, $lambdaX->j_field('key', javaString())), j_lambda($lambdaX, $lambdaX->j_field('value', $additionalPropertiesType))], javaCollector()), $anyGetterReturnType)
              ->j_return();
            
        );

        let anyGetter = javaMethod('public', $anyGetterReturnType, 'additionalProperties', [], $anyGetterCode);

        let keyParamDef = javaParam(javaString(), 'key');
        let keyParam = j_parameter($keyParamDef);
        let valueParamDef = javaParam($additionalPropertiesType, 'value');
        let valueParam = j_parameter($valueParamDef);

        // generate a "any setter" to complement the "any getter"
        let anySetterCode = if ($prop.multiplicity->hasToOneUpperBound(),
          |
            // do we need to verify if this is called multiple times?
            let classField = j_this($javaClass)->j_field($field.name);
            let newEntry = j_assign($classField, j_new($fieldType, []));
            let keyAssing = j_assign($classField->j_field('key', javaString()), $keyParam);
            let valueAssing = j_assign($classField->j_field('value', $additionalPropertiesType), $valueParam);
            j_block([$newEntry, $keyAssing, $valueAssing]);,
          |
            let newEntryParam = j_parameter($fieldType.typeArguments->at(0), 'newEntry');
            let var = $newEntryParam->j_declare(j_new($fieldType.typeArguments->at(0), []));
            let keyAssign = j_assign($newEntryParam->j_field('key', javaString()), $keyParam);
            let valueAssign = j_assign($newEntryParam->j_field('value', $additionalPropertiesType), $valueParam);         

            let assignToList = j_assign(j_this($javaClass)->j_field($field.name), 
              javaStream()
                ->j_invoke('concat', [j_streamOf(j_this($javaClass)->j_field($field.name)), j_streamOf($newEntryParam)], javaStream($fieldType.typeArguments->at(0)))
                ->j_invoke('collect', javaCollectors()->j_invoke('toList', [], javaCollector()), $field.type)
            );

            j_block([$var, $keyAssign, $valueAssign, $assignToList]);
        );

        let anySetter = javaMethod('public', javaVoid(), 'additionalProperties', [$keyParamDef, $valueParamDef], $anySetterCode);

        [$anyGetter, $anySetter];,
      |
        [];
    );
  }
}

function meta::external::store::elasticsearch::specification::metamodel::postProcessClass(c: meta::pure::metamodel::type::Class<Any>[1], clsTmp: meta::external::language::java::metamodel::Class[1], conventions: Conventions[1], ge: JavaProtocolGenerator[1]): meta::external::language::java::metamodel::Class[*]
{
  let baseClasses = jacksonPostProcessClass($c, $clsTmp, $conventions, $ge);

  let otherCls = $baseClasses->filter(c | $c.simpleName != $clsTmp.simpleName);
  let cls = $baseClasses->filter(c | $c.simpleName == $clsTmp.simpleName)->toOne();

  // tagged unions are javascript TypeAlias (union of multiple not necessarily related types) hence we need special logic to handle it
  let withTaggedUnion = if($c->hasStereotype('TaggedUnion', $conventions->esProfile()),
    | handleTaggedUnionProtocolCodeForClass($c, $cls),
    | $cls
  );

  let mixIn = $c->createMixInForClass($withTaggedUnion, $conventions, $ge);

  $withTaggedUnion->concatenate($otherCls)->concatenate($mixIn);
}

function <<access.private>> meta::external::store::elasticsearch::specification::metamodel::handleTaggedUnionProtocolCodeForClass(
    elem: meta::pure::metamodel::type::Class<Any>[1],
    javaClass: meta::external::language::java::metamodel::Class[1]
  ) : meta::external::language::java::metamodel::Class[1]
{
  // add a method to pick the 1st non-empty instance
  let lambdaX = j_parameter(javaObject(), 'x');
  let pickFirstNotNullCode = javaStream()
    ->j_invoke(javaObject(), 'of', $javaClass.fields->map(f | j_this($javaClass)->j_field($f.name)), javaStream(javaObject()))
    ->js_filter(javaClass('org.finos.legend.engine.protocol.store.elasticsearch.specification.utils.TaggedUnionUtils')->j_methodReference('nonEmpty', javaFunctionType(javaObject(), javaBoolean())))
    ->js_resolve(javaObject())
    ->j_return();  
  let method = javaMethod('public', javaObject(), 'unionValue', [], $pickFirstNotNullCode);
  let unionClass = $javaClass->addMethod($method);
}

function <<access.private>>  meta::external::store::elasticsearch::specification::metamodel::createMixIn(cls: meta::external::language::java::metamodel::Class[1], c: Conventions[1], ge: JavaProtocolGenerator[1]): meta::external::language::java::metamodel::Class[1]
{
  let mixIn = javaClass(['public', 'abstract'], $cls.typeParameters, $cls.package, $cls.simpleName + '__protocolToEsMixIn')
                ->addField(javaField(['public', 'static', 'final'], javaClassType($cls), 'MIX_IN', $cls->j_classField()))
}

function <<access.private>> meta::external::store::elasticsearch::specification::metamodel::createMixInForClass(elem: meta::pure::metamodel::type::Class<Any>[1], javaClass: meta::external::language::java::metamodel::Class[1], conventions: Conventions[1], ge: JavaProtocolGenerator[1]): meta::external::language::java::metamodel::Class[0..1]
{
  let mixInClass = createMixIn($javaClass, $conventions, $ge);

  // handle tagged unions mixin
  let withTaggedUnion = if($elem->hasStereotype('TaggedUnion', $conventions->esProfile()),
    |
      let externalTagged = $elem->hasStereotype('ExternalTagged', $conventions->esProfile());

      let unionMixIn = if($externalTagged,
        |$mixInClass,
        |
          // serialization - replace this object with the output of this method using JsonValue
          let withJsonValueOnUnionMethod = $mixInClass->addMethod(
              javaMethod(['public', 'abstract'], javaObject(), 'unionValue', [])
                ->addAnnotation(^meta::external::language::java::metamodel::annotations::json::JsonValue())
            );
          let internalTagged = $elem->value4Tag('internalTag', $conventions->esProfile()).value;
          if ($internalTagged->isNotEmpty(),
            |
              // if union types are "internally" tagged, add JsonTypeName, and custom deserializer
              $withJsonValueOnUnionMethod
                ->addAnnotation(^meta::external::language::java::metamodel::annotations::json::JsonTypeName(value = $internalTagged->toOne()))
                ->addAnnotation(^meta::external::language::java::metamodel::annotations::json::JsonDeserialize(using = javaClass('org.finos.legend.engine.protocol.store.elasticsearch.specification.utils.InternalTaggedUnionDeserializer'))),
            |
              // if union is vanilla (not tagged), add custom deserializer
              $withJsonValueOnUnionMethod
                ->addAnnotation(^meta::external::language::java::metamodel::annotations::json::JsonDeserialize(using = javaClass('org.finos.legend.engine.protocol.store.elasticsearch.specification.utils.TaggedUnionDeserializer')))
          );
        );
      ,
    | $mixInClass
  );

  // process properties mixin 
  let withProperties = $elem.properties->fold({prop, cls|
  
    let javaName = $prop.name->toOne()->sanitizeJavaKeywords();
    let field = $javaClass.fields->filter(x | $x.name == $javaName)->toOne();
    let nameDiff = $prop.name != $field.name;

    // additional properties need special handling for any getter and any setter annotations
    if($prop->hasStereotype('AdditionalProperty', $conventions->esProfile()),
      |
        let entryValueType = $prop->functionReturnType().typeArguments->at(0).rawType;
        let isExternalTaggedValue = $entryValueType->isNotEmpty() && $entryValueType->toOne()->hasStereotype('ExternalTagged', $conventions->esProfile());

        let anyGetter = $javaClass.methods->filter(m | $m.name == 'additionalProperties' && $m.returnType != javaVoid())->toOne();

        // add minx in so jackson use the "any getter" method as "extra" field/value pairs on the serialize json
        let withAnyGetterMixIn = $cls
            ->addMethod(
              javaMethod(['public', 'abstract'], $anyGetter.returnType, 'additionalProperties', [])
                ->addAnnotation(^meta::external::language::java::metamodel::annotations::json::JsonAnyGetter())
                // if "any getter" need externally tagged custom handling, annotate
                ->map(m | if ($isExternalTaggedValue,
                                |$m->addAnnotation(^meta::external::language::java::metamodel::annotations::json::JsonSerialize(
                                    using = javaClass('org.finos.legend.engine.protocol.store.elasticsearch.specification.utils.ExternalTaggedUnionSerializer')
                                  )),
                                |$m
                              )
              )
            )->addField($field->addAnnotation(^meta::external::language::java::metamodel::annotations::json::JsonIgnore()));

        let anySetter = $javaClass.methods->filter(m | $m.name == 'additionalProperties' && $m.returnType == javaVoid())->toOne();

        // add minx in so jackson use the "any setter" method to flag that there where "extra" field/value pairs during deserialization
        let withAnySetterMixIn = $withAnyGetterMixIn->addMethod(
          javaMethod(['public', 'abstract'], javaVoid(), 'additionalProperties', $anySetter.parameters)
            ->addAnnotation(^meta::external::language::java::metamodel::annotations::json::JsonAnySetter())
            // if "any setter" need externally tagged custom handling, annotate
            ->map(m | if ($isExternalTaggedValue,
                |$m->addAnnotation(^meta::external::language::java::metamodel::annotations::json::JsonDeserialize(
                    keyUsing = javaClass('org.finos.legend.engine.protocol.store.elasticsearch.specification.utils.ExternalTaggedUnionKeyDeserializer'),
                    contentUsing = javaClass('org.finos.legend.engine.protocol.store.elasticsearch.specification.utils.ExternalTaggedUnionDeserializer')
                  )),
                |$m
              )
            )
        );

        $withAnySetterMixIn;,
      |
        //if property name != that ES expected name, Mix in JsonProperty
        let name = $prop->value4Tag('name', $conventions->esProfile()).value;
        let mixInWithPropName = if ($name->size() == 1,
          |
            $cls->addField(
              $field->addAnnotation(^meta::external::language::java::metamodel::annotations::json::JsonProperty(value = $name->toOne()))
            );,
          | 
            $cls
        );

        let propClassName = $prop->functionReturnType().rawType.name;

        // if property are dictionary, annotate accordant to handle as Map's
        let handlingDictionaryEntries = if ($propClassName->in(['DictionaryEntrySingleValue', 'DictionaryEntryMultiValue']),
          |
            let entryValueType = $prop->functionReturnType().typeArguments->at(0).rawType;
            if ($entryValueType->isNotEmpty() && $entryValueType->toOne()->hasStereotype('ExternalTagged', $conventions->esProfile()),
              |
                // externally tagged required slightly different behavior
                $mixInWithPropName->addField(
                    $field->addAnnotation(
                      ^meta::external::language::java::metamodel::annotations::json::JsonSerialize(
                        using = javaClass('org.finos.legend.engine.protocol.store.elasticsearch.specification.utils.ExternalTaggedUnionSerializer')
                      )
                    )->addAnnotation(
                      ^meta::external::language::java::metamodel::annotations::json::JsonDeserialize(
                        using = javaClass('org.finos.legend.engine.protocol.store.elasticsearch.specification.utils.ExternalTaggedUnionDeserializer')
                      )
                    // we default to empty list, hence ensure EMPTY should be "null"
                    )->addAnnotation(
                    ^meta::external::language::java::metamodel::annotations::json::JsonInclude(
                      value = ^meta::external::language::java::metamodel::annotations::json::EnumValue(value='JsonInclude.Include.NON_EMPTY'))
                    )
                  );,
              |
                $mixInWithPropName->addField(
                  $field->addAnnotation(
                    ^meta::external::language::java::metamodel::annotations::json::JsonSerialize(
                      using = javaClass('org.finos.legend.engine.protocol.store.elasticsearch.specification.utils.DictionarySerializer')
                    )
                  )->addAnnotation(
                    ^meta::external::language::java::metamodel::annotations::json::JsonDeserialize(
                      using = javaClass('org.finos.legend.engine.protocol.store.elasticsearch.specification.utils.DictionaryDeserializer')
                    )
                  // we default to empty list, hence ensure EMPTY should be "null"
                  )->addAnnotation(
                  ^meta::external::language::java::metamodel::annotations::json::JsonInclude(
                    value = ^meta::external::language::java::metamodel::annotations::json::EnumValue(value='JsonInclude.Include.NON_EMPTY'))
                  )
                )
            );,
          |
            $mixInWithPropName
        );

        $handlingDictionaryEntries;
    );
  }, $withTaggedUnion);

  // remove JsonTypeInfo added by core/generic generator since ES does not handle the type property the same way
  let jsonTypeInfoAnnotation = $javaClass.annotations
                                  ->filter(a | $a->instanceOf(meta::external::language::java::metamodel::annotations::json::JsonTypeInfo))
                                  ->map(a | ^meta::external::language::java::metamodel::annotations::json::JsonTypeInfo(use = ^meta::external::language::java::metamodel::annotations::json::EnumValue(value='JsonTypeInfo.Id.NONE')));

  let mixInWithAnnotations = ^$withProperties(
    annotations = $withProperties.annotations->concatenate($jsonTypeInfoAnnotation)
  );

  // only add mixin class with actual changes (ie avoid empty classes)
  let totalMixIns = $mixInWithAnnotations.fields->filter(f | $f.name != 'MIX_IN')->size() + $mixInWithAnnotations.methods->size() + $mixInWithAnnotations.annotations->size();
  if ($totalMixIns != 0, |$mixInWithAnnotations, |[]);
}

function meta::external::store::elasticsearch::specification::metamodel::finalizeProject(p: Project[1], c: Conventions[1], ge: JavaProtocolGenerator[1]): Project[1]
{
  // create utility class to configure object mapper to handle ES compatible JSON
  let objectMapperClass = javaClass('com.fasterxml.jackson.databind.ObjectMapper');
  let mapper = j_parameter($objectMapperClass, 'objectMapper');
  let mapperDeclaration = $mapper->j_declare(
      javaClass('org.finos.legend.engine.shared.core.ObjectMapperFactory')
        ->j_invoke('getNewStandardObjectMapper', [], $objectMapperClass)
        ->j_invoke('setSerializationInclusion', j_field(javaClass('com.fasterxml.jackson.annotation.JsonInclude'), 'Include.NON_EMPTY', javaClass('com.fasterxml.jackson.annotation.JsonInclude.Include')), $objectMapperClass)
  );

  let mixInInvocations = $mapperDeclaration
                  ->concatenate($p->allClasses()->filter(cls | $cls.simpleName->endsWith('__protocolToEsMixIn'))
                                // if we generated a mixin, add it to the object mapper
                                ->map(mixInClass | $mapper->j_invoke('addMixIn', [j_field($mixInClass, 'MIX_IN'), j_classField($mixInClass)], $objectMapperClass)))
                  ->concatenate(j_return($mapper));
  
  let utilsPkg = $c.typeAndPackageNameStrategy->toOne()->eval('%s::DictionaryEntryMultiValue'->format($c->esProfile().package->toOne()->elementToPath())->pathToElement()->cast(@meta::pure::metamodel::type::Type), $c).first;

  // finish configuring the object mapper utility
  let jsonHelper = javaClass('public', $utilsPkg->javaPackage(), 'ElasticsearchObjectMapperProvider')
    ->addField({cls|javaField(['public', 'static'],  $objectMapperClass, 'OBJECT_MAPPER', $cls->j_invoke('objectMapper',[], $objectMapperClass))})
    ->addMethod(javaMethod(['private', 'static'], $objectMapperClass, 'objectMapper', [], j_block($mixInInvocations)));

  $p->meta::external::language::java::factory::project::addClass($jsonHelper);
}