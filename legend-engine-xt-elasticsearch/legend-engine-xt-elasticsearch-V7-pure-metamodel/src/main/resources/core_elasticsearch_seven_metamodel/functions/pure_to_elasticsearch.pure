// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::hash::*;
import meta::pure::platform::executionPlan::generation::*;
import meta::pure::executionPlan::*;
import meta::external::store::elasticsearch::v7::specification::utils::*;
import meta::external::store::elasticsearch::v7::metamodel::specification::types::aggregations::*;
import meta::pure::router::utils::*;
import meta::external::store::elasticsearch::v7::metamodel::property::*;
import meta::pure::router::metamodel::*;
import meta::pure::extension::*;
import meta::pure::runtime::*;
import meta::pure::mapping::*;
import meta::pure::metamodel::serialization::grammar::*;

import meta::external::store::elasticsearch::v7::metamodel::specification::*;
import meta::external::store::elasticsearch::v7::metamodel::specification::types::querydsl::*;
import meta::external::store::elasticsearch::v7::metamodel::specification::global::search::*;
import meta::external::store::elasticsearch::v7::metamodel::specification::global::search::types::*;
import meta::external::store::elasticsearch::v7::metamodel::specification::types::mapping::*;
import meta::external::store::elasticsearch::v7::metamodel::specification::types::*;
import meta::external::store::elasticsearch::v7::metamodel::store::*;
import meta::external::store::elasticsearch::v7::tds::*;
import meta::external::store::elasticsearch::v7::metamodel::tds::*;
import meta::external::store::elasticsearch::v7::pureToEs::mappping::*;
import meta::external::store::elasticsearch::v7::pureToEs::*;
import meta::external::store::elasticsearch::v7::specification::utils::property::*;
import meta::external::store::elasticsearch::v7::metamodel::executionPlan::context::*;

// ----------------------------

Class meta::external::store::elasticsearch::v7::pureToEs::State
{
  search: SearchRequestBody[1];
  inFilter: Boolean[1];
  inProject: Boolean[1];
  aggregationQuery: Boolean[1];
  sq: StoreQuery[1];
  exeCtx: Elasticsearch7ExecutionContext[1];
  extensions: Extension[*];
  ext: RoutedValueSpecification[0..1];
  lazyIndex: Elasticsearch7StoreIndex[0..1];
  extraNodes: AllocationExecutionNode[*];
  index()
  {
    $this.lazyIndex->toOne('index have not been found yet');
  }:Elasticsearch7StoreIndex[1];
  debug: DebugContext[1];
  debug(s : Function<{->String[1]}>[1])
  {
    if($this.debug.debug, |println($this.debug.space + $s->eval()), |[]);
  }:Any[0];

  tdsESDetails: TDSESDetail[*];

  supportedRoutingFunctions: Pair<LambdaFunction<{Function<Any>[1]->Boolean[1]}>, Function<{FunctionExpression[1],  State[1]->State[1]}>>[*];
  supportedFilterFunctions: Pair<LambdaFunction<{Function<Any>[1]->Boolean[1]}>, Function<{FunctionExpression[1],  State[1]->State[1]}>>[*];
  supportedSimpleValueFunctions: Pair<LambdaFunction<{Function<Any>[1]->Boolean[1]}>, Function<{FunctionExpression[1],  State[1]->Pair<List<Any>, State>[1]}>>[*];
  supportedAggregationFunctions: Pair<LambdaFunction<{Function<Any>[1]->Boolean[1]}>, Function<{FunctionExpression[1],  String[1]->AggregationContainer[1]}>>[*];
}

Class meta::external::store::elasticsearch::v7::pureToEs::TDSESDetail
{ 
  <<equality.Key>> name: String[1];
  type: DataType[1];
  resultPath: ResultPath[1];
  path(){
    $this.resultPath.path()
  }:String[1];
}

function meta::external::store::elasticsearch::v7::pureToEs::processSelectAllTds(vs : FunctionExpression[1], req: State[1]): State[1] 
{
  $req.debug(|'Processing ->indexToTds');
  let store = $vs.parametersValues->at(0)->cast(@InstanceValue).values->toOne()->cast(@Elasticsearch7Store);
  let indexName = $vs.parametersValues->at(1)->cast(@InstanceValue).values->toOne()->cast(@String);
  
  let index = $store.index($indexName)->toOne('No index found on store: ' + $indexName); 

  let primitiveProperties = $index.properties->collectPrimitiveTypeProperties();

  let resultPaths = $primitiveProperties->map({x |
    let rp = getResultPath($x.second, $x.first.values);
    $rp->concatenate($x->collectFieldsFromProperties()->map(ff | ^FieldResultPath(property = $ff.second, fieldPath = $ff.first.values->toOneMany(), readFrom = $rp)));
  })
  ->concatenate(^_IDResultPath(property = ^KeywordProperty(), fieldPath = '_id'));

  ^$req(
    lazyIndex = $index, 
    search = resultPathToQuery($resultPaths, $req.search), 
    tdsESDetails = $resultPaths->map(x | ^TDSESDetail(type = $x.property->propertySupport().pureType->cast(@DataType), name = $x.path(), resultPath = $x))
  );
}

function meta::external::store::elasticsearch::v7::pureToEs::getResultPath(property: PropertyBase[1], path: String[*]): ResultPath[1] 
{
  if($property->propertySupport().pureType == Date,
    |^DocValueResultPath(property = $property, fieldPath = $path->toOneMany()),
    |^SourceFieldResultPath(property = $property, fieldPath = $path->toOneMany())
  );
}

function meta::external::store::elasticsearch::v7::pureToEs::resultPathToQuery(resultPaths: ResultPath[*], search: SearchRequestBody[1]): SearchRequestBody[1] 
{
  let frps = $resultPaths->filter(x | $x->instanceOf(FieldResultPath))->cast(@FieldResultPath);
  let srps = $resultPaths->concatenate($frps.readFrom)->filter(x | $x->instanceOf(SourceFieldResultPath))->cast(@SourceFieldResultPath);
  let docps = $resultPaths->concatenate($frps.readFrom)->filter(x | $x->instanceOf(DocValueResultPath))->cast(@DocValueResultPath);

  let seachWithSrps = $srps->isNotEmpty()->if(| ^$search(_source = ^SourceConfig(filter = ^SourceFilter(includes = $srps.path()->literal()))), | $search);
  let fields = $docps->map(x | $x->resultPathToFieldAndFormat());
  $fields->isEmpty()->if(|$seachWithSrps, |^$seachWithSrps(docvalue_fields = $fields));
}

function meta::external::store::elasticsearch::v7::pureToEs::resultPathToFieldAndFormat(resultPath: DocValueResultPath[1]): FieldAndFormat[1]
{
  let format = if($resultPath.property->propertySupport().pureType == Date, | 'date_optional_time', | []);
  ^FieldAndFormat(field = $resultPath.path()->literal(), format = $format->literal());
}

function meta::external::store::elasticsearch::v7::pureToEs::processProject(vs : FunctionExpression[1], initReq: State[1]): State[1] 
{
  $initReq.debug(|'Processing ->project');
  let currReq = process($vs.parametersValues->at(0), ^$initReq(inProject = true));
  assertFalse($currReq.aggregationQuery, |'project not supported in aggreagtion queries');
  let cols = $vs->instanceValuesAtParameter(1, $currReq.sq.inScopeVars);
  let fields = $cols->match([
    tdsCols: BasicColumnSpecification<TDSRow>[*] | $tdsCols->map(x | $x->processProjectColumn($currReq))
  ]);
  let search = $currReq.search;
  ^$currReq(
    search = resultPathToQuery($fields.resultPath, $search),
    tdsESDetails = $fields,
    inProject = false
  );
}

function meta::external::store::elasticsearch::v7::pureToEs::processProjectColumn(vs : BasicColumnSpecification<TDSRow>[1], initReq: State[1]): TDSESDetail[1] 
{
  let expr = $vs.func->cast(@FunctionDefinition<Any>).expressionSequence->toOne('tds column projection only supports simple expressions');
  let name = $vs.name;
  let tdsDetail = $expr->extractSimpleValue($initReq).first.values->cast(@TDSESDetail)->toOne();
  ^$tdsDetail(name = $name, type = $vs.func->functionReturnType().rawType->toOne()->cast(@DataType));
}

function meta::external::store::elasticsearch::v7::pureToEs::processLimit(vs : FunctionExpression[1], initReq: State[1]): State[1] 
{
  $initReq.debug(|'Processing ->limit');
  let currReq = process($vs.parametersValues->at(0), $initReq);
  assertFalse($currReq.aggregationQuery, |'limit not supported in aggregation queries');
  let limit = $vs->instanceValuesAtParameter(1, $currReq.sq.inScopeVars)->literalOrExpression(false)->toOne()->cast(@LiteralOrExpression<Integer>);
  let search = $currReq.search;
  ^$currReq(search = ^$search(size = $limit));
}


function meta::external::store::elasticsearch::v7::pureToEs::processDrop(vs : FunctionExpression[1], initReq: State[1]): State[1] 
{
  $initReq.debug(|'Processing ->drop');
  let currReq = process($vs.parametersValues->at(0), $initReq);
  assertFalse($currReq.aggregationQuery, |'drop not supported in aggregstion queries');
  let val = $vs->instanceValuesAtParameter(1, $currReq.sq.inScopeVars)->toOne();
  let drop = $val->literalOrExpression(false)->toOne()->cast(@LiteralOrExpression<Integer>);
  let search = $currReq.search;
  let size = computeSize($search.size, $val);
  ^$currReq(search = ^$search(size = $size, from = $drop));
}

function meta::external::store::elasticsearch::v7::pureToEs::computeSize(currSize: LiteralOrExpression<Integer>[0..1], from: Any[1]): LiteralOrExpression<Integer>[1]
{
  let size = if ($currSize->isEmpty(),
    |
      $from->match([
        i: Integer[1] | literal(defaultSize() - $i),
        v: PlanVarPlaceHolder[1] | ^LiteralOrExpression<Integer>(expression = '${10000 - %s}'->format($v.name))
      ]);
    ,
    | 
      $currSize->toOne()->taggedUnionValue()->match([
        size: Integer[1] |
          $from->match([
            i: Integer[1] | literal($size - $i),
            v: PlanVarPlaceHolder[1] | ^LiteralOrExpression<Integer>(expression = '${%d - %s}'->format([$size, $v.name]))
          ]),
        exp: String[1]   | 
          let rawExp = $exp->substring(2, $exp->length() - 1);
          $from->match([
            i: Integer[1] | ^LiteralOrExpression<Integer>(expression = '${%s - %d}'->format([$rawExp, $i])),
            v: PlanVarPlaceHolder[1] | ^LiteralOrExpression<Integer>(expression = '${%s - %s}'->format([$rawExp, $v.name]))
          ]);
      ])
  );
}

function meta::external::store::elasticsearch::v7::pureToEs::processSlice(vs : FunctionExpression[1], initReq: State[1]): State[1] 
{
  $initReq.debug(|'Processing ->slice');
  let currReq = process($vs.parametersValues->at(0), $initReq);
  assertFalse($currReq.aggregationQuery, |'slice not supported in aggregation queries');
  let fromRaw = $vs->instanceValuesAtParameter(1, $currReq.sq.inScopeVars)->toOne();
  let from = $fromRaw->literalOrExpression(false)->toOne()->cast(@LiteralOrExpression<Integer>);
  let to = $vs->instanceValuesAtParameter(2, $currReq.sq.inScopeVars)->literalOrExpression(false)->toOne()->cast(@LiteralOrExpression<Integer>);
  let search = $currReq.search;
  let size = computeSize($to, $fromRaw);
  ^$currReq(search = ^$search(size = $size, from = $from));
}


function meta::external::store::elasticsearch::v7::pureToEs::processGroupBy(vs: FunctionExpression[1], initReq: State[1]): State[1]
{
  $initReq.debug(|'Processing ->groupBy');
  let currReq = process($vs.parametersValues->at(0), $initReq);
  assertFalse($currReq.aggregationQuery, |'->groupBy(...) more than once not supported');
  assert($currReq.search.size->isEmpty(), |'->limit(...) not supported with ->groupBy(...) at the moment');
  assert($currReq.search.from->isEmpty(), |'->drop(...) not supported with ->groupBy(...) at the moment');

  let groupedReqInit = ^$currReq(aggregationQuery = true);

  let groupByColsPair = $vs.parametersValues->at(1)->extractSimpleValue($groupedReqInit);
  let groupByCols = $groupByColsPair.first.values->cast(@String);

  let aggregateValuesPair = $vs.parametersValues->at(2)->extractSimpleValue($groupByColsPair.second);
  let aggregateValues = $aggregateValuesPair.first.values->cast(@meta::pure::tds::AggregateValue<Any, Any>);

  let groupedReq = $aggregateValuesPair.second;

  let groupByTdsESDetails = $groupByCols->map(g | $groupedReq.tdsESDetails->filter(x | $x.name == $g));
  assert($groupByCols->size() == $groupByTdsESDetails->size(), | 'grouping by unknown columns: ' + $groupByCols->removeAll($groupByTdsESDetails.name)->joinStrings('[', ', ', ']'));

  let aggPairs = $aggregateValues->map({x |
    let rawToAggregate = processProjectColumn(^BasicColumnSpecification<TDSRow>(func = $x.mapFn, name = $x.name), $groupedReq);
    let aggFunc = $x.aggregateFn->deepByPassRouterInfo()->cast(@FunctionDefinition<Any>).expressionSequence->toOne('tds aggregation only supports simple expressions: max, min, sum, etc.');
    
    let container = if ($aggFunc->instanceOf(FunctionExpression),
      |
        $groupedReq.supportedAggregationFunctions->findAndEvalSupportedFunction($aggFunc->cast(@FunctionExpression), $rawToAggregate.path())
      ,
      | 
        fail('Unsupported aggregation functions: ' + $aggFunc->printValueSpecification(''));
        ^AggregationContainer();
    );

    let aggReturnType = $x.aggregateFn->functionReturnType().rawType->toOne()->cast(@DataType);
    let resultPath = ^AggregateResultPath(fieldPath = $rawToAggregate.name, property = $rawToAggregate.resultPath.property);
    let toAggregate = ^$rawToAggregate(type = $aggReturnType, resultPath = $resultPath);
    pair($toAggregate, $container);
  });

  let aggregations = newMap($aggPairs->map(x | pair($x.first.name, $x.second)));
  let aggregationsForSearch = if ($groupByCols->isEmpty(), 
    |
      // no group by field - just run the aggregations 
      $aggregations
    ,
    |
      // with group by fields, we need to wrap it on composite
      let composite = ^CompositeAggregation(
        size = [], // todo allow to set limit?
        sources = $groupByTdsESDetails->map(x | newMap(pair($x.name, ^CompositeAggregationSource( terms = ^TermsAggregation(field = $x.path()->literal(), missing_bucket = true->literal())))))
      );
      newMap(pair('groupByComposite', ^AggregationContainer(composite = $composite, aggregations = $aggregations)));
  );

  let groupByTdsESDetailsAsAgg = $groupByTdsESDetails->map({x | 
    let resultPath = ^AggregateResultPath(fieldPath = $x.name, property = $x.resultPath.property);
    let toAggregate = ^$x(resultPath = $resultPath);
  });

  let search = $groupedReq.search;
  let newSearch = ^$search(
     size = 0->literal() // avoiding reading all the matches, we just want the aggregate results
    ,aggregations = $aggregationsForSearch
    ,_source = ^SourceConfig(fetch = false->literal())
  );

  ^$groupedReq(
    search = $newSearch,
    tdsESDetails = $groupByTdsESDetailsAsAgg->concatenate($aggPairs.first)
  );
}


function meta::external::store::elasticsearch::v7::pureToEs::processFilter(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  $initReq.debug(|'Processing ->filter');
  let req = ^$initReq(inFilter = true);
  let debug = $req.debug;
  let currReq = process($vs.parametersValues->at(0), ^$req(debug = ^$debug(space = $debug.space + '\t')));
  assertFalse($currReq.aggregationQuery, |'filter not supported in aggregation queries');
  let withFilterReq = processFilterLambda($vs.parametersValues->at(1), $currReq);
  ^$withFilterReq(inFilter = false, debug = $debug);
}

function meta::external::store::elasticsearch::v7::pureToEs::processFilterLambda(vs : ValueSpecification[1], req: State[1]): State[1] 
{
  $req.debug(|'-- processing filter lambda ' + $vs->type()->toString() + ': ' + $vs->printValueSpecification('\n'));
  
  $vs->match([
    fr: FunctionRoutedValueSpecification[1] | $fr.value->processFilterLambda($req), 
    iv: InstanceValue[1] | 
        $iv.values->match([
          f: FunctionDefinition<Any>[1 ] | $f.expressionSequence->at(0)->processFilterLambda($req),
          any: Any[1] |   fail('not supported: ' + $iv.values->type()->toString());$req;  
        ]),
    fe: FunctionExpression[1] |  $req.supportedFilterFunctions->findAndEvalSupportedFunction($fe, $req),
    any: Any[1] | fail('not supported: ' + $any->printValueSpecification(''));$req;  
  ]);
}

function meta::external::store::elasticsearch::v7::pureToEs::processDefaultSort(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  let toSortPair = $vs.parametersValues->at(1)->extractSimpleValue($initReq);
  let toSort = $toSortPair.first.values->cast(@String)->toOneMany();
  $vs->processSort($toSort->map( x | ^SortInformation(column = $x, direction = SortDirection.ASC)), $toSortPair.second);       
}

function meta::external::store::elasticsearch::v7::pureToEs::processSortWithInformation(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  let toSortPair = $vs.parametersValues->at(1)->extractSimpleValue($initReq);
  let toSort = $toSortPair.first.values->cast(@SortInformation)->toOneMany();
  $vs->processSort($toSort, $toSortPair.second);  
}

function meta::external::store::elasticsearch::v7::pureToEs::processSortWithDirection(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  let toSortPair = $vs.parametersValues->at(1)->extractSimpleValue($initReq);
  let toSort = $toSortPair.first.values->cast(@String)->toOne();

  let directionPair = $vs.parametersValues->at(2)->extractSimpleValue($toSortPair.second);
  let direction = $directionPair.first.values->cast(@SortDirection)->toOne();

  $vs->processSort(^SortInformation(column = $toSort, direction = $direction), $directionPair.second);
}

function meta::external::store::elasticsearch::v7::pureToEs::processSort(vs : FunctionExpression[1], sorts: SortInformation[*], initReq: State[1]): State[1]
{
  $initReq.debug(|'Processing ->sort');
  let debug = $initReq.debug;
  let currReq = process($vs.parametersValues->at(0), ^$initReq(debug = ^$debug(space = $debug.space + '\t')));

  let columnsToSort = $sorts.column;

  let toSort = $columnsToSort
      ->map(s | $currReq.tdsESDetails->filter(x | $x.name == $s))
      ->map(x | pair($x, if($sorts->at($columnsToSort->indexOf($x.name)).direction == SortDirection.ASC, |SortOrder.asc, |SortOrder.desc)));

  assert($toSort->size() == $sorts->size(), |'Sorting on unknown columns.  Missing: ' + $columnsToSort->removeAll($toSort.first.name)->joinStrings('[', ', ', ']'));

  let search = $currReq.search;

  let newSearch = if($currReq.aggregationQuery,
    |
      let maybeGroupByContainer = $search.aggregations->toOne()->get('groupByComposite');
      
      if ($maybeGroupByContainer->isNotEmpty(),
        |
          let container = $maybeGroupByContainer->toOne();
          let composite = $container.composite->toOne();
          let compositeSources = $composite.sources->map(m | $m->keyValues());

          // if all sorted fields are on the composite, we can reshuffle on it, and sort in place
          // but cannot sort values from the actual aggregations
          // for that, we switch to limiting TermsAggregation

          let sortOnAggregatedValues = $columnsToSort->filter(x | $x->in($compositeSources.first)->not());

          let toSortByName = $toSort->map(x | pair($x.first.name, $x.second));

          let sortedContainer = if ($sortOnAggregatedValues->isEmpty(),
            | sortOnCompositeAggregationContainer($toSortByName, $container.aggregations, $composite, $compositeSources)
            ,
            | sortOnTermsAggregationContainer($toSortByName, $container.aggregations, $composite, $compositeSources)
          );

          ^$search(aggregations = $sortedContainer);
        ,
        |
          $search;
      );
    ,
    |
      let sortCombo = $toSort->map({x | 
        let fieldSort = ^FieldSort(order = $x.second);
        let fieldMap = newMap(pair($x.first.path(), $fieldSort));
        ^SortCombinations(options = ^SortOptions(__additionalProperty = $fieldMap));
        });
     
      ^$search(sort = $sortCombo);
  );

  ^$currReq(search = $newSearch);
}

function <<access.private>> meta::external::store::elasticsearch::v7::pureToEs::sortOnCompositeAggregationContainer(
  toSort : Pair<String, SortOrder>[*],
  aggregations : Map<String, AggregationContainer>[0..1],
  composite : CompositeAggregation[1],
  compositeSources : Pair<String, CompositeAggregationSource>[*]
): Map<String, AggregationContainer>[1]
{
  let termsSorted = $toSort->map({x | 
    let compositeSourcePair = $compositeSources->filter(m | $m.first == $x.first)->toOne();
    let sourceTerms = $compositeSourcePair.second.terms->toOne();
    ^$compositeSourcePair(second = ^CompositeAggregationSource(terms = ^$sourceTerms(order = ^TermsAggregationSortOrder(order = $x.second))));
  });

  let notSortedTerms = $compositeSources
        ->filter(m | $m.first->in($toSort.first)->not())
        ->map({m | 
          let sourceTerms = $m.second.terms->toOne();
          ^$m(second = ^CompositeAggregationSource(terms = ^$sourceTerms(order = [])));
        });

  let sortedComposite = ^$composite(sources = $termsSorted->concatenate($notSortedTerms)->map(x | $x->newMap()));
  pair('groupByComposite', ^AggregationContainer(composite = $sortedComposite, aggregations = $aggregations))->newMap();
}

function <<access.private>> meta::external::store::elasticsearch::v7::pureToEs::sortOnTermsAggregationContainer(
  toSort : Pair<String, SortOrder>[*],
  aggregations : Map<String, AggregationContainer>[0..1],
  composite : CompositeAggregation[1],
  compositeSources : Pair<String, CompositeAggregationSource>[*]
): Map<String, AggregationContainer>[1]
{
  let compositeSourcesToSort = $toSort->map(x | $compositeSources->filter(m | $m.first == $x.first));

  if ($compositeSources->size() == 1,
    |
      let aggSorts = $toSort->filter(x | $x.first->in($compositeSources.first)->not());
      let sorts = $toSort->map(s | pair(if($s->in($aggSorts)->not(), |'_key', |$s.first), $s.second));

      let terms = $compositeSources->toOne().second.terms->toOne();
      let sortedTerms = ^$terms(
        size = [], // todo allow to set limit?
        missing_bucket = [],
        missing = [], /*todo handle null / missing*/
        order = ^TermsAggregationSortOrder(orderMap = $sorts->map(s | $s->newMap()))
      );
      let sortedContainer = ^AggregationContainer(terms = $sortedTerms, aggregations = $aggregations);
      pair($compositeSources->toOne().first, $sortedContainer);
    ,
    |
      assertEmpty($compositeSourcesToSort,
        | 'No supported: multiple sort fields, where the source of these fields is mixed between aggregate fields and group by fields.  Either remove group by fields or aggregate fields from sort' 
      );

      let terms = $compositeSources.second.terms->map(x | ^MultiTermLookup(field = $x.field->toOne(), missing = [] /*todo handle null / missing*/));

      let aggregationSorted = ^MultiTermsAggregation(
        size = [], // todo allow to set limit?
        terms = $terms->toOneMany(),
        order = $toSort->map(x | $x->newMap())
      );

      let sortedContainer = ^AggregationContainer(multi_terms = $aggregationSorted, aggregations = $aggregations);
      pair($compositeSources.first->joinStrings('~'), $sortedContainer);
  )->newMap();


}

function meta::external::store::elasticsearch::v7::pureToEs::process(vs : ValueSpecification[1], req: State[1]): State[1]
{
  $req.debug(|'-- processing VS ' + $vs->type()->toString() + ': ' + $vs->printValueSpecification('\n'));
  $vs->match([
    fe: FunctionExpression[1] | $req.supportedRoutingFunctions->findAndEvalSupportedFunction($fe, $req),
    tds: TDSRoutedValueSpecification[1] | $tds.value->process($req),
    ervs: ExtendedRoutedValueSpecification[1] | $ervs.value->process($req),
    any: Any[1] | fail('not supported: ' + $any->type()->toString());$req;  
  ]);
}

function meta::external::store::elasticsearch::v7::pureToEs::findAndEvalSupportedFunction<P, T | n, m>(funcs: Pair<LambdaFunction<{Function<Any>[1]->Boolean[1]}>, Function<{FunctionExpression[1], P[n]->T[m]}>>[*], fe : FunctionExpression[1], req: P[n]): T[m] 
{
  eval($funcs->filter(x|$x.first->eval($fe.func))->at(0)->toOne('function not supported yet: ' + $fe.func->elementToPath()).second, $fe, $req);
}

function meta::external::store::elasticsearch::v7::pureToEs::defaultSize(): Integer[1] 
{
  // need to default to a number since otherwise elastic defaults to 10, hence using the default max per search operation limit of 10,000
  10000;
}

function meta::external::store::elasticsearch::v7::pureToEs::process(sq:StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], runtime:Runtime[0..1], exeCtx:Elasticsearch7ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]): State[1] 
{
  let req = ^State(    
    search = ^SearchRequestBody(_source = ^SourceConfig(fetch = false->literal()), track_total_hits = ^TrackHits(enabled = true->literal())),
    inFilter = false,
    inProject = false,
    aggregationQuery = false,
    sq = $sq,
    exeCtx = $exeCtx,
    extensions = $extensions,
    ext = $ext,
    debug = $debug,
    supportedFilterFunctions = supportedFilterFunctions(),
    supportedRoutingFunctions = supportedRoutingFunctions(),
    supportedSimpleValueFunctions = supportedSimpleValueFunctions(),
    supportedAggregationFunctions = supportedAggregationFunctions()
  );

  let processedReq = $sq.fe->process($req);
  let search = $processedReq.search;
  ^$processedReq(search = if($search.size->isEmpty(), | ^$search(size = defaultSize()->literal()), | $search));
}

function meta::external::store::elasticsearch::v7::pureToEs::supportedRoutingFunctions():Pair<LambdaFunction<{Function<Any>[1]->Boolean[1]}>, Function<{FunctionExpression[1], State[1]->State[1]}>>[*]
{
  let supported = [
    pair(x: Function<Any>[1] | $x == indexToTDS_Elasticsearch7Store_1__String_1__TabularDataSet_1_,                                  processSelectAllTds_FunctionExpression_1__State_1__State_1_),
    pair(x: Function<Any>[1] | $x == meta::pure::tds::project_TabularDataSet_1__ColumnSpecification_MANY__TabularDataSet_1_,         processProject_FunctionExpression_1__State_1__State_1_),

    pair(x: Function<Any>[1] | $x == meta::pure::tds::filter_TabularDataSet_1__Function_1__TabularDataSet_1_,                        processFilter_FunctionExpression_1__State_1__State_1_),

    pair(x: Function<Any>[1] | $x == meta::pure::tds::sort_TabularDataSet_1__String_MANY__TabularDataSet_1_,                         processDefaultSort_FunctionExpression_1__State_1__State_1_),
    pair(x: Function<Any>[1] | $x == meta::pure::tds::sort_TabularDataSet_1__SortInformation_MANY__TabularDataSet_1_,                processSortWithInformation_FunctionExpression_1__State_1__State_1_),
    pair(x: Function<Any>[1] | $x == meta::pure::tds::sort_TabularDataSet_1__String_1__SortDirection_1__TabularDataSet_1_,           processSortWithDirection_FunctionExpression_1__State_1__State_1_),

    pair(x: Function<Any>[1] | $x == meta::pure::tds::groupBy_TabularDataSet_1__String_MANY__AggregateValue_MANY__TabularDataSet_1_, processGroupBy_FunctionExpression_1__State_1__State_1_),


    pair(x: Function<Any>[1] | $x == meta::pure::tds::limit_TabularDataSet_1__Integer_1__TabularDataSet_1_,                          processLimit_FunctionExpression_1__State_1__State_1_),
    pair(x: Function<Any>[1] | $x == meta::pure::tds::take_TabularDataSet_1__Integer_1__TabularDataSet_1_,                           processLimit_FunctionExpression_1__State_1__State_1_),
    pair(x: Function<Any>[1] | $x == meta::pure::tds::drop_TabularDataSet_1__Integer_1__TabularDataSet_1_,                           processDrop_FunctionExpression_1__State_1__State_1_),
    pair(x: Function<Any>[1] | $x == meta::pure::tds::slice_TabularDataSet_1__Integer_1__Integer_1__TabularDataSet_1_,               processSlice_FunctionExpression_1__State_1__State_1_)
  ];
}

function meta::external::store::elasticsearch::v7::pureToEs::processEqual(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  assert($initReq.inFilter, 'equal only supporter on filter context');

  let leftSidePair = $vs.parametersValues->at(0)->extractSimpleValue($initReq);
  let leftSide = $leftSidePair.first.values;

  let rightSidePair = $vs.parametersValues->at(1)->extractSimpleValue($leftSidePair.second);
  let rightSide = $rightSidePair.first.values;

  let req = $rightSidePair.second;

  let eqInputs = if($leftSide->size() == 1 && $leftSide->toOne()->instanceOf(TDSESDetail),
    |pair($leftSide->toOne()->cast(@TDSESDetail), list($rightSide)),
    |
      assert($rightSide->size() == 1 && $rightSide->toOne()->instanceOf(TDSESDetail), 'Equality should include an index property');
      pair($rightSide->toOne()->cast(@TDSESDetail), list($leftSide));
  );

  let literalOrExpression = $eqInputs.second.values->literalOrExpression(true);

  let tdsESDetail = $eqInputs.first;
  
  let query = $literalOrExpression->match([
    value: LiteralOrExpression<Nil>[1] | $tdsESDetail.resultPath.property->match([
      p:KeywordProperty[1]  | 
        let string = $value->cast(@LiteralOrExpression<String>);
        if($tdsESDetail.resultPath->instanceOf(_IDResultPath),
          | ^QueryContainer(ids = ^IdsQuery(values = $string)),
          | ^QueryContainer(term = newMap(pair($tdsESDetail.path(), ^TermQuery(value = ^FieldValue(any = $string)))))
        );
      ,
      p:DateProperty[1]     | 
        let dateStr = $value->cast(@LiteralOrExpression<String>);
        ^QueryContainer(
          range = newMap(pair(
              $tdsESDetail.path(),
              ^RangeQuery(date = ^DateRangeQuery(gte = $dateStr, lte = $dateStr, format = 'date_optional_time'->literal()))
          ))
        );
      ,
      a:Any[1]              |
        ^QueryContainer(
          term = newMap(pair(
            $tdsESDetail.path(),
            ^TermQuery(value = ^FieldValue(any = $value))
          ))
        )
      ]),
    none: Any[0] | 
      let exists = ^QueryContainer(exists = ^ExistsQuery(field = $tdsESDetail.path()->literal()));
      ^QueryContainer(bool = ^BoolQuery(must_not = $exists));
  ]);

  // handle optional parameters (ie zero lower bound multiplicities)
  let queryWithZeroMultHandling = if ($eqInputs.second.values->size() == 1 
      && $eqInputs.second.values->toOne()->instanceOf(VariableExpression) 
      && $eqInputs.second.values->toOne()->cast(@VariableExpression).multiplicity->getLowerBound() == 0,
    | 
      let var = $eqInputs.second.values->toOne()->cast(@VariableExpression);

      // check param was not provided
      let scriptNotExists = ^InlineScript(source = ^LiteralOrExpression<String>(expression = '"${(!%s??)?c}"'->format($var.name)));
      let ifParamIsMissingScript = ^QueryContainer(script = ^ScriptQuery(script = ^Script(inline = $scriptNotExists)));
      // then field must not exists
      let exists = ^QueryContainer(exists = ^ExistsQuery(field = $tdsESDetail.path()->literal()));
      let noExists = ^QueryContainer(bool = ^BoolQuery(must_not = $exists));
      // AND param missing and field must not exists
      // pseudo code: ($variable->isEmpty() && queryCheckingFieldIsMissing())
      let ifParamMissing = ^QueryContainer(bool = ^BoolQuery(filter = [$ifParamIsMissingScript, $noExists]));

      // check param was provided
      let scriptExists = ^InlineScript(source = ^LiteralOrExpression<String>(expression = '"${(%s??)?c}"'->format($var.name)));
      let ifParamExistsScript = ^QueryContainer(script = ^ScriptQuery(script = ^Script(inline = $scriptExists)));
      // AND param provided with terms query created before
      // pseudo code: ($variable->isNotEmpty() && queryMatchingVariableValue())
      let ifParamExists = ^QueryContainer(bool = ^BoolQuery(filter = [$ifParamExistsScript, $query]));

      // OR missing param and provided param
      // pseudo code: ($variable->isNotEmpty() && queryMatchingVariableValue()) || ($variable->isEmpty() && queryCheckingFieldIsMissing())
      ^QueryContainer(bool = ^BoolQuery(should = [ $ifParamExists, $ifParamMissing ]));
    ,
    | 
      $query
  );

  let search = $req.search;
  ^$req(search = ^$search(query = ^QueryContainer(bool = ^BoolQuery(filter = $queryWithZeroMultHandling))));
}

function meta::external::store::elasticsearch::v7::pureToEs::processIn(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  assert($initReq.inFilter, 'in only supporter on filter context');
  
  let leftSidePair = $vs.parametersValues->at(0)->extractSimpleValue($initReq);
  let leftSide = $leftSidePair.first.values;

  let rightSidePair = $vs.parametersValues->at(1)->extractSimpleValue($leftSidePair.second);
  let rightSide = $rightSidePair.first.values;

  let req = $rightSidePair.second;

  let inInputs = if($leftSide->size() == 1 && $leftSide->toOne()->instanceOf(TDSESDetail),
    |pair($leftSide->toOne()->cast(@TDSESDetail), list($rightSide)),
    |
      assert($rightSide->size() == 1 && $rightSide->toOne()->instanceOf(TDSESDetail), 'Equality should include an index property');
      pair($rightSide->toOne()->cast(@TDSESDetail), list($leftSide));
  );

  let literalOrExpression = $inInputs.second.values->literalOrExpression(true);

  let tdsESDetail = $inInputs.first;

  let query = $tdsESDetail.resultPath.property->match([
    p:KeywordProperty[1]  | 
      let string = $literalOrExpression->cast(@LiteralOrExpression<String>);
      if($tdsESDetail.resultPath->instanceOf(_IDResultPath),
        | ^QueryContainer(ids = ^IdsQuery(values = $string)),
        | ^QueryContainer(terms = ^TermsQuery(__additionalProperty = newMap(pair($tdsESDetail.path(), ^TermsQueryField(value = $string->map(val | ^FieldValue(string = $val)))))))
      );
    ,
    a:Any[1]              |
      ^QueryContainer(terms = ^TermsQuery(__additionalProperty = newMap(pair($tdsESDetail.path(), ^TermsQueryField(value = $literalOrExpression->map(val | ^FieldValue(any = $val)))))))
  ]);
  
  let search = $req.search;
  ^$req(search = ^$search(query = ^QueryContainer(bool = ^BoolQuery(filter = $query))));
}

function meta::external::store::elasticsearch::v7::pureToEs::processGreaterThan(vs : FunctionExpression[1], req: State[1]): State[1]
{
  $vs->processRangeQuery([
    pair(
        x: LiteralOrExpression<Number>[1] | ^NumberRangeQuery(gt = $x), 
        x: LiteralOrExpression<String>[1] | ^DateRangeQuery(gt = $x, format = 'date_optional_time'->literal())
    ), 
    pair(
      x: LiteralOrExpression<Number>[1] | ^NumberRangeQuery(lt = $x), 
      x: LiteralOrExpression<String>[1] | ^DateRangeQuery(lt = $x, format = 'date_optional_time'->literal())
    )
  ], $req);
}

function meta::external::store::elasticsearch::v7::pureToEs::processGreaterThanEqual(vs : FunctionExpression[1], req: State[1]): State[1]
{
  $vs->processRangeQuery([
    pair(
        x: LiteralOrExpression<Number>[1] | ^NumberRangeQuery(gte = $x), 
        x: LiteralOrExpression<String>[1] | ^DateRangeQuery(gte = $x, format = 'date_optional_time'->literal())
    ), 
    pair(
      x: LiteralOrExpression<Number>[1] | ^NumberRangeQuery(lte = $x), 
      x: LiteralOrExpression<String>[1] | ^DateRangeQuery(lte = $x, format = 'date_optional_time'->literal())
    )
  ], $req);  
}

function meta::external::store::elasticsearch::v7::pureToEs::processLessThan(vs : FunctionExpression[1], req: State[1]): State[1]
{
  $vs->processRangeQuery([
    pair(
        x: LiteralOrExpression<Number>[1] | ^NumberRangeQuery(lt = $x), 
        x: LiteralOrExpression<String>[1] | ^DateRangeQuery(lt = $x, format = 'date_optional_time'->literal())
    ), 
    pair(
      x: LiteralOrExpression<Number>[1] | ^NumberRangeQuery(gt = $x), 
      x: LiteralOrExpression<String>[1] | ^DateRangeQuery(gt = $x, format = 'date_optional_time'->literal())
    )
  ], $req);    
}

function meta::external::store::elasticsearch::v7::pureToEs::processLessThanEqual(vs : FunctionExpression[1], req: State[1]): State[1]
{
  $vs->processRangeQuery([
    pair(
        x: LiteralOrExpression<Number>[1] | ^NumberRangeQuery(lte = $x), 
        x: LiteralOrExpression<String>[1] | ^DateRangeQuery(lte = $x, format = 'date_optional_time'->literal())
    ), 
    pair(
      x: LiteralOrExpression<Number>[1] | ^NumberRangeQuery(gte = $x), 
      x: LiteralOrExpression<String>[1] | ^DateRangeQuery(gte = $x, format = 'date_optional_time'->literal())
    )
  ], $req);      
}

function meta::external::store::elasticsearch::v7::pureToEs::processRangeQuery(vs : FunctionExpression[1], options: Pair<Function<{LiteralOrExpression<Number>[1]->NumberRangeQuery[1]}>, Function<{LiteralOrExpression<String>[1]->DateRangeQuery[1]}>>[2], initReq: State[1]): State[1]
{
  assert($initReq.inFilter, 'range only supporter on filter context');

  let leftSidePair = $vs.parametersValues->at(0)->extractSimpleValue($initReq);
  let leftSide = $leftSidePair.first.values->toOne();

  let rightSidePair = $vs.parametersValues->at(1)->extractSimpleValue($leftSidePair.second);
  let rightSide = $rightSidePair.first.values->toOne();

  let req = $rightSidePair.second;

  let inputs = if($leftSide->instanceOf(TDSESDetail),
    |pair($leftSide->cast(@TDSESDetail), pair($options->at(0), $rightSide)),
    |
      assert($rightSide->instanceOf(TDSESDetail), 'range should include an index property');
      pair($rightSide->cast(@TDSESDetail), pair($options->at(1), $leftSide));
  );

  let tdsESDetail = $inputs.first;
  let option = $inputs.second.first;
  let value = $inputs.second.second->literalOrExpression(false);

  let range = $tdsESDetail.resultPath.property->match([
    d:DateProperty[1]     | 
      let dateStr = $value->cast(@LiteralOrExpression<String>);
      ^RangeQuery(date = $option.second->eval($dateStr));,
    n:NumberPropertyBase[1] |
      let num = $value->cast(@LiteralOrExpression<Number>);
      ^RangeQuery(number = $option.first->eval($num));,
    any: Any[1] | fail(|'range query not supported on type: ' + $any->type()->toString() + '.'); ^RangeQuery();
  ]);

  let query = ^QueryContainer(
    range = newMap(pair($tdsESDetail.path(), $range))
  );

  let search = $req.search;
  ^$req(search = ^$search(query = ^QueryContainer(bool = ^BoolQuery(filter = $query))));
}

function meta::external::store::elasticsearch::v7::pureToEs::processTdsIsNotNull(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  assert($initReq.inFilter, 'TdsRow.isNotNull only supporter on filter context');
  
  let columnForNullCheckPair = $vs->extractSimpleValue($initReq);
  let columnForNullCheck = $columnForNullCheckPair.first.values->cast(@TDSESDetail)->toOne();

  let req = $columnForNullCheckPair.second;

  let query = ^QueryContainer(exists = ^ExistsQuery(field = $columnForNullCheck.path()->literal()));
  let search = $req.search;
  ^$req(search = ^$search(query = ^QueryContainer(bool = ^BoolQuery(filter = $query))));
}

function meta::external::store::elasticsearch::v7::pureToEs::processIsNotEmpty(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  assert($initReq.inFilter, '->isNotEmpty only supporter on filter context');

  let columnForNullCheckPair = $vs.parametersValues->at(0)->extractSimpleValue($initReq);
  let columnForNullCheck = $columnForNullCheckPair.first.values->toOne()->cast(@TDSESDetail);

  let req = $columnForNullCheckPair.second;

  let query = ^QueryContainer(exists = ^ExistsQuery(field = $columnForNullCheck.path()->literal()));
  let search = $req.search;
  ^$req(search = ^$search(query = ^QueryContainer(bool = ^BoolQuery(filter = $query))));
}

function meta::external::store::elasticsearch::v7::pureToEs::processTdsIsNull(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  assert($initReq.inFilter, 'TdsRow.isNull only supporter on filter context');
  
  let columnForNullCheckPair = $vs->extractSimpleValue($initReq);
  let columnForNullCheck = $columnForNullCheckPair.first.values->cast(@TDSESDetail)->toOne();

  let req = $columnForNullCheckPair.second;

  let exists = ^QueryContainer(exists = ^ExistsQuery(field = $columnForNullCheck.path()->literal()));
  let query = ^QueryContainer(bool = ^BoolQuery(filter = ^QueryContainer(bool = ^BoolQuery(must_not = $exists))));
  let search = $req.search;
  ^$req(search = ^$search(query = $query));
}

function meta::external::store::elasticsearch::v7::pureToEs::processIsEmpty(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  assert($initReq.inFilter, 'TdsRow.isNull only supporter on filter context');
  
  let columnForNullCheckPair = $vs.parametersValues->at(0)->extractSimpleValue($initReq);
  let columnForNullCheck = $columnForNullCheckPair.first.values->cast(@TDSESDetail)->toOne();

  let req = $columnForNullCheckPair.second;

  let exists = ^QueryContainer(exists = ^ExistsQuery(field = $columnForNullCheck.path()->literal()));
  let query = ^QueryContainer(bool = ^BoolQuery(filter = ^QueryContainer(bool = ^BoolQuery(must_not = $exists))));
  let search = $req.search;
  ^$req(search = ^$search(query = $query));
}

function meta::external::store::elasticsearch::v7::pureToEs::processStartsWith(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  assert($initReq.inFilter, 'startsWith only supporter on filter context');

  let leftSidePair = $vs.parametersValues->at(0)->extractSimpleValue($initReq);
  let leftSide = $leftSidePair.first.values->toOne('missing startsWith source value?');

  let rightSidePair = $vs.parametersValues->at(1)->extractSimpleValue($leftSidePair.second);
  let rightSide = $rightSidePair.first.values->toOne();

  let req = $rightSidePair.second;

  assert($leftSide->instanceOf(TDSESDetail), 'at the moment, startsWith only works when source value comes from index property');

  let tdsESDetail = $leftSide->cast(@TDSESDetail);
  let val = $rightSide->literalOrExpression(false)->toOne()->cast(@LiteralOrExpression<String>);

  let query = $tdsESDetail.resultPath.property->match([
    keyword: KeywordProperty[1] | ^QueryContainer(prefix = newMap(pair($tdsESDetail.path(), ^PrefixQuery(value = $val)))),
    any: Any[1] | fail(|'not supported startsWith type: ' + $any->type()->toString() + '.'); $req.search.query;
  ]);

  let search = $req.search;
  ^$req(search = ^$search(query = ^QueryContainer(bool = ^BoolQuery(filter = $query))));
}

function meta::external::store::elasticsearch::v7::pureToEs::processEndsWith(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  assert($initReq.inFilter, 'endsWithh only supporter on filter context');

  let leftSidePair = $vs.parametersValues->at(0)->extractSimpleValue($initReq);
  let leftSide = $leftSidePair.first.values->toOne('missing endsWith source value?');

  let rightSidePair = $vs.parametersValues->at(1)->extractSimpleValue($leftSidePair.second);
  let rightSide = $rightSidePair.first.values->toOne();

  let req = $rightSidePair.second;  

  assert($leftSide->instanceOf(TDSESDetail), 'at the moment, endsWith only works when source value comes from index property');

  // todo need to escape asterisk on value
  let tdsESDetail = $leftSide->cast(@TDSESDetail);
  let val = $rightSide->match([
    string: String[1] | literal('*' + $string),
    var: VariableExpression[1] | ^LiteralOrExpression<String>(expression = '${\'"*\' + ' + $var.name + '?json_string + \'"\'}')
  ]);

  let query = $tdsESDetail.resultPath.property->match([
    keyword: KeywordProperty[1] | ^QueryContainer(wildcard = newMap(pair($tdsESDetail.path(), ^WildcardQuery(wildcard = $val)))),
    any: Any[1] | fail('not supported endsWith type: ' + $any->type()->toString() + '.'); $req.search.query;
  ]);

  let search = $req.search;
  ^$req(search = ^$search(query = ^QueryContainer(bool = ^BoolQuery(filter = $query))));
}

function meta::external::store::elasticsearch::v7::pureToEs::processContains(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  assert($initReq.inFilter, 'contains only supporter on filter context');

  let leftSidePair = $vs.parametersValues->at(0)->extractSimpleValue($initReq);
  let leftSide = $leftSidePair.first.values->toOne('missing contains source value?');

  let rightSidePair = $vs.parametersValues->at(1)->extractSimpleValue($leftSidePair.second);
  let rightSide = $rightSidePair.first.values->toOne();

  let req = $rightSidePair.second;    

  assert($leftSide->instanceOf(TDSESDetail), 'at the moment, contains only works when source value comes from index property');

  let tdsESDetail = $leftSide->cast(@TDSESDetail);

  // todo need to escape asterisk on value
  let query = $tdsESDetail.resultPath.property->match([
    {keyword: KeywordProperty[1] | 
      let literalOrExpression = $rightSide->match([
        var: VariableExpression[1] | ^LiteralOrExpression<String>(expression = '${\'"*\' + ' + $var.name + '?json_string + \'*"\'}'),
        other: String[1] | literal('*' + $other + '*')
      ]);
      ^QueryContainer(wildcard = newMap(pair($tdsESDetail.path(), ^WildcardQuery(wildcard = $literalOrExpression))));
    },
    {text: TextProperty[1] | 
      let literalOrExpression = $rightSide->match([
        var: VariableExpression[1] | ^LiteralOrExpression<String>(expression = '${\'"\' + ' + $var.name + '?json_string + \'"\'}'),
        other: String[1] | literal($other)
      ]);
      ^QueryContainer(match_phrase_prefix = newMap(pair($tdsESDetail.path(), ^MatchPhrasePrefixQuery(query = $literalOrExpression))));
    },
    any: Any[1] | fail('not supported contains type: ' + $any->type()->toString() + '.'); $req.search.query;
  ]);

  let search = $req.search;
  ^$req(search = ^$search(query = ^QueryContainer(bool = ^BoolQuery(filter = $query))));
}

function meta::external::store::elasticsearch::v7::pureToEs::processNot(vs : FunctionExpression[1], initReq: State[1]): State[1]
{
  assert($initReq.inFilter, 'or only supporter on filter context');
  let req = $vs.parametersValues->at(0)->processFilterLambda($initReq);

  let bool = ^BoolQuery(filter = ^QueryContainer(bool = ^BoolQuery(must_not = $req.search.query->toOne())));
  let query = ^QueryContainer( bool = $bool );

  let search = $req.search;
  ^$req(search = ^$search(query = $query));
}

function meta::external::store::elasticsearch::v7::pureToEs::processOr(vs : FunctionExpression[1], req: State[1]): State[1]
{
  assert($req.inFilter, 'or only supporter on filter context');
  let leftSide = $vs.parametersValues->at(0)->processFilterLambda($req);
  let rightSide = $vs.parametersValues->at(1)->processFilterLambda($req);

  let bool = ^BoolQuery(minimum_should_match = literal('1'), should = [ $leftSide.search.query->toOne(), $rightSide.search.query->toOne() ]);
  let query = ^QueryContainer(bool = ^BoolQuery(filter = ^QueryContainer(bool = $bool)));

  let search = $req.search;
  ^$req(search = ^$search(query = $query), extraNodes = $req.extraNodes->concatenate($leftSide.extraNodes)->concatenate($rightSide.extraNodes));
}

function meta::external::store::elasticsearch::v7::pureToEs::processAnd(vs : FunctionExpression[1], req: State[1]): State[1]
{
  assert($req.inFilter, 'and only supporter on filter context');
  let leftSide = $vs.parametersValues->at(0)->processFilterLambda($req);
  let rightSide = $vs.parametersValues->at(1)->processFilterLambda($req);

  let bool = ^BoolQuery(must = [ $leftSide.search.query->toOne(), $rightSide.search.query->toOne() ]);
  let query = ^QueryContainer(bool = ^BoolQuery(filter = ^QueryContainer(bool = $bool)));

  let search = $req.search;
  ^$req(search = ^$search(query = $query), extraNodes = $req.extraNodes->concatenate($leftSide.extraNodes)->concatenate($rightSide.extraNodes));
}

function meta::external::store::elasticsearch::v7::pureToEs::extractSimpleValue(vs : Any[1], req: State[1]): Pair<List<Any>, State>[1]
{
  $req.debug(|'-- processing simple value ' + $vs->type()->toString());
  $vs->match([
    rfe: FunctionExpression[1] |
      let fe = $rfe->deepByPassRouterInfo()->cast(@FunctionExpression);
      if($fe.func->instanceOf(QualifiedProperty),
        | pair($fe.func->cast(@QualifiedProperty<Any>)->qualifiedPropertyToTDSESDetail($fe.parametersValues, $req)->list(), $req),
        | if(toOne_T_MANY__T_1_ == $fe.func,
            | $fe.parametersValues->at(0)->extractSimpleValue($req),
            | $req.supportedSimpleValueFunctions->findAndEvalSupportedFunction($fe, $req)
      ));,
    iv: InstanceValue[1] | $iv.values->fold({x, currState | 
            let r = $x->extractSimpleValue($currState.second);
            pair($currState.first.values->concatenate($r.first.values)->list(), $r.second);
          }, 
        pair(list([]), $req)
      ),
    any: Any[*] | pair($any->list(), $req)
  ]);
}

function meta::external::store::elasticsearch::v7::pureToEs::qualifiedPropertyToTDSESDetail(qp : QualifiedProperty<Any>[1], params: ValueSpecification[*], req: State[1]): TDSESDetail[1]
{
  assert($params->at(0)->byPassRouterInfo().genericType.rawType->toOne() == TDSRow, 'Only TDSRow operations supported');
  let tdsProperties = ['getNumber', 'getInteger', 'getString', 'getNullableString', 'getFloat', 'getDate', 'getBoolean', 'getEnum', 'getDateTime', 'getStrictDate', 'isNull', 'isNotNull'];

  let funcName = $qp.functionName->toOne();
  let valid = $tdsProperties->contains($funcName);
  assert($tdsProperties->contains($funcName), | 'Unsupported TDSRow function:' + $qp.functionName->toOne());

  let propertyName =  $params->at(1)->match([
    iv:InstanceValue[1]|$iv.values,
    any: Any[1] | fail($any->printValueSpecification('\n') + ' not supported');
  ])->toOne()->toString();

  $req.tdsESDetails->filter(f | $f.name == $propertyName)
                    ->toOne('Property \'%s\' not found on query project.  Available: [%s]'->format([$propertyName, $req.tdsESDetails.name->joinStrings('\'', '\', \'', '\'')]));
}

function meta::external::store::elasticsearch::v7::pureToEs::supportedFilterFunctions():Pair<LambdaFunction<{Function<Any>[1]->Boolean[1]}>, Function<{FunctionExpression[1],  State[1]->State[1]}>>[*]
{
  let supported = [
     pair(x: Function<Any>[1] | $x == meta::pure::functions::boolean::equal_Any_MANY__Any_MANY__Boolean_1_, meta::external::store::elasticsearch::v7::pureToEs::processEqual_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::boolean::or_Boolean_1__Boolean_1__Boolean_1_,  meta::external::store::elasticsearch::v7::pureToEs::processOr_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::boolean::and_Boolean_1__Boolean_1__Boolean_1_, meta::external::store::elasticsearch::v7::pureToEs::processAnd_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::boolean::not_Boolean_1__Boolean_1_,            meta::external::store::elasticsearch::v7::pureToEs::processNot_FunctionExpression_1__State_1__State_1_)

    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::boolean::greaterThan_Number_1__Number_1__Boolean_1_, meta::external::store::elasticsearch::v7::pureToEs::processGreaterThan_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::boolean::greaterThanEqual_Number_1__Number_1__Boolean_1_, meta::external::store::elasticsearch::v7::pureToEs::processGreaterThanEqual_FunctionExpression_1__State_1__State_1_)

    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::boolean::greaterThan_Date_1__Date_1__Boolean_1_, meta::external::store::elasticsearch::v7::pureToEs::processGreaterThan_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::boolean::greaterThanEqual_Date_1__Date_1__Boolean_1_, meta::external::store::elasticsearch::v7::pureToEs::processGreaterThanEqual_FunctionExpression_1__State_1__State_1_)

    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::boolean::lessThan_Number_1__Number_1__Boolean_1_, meta::external::store::elasticsearch::v7::pureToEs::processLessThan_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::boolean::lessThanEqual_Number_1__Number_1__Boolean_1_, meta::external::store::elasticsearch::v7::pureToEs::processLessThanEqual_FunctionExpression_1__State_1__State_1_)

    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::boolean::lessThan_Date_1__Date_1__Boolean_1_, meta::external::store::elasticsearch::v7::pureToEs::processLessThan_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::boolean::lessThanEqual_Date_1__Date_1__Boolean_1_, meta::external::store::elasticsearch::v7::pureToEs::processLessThanEqual_FunctionExpression_1__State_1__State_1_)

    ,pair(x: Function<Any>[1] | $x->instanceOf(QualifiedProperty) && $x->cast(@QualifiedProperty<Any>).name == 'isNull',    meta::external::store::elasticsearch::v7::pureToEs::processTdsIsNull_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::collection::isEmpty_Any_$0_1$__Boolean_1_,                     meta::external::store::elasticsearch::v7::pureToEs::processIsEmpty_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x->instanceOf(QualifiedProperty) && $x->cast(@QualifiedProperty<Any>).name == 'isNotNull', meta::external::store::elasticsearch::v7::pureToEs::processTdsIsNotNull_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::collection::isNotEmpty_Any_$0_1$__Boolean_1_,                  meta::external::store::elasticsearch::v7::pureToEs::processIsNotEmpty_FunctionExpression_1__State_1__State_1_)
    
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::string::startsWith_String_1__String_1__Boolean_1_,  meta::external::store::elasticsearch::v7::pureToEs::processStartsWith_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::string::endsWith_String_1__String_1__Boolean_1_,    meta::external::store::elasticsearch::v7::pureToEs::processEndsWith_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::string::contains_String_$0_1$__String_1__Boolean_1_,    meta::external::store::elasticsearch::v7::pureToEs::processContains_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::string::contains_String_1__String_1__Boolean_1_,        meta::external::store::elasticsearch::v7::pureToEs::processContains_FunctionExpression_1__State_1__State_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::collection::in_Any_1__Any_MANY__Boolean_1_,             meta::external::store::elasticsearch::v7::pureToEs::processIn_FunctionExpression_1__State_1__State_1_)
  ];
}

function meta::external::store::elasticsearch::v7::pureToEs::supportedSimpleValueFunctions(): Pair<LambdaFunction<{Function<Any>[1]->Boolean[1]}>, Function<{FunctionExpression[1],  State[1]->Pair<List<Any>, State>[1]}>>[*]
{
  let supported = [
     pair(x: Function<Any>[1] | $x == meta::pure::functions::lang::extractEnumValue_Enumeration_1__String_1__T_1_, meta::external::store::elasticsearch::v7::pureToEs::reactivateFE_FunctionExpression_1__State_1__Pair_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::tds::asc_String_1__SortInformation_1_,                           meta::external::store::elasticsearch::v7::pureToEs::reactivateFE_FunctionExpression_1__State_1__Pair_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::tds::desc_String_1__SortInformation_1_,                          meta::external::store::elasticsearch::v7::pureToEs::reactivateFE_FunctionExpression_1__State_1__Pair_1_)
    ,pair(x: Function<Any>[1] | $x == meta::pure::tds::agg_String_1__FunctionDefinition_1__FunctionDefinition_1__AggregateValue_1_,                          meta::external::store::elasticsearch::v7::pureToEs::reactivateFE_FunctionExpression_1__State_1__Pair_1_)
    // catch all - delegate to platform evaluation of expression, and assign to variable.  ES will then use the variable on the plan
    ,pair(x: Function<Any>[1] | true, meta::external::store::elasticsearch::v7::pureToEs::evaluateAsPureExpressionNode_FunctionExpression_1__State_1__Pair_1_)
  ];
}

function meta::external::store::elasticsearch::v7::pureToEs::reactivateFE(fe: FunctionExpression[1], req: State[1]): Pair<List<Any>, State>[1] 
{
  pair($fe->cast(@FunctionExpression)->reactivate($req.sq.inScopeVars)->list(), $req);
}

function meta::external::store::elasticsearch::v7::pureToEs::evaluateAsPureExpressionNode(fe: FunctionExpression[1], req: State[1]): Pair<List<Any>, State>[1] 
{
  let type = $fe.func->functionReturnType();
  let multiplicity = $fe.func->functionReturnMultiplicity();

  // todo any validation to prevent compilation errors??
  // let variables = $fe->findVariableExpressionsInValueSpecification();

  let expression = $fe->printFunctionExpression('');
  let codeHash    = $expression->hash(HashType.SHA256);
  let charToIntMap = newMap([
      pair('0', 0), pair('1', 1), pair('2', 2), pair('3', 3),
      pair('4', 4), pair('5', 5), pair('6', 6), pair('7', 7),
      pair('8', 8), pair('9', 9), pair('a', 10), pair('b', 11),
      pair('c', 12), pair('d', 13), pair('e', 14), pair('f', 15)
  ]);
  let prime    = floor(pow(2, 31) - 1);
  let varName = '@' + $codeHash->toLower()->chunk(1)->fold({c, h | (31 * $h) + $charToIntMap->get($c)->toOne() + 47}, 0)->mod($prime)->toString();  

  let platformNode = processValueSpecification($fe, ^PlatformPlanGenerationState(inScopeVars = $req.sq.inScopeVars, exeCtx = $req.exeCtx), $req.extensions, $req.debug)
      ->toOne('Expression currently not supported: ' + $expression);

  let allocNode = ^AllocationExecutionNode(resultType = $platformNode.resultType, varName = $varName, executionNodes = $platformNode);

  pair(
      list(^PlanVarPlaceHolder(type =  $platformNode.resultType.type, name = $varName, multiplicity = $fe.func->functionReturnMultiplicity())),
      ^$req(extraNodes = $req.extraNodes->concatenate($allocNode))
  );
}

function meta::external::store::elasticsearch::v7::pureToEs::supportedAggregationFunctions(): Pair<LambdaFunction<{Function<Any>[1]->Boolean[1]}>, Function<{FunctionExpression[1],  String[1]->AggregationContainer[1]}>>[*]
{
  let supported = [
     pair(x: Function<Any>[1] | $x == meta::pure::functions::math::sum_Integer_MANY__Integer_1_, {x: FunctionExpression[1], y: String[1] | ^AggregationContainer(sum = ^SumAggregation(field = $y->literal()))})
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::math::sum_Float_MANY__Float_1_,     {x: FunctionExpression[1], y: String[1] | ^AggregationContainer(sum = ^SumAggregation(field = $y->literal()))})
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::math::sum_Number_MANY__Number_1_,   {x: FunctionExpression[1], y: String[1] | ^AggregationContainer(sum = ^SumAggregation(field = $y->literal()))})
    
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::math::max_Integer_MANY__Integer_$0_1$_, {x: FunctionExpression[1], y: String[1] | ^AggregationContainer(max = ^MaxAggregation(field = $y->literal()))})
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::math::max_Float_MANY__Float_$0_1$_,     {x: FunctionExpression[1], y: String[1] | ^AggregationContainer(max = ^MaxAggregation(field = $y->literal()))})
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::math::max_Number_MANY__Number_$0_1$_,   {x: FunctionExpression[1], y: String[1] | ^AggregationContainer(max = ^MaxAggregation(field = $y->literal()))})
    
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::math::min_Integer_MANY__Integer_$0_1$_, {x: FunctionExpression[1], y: String[1] | ^AggregationContainer(min = ^MinAggregation(field = $y->literal()))})
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::math::min_Float_MANY__Float_$0_1$_,     {x: FunctionExpression[1], y: String[1] | ^AggregationContainer(min = ^MinAggregation(field = $y->literal()))})
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::math::min_Number_MANY__Number_$0_1$_,   {x: FunctionExpression[1], y: String[1] | ^AggregationContainer(min = ^MinAggregation(field = $y->literal()))})

    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::math::average_Integer_MANY__Float_1_, {x: FunctionExpression[1], y: String[1] | ^AggregationContainer(avg = ^AverageAggregation(field = $y->literal()))})
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::math::average_Float_MANY__Float_1_,   {x: FunctionExpression[1], y: String[1] | ^AggregationContainer(avg = ^AverageAggregation(field = $y->literal()))})
    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::math::average_Number_MANY__Float_1_,  {x: FunctionExpression[1], y: String[1] | ^AggregationContainer(avg = ^AverageAggregation(field = $y->literal()))})

    ,pair(x: Function<Any>[1] | $x == meta::pure::functions::collection::count_Any_MANY__Integer_1_, {x: FunctionExpression[1], y: String[1] | ^AggregationContainer(value_count = ^ValueCountAggregation(field = $y->literal()))})
  ];
}

function meta::external::store::elasticsearch::v7::pureToEs::literalOrExpression(any : Any[*], supportZeroMult: Boolean[1]): LiteralOrExpression<Any>[*]
{
  $any->match([
    string: String[1] | $string->literal(),
    integer: Integer[1] | $integer->literal(),
    float: Float[1] | $float->literal(),
    boolean: Boolean[1] | $boolean->literal(),
    date: Date[1] | $date->toString()->literal(),
    var: VariableExpression[1] | expression(^PlanVarPlaceHolder(name = $var.name, type = $var.genericType.rawType->toOne(), multiplicity = $var.multiplicity), $supportZeroMult),
    planVar: PlanVarPlaceHolder[1] | $planVar->expression($supportZeroMult),
    none: Any[0] | [],
    mult: Any[*] | $mult->map(x | $x->literalOrExpression($supportZeroMult));
  ]);
}

function meta::external::store::elasticsearch::v7::pureToEs::literalOrExpression(any : Any[0..1], supportZeroMult: Boolean[1]): LiteralOrExpression<Any>[0..1]
{
  $any->map(x | $x->toOneMany()->literalOrExpression($supportZeroMult))->at(0);
}

function meta::external::store::elasticsearch::v7::pureToEs::expression(var : PlanVarPlaceHolder[1], supportZeroMult: Boolean[1]): LiteralOrExpression<Any>[1]
{
  assert($supportZeroMult  || ($var.multiplicity->toOne()->getLowerBound() > 0), 
    |'Operation does not support variable \'%s: %s[%s]\' with 0 lower bound multiplicity'->format([$var.name, $var.type->printType(), $var.multiplicity->toOne()->printMultiplicity()])
  );

  let varType = $var.type;
  if ($varType == String,                                   | ^LiteralOrExpression<String>(expression = $var->varFreemarkerExpression(true)),
  | if ( $varType == Boolean,                               | ^LiteralOrExpression<Boolean>(expression = $var->varFreemarkerExpression(false)),
      | if ( $varType == Integer,                           | ^LiteralOrExpression<Integer>(expression = $var->varFreemarkerExpression(false)),
        | if ( $varType->in([Float, Number, Decimal]),      | ^LiteralOrExpression<Number>(expression = $var->varFreemarkerExpression(false)),
          | if ($varType->in([Date, DateTime, StrictDate]), | ^LiteralOrExpression<String>(expression = $var->varFreemarkerExpression(true)),
            {|
              fail('Type of variable \'%s: %s[%s]\' not supported'->format([$var.name, $var.type->printType(), $var.multiplicity->toOne()->printMultiplicity()])); 
              ^LiteralOrExpression<Any>(expression = $var.name); 
            }  
          )
        )
      )
    )
  );
}

function meta::external::store::elasticsearch::v7::pureToEs::varFreemarkerExpression(var : PlanVarPlaceHolder[1], quoted: Boolean[1]): String[1]
{
  let toJson = $quoted->if(|'?json_string?ensure_starts_with(\'"\')?ensure_ends_with(\'"\')', |'');

  if ($var.multiplicity->toOne()->isToMany(),
    |
      '${(' + $var.name + '??)?then((' + $var.name + '?is_enumerable)?then(' + $var.name + '?map(x -> x' + $toJson + ')?join(\', \'), ' + $var.name + $toJson + '), "")}',
    | 
      if ($var.multiplicity->toOne()->getLowerBound() == 0,
    |
      '${(' + $var.name + '??)?then(' + $var.name + $toJson + ', \'"\\\\r\\\\n"\')}',
    |
      '${' + $var.name + $toJson + '}'
  ));
}