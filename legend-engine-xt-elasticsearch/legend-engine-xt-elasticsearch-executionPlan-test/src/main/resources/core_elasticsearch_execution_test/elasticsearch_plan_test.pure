// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::serialization::grammar::*;
import meta::external::store::elasticsearch::executionTest::testCase::tds::*;
import meta::pure::mapping::*;
import meta::pure::extension::*;
import meta::pure::functions::io::http::*;
import meta::pure::test::*;
import meta::pure::store::*;
import meta::pure::runtime::*;

import meta::external::store::elasticsearch::executionTest::testCase::*;
import meta::external::store::elasticsearch::executionTest::test::*;
import meta::external::store::elasticsearch::executionTest::utils::*;

Class meta::external::store::elasticsearch::executionTest::test::TestConfig
{
  tag: String[1];
  extension: Extension[1];
  model: String[1];
  indexRecordRequest: Function<{String[1], Any[*]->Any[*]}>[1];
}

function meta::external::store::elasticsearch::executionTest::test::collectTest(
    tag: String[1],
    extension: Extension[1],
    modelFile: String[1],
    indexRecordRequest: Function<{String[1], Any[*]->Any[*]}>[1]
  ): PureTestCollection[1]
{
  meta::pure::test::collectParameterizedTests(
    meta::external::store::elasticsearch::executionTest::testCase,
    $tag,
    ^TestConfig(
        tag = $tag,
        model = $modelFile->readFile()->toOne('file not found? ' + $modelFile),
        extension = $extension,
        indexRecordRequest = $indexRecordRequest
      ),
    [],
    []
  );
}

Class meta::external::store::elasticsearch::executionTest::testCase::OmdbRecord
{
  Title: String[1];
  Director: String[1];
  MPAA: String[0..1];
  ReleaseDate: StrictDate[1];
  Budget: Integer[1];
  Revenue: Float[1];
}


function meta::external::store::elasticsearch::executionTest::testCase::omdbCommonIndexRecord(
  title: String[1],
  director: String[1],
  MPAA:     String[0..1],
  releaseDate: StrictDate[1],
  budget: Integer[1],
  revenue: Float[1]
): OmdbRecord[1]
{
  ^OmdbRecord(Title = $title, Director = $director, MPAA = $MPAA, ReleaseDate = $releaseDate, Budget = $budget, Revenue = $revenue);
}

function meta::external::store::elasticsearch::executionTest::testCase::omdbCommonIndexRecords(): OmdbRecord[*]
{
  let records = [
    omdbCommonIndexRecord('Iron Man',                              'Jon Favreau',    'PG-13', %2008-05-02, 140, 585.8),
    omdbCommonIndexRecord('Iron Man 2',                            'Jon Favreau',    'PG-13', %2010-04-26, 170, 623.9),
    omdbCommonIndexRecord('The Imitation Game',                    'Morten Tyldum',  'PG-13', %2014-08-29,  14, 233.5),
    omdbCommonIndexRecord('The Bourne Identity',                   'Doug Liman',     'PG-13', %2002-06-06,  60, 214.0),
    omdbCommonIndexRecord('American Gangster',                     'Ridley Scott',       'R', %2007-10-19, 100, 266.5),
    omdbCommonIndexRecord('Sherlock Holmes: A Game of Shadows',    'Guy Ritchie',         [], %2011-12-16, 125, 543.8),
    omdbCommonIndexRecord('Ghostbusters',                          'Ivan Reitman',      'PG', %1984-06-08,  25, 295.2),
    omdbCommonIndexRecord('The Hitchhiker\'s Guide to the Galaxy', 'Garth Jennings',      [], %2005-04-28,  45, 104.5),
    omdbCommonIndexRecord('Inspector Gadget',                      'David Kellogg',       [], %1999-07-23,  75, 134.4),
    omdbCommonIndexRecord('The Great Gatsby',                      'Baz Luhrmann',        [], %2013-05-01, 105, 353.6),
    omdbCommonIndexRecord('Garfield 2',                            'Tim Hill',            [], %2006-06-16,  60, 143.3)
  ];
}

function meta::external::store::elasticsearch::executionTest::testCase::omdbCommonIndexRecordsTds(): TabularDataSet[1]
{
  // todo elastic threats all dates as datetime need to figure out how to test strict date...  
  omdbCommonIndexRecords()->project([x | $x.Title, x | $x.Director, x | $x.MPAA, x | parseDate($x.ReleaseDate->toString() + 'T00:00:00Z'), x | $x.Budget, x | $x.Revenue], ['Title', 'Director', 'MPAA', 'ReleaseDate', 'Budget', 'Revenue']);
}

function <<paramTest.BeforePackage>> meta::external::store::elasticsearch::executionTest::testCase::startESCluster(config:TestConfig[1]):Boolean[1]
{
  $config.tag->startElasticsearchTestServer();
  let commands = $config.indexRecordRequest->eval('omdb-common', omdbCommonIndexRecords())
      ->map(c | $c->meta::json::toJSON(1000, meta::json::config(false, false, true, true)));
  $commands->forAll({c | '------------'->println(); $c->println(); println(''); $config.tag->requestElasticsearchTestServer($c)->println(); '------------'->println(); true;});
}

function <<paramTest.AfterPackage>> meta::external::store::elasticsearch::executionTest::testCase::stopESCluster(config:TestConfig[1]):Boolean[1]
{
  $config.tag->stopElasticsearchTestServer();
  true;
}

function meta::external::store::elasticsearch::executionTest::testCase::tds::testTdsExpression(config:TestConfig[1], toTest: LambdaFunction<{TabularDataSet[1]->TabularDataSet[1]}>[1]): Boolean[1]
{
  let testCaseLambda = $toTest->printFunctionDefinitionExpressions('')->toOne();
  let testCase = $testCaseLambda->substring($testCaseLambda->indexOf('->', 0) + 2);
  let tds = runTdsExpression($config, $testCase);

  let expected = $toTest->eval([omdbCommonIndexRecordsTds()]);
  assertTdsEquivalent($expected, $tds);
}

function meta::external::store::elasticsearch::executionTest::testCase::tds::runTdsExpression(config:TestConfig[1], toTest: String[1]): TabularDataSet[1]
{
  let url = $config.tag->meta::external::store::elasticsearch::executionTest::utils::startElasticsearchTestServer();
  
  let toCompile = $config.model->replace('%_url_%', 'http://%s:%d'->format([$url.host, $url.port])) + '\n\n' +
    '###Pure \n\n ' +
    'function test::test(): TabularDataSet[1] {\n' +
    '  indexToTDS(test::Store, \'omdb-common\')->from(test::EmptyMapping, test::Runtime)->' + $toTest + ';' +
    '}';

    // $toCompile->println();

  let testCase = meta::legend::compile($toCompile)->filter(x | $x->elementToPath() == 'test::test__TabularDataSet_1_')->toOne()->cast(@FunctionDefinition<Any>);
  let tds = execute($config, $testCase);
}

function meta::external::store::elasticsearch::executionTest::testCase::execute(config: TestConfig[1], f: FunctionDefinition<Any>[1]): TabularDataSet[1]
{
  let resultJson = meta::legend::execute(
      $f,
      [],
      ^ExecutionContext(),
      $config.extension
  );
  
  // println($resultJson);

  let result = $resultJson->meta::json::parseJSON()->cast(@meta::json::JSONObject);
  let builderJson = $result->meta::json::getValue('builder')->toOne();
  let builder = $builderJson->meta::json::fromJSON(meta::protocols::pure::vX_X_X::metamodel::invocation::execution::execute::TDSBuilder)
                              ->cast(@meta::protocols::pure::vX_X_X::metamodel::invocation::execution::execute::TDSBuilder);
  
  let tdsColumns = $builder.columns->toIndexed()->map(c | ^TDSColumn(offset = $c.first, name=$c.second.name, type = $c.second.type->map(t | $t->stringToDataType())));

  let rowsJson = $result->meta::json::getValue('result')
                  ->cast(@meta::json::JSONObject)->toOne()->meta::json::getValue('rows')
                  ->cast(@meta::json::JSONArray).values
                  ->cast(@meta::json::JSONObject)->map(o | $o->meta::json::getValue('values'))
                  ->cast(@meta::json::JSONArray);  


  let tds = ^TabularDataSet(columns = $tdsColumns);
  let rows = $rowsJson->map(r | ^TDSRow(parent = $tds, values = $r.values->toIndexed()->map(v | if($v.second->instanceOf(meta::json::JSONNull), |^TDSNull(), |$v.second->meta::json::fromJSON($tdsColumns->at($v.first).type->toOne())))));
  ^$tds(rows = $rows);
}

function meta::external::store::elasticsearch::executionTest::testCase::assertTdsEquivalent(expected: TabularDataSet[1], actual: TabularDataSet[1]): Boolean[1]
{
  assertEquals($expected.columns.name,  $actual.columns.name);
  assertEquals(
    $expected->sort($expected.columns.name).rows->map(r | $expected.columns.name->map(c | $r.get($c))), 
    $actual->sort($actual.columns.name).rows->map(r | $actual.columns.name->map(c | $r.get($c)))
  );
}