// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::*;
import meta::pure::tds::*;
import meta::external::store::elasticsearch::executionTest::testCase::*;
import meta::external::store::elasticsearch::executionTest::testCase::tds::*;
import meta::external::store::elasticsearch::executionTest::test::*;
import meta::external::store::elasticsearch::executionTest::utils::*;

function 
  <<paramTest.Test>>
  {doc.doc = 'Test multiple aggregations without any group by on Elasticsearch'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::groupBy::testMultipleAggregationsWithoutGroupBy(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x|$x->groupBy([], [ agg('sumBudget', r | $r.getInteger('Budget'), agg | $agg->sum()), agg('avgBudget', r | $r.getInteger('Budget'), agg | $agg->average()) ]));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test multiple aggregations with single group by on Elasticsearch'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::groupBy::testMultipleAggregationsWithGroupBy(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x|$x->groupBy('Director', [ agg('sumBudget', r | $r.getInteger('Budget'), agg | $agg->sum()), agg('avgBudget', r | $r.getInteger('Budget'), agg | $agg->average()) ]));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test multiple aggregations with multiplegroup by on Elasticsearch'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::groupBy::testAggregationWithMultipleGroupBy(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x|$x->groupBy(['Director', 'MPAA'], [ agg('sumBudget', r | $r.getInteger('Budget'), agg | $agg->sum()), agg('avgBudget', r | $r.getInteger('Budget'), agg | $agg->average()) ]));
}

function 
  <<paramTest.Test>>
  {doc.doc = 'Test single aggregations with single group by on Elasticsearch'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::groupBy::testAggregationWithGroupBy(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x|$x->groupBy('Director', agg('sumBudget', r | $r.getInteger('Budget'), agg | $agg->sum())));
}

function
  <<paramTest.Test>>
  {doc.doc = 'Test group by with no aggregations on Elasticsearch'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::groupBy::testGroupByWithoutAggregations(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x|$x->groupBy('Director', []->cast(@meta::pure::tds::AggregateValue<Any, Any>)), 'groupBy(\'Director\', [])');
}

function
  <<paramTest.Test>>
  {doc.doc = 'Test group by on nullable field on Elasticsearch'} 
meta::external::store::elasticsearch::executionTest::testCase::tds::groupBy::testGroupByOnNullableField(config:TestConfig[1]):Boolean[1]
{
  $config->testTdsExpression(x|$x->groupBy('MPAA', agg('count', r | $r.getNullableString('MPAA'), agg | $agg->count())));
}