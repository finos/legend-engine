// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::pure::extension::*;
import meta::pure::runtime::*;
import meta::pure::test::*;
import meta::external::store::deephaven::executionTest::*;
import meta::external::store::deephaven::executionTest::utils::*;

Class meta::external::store::deephaven::executionTest::TestConfig
{
    tag: String[1];
    runtime: meta::core::runtime::Runtime[1];
    compiled: PackageableElement[*];
}

function meta::external::store::deephaven::executionTest::getCompiledTestConfig(imageTag: String[1], sampleFileLoc: String[1]): TestConfig[1]
{
    let url = meta::external::store::deephaven::executionTest::utils::startDeephaven($imageTag);
    
    let tokenizedFile = readFile($sampleFileLoc)->toOne();
    let detokenizedFile = $tokenizedFile->replace('serverUrl: \'http://localhost:10000\'', 'serverUrl: \'http://' + $url.host + ':' + $url.port->toString() + '\'');

    let compiled = meta::legend::compileLegendGrammar($detokenizedFile);
    let compiledRuntime = $compiled->filter(e | $e->instanceOf(meta::pure::runtime::PackageableRuntime))->at(0)->cast(@meta::pure::runtime::PackageableRuntime).runtimeValue->cast(@meta::core::runtime::Runtime);
    ^TestConfig(tag = $imageTag, runtime = $compiledRuntime, compiled = $compiled);
}

function meta::external::store::deephaven::executionTest::collectTest(imageTag: String[1]): PureTestCollection[1]
{
    // Stop any existing instance
    meta::external::store::deephaven::executionTest::utils::stopDeephaven($imageTag);

    let config = getCompiledTestConfig($imageTag, '/core_deephaven_execution_test/test_scope/testSetupDSL.txt');
    meta::pure::test::collectParameterizedTests(meta::external::store::deephaven::executionTest::testCase, $imageTag, $config, [], []);
}

function meta::external::store::deephaven::executionTest::executeAndAssert(f: String[1], expectedResult: String[1], config: TestConfig[1]): Boolean[1]
{
    let func = $config.compiled->filter(e | $e->instanceOf(ConcreteFunctionDefinition) && $e->cast(@ConcreteFunctionDefinition<Any>).functionName == $f)->at(0)->cast(@FunctionDefinition<Any>);
    let extensions = meta::external::store::deephaven::executionPlan::platformBinding::legendJava::deephavenOnlyLegendJavaPlatformBindingExtensions();
    let context = ^meta::pure::runtime::ExecutionContext();
    let resultJson = meta::legend::execute($func, [], $context, $extensions);
    assertEquals($expectedResult, $resultJson);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testSelectAll(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.select(TradeID,StockSymbol,Price,Quantity,TradeTime,City,IsBuy)"}], ' +
                   '"objects" : [{"TradeTime":"2025-03-06T09:30:00Z","Price":174.5,"TradeID":1,"IsBuy":true,"StockSymbol":"AAPL","Quantity":100,"City":"New York"},' +
                                '{"TradeTime":"2025-03-06T09:31:00Z","Price":142.3,"TradeID":2,"IsBuy":false,"StockSymbol":"GOOG","Quantity":50,"City":"London"},' +
                                '{"TradeTime":"2025-03-06T09:32:00Z","Price":175.0,"TradeID":3,"IsBuy":true,"StockSymbol":"AAPL","Quantity":200,"City":"New York"},' +
                                '{"TradeTime":"2025-03-06T09:33:00Z","Price":423.1,"TradeID":4,"IsBuy":true,"StockSymbol":"MSFT","Quantity":75,"City":"Tokyo"},' +
                                '{"TradeTime":"2025-03-06T09:34:00Z","Price":141.8,"TradeID":5,"IsBuy":false,"StockSymbol":"GOOG","Quantity":150,"City":"London"},' +
                                '{"TradeTime":"2025-03-06T09:35:00Z","Price":248.9,"TradeID":6,"IsBuy":true,"StockSymbol":"TSLA","Quantity":300,"City":"New York"},' +
                                '{"TradeTime":"2025-03-06T09:36:00Z","Price":174.8,"TradeID":7,"IsBuy":false,"StockSymbol":"AAPL","Quantity":120,"City":"Tokyo"},' +
                                '{"TradeTime":"2025-03-06T09:37:00Z","Price":422.5,"TradeID":8,"IsBuy":true,"StockSymbol":"MSFT","Quantity":90,"City":"New York"}]}';
    executeAndAssert('test::basicSelect', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testSelectOneCol(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.select(StockSymbol)"}], ' +
                   '"objects" : [{"StockSymbol":"AAPL"},{"StockSymbol":"GOOG"},{"StockSymbol":"AAPL"},{"StockSymbol":"MSFT"},{"StockSymbol":"GOOG"},{"StockSymbol":"TSLA"},{"StockSymbol":"AAPL"},{"StockSymbol":"MSFT"}]}';
    executeAndAssert('test::basicSelectOneCol', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testSelectTwoCols(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.select(City,Quantity)"}], ' +
                   '"objects" : [{"Quantity":100,"City":"New York"},{"Quantity":50,"City":"London"},{"Quantity":200,"City":"New York"},{"Quantity":75,"City":"Tokyo"},{"Quantity":150,"City":"London"},{"Quantity":300,"City":"New York"},{"Quantity":120,"City":"Tokyo"},{"Quantity":90,"City":"New York"}]}';
    executeAndAssert('test::basicSelectTwoCols', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testWhere(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.where(StockSymbol == \\"GOOG\\")"}], ' +
                   '"objects" : [{"TradeTime":"2025-03-06T09:31:00Z","Price":142.3,"TradeID":2,"IsBuy":false,"StockSymbol":"GOOG","Quantity":50,"City":"London"},{"TradeTime":"2025-03-06T09:34:00Z","Price":141.8,"TradeID":5,"IsBuy":false,"StockSymbol":"GOOG","Quantity":150,"City":"London"}]}';
    executeAndAssert('test::basicWhere', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testWhereWithSelect(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.where(City == \\"New York\\")\\n.select(StockSymbol)"}], "objects" : [{"StockSymbol":"AAPL"},{"StockSymbol":"AAPL"},{"StockSymbol":"TSLA"},{"StockSymbol":"MSFT"}]}';
    executeAndAssert('test::basicWhereWithSelect', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testTwoWhereWithSelect(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.where(City == \\"New York\\")\\n.where(IsBuy == true)\\n.select(StockSymbol)"}], ' +
                   '"objects" : [{"StockSymbol":"AAPL"},{"StockSymbol":"AAPL"},{"StockSymbol":"TSLA"},{"StockSymbol":"MSFT"}]}';
    executeAndAssert('test::basicTwoWhereWithSelect', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testTwoWhereWithAnd(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.where((City == \\"New York\\") && (StockSymbol == \\"AAPL\\"))"}], ' +
                   '"objects" : [{"TradeTime":"2025-03-06T09:30:00Z","Price":174.5,"TradeID":1,"IsBuy":true,"StockSymbol":"AAPL","Quantity":100,"City":"New York"},' +
                                '{"TradeTime":"2025-03-06T09:32:00Z","Price":175.0,"TradeID":3,"IsBuy":true,"StockSymbol":"AAPL","Quantity":200,"City":"New York"}]}';
    executeAndAssert('test::basicTwoWhereWithAnd', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testTwoWhereWithOr(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.where((City == \\"London\\") || (StockSymbol == \\"MSFT\\"))"}], ' +
                   '"objects" : [{"TradeTime":"2025-03-06T09:31:00Z","Price":142.3,"TradeID":2,"IsBuy":false,"StockSymbol":"GOOG","Quantity":50,"City":"London"},' +
                                '{"TradeTime":"2025-03-06T09:33:00Z","Price":423.1,"TradeID":4,"IsBuy":true,"StockSymbol":"MSFT","Quantity":75,"City":"Tokyo"},' +
                                '{"TradeTime":"2025-03-06T09:34:00Z","Price":141.8,"TradeID":5,"IsBuy":false,"StockSymbol":"GOOG","Quantity":150,"City":"London"},' +
                                '{"TradeTime":"2025-03-06T09:37:00Z","Price":422.5,"TradeID":8,"IsBuy":true,"StockSymbol":"MSFT","Quantity":90,"City":"New York"}]}';
    executeAndAssert('test::basicTwoWhereWithOr', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testWhereWithIn(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.where(FilterIn{expression=ColumnName(City), values=[LiteralString{value=London}, LiteralString{value=Tokyo}]})"}], ' +
                   '"objects" : [{"TradeTime":"2025-03-06T09:31:00Z","Price":142.3,"TradeID":2,"IsBuy":false,"StockSymbol":"GOOG","Quantity":50,"City":"London"},' +
                                '{"TradeTime":"2025-03-06T09:33:00Z","Price":423.1,"TradeID":4,"IsBuy":true,"StockSymbol":"MSFT","Quantity":75,"City":"Tokyo"},' +
                                '{"TradeTime":"2025-03-06T09:34:00Z","Price":141.8,"TradeID":5,"IsBuy":false,"StockSymbol":"GOOG","Quantity":150,"City":"London"},' +
                                '{"TradeTime":"2025-03-06T09:36:00Z","Price":174.8,"TradeID":7,"IsBuy":false,"StockSymbol":"AAPL","Quantity":120,"City":"Tokyo"}]}';
    executeAndAssert('test::basicWhereWithIn', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testWhereWithNotEqual(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.where(City != \\"New York\\")"}], ' +
                   '"objects" : [{"TradeTime":"2025-03-06T09:31:00Z","Price":142.3,"TradeID":2,"IsBuy":false,"StockSymbol":"GOOG","Quantity":50,"City":"London"},' +
                                '{"TradeTime":"2025-03-06T09:33:00Z","Price":423.1,"TradeID":4,"IsBuy":true,"StockSymbol":"MSFT","Quantity":75,"City":"Tokyo"},' +
                                '{"TradeTime":"2025-03-06T09:34:00Z","Price":141.8,"TradeID":5,"IsBuy":false,"StockSymbol":"GOOG","Quantity":150,"City":"London"},' +
                                '{"TradeTime":"2025-03-06T09:36:00Z","Price":174.8,"TradeID":7,"IsBuy":false,"StockSymbol":"AAPL","Quantity":120,"City":"Tokyo"}]}';
    executeAndAssert('test::basicWhereWithNotEqual', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testSort(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.sort([ASCENDING(City),DESCENDING(Price)])"}], ' +
                   '"objects" : [{"TradeTime":"2025-03-06T09:31:00Z","Price":142.3,"TradeID":2,"IsBuy":false,"StockSymbol":"GOOG","Quantity":50,"City":"London"},' +
                                '{"TradeTime":"2025-03-06T09:34:00Z","Price":141.8,"TradeID":5,"IsBuy":false,"StockSymbol":"GOOG","Quantity":150,"City":"London"},' +
                                '{"TradeTime":"2025-03-06T09:37:00Z","Price":422.5,"TradeID":8,"IsBuy":true,"StockSymbol":"MSFT","Quantity":90,"City":"New York"},' +
                                '{"TradeTime":"2025-03-06T09:35:00Z","Price":248.9,"TradeID":6,"IsBuy":true,"StockSymbol":"TSLA","Quantity":300,"City":"New York"},' +
                                '{"TradeTime":"2025-03-06T09:32:00Z","Price":175.0,"TradeID":3,"IsBuy":true,"StockSymbol":"AAPL","Quantity":200,"City":"New York"},' +
                                '{"TradeTime":"2025-03-06T09:30:00Z","Price":174.5,"TradeID":1,"IsBuy":true,"StockSymbol":"AAPL","Quantity":100,"City":"New York"},' +
                                '{"TradeTime":"2025-03-06T09:33:00Z","Price":423.1,"TradeID":4,"IsBuy":true,"StockSymbol":"MSFT","Quantity":75,"City":"Tokyo"},' +
                                '{"TradeTime":"2025-03-06T09:36:00Z","Price":174.8,"TradeID":7,"IsBuy":false,"StockSymbol":"AAPL","Quantity":120,"City":"Tokyo"}]}';
    executeAndAssert('test::basicSort', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testFilterWithEquality(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.where((IsBuy == true) && (StockSymbol == \\"AAPL\\"))\\n.select(TradeID,StockSymbol,Price,Quantity,TradeTime)"}], ' +
                   '"objects" : [{"StockSymbol":"AAPL","Quantity":100,"TradeTime":"2025-03-06T09:30:00Z","Price":174.5,"TradeID":1},' +
                                '{"StockSymbol":"AAPL","Quantity":200,"TradeTime":"2025-03-06T09:32:00Z","Price":175.0,"TradeID":3}]}';
    executeAndAssert('test::filterWithEquality', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testFilterWithNotAndOr(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.where(((City != \\"London\\") && (City != \\"Tokyo\\")) || (Price > (int)200))\\n.select(TradeID,StockSymbol,Price,City)"}], ' +
                   '"objects" : [{"StockSymbol":"AAPL","City":"New York","Price":174.5,"TradeID":1},' +
                                '{"StockSymbol":"AAPL","City":"New York","Price":175.0,"TradeID":3},' +
                                '{"StockSymbol":"MSFT","City":"Tokyo","Price":423.1,"TradeID":4},' +
                                '{"StockSymbol":"TSLA","City":"New York","Price":248.9,"TradeID":6},' +
                                '{"StockSymbol":"MSFT","City":"New York","Price":422.5,"TradeID":8}]}';
    executeAndAssert('test::filterWithNotAndOr', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testFilterWithOrAndSelect(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.where((Price > (int)400) || (Quantity > (int)200))\\n.select(TradeID,StockSymbol,Price,Quantity)"}], ' +
                   '"objects" : [{"StockSymbol":"MSFT","Quantity":75,"Price":423.1,"TradeID":4},' +
                                '{"StockSymbol":"TSLA","Quantity":300,"Price":248.9,"TradeID":6},' +
                                '{"StockSymbol":"MSFT","Quantity":90,"Price":422.5,"TradeID":8}]}';
    executeAndAssert('test::filterWithOrAndSelect', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testMultiConditionFilterWithAnd(config: TestConfig[1]): Boolean[1]
{
    let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.where(((IsBuy == true) && (City == \\"New York\\")) && (Quantity > (int)100))\\n.select(TradeID,StockSymbol,Quantity,Price)"}], ' +
                   '"objects" : [{"StockSymbol":"AAPL","Quantity":200,"Price":175.0,"TradeID":3},' +
                                '{"StockSymbol":"TSLA","Quantity":300,"Price":248.9,"TradeID":6}]}';
    executeAndAssert('test::multiConditionFilterWithAnd', $expected, $config);
}

function <<paramTest.Test>> meta::external::store::deephaven::executionTest::testCase::testSelectWithExpressionAndFilter(config: TestConfig[1]): Boolean[1]
{
   let expected = '{"builder": {"_type":"streamBuilder"}, "activities": [{"_type":"DeephavenExecutionActivity","query":"ticketTable(s/stockTrades)\\n.where(TradeTime > \\"\'2025-03-06T09:33:00Z\'\\")\\n.select(TradeID,StockSymbol,Price,TradeTime)"}], ' +
                  '"objects" : [{"StockSymbol":"GOOG","TradeTime":"2025-03-06T09:34:00Z","Price":141.8,"TradeID":5},' +
                               '{"StockSymbol":"TSLA","TradeTime":"2025-03-06T09:35:00Z","Price":248.9,"TradeID":6},' +
                               '{"StockSymbol":"AAPL","TradeTime":"2025-03-06T09:36:00Z","Price":174.8,"TradeID":7},' +
                               '{"StockSymbol":"MSFT","TradeTime":"2025-03-06T09:37:00Z","Price":422.5,"TradeID":8}]}';
   executeAndAssert('test::SelectWithExpressionAndFilter', $expected, $config);
}

function <<paramTest.AfterPackage>> meta::external::store::deephaven::executionTest::testCase::cleanupTestSuite(config: TestConfig[1]): Boolean[1]
{
    stopDeephaven($config.tag);
    true;
}

function <<test.TestCollection>> meta::external::store::deephaven::executionTest::testDeephavenLatest(): PureTestCollection[1]
{
    collectTest('0.37.4');
}