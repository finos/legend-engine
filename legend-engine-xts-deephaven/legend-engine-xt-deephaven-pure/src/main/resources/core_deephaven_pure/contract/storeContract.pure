// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::deephaven::metamodel::*;
import meta::external::store::deephaven::generation::*;
import meta::external::store::deephaven::metamodel::runtime::*;
import meta::external::store::deephaven::metamodel::executionPlan::*;
import meta::external::store::deephaven::metamodel::executionPlan::context::*;
import meta::pure::extension::*;
import meta::core::runtime::*;
import meta::pure::mapping::*;
import meta::pure::store::*;
import meta::pure::executionPlan::*;

import meta::pure::router::routing::*;
import meta::pure::router::clustering::*;

import meta::external::store::deephaven::metamodel::store::*;
import meta::external::store::deephaven::extension::*;
import meta::external::store::deephaven::contract::*;


function meta::external::store::deephaven::contract::deephavenStoreContract(): StoreContract[1]
{
  ^StoreContract
  (
    id = 'deephaven',
    planExecution = meta::external::store::deephaven::executionPlan::generation::planExecution_StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_$0_1$__Runtime_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_,
    supportsStore = store: Store[1] | $store->instanceOf(DeephavenStore),
    supportsNativeJoinAmongElements = false,
    supportsStreamFunction = f: FunctionExpression[1] | false,
    supportsSetImplementation = s: SetImplementation[1] | false,
    resolveStoreFromSetImplementation = [],
    supports = supports()
  )
}

function meta::external::store::deephaven::executionPlan::generation::planExecution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], runtime:Runtime[0..1], exeCtx:meta::pure::runtime::ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
  let dhCtx = if ($exeCtx->instanceOf(DeephavenExecutionContext), |$exeCtx->cast(@DeephavenExecutionContext), |^DeephavenExecutionContext());
  let processOutput = meta::external::store::deephaven::pureToDeephaven::process($sq, $ext, $m, $runtime, $dhCtx, $extensions, $debug);

  let selectOp = $processOutput.dhQuery.operations->filter(o | $o->instanceOf(SelectOperation))->map(m | $m->cast(@SelectOperation));
  let columns = $selectOp.columns->map(col | ^TDSColumn(
        name = $col.name,
        type = meta::external::store::deephaven::pureToDeephaven::mapDeephavenTypeToPureType($col.type)
    ));
  ^meta::external::store::deephaven::metamodel::pure::DeephavenExecutionNode(
                          connection = $runtime->toOne('missing required runtime for Deephaven plan execution').connectionByElement($sq.store)->cast(@DeephavenConnection),
                          query = $processOutput.dhQuery->toOne(),
                          resultType = ^meta::pure::executionPlan::TDSResultType(genericType = ^GenericType(rawType = TabularDataSet), tdsColumns = $columns)
                         );
}

function meta::external::store::deephaven::pureToDeephaven::mapDeephavenTypeToPureType(dhType: meta::external::store::deephaven::metamodel::type::Type[1]): DataType[1]
{
  let res =  $dhType->match([
        t: meta::external::store::deephaven::metamodel::type::BooleanType[1] | Boolean,
        t: meta::external::store::deephaven::metamodel::type::ByteType[1]   | Integer,
        t: meta::external::store::deephaven::metamodel::type::CharType[1]   | String,
        t: meta::external::store::deephaven::metamodel::type::ShortType[1]  | Integer,
        t: meta::external::store::deephaven::metamodel::type::IntType[1]    | Integer,
        t: meta::external::store::deephaven::metamodel::type::LongType[1]   | Integer,
        t: meta::external::store::deephaven::metamodel::type::FloatType[1]  | Float,
        t: meta::external::store::deephaven::metamodel::type::DoubleType[1] | Float,
        t: meta::external::store::deephaven::metamodel::type::StringType[1] | String,
        t: meta::external::store::deephaven::metamodel::type::DateTimeType[1]   | DateTime,
        t: meta::external::store::deephaven::metamodel::type::CustomType[1] | fail('CustomType not supported in TDSResultType mapping; specify a concrete DataType')
    ]);
  $res->cast(@DataType);
}

function meta::external::store::deephaven::contract::supports(): Function<{FunctionExpression[1]->Boolean[1]}>[1]
{
  let supportedFunctions = meta::external::store::deephaven::pureToDeephaven::supportedRoutingFunctions().first;
  {f:FunctionExpression[1]| $supportedFunctions->exists(x | $x->eval($f.func, []))};
}