// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.





###Pure
import meta::external::query::graphQL::metamodel::sdl::*;
import meta::external::query::graphQL::metamodel::sdl::value::*;
import meta::external::query::graphQL::metamodel::sdl::executable::*;
import meta::external::query::graphQL::transformation::queryToPure::*;
import meta::pure::graphFetch::*;

function meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure(query:Document[1], root: Class<Any>[1]) : RootGraphFetchTree<Any>[1]
{
  let types = $root->meta::external::query::graphQL::binding::fromPure::introspection::scanTypes([]);
  let fragments = $query.definitions->map(d|
    $d->match([
      
      f : FragmentDefinition[1]| pair($f.name, list($f.selectionSet->transformSelectionToPure($types->filter(c|$c.name == $f.typeCondition)->toOne()->cast(@Class<Any>))));,
      o : OperationDefinition[1]| pair('__Query', list($o.selectionSet->transformSelectionToPure($root)));
    ])    
  )->newMap();

  ^RootGraphFetchTree<Any>
  (
    class = $root,
    subTrees = $fragments->get('__Query')->toOne().values->buildGraphFetchFromIntermediateNodes($fragments)
  );
}



Class <<access.private>> meta::external::query::graphQL::transformation::queryToPure::IntermediateNode
{
}

Class <<access.private>> meta::external::query::graphQL::transformation::queryToPure::IntermediatePropertyNode extends IntermediateNode
{
  children :  meta::external::query::graphQL::transformation::queryToPure::IntermediateNode[*];
  propertyFetch : PropertyGraphFetchTree[1];
}

Class <<access.private>> meta::external::query::graphQL::transformation::queryToPure::IntermediateFragmentNode extends IntermediateNode
{
  name : String[1];
}

function <<access.private>> meta::external::query::graphQL::transformation::queryToPure::transformSelectionToPure(selection:Selection[*], root:Class<Any>[1]) : meta::external::query::graphQL::transformation::queryToPure::IntermediateNode[*]
{
  $selection->map(s|$s->match(
    [
      field : Field[1] |let property = $root->meta::pure::functions::meta::hierarchicalProperties()->concatenate($root->meta::pure::functions::meta::hierarchicalQualifiedProperties())->filter(p|$p.name == $field.name);
                        assert(!$property->isEmpty(), |'Property "'+$field.name+'" can\'t be found in the type '+$root->elementToPath());
                        ^meta::external::query::graphQL::transformation::queryToPure::IntermediatePropertyNode
                        (
                          propertyFetch = ^PropertyGraphFetchTree
                                          (
                                            property = $property->toOne(),
                                            parameters = $field.arguments->map(a|$a.value->match(
                                                                                            [
                                                                                              s:StringValue[1]| ^InstanceValue(multiplicity=PureOne, genericType=^GenericType(rawType=String), values=$s.value),
                                                                                              b:BooleanValue[1]| ^InstanceValue(multiplicity=PureOne, genericType=^GenericType(rawType=Boolean), values=$b.value)
                                                                                            ]
                                                                                          )
                                                                           )
                                          ),
                          children = if ($field.selectionSet->isEmpty(),|[],|$field.selectionSet->transformSelectionToPure($property->toOne()->functionReturnType().rawType->cast(@Class<Any>)->toOne()))
                        );,
      fragmentId : FragmentSpread[1] | ^meta::external::query::graphQL::transformation::queryToPure::IntermediateFragmentNode(name = $fragmentId.name);
    ]
  ));
}

function <<access.private>> meta::external::query::graphQL::transformation::queryToPure::buildGraphFetchFromIntermediateNodes(nodes : meta::external::query::graphQL::transformation::queryToPure::IntermediateNode[*], fragments : Map<String, List<meta::external::query::graphQL::transformation::queryToPure::IntermediateNode>>[1]) : PropertyGraphFetchTree[*]
{
  $nodes->map(n | $n->match(
      [
        p : meta::external::query::graphQL::transformation::queryToPure::IntermediatePropertyNode[1] | let val = $p.propertyFetch;
                                                                                           ^$val
                                                                                           (
                                                                                             subTrees = $p.children->buildGraphFetchFromIntermediateNodes($fragments)
                                                                                           );,
        f : meta::external::query::graphQL::transformation::queryToPure::IntermediateFragmentNode[1] | $fragments->get($f.name).values->buildGraphFetchFromIntermediateNodes($fragments)
      ]
    )
  )
}


###Pure
import meta::external::query::graphQL::transformation::queryToPure::*;

function meta::external::query::graphQL::transformation::queryToPure::getPlansFromGraphQL(
                                                                          cl:Class<Any>[1],
                                                                          mapping:meta::pure::mapping::Mapping[1],
                                                                          runtime:meta::pure::runtime::Runtime[1],
                                                                          query:meta::external::query::graphQL::metamodel::sdl::Document[1],
                                                                          extensions:meta::pure::extension::Extension[*]
                                                                      ):Pair<String, meta::pure::executionPlan::ExecutionPlan>[*]
{
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($query, $cl);
  let res = $graphFetch->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree();
  $res->map(r|
              pair(
                $r.first,
                meta::pure::executionPlan::executionPlan(
                  $r.second,
                  $mapping,
                  $runtime,
                  $extensions
                )
              )
        );
}

Class meta::external::query::graphQL::transformation::queryToPure::GraphFetchResult
{
  graphFetchTree : meta::pure::graphFetch::RootGraphFetchTree<Any>[1];
  explodedDomain : Pair<String, FunctionDefinition<{->Any[*]}>>[*];
}

function meta::external::query::graphQL::transformation::queryToPure::getGraphFetchFromGraphQL(cl:Class<Any>[1], query:meta::external::query::graphQL::metamodel::sdl::Document[1]):GraphFetchResult[1]
{
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($query, $cl);
  let res = $graphFetch->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree();
  ^GraphFetchResult
  (
    graphFetchTree = $graphFetch,
    explodedDomain = $res->map(r|pair($r.first, $r.second))
  );
}

