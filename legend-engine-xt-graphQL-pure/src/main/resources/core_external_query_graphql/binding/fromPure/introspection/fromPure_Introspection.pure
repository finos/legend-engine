###Pure
import meta::external::query::graphQL::metamodel::introspection::*;
import meta::external::query::graphQL::transformation::introspection::*;
import meta::external::query::graphQL::binding::fromPure::introspection::*;

function meta::external::query::graphQL::binding::fromPure::introspection::scanTypes(t:Type[1], processed:Type[*]):Type[*]
{
   if (!$processed->contains($t),
       |$t->concatenate(if($t->instanceOf(Class),
                         |$t->cast(@Class<Any>)->allProperties().genericType.rawType->distinct()->concatenate($t->cast(@Class<Any>)->meta::pure::functions::meta::findAllSpecializations())->filter(t|($t->instanceOf(Class) || $t->instanceOf(meta::pure::metamodel::type::Enumeration)) && $t != Any)->map(c|$c->meta::external::query::graphQL::binding::fromPure::introspection::scanTypes($processed->concatenate($t)))->distinct(),
                         |[]
                       )),
       |[]
   );
}

function meta::external::query::graphQL::binding::fromPure::introspection::buildGraphQLSchemaFromPureTypes(cl:Class<Any>[1]):BaseGraphQLType[1]
{
  let classes = $cl->scanTypes([]);
  let res = transformPureToGraphQL($classes);

  ^BaseGraphQLType(
    __schema = ^__Schema(
                  queryType = $res->filter(c|$c.name == $cl.name)->toOne(),
                  types = $res
                )
  );
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::transformPureToGraphQL(types:Type[*]):__Type[*]
{
  // PASS 1
  let res = $types->map(c|
    pair(
      $c.name->toOne(),
      ^__Type(
        kind = __TypeKind.OBJECT,
        name = $c.name
      )
    )
  )->concatenate(
    [
      pair('String',^__Type(kind = __TypeKind.SCALAR,name = 'String')),
      pair('Float',^__Type(kind = __TypeKind.SCALAR,name = 'Float')),
      pair('Integer',^__Type(kind = __TypeKind.SCALAR,name = 'Int')),
      pair('Boolean',^__Type(kind = __TypeKind.SCALAR,name = 'Boolean')),
      pair('Date',^__Type(kind = __TypeKind.SCALAR,name = 'Date')),
      pair('DateTime',^__Type(kind = __TypeKind.SCALAR,name = 'DateTime')),
      pair('Decimal',^__Type(kind = __TypeKind.SCALAR,name = 'BigDecimal')),
      pair('StrictDate',^__Type(kind = __TypeKind.SCALAR,name = 'StrictDate'))
    ]
  )->newMap();

  // PASS 2
  $types->map(c|
    let type = $res->get($c.name->toOne())->toOne();
    $c->match(
      [
        c:Class<Any>[1] |
            let fields = $c->allProperties()->map(p|
                                      ^__Field
                                      (
                                        name = $p.name->toOne(),
                                        isDeprecated = false,
                                        type = buildType($p, $res),
                                        args = if ($p->instanceOf(QualifiedProperty),
                                                    |$p->functionType().parameters->evaluateAndDeactivate()->tail()->map(p|
                                                                    ^__InputValue
                                                                    (
                                                                      name=$p.name,
                                                                      type=$res->get($p.genericType.rawType.name->toOne())->toOne())
                                                                    ),
                                                    |[]
                                               )
                                      );
                                   );
            $type->mutateAdd('fields', $fields);
      ]
    );
    $type;
  );

  $res->values()->meta::pure::functions::collection::sortBy(t|$t.name->toOne());
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::buildType(func:Function<Any>[1], map:Map<String,__Type>[1]):__Type[1]
{
  let mul = $func->functionReturnMultiplicity();
  let type = $map->get($func->functionReturnType().rawType.name->toOne())->toOne();
  if ($mul == ZeroOne,
    | $type,
    | if ($mul == PureOne,
      | wrap($type, __TypeKind.NON_NULL),
      | wrap($type, __TypeKind.LIST)
    )
  );
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::wrap(type:__Type[1], kind:__TypeKind[1]):__Type[1]
{
  ^__Type
  (
    kind = $kind,
    ofType = $type
  )
}
