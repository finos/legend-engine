###Pure
import meta::external::query::graphQL::metamodel::introspection::*;
import meta::external::query::graphQL::transformation::introspection::*;
import meta::external::query::graphQL::binding::toPure::*;
import meta::external::query::graphQL::binding::toPure::introspection::*;
import meta::external::shared::format::*;
import meta::external::shared::format::binding::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::format::binding::toPure::*;
import meta::external::shared::format::transformation::toPure::*;
import meta::pure::model::unit::*;

Class meta::external::query::graphQL::binding::toPure::introspection::GraphQLIntrospectionContainer
{
  schema : meta::external::query::graphQL::metamodel::introspection::__Schema[1];
}

function meta::external::query::graphQL::binding::toPure::introspection::IntrospectionToPure(schemaSet:SchemaSet[1], config:SchemaToModelConfiguration[1]): PackageableElement[*]
{
   let generatedElements = buildPureTypesFromGraphQLSchema($schemaSet.schemas->at(0).detail->cast(@GraphQLIntrospectionContainer).schema, $config.targetPackage)->cast(@PackageableElement);
}

function meta::external::query::graphQL::binding::toPure::introspection::buildPureTypesFromGraphQLSchema(schema:__Schema[1], package:String[1]):Type[*]
{
  let pack = meta::external::query::graphQL::binding::toPure::buildTransientPackageFromString($package);

  let simpleTypes = meta::external::query::graphQL::binding::graphQLScalarTypesToPurePrimitives()->newMap();

  let dispatch = [
    pair(__TypeKind.OBJECT, t:__Type[1]| let no = newClass($t.name->toOne());
                                         let cp = ^$no(package = $pack);
                                         pair($t.name->toOne(), $cp);),
    pair(__TypeKind.INTERFACE, t:__Type[1]| let no = newClass($t.name->toOne());
                                         let cp = ^$no(package = $pack);
                                         pair($t.name->toOne(), $cp);),
    pair(__TypeKind.INPUT_OBJECT, t:__Type[1]| let no = newClass($t.name->toOne());
                                         let cp = ^$no(package = $pack);
                                         pair($t.name->toOne(), $cp);),
    pair(__TypeKind.UNION, t:__Type[1]| let no = newClass($t.name->toOne());
                                         let cp = ^$no(package = $pack);
                                         pair($t.name->toOne(), $cp);),
    pair(__TypeKind.ENUM, t:__Type[1]| let no = newEnumeration($t.name->toOne(), $t.enumValues.name);
                                       let cp = ^$no(package = $pack);
                                       pair($t.name->toOne(), $cp);),
    pair(__TypeKind.SCALAR, t:__Type[1]| let res = $simpleTypes->get($t.name->toOne());
                                         pair($t.name->toOne(), if($res->isEmpty(),|String, |$res->toOne()));)
  ]->newMap();

  // Pass 1
  let typesByName = $schema.types->map(t|
                                      let res = $dispatch->get($t.kind);
                                      if ($res->isEmpty(),
                                        | fail('The kind \''+$t.kind.name+'\' is not supported yet!');[];,
                                        | let r = $res->toOne()->eval($t);
                                          let s = $r.second;
                                          let n = if ($s->instanceOf(Class),|^$s(generalizations=[]),|$s);
                                          pair($r.first, $n);
                                      );
                                )->newMap();

  // Pass 2
  $schema.types->map(t|
                        if ($t.kind == __TypeKind.OBJECT,
                            | let ownerType = $typesByName->get($t.name->toOne())->toOne();
                              let ownerGType = ^GenericType(rawType=$ownerType);
                              let properties = $t.fields->map(f | let res =  $f.type->build($typesByName);
                                                                  meta::pure::functions::meta::newProperty(
                                                                        $f.name,
                                                                        $ownerGType,
                                                                        ^GenericType(rawType=$res.first),
                                                                        $res.second
                                                                  );
                                                              );
                              $ownerType->mutateAdd('properties', $properties);,
                            | if ($t.kind == __TypeKind.UNION,
                              | let ownerType = $typesByName->get($t.name->toOne())->toOne();
                                let ownerGType = ^GenericType(rawType=$ownerType);
                                $t.possibleTypes->map(sub |
                                  let subPure = $typesByName->get($sub.name->toOne())->toOne();
                                  $subPure->mutateAdd('generalizations', ^Generalization(general=$ownerGType, specific=$subPure));
                                );,
                              | []
                            );
                        )
                  );
  $typesByName->values()->filter(t|!$t->instanceOf(PrimitiveType));
}

function <<access.private>> meta::external::query::graphQL::binding::toPure::introspection::build(type:__Type[1], typesByName:Map<String,Type>[1]):Pair<Type, Multiplicity>[1]
{
  let mul = if ($type.kind == __TypeKind.NON_NULL,
              | PureOne,
              | if ($type.kind == __TypeKind.LIST,
                | ZeroMany,
                | ZeroOne
              )
            );
   pair(findType($type, $typesByName), $mul);
}

function <<access.private>> meta::external::query::graphQL::binding::toPure::introspection::findType(type:__Type[1], typesByName:Map<String,Type>[1]):Type[1]
{
  if ($type.kind == __TypeKind.NON_NULL,
      | findType($type.ofType->toOne(), $typesByName),
      | if ($type.kind == __TypeKind.LIST,
        | findType($type.ofType->toOne(), $typesByName),
        | $typesByName->get($type.name->toOne())->toOne()
      )
    );
}
