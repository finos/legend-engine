import meta::external::query::graphQL::introspection::model::*;

Class meta::external::query::graphQL::introspection::BaseGraphQLType
{
  __schema : __Schema[1];
}

function meta::external::query::graphQL::introspection::graphQLIntrospectionQuery(cl:Class<Any>[1], query:meta::external::query::graphQL::metamodel::Document[1]):String[1]
{
  let fullTypeGraph = meta::external::query::graphQL::binding::fromPure::introspection::buildGraphQLSchemaFromPureTypes($cl);
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($query, meta::external::query::graphQL::introspection::BaseGraphQLType);
  $fullTypeGraph->meta::json::toJSON($graphFetch, meta::json::config(false, false, false, false, true));
}


###Pure
import meta::external::query::graphQL::introspection::model::*;
import meta::external::query::graphQL::introspection::*;
import meta::external::query::graphQL::binding::toPure::*;
import meta::external::query::graphQL::binding::toPure::introspection::*;
import meta::external::shared::format::*;
import meta::external::shared::format::binding::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::format::binding::toPure::*;
import meta::external::shared::format::transformation::toPure::*;
import meta::pure::model::unit::*;

function meta::external::query::graphQL::contract::graphQLIntrospectionContract(): ExternalFormatContract<GraphQLIntrospectionContainer>[1]
{
   ^ExternalFormatContract<GraphQLIntrospectionContainer>
   (
      id                               = 'GraphQL_Introspection',
      contentTypes                     = 'application/json',

      externalFormatMetamodel          = GraphQLIntrospectionContainer,

      externalFormatToPureDescriptor   = introspectionToPureDescriptor()
   )
}

function meta::external::query::graphQL::binding::toPure::introspectionToPureDescriptor(): ExternalFormatToPureDescriptor<SchemaToModelConfiguration>[1]
{
  ^ExternalFormatToPureDescriptor<SchemaToModelConfiguration>
  (
    configuration        = SchemaToModelConfiguration,
    generator            = IntrospectionToPure_SchemaSet_1__SchemaToModelConfiguration_1__PackageableElement_MANY_,
    defaultConfig        = defaultConfig()
  )
}

function <<access.private>> meta::external::query::graphQL::binding::toPure::defaultConfig(): SchemaToModelConfiguration[1]
{
  ^SchemaToModelConfiguration(format='GraphQL_Introspection', targetPackage='target::package');
}

Class meta::external::query::graphQL::binding::toPure::introspection::GraphQLIntrospectionContainer extends meta::external::shared::format::metamodel::SchemaDetail
{
  schema : meta::external::query::graphQL::introspection::model::__Schema[1];
}

function meta::external::query::graphQL::binding::toPure::introspection::IntrospectionToPure(schemaSet:SchemaSet[1], config:SchemaToModelConfiguration[1]): PackageableElement[*]
{  
   let generatedElements = buildPureTypesFromGraphQLSchema($schemaSet.schemas->at(0).detail->cast(@GraphQLIntrospectionContainer).schema, $config.targetPackage)->cast(@PackageableElement);
}

function meta::external::query::graphQL::binding::toPure::introspection::buildPureTypesFromGraphQLSchema(schema:__Schema[1], package:String[1]):Type[*]
{  
  let pack = meta::external::query::graphQL::binding::toPure::buildTransientPackageFromString($package);

  let simpleTypes = meta::external::query::graphQL::binding::toPure::primitiveTypeMapping()->newMap();

  let dispatch = [
    pair(__TypeKind.OBJECT, t:__Type[1]| let no = newClass($t.name->toOne());
                                         let cp = ^$no(package = $pack);
                                         pair($t.name->toOne(), $cp);),
    pair(__TypeKind.INTERFACE, t:__Type[1]| let no = newClass($t.name->toOne());
                                         let cp = ^$no(package = $pack);
                                         pair($t.name->toOne(), $cp);),
    pair(__TypeKind.INPUT_OBJECT, t:__Type[1]| let no = newClass($t.name->toOne());
                                         let cp = ^$no(package = $pack);
                                         pair($t.name->toOne(), $cp);),
    pair(__TypeKind.UNION, t:__Type[1]| let no = newClass($t.name->toOne());
                                         let cp = ^$no(package = $pack);
                                         pair($t.name->toOne(), $cp);),
    pair(__TypeKind.ENUM, t:__Type[1]| let no = newEnumeration($t.name->toOne(), $t.enumValues.name);
                                       let cp = ^$no(package = $pack);
                                       pair($t.name->toOne(), $cp);),
    pair(__TypeKind.SCALAR, t:__Type[1]| let res = $simpleTypes->get($t.name->toOne());
                                         pair($t.name->toOne(), if($res->isEmpty(),|String, |$res->toOne()));)
  ]->newMap();

  // Pass 1
  let typesByName = $schema.types->map(t|
                                      let res = $dispatch->get($t.kind);
                                      if ($res->isEmpty(),
                                        | fail('The kind \''+$t.kind.name+'\' is not supported yet!');[];,
                                        | let r = $res->toOne()->eval($t);
                                          let s = $r.second;
                                          let n = if ($s->instanceOf(Class),|^$s(generalizations=[]),|$s);
                                          pair($r.first, $n);
                                      );
                                )->newMap();

  // Pass 2
  $schema.types->map(t|
                        if ($t.kind == __TypeKind.OBJECT,
                            | let ownerType = $typesByName->get($t.name->toOne())->toOne();
                              let ownerGType = ^GenericType(rawType=$ownerType);
                              let properties = $t.fields->map(f | let res =  $f.type->build($typesByName);
                                                                  meta::pure::functions::meta::newProperty(
                                                                        $f.name,
                                                                        $ownerGType,
                                                                        ^GenericType(rawType=$res.first),
                                                                        $res.second
                                                                  );
                                                              );
                              $ownerType->mutateAdd('properties', $properties);,
                            | if ($t.kind == __TypeKind.UNION,
                              | let ownerType = $typesByName->get($t.name->toOne())->toOne();
                                let ownerGType = ^GenericType(rawType=$ownerType);
                                $t.possibleTypes->map(sub |
                                  let subPure = $typesByName->get($sub.name->toOne())->toOne();
                                  $subPure->mutateAdd('generalizations', ^Generalization(general=$ownerGType, specific=$subPure));
                                );,
                              | []
                            );
                        )
                  );
  $typesByName->values()->filter(t|!$t->instanceOf(PrimitiveType));
}

function <<access.private>> meta::external::query::graphQL::binding::toPure::introspection::build(type:__Type[1], typesByName:Map<String,Type>[1]):Pair<Type, Multiplicity>[1] 
{
  let mul = if ($type.kind == __TypeKind.NON_NULL,
              | PureOne,
              | if ($type.kind == __TypeKind.LIST,
                | ZeroMany,
                | ZeroOne
              )
            );
   pair(findType($type, $typesByName), $mul);
}

function <<access.private>> meta::external::query::graphQL::binding::toPure::introspection::findType(type:__Type[1], typesByName:Map<String,Type>[1]):Type[1] 
{
  if ($type.kind == __TypeKind.NON_NULL,
      | findType($type.ofType->toOne(), $typesByName),
      | if ($type.kind == __TypeKind.LIST,
        | findType($type.ofType->toOne(), $typesByName),
        | $typesByName->get($type.name->toOne())->toOne()
      )
    );           
}

###Pure
import meta::external::query::graphQL::introspection::model::*;
import meta::external::query::graphQL::introspection::*;
import meta::external::query::graphQL::binding::fromPure::introspection::*;

function meta::external::query::graphQL::binding::fromPure::introspection::scanTypes(t:Type[1], processed:Type[*]):Type[*]
{
   if (!$processed->contains($t),
       |$t->concatenate(if($t->instanceOf(Class),
                         |$t->cast(@Class<Any>)->allProperties().genericType.rawType->distinct()->concatenate($t->cast(@Class<Any>)->meta::pure::functions::meta::findAllSpecializations())->filter(t|($t->instanceOf(Class) || $t->instanceOf(meta::pure::metamodel::type::Enumeration)) && $t != Any)->map(c|$c->meta::external::query::graphQL::binding::fromPure::introspection::scanTypes($processed->concatenate($t)))->distinct(),
                         |[]
                       )),
       |[]
   );
}

function meta::external::query::graphQL::binding::fromPure::introspection::buildGraphQLSchemaFromPureTypes(cl:Class<Any>[1]):BaseGraphQLType[1]
{  
  let classes = $cl->scanTypes([]);
  let res = transformPureToGraphQL($classes);

  ^BaseGraphQLType(
    __schema = ^__Schema(    
                  queryType = $res->filter(c|$c.name == $cl.name)->toOne(),
                  types = $res
                )
  );
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::transformPureToGraphQL(types:Type[*]):__Type[*]
{
  // PASS 1
  let res = $types->map(c|
    pair(
      $c.name->toOne(),
      ^__Type(
        kind = __TypeKind.OBJECT,
        name = $c.name
      )
    )
  )->concatenate(
    pair(
      'String',
      ^__Type(
        kind = __TypeKind.SCALAR,
        name = 'String'
      )
    )
  )->newMap();

  // PASS 2
  $types->map(c|
    let type = $res->get($c.name->toOne())->toOne();
    $c->match(
      [
        c:Class<Any>[1] |
            let fields = $c->allProperties()->map(p|
                                      ^__Field
                                      (
                                        name = $p.name->toOne(),
                                        isDeprecated = false,
                                        type = buildType($p, $res),
                                        args = if ($p->instanceOf(QualifiedProperty),
                                                    |$p->functionType().parameters->evaluateAndDeactivate()->tail()->map(p|
                                                                    ^__InputValue
                                                                    (
                                                                      name=$p.name,
                                                                      type=$res->get($p.genericType.rawType.name->toOne())->toOne())
                                                                    ),
                                                    |[]
                                               )
                                      );
                                   );
            $type->mutateAdd('fields', $fields);
      ]
    );
    $type;
  );

  $res->values()->meta::pure::functions::collection::sortBy(t|$t.name->toOne());
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::buildType(func:Function<Any>[1], map:Map<String,__Type>[1]):__Type[1]
{
  let mul = $func->functionReturnMultiplicity();
  let type = $map->get($func->functionReturnType().rawType.name->toOne())->toOne();
  if ($mul == ZeroOne,
    | $type,
    | if ($mul == PureOne,
      | wrap($type, __TypeKind.NON_NULL),
      | wrap($type, __TypeKind.LIST)
    )
  );
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::introspection::wrap(type:__Type[1], kind:__TypeKind[1]):__Type[1]
{
  ^__Type
  (
    kind = $kind,
    ofType = $type
  )
}
