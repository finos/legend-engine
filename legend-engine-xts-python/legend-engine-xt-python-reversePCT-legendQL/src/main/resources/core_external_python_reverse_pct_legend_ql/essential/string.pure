// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::reversePCT::framework::*;
import meta::external::python::reversePCT::legendQL::*;

function meta::external::python::reversePCT::legendQL::pythonLegendQLReversesEssentialString(): ReversesForSource[*]
{
  [
    // Boolean ----------------------------------------------------------
    [ // contains
      meta::pure::functions::string::tests::contains::testTrueContains_Function_1__Boolean_1_->testRev(
        [
          rev('|\'the quick brown fox jumps over the lazy dog\'->meta::pure::functions::string::contains(\'lazy dog\')', 'c("the quick brown fox jumps over the lazy dog").contains("lazy dog")'),
          rev('|\'the quick brown fox jumps over the lazy dog\'->meta::pure::functions::string::contains(\'brown fox\')', 'c("the quick brown fox jumps over the lazy dog").contains("brown fox")')
        ]
      ),
      meta::pure::functions::string::tests::contains::testFalseContains_Function_1__Boolean_1_->testRev(
        rev('|\'the quick brown fox jumps over the lazy dog\'->meta::pure::functions::string::contains(\'lazy fox\')', 'c("the quick brown fox jumps over the lazy dog").contains("lazy fox")')
      )
    ]->combine(),
    [ // endsWith
      meta::pure::functions::string::tests::endswith::testTrueEndsWith_Function_1__Boolean_1_->testRev(
        [
          rev('|\'the quick brown fox jumps over the lazy dog\'->meta::pure::functions::string::endsWith(\'dog\')', 'c("the quick brown fox jumps over the lazy dog").endswith("dog")'),
          rev('|\'the quick brown fox jumps over the lazy dog\'->meta::pure::functions::string::endsWith(\'lazy dog\')', 'c("the quick brown fox jumps over the lazy dog").endswith("lazy dog")')
        ]
      ),
      meta::pure::functions::string::tests::endswith::testFalseEndsWith_Function_1__Boolean_1_->testRev(
        rev('|\'the quick brown fox jumps over the lazy dog\'->meta::pure::functions::string::endsWith(\'brown fox\')', 'c("the quick brown fox jumps over the lazy dog").endswith("brown fox")')
      )
    ]->combine(),
    [ // startsWith
      meta::pure::functions::string::tests::startswith::testTrueStartsWith_Function_1__Boolean_1_->testRev(
        [
          rev('|\'the quick brown fox jumps over the lazy dog\'->meta::pure::functions::string::startsWith(\'the\')', 'c("the quick brown fox jumps over the lazy dog").startswith("the")'),
          rev('|\'the quick brown fox jumps over the lazy dog\'->meta::pure::functions::string::startsWith(\'the quick brown fox\')', 'c("the quick brown fox jumps over the lazy dog").startswith("the quick brown fox")')
        ]
      ),
      meta::pure::functions::string::tests::startswith::testFalseStartsWith_Function_1__Boolean_1_->testRev(
        rev('|\'the quick brown fox jumps over the lazy dog\'->meta::pure::functions::string::startsWith(\'the lazy dog\')', 'c("the quick brown fox jumps over the lazy dog").startswith("the lazy dog")')
      )
    ]->combine(),
    // ------------------------------------------------------------------

    // Index ------------------------------------------------------------
    [ // indexOf
      meta::pure::functions::string::tests::indexOf::testSimple_Function_1__Boolean_1_->testRev(
        [
          rev('|$string->meta::pure::functions::string::indexOf(\'quick\')', 'c("the quick brown fox jumps over the lazy dog").index_of("quick")'),
          rev('|$string->meta::pure::functions::string::indexOf(\'fox\')', 'c("the quick brown fox jumps over the lazy dog").index("fox")'),
          rev('|$string->meta::pure::functions::string::indexOf(\'happy\')', 'c("the quick brown fox jumps over the lazy dog").index_of("happy")')
        ]
      )
    ]->combine(),
    // ------------------------------------------------------------------

    // Length ------------------------------------------------------------
    [ // length
      meta::pure::functions::string::tests::length::testLength_Function_1__Boolean_1_->testRev(
        rev('|\'the quick brown fox jumps over the lazy dog\'->meta::pure::functions::string::length()', 'c("the quick brown fox jumps over the lazy dog").length()')
      ),
      meta::pure::functions::string::tests::length::testEmptyLength_Function_1__Boolean_1_->testRev(
        rev('|\'\'->meta::pure::functions::string::length()', 'c("").len()')
      )
    ]->combine(),
    // ------------------------------------------------------------------

    // Parse ------------------------------------------------------------
    [ // parseDecimal
      meta::pure::functions::string::tests::parseDecimal::testParseDecimal_Function_1__Boolean_1_->testRev(
        [
          noRev('|\'3.14159d\'->meta::pure::functions::string::parseDecimal()'),
          noRev('|\'3.14159\'->meta::pure::functions::string::parseDecimal()'),
          noRev('|\'-3.14159d\'->meta::pure::functions::string::parseDecimal()'),
          noRev('|\'+0000003.1415900000\'->meta::pure::functions::string::parseDecimal()'),
          noRev('|\'-0000003.1415900000\'->meta::pure::functions::string::parseDecimal()')
        ]
      ),
      meta::pure::functions::string::tests::parseDecimal::testParseZero_Function_1__Boolean_1_->testRev(
        [
          noRev('|\'0.0\'->meta::pure::functions::string::parseDecimal()'),
          noRev('|\'-000.000\'->meta::pure::functions::string::parseDecimal()')
        ]
      ),
      meta::pure::functions::string::tests::parseDecimal::testParseDecimalWithPrecisionScale_Function_1__Boolean_1_->testRev(
        [
          noRev('|\'123.126\'->meta::pure::functions::string::parseDecimal(5, 2)'),
          noRev('|\'123.123\'->meta::pure::functions::string::parseDecimal(7, 3)'),
          noRev('|\'-3.14159\'->meta::pure::functions::string::parseDecimal(5, 2)'),
          noRev('|\'123.123\'->meta::pure::functions::string::parseDecimal(10, 5)'),
          noRev('|\'+0000003.1415900000\'->meta::pure::functions::string::parseDecimal(38, 10)'),
          noRev('|\'-0000003.1415900000\'->meta::pure::functions::string::parseDecimal(38, 10)')
        ]
      )
    ]->combine(),
    [ // parseFloat
      meta::pure::functions::string::tests::parseFloat::testParseFloat_Function_1__Boolean_1_->testRev(
        [
          rev('|\'3.14159\'->meta::pure::functions::string::parseFloat()', 'c("3.14159").parse_float()'),
          rev('|\'+0000003.1415900000\'->meta::pure::functions::string::parseFloat()', 'c("+0000003.1415900000").parse_float()'),
          rev('|\'-0000003.1415900000\'->meta::pure::functions::string::parseFloat()', 'c("-0000003.1415900000").parse_float()')
        ]
      ),
      meta::pure::functions::string::tests::parseFloat::testParseZero_Function_1__Boolean_1_->testRev(
        [
          rev('|\'0.0\'->meta::pure::functions::string::parseFloat()', 'c("0.0").parse_float()'),
          rev('|\'-000.000\'->meta::pure::functions::string::parseFloat()', 'c("-000.000").parse_float()')
        ]
      )
    ]->combine(),
    // parseInteger
    meta::pure::functions::string::tests::parseInteger::testParseInteger_Function_1__Boolean_1_->testRev(
      [
        rev('|\'17\'->meta::pure::functions::string::parseInteger()', 'c("17").parse_integer()'),
        rev('|\'+00000017\'->meta::pure::functions::string::parseInteger()', 'c("+00000017").parse_integer()'),
        rev('|\'-17\'->meta::pure::functions::string::parseInteger()', 'c("-17").parse_int()'),
        rev('|\'9999999999999992\'->meta::pure::functions::string::parseInteger()', 'c("9999999999999992").parse_int()')
      ]
    ),
    // ------------------------------------------------------------------

    // Transformation ---------------------------------------------------
    // toLower
    meta::pure::functions::string::tests::tolower::testToLower_Function_1__Boolean_1_->testRev(
      [
        rev('|\'TesT\'->meta::pure::functions::string::toLower()', 'c("TesT").lower()'),
        rev('|\'test\'->meta::pure::functions::string::toLower()', 'c("test").lower()')
      ]
    ),
    // toUpper
    meta::pure::functions::string::tests::toupper::testToUpper_Function_1__Boolean_1_->testRev(
      [
        rev('|\'TesT\'->meta::pure::functions::string::toUpper()', 'c("TesT").upper()'),
        rev('|\'TEST\'->meta::pure::functions::string::toUpper()', 'c("TEST").upper()')
      ]
    ),
    // ------------------------------------------------------------------

    // Trim -------------------------------------------------------------
    // ltrim
    meta::pure::functions::string::tests::trim::testLTrim_Function_1__Boolean_1_->testRev(
      [
        rev('|\' A Simple Text To Trim    \'->meta::pure::functions::string::ltrim()', 'c(" A Simple Text To Trim    ").lstrip()'),
        rev('|\' A Simple Text To Trim\'->meta::pure::functions::string::ltrim()', 'c(" A Simple Text To Trim").lstrip()'),
        rev('|\'A Simple Text To Trim \'->meta::pure::functions::string::ltrim()', 'c("A Simple Text To Trim ").lstrip()')
      ]
    ),
    // trim
    meta::pure::functions::string::tests::trim::testTrim_Function_1__Boolean_1_->testRev(
      [
        rev('|\' A Simple Text To Trim    \'->meta::pure::functions::string::trim()', 'c(" A Simple Text To Trim    ").strip()'),
        rev('|\' A Simple Text To Trim\'->meta::pure::functions::string::trim()', 'c(" A Simple Text To Trim").strip()')
      ]
    ),
    // rtrim
    meta::pure::functions::string::tests::trim::testRTrim_Function_1__Boolean_1_->testRev(
      [
        rev('|\' A Simple Text To Trim    \'->meta::pure::functions::string::rtrim()', 'c(" A Simple Text To Trim    ").rstrip()'),
        rev('|\'A Simple Text To Trim \'->meta::pure::functions::string::rtrim()', 'c("A Simple Text To Trim ").rstrip()'),
        rev('|\' A Simple Text To Trim\'->meta::pure::functions::string::rtrim()', 'c(" A Simple Text To Trim").rstrip()')
      ]
    )
  ]
}