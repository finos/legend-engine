// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::json::executionPlan::test::*;
import meta::pure::dataQuality::*;
import meta::external::format::json::metamodel::*;

import meta::external::shared::format::binding::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::tests::*;
import meta::external::format::json::executionPlan::platformBinding::legendJava::test::*;
import meta::external::shared::format::functions::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::functions::*;

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::model::unit::*;
import meta::pure::runtime::*;

function <<access.private>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::buildPlanWithJava(query:FunctionDefinition<Any>[1]): ExecutionPlan[1]
{
   let plan     = meta::external::shared::format::executionPlan::tests::buildPlan($query, getExtensions());
   $plan->generatePlatformCode(meta::pure::executionPlan::platformBinding::legendJava::legendJavaPlatformBindingId(), ^meta::pure::executionPlan::platformBinding::legendJava::LegendJavaPlatformBindingConfig(), getExtensions());
}

function <<meta::pure::profiles::test.Test>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::planGenerationForInternalizeWithSerialize(): Boolean[1]
{
   let binding = getTestBinding();
   let tree = #{meta::external::format::json::executionPlan::test::Person {lastName}}#;

   let plan = meta::external::format::json::executionPlan::platformBinding::legendJava::test::buildPlanWithJava({| meta::external::format::json::executionPlan::test::Person->internalize($binding, 'stringConstant')->serialize($tree)});

   let planString = $plan->planToString(false, getExtensions());
   let expectedPlan = 'PureExp\n' +
                      '(\n' +
                      '  type = String\n' +
                      '  expression =  -> serialize(#{meta::external::format::json::executionPlan::test::Person {lastName}}#)\n' +
                      '  (\n' +
                      '    ExternalFormat_Internalize\n' +
                      '    (\n' +
                      '      type = Class[impls=]\n' +
                      '      resultSizeRange = *\n' +
                      '      binding = meta::external::format::json::executionPlan::test::TestBinding[application/json]\n' +
                      '      enableConstraints = true\n' +
                      '      checked = false\n' +
                      '\n' +
                      '      (\n' +
                      '        Sequence\n' +
                      '        (\n' +
                      '          type = String\n' +
                      '          resultSizeRange = 1\n' +
                      '          (\n' +
                      '            Allocation\n' +
                      '            (\n' +
                      '              type = Void\n' +
                      '              name = internalizeVar$\n' +
                      '              value = \n' +
                      '                (\n' +
                      '                  Constant\n' +
                      '                  (\n' +
                      '                    type = String\n' +
                      '                    values=[stringConstant]\n' +
                      '                  )\n' +
                      '                )\n' +
                      '            )\n' +
                      '            VariableResolution\n' +
                      '            (\n' +
                      '              type = String\n' +
                      '              resultSizeRange = 1\n' +
                      '              varName = internalizeVar$\n' +
                      '\n' +
                      '            )\n' +
                      '          )\n' +
                      '        )\n' +
                      '      )\n' +
                      '      implementation\n' +
                      '      (\n' +
                      '        calls = _pure.plan.root.n1.Execute\n' +
                      '      )\n' +
                      '    )\n' +
                      '  )\n' +
                      '  implementation\n' +
                      '  (\n' +
                      '    calls = _pure.plan.root.Serialize\n' +
                      '  )\n' +
                      ')\n';
   assertEquals($expectedPlan, $planString);
}

function <<meta::pure::profiles::test.Test>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::planGenerationForInternalizeWithCheckSerialize(): Boolean[1]
{
   let binding = getTestBinding();
   let tree = #{meta::external::format::json::executionPlan::test::Person {lastName}}#;

   let plan = meta::external::format::json::executionPlan::platformBinding::legendJava::test::buildPlanWithJava({| meta::external::format::json::executionPlan::test::Person->internalize($binding, 'stringConstant')->checked()->serialize($tree)});

   let planString = $plan->planToString(false, getExtensions());
   let expectedPlan = 'PureExp\n' +
                      '(\n' +
                      '  type = String\n' +
                      '  expression =  -> serialize(#{meta::external::format::json::executionPlan::test::Person {lastName}}#)\n' +
                      '  (\n' +
                      '    ExternalFormat_Internalize\n' +
                      '    (\n' +
                      '      type = Class[impls=]\n' +
                      '      resultSizeRange = *\n' +
                      '      binding = meta::external::format::json::executionPlan::test::TestBinding[application/json]\n' +
                      '      enableConstraints = true\n' +
                      '      checked = true\n' +
                      '\n' +
                      '      (\n' +
                      '        Sequence\n' +
                      '        (\n' +
                      '          type = String\n' +
                      '          resultSizeRange = 1\n' +
                      '          (\n' +
                      '            Allocation\n' +
                      '            (\n' +
                      '              type = Void\n' +
                      '              name = internalizeVar$\n' +
                      '              value = \n' +
                      '                (\n' +
                      '                  Constant\n' +
                      '                  (\n' +
                      '                    type = String\n' +
                      '                    values=[stringConstant]\n' +
                      '                  )\n' +
                      '                )\n' +
                      '            )\n' +
                      '            VariableResolution\n' +
                      '            (\n' +
                      '              type = String\n' +
                      '              resultSizeRange = 1\n' +
                      '              varName = internalizeVar$\n' +
                      '\n' +
                      '            )\n' +
                      '          )\n' +
                      '        )\n' +
                      '      )\n' +
                      '      implementation\n' +
                      '      (\n' +
                      '        calls = _pure.plan.root.n1.Execute\n' +
                      '      )\n' +
                      '    )\n' +
                      '  )\n' +
                      '  implementation\n' +
                      '  (\n' +
                      '    calls = _pure.plan.root.Serialize\n' +
                      '  )\n' +
                      ')\n';
   assertEquals($expectedPlan, $planString);
}

function <<meta::pure::profiles::test.Test>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::planGenerationForInternalizeWithStringConstant(): Boolean[1]
{
   let binding = getTestBinding();

   let plan = meta::external::format::json::executionPlan::platformBinding::legendJava::test::buildPlanWithJava({| meta::external::format::json::executionPlan::test::Person->internalize($binding, 'stringConstant')});

   let planString = $plan->planToString(false, getExtensions());
   let expectedPlan = 'ExternalFormat_Internalize\n' +
                      '(\n' +
                      '  type = Class[impls=]\n' +
                      '  resultSizeRange = *\n' +
                      '  binding = meta::external::format::json::executionPlan::test::TestBinding[application/json]\n' +
                      '  enableConstraints = true\n' +
                      '  checked = false\n' +
                      '\n' +
                      '  (\n' +
                      '    Sequence\n' +
                      '    (\n' +
                      '      type = String\n' +
                      '      resultSizeRange = 1\n' +
                      '      (\n' +
                      '        Allocation\n' +
                      '        (\n' +
                      '          type = Void\n' +
                      '          name = internalizeVar$\n' +
                      '          value = \n' +
                      '            (\n' +
                      '              Constant\n' +
                      '              (\n' +
                      '                type = String\n' +
                      '                values=[stringConstant]\n' +
                      '              )\n' +
                      '            )\n' +
                      '        )\n' +
                      '        VariableResolution\n' +
                      '        (\n' +
                      '          type = String\n' +
                      '          resultSizeRange = 1\n' +
                      '          varName = internalizeVar$\n' +
                      '\n' +
                      '        )\n' +
                      '      )\n' +
                      '    )\n' +
                      '  )\n' +
                      '  implementation\n' +
                      '  (\n' +
                      '    calls = _pure.plan.root.Execute\n' +
                      '  )\n' +
                      ')\n';

   assertEquals($expectedPlan, $planString);

   let impl = $plan.globalImplementationSupport->toOne()->cast(@JavaPlatformImplementation);

   let allConstraintsSource = $impl.classes->filter(c| $c.name == 'meta_external_format_json_executionPlan_test_Person_Impl').source->toOne();
   let expectedAllConstraintsMethod = '    public List<IDefect> allConstraints(GraphContext context)\n' +
                '    {\n' +
                '        List<IDefect> result = new ArrayList<IDefect>();\n' +
                '        if (!context.visited.contains(this))\n' +
                '        {\n' +
                '            context.visited.add(this);\n' +
                '            this.constraint_0().ifPresent(result::add);\n' +
                '        }\n' +
                '        return result;\n' +
                '    }';
   assert($allConstraintsSource->contains($expectedAllConstraintsMethod));

   let readerSource = $impl.classes->filter(c| $c.name == 'Execute').source->toOne();
   let expectedRaderMethod = '    public IStoreStreamReader streamReader(InputStream sourceStream)\n' +
                '    {\n' +
                '        return new _pure.plan.root.JsonDataReader_meta_external_format_json_executionPlan_test_Person(sourceStream);\n' +
                '    }';
   assert($readerSource->contains($expectedRaderMethod));

}

function <<meta::pure::profiles::test.Test>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::planGenerationForInternalizeWithCheck(): Boolean[1]
{
   let binding = getTestBinding();

   let plan = meta::external::format::json::executionPlan::platformBinding::legendJava::test::buildPlanWithJava({data:Byte[*]| meta::external::format::json::executionPlan::test::Person->internalize($binding, $data)->checked()});

   let planString = $plan->planToString(false, getExtensions());
   let expectedPlan = 'Sequence\n' +
        '(\n' +
        '  type = Class[impls=]\n' +
        '  resultSizeRange = *\n' +
        '  (\n' +
        '    FunctionParametersValidationNode\n' +
        '    (\n' +
        '      functionParameters = [data:Byte[*]]\n' +
        '    )\n' +
        '    ExternalFormat_Internalize\n' +
        '    (\n' +
        '      type = Class[impls=]\n' +
        '      resultSizeRange = *\n' +
        '      binding = meta::external::format::json::executionPlan::test::TestBinding[application/json]\n' +
        '      enableConstraints = true\n' +
        '      checked = true\n' +
        '\n' +
        '      (\n' +
        '        VariableResolution\n' +
        '        (\n' +
        '          type = Byte\n' +
        '          varName = data\n' +
        '\n' +
        '        )\n' +
        '      )\n' +
        '      implementation\n' +
        '      (\n' +
        '        calls = _pure.plan.root.n2.Execute\n' +
        '      )\n' +
        '    )\n' +
        '  )\n' +
        ')\n';

   assertEquals($expectedPlan, $planString);

   let impl = $plan.globalImplementationSupport->toOne()->cast(@JavaPlatformImplementation);
   let source = $impl.classes->filter(c| $c.name == 'meta_external_format_json_executionPlan_test_Person_Impl').source->toOne();
   let expectedMethod = '    public List<IDefect> allConstraints(GraphContext context)\n' +
                '    {\n' +
                '        List<IDefect> result = new ArrayList<IDefect>();\n' +
                '        if (!context.visited.contains(this))\n' +
                '        {\n' +
                '            context.visited.add(this);\n' +
                '            this.constraint_0().ifPresent(result::add);\n' +
                '        }\n' +
                '        return result;\n' +
                '    }';
   assert($source->contains($expectedMethod));
}

function <<meta::pure::profiles::test.Test>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::planGenerationForInternalizeWithGraphFetch(): Boolean[1]
{
   let binding = getTestBinding();
   let tree = #{meta::external::format::json::executionPlan::test::Person {lastName, firm {legalName}}}#;

   let plan = meta::external::format::json::executionPlan::platformBinding::legendJava::test::buildPlanWithJava({data:Byte[*]| meta::external::format::json::executionPlan::test::Person->internalize($binding, $data)->graphFetch($tree)});

   let planString = $plan->planToString(false, getExtensions());
   let expectedPlan = 'Sequence\n' +
        '(\n' +
        '  type = Class[impls=]\n' +
        '  resultSizeRange = *\n' +
        '  (\n' +
        '    FunctionParametersValidationNode\n' +
        '    (\n' +
        '      functionParameters = [data:Byte[*]]\n' +
        '    )\n' +
        '    ExternalFormat_Internalize\n' +
        '    (\n' +
        '      type = Class[impls=]\n' +
        '      resultSizeRange = *\n' +
        '      binding = meta::external::format::json::executionPlan::test::TestBinding[application/json]\n' +
        '      enableConstraints = true\n' +
        '      checked = false\n' +
        '      graphFetchTree = #{meta::external::format::json::executionPlan::test::Person{firm{legalName},firstName,lastName}}#\n' +
        '\n' +
        '      (\n' +
        '        VariableResolution\n' +
        '        (\n' +
        '          type = Byte\n' +
        '          varName = data\n' +
        '\n' +
        '        )\n' +
        '      )\n' +
        '      implementation\n' +
        '      (\n' +
        '        calls = _pure.plan.root.n2.Execute\n' +
        '      )\n' +
        '    )\n' +
        '  )\n' +
        ')\n';

   assertEquals($expectedPlan, $planString);

   let impl = $plan.globalImplementationSupport->toOne()->cast(@JavaPlatformImplementation);
   let source = $impl.classes->filter(c| $c.name == 'meta_external_format_json_executionPlan_test_Person_Impl').source->toOne();
   let expectedMethod = '    public List<IDefect> allConstraints(GraphContext context)\n' +
                '    {\n' +
                '        List<IDefect> result = new ArrayList<IDefect>();\n' +
                '        this.constraint_0().ifPresent(result::add);\n' +
                '        if (this.getFirm() != null)\n' +
                '        {\n' +
                '            meta_external_format_json_executionPlan_test_Firm_Impl child_0 = (meta_external_format_json_executionPlan_test_Firm_Impl) this.getFirm();\n' +
                '            child_0.constraint_0()\n' +
                '                   .map((IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n' +
                '                                                                                                                           org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode("firm")))\n' +
                '                   .ifPresent(result::add);\n' +
                '        }\n' +
                '        return result;\n' +
                '    }';
   assert($source->contains($expectedMethod));
}

function <<meta::pure::profiles::test.Test>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::planGenerationForInternalizeWithGraphFetchUnexpanded(): Boolean[1]
{
   let binding = getTestBinding();
   let tree = #{meta::external::format::json::executionPlan::test::Person {lastName, firm {legalName}}}#;

   let plan = meta::external::format::json::executionPlan::platformBinding::legendJava::test::buildPlanWithJava({data:Byte[*]| meta::external::format::json::executionPlan::test::Person->internalize($binding, $data)->graphFetchUnexpanded($tree)});

   let planString = $plan->planToString(false, getExtensions());
   let expectedPlan = 'Sequence\n' +
        '(\n' +
        '  type = Class[impls=]\n' +
        '  resultSizeRange = *\n' +
        '  (\n' +
        '    FunctionParametersValidationNode\n' +
        '    (\n' +
        '      functionParameters = [data:Byte[*]]\n' +
        '    )\n' +
        '    ExternalFormat_Internalize\n' +
        '    (\n' +
        '      type = Class[impls=]\n' +
        '      resultSizeRange = *\n' +
        '      binding = meta::external::format::json::executionPlan::test::TestBinding[application/json]\n' +
        '      enableConstraints = true\n' +
        '      checked = false\n' +
        '      graphFetchTree = #{meta::external::format::json::executionPlan::test::Person{firm{legalName},lastName}}#\n' +
        '\n' +
        '      (\n' +
        '        VariableResolution\n' +
        '        (\n' +
        '          type = Byte\n' +
        '          varName = data\n' +
        '\n' +
        '        )\n' +
        '      )\n' +
        '      implementation\n' +
        '      (\n' +
        '        calls = _pure.plan.root.n2.Execute\n' +
        '      )\n' +
        '    )\n' +
        '  )\n' +
        ')\n';

   assertEquals($expectedPlan, $planString);
    
   let impl = $plan.globalImplementationSupport->toOne()->cast(@JavaPlatformImplementation);
   let source = $impl.classes->filter(c| $c.name == 'meta_external_format_json_executionPlan_test_Person_Impl').source->toOne();
   let expectedMethod = '    public List<IDefect> allConstraints(GraphContext context)\n' +
                '    {\n' +
                '        List<IDefect> result = new ArrayList<IDefect>();\n' +
                '        if (this.getFirm() != null)\n' +
                '        {\n' +
                '            meta_external_format_json_executionPlan_test_Firm_Impl child_0 = (meta_external_format_json_executionPlan_test_Firm_Impl) this.getFirm();\n' +
                '            child_0.constraint_0()\n' +
                '                   .map((IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n' +
                '                                                                                                                           org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode("firm")))\n' +
                '                   .ifPresent(result::add);\n' +
                '        }\n' +
                '        return result;\n' +
                '    }';
   assert($source->contains($expectedMethod));
}

function <<meta::pure::profiles::test.Test>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::planGenerationForInternalizeWithGraphFetchCheckedUnexpanded(): Boolean[1]
{
   let binding = getTestBinding();
   let tree = #{meta::external::format::json::executionPlan::test::Person {lastName, firm {legalName}}}#;

   let plan = meta::external::format::json::executionPlan::platformBinding::legendJava::test::buildPlanWithJava({data:Byte[*]| meta::external::format::json::executionPlan::test::Person->internalize($binding, $data)->graphFetchCheckedUnexpanded($tree)});

   let planString = $plan->planToString(false, getExtensions());
   let expectedPlan = 'Sequence\n' +
                '(\n' +
                '  type = Class[impls=]\n' +
                '  resultSizeRange = *\n' +
                '  (\n' +
                '    FunctionParametersValidationNode\n' +
                '    (\n' +
                '      functionParameters = [data:Byte[*]]\n' +
                '    )\n' +
                '    ExternalFormat_Internalize\n' +
                '    (\n' +
                '      type = Class[impls=]\n' +
                '      resultSizeRange = *\n' +
                '      binding = meta::external::format::json::executionPlan::test::TestBinding[application/json]\n' +
                '      enableConstraints = true\n' +
                '      checked = true\n' +
                '      graphFetchTree = #{meta::external::format::json::executionPlan::test::Person{firm{legalName},lastName}}#\n' +
                '\n' +
                '      (\n' +
                '        VariableResolution\n' +
                '        (\n' +
                '          type = Byte\n' +
                '          varName = data\n' +
                '\n' +
                '        )\n' +
                '      )\n' +
                '      implementation\n' +
                '      (\n' +
                '        calls = _pure.plan.root.n2.Execute\n' +
                '      )\n' +
                '    )\n' +
                '  )\n' +
                ')\n';

   assertEquals($expectedPlan, $planString);

   let impl = $plan.globalImplementationSupport->toOne()->cast(@JavaPlatformImplementation);
   let source = $impl.classes->filter(c| $c.name == 'meta_external_format_json_executionPlan_test_Person_Impl').source->toOne();
   let expectedMethod = '    public List<IDefect> allConstraints(GraphContext context)\n' +
                '    {\n' +
                '        List<IDefect> result = new ArrayList<IDefect>();\n' +
                '        if (this.getFirm() != null)\n' +
                '        {\n' +
                '            meta_external_format_json_executionPlan_test_Firm_Impl child_0 = (meta_external_format_json_executionPlan_test_Firm_Impl) this.getFirm();\n' +
                '            child_0.constraint_0()\n' +
                '                   .map((IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n' +
                '                                                                                                                           org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"firm\")))\n' +
                '                   .ifPresent(result::add);\n' +
                '        }\n' +
                '        return result;\n' +
                '    }';
   assert($source->contains($expectedMethod));
}

function <<meta::pure::profiles::test.Test>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::planGenerationForInternalizeWithGraphFetchChecked(): Boolean[1]
{
   let binding = getTestBinding();
   let tree = #{meta::external::format::json::executionPlan::test::Person {lastName, firm {legalName}}}#;

   let plan = meta::external::format::json::executionPlan::platformBinding::legendJava::test::buildPlanWithJava({data:Byte[*]| meta::external::format::json::executionPlan::test::Person->internalize($binding, $data)->graphFetchChecked($tree)});

   let planString = $plan->planToString(false, getExtensions());
   let expectedPlan = 'Sequence\n' +
                '(\n' +
                '  type = Class[impls=]\n' +
                '  resultSizeRange = *\n' +
                '  (\n' +
                '    FunctionParametersValidationNode\n' +
                '    (\n' +
                '      functionParameters = [data:Byte[*]]\n' +
                '    )\n' +
                '    ExternalFormat_Internalize\n' +
                '    (\n' +
                '      type = Class[impls=]\n' +
                '      resultSizeRange = *\n' +
                '      binding = meta::external::format::json::executionPlan::test::TestBinding[application/json]\n' +
                '      enableConstraints = true\n' +
                '      checked = true\n' +
                '      graphFetchTree = #{meta::external::format::json::executionPlan::test::Person{firm{legalName},firstName,lastName}}#\n' +
                '\n' +
                '      (\n' +
                '        VariableResolution\n' +
                '        (\n' +
                '          type = Byte\n' +
                '          varName = data\n' +
                '\n' +
                '        )\n' +
                '      )\n' +
                '      implementation\n' +
                '      (\n' +
                '        calls = _pure.plan.root.n2.Execute\n' +
                '      )\n' +
                '    )\n' +
                '  )\n' +
                ')\n';

   assertEquals($expectedPlan, $planString);

   let impl = $plan.globalImplementationSupport->toOne()->cast(@JavaPlatformImplementation);
   let source = $impl.classes->filter(c| $c.name == 'meta_external_format_json_executionPlan_test_Person_Impl').source->toOne();
   let expectedMethod = '    public List<IDefect> allConstraints(GraphContext context)\n' +
                '    {\n' +
                '        List<IDefect> result = new ArrayList<IDefect>();\n' +
                '        this.constraint_0().ifPresent(result::add);\n' +
                '        if (this.getFirm() != null)\n' +
                '        {\n' +
                '            meta_external_format_json_executionPlan_test_Firm_Impl child_0 = (meta_external_format_json_executionPlan_test_Firm_Impl) this.getFirm();\n' +
                '            child_0.constraint_0()\n' +
                '                   .map((IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n' +
                '                                                                                                                           org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode("firm")))\n' +
                '                   .ifPresent(result::add);\n' +
                '        }\n' +
                '        return result;\n' +
                '    }';
   assert($source->contains($expectedMethod));
}

function <<meta::pure::profiles::test.Test>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::planGenerationForInternalizeWithGraphFetchChecked2(): Boolean[1]
{
   let binding = getTestBinding();
   let tree = #{meta::external::format::json::executionPlan::test::Person {lastName, firm {legalName}, addresses {street}}}#;

   let plan = meta::external::format::json::executionPlan::platformBinding::legendJava::test::buildPlanWithJava({data:Byte[*]| meta::external::format::json::executionPlan::test::Person->internalize($binding, $data)->graphFetchChecked($tree)});

   let planString = $plan->planToString(false, getExtensions());
   let expectedPlan = 'Sequence\n' +
                '(\n' +
                '  type = Class[impls=]\n' +
                '  resultSizeRange = *\n' +
                '  (\n' +
                '    FunctionParametersValidationNode\n' +
                '    (\n' +
                '      functionParameters = [data:Byte[*]]\n' +
                '    )\n' +
                '    ExternalFormat_Internalize\n' +
                '    (\n' +
                '      type = Class[impls=]\n' +
                '      resultSizeRange = *\n' +
                '      binding = meta::external::format::json::executionPlan::test::TestBinding[application/json]\n' +
                '      enableConstraints = true\n' +
                '      checked = true\n' +
                '      graphFetchTree = #{meta::external::format::json::executionPlan::test::Person{addresses{street},firm{legalName},firstName,lastName}}#\n' +
                '\n' +
                '      (\n' +
                '        VariableResolution\n' +
                '        (\n' +
                '          type = Byte\n' +
                '          varName = data\n' +
                '\n' +
                '        )\n' +
                '      )\n' +
                '      implementation\n' +
                '      (\n' +
                '        calls = _pure.plan.root.n2.Execute\n' +
                '      )\n' +
                '    )\n' +
                '  )\n' +
                ')\n';

   assertEquals($expectedPlan, $planString);

   let impl = $plan.globalImplementationSupport->toOne()->cast(@JavaPlatformImplementation);
   let source = $impl.classes->filter(c| $c.name == 'meta_external_format_json_executionPlan_test_Person_Impl').source->toOne();
   let expectedMethod = '    public List<IDefect> allConstraints(GraphContext context)\n' +
                '    {\n' +
                '        List<IDefect> result = new ArrayList<IDefect>();\n' +
                '        this.constraint_0().ifPresent(result::add);\n' +
                '        for (int i_0 = 0; i_0 < this.getAddresses().size(); i_0++)\n' +
                '        {\n' +
                '            int j_0 = i_0;\n' +
                '            meta_external_format_json_executionPlan_test_Address_Impl child_0 = (meta_external_format_json_executionPlan_test_Address_Impl) this.getAddresses()\n' +
                '                                                                                                                                                .get(i_0);\n' +
                '            child_0.constraint_0()\n' +
                '                   .map((IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n' +
                '                                                                                                                           org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode("addresses", j_0)))\n' +
                '                   .ifPresent(result::add);\n' +
                '        }\n' +
                '        if (this.getFirm() != null)\n' +
                '        {\n' +
                '            meta_external_format_json_executionPlan_test_Firm_Impl child_1 = (meta_external_format_json_executionPlan_test_Firm_Impl) this.getFirm();\n' +
                '            child_1.constraint_0()\n' +
                '                   .map((IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n' +
                '                                                                                                                           org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode("firm")))\n' +
                '                   .ifPresent(result::add);\n' +
                '        }\n' +
                '        return result;\n' +
                '    }';

   let expectedMethod1 = '    public List<IDefect> allConstraints(GraphContext context)\n' +
                '    {\n' +
                '        List<IDefect> result = new ArrayList<IDefect>();\n' +
                '        this.constraint_0().ifPresent(result::add);\n' +
                '        if (this.getFirm() != null)\n' +
                '        {\n' +
                '            meta_external_format_json_executionPlan_test_Firm_Impl child_0 = (meta_external_format_json_executionPlan_test_Firm_Impl) this.getFirm();\n' +
                '            child_0.constraint_0()\n' +
                '                   .map((IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n' +
                '                                                                                                                           org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode("firm")))\n' +
                '                   .ifPresent(result::add);\n' +
                '        }\n' +
                '        for (int i_1 = 0; i_1 < this.getAddresses().size(); i_1++)\n' +
                '        {\n' +
                '            int j_1 = i_1;\n' +
                '            meta_external_format_json_executionPlan_test_Address_Impl child_1 = (meta_external_format_json_executionPlan_test_Address_Impl) this.getAddresses()\n' +
                '                                                                                                                                                .get(i_1);\n' +
                '            child_1.constraint_0()\n' +
                '                   .map((IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n' +
                '                                                                                                                           org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode("addresses", j_1)))\n' +
                '                   .ifPresent(result::add);\n' +
                '        }\n' +
                '        return result;\n' +
                '    }';  
   assert($source->contains($expectedMethod) || $source->contains($expectedMethod1));
}
