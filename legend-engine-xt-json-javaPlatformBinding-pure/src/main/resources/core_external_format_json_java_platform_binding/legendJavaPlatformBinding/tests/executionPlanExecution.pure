// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::graphFetch::*;
import meta::pure::dataQuality::*;
import meta::external::format::json::executionPlan::platformBinding::legendJava::test::*;
import meta::external::format::json::executionPlan::test::*;
import meta::external::shared::format::functions::*;

import meta::legend::*;

import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::runtime::*;

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::testInternalizeExternalizeSimple(): Boolean[1]
{
  let binding = getTestBinding();
  let query   = {data:String[1] | Person->internalize($binding, $data)->externalize($binding, #{Person{firstName, lastName}}#)};
  let vars    = pair('data', '{"firstName":"John", "lastName":"Doe", "firm":{"legalName":"Firm A"}}');

  let result  = executeJsonBindingQuery($query, $vars);

  assertEquals('{"builder":{"_type":"json"},"values":{"firstName":"John","lastName":"Doe"}}', $result);
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::testInternalizeExternalizeWithNestedTree(): Boolean[1]
{
  let binding = getTestBinding();
  let tree    = #{Person{firstName, lastName, firm {legalName}, addresses {street}}}#;
  let query   = {data:String[1] | Person->internalize($binding, $data)->graphFetch($tree)->externalize($binding, $tree)};
  let vars    = pair('data', '[{"firstName":"John", "lastName":"Doe", "firm":{"legalName":"Firm A"}, "addresses": {"street": "Street A"}}, {"firstName":"John", "lastName":"Doe2", "firm":{"legalName":"Firm B"}, "addresses": [{"street": "Street A"}, {"street": "Street B"}]}, {"firstName":"John", "lastName":"Doe3", "firm":{"legalName":"Firm C"}}]');

  let result  = executeJsonBindingQuery($query, $vars);

  assertEquals('{"builder":{"_type":"json"},"values":[{"firstName":"John","lastName":"Doe","firm":{"legalName":"Firm A"},"addresses":[{"street":"Street A"}]},{"firstName":"John","lastName":"Doe2","firm":{"legalName":"Firm B"},"addresses":[{"street":"Street A"},{"street":"Street B"}]},{"firstName":"John","lastName":"Doe3","firm":{"legalName":"Firm C"},"addresses":[]}]}', $result);
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::testBindingAndM2MChainedSimple(): Boolean[1]
{
  let binding = getTestBinding();
  let tree    = #{TargetPerson{fullName}}#;
  let query   = {data:String[1]| TargetPerson.all()->graphFetch($tree)->from(M2MMapping, getRuntimeWithModelQueryConnection(Person, $binding, $data))->externalize($binding, $tree);};
  let vars    = pair('data', '{"firstName":"John", "lastName":"Doe", "firm":{"legalName":"Firm A"}}');
  
  let result  = executeJsonBindingQuery($query, $vars);

  assertEquals('{"builder":{"_type":"json"},"values":{"fullName":"John Doe"}}', $result);
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::testBindingAndM2MChainedWithNestedTree(): Boolean[1]
{
  let binding = getTestBinding();
  let tree    = #{TargetPerson{fullName, firm {name, legalName}, addresses {addressLine1, addressLine2}}}#;
  let query   = {data:String[1]| TargetPerson.all()->graphFetch($tree)->from(M2MMapping, getRuntimeWithModelQueryConnection(Person, $binding, $data))->externalize($binding, $tree);};
  let vars    = pair('data', '[{"firstName":"John", "lastName":"Doe", "firm":{"legalName":"Firm A"}, "addresses": {"street": "Street A"}}, {"firstName":"John", "lastName":"Doe2", "firm":{"legalName":"Firm B"}, "addresses": [{"street": "Street A"}, {"street": "Street B"}]}, {"firstName":"John", "lastName":"Doe3", "firm":{"legalName":"Firm C"}}]');
  
  let result  = executeJsonBindingQuery($query, $vars);

  assertEquals('{"builder":{"_type":"json"},"values":[{"fullName":"John Doe","firm":{"name":"Firm A","legalName":"Firm A"},"addresses":[{"addressLine1":"Street A","addressLine2":"Dummy AddressLine 2"}]},{"fullName":"John Doe2","firm":{"name":"Firm B","legalName":"Firm B"},"addresses":[{"addressLine1":"Street A","addressLine2":"Dummy AddressLine 2"},{"addressLine1":"Street B","addressLine2":"Dummy AddressLine 2"}]},{"fullName":"John Doe3","firm":{"name":"Firm C","legalName":"Firm C"},"addresses":[]}]}', $result);
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::testBindingAndMultiLevelM2MChaining(): Boolean[1]
{
  let binding = getSPersonTestBinding();
  let tree    = #{TargetPerson{fullName}}#;
  let runtime = ^Runtime(connections = ^ModelChainConnection(element=^ModelStore(), mappings = M2MMapping));
  let query   = {data:String[1]| TargetPerson.all()->graphFetch($tree)->from(M2MMapping, mergeRuntimes([$runtime, getRuntimeWithModelQueryConnection(SPerson, $binding, $data)]))->externalize($binding, $tree);};
  let vars    = pair('data', '{"firstName":"John", "lastName":"Doe"}');
  
  let result  = executeJsonBindingQuery($query, $vars);

  assertEquals('{"builder":{"_type":"json"},"values":{"fullName":"John Doe dummy"}}', $result);
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::testBindingAndM2MChainedWithQualifiedProperty(): Boolean[1]
{
  let binding = getTestBinding();
  let tree    = #{TargetPerson{fullName, firm {name, legalName}, addresses {addressLine1, addressLine2, address}}}#;
  let query   = {data:String[1]| TargetPerson.all()->graphFetch($tree)->from(M2MMapping, getRuntimeWithModelQueryConnection(Person, $binding, $data))->externalize($binding, $tree);};
  let vars    = pair('data', '[{"firstName":"John", "lastName":"Doe", "firm":{"legalName":"Firm A"}, "addresses": {"street": "Street A"}}, {"firstName":"John", "lastName":"Doe2", "firm":{"legalName":"Firm B"}, "addresses": [{"street": "Street A"}, {"street": "Street B"}]}, {"firstName":"John", "lastName":"Doe3", "firm":{"legalName":"Firm C"}}]');
  
  let result  = executeJsonBindingQuery($query, $vars);

  assertEquals('{"builder":{"_type":"json"},"values":[{"fullName":"John Doe","firm":{"name":"Firm A","legalName":"Firm A"},"addresses":[{"addressLine1":"Street A","addressLine2":"Dummy AddressLine 2","address()":"Street A, Dummy AddressLine 2"}]},{"fullName":"John Doe2","firm":{"name":"Firm B","legalName":"Firm B"},"addresses":[{"addressLine1":"Street A","addressLine2":"Dummy AddressLine 2","address()":"Street A, Dummy AddressLine 2"},{"addressLine1":"Street B","addressLine2":"Dummy AddressLine 2","address()":"Street B, Dummy AddressLine 2"}]},{"fullName":"John Doe3","firm":{"name":"Firm C","legalName":"Firm C"},"addresses":[]}]}', $result);
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::testBindingAndM2MChainedWithXStore(): Boolean[1]
{
  let binding = getTradeProductTestBinding();
  let tree    = #{Trade {
                    tradeId,
                    trader {
                      kerberos,
                      firstName,
                      lastName
                    },
                    product { 
                      productId,
                      productName,
                      description,
                      synonyms {
                        name,
                        type
                      }
                    }
                  }
                }#;
  let query   = {tradeData:String[1], productData:String[1]| Trade.all()->graphFetch($tree)->from(M2MCrossStoreMapping, mergeRuntimes([getRuntimeWithModelQueryConnection(S_Trade, $binding, $tradeData), getRuntimeWithModelQueryConnection(S_Product, $binding, $productData)]))->externalize($binding, $tree);};
  let vars    = [pair('tradeData', '[{"s_tradeId": 1, "s_tradeDetails": "30:100", "s_traderDetails": "abc:F_Name_1:L_Name_1"},{"s_tradeId": 2, "s_tradeDetails": "31:200", "s_traderDetails": "abc:F_Name_1:L_Name_1"},{"s_tradeId": 3, "s_tradeDetails": "30:300", "s_traderDetails": "xyz:F_Name_2:L_Name_2"},{"s_tradeId": 4, "s_tradeDetails": "31:400", "s_traderDetails": "xyz:F_Name_2:L_Name_2"}]'),
                 pair('productData', '[{"s_productId": "30", "s_productName": "Product 30", "s_description": "Product 30 description", "s_synonyms": [{"s_name":"product 30 synonym 1", "s_type":"isin"},{"s_name":"product 30 synonym 2", "s_type":"cusip"}]},{"s_productId": "31", "s_productName": "Product 31", "s_description": "Product 31 description", "s_synonyms": [{"s_name":"product 31 synonym 1", "s_type":"isin"}, {"s_name":"product 31 synonym 2", "s_type":"cusip"}]}]')];
  
  let result  = executeJsonBindingQuery($query, $vars);

  assertEquals('{"builder":{"_type":"json"},"values":[{"tradeId":1,"trader":{"kerberos":"abc","firstName":"F_Name_1","lastName":"L_Name_1"},"product":{"productId":"30","productName":"Product 30","description":"Product 30 description","synonyms":[{"name":"product 30 synonym 1","type":"ISIN"},{"name":"product 30 synonym 2","type":"CUSIP"}]}},{"tradeId":2,"trader":{"kerberos":"abc","firstName":"F_Name_1","lastName":"L_Name_1"},"product":{"productId":"31","productName":"Product 31","description":"Product 31 description","synonyms":[{"name":"product 31 synonym 1","type":"ISIN"},{"name":"product 31 synonym 2","type":"CUSIP"}]}},{"tradeId":3,"trader":{"kerberos":"xyz","firstName":"F_Name_2","lastName":"L_Name_2"},"product":{"productId":"30","productName":"Product 30","description":"Product 30 description","synonyms":[{"name":"product 30 synonym 1","type":"ISIN"},{"name":"product 30 synonym 2","type":"CUSIP"}]}},{"tradeId":4,"trader":{"kerberos":"xyz","firstName":"F_Name_2","lastName":"L_Name_2"},"product":{"productId":"31","productName":"Product 31","description":"Product 31 description","synonyms":[{"name":"product 31 synonym 1","type":"ISIN"},{"name":"product 31 synonym 2","type":"CUSIP"}]}}]}', $result);
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::testBindingAndM2MChainedWithUnion(): Boolean[1]
{
  let binding = getTradeProductTestBinding();
  let tree    = #{Trade {
                    tradeId,
                    trader {
                      kerberos,
                      firstName,
                      lastName
                    }
                  }
                }#;
  let query   = {tradeData1:String[1], tradeData2:String[1]| Trade.all()->graphFetch($tree)->from(M2MUnionMapping, mergeRuntimes([getRuntimeWithModelQueryConnection(S_Trade1, $binding, $tradeData1), getRuntimeWithModelQueryConnection(S_Trade2, $binding, $tradeData2)]))->externalize($binding, $tree);};
  let vars    = [pair('tradeData1', '[{"s_tradeId": 1, "s_tradeDetails": "30:100", "s_traderDetails": "abc:F_Name_1:L_Name_1"},{"s_tradeId": 2, "s_tradeDetails": "31:200", "s_traderDetails": "abc:F_Name_1:L_Name_1"},{"s_tradeId": 3, "s_tradeDetails": "30:300", "s_traderDetails": "xyz:F_Name_2:L_Name_2"},{"s_tradeId": 4, "s_tradeDetails": "31:400", "s_traderDetails": "xyz:F_Name_2:L_Name_2"}]'),
                 pair('tradeData2', '[{"s_tradeId": 5, "s_tradeDetails": "30:100", "s_traderDetails": "abc:F_Name_1:L_Name_1"},{"s_tradeId": 6, "s_tradeDetails": "31:200", "s_traderDetails": "abc:F_Name_1:L_Name_1"},{"s_tradeId": 7, "s_tradeDetails": "30:300", "s_traderDetails": "xyz:F_Name_2:L_Name_2"},{"s_tradeId": 8, "s_tradeDetails": "31:400", "s_traderDetails": "xyz:F_Name_2:L_Name_2"}]')];
  
  let result  = executeJsonBindingQuery($query, $vars);

  assertEquals('{"builder":{"_type":"json"},"values":[{"tradeId":1,"trader":{"kerberos":"abc","firstName":"F_Name_1","lastName":"L_Name_1"}},{"tradeId":2,"trader":{"kerberos":"abc","firstName":"F_Name_1","lastName":"L_Name_1"}},{"tradeId":3,"trader":{"kerberos":"xyz","firstName":"F_Name_2","lastName":"L_Name_2"}},{"tradeId":4,"trader":{"kerberos":"xyz","firstName":"F_Name_2","lastName":"L_Name_2"}},{"tradeId":5,"trader":{"kerberos":"abc","firstName":"F_Name_1","lastName":"L_Name_1"}},{"tradeId":6,"trader":{"kerberos":"abc","firstName":"F_Name_1","lastName":"L_Name_1"}},{"tradeId":7,"trader":{"kerberos":"xyz","firstName":"F_Name_2","lastName":"L_Name_2"}},{"tradeId":8,"trader":{"kerberos":"xyz","firstName":"F_Name_2","lastName":"L_Name_2"}}]}', $result);
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> meta::external::format::json::executionPlan::platformBinding::legendJava::test::testCheckedInternalizeExternalizeWithNestedTree(): Boolean[1]
{
  let binding = getTestBinding();
  let tree    = #{Person{firstName, lastName, firm {legalName}, addresses {street}}}#;
  let query   = {data:String[1] | Person->internalize($binding, $data)->graphFetchChecked($tree)->externalize($binding, checked($tree, $binding))};
  let vars    = pair('data', '[{"firstName":"John", "lastName":"Doe", "firm":{"legalName":"Firm A"}, "addresses": {"street": "Street A"}}, {"firstName":"John", "lastName":"Doe2", "firm":{"legalName":"Firm B"}, "addresses": [{"street": "Street A"}, {"street": "Street B"}]}, {"firstName":"John", "lastName":"Doe3", "firm":{"legalName":"Firm C"}}]');

  let result  = executeJsonBindingQuery($query, $vars);

  assertEquals('{"builder":{"_type":"json"},"values":[{"defects":[],"source":{"number":1,"record":"{\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Doe\\\",\\\"firm\\\":{\\\"legalName\\\":\\\"Firm A\\\"},\\\"addresses\\\":{\\\"street\\\":\\\"Street A\\\"}}"},"value":{"firstName":"John","lastName":"Doe","firm":{"legalName":"Firm A"},"addresses":[{"street":"Street A"}]}},{"defects":[],"source":{"number":2,"record":"{\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Doe2\\\",\\\"firm\\\":{\\\"legalName\\\":\\\"Firm B\\\"},\\\"addresses\\\":[{\\\"street\\\":\\\"Street A\\\"},{\\\"street\\\":\\\"Street B\\\"}]}"},"value":{"firstName":"John","lastName":"Doe2","firm":{"legalName":"Firm B"},"addresses":[{"street":"Street A"},{"street":"Street B"}]}},{"defects":[],"source":{"number":3,"record":"{\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Doe3\\\",\\\"firm\\\":{\\\"legalName\\\":\\\"Firm C\\\"}}"},"value":{"firstName":"John","lastName":"Doe3","firm":{"legalName":"Firm C"},"addresses":[]}}]}', $result);
}

function meta::external::format::json::executionPlan::platformBinding::legendJava::test::executeJsonBindingQuery(f: FunctionDefinition<Any>[1], vars: Pair<String, Any>[*]): String[1]
{
  meta::legend::executeLegendQuery($f, $vars, ^ExecutionContext(), getExtensions());
}