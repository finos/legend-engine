// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::json::binding::validation::*;
import meta::external::format::json::executionPlan::model::*;
import meta::external::format::json::executionPlan::platformBinding::legendJava::*;
import meta::external::format::json::executionPlan::platformBinding::legendJava::internalize::*;

import meta::external::format::json::metamodel::*;
import meta::external::format::json::metamodel::internalize::*;

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::transform::*;

import meta::external::shared::format::binding::*;
import meta::external::shared::format::binding::validation::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::engine::*;
import meta::external::shared::format::executionPlan::engine::java::*;
import meta::external::shared::format::functions::*;
import meta::external::shared::format::metamodel::*;

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::engine::java::graphFetch::json::*;
import meta::pure::executionPlan::engine::java::graphFetch::storeStreamReading::*;
import meta::pure::executionPlan::engine::java::naming::*;
import meta::pure::executionPlan::platformBinding::typeInfo::*;

import meta::pure::dataQuality::*;

import meta::pure::extension::*;

import meta::pure::graphFetch::*;

import meta::pure::mapping::modelToModel::*;

import meta::pure::metamodel::serialization::grammar::*;


// ========================================================================================================================================================
// Descriptor
// ========================================================================================================================================================

function meta::external::format::json::executionPlan::platformBinding::legendJava::internalize::getExternalFormatInternalizeJavaBindingDescriptor(): ExternalFormatInternalizeBindingDescriptor[1]
{
  ^ExternalFormatInternalizeBindingDescriptor
  (
    internalizeGenerator  = {node:ExternalFormatInternalizeExecutionNode[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]| generateForInternalize($node, $path, $context, $debug)}
  );
}

// ========================================================================================================================================================
// generate
// ========================================================================================================================================================

function meta::external::format::json::executionPlan::platformBinding::legendJava::internalize::generateForInternalize(node:ExternalFormatInternalizeExecutionNode[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]): GeneratedCode[1]
{
   print(if($debug.debug,|$debug.space+'('+$path+') generate ExternalFormatInternalizeExecutionNode for JsonSchema \n', |''));

   let conventions        = $context.conventions;
   let pureClass          = $node.resultType.type->cast(@meta::pure::metamodel::type::Class<Any>)->toOne();
   let dependentClass     = $context.typeInfos->classDependenciesViaPropertiesWithSubTypes($pureClass);
   let readableClasses    = $pureClass->concatenate($dependentClass);
   let readableEnums      = $context.typeInfos->enumDependenciesViaProperties($pureClass);
   
   let bindingDetail      = $context->nodeInfosForPath($path).data->toOne()->cast(@SuccessfulBindingDetail);
   let mainClassProject   = $pureClass->createStreamReadingDataClass($path, $context, ^ConstraintCheckingGenerationContext(enableConstraints=$node.enableConstraints, topLevelOnly=$node.tree->isEmpty(), graphFetchTree=$node.tree), $debug->indent());
   let dataClassesProject = if($dependentClass->isEmpty(),
                              | $mainClassProject,
                              | $mainClassProject->concatenate($dependentClass->map(dc | $dc->createStreamReadingDataClass($path, $context, [], $debug->indent())))
                              );

   let storeReaderProject = createJsonReading($pureClass, $conventions->className($pureClass), $path, $node.config->cast(@JsonSchemaInternalizeConfig).pathReference.path, $readableClasses, $readableEnums, $context, $debug->indent());

   let sourceStreamParam       = j_parameter(javaInputStream(), 'sourceStream');
   let streamReaderMethodCodes = $conventions->jsonReaderClass($path, $pureClass)
                                             ->j_new($sourceStreamParam)
                                             ->j_return();

   let executeClassWithImports = $conventions->planNodeClass('public', $path, 'Execute')
                                             ->usingKnownPackages($conventions->knownPackages())
                                             ->imports($conventions->standardImports())
                                             ->imports(javaInputStream())
                                             ->imports([_IJsonDeserializeExecutionNodeSpecifics, StoreStreamReader]->map(x | $conventions->className($x)))
                                             ->implements($conventions->className(_IJsonDeserializeExecutionNodeSpecifics));

   let executeClass = $executeClassWithImports->addMethod(
      javaMethod(['public'], $conventions->className(StoreStreamReader), 'streamReader', [$sourceStreamParam], $streamReaderMethodCodes)
   );

   let executeProject = newProject()->addClasses($executeClass);
   let allProjects    = $executeProject
      ->concatenate($dataClassesProject)
      ->concatenate($storeReaderProject)
      ->concatenate($streamReaderMethodCodes->dependencies()->resolveAndGetProjects())
      ->toOneMany();

   $allProjects->mergeProjects()->generatedCode($executeClass);
}
