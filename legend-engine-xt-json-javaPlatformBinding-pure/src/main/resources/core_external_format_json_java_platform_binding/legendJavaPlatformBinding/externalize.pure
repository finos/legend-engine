// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::json::binding::validation::*;
import meta::external::format::json::executionPlan::engine::java::*;
import meta::external::format::json::executionPlan::engine::java::externalize::*;
import meta::external::format::json::metamodel::*;

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::transform::*;

import meta::external::shared::format::binding::*;
import meta::external::shared::format::binding::validation::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::engine::*;
import meta::external::shared::format::executionPlan::engine::java::*;
import meta::external::shared::format::metamodel::*;

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::engine::java::naming::*;
import meta::pure::executionPlan::platformBinding::typeInfo::*;

import meta::pure::extension::*;

import meta::pure::graphFetch::*;

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::engine::java::naming::*;
import meta::pure::executionPlan::engine::java::platform::*;
import meta::pure::executionPlan::engine::java::serialize::*;
import meta::pure::executionPlan::platformBinding::typeInfo::*;

import meta::pure::graphFetch::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::extension::*;

import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::transform::*;

import meta::external::shared::format::binding::*;
import meta::external::shared::format::binding::validation::*;
import meta::external::shared::format::executionPlan::*;

import meta::external::format::json::binding::validation::*;
import meta::external::format::json::executionPlan::*;
import meta::external::format::json::executionPlan::engine::java::externalize::helperFunctions::*;

// ========================================================================================================================================================
// Descriptor
// ========================================================================================================================================================

function meta::external::format::json::executionPlan::engine::java::externalize::getExternalFormatExternalizeJavaBindingDescriptor(): ExternalFormatExternalizeBindingDescriptor[1]
{
  ^ExternalFormatExternalizeBindingDescriptor
  (
    externalizePreparator = {node:ExternalFormatExternalizeExecutionNode[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]| prepareForExternalize($node, $path, $context, $debug)},
    externalizeGenerator  = {node:ExternalFormatExternalizeExecutionNode[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]| generateForExternalize($node, $path, $context, $debug)}
  );
}

// ========================================================================================================================================================
// prepare
// ========================================================================================================================================================

function meta::external::format::json::executionPlan::engine::java::externalize::prepareForExternalize(node:ExternalFormatExternalizeExecutionNode[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]): TypeInfoSet[1]
{
   print(if($debug.debug,|$debug.space+'('+$path+') prepare ExternalFormatExternalizeExecutionNode for JsonSchema \n', |''));

   let bindingDetail = $context->nodeInfosForPath($path).data->toOne();
   assert($bindingDetail->instanceOf(JsonSchemaBindingDetail), | 'Detailed binding failed: ' + $bindingDetail->cast(@FailedBindingDetail).errorMessages->joinStrings('\n'));

   let classIn      = $node.executionNodes.resultType->match([
                         c:ClassResultType[1] | $c.type->cast(@meta::pure::metamodel::type::Class<Any>)
                      ]);

   let tree         = generateRootTreeFromBindingDetail($classIn, $bindingDetail->cast(@JsonSchemaBindingDetail));
   $context.typeInfos->addForGraphFetchTree($tree);
}


// ========================================================================================================================================================
// generate
// ========================================================================================================================================================

function meta::external::format::json::executionPlan::engine::java::externalize::generateForExternalize(node:ExternalFormatExternalizeExecutionNode[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]): GeneratedCode[1]
{
   print(if($debug.debug,|$debug.space+'('+$path+') generate ExternalFormatExternalizeExecutionNode for JsonSchema \n', |''));

   let bindingDetail = bindDetails($node.binding->cast(@Binding));
   assert($bindingDetail->instanceOf(JsonSchemaBindingDetail), | 'Detailed binding failed: ' + $bindingDetail->cast(@FailedBindingDetail).errorMessages->joinStrings('\n'));
   let classIn      = $node.executionNodes.resultType->match([
                         c:ClassResultType[1] | $c.type->cast(@meta::pure::metamodel::type::Class<Any>)
                      ]);
   let tree         = generateRootTreeFromBindingDetail($classIn, $bindingDetail->cast(@JsonSchemaBindingDetail));
   let childInfo    = $context->childNodeInfosForPath($path);

   let data         = ^SerializeData(
                          tree           = $tree,
                          auxiliaryTrees = $childInfo.graphFetchTrees
                      );

   let serializeClass = $context.conventions->planNodeClass('public', $path, 'Serialize');

   let project = mergeProjects([
      generateInterfacesAndEnums($context, $debug->indent()),
      createSerializeProject($path, $context, $data, $debug)
   ]);
   generatedCode($project, $serializeClass);
}

// ========================================================================================================================================================
// helper functions
// ========================================================================================================================================================

function meta::external::format::json::executionPlan::engine::java::externalize::helperFunctions::generateRootTreeFromBindingDetail(classIn:meta::pure::metamodel::type::Class<Any>[1], detail:JsonSchemaBindingDetail[1]): RootGraphFetchTree<Any>[1]
{
   let propertiesInScope = $detail.mappedPropertiesForClass($classIn);
   let subTrees          = $propertiesInScope->map(p | $p->generatePropertyTreeForProperty($detail));

   ^RootGraphFetchTree<Any>(class=$classIn, subTrees = $subTrees);
}

function <<access.private>> meta::external::format::json::executionPlan::engine::java::externalize::helperFunctions::generatePropertyTreeForProperty(property:AbstractProperty<Any>[1], detail:JsonSchemaBindingDetail[1]): PropertyGraphFetchTree[1]
{
   let returnType           = $property->functionReturnType().rawType->toOne();
   let isPropertyPrimitive  = $returnType->instanceOf(meta::pure::metamodel::type::PrimitiveType) || $returnType->instanceOf(meta::pure::metamodel::type::Enumeration) ;

   let subPropertiesInScope = if($isPropertyPrimitive, | [], | $detail.mappedPropertiesForClass($returnType->cast(@meta::pure::metamodel::type::Class<Any>)));
   let subTrees             = $subPropertiesInScope->map(p | $p->generatePropertyTreeForProperty($detail));

   ^PropertyGraphFetchTree(property=$property, subTrees = $subTrees);
}