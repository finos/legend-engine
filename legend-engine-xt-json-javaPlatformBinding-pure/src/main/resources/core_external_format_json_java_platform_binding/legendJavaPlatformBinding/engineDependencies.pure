// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Generated extension externalFormatJson class definitions: see org.finos.legend.engine.external.shared.ExternalFormatJavaCompilerExtension
 */

import meta::external::format::json::executionPlan::platformBinding::legendJava::*;
import meta::external::language::java::factory::*;
import meta::external::language::java::transform::*;

Class meta::external::format::json::executionPlan::platformBinding::legendJava::_IJsonInternalizeExecutionNodeSpecifics {}
Class meta::external::format::json::executionPlan::platformBinding::legendJava::JsonDataReader {}

/*
 * This function should be assigned to the router extension:
 *
 *     plan_javaRuntime_enginePlatformDependencies_conventions = meta::external::format::json::executionPlan::platformBinding::legendJava::extendJavaEngineDependencies_Conventions_1__Conventions_1_
 */
function meta::external::format::json::executionPlan::platformBinding::legendJava::extendJavaEngineDependencies(conventions:Conventions[1]):Conventions[1]
{

   let jIChecked = $conventions->className(meta::pure::dataQuality::Checked);

   let jJsonDataRecord = javaClass('public', 'org.finos.legend.engine.external.format.json.read.JsonDataRecord')
      ->addMethod(javaMethod('public', javaLong(), 'getNumber', []))
      ->addMethod(javaMethod('public', javaString(), 'getRecord', []))
      ->addMethod(javaMethod('public', javaString(), 'typeName$', []))
      ->addMethod(javaMethod('public', javaString(), 'typePath$', []));

   let jJsonDataReader = javaClass('public', 'org.finos.legend.engine.external.format.json.read.JsonDataReader')
      ->addMethod(javaMethod('public', javaStream(javaParameterizedType($jIChecked, [javaTypeVar('T')])), 'startStream', []));

   let jIJsonInternalizeExecutionNodeSpecifics = javaClass('public', 'org.finos.legend.engine.external.format.json.read.IJsonInternalizeExecutionNodeSpecifics')
      ->addMethod(javaMethod('public', javaParameterizedType($jJsonDataReader, [javaWildcard()]), 'createReader', [javaParam(javaClass('java.io.InputStream'), 'p0')]));

   $conventions
      ->addProvidedType(meta::external::format::json::executionPlan::model::JsonDataRecord, $jJsonDataRecord)
      ->addProvidedType(meta::external::format::json::executionPlan::platformBinding::legendJava::_IJsonInternalizeExecutionNodeSpecifics, $jIJsonInternalizeExecutionNodeSpecifics)
      ->addProvidedType(meta::external::format::json::executionPlan::platformBinding::legendJava::JsonDataReader, $jJsonDataReader);
}

