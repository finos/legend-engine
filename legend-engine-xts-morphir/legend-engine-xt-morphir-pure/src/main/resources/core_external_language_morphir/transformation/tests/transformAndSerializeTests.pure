import meta::json::*;
import meta::external::language::morphir::transform::tests::*;

function meta::external::language::morphir::transform::tests::verboseMin(v1:Number[1], v2:Number[1]):Number[1]
{
   if($v1 < $v2, |$v1,|$v2);
}

function meta::external::language::morphir::transform::tests::addTwoPointFive(v1:Number[1]):Number[1]
{
   $v1 + 2.5;
}

function meta::external::language::morphir::transform::tests::verboseMinAdd(v1:Number[1], v2:Number[1]):Number[1]
{
   if($v1 < $v2, |$v1 + 2.5,|$v2);
}

function meta::external::language::morphir::transform::tests::letFunction():Number[1]
{
   let a = 5;
}

function meta::external::language::morphir::transform::tests::zeroDivisionFunction(v1:Number[1]):Number[1]
{
   $v1 / (1 - 1);
}

function meta::external::language::morphir::transform::tests::multipleStatementFunction(v1:Number[1]):Number[1]
{
   let v2 = 2.5;
   $v1 + $v2;
}

function meta::external::language::morphir::transform::tests::getRentals(requests: Number[1], available: Number[1], allowPartials: Boolean[1]):Number[1]
{
   let maximumAllowed = if (0.5 < ($requests / $available), | $available / 2.0, | $requests);
   if($requests <= $maximumAllowed, 
      |$requests, 
      |if($allowPartials, 
          |$maximumAllowed, 
          |0.0));
}

function <<test.Test>> meta::external::language::morphir::transform::tests::testTransformAndSerializeVerboseMinFunction():Boolean[1]
{
   let func = meta::external::language::morphir::transform::tests::verboseMin_Number_1__Number_1__Number_1_;
   let minFuncTransformedModel = $func->meta::external::language::morphir::transform::transformToMorphirModel();
   let minFuncSerializedComplete = $minFuncTransformedModel->meta::external::language::morphir::serialization::morphirModelToJson();
   let completeResult = $minFuncSerializedComplete->map(elem| $elem->toCompactJSONString());

   assertEquals($completeResult, '{"formatVersion":1,"distribution":["library",[["external"],["morphir"]],[],{"modules":[{"name":[["transform"]],"def":["public",{"types":[],"values":[[["main"],["public",{"inputTypes":[[["v","1"],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",4],["startColumn",1],["endLine",7],["endColumn",1]]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",4],["startColumn",1],["endLine",7],["endColumn",1]]]],[["v","2"],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",4],["startColumn",1],["endLine",7],["endColumn",1]]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",4],["startColumn",1],["endLine",7],["endColumn",1]]]]],"outputType":["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",4],["startColumn",1],["endLine",7],["endColumn",1]]],"body":["if_then_else",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",6],["startColumn",4],["endLine",6],["endColumn",5]]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",6],["startColumn",11],["endLine",6],["endColumn",11]]],["apply",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],[]],[]],["reference",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],[]],[]],[]],[[["morphir"],["s","d","k"]],[["basics"]],["less","than"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",6],["startColumn",8],["endLine",6],["endColumn",9]]],["v","1"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",6],["startColumn",14],["endLine",6],["endColumn",15]]],["v","2"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",6],["startColumn",20],["endLine",6],["endColumn",21]]],["v","1"]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",6],["startColumn",25],["endLine",6],["endColumn",26]]],["v","2"]]]}]]]}]}]}]}');
}

function <<test.Test>> meta::external::language::morphir::transform::tests::testTransformAndSerializeAddFunction():Boolean[1]
{
   let func = meta::external::language::morphir::transform::tests::addTwoPointFive_Number_1__Number_1_;
   let addFuncTransformedModel = $func->meta::external::language::morphir::transform::transformToMorphirModel();
   let addFuncSerializedComplete = $addFuncTransformedModel->meta::external::language::morphir::serialization::morphirModelToJson();
   let addCompleteResult = $addFuncSerializedComplete->map(elem| $elem->toCompactJSONString());

   assertEquals($addCompleteResult, '{"formatVersion":1,"distribution":["library",[["external"],["morphir"]],[],{"modules":[{"name":[["transform"]],"def":["public",{"types":[],"values":[[["main"],["public",{"inputTypes":[[["v","1"],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",9],["startColumn",1],["endLine",12],["endColumn",1]]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",9],["startColumn",1],["endLine",12],["endColumn",1]]]]],"outputType":["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",9],["startColumn",1],["endLine",12],["endColumn",1]]],"body":["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",11],["startColumn",8],["endLine",11],["endColumn",8]]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["apply",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],[]],["reference",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],[]],[]],[[["morphir"],["s","d","k"]],[["basics"]],["add"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",11],["startColumn",5],["endLine",11],["endColumn",6]]],["v","1"]]],["literal",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",11],["startColumn",10],["endLine",11],["endColumn",12]]],["float_literal",2.5]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",11],["startColumn",5],["endLine",11],["endColumn",6]]],["v","1"]]],["literal",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",11],["startColumn",10],["endLine",11],["endColumn",12]]],["float_literal",2.5]]]}]]]}]}]}]}');
}

function <<test.Test>> meta::external::language::morphir::transform::tests::testTransformAndSerializeVerboseMinAddFunction():Boolean[1]
{
   let func = meta::external::language::morphir::transform::tests::verboseMinAdd_Number_1__Number_1__Number_1_;
   let minFuncTwoTransformedModel = $func->meta::external::language::morphir::transform::transformToMorphirModel();
   let minFuncTwoSerializedComplete = $minFuncTwoTransformedModel->meta::external::language::morphir::serialization::morphirModelToJson();
   let minFuncTwoCompleteResult = $minFuncTwoSerializedComplete->map(elem| $elem->toCompactJSONString());

   assertEquals($minFuncTwoCompleteResult, '{"formatVersion":1,"distribution":["library",[["external"],["morphir"]],[],{"modules":[{"name":[["transform"]],"def":["public",{"types":[],"values":[[["main"],["public",{"inputTypes":[[["v","1"],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",14],["startColumn",1],["endLine",17],["endColumn",1]]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",14],["startColumn",1],["endLine",17],["endColumn",1]]]],[["v","2"],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",14],["startColumn",1],["endLine",17],["endColumn",1]]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",14],["startColumn",1],["endLine",17],["endColumn",1]]]]],"outputType":["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",14],["startColumn",1],["endLine",17],["endColumn",1]]],"body":["if_then_else",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",16],["startColumn",4],["endLine",16],["endColumn",5]]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",16],["startColumn",11],["endLine",16],["endColumn",11]]],["apply",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],[]],[]],["reference",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],[]],[]],[]],[[["morphir"],["s","d","k"]],[["basics"]],["less","than"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",16],["startColumn",8],["endLine",16],["endColumn",9]]],["v","1"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",16],["startColumn",14],["endLine",16],["endColumn",15]]],["v","2"]]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",16],["startColumn",23],["endLine",16],["endColumn",23]]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["apply",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],[]],["reference",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],[]],[]],[[["morphir"],["s","d","k"]],[["basics"]],["add"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",16],["startColumn",20],["endLine",16],["endColumn",21]]],["v","1"]]],["literal",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",16],["startColumn",25],["endLine",16],["endColumn",27]]],["float_literal",2.5]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",16],["startColumn",20],["endLine",16],["endColumn",21]]],["v","1"]]],["literal",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",16],["startColumn",25],["endLine",16],["endColumn",27]]],["float_literal",2.5]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",16],["startColumn",31],["endLine",16],["endColumn",32]]],["v","2"]]]}]]]}]}]}]}');
}

function <<test.Test>> meta::external::language::morphir::transform::tests::testTransformAndSerializeZeroDivisionFunction():Boolean[1]
{
   let func = meta::external::language::morphir::transform::tests::zeroDivisionFunction_Number_1__Number_1_;
   let zeroDivFuncTransformedModel = $func->meta::external::language::morphir::transform::transformToMorphirModel();
   let zeroDivFuncSerializedComplete = $zeroDivFuncTransformedModel->meta::external::language::morphir::serialization::morphirModelToJson();
   let completeResult = $zeroDivFuncSerializedComplete->map(elem| $elem->toCompactJSONString());

   assertEquals($completeResult, '{"formatVersion":1,"distribution":["library",[["external"],["morphir"]],[],{"modules":[{"name":[["transform"]],"def":["public",{"types":[],"values":[[["main"],["public",{"inputTypes":[[["v","1"],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",24],["startColumn",1],["endLine",27],["endColumn",1]]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",24],["startColumn",1],["endLine",27],["endColumn",1]]]]],"outputType":["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",24],["startColumn",1],["endLine",27],["endColumn",1]]],"body":["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",26],["startColumn",8],["endLine",26],["endColumn",8]]],["apply",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],[]],["reference",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["int"]],[],[]],["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],[]],[]],[[["morphir"],["s","d","k"]],[["basics"]],["divide"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",26],["startColumn",5],["endLine",26],["endColumn",6]]],["v","1"]]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["int"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",26],["startColumn",13],["endLine",26],["endColumn",13]]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["int"]],[],[]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["int"]],[],[]],["apply",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["int"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["int"]],[],[]],[]],["reference",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["int"]],[],[]],["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["int"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["int"]],[],[]],[]],[]],[[["morphir"],["s","d","k"]],[["basics"]],["subtract"]]],["literal",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["int"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",26],["startColumn",11],["endLine",26],["endColumn",11]]],["int_literal",1]]],["literal",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["int"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",26],["startColumn",15],["endLine",26],["endColumn",15]]],["int_literal",1]]],["literal",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["int"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",26],["startColumn",11],["endLine",26],["endColumn",11]]],["int_literal",1]]],["literal",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["int"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",26],["startColumn",15],["endLine",26],["endColumn",15]]],["int_literal",1]]]]}]]]}]}]}]}');
}

function <<test.Test>> meta::external::language::morphir::transform::tests::testTransformAndSerializeMultipleStatementFunction():Boolean[1]
{
   let func = meta::external::language::morphir::transform::tests::multipleStatementFunction_Number_1__Number_1_;
   let funcTransformedModel = $func->meta::external::language::morphir::transform::transformToMorphirModel();
   let funcSerializedComplete = $funcTransformedModel->meta::external::language::morphir::serialization::morphirModelToJson();
   let completeResult = $funcSerializedComplete->map(elem| $elem->toCompactJSONString());

   assertEquals($completeResult, '{"formatVersion":1,"distribution":["library",[["external"],["morphir"]],[],{"modules":[{"name":[["transform"]],"def":["public",{"types":[],"values":[[["main"],["public",{"inputTypes":[[["v","1"],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",29],["startColumn",1],["endLine",33],["endColumn",1]]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",29],["startColumn",1],["endLine",33],["endColumn",1]]]]],"outputType":["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",29],["startColumn",1],["endLine",33],["endColumn",1]]],"body":["let_definition",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",31],["startColumn",4],["endLine",31],["endColumn",6]]],["v","2"],{"inputTypes":[],"outputType":["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],"body":["literal",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",31],["startColumn",13],["endLine",31],["endColumn",15]]],["float_literal",2.5]]},["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",32],["startColumn",8],["endLine",32],["endColumn",8]]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["apply",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],[]],["reference",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],[]],[]],[[["morphir"],["s","d","k"]],[["basics"]],["add"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",32],["startColumn",5],["endLine",32],["endColumn",6]]],["v","1"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",32],["startColumn",11],["endLine",32],["endColumn",12]]],["v","2"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",32],["startColumn",5],["endLine",32],["endColumn",6]]],["v","1"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",32],["startColumn",11],["endLine",32],["endColumn",12]]],["v","2"]]]]}]]]}]}]}]}');
}

function <<test.Test>> meta::external::language::morphir::transform::tests::testTransformRentals():Boolean[1]
{
   let func = meta::external::language::morphir::transform::tests::getRentals_Number_1__Number_1__Boolean_1__Number_1_;
   let funcTransformedModel = $func->meta::external::language::morphir::transform::transformToMorphirModel();
   let funcSerializedComplete = $funcTransformedModel->meta::external::language::morphir::serialization::morphirModelToJson();
   let completeResult = $funcSerializedComplete->map(elem| $elem->toCompactJSONString());

   assertEquals($completeResult, '{"formatVersion":1,"distribution":["library",[["external"],["morphir"]],[],{"modules":[{"name":[["transform"]],"def":["public",{"types":[],"values":[[["main"],["public",{"inputTypes":[[["requests"],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",35],["startColumn",1],["endLine",43],["endColumn",1]]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",35],["startColumn",1],["endLine",43],["endColumn",1]]]],[["available"],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",35],["startColumn",1],["endLine",43],["endColumn",1]]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",35],["startColumn",1],["endLine",43],["endColumn",1]]]],[["allow","partials"],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",35],["startColumn",1],["endLine",43],["endColumn",1]]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",35],["startColumn",1],["endLine",43],["endColumn",1]]]]],"outputType":["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",35],["startColumn",1],["endLine",43],["endColumn",1]]],"body":["let_definition",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",37],["startColumn",4],["endLine",37],["endColumn",6]]],["maximum","allowed"],{"inputTypes":[],"outputType":["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],"body":["if_then_else",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",37],["startColumn",25],["endLine",37],["endColumn",26]]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",37],["startColumn",33],["endLine",37],["endColumn",33]]],["apply",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],[]],[]],["reference",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],[]],[]],[]],[[["morphir"],["s","d","k"]],[["basics"]],["less","than"]]],["literal",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",37],["startColumn",29],["endLine",37],["endColumn",31]]],["float_literal",0.5]]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",37],["startColumn",46],["endLine",37],["endColumn",46]]],["apply",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],[]],["reference",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],[]],[]],[[["morphir"],["s","d","k"]],[["basics"]],["divide"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",37],["startColumn",37],["endLine",37],["endColumn",44]]],["requests"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",37],["startColumn",49],["endLine",37],["endColumn",57]]],["available"]]]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",37],["startColumn",74],["endLine",37],["endColumn",74]]],["apply",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],[]],["reference",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],[]],[]],[[["morphir"],["s","d","k"]],[["basics"]],["divide"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",37],["startColumn",64],["endLine",37],["endColumn",72]]],["available"]]],["literal",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",37],["startColumn",76],["endLine",37],["endColumn",78]]],["float_literal",2.0]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",37],["startColumn",84],["endLine",37],["endColumn",91]]],["requests"]]]},["if_then_else",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",38],["startColumn",4],["endLine",38],["endColumn",5]]],["apply",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",38],["startColumn",17],["endLine",38],["endColumn",18]]],["apply",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],[]],[]],["reference",["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["function",{},["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],[]],["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],[]],[]],[]],[[["morphir"],["s","d","k"]],[["basics"]],["less","than","or","equal"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",38],["startColumn",8],["endLine",38],["endColumn",15]]],["requests"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",38],["startColumn",21],["endLine",38],["endColumn",34]]],["maximum","allowed"]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",39],["startColumn",9],["endLine",39],["endColumn",16]]],["requests"]],["if_then_else",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",40],["startColumn",8],["endLine",40],["endColumn",9]]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["bool"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",40],["startColumn",12],["endLine",40],["endColumn",24]]],["allow","partials"]],["variable",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",41],["startColumn",13],["endLine",41],["endColumn",26]]],["maximum","allowed"]],["literal",["reference",{},[[["morphir"],["s","d","k"]],[["basics"]],["float"]],[],["sourceInformation",["source","\\/core_external_language_morphir\\/transformation\\/tests\\/transformAndSerializeTests.pure"],["startLine",42],["startColumn",12],["endLine",42],["endColumn",14]]],["float_literal",0.0]]]]]}]]]}]}]}]}');
}