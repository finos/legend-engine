// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* #######################################
                 README
                 
               DON'T UPDATE 
  
  This was auto-generated using:

  meta::external::store::elasticsearch::metamodel::spec::toPure::generatePureClassCode

  If model is incosistent or something is missing, update generator, and rerun for given ES version.
  #######################################
*/

Class meta::external::store::elasticsearch::metamodel::api::v7::types::RequestBase extends meta::external::store::elasticsearch::metamodel::api::specutils::CommonQueryParameters
{
}

Class {meta::pure::profiles::doc.doc='Allows to execute several search operations in one request.'} meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::Request extends meta::external::store::elasticsearch::metamodel::api::v7::types::RequestBase
{
  searches : meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::RequestItem[1..*];
  {meta::pure::profiles::doc.doc='Comma-separated list of data streams, indices, and index aliases to search.'} index : String[0..1];
  {meta::pure::profiles::doc.doc='A comma-separated list of document types to use as default'} type : String[0..1];
  {meta::pure::profiles::doc.doc='If false, the request returns an error if any wildcard expression, index alias, or _all value targets only missing or closed indices. This behavior applies even if the request targets other open indices. For example, a request targeting foo*,bar* returns an error if an index starts with foo but no index starts with bar.'} allow_no_indices : Boolean[0..1];
  {meta::pure::profiles::doc.doc='If true, network roundtrips between the coordinating node and remote clusters are minimized for cross-cluster search requests.',meta::pure::profiles::doc.doc='More: https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cross-cluster-search.html#ccs-network-delays',meta::pure::profiles::doc.doc='Spec Location: https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cross-cluster-search.html#ccs-network-delays'} ccs_minimize_roundtrips : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Type of index that wildcard expressions can match. If the request can target data streams, this argument determines whether wildcard expressions match hidden data streams.'} expand_wildcards : meta::external::store::elasticsearch::metamodel::api::v7::types::ExpandWildcard[0..1];
  {meta::pure::profiles::doc.doc='If true, concrete, expanded or aliased indices are ignored when frozen.'} ignore_throttled : Boolean[0..1];
  {meta::pure::profiles::doc.doc='If true, missing or closed indices are not included in the response.'} ignore_unavailable : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Maximum number of concurrent searches the multi search API can execute.'} max_concurrent_searches : Integer[0..1];
  {meta::pure::profiles::doc.doc='Maximum number of concurrent shard requests that each sub-search request executes per node.'} max_concurrent_shard_requests : Integer[0..1];
  {meta::pure::profiles::doc.doc='Defines a threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method i.e., if date filters are mandatory to match but the shard bounds and the query are disjoint.'} pre_filter_shard_size : Integer[0..1];
  {meta::pure::profiles::doc.doc='If true, hits.total are returned as an integer in the response. Defaults to false, which returns an object.'} rest_total_hits_as_int : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Custom routing value used to route search operations to a specific shard.'} routing : String[0..1];
  {meta::pure::profiles::doc.doc='Indicates whether global term and document frequencies should be used when scoring returned documents.'} search_type : meta::external::store::elasticsearch::metamodel::api::v7::types::SearchType[0..1];
  {meta::pure::profiles::doc.doc='Specifies whether aggregation and suggester names should be prefixed by their respective types in the response.'} typed_keys : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::RequestItem extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  header : meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::MultisearchHeader[0..1];
  body : meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::MultisearchBody[0..1];
}

Class {meta::pure::profiles::doc.doc='Contains parameters used to limit or change the subsequent search body request.'} meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::MultisearchHeader
{
  allow_no_indices : Boolean[0..1];
  expand_wildcards : meta::external::store::elasticsearch::metamodel::api::v7::types::ExpandWildcard[0..1];
  ignore_unavailable : Boolean[0..1];
  index : String[0..1];
  preference : String[0..1];
  request_cache : Boolean[0..1];
  routing : String[0..1];
  search_type : meta::external::store::elasticsearch::metamodel::api::v7::types::SearchType[0..1];
  ccs_minimize_roundtrips : Boolean[0..1];
  allow_partial_search_results : Boolean[0..1];
  ignore_throttled : Boolean[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::ExpandWildcard
{
  all,
  open,
  closed,
  hidden,
  none
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::SearchType
{
  query_then_fetch,
  dfs_query_then_fetch
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::MultisearchBody
{
  aggregations : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregationContainer|*>[0..1];
  collapse : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::FieldCollapse[0..1];
  {meta::pure::profiles::doc.doc='Defines the search definition using the Query DSL.'} query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[0..1];
  {meta::pure::profiles::doc.doc='If true, returns detailed information about score computation as part of a hit.'} explain : Boolean[0..1];
  {meta::pure::profiles::doc.doc='List of stored fields to return as part of a hit. If no fields are specified, no stored fields are included in the response. If this field is specified, the _source parameter defaults to false. You can pass _source: true to return both source fields and stored fields in the search response.'} stored_fields : String[0..1];
  {meta::pure::profiles::doc.doc='Array of wildcard (*) patterns. The request returns doc values for field names matching these patterns in the hits.fields property of the response.'} docvalue_fields : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FieldAndFormat[*];
  {meta::pure::profiles::doc.doc='Starting document offset. By default, you cannot page through more than 10,000 hits using the from and size parameters. To page through more hits, use the search_after parameter.'} from : Integer[0..1];
  highlight : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Highlight[0..1];
  {meta::pure::profiles::doc.doc='Boosts the _score of documents from specified indices.'} indices_boost : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,Float|*>[*];
  {meta::pure::profiles::doc.doc='Minimum _score for matching documents. Documents with a lower _score are not included in the search results.'} min_score : Float[0..1];
  post_filter : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[0..1];
  profile : Boolean[0..1];
  rescore : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Rescore[*];
  {meta::pure::profiles::doc.doc='Retrieve a script evaluation (based on different fields) for each hit.'} script_fields : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptField|*>[0..1];
  search_after : meta::pure::metamodel::type::Any[0..1];
  {meta::pure::profiles::doc.doc='The number of hits to return. By default, you cannot page through more than 10,000 hits using the from and size parameters. To page through more hits, use the search_after parameter.'} size : Integer[0..1];
  sort : meta::external::store::elasticsearch::metamodel::api::v7::types::SortCombinations[0..1];
  {meta::pure::profiles::doc.doc='Indicates which source fields are returned for matching documents. These fields are returned in the hits._source property of the search response.'} _source : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SourceConfig[0..1];
  {meta::pure::profiles::doc.doc='Array of wildcard (*) patterns. The request returns values for field names matching these patterns in the hits.fields property of the response.'} fields : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FieldAndFormat[*];
  {meta::pure::profiles::doc.doc='Maximum number of documents to collect for each shard. If a query reaches this limit, Elasticsearch terminates the query early. Elasticsearch collects documents before sorting. Defaults to 0, which does not terminate query execution early.'} terminate_after : Integer[0..1];
  {meta::pure::profiles::doc.doc='Stats groups to associate with the search. Each group maintains a statistics aggregation for its associated searches. You can retrieve these stats using the indices stats API.'} stats : String[*];
  {meta::pure::profiles::doc.doc='Specifies the period of time to wait for a response from each shard. If no response is received before the timeout expires, the request fails and returns an error. Defaults to no timeout.'} timeout : String[0..1];
  {meta::pure::profiles::doc.doc='If true, calculate and return document scores, even if the scores are not used for sorting.'} track_scores : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Number of hits matching the query to count accurately. If true, the exact number of hits is returned at the cost of some performance. If false, the response does not include the total number of hits matching the query. Defaults to 10,000 hits.'} track_total_hits : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::TrackHits[0..1];
  {meta::pure::profiles::doc.doc='If true, returns document version as part of a hit.'} version : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Defines one or more runtime fields in the search request. These fields take precedence over mapped fields with the same name.'} runtime_mappings : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::mapping::RuntimeField|*>[0..1];
  {meta::pure::profiles::doc.doc='If true, returns sequence number and primary term of the last modification of each hit. See Optimistic concurrency control.'} seq_no_primary_term : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Limits the search to a point in time (PIT). If you provide a PIT, you cannot specify an <index> in the request path.'} pit : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PointInTimeReference[0..1];
  suggest : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Suggester[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregationContainer
{
  {meta::pure::profiles::doc.doc='Sub-aggregations for this aggregation. Only applies to bucket aggregations.'} aggregations : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregationContainer|*>[0..1];
  meta : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
  adjacency_matrix : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AdjacencyMatrixAggregation[0..1];
  auto_date_histogram : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AutoDateHistogramAggregation[0..1];
  avg : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AverageAggregation[0..1];
  avg_bucket : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AverageBucketAggregation[0..1];
  boxplot : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BoxplotAggregation[0..1];
  bucket_script : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketScriptAggregation[0..1];
  bucket_selector : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketSelectorAggregation[0..1];
  bucket_sort : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketSortAggregation[0..1];
  cardinality : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CardinalityAggregation[0..1];
  children : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ChildrenAggregation[0..1];
  composite : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CompositeAggregation[0..1];
  cumulative_cardinality : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CumulativeCardinalityAggregation[0..1];
  cumulative_sum : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CumulativeSumAggregation[0..1];
  date_histogram : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateHistogramAggregation[0..1];
  date_range : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateRangeAggregation[0..1];
  derivative : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DerivativeAggregation[0..1];
  diversified_sampler : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DiversifiedSamplerAggregation[0..1];
  extended_stats : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedStatsAggregation[0..1];
  extended_stats_bucket : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedStatsBucketAggregation[0..1];
  filter : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[0..1];
  filters : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FiltersAggregation[0..1];
  geo_bounds : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoBoundsAggregation[0..1];
  geo_centroid : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoCentroidAggregation[0..1];
  geo_distance : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoDistanceAggregation[0..1];
  geohash_grid : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoHashGridAggregation[0..1];
  geo_line : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoLineAggregation[0..1];
  geotile_grid : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoTileGridAggregation[0..1];
  global : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GlobalAggregation[0..1];
  histogram : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HistogramAggregation[0..1];
  ip_range : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::IpRangeAggregation[0..1];
  inference : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::InferenceAggregation[0..1];
  line : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoLineAggregation[0..1];
  matrix_stats : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MatrixStatsAggregation[0..1];
  max : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MaxAggregation[0..1];
  max_bucket : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MaxBucketAggregation[0..1];
  median_absolute_deviation : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MedianAbsoluteDeviationAggregation[0..1];
  min : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MinAggregation[0..1];
  min_bucket : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MinBucketAggregation[0..1];
  missing : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MissingAggregation[0..1];
  moving_avg : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MovingAverageAggregation[0..1];
  moving_percentiles : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MovingPercentilesAggregation[0..1];
  moving_fn : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MovingFunctionAggregation[0..1];
  multi_terms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiTermsAggregation[0..1];
  nested : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::NestedAggregation[0..1];
  normalize : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::NormalizeAggregation[0..1];
  parent : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ParentAggregation[0..1];
  percentile_ranks : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentileRanksAggregation[0..1];
  percentiles : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentilesAggregation[0..1];
  percentiles_bucket : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentilesBucketAggregation[0..1];
  range : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RangeAggregation[0..1];
  rare_terms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RareTermsAggregation[0..1];
  rate : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RateAggregation[0..1];
  reverse_nested : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ReverseNestedAggregation[0..1];
  sampler : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SamplerAggregation[0..1];
  scripted_metric : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ScriptedMetricAggregation[0..1];
  serial_diff : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SerialDifferencingAggregation[0..1];
  significant_terms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantTermsAggregation[0..1];
  significant_text : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantTextAggregation[0..1];
  stats : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StatsAggregation[0..1];
  stats_bucket : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StatsBucketAggregation[0..1];
  string_stats : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StringStatsAggregation[0..1];
  sum : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SumAggregation[0..1];
  sum_bucket : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SumBucketAggregation[0..1];
  terms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregation[0..1];
  top_hits : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TopHitsAggregation[0..1];
  t_test : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TTestAggregation[0..1];
  top_metrics : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TopMetricsAggregation[0..1];
  value_count : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ValueCountAggregation[0..1];
  weighted_avg : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::WeightedAverageAggregation[0..1];
  variable_width_histogram : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::VariableWidthHistogramAggregation[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Aggregation
{
  meta : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
  name : String[0..1];
}

Class {meta::pure::profiles::doc.doc='Base type for bucket aggregations. These aggregations also accept sub-aggregations.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Aggregation
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AdjacencyMatrixAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  filters : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer|*>[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer
{
  bool : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::BoolQuery[0..1];
  boosting : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::BoostingQuery[0..1];
  <<meta::pure::profiles::doc.deprecated>> {meta::pure::profiles::doc.doc='Deprecated (since 7.3.0): '} common : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::CommonTermsQuery|1>[0..1];
  {meta::pure::profiles::doc.doc='Since: 7.13.0'} combined_fields : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::CombinedFieldsQuery[0..1];
  constant_score : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ConstantScoreQuery[0..1];
  dis_max : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DisMaxQuery[0..1];
  distance_feature : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DistanceFeatureQuery[0..1];
  exists : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ExistsQuery[0..1];
  function_score : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FunctionScoreQuery[0..1];
  fuzzy : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FuzzyQuery|1>[0..1];
  geo_bounding_box : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoBoundingBoxQuery[0..1];
  geo_distance : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoDistanceQuery[0..1];
  geo_polygon : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoPolygonQuery[0..1];
  geo_shape : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoShapeQuery[0..1];
  has_child : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::HasChildQuery[0..1];
  has_parent : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::HasParentQuery[0..1];
  ids : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IdsQuery[0..1];
  intervals : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsQuery|1>[0..1];
  match : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MatchQuery|1>[0..1];
  match_all : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MatchAllQuery[0..1];
  match_bool_prefix : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MatchBoolPrefixQuery|1>[0..1];
  match_none : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MatchNoneQuery[0..1];
  match_phrase : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MatchPhraseQuery|1>[0..1];
  match_phrase_prefix : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MatchPhrasePrefixQuery|1>[0..1];
  more_like_this : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MoreLikeThisQuery[0..1];
  multi_match : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MultiMatchQuery[0..1];
  nested : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::NestedQuery[0..1];
  parent_id : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ParentIdQuery[0..1];
  percolate : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::PercolateQuery[0..1];
  pinned : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::PinnedQuery[0..1];
  prefix : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::PrefixQuery|1>[0..1];
  query_string : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryStringQuery[0..1];
  range : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RangeQuery|1>[0..1];
  rank_feature : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureQuery[0..1];
  regexp : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RegexpQuery|1>[0..1];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ScriptQuery[0..1];
  script_score : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ScriptScoreQuery[0..1];
  shape : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ShapeQuery[0..1];
  simple_query_string : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SimpleQueryStringQuery[0..1];
  span_containing : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanContainingQuery[0..1];
  field_masking_span : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanFieldMaskingQuery[0..1];
  span_first : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanFirstQuery[0..1];
  span_multi : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanMultiTermQuery[0..1];
  span_near : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanNearQuery[0..1];
  span_not : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanNotQuery[0..1];
  span_or : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanOrQuery[0..1];
  span_term : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanTermQuery|1>[0..1];
  span_within : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanWithinQuery[0..1];
  term : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TermQuery|1>[0..1];
  terms : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TermsQuery[0..1];
  terms_set : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TermsSetQuery|1>[0..1];
  wildcard : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::WildcardQuery|1>[0..1];
  wrapper : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::WrapperQuery[0..1];
  <<meta::pure::profiles::doc.deprecated>> {meta::pure::profiles::doc.doc='Deprecated (since 7.0.0): https://www.elastic.co/guide/en/elasticsearch/reference/7.x/removal-of-types.html'} type : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TypeQuery[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  boost : Float[0..1];
  query_name : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::BoolQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  filter : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[*];
  minimum_should_match : meta::pure::metamodel::type::Any[0..1];
  must : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[*];
  must_not : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[*];
  should : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::BoostingQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  negative_boost : Float[1];
  negative : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[1];
  positive : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::CommonTermsQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  analyzer : String[0..1];
  cutoff_frequency : Float[0..1];
  high_freq_operator : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::Operator[0..1];
  low_freq_operator : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::Operator[0..1];
  minimum_should_match : meta::pure::metamodel::type::Any[0..1];
  query : String[1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::Operator
{
  and,
  or
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::CombinedFieldsQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  fields : String[1..*];
  query : String[1];
  auto_generate_synonyms_phrase_query : Boolean[0..1];
  operator : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::CombinedFieldsOperator[0..1];
  minimum_should_match : meta::pure::metamodel::type::Any[0..1];
  zero_terms_query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::CombinedFieldsZeroTerms[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::CombinedFieldsOperator
{
  or,
  and
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::CombinedFieldsZeroTerms
{
  none,
  all
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ConstantScoreQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  filter : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DisMaxQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  queries : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[1..*];
  tie_breaker : Float[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DistanceFeatureQuery extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  geo : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoDistanceFeatureQuery[0..1];
  date : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DateDistanceFeatureQuery[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DistanceFeatureQueryBase<TOrigin,TDistance> extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  origin : TOrigin[1];
  pivot : TDistance[1];
  field : String[1];
}

Class {meta::pure::profiles::doc.doc='A latitude/longitude as a 2 dimensional point. It can be represented in various ways: - as a `{lat, long}` object - as a geo hash value - as a `[lon, lat]` array - as a string in `"<lat>, <lon>"` or WKT point formats'} meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  latlon : meta::external::store::elasticsearch::metamodel::api::v7::types::LatLonGeoLocation[0..1];
  geohash : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoHashLocation[0..1];
  coords : Float[*];
  text : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::LatLonGeoLocation
{
  lat : Float[1];
  lon : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::GeoHashLocation
{
  geohash : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoDistanceFeatureQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DistanceFeatureQueryBase<meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation,String>
{
}

Class {meta::pure::profiles::doc.doc='Whenever durations need to be specified, e.g. for a timeout parameter, the duration must specify the unit, like 2d for 2 days.',meta::pure::profiles::doc.doc='More: https://github.com/elastic/elasticsearch/blob/master/libs/core/src/main/java/org/elasticsearch/core/TimeValue.java',meta::pure::profiles::doc.doc='Spec Location: https://github.com/elastic/elasticsearch/blob/master/libs/core/src/main/java/org/elasticsearch/core/TimeValue.java'} meta::external::store::elasticsearch::metamodel::api::v7::types::Time extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  time : String[0..1];
  offset : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DateDistanceFeatureQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DistanceFeatureQueryBase<String,meta::external::store::elasticsearch::metamodel::api::v7::types::Time>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ExistsQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  field : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FunctionScoreQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  boost_mode : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FunctionBoostMode[0..1];
  functions : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FunctionScoreContainer[*];
  max_boost : Float[0..1];
  min_score : Float[0..1];
  query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[0..1];
  score_mode : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FunctionScoreMode[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FunctionBoostMode
{
  multiply,
  replace,
  sum,
  avg,
  max,
  min
}

Class {meta::pure::profiles::doc.doc='ES quirk:this container is valid without a variant. Despite being documented as a function, \'weight\' is actually a container property that can be combined with a function. Comment in the ES code (SearchModule#registerScoreFunctions) says: Weight doesn\'t have its own parser, so every function supports it out of the box. Can be a single function too when not associated to any other function, which is why it needs to be registered manually here.'} meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FunctionScoreContainer
{
  exp : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DecayFunction[0..1];
  gauss : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DecayFunction[0..1];
  linear : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DecayFunction[0..1];
  field_value_factor : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FieldValueFactorScoreFunction[0..1];
  random_score : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RandomScoreFunction[0..1];
  script_score : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ScriptScoreFunction[0..1];
  filter : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[0..1];
  weight : Float[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DecayFunction extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  date : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DateDecayFunction[0..1];
  numeric : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::NumericDecayFunction[0..1];
  geo : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoDecayFunction[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DecayFunctionBase
{
  multi_value_mode : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MultiValueMode[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MultiValueMode
{
  min,
  max,
  avg,
  sum
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DecayPlacement<TOrigin,TScale>
{
  decay : Float[0..1];
  offset : TScale[0..1];
  scale : TScale[0..1];
  origin : TOrigin[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DateDecayFunction extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DecayFunctionBase,meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperty<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DecayPlacement<String,meta::external::store::elasticsearch::metamodel::api::v7::types::Time>>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::NumericDecayFunction extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DecayFunctionBase,meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperty<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DecayPlacement<Float,Float>>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoDecayFunction extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DecayFunctionBase,meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperty<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DecayPlacement<meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation,String>>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FieldValueFactorScoreFunction
{
  field : String[1];
  factor : Float[0..1];
  missing : Float[0..1];
  modifier : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FieldValueFactorModifier[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FieldValueFactorModifier
{
  none,
  log,
  log1p,
  log2p,
  ln,
  ln1p,
  ln2p,
  square,
  sqrt,
  reciprocal
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RandomScoreFunction
{
  field : String[0..1];
  seed : meta::pure::metamodel::type::Any[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ScriptScoreFunction
{
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::Script extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  inline : meta::external::store::elasticsearch::metamodel::api::v7::types::InlineScript[0..1];
  stored : meta::external::store::elasticsearch::metamodel::api::v7::types::StoredScriptId[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptBase
{
  params : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::InlineScript extends meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptBase
{
  lang : meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptLanguage[0..1];
  options : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,String|*>[0..1];
  source : String[1];
}

Class {meta::pure::profiles::doc.doc='More: https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html',meta::pure::profiles::doc.doc='Spec Location: https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html'} meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptLanguage extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  builtin : meta::external::store::elasticsearch::metamodel::api::v7::types::BuiltinScriptLanguage[0..1];
  custom : String[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::BuiltinScriptLanguage
{
  painless,
  expression,
  mustache,
  java
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::StoredScriptId extends meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptBase
{
  id : String[1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FunctionScoreMode
{
  multiply,
  sum,
  avg,
  first,
  max,
  min
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FuzzyQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  max_expansions : Integer[0..1];
  prefix_length : Integer[0..1];
  rewrite : String[0..1];
  transpositions : Boolean[0..1];
  fuzziness : meta::pure::metamodel::type::Any[0..1];
  value : meta::pure::metamodel::type::Any[1];
}

Class {meta::pure::profiles::doc.doc='A geo bounding box. It can be represented in various ways: - as 4 top/bottom/left/right coordinates - as 2 top_left / bottom_right points - as 2 top_right / bottom_left points - as a WKT bounding box'} meta::external::store::elasticsearch::metamodel::api::v7::types::GeoBounds extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  coords : meta::external::store::elasticsearch::metamodel::api::v7::types::CoordsGeoBounds[0..1];
  tlbr : meta::external::store::elasticsearch::metamodel::api::v7::types::TopLeftBottomRightGeoBounds[0..1];
  trbl : meta::external::store::elasticsearch::metamodel::api::v7::types::TopRightBottomLeftGeoBounds[0..1];
  wkt : meta::external::store::elasticsearch::metamodel::api::v7::types::WktGeoBounds[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::CoordsGeoBounds
{
  top : Float[1];
  bottom : Float[1];
  left : Float[1];
  right : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::TopLeftBottomRightGeoBounds
{
  top_left : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation[1];
  bottom_right : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::TopRightBottomLeftGeoBounds
{
  top_right : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation[1];
  bottom_left : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::WktGeoBounds
{
  wkt : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoBoundingBoxQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase,meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperty<String,meta::external::store::elasticsearch::metamodel::api::v7::types::GeoBounds>
{
  <<meta::pure::profiles::doc.deprecated>> {meta::pure::profiles::doc.doc='Deprecated (since 7.14.0): '} type : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoExecution[0..1];
  validation_method : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoValidationMethod[0..1];
  ignore_unmapped : Boolean[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoExecution
{
  memory,
  indexed
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoValidationMethod
{
  coerce,
  ignore_malformed,
  strict
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoDistanceQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase,meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperty<String,meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation>
{
  distance : String[0..1];
  distance_type : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoDistanceType[0..1];
  validation_method : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoValidationMethod[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::GeoDistanceType
{
  arc,
  plane
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoPolygonPoints
{
  points : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation[1..*];
}

Class <<meta::pure::profiles::doc.deprecated>> {meta::pure::profiles::doc.doc='Deprecated (since 7.12.0): Use geo-shape instead.'} meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoPolygonQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase,meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperty<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoPolygonPoints>
{
  validation_method : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoValidationMethod[0..1];
  ignore_unmapped : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoShapeFieldQuery
{
  shape : meta::pure::metamodel::type::Any[0..1];
  indexed_shape : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FieldLookup[0..1];
  relation : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoShapeRelation[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FieldLookup
{
  id : String[1];
  index : String[0..1];
  path : String[0..1];
  routing : String[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::GeoShapeRelation
{
  intersects,
  disjoint,
  within,
  contains
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoShapeQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase,meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperty<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::GeoShapeFieldQuery>
{
  ignore_unmapped : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::HasChildQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  ignore_unmapped : Boolean[0..1];
  inner_hits : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::InnerHits[0..1];
  max_children : Integer[0..1];
  min_children : Integer[0..1];
  query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[1];
  score_mode : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ChildScoreMode[0..1];
  type : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::InnerHits
{
  name : String[0..1];
  size : Integer[0..1];
  from : Integer[0..1];
  collapse : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::FieldCollapse[0..1];
  docvalue_fields : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FieldAndFormat[*];
  explain : Boolean[0..1];
  highlight : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Highlight[0..1];
  ignore_unmapped : Boolean[0..1];
  script_fields : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptField|*>[0..1];
  seq_no_primary_term : Boolean[0..1];
  fields : String[0..1];
  sort : meta::external::store::elasticsearch::metamodel::api::v7::types::SortCombinations[0..1];
  _source : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SourceConfig[0..1];
  stored_field : String[0..1];
  track_scores : Boolean[0..1];
  version : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::FieldCollapse
{
  field : String[1];
  inner_hits : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::InnerHits[*];
  max_concurrent_group_searches : Integer[0..1];
}

Class {meta::pure::profiles::doc.doc='A reference to a field with formatting instructions on how to return the value'} meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FieldAndFormat
{
  {meta::pure::profiles::doc.doc='Wildcard pattern. The request returns values for field names matching this pattern.'} field : String[1];
  {meta::pure::profiles::doc.doc='Format in which the values are returned.'} format : String[0..1];
  include_unmapped : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlightBase
{
  type : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlighterType[0..1];
  boundary_chars : String[0..1];
  boundary_max_scan : Integer[0..1];
  boundary_scanner : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::BoundaryScanner[0..1];
  boundary_scanner_locale : String[0..1];
  force_source : Boolean[0..1];
  fragmenter : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlighterFragmenter[0..1];
  fragment_size : Integer[0..1];
  highlight_filter : Boolean[0..1];
  highlight_query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[0..1];
  max_fragment_length : Integer[0..1];
  max_analyzed_offset : Integer[0..1];
  no_match_size : Integer[0..1];
  number_of_fragments : Integer[0..1];
  options : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
  order : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlighterOrder[0..1];
  phrase_limit : Integer[0..1];
  post_tags : String[*];
  pre_tags : String[*];
  require_field_match : Boolean[0..1];
  tags_schema : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlighterTagsSchema[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlighterType extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  builtin : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::BuiltinHighlighterType[0..1];
  custom : String[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::BuiltinHighlighterType
{
  plain,
  fast_vector,
  unified
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::BoundaryScanner
{
  chars,
  sentence,
  word
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlighterFragmenter
{
  simple,
  span
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlighterOrder
{
  score
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlighterTagsSchema
{
  styled
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Highlight extends meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlightBase
{
  encoder : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlighterEncoder[0..1];
  fields : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlightField|*>[1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlighterEncoder
{
  default,
  html
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlightField extends meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HighlightBase
{
  fragment_offset : Integer[0..1];
  matched_fields : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptField
{
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[1];
  ignore_failure : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::SortCombinations extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  field : String[0..1];
  options : meta::external::store::elasticsearch::metamodel::api::v7::types::SortOptions[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::FieldSort
{
  missing : meta::pure::metamodel::type::Any[0..1];
  mode : meta::external::store::elasticsearch::metamodel::api::v7::types::SortMode[0..1];
  nested : meta::external::store::elasticsearch::metamodel::api::v7::types::NestedSortValue[0..1];
  order : meta::external::store::elasticsearch::metamodel::api::v7::types::SortOrder[0..1];
  unmapped_type : meta::external::store::elasticsearch::metamodel::api::v7::types::mapping::FieldType[0..1];
  numeric_type : meta::external::store::elasticsearch::metamodel::api::v7::types::FieldSortNumericType[0..1];
  format : String[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::SortMode
{
  min,
  max,
  sum,
  avg,
  median
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::NestedSortValue
{
  filter : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[0..1];
  max_children : Integer[0..1];
  nested : meta::external::store::elasticsearch::metamodel::api::v7::types::NestedSortValue[0..1];
  path : String[1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::SortOrder
{
  asc,
  desc
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::mapping::FieldType
{
  none,
  geo_point,
  geo_shape,
  ip,
  binary,
  keyword,
  text,
  search_as_you_type,
  date,
  date_nanos,
  boolean,
  completion,
  nested,
  object,
  murmur3,
  token_count,
  percolator,
  integer,
  long,
  short,
  byte,
  float,
  half_float,
  scaled_float,
  double,
  integer_range,
  float_range,
  long_range,
  double_range,
  date_range,
  ip_range,
  alias,
  join,
  rank_feature,
  rank_features,
  flattened,
  shape,
  histogram,
  constant_keyword,
  aggregate_metric_double,
  dense_vector,
  match_only_text
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::FieldSortNumericType
{
  long,
  double,
  date,
  date_nanos
}

Class {meta::pure::profiles::doc.doc='More: https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html',meta::pure::profiles::doc.doc='Spec Location: https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html'} meta::external::store::elasticsearch::metamodel::api::v7::types::SortOptions extends meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperty<String,meta::external::store::elasticsearch::metamodel::api::v7::types::FieldSort>
{
  _score : meta::external::store::elasticsearch::metamodel::api::v7::types::ScoreSort[0..1];
  _doc : meta::external::store::elasticsearch::metamodel::api::v7::types::ScoreSort[0..1];
  _geo_distance : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoDistanceSort[0..1];
  _script : meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptSort[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::ScoreSort
{
  order : meta::external::store::elasticsearch::metamodel::api::v7::types::SortOrder[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::GeoDistanceSort extends meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperty<String,meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation>
{
  mode : meta::external::store::elasticsearch::metamodel::api::v7::types::SortMode[0..1];
  distance_type : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoDistanceType[0..1];
  ignore_unmapped : Boolean[0..1];
  order : meta::external::store::elasticsearch::metamodel::api::v7::types::SortOrder[0..1];
  unit : meta::external::store::elasticsearch::metamodel::api::v7::types::DistanceUnit[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::DistanceUnit
{
  inches,
  feet,
  yards,
  miles,
  nautic_miles,
  kilometers,
  meters,
  centimeters,
  millimeters
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptSort
{
  order : meta::external::store::elasticsearch::metamodel::api::v7::types::SortOrder[0..1];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[1];
  type : meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptSortType[0..1];
  mode : meta::external::store::elasticsearch::metamodel::api::v7::types::SortMode[0..1];
  nested : meta::external::store::elasticsearch::metamodel::api::v7::types::NestedSortValue[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptSortType
{
  string,
  number
}

Class {meta::pure::profiles::doc.doc='Defines how to fetch a source. Fetching can be disabled entirely, or the source can be filtered.'} meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SourceConfig extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  fetch : Boolean[0..1];
  filter : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SourceFilter[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SourceFilter
{
  excludes : String[0..1];
  includes : String[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ChildScoreMode
{
  none,
  avg,
  sum,
  max,
  min
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::HasParentQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  ignore_unmapped : Boolean[0..1];
  inner_hits : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::InnerHits[0..1];
  parent_type : String[1];
  query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[1];
  score : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IdsQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  values : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  all_of : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsAllOf[0..1];
  any_of : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsAnyOf[0..1];
  fuzzy : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsFuzzy[0..1];
  match : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsMatch[0..1];
  prefix : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsPrefix[0..1];
  wildcard : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsWildcard[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsAllOf
{
  intervals : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsContainer[1..*];
  max_gaps : Integer[0..1];
  ordered : Boolean[0..1];
  filter : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsFilter[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsContainer
{
  all_of : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsAllOf[0..1];
  any_of : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsAnyOf[0..1];
  fuzzy : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsFuzzy[0..1];
  match : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsMatch[0..1];
  prefix : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsPrefix[0..1];
  wildcard : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsWildcard[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsAnyOf
{
  intervals : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsContainer[1..*];
  filter : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsFilter[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsFilter
{
  after : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsContainer[0..1];
  before : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsContainer[0..1];
  contained_by : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsContainer[0..1];
  containing : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsContainer[0..1];
  not_contained_by : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsContainer[0..1];
  not_containing : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsContainer[0..1];
  not_overlapping : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsContainer[0..1];
  overlapping : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsContainer[0..1];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsFuzzy
{
  analyzer : String[0..1];
  fuzziness : meta::pure::metamodel::type::Any[0..1];
  prefix_length : Integer[0..1];
  term : String[1];
  transpositions : Boolean[0..1];
  use_field : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsMatch
{
  analyzer : String[0..1];
  max_gaps : Integer[0..1];
  ordered : Boolean[0..1];
  query : String[1];
  use_field : String[0..1];
  filter : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsFilter[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsPrefix
{
  analyzer : String[0..1];
  prefix : String[1];
  use_field : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::IntervalsWildcard
{
  analyzer : String[0..1];
  pattern : String[1];
  use_field : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MatchQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  analyzer : String[0..1];
  auto_generate_synonyms_phrase_query : Boolean[0..1];
  <<meta::pure::profiles::doc.deprecated>> {meta::pure::profiles::doc.doc='Deprecated (since 7.3.0): '} cutoff_frequency : Float[0..1];
  fuzziness : meta::pure::metamodel::type::Any[0..1];
  fuzzy_rewrite : String[0..1];
  fuzzy_transpositions : Boolean[0..1];
  lenient : Boolean[0..1];
  max_expansions : Integer[0..1];
  minimum_should_match : meta::pure::metamodel::type::Any[0..1];
  operator : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::Operator[0..1];
  prefix_length : Integer[0..1];
  query : meta::pure::metamodel::type::Any[1];
  zero_terms_query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ZeroTermsQuery[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ZeroTermsQuery
{
  all,
  none
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MatchAllQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MatchBoolPrefixQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  analyzer : String[0..1];
  fuzziness : meta::pure::metamodel::type::Any[0..1];
  fuzzy_rewrite : String[0..1];
  fuzzy_transpositions : Boolean[0..1];
  max_expansions : Integer[0..1];
  minimum_should_match : meta::pure::metamodel::type::Any[0..1];
  operator : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::Operator[0..1];
  prefix_length : Integer[0..1];
  query : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MatchNoneQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MatchPhraseQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  analyzer : String[0..1];
  query : String[1];
  slop : Integer[0..1];
  zero_terms_query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ZeroTermsQuery[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MatchPhrasePrefixQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  analyzer : String[0..1];
  max_expansions : Integer[0..1];
  query : String[1];
  slop : Integer[0..1];
  zero_terms_query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ZeroTermsQuery[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MoreLikeThisQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  analyzer : String[0..1];
  boost_terms : Float[0..1];
  fail_on_unsupported_field : Boolean[0..1];
  fields : String[*];
  include : Boolean[0..1];
  like : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::Like[1..*];
  max_doc_freq : Integer[0..1];
  max_query_terms : Integer[0..1];
  max_word_length : Integer[0..1];
  min_doc_freq : Integer[0..1];
  minimum_should_match : meta::pure::metamodel::type::Any[0..1];
  min_term_freq : Integer[0..1];
  min_word_length : Integer[0..1];
  per_field_analyzer : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,String|*>[0..1];
  routing : String[0..1];
  stop_words : String[0..1];
  unlike : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::Like[*];
  version : Integer[0..1];
  version_type : meta::external::store::elasticsearch::metamodel::api::v7::types::VersionType[0..1];
}

Class {meta::pure::profiles::doc.doc='Text that we want similar documents for or a lookup to a document\'s field for the text.',meta::pure::profiles::doc.doc='More: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html#_document_input_parameters',meta::pure::profiles::doc.doc='Spec Location: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html#_document_input_parameters'} meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::Like extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  text : String[0..1];
  document : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::LikeDocument[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::LikeDocument
{
  doc : meta::pure::metamodel::type::Any[0..1];
  fields : String[*];
  _id : String[0..1];
  _type : String[0..1];
  _index : String[0..1];
  per_field_analyzer : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,String|*>[0..1];
  routing : String[0..1];
  version : Integer[0..1];
  version_type : meta::external::store::elasticsearch::metamodel::api::v7::types::VersionType[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::VersionType
{
  internal,
  external,
  external_gte,
  force
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::MultiMatchQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  analyzer : String[0..1];
  auto_generate_synonyms_phrase_query : Boolean[0..1];
  <<meta::pure::profiles::doc.deprecated>> {meta::pure::profiles::doc.doc='Deprecated (since 7.3.0): '} cutoff_frequency : Float[0..1];
  fields : String[0..1];
  fuzziness : meta::pure::metamodel::type::Any[0..1];
  fuzzy_rewrite : String[0..1];
  fuzzy_transpositions : Boolean[0..1];
  lenient : Boolean[0..1];
  max_expansions : Integer[0..1];
  minimum_should_match : meta::pure::metamodel::type::Any[0..1];
  operator : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::Operator[0..1];
  prefix_length : Integer[0..1];
  query : String[1];
  slop : Integer[0..1];
  tie_breaker : Float[0..1];
  type : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TextQueryType[0..1];
  zero_terms_query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ZeroTermsQuery[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TextQueryType
{
  best_fields,
  most_fields,
  cross_fields,
  phrase,
  phrase_prefix,
  bool_prefix
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::NestedQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  ignore_unmapped : Boolean[0..1];
  inner_hits : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::InnerHits[0..1];
  path : String[1];
  query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[1];
  score_mode : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ChildScoreMode[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ParentIdQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  id : String[0..1];
  ignore_unmapped : Boolean[0..1];
  type : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::PercolateQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  document : meta::pure::metamodel::type::Any[0..1];
  documents : meta::pure::metamodel::type::Any[*];
  field : String[1];
  id : String[0..1];
  index : String[0..1];
  name : String[0..1];
  preference : String[0..1];
  routing : String[0..1];
  version : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::PinnedQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  organic : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[1];
  ids : String[*];
  docs : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::PinnedDoc[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::PinnedDoc
{
  _id : String[1];
  _index : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::PrefixQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  rewrite : String[0..1];
  value : String[1];
  {meta::pure::profiles::doc.doc='Since: 7.10.0'} case_insensitive : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryStringQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  allow_leading_wildcard : Boolean[0..1];
  analyzer : String[0..1];
  analyze_wildcard : Boolean[0..1];
  auto_generate_synonyms_phrase_query : Boolean[0..1];
  default_field : String[0..1];
  default_operator : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::Operator[0..1];
  enable_position_increments : Boolean[0..1];
  escape : Boolean[0..1];
  fields : String[*];
  fuzziness : meta::pure::metamodel::type::Any[0..1];
  fuzzy_max_expansions : Integer[0..1];
  fuzzy_prefix_length : Integer[0..1];
  fuzzy_rewrite : String[0..1];
  fuzzy_transpositions : Boolean[0..1];
  lenient : Boolean[0..1];
  max_determinized_states : Integer[0..1];
  minimum_should_match : meta::pure::metamodel::type::Any[0..1];
  phrase_slop : Float[0..1];
  query : String[1];
  quote_analyzer : String[0..1];
  quote_field_suffix : String[0..1];
  rewrite : String[0..1];
  tie_breaker : Float[0..1];
  time_zone : String[0..1];
  type : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TextQueryType[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RangeQuery extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  date : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DateRangeQuery[0..1];
  number : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::NumberRangeQuery[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RangeQueryBase extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  relation : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RangeRelation[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RangeRelation
{
  within,
  contains,
  intersects
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::DateRangeQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RangeQueryBase
{
  gt : String[0..1];
  gte : String[0..1];
  lt : String[0..1];
  lte : String[0..1];
  from : String[0..1];
  to : String[0..1];
  format : String[0..1];
  time_zone : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::NumberRangeQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RangeQueryBase
{
  gt : Float[0..1];
  gte : Float[0..1];
  lt : Float[0..1];
  lte : Float[0..1];
  from : Float[0..1];
  to : Float[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  field : String[1];
  saturation : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureFunctionSaturation[0..1];
  log : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureFunctionLogarithm[0..1];
  linear : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureFunctionLinear[0..1];
  sigmoid : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureFunctionSigmoid[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureFunction
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureFunctionSaturation extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureFunction
{
  pivot : Float[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureFunctionLogarithm extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureFunction
{
  scaling_factor : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureFunctionLinear extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureFunction
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureFunctionSigmoid extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RankFeatureFunction
{
  pivot : Float[1];
  exponent : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::RegexpQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  {meta::pure::profiles::doc.doc='Since: 7.10.0'} case_insensitive : Boolean[0..1];
  flags : String[0..1];
  max_determinized_states : Integer[0..1];
  rewrite : String[0..1];
  value : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ScriptQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ScriptScoreQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  min_score : Float[0..1];
  query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[1];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ShapeFieldQuery
{
  indexed_shape : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FieldLookup[0..1];
  relation : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoShapeRelation[0..1];
  shape : meta::pure::metamodel::type::Any[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ShapeQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase,meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperty<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::ShapeFieldQuery>
{
  ignore_unmapped : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SimpleQueryStringQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  analyzer : String[0..1];
  analyze_wildcard : Boolean[0..1];
  auto_generate_synonyms_phrase_query : Boolean[0..1];
  default_operator : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::Operator[0..1];
  fields : String[*];
  flags : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SimpleQueryStringFlags[0..1];
  fuzzy_max_expansions : Integer[0..1];
  fuzzy_prefix_length : Integer[0..1];
  fuzzy_transpositions : Boolean[0..1];
  lenient : Boolean[0..1];
  minimum_should_match : meta::pure::metamodel::type::Any[0..1];
  query : String[1];
  quote_field_suffix : String[0..1];
}

Class {meta::pure::profiles::doc.doc='Query flags can be either a single flag or a combination of flags, e.g. `OR|AND|PREFIX`',meta::pure::profiles::doc.doc='More: https://www.elastic.co/guide/en/elasticsearch/reference/7.15/query-dsl-simple-query-string-query.html#supported-flags',meta::pure::profiles::doc.doc='Spec Location: https://www.elastic.co/guide/en/elasticsearch/reference/7.15/query-dsl-simple-query-string-query.html#supported-flags'} meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SimpleQueryStringFlags extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  single : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SimpleQueryStringFlag[0..1];
  multiple : String[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SimpleQueryStringFlag
{
  NONE,
  AND,
  OR,
  NOT,
  PREFIX,
  PHRASE,
  PRECEDENCE,
  ESCAPE,
  WHITESPACE,
  FUZZY,
  NEAR,
  SLOP,
  ALL
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanContainingQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  big : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanQuery[1];
  little : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanQuery[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanQuery
{
  span_containing : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanContainingQuery[0..1];
  field_masking_span : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanFieldMaskingQuery[0..1];
  span_first : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanFirstQuery[0..1];
  span_gap : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,Integer|1>[0..1];
  span_multi : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanMultiTermQuery[0..1];
  span_near : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanNearQuery[0..1];
  span_not : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanNotQuery[0..1];
  span_or : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanOrQuery[0..1];
  span_term : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanTermQuery|1>[0..1];
  span_within : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanWithinQuery[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanFieldMaskingQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  field : String[1];
  query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanQuery[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanFirstQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  end : Integer[1];
  match : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanQuery[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanMultiTermQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  {meta::pure::profiles::doc.doc='Should be a multi term query (one of wildcard, fuzzy, prefix, range or regexp query)'} match : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanNearQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  clauses : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanQuery[1..*];
  in_order : Boolean[0..1];
  slop : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanNotQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  dist : Integer[0..1];
  exclude : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanQuery[1];
  include : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanQuery[1];
  post : Integer[0..1];
  pre : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanOrQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  clauses : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanQuery[1..*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanTermQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  value : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanWithinQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  big : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanQuery[1];
  little : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::SpanQuery[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TermQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  value : meta::external::store::elasticsearch::metamodel::api::v7::types::FieldValue[1];
  {meta::pure::profiles::doc.doc='Since: 7.10.0'} case_insensitive : Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc='A field value.'} meta::external::store::elasticsearch::metamodel::api::v7::types::FieldValue extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  long : Integer[0..1];
  double : Float[0..1];
  string : String[0..1];
  boolean : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TermsQueryField extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  value : meta::external::store::elasticsearch::metamodel::api::v7::types::FieldValue[*];
  lookup : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TermsLookup[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TermsLookup
{
  index : String[1];
  id : String[1];
  path : String[1];
  routing : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TermsQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase,meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperty<String,meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TermsQueryField>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TermsSetQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  minimum_should_match_field : String[0..1];
  minimum_should_match_script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
  terms : String[1..*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::WildcardQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  {meta::pure::profiles::doc.doc='Allows case insensitive matching of the pattern with the indexed field values when set to true. Default is false which means the case sensitivity of matching depends on the underlying fieldâ€™s mapping.',meta::pure::profiles::doc.doc='Since: 7.10.0'} case_insensitive : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Method used to rewrite the query'} rewrite : String[0..1];
  {meta::pure::profiles::doc.doc='Wildcard pattern for terms you wish to find in the provided field. Required, when wildcard is not set.'} value : String[0..1];
  {meta::pure::profiles::doc.doc='Wildcard pattern for terms you wish to find in the provided field. Required, when value is not set.'} wildcard : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::WrapperQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  {meta::pure::profiles::doc.doc='A base64 encoded query. The binary data format can be any of JSON, YAML, CBOR or SMILE encodings'} query : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::TypeQuery extends meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryBase
{
  value : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AutoDateHistogramAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  buckets : Integer[0..1];
  field : String[0..1];
  format : String[0..1];
  minimum_interval : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MinimumInterval[0..1];
  missing : String[0..1];
  offset : String[0..1];
  params : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
  time_zone : String[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MinimumInterval
{
  second,
  minute,
  hour,
  day,
  month,
  year
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MetricAggregationBase
{
  field : String[0..1];
  missing : meta::pure::metamodel::type::Any[0..1];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FormatMetricAggregationBase extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MetricAggregationBase
{
  format : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AverageAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FormatMetricAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Aggregation
{
  buckets_path : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketsPath[0..1];
  format : String[0..1];
  gap_policy : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GapPolicy[0..1];
}

Class {meta::pure::profiles::doc.doc='Buckets path can be expressed in different ways, and an aggregation may accept some or all of these forms depending on its type. Please refer to each aggregation\'s documentation to know what buckets path forms they accept.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketsPath extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  single : String[0..1];
  array : String[*];
  dict : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,String|*>[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GapPolicy
{
  skip,
  insert_zeros
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AverageBucketAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BoxplotAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MetricAggregationBase
{
  compression : Float[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketScriptAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketSelectorAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketSortAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Aggregation
{
  from : Integer[0..1];
  gap_policy : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GapPolicy[0..1];
  size : Integer[0..1];
  sort : meta::external::store::elasticsearch::metamodel::api::v7::types::SortCombinations[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CardinalityAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MetricAggregationBase
{
  precision_threshold : Integer[0..1];
  rehash : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ChildrenAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  type : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CompositeAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  after : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
  size : Integer[0..1];
  sources : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CompositeAggregationSource|*>[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CompositeAggregationSource
{
  terms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregation[0..1];
  histogram : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HistogramAggregation[0..1];
  date_histogram : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateHistogramAggregation[0..1];
  geotile_grid : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoTileGridAggregation[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  collect_mode : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregationCollectMode[0..1];
  exclude : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsExclude[0..1];
  execution_hint : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregationExecutionHint[0..1];
  field : String[0..1];
  include : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsInclude[0..1];
  min_doc_count : Integer[0..1];
  missing : meta::pure::metamodel::type::Any[0..1];
  missing_order : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MissingOrder[0..1];
  missing_bucket : Boolean[0..1];
  value_type : String[0..1];
  order : meta::pure::metamodel::type::Any[0..1];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
  shard_size : Integer[0..1];
  show_term_doc_count_error : Boolean[0..1];
  size : Integer[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregationCollectMode
{
  depth_first,
  breadth_first
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsExclude extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  regexp : String[0..1];
  terms : String[*];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregationExecutionHint
{
  map,
  global_ordinals,
  global_ordinals_hash,
  global_ordinals_low_cardinality
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsInclude extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  regexp : String[0..1];
  terms : String[*];
  partition : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsPartition[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsPartition
{
  num_partitions : Integer[1];
  partition : Integer[1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MissingOrder
{
  first,
  last,
  default
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HistogramAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  extended_bounds : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedBounds<Float>[0..1];
  hard_bounds : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedBounds<Float>[0..1];
  field : String[0..1];
  interval : Float[0..1];
  min_doc_count : Integer[0..1];
  missing : Float[0..1];
  offset : Float[0..1];
  order : meta::pure::metamodel::type::Any[0..1];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
  format : String[0..1];
  keyed : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedBounds<T>
{
  max : T[1];
  min : T[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateHistogramAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  calendar_interval : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CalendarInterval[0..1];
  extended_bounds : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedBounds<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FieldDateMath>[0..1];
  hard_bounds : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedBounds<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FieldDateMath>[0..1];
  field : String[0..1];
  fixed_interval : meta::external::store::elasticsearch::metamodel::api::v7::types::Time[0..1];
  format : String[0..1];
  interval : meta::external::store::elasticsearch::metamodel::api::v7::types::Time[0..1];
  min_doc_count : Integer[0..1];
  missing : String[0..1];
  offset : meta::external::store::elasticsearch::metamodel::api::v7::types::Time[0..1];
  order : meta::pure::metamodel::type::Any[0..1];
  params : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
  time_zone : String[0..1];
  keyed : Boolean[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CalendarInterval
{
  second,
  minute,
  hour,
  day,
  week,
  month,
  quarter,
  year
}

Class {meta::pure::profiles::doc.doc='A date range limit, represented either as a DateMath expression or a number expressed according to the target field\'s precision.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FieldDateMath extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  expr : String[0..1];
  value : Float[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoTileGridAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  field : String[0..1];
  precision : Number[0..1];
  shard_size : Integer[0..1];
  size : Integer[0..1];
  bounds : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoBounds[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CumulativeCardinalityAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CumulativeSumAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateRangeAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  field : String[0..1];
  format : String[0..1];
  missing : meta::pure::metamodel::type::Any[0..1];
  ranges : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateRangeExpression[*];
  time_zone : String[0..1];
  keyed : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateRangeExpression
{
  from : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FieldDateMath[0..1];
  key : String[0..1];
  to : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FieldDateMath[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DerivativeAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DiversifiedSamplerAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  execution_hint : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SamplerAggregationExecutionHint[0..1];
  max_docs_per_value : Integer[0..1];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
  shard_size : Integer[0..1];
  field : String[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SamplerAggregationExecutionHint
{
  map,
  global_ordinals,
  bytes_hash
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedStatsAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FormatMetricAggregationBase
{
  sigma : Float[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedStatsBucketAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
  sigma : Float[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FiltersAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  filters : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Buckets<meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer>[0..1];
  other_bucket : Boolean[0..1];
  other_bucket_key : String[0..1];
  keyed : Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc='Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for the different buckets, the result is a dictionary.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Buckets<TBucket> extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  keyed : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,TBucket|*>[0..1];
  array : TBucket[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoBoundsAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MetricAggregationBase
{
  wrap_longitude : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoCentroidAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MetricAggregationBase
{
  count : Integer[0..1];
  location : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoDistanceAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  distance_type : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoDistanceType[0..1];
  field : String[0..1];
  origin : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation[0..1];
  ranges : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregationRange[*];
  unit : meta::external::store::elasticsearch::metamodel::api::v7::types::DistanceUnit[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregationRange
{
  from : meta::pure::metamodel::type::Any[0..1];
  key : String[0..1];
  to : meta::pure::metamodel::type::Any[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoHashGridAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  bounds : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoBounds[0..1];
  field : String[0..1];
  precision : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoHashPrecision[0..1];
  shard_size : Integer[0..1];
  size : Integer[0..1];
}

Class {meta::pure::profiles::doc.doc='A precision that can be expressed as a geohash length between 1 and 12, or a distance measure like "1km", "10m".'} meta::external::store::elasticsearch::metamodel::api::v7::types::GeoHashPrecision extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  geohash_length : Number[0..1];
  distance : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoLineAggregation
{
  point : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoLinePoint[1];
  sort : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoLineSort[1];
  include_sort : Boolean[0..1];
  sort_order : meta::external::store::elasticsearch::metamodel::api::v7::types::SortOrder[0..1];
  size : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoLinePoint
{
  field : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoLineSort
{
  field : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GlobalAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::IpRangeAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  field : String[0..1];
  ranges : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::IpRangeAggregationRange[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::IpRangeAggregationRange
{
  from : String[0..1];
  mask : String[0..1];
  to : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::InferenceAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
  model_id : String[1];
  inference_config : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::InferenceConfigContainer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::InferenceConfigContainer
{
  {meta::pure::profiles::doc.doc='Regression configuration for inference.'} regression : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RegressionInferenceOptions[0..1];
  {meta::pure::profiles::doc.doc='Classification configuration for inference.'} classification : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ClassificationInferenceOptions[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RegressionInferenceOptions
{
  {meta::pure::profiles::doc.doc='The field that is added to incoming documents to contain the inference prediction. Defaults to predicted_value.'} results_field : String[0..1];
  {meta::pure::profiles::doc.doc='Specifies the maximum number of feature importance values per document. By default, it is zero and no feature importance calculation occurs.',meta::pure::profiles::doc.doc='More: https://www.elastic.co/guide/en/machine-learning/7.12/ml-feature-importance.html',meta::pure::profiles::doc.doc='Spec Location: https://www.elastic.co/guide/en/machine-learning/7.12/ml-feature-importance.html'} num_top_feature_importance_values : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ClassificationInferenceOptions
{
  {meta::pure::profiles::doc.doc='Specifies the number of top class predictions to return. Defaults to 0.'} num_top_classes : Integer[0..1];
  {meta::pure::profiles::doc.doc='Specifies the maximum number of feature importance values per document. By default, it is zero and no feature importance calculation occurs.',meta::pure::profiles::doc.doc='More: https://www.elastic.co/guide/en/machine-learning/7.12/ml-feature-importance.html',meta::pure::profiles::doc.doc='Spec Location: https://www.elastic.co/guide/en/machine-learning/7.12/ml-feature-importance.html'} num_top_feature_importance_values : Integer[0..1];
  {meta::pure::profiles::doc.doc='Specifies the type of the predicted field to write. Acceptable values are: string, number, boolean. When boolean is provided 1.0 is transformed to true and 0.0 to false.'} prediction_field_type : String[0..1];
  {meta::pure::profiles::doc.doc='The field that is added to incoming documents to contain the inference prediction. Defaults to predicted_value.'} results_field : String[0..1];
  {meta::pure::profiles::doc.doc='Specifies the field to which the top classes are written. Defaults to top_classes.'} top_classes_results_field : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MatrixAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Aggregation
{
  fields : String[0..1];
  missing : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,Float|*>[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MatrixStatsAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MatrixAggregation
{
  mode : meta::external::store::elasticsearch::metamodel::api::v7::types::SortMode[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MaxAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FormatMetricAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MaxBucketAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MedianAbsoluteDeviationAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FormatMetricAggregationBase
{
  compression : Float[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MinAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FormatMetricAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MinBucketAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MissingAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  field : String[0..1];
  missing : meta::pure::metamodel::type::Any[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MovingAverageAggregation extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  linear : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::LinearMovingAverageAggregation[0..1];
  simple : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SimpleMovingAverageAggregation[0..1];
  ewma : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::EwmaMovingAverageAggregation[0..1];
  holt : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HoltMovingAverageAggregation[0..1];
  holt_winters : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HoltWintersMovingAverageAggregation[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MovingAverageAggregationBase extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
  minimize : Boolean[0..1];
  predict : Integer[0..1];
  window : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::LinearMovingAverageAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MovingAverageAggregationBase
{
  settings : meta::external::store::elasticsearch::metamodel::api::v7::types::EmptyObject[1];
  model(){
    'linear';
  }: String[1];
}

Class {meta::pure::profiles::doc.doc='For empty Class assignments'} meta::external::store::elasticsearch::metamodel::api::v7::types::EmptyObject
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SimpleMovingAverageAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MovingAverageAggregationBase
{
  settings : meta::external::store::elasticsearch::metamodel::api::v7::types::EmptyObject[1];
  model(){
    'simple';
  }: String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::EwmaMovingAverageAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MovingAverageAggregationBase
{
  settings : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::EwmaModelSettings[1];
  model(){
    'ewma';
  }: String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::EwmaModelSettings
{
  alpha : Float[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HoltMovingAverageAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MovingAverageAggregationBase
{
  settings : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HoltLinearModelSettings[1];
  model(){
    'holt';
  }: String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HoltLinearModelSettings
{
  alpha : Float[0..1];
  beta : Float[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HoltWintersMovingAverageAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MovingAverageAggregationBase
{
  settings : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HoltWintersModelSettings[1];
  model(){
    'holt_winters';
  }: String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HoltWintersModelSettings
{
  alpha : Float[0..1];
  beta : Float[0..1];
  gamma : Float[0..1];
  pad : Boolean[0..1];
  period : Integer[0..1];
  type : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HoltWintersType[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HoltWintersType
{
  Additive,
  Multiplicative
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MovingPercentilesAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
  window : Integer[0..1];
  shift : Integer[0..1];
  keyed : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MovingFunctionAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
  script : String[0..1];
  shift : Integer[0..1];
  window : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiTermsAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  collect_mode : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregationCollectMode[0..1];
  order : meta::pure::metamodel::type::Any[0..1];
  min_doc_count : Integer[0..1];
  shard_min_doc_count : Integer[0..1];
  shard_size : Integer[0..1];
  show_term_doc_count_error : Boolean[0..1];
  size : Integer[0..1];
  terms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiTermLookup[1..*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiTermLookup
{
  field : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::NestedAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  path : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::NormalizeAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
  method : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::NormalizeMethod[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::NormalizeMethod
{
  rescale_0_1,
  rescale_0_100,
  percent_of_sum,
  mean,
  z_score,
  softmax
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ParentAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  type : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentileRanksAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FormatMetricAggregationBase
{
  keyed : Boolean[0..1];
  values : Float[*];
  hdr : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HdrMethod[0..1];
  tdigest : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TDigest[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HdrMethod
{
  number_of_significant_value_digits : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TDigest
{
  compression : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentilesAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FormatMetricAggregationBase
{
  keyed : Boolean[0..1];
  percents : Float[*];
  hdr : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HdrMethod[0..1];
  tdigest : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TDigest[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentilesBucketAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
  percents : Float[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RangeAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  field : String[0..1];
  missing : Integer[0..1];
  ranges : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregationRange[*];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
  keyed : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RareTermsAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  exclude : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsExclude[0..1];
  field : String[0..1];
  include : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsInclude[0..1];
  max_doc_count : Integer[0..1];
  missing : meta::pure::metamodel::type::Any[0..1];
  precision : Float[0..1];
  value_type : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RateAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FormatMetricAggregationBase
{
  unit : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CalendarInterval[0..1];
  mode : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RateMode[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RateMode
{
  sum,
  value_count
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ReverseNestedAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  path : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SamplerAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  shard_size : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ScriptedMetricAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MetricAggregationBase
{
  combine_script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
  init_script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
  map_script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
  params : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
  reduce_script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SerialDifferencingAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
  lag : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantTermsAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  background_filter : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[0..1];
  chi_square : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ChiSquareHeuristic[0..1];
  exclude : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsExclude[0..1];
  execution_hint : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregationExecutionHint[0..1];
  field : String[0..1];
  gnd : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GoogleNormalizedDistanceHeuristic[0..1];
  include : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsInclude[0..1];
  min_doc_count : Integer[0..1];
  mutual_information : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MutualInformationHeuristic[0..1];
  percentage : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentageScoreHeuristic[0..1];
  script_heuristic : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ScriptedHeuristic[0..1];
  shard_min_doc_count : Integer[0..1];
  shard_size : Integer[0..1];
  size : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ChiSquareHeuristic
{
  background_is_superset : Boolean[1];
  include_negatives : Boolean[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GoogleNormalizedDistanceHeuristic
{
  background_is_superset : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MutualInformationHeuristic
{
  background_is_superset : Boolean[0..1];
  include_negatives : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentageScoreHeuristic
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ScriptedHeuristic
{
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantTextAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketAggregationBase
{
  background_filter : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[0..1];
  chi_square : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ChiSquareHeuristic[0..1];
  exclude : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsExclude[0..1];
  execution_hint : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregationExecutionHint[0..1];
  field : String[0..1];
  filter_duplicate_text : Boolean[0..1];
  gnd : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GoogleNormalizedDistanceHeuristic[0..1];
  include : String[*];
  min_doc_count : Integer[0..1];
  mutual_information : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MutualInformationHeuristic[0..1];
  percentage : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentageScoreHeuristic[0..1];
  script_heuristic : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ScriptedHeuristic[0..1];
  shard_min_doc_count : Integer[0..1];
  shard_size : Integer[0..1];
  size : Integer[0..1];
  source_fields : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StatsAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FormatMetricAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StatsBucketAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StringStatsAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MetricAggregationBase
{
  show_distribution : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SumAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FormatMetricAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SumBucketAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PipelineAggregationBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TopHitsAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MetricAggregationBase
{
  docvalue_fields : String[0..1];
  explain : Boolean[0..1];
  from : Integer[0..1];
  highlight : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Highlight[0..1];
  script_fields : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptField|*>[0..1];
  size : Integer[0..1];
  sort : meta::external::store::elasticsearch::metamodel::api::v7::types::SortCombinations[0..1];
  _source : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SourceConfig[0..1];
  stored_fields : String[0..1];
  track_scores : Boolean[0..1];
  version : Boolean[0..1];
  seq_no_primary_term : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TTestAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Aggregation
{
  a : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TestPopulation[0..1];
  b : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TestPopulation[0..1];
  type : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TTestType[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TestPopulation
{
  field : String[1];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
  filter : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TTestType
{
  paired,
  homoscedastic,
  heteroscedastic
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TopMetricsAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MetricAggregationBase
{
  metrics : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TopMetricsValue[*];
  size : Integer[0..1];
  sort : meta::external::store::elasticsearch::metamodel::api::v7::types::SortCombinations[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TopMetricsValue
{
  field : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FormattableMetricAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MetricAggregationBase
{
  format : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ValueCountAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FormattableMetricAggregation
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::WeightedAverageAggregation extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Aggregation
{
  format : String[0..1];
  value : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::WeightedAverageValue[0..1];
  value_type : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ValueType[0..1];
  weight : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::WeightedAverageValue[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::WeightedAverageValue
{
  field : String[0..1];
  missing : Float[0..1];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ValueType
{
  string,
  long,
  double,
  number,
  date,
  date_nanos,
  ip,
  numeric,
  geo_point,
  boolean
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::VariableWidthHistogramAggregation
{
  field : String[0..1];
  buckets : Integer[0..1];
  shard_size : Integer[0..1];
  initial_buffer : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Rescore
{
  query : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::RescoreQuery[1];
  window_size : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::RescoreQuery
{
  Query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[1];
  query_weight : Float[0..1];
  rescore_query_weight : Float[0..1];
  score_mode : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::ScoreMode[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::ScoreMode
{
  avg,
  max,
  min,
  multiply,
  total
}

Class {meta::pure::profiles::doc.doc='Number of hits matching the query to count accurately. If true, the exact number of hits is returned at the cost of some performance. If false, the response does not include the total number of hits matching the query. Defaults to 10,000 hits.'} meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::TrackHits extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  enabled : Boolean[0..1];
  count : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::mapping::RuntimeField
{
  format : String[0..1];
  script : meta::external::store::elasticsearch::metamodel::api::v7::types::Script[0..1];
  type : meta::external::store::elasticsearch::metamodel::api::v7::types::mapping::RuntimeFieldType[1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::mapping::RuntimeFieldType
{
  boolean,
  date,
  double,
  geo_point,
  ip,
  keyword,
  long
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PointInTimeReference
{
  id : String[1];
  keep_alive : meta::external::store::elasticsearch::metamodel::api::v7::types::Time[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::FieldSuggester
{
  completion : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::CompletionSuggester[0..1];
  phrase : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PhraseSuggester[0..1];
  term : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::TermSuggester[0..1];
  prefix : String[0..1];
  regex : String[0..1];
  text : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SuggesterBase
{
  field : String[1];
  analyzer : String[0..1];
  size : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::CompletionSuggester extends meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SuggesterBase
{
  contexts : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::CompletionContext|*>[0..1];
  fuzzy : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SuggestFuzziness[0..1];
  prefix : String[0..1];
  regex : String[0..1];
  skip_duplicates : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::CompletionContext
{
  boost : Float[0..1];
  context : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Context[1];
  neighbours : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoHashPrecision[*];
  precision : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoHashPrecision[0..1];
  prefix : Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc='Text or location that we want similar documents for or a lookup to a document\'s field for the text.',meta::pure::profiles::doc.doc='More: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html#_document_input_parameters',meta::pure::profiles::doc.doc='Spec Location: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html#_document_input_parameters'} meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Context extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  category : String[0..1];
  location : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SuggestFuzziness
{
  fuzziness : meta::pure::metamodel::type::Any[0..1];
  min_length : Integer[0..1];
  prefix_length : Integer[0..1];
  transpositions : Boolean[0..1];
  unicode_aware : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PhraseSuggester extends meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SuggesterBase
{
  collate : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PhraseSuggestCollate[0..1];
  confidence : Float[0..1];
  direct_generator : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::DirectGenerator[*];
  force_unigrams : Boolean[0..1];
  gram_size : Integer[0..1];
  highlight : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PhraseSuggestHighlight[0..1];
  max_errors : Float[0..1];
  real_word_error_likelihood : Float[0..1];
  separator : String[0..1];
  shard_size : Integer[0..1];
  smoothing : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SmoothingModelContainer[0..1];
  text : String[0..1];
  token_limit : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PhraseSuggestCollate
{
  params : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
  prune : Boolean[0..1];
  query : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PhraseSuggestCollateQuery[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PhraseSuggestCollateQuery
{
  id : String[0..1];
  source : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::DirectGenerator
{
  field : String[1];
  max_edits : Integer[0..1];
  max_inspections : Float[0..1];
  max_term_freq : Float[0..1];
  min_doc_freq : Float[0..1];
  min_word_length : Integer[0..1];
  post_filter : String[0..1];
  pre_filter : String[0..1];
  prefix_length : Integer[0..1];
  size : Integer[0..1];
  suggest_mode : meta::external::store::elasticsearch::metamodel::api::v7::types::SuggestMode[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::types::SuggestMode
{
  missing,
  popular,
  always
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PhraseSuggestHighlight
{
  post_tag : String[1];
  pre_tag : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SmoothingModelContainer
{
  laplace : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::LaplaceSmoothingModel[0..1];
  linear_interpolation : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::LinearInterpolationSmoothingModel[0..1];
  stupid_backoff : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::StupidBackoffSmoothingModel[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::LaplaceSmoothingModel
{
  alpha : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::LinearInterpolationSmoothingModel
{
  bigram_lambda : Float[1];
  trigram_lambda : Float[1];
  unigram_lambda : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::StupidBackoffSmoothingModel
{
  discount : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::TermSuggester extends meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SuggesterBase
{
  lowercase_terms : Boolean[0..1];
  max_edits : Integer[0..1];
  max_inspections : Integer[0..1];
  max_term_freq : Float[0..1];
  min_doc_freq : Float[0..1];
  min_word_length : Integer[0..1];
  prefix_length : Integer[0..1];
  shard_size : Integer[0..1];
  sort : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SuggestSort[0..1];
  string_distance : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::StringDistance[0..1];
  suggest_mode : meta::external::store::elasticsearch::metamodel::api::v7::types::SuggestMode[0..1];
  text : String[0..1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SuggestSort
{
  score,
  frequency
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::StringDistance
{
  internal,
  damerau_levenshtein,
  levenshtein,
  jaro_winkler,
  ngram
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Suggester extends meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperties<String,meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::FieldSuggester>
{
  {meta::pure::profiles::doc.doc='Global suggest text, to avoid repetition when the same text is used in several suggesters'} text : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::Response<TDocument>
{
  body : meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::MultiSearchResult<TDocument>[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::MultiSearchResult<TDocument>
{
  took : Integer[1];
  responses : meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::ResponseItem<TDocument>[1..*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::ResponseItem<TDocument> extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  result : meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::MultiSearchItem<TDocument>[0..1];
  failure : meta::external::store::elasticsearch::metamodel::api::v7::types::ErrorResponseBase[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::ResponseBody<TDocument>
{
  took : Integer[1];
  timed_out : Boolean[1];
  _shards : meta::external::store::elasticsearch::metamodel::api::v7::types::ShardStatistics[1];
  hits : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HitsMetadata<TDocument>[1];
  aggregations : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Aggregate|*>[0..1];
  _clusters : meta::external::store::elasticsearch::metamodel::api::v7::types::ClusterStatistics[0..1];
  fields : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
  max_score : Float[0..1];
  num_reduce_phases : Integer[0..1];
  profile : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Profile[0..1];
  pit_id : String[0..1];
  _scroll_id : String[0..1];
  suggest : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Suggest<TDocument>|*>[0..1];
  terminated_early : Boolean[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::ShardStatistics
{
  failed : Number[1];
  successful : Number[1];
  total : Number[1];
  failures : meta::external::store::elasticsearch::metamodel::api::v7::types::ShardFailure[*];
  skipped : Number[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::ShardFailure
{
  index : String[0..1];
  node : String[0..1];
  reason : meta::external::store::elasticsearch::metamodel::api::v7::types::ErrorCause[1];
  shard : Integer[1];
  status : String[0..1];
}

Class {meta::pure::profiles::doc.doc='Cause and details about a request failure. This class defines the properties common to all error types. Additional details are also provided, that depend on the error type.'} meta::external::store::elasticsearch::metamodel::api::v7::types::ErrorCause extends meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperties<String,meta::pure::metamodel::type::Any>
{
  {meta::pure::profiles::doc.doc='The type of error'} type : String[1];
  {meta::pure::profiles::doc.doc='A human-readable explanation of the error, in english'} reason : String[1];
  {meta::pure::profiles::doc.doc='The server stack trace. Present only if the `error_trace=true` parameter was sent with the request.'} stack_trace : String[0..1];
  caused_by : meta::external::store::elasticsearch::metamodel::api::v7::types::ErrorCause[0..1];
  root_cause : meta::external::store::elasticsearch::metamodel::api::v7::types::ErrorCause[*];
  suppressed : meta::external::store::elasticsearch::metamodel::api::v7::types::ErrorCause[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HitsMetadata<T>
{
  {meta::pure::profiles::doc.doc='Total hit count information, present only if `track_total_hits` wasn\'t `false` in the search request.'} total : meta::pure::metamodel::type::Any[0..1];
  hits : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Hit<T>[1..*];
  max_score : Float[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::TotalHits
{
  relation : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::TotalHitsRelation[1];
  value : Integer[1];
}

Enum meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::TotalHitsRelation
{
  eq,
  gte
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Hit<TDocument>
{
  _index : String[1];
  _id : String[1];
  _score : Float[0..1];
  _type : String[0..1];
  _explanation : meta::external::store::elasticsearch::metamodel::api::v7::global::explain::Explanation[0..1];
  fields : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
  highlight : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,String|*>[0..1];
  inner_hits : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::InnerHitsResult|*>[0..1];
  matched_queries : String[*];
  _nested : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::NestedIdentity[0..1];
  _ignored : String[*];
  _shard : String[0..1];
  _node : String[0..1];
  _routing : String[0..1];
  _source : TDocument[0..1];
  _seq_no : Integer[0..1];
  _primary_term : Integer[0..1];
  _version : Integer[0..1];
  sort : meta::pure::metamodel::type::Any[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::explain::Explanation
{
  description : String[1];
  details : meta::external::store::elasticsearch::metamodel::api::v7::global::explain::ExplanationDetail[1..*];
  value : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::explain::ExplanationDetail
{
  description : String[1];
  details : meta::external::store::elasticsearch::metamodel::api::v7::global::explain::ExplanationDetail[*];
  value : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::InnerHitsResult
{
  hits : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HitsMetadata<meta::pure::metamodel::type::Any>[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::NestedIdentity
{
  field : String[1];
  offset : Integer[1];
  _nested : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::NestedIdentity[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Aggregate extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  cardinality : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CardinalityAggregate[0..1];
  hdr_percentiles : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HdrPercentilesAggregate[0..1];
  hdr_percentile_ranks : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HdrPercentileRanksAggregate[0..1];
  tdigest_percentiles : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TDigestPercentilesAggregate[0..1];
  tdigest_percentile_ranks : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TDigestPercentileRanksAggregate[0..1];
  percentiles_bucket : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentilesBucketAggregate[0..1];
  median_absolute_deviation : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MedianAbsoluteDeviationAggregate[0..1];
  min : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MinAggregate[0..1];
  max : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MaxAggregate[0..1];
  sum : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SumAggregate[0..1];
  avg : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AvgAggregate[0..1];
  weighted_avg : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::WeightedAvgAggregate[0..1];
  value_count : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ValueCountAggregate[0..1];
  simple_value : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SimpleValueAggregate[0..1];
  derivative : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DerivativeAggregate[0..1];
  bucket_metric_value : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketMetricValueAggregate[0..1];
  stats : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StatsAggregate[0..1];
  stats_bucket : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StatsBucketAggregate[0..1];
  extended_stats : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedStatsAggregate[0..1];
  extended_stats_bucket : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedStatsBucketAggregate[0..1];
  geo_bounds : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoBoundsAggregate[0..1];
  geo_centroid : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoCentroidAggregate[0..1];
  histogram : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HistogramAggregate[0..1];
  date_histogram : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateHistogramAggregate[0..1];
  auto_date_histogram : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AutoDateHistogramAggregate[0..1];
  variable_width_histogram : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::VariableWidthHistogramAggregate[0..1];
  sterms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StringTermsAggregate[0..1];
  lterms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::LongTermsAggregate[0..1];
  dterms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DoubleTermsAggregate[0..1];
  umterms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::UnmappedTermsAggregate[0..1];
  lrareterms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::LongRareTermsAggregate[0..1];
  srareterms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StringRareTermsAggregate[0..1];
  umrareterms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::UnmappedRareTermsAggregate[0..1];
  multi_terms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiTermsAggregate[0..1];
  missing : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MissingAggregate[0..1];
  nested : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::NestedAggregate[0..1];
  reverse_nested : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ReverseNestedAggregate[0..1];
  global : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GlobalAggregate[0..1];
  filter : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FilterAggregate[0..1];
  children : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ChildrenAggregate[0..1];
  parent : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ParentAggregate[0..1];
  sampler : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SamplerAggregate[0..1];
  unmapped_sampler : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::UnmappedSamplerAggregate[0..1];
  geohash_grid : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoHashGridAggregate[0..1];
  geotile_grid : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoTileGridAggregate[0..1];
  range : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RangeAggregate[0..1];
  date_range : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateRangeAggregate[0..1];
  geo_distance : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoDistanceAggregate[0..1];
  ip_range : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::IpRangeAggregate[0..1];
  filters : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FiltersAggregate[0..1];
  adjacency_matrix : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AdjacencyMatrixAggregate[0..1];
  siglterms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantLongTermsAggregate[0..1];
  sigsterms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantStringTermsAggregate[0..1];
  umsigterms : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::UnmappedSignificantTermsAggregate[0..1];
  composite : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CompositeAggregate[0..1];
  scripted_metric : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ScriptedMetricAggregate[0..1];
  top_hits : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TopHitsAggregate[0..1];
  inference : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::InferenceAggregate[0..1];
  string_stats : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StringStatsAggregate[0..1];
  box_plot : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BoxPlotAggregate[0..1];
  top_metrics : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TopMetricsAggregate[0..1];
  t_test : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TTestAggregate[0..1];
  rate : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RateAggregate[0..1];
  simple_long_value : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CumulativeCardinalityAggregate[0..1];
  matrix_stats : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MatrixStatsAggregate[0..1];
  geo_line : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoLineAggregate[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  meta : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CardinalityAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  value : Integer[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentilesAggregateBase extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  values : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Percentiles[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Percentiles extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  keyed : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
  array : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ArrayPercentilesItem[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ArrayPercentilesItem
{
  key : String[1];
  value : Float[1];
  value_as_string : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HdrPercentilesAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentilesAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HdrPercentileRanksAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentilesAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TDigestPercentilesAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentilesAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TDigestPercentileRanksAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentilesAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentilesBucketAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::PercentilesAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleMetricAggregateBase extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  {meta::pure::profiles::doc.doc='The metric value. A missing value generally means that there was no data to aggregate, unless specified otherwise.'} value : Float[1];
  value_as_string : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MedianAbsoluteDeviationAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleMetricAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MinAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleMetricAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MaxAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleMetricAggregateBase
{
}

Class {meta::pure::profiles::doc.doc='Sum aggregation result. `value` is always present and is zero if there were no values to process.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SumAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleMetricAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AvgAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleMetricAggregateBase
{
}

Class {meta::pure::profiles::doc.doc='Weighted average aggregation result. `value` is missing if the weight was set to zero.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::WeightedAvgAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleMetricAggregateBase
{
}

Class {meta::pure::profiles::doc.doc='Value count aggregation result. `value` is always present.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ValueCountAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleMetricAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SimpleValueAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleMetricAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DerivativeAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleMetricAggregateBase
{
  normalized_value : Float[0..1];
  normalized_value_as_string : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BucketMetricValueAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleMetricAggregateBase
{
  keys : String[1..*];
}

Class {meta::pure::profiles::doc.doc='Statistics aggregation result. `min`, `max` and `avg` are missing if there were no values to process (`count` is zero).'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StatsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  count : Integer[1];
  min : Float[1];
  max : Float[1];
  avg : Float[1];
  sum : Float[1];
  min_as_string : String[0..1];
  max_as_string : String[0..1];
  avg_as_string : String[0..1];
  sum_as_string : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StatsBucketAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StatsAggregate
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedStatsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StatsAggregate
{
  sum_of_squares : Float[1];
  variance : Float[1];
  variance_population : Float[1];
  variance_sampling : Float[1];
  std_deviation : Float[1];
  std_deviation_bounds : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StandardDeviationBounds[0..1];
  sum_of_squares_as_string : String[0..1];
  variance_as_string : String[0..1];
  variance_population_as_string : String[0..1];
  variance_sampling_as_string : String[0..1];
  std_deviation_as_string : String[0..1];
  std_deviation_bounds_as_string : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StandardDeviationBoundsAsString[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StandardDeviationBounds
{
  upper : Float[1];
  lower : Float[1];
  upper_population : Float[1];
  lower_population : Float[1];
  upper_sampling : Float[1];
  lower_sampling : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StandardDeviationBoundsAsString
{
  upper : String[1];
  lower : String[1];
  upper_population : String[1];
  lower_population : String[1];
  upper_sampling : String[1];
  lower_sampling : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedStatsBucketAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ExtendedStatsAggregate
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoBoundsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  bounds : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoBounds[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoCentroidAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  count : Integer[1];
  location : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLocation[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<TBucket> extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  buckets : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Buckets<TBucket>[1];
}

Class {meta::pure::profiles::doc.doc='Base type for multi-bucket aggregation results that can hold sub-aggregations results.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase extends meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperties<String,meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Aggregate>
{
  doc_count : Integer[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HistogramBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
  key_as_string : String[0..1];
  key : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HistogramAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::HistogramBucket>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateHistogramBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
  key_as_string : String[0..1];
  key : meta::pure::metamodel::type::Any[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateHistogramAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateHistogramBucket>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AutoDateHistogramAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateHistogramBucket>
{
  interval : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::VariableWidthHistogramBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
  min : Float[1];
  key : Float[1];
  max : Float[1];
  min_as_string : String[0..1];
  key_as_string : String[0..1];
  max_as_string : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::VariableWidthHistogramAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::VariableWidthHistogramBucket>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregateBase<TBucket> extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<TBucket>
{
  doc_count_error_upper_bound : Integer[0..1];
  sum_other_doc_count : Integer[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsBucketBase extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
  doc_count_error : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StringTermsBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsBucketBase
{
  key : String[1];
}

Class {meta::pure::profiles::doc.doc='Result of a `terms` aggregation when the field is a string.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StringTermsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StringTermsBucket>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::LongTermsBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsBucketBase
{
  key : String[1];
  key_as_string : String[0..1];
}

Class {meta::pure::profiles::doc.doc='Result of a `terms` aggregation when the field is some kind of whole number like a integer, long, or a date.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::LongTermsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::LongTermsBucket>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DoubleTermsBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsBucketBase
{
  key : Float[1];
  key_as_string : String[0..1];
}

Class {meta::pure::profiles::doc.doc='Result of a `terms` aggregation when the field is some kind of decimal number like a float, double, or distance.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DoubleTermsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DoubleTermsBucket>
{
}

Class {meta::pure::profiles::doc.doc='Result of a `terms` aggregation when the field is unmapped. `buckets` is always empty.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::UnmappedTermsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregateBase<meta::pure::metamodel::type::Nil>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::LongRareTermsBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
  key : Integer[1];
  key_as_string : String[0..1];
}

Class {meta::pure::profiles::doc.doc='Result of the `rare_terms` aggregation when the field is some kind of whole number like a integer, long, or a date.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::LongRareTermsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::LongRareTermsBucket>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StringRareTermsBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
  key : String[1];
}

Class {meta::pure::profiles::doc.doc='Result of the `rare_terms` aggregation when the field is a string.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StringRareTermsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StringRareTermsBucket>
{
}

Class {meta::pure::profiles::doc.doc='Result of a `rare_terms` aggregation when the field is unmapped. `buckets` is always empty.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::UnmappedRareTermsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::pure::metamodel::type::Nil>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiTermsBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
  key : meta::pure::metamodel::type::Any[1..*];
  key_as_string : String[0..1];
  doc_count_error_upper_bound : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiTermsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TermsAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiTermsBucket>
{
}

Class {meta::pure::profiles::doc.doc='Base type for single-bucket aggregation results that can hold sub-aggregations results.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleBucketAggregateBase extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase,meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperties<String,meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::Aggregate>
{
  doc_count : Integer[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MissingAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleBucketAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::NestedAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleBucketAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ReverseNestedAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleBucketAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GlobalAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleBucketAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FilterAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleBucketAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ChildrenAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleBucketAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ParentAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleBucketAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SamplerAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleBucketAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::UnmappedSamplerAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SingleBucketAggregateBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoHashGridBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
  key : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoHashGridAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoHashGridBucket>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoTileGridBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
  key : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoTileGridAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoTileGridBucket>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RangeBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
  from : Float[0..1];
  to : Float[0..1];
  from_as_string : String[0..1];
  to_as_string : String[0..1];
  {meta::pure::profiles::doc.doc='The bucket key. Present if the aggregation is _not_ keyed'} key : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RangeAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RangeBucket>
{
}

Class {meta::pure::profiles::doc.doc='Result of a `date_range` aggregation. Same format as a for a `range` aggregation: `from` and `to` in `buckets` are milliseconds since the Epoch, represented as a floating point number.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::DateRangeAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RangeAggregate
{
}

Class {meta::pure::profiles::doc.doc='Result of a `geo_distance` aggregation. The unit for `from` and `to` is meters by default.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoDistanceAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RangeAggregate
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::IpRangeBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
  from : String[0..1];
  to : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::IpRangeAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::IpRangeBucket>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FiltersBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FiltersAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::FiltersBucket>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AdjacencyMatrixBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AdjacencyMatrixAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AdjacencyMatrixBucket>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantTermsBucketBase extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
  score : Float[1];
  bg_count : Integer[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantLongTermsBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantTermsBucketBase
{
  key : Integer[1];
  key_as_string : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantLongTermsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantLongTermsBucket>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantStringTermsBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantTermsBucketBase
{
  key : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantStringTermsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::SignificantStringTermsBucket>
{
}

Class {meta::pure::profiles::doc.doc='Result of the `significant_terms` aggregation on an unmapped field. `buckets` is always empty.'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::UnmappedSignificantTermsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::pure::metamodel::type::Nil>
{
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CompositeBucket extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketBase
{
  key : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CompositeAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MultiBucketAggregateBase<meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CompositeBucket>
{
  after_key : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::ScriptedMetricAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  value : meta::pure::metamodel::type::Any[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TopHitsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  hits : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::HitsMetadata<meta::pure::metamodel::type::Any>[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::InferenceAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase,meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperties<String,meta::pure::metamodel::type::Any>
{
  value : meta::external::store::elasticsearch::metamodel::api::v7::types::FieldValue[0..1];
  feature_importance : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::InferenceFeatureImportance[*];
  top_classes : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::InferenceTopClassEntry[*];
  warning : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::InferenceFeatureImportance
{
  feature_name : String[1];
  importance : Float[0..1];
  classes : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::InferenceClassImportance[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::InferenceClassImportance
{
  class_name : String[1];
  importance : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::InferenceTopClassEntry
{
  class_name : meta::external::store::elasticsearch::metamodel::api::v7::types::FieldValue[1];
  class_probability : Float[1];
  class_score : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::StringStatsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  count : Integer[1];
  min_length : Integer[1];
  max_length : Integer[1];
  avg_length : Float[1];
  entropy : Float[1];
  distribution : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,Float|*>[0..1];
  min_length_as_string : String[0..1];
  max_length_as_string : String[0..1];
  avg_length_as_string : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::BoxPlotAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  min : Float[1];
  max : Float[1];
  q1 : Float[1];
  q2 : Float[1];
  q3 : Float[1];
  lower : Float[1];
  upper : Float[1];
  min_as_string : String[0..1];
  max_as_string : String[0..1];
  q1_as_string : String[0..1];
  q2_as_string : String[0..1];
  q3_as_string : String[0..1];
  lower_as_string : String[0..1];
  upper_as_string : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TopMetricsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  top : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TopMetrics[1..*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TopMetrics
{
  sort : meta::external::store::elasticsearch::metamodel::api::v7::types::FieldValue[1..*];
  metrics : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::FieldValue|*>[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::TTestAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  value : Float[1];
  value_as_string : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::RateAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  value : Float[1];
  value_as_string : String[0..1];
}

Class {meta::pure::profiles::doc.doc='Result of the `cumulative_cardinality` aggregation'} meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::CumulativeCardinalityAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  value : Integer[1];
  value_as_string : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MatrixStatsAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  doc_count : Integer[1];
  fields : meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MatrixStatsFields[1..*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::MatrixStatsFields
{
  name : String[1];
  count : Integer[1];
  mean : Float[1];
  variance : Float[1];
  skewness : Float[1];
  kurtosis : Float[1];
  covariance : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,Float|*>[1];
  correlation : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,Float|*>[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::GeoLineAggregate extends meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregateBase
{
  type : String[1];
  geometry : meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLine[1];
}

Class {meta::pure::profiles::doc.doc='A GeoJson GeoLine.'} meta::external::store::elasticsearch::metamodel::api::v7::types::GeoLine
{
  {meta::pure::profiles::doc.doc='Always `"LineString"`'} type : String[1];
  {meta::pure::profiles::doc.doc='Array of `[lon, lat]` coordinates'} coordinates : Float[1..*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::ClusterStatistics
{
  skipped : Integer[1];
  successful : Integer[1];
  total : Integer[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Profile
{
  shards : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::ShardProfile[1..*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::ShardProfile
{
  aggregations : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::AggregationProfile[1..*];
  id : String[1];
  searches : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SearchProfile[1..*];
  fetch : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::FetchProfile[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::AggregationProfile
{
  breakdown : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::AggregationBreakdown[1];
  description : String[1];
  time_in_nanos : Integer[1];
  type : String[1];
  debug : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::AggregationProfileDebug[0..1];
  children : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::AggregationProfile[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::AggregationBreakdown
{
  build_aggregation : Integer[1];
  build_aggregation_count : Integer[1];
  build_leaf_collector : Integer[1];
  build_leaf_collector_count : Integer[1];
  collect : Integer[1];
  collect_count : Integer[1];
  initialize : Integer[1];
  initialize_count : Integer[1];
  post_collection : Integer[0..1];
  post_collection_count : Integer[0..1];
  reduce : Integer[1];
  reduce_count : Integer[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::AggregationProfileDebug
{
  segments_with_multi_valued_ords : Integer[0..1];
  collection_strategy : String[0..1];
  segments_with_single_valued_ords : Integer[0..1];
  total_buckets : Integer[0..1];
  built_buckets : Integer[0..1];
  result_strategy : String[0..1];
  has_filter : Boolean[0..1];
  delegate : String[0..1];
  delegate_debug : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::AggregationProfileDelegateDebug[0..1];
  chars_fetched : Integer[0..1];
  extract_count : Integer[0..1];
  extract_ns : Integer[0..1];
  values_fetched : Integer[0..1];
  collect_analyzed_ns : Integer[0..1];
  collect_analyzed_count : Integer[0..1];
  surviving_buckets : Integer[0..1];
  ordinals_collectors_used : Integer[0..1];
  ordinals_collectors_overhead_too_high : Integer[0..1];
  string_hashing_collectors_used : Integer[0..1];
  numeric_collectors_used : Integer[0..1];
  empty_collectors_used : Integer[0..1];
  deferred_aggregators : String[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::AggregationProfileDelegateDebug
{
  segments_with_doc_count_field : Integer[0..1];
  segments_with_deleted_docs : Integer[0..1];
  filters : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::AggregationProfileDelegateDebugFilter[*];
  segments_counted : Integer[0..1];
  segments_collected : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::AggregationProfileDelegateDebugFilter
{
  results_from_metadata : Integer[0..1];
  query : String[0..1];
  specialized_for : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SearchProfile
{
  collector : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Collector[1..*];
  query : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::QueryProfile[1..*];
  rewrite_time : Integer[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Collector
{
  name : String[1];
  reason : String[1];
  time_in_nanos : Integer[1];
  children : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Collector[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::QueryProfile
{
  breakdown : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::QueryBreakdown[1];
  description : String[1];
  time_in_nanos : Integer[1];
  type : String[1];
  children : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::QueryProfile[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::QueryBreakdown
{
  advance : Integer[1];
  advance_count : Integer[1];
  build_scorer : Integer[1];
  build_scorer_count : Integer[1];
  create_weight : Integer[1];
  create_weight_count : Integer[1];
  match : Integer[1];
  match_count : Integer[1];
  shallow_advance : Integer[1];
  shallow_advance_count : Integer[1];
  next_doc : Integer[1];
  next_doc_count : Integer[1];
  score : Integer[1];
  score_count : Integer[1];
  compute_max_score : Integer[1];
  compute_max_score_count : Integer[1];
  set_min_competitive_score : Integer[1];
  set_min_competitive_score_count : Integer[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::FetchProfile
{
  type : String[1];
  description : String[1];
  time_in_nanos : Integer[1];
  breakdown : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::FetchProfileBreakdown[1];
  debug : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::FetchProfileDebug[0..1];
  children : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::FetchProfile[*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::FetchProfileBreakdown
{
  load_stored_fields : Integer[0..1];
  load_stored_fields_count : Integer[0..1];
  next_reader : Integer[0..1];
  next_reader_count : Integer[0..1];
  process_count : Integer[0..1];
  process : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::FetchProfileDebug
{
  stored_fields : String[*];
  fast_path : Integer[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Suggest<TDocument> extends meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{
  completion : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::CompletionSuggest<TDocument>[0..1];
  phrase : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PhraseSuggest[0..1];
  term : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::TermSuggest[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SuggestBase
{
  length : Integer[1];
  offset : Integer[1];
  text : String[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::CompletionSuggest<TDocument> extends meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SuggestBase
{
  options : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::CompletionSuggestOption<TDocument>[1..*];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::CompletionSuggestOption<TDocument>
{
  collate_match : Boolean[0..1];
  contexts : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Context|*>[0..1];
  fields : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::pure::metamodel::type::Any|*>[0..1];
  _id : String[0..1];
  _index : String[0..1];
  _type : String[0..1];
  _routing : String[0..1];
  _score : Float[0..1];
  _source : TDocument[0..1];
  text : String[1];
  score : Float[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PhraseSuggest extends meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SuggestBase
{
  options : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PhraseSuggestOption[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PhraseSuggestOption
{
  text : String[1];
  highlighted : String[1];
  score : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::TermSuggest extends meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SuggestBase
{
  options : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::TermSuggestOption[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::TermSuggestOption
{
  text : String[1];
  freq : Integer[1];
  score : Float[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::msearch::MultiSearchItem<TDocument> extends meta::external::store::elasticsearch::metamodel::api::v7::global::search::ResponseBody<TDocument>
{
  status : Integer[0..1];
}

Class {meta::pure::profiles::doc.doc='The response returned by Elasticsearch when request execution did not succeed.'} meta::external::store::elasticsearch::metamodel::api::v7::types::ErrorResponseBase
{
  error : meta::external::store::elasticsearch::metamodel::api::v7::types::ErrorCause[1];
  status : Integer[1];
}

Class {meta::pure::profiles::doc.doc='Returns results matching a query.'} meta::external::store::elasticsearch::metamodel::api::v7::global::search::Request extends meta::external::store::elasticsearch::metamodel::api::v7::types::RequestBase
{
  aggregations : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::aggregations::AggregationContainer|*>[0..1];
  collapse : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::FieldCollapse[0..1];
  {meta::pure::profiles::doc.doc='If true, returns detailed information about score computation as part of a hit.'} explain : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Starting document offset. By default, you cannot page through more than 10,000 hits using the from and size parameters. To page through more hits, use the search_after parameter.'} from : Integer[0..1];
  highlight : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Highlight[0..1];
  {meta::pure::profiles::doc.doc='Number of hits matching the query to count accurately. If true, the exact number of hits is returned at the cost of some performance. If false, the response does not include the total number of hits matching the query. Defaults to 10,000 hits.'} track_total_hits : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::TrackHits[0..1];
  {meta::pure::profiles::doc.doc='Boosts the _score of documents from specified indices.'} indices_boost : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,Float|*>[*];
  {meta::pure::profiles::doc.doc='Array of wildcard (*) patterns. The request returns doc values for field names matching these patterns in the hits.fields property of the response.'} docvalue_fields : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FieldAndFormat[*];
  {meta::pure::profiles::doc.doc='Minimum _score for matching documents. Documents with a lower _score are not included in the search results.'} min_score : Float[0..1];
  post_filter : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[0..1];
  profile : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Defines the search definition using the Query DSL.'} query : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::QueryContainer[0..1];
  rescore : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Rescore[*];
  {meta::pure::profiles::doc.doc='Retrieve a script evaluation (based on different fields) for each hit.'} script_fields : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::ScriptField|*>[0..1];
  search_after : meta::pure::metamodel::type::Any[0..1];
  {meta::pure::profiles::doc.doc='The number of hits to return. By default, you cannot page through more than 10,000 hits using the from and size parameters. To page through more hits, use the search_after parameter.'} size : Integer[0..1];
  slice : meta::external::store::elasticsearch::metamodel::api::v7::types::SlicedScroll[0..1];
  {meta::pure::profiles::doc.doc='More: https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html',meta::pure::profiles::doc.doc='Spec Location: https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html'} sort : meta::external::store::elasticsearch::metamodel::api::v7::types::SortCombinations[0..1];
  {meta::pure::profiles::doc.doc='Indicates which source fields are returned for matching documents. These fields are returned in the hits._source property of the search response.'} _source : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::SourceConfig[0..1];
  {meta::pure::profiles::doc.doc='Array of wildcard (*) patterns. The request returns values for field names matching these patterns in the hits.fields property of the response.'} fields : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::FieldAndFormat[*];
  suggest : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::Suggester[0..1];
  {meta::pure::profiles::doc.doc='Maximum number of documents to collect for each shard. If a query reaches this limit, Elasticsearch terminates the query early. Elasticsearch collects documents before sorting. Defaults to 0, which does not terminate query execution early.'} terminate_after : Integer[0..1];
  {meta::pure::profiles::doc.doc='Specifies the period of time to wait for a response from each shard. If no response is received before the timeout expires, the request fails and returns an error. Defaults to no timeout.'} timeout : String[0..1];
  {meta::pure::profiles::doc.doc='If true, calculate and return document scores, even if the scores are not used for sorting.'} track_scores : Boolean[0..1];
  {meta::pure::profiles::doc.doc='If true, returns document version as part of a hit.'} version : Boolean[0..1];
  {meta::pure::profiles::doc.doc='If true, returns sequence number and primary term of the last modification of each hit. See Optimistic concurrency control.'} seq_no_primary_term : Boolean[0..1];
  {meta::pure::profiles::doc.doc='List of stored fields to return as part of a hit. If no fields are specified, no stored fields are included in the response. If this field is specified, the _source parameter defaults to false. You can pass _source: true to return both source fields and stored fields in the search response.'} stored_fields : String[0..1];
  {meta::pure::profiles::doc.doc='Limits the search to a point in time (PIT). If you provide a PIT, you cannot specify an <index> in the request path.'} pit : meta::external::store::elasticsearch::metamodel::api::v7::global::search::types::PointInTimeReference[0..1];
  {meta::pure::profiles::doc.doc='Defines one or more runtime fields in the search request. These fields take precedence over mapped fields with the same name.'} runtime_mappings : meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<String,meta::external::store::elasticsearch::metamodel::api::v7::types::mapping::RuntimeField|*>[0..1];
  {meta::pure::profiles::doc.doc='Stats groups to associate with the search. Each group maintains a statistics aggregation for its associated searches. You can retrieve these stats using the indices stats API.'} stats : String[*];
  {meta::pure::profiles::doc.doc='A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices'} index : String[0..1];
  {meta::pure::profiles::doc.doc='A comma-separated list of document types to search; leave empty to perform the operation on all types'} type : String[0..1];
  {meta::pure::profiles::doc.doc='Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)'} allow_no_indices : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Indicate if an error should be returned if there is a partial search failure or timeout'} allow_partial_search_results : Boolean[0..1];
  {meta::pure::profiles::doc.doc='The analyzer to use for the query string'} analyzer : String[0..1];
  {meta::pure::profiles::doc.doc='Specify whether wildcard and prefix queries should be analyzed (default: false)'} analyze_wildcard : Boolean[0..1];
  {meta::pure::profiles::doc.doc='The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.'} batched_reduce_size : Integer[0..1];
  {meta::pure::profiles::doc.doc='Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution'} ccs_minimize_roundtrips : Boolean[0..1];
  {meta::pure::profiles::doc.doc='The default operator for query string query (AND or OR)'} default_operator : meta::external::store::elasticsearch::metamodel::api::v7::types::querydsl::Operator[0..1];
  {meta::pure::profiles::doc.doc='The field to use as default where no field prefix is given in the query string'} df : String[0..1];
  {meta::pure::profiles::doc.doc='Whether to expand wildcard expression to concrete indices that are open, closed or both.'} expand_wildcards : meta::external::store::elasticsearch::metamodel::api::v7::types::ExpandWildcard[0..1];
  {meta::pure::profiles::doc.doc='Whether specified concrete, expanded or aliased indices should be ignored when throttled'} ignore_throttled : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Whether specified concrete indices should be ignored when unavailable (missing or closed)'} ignore_unavailable : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Specify whether format-based query failures (such as providing text to a numeric field) should be ignored'} lenient : Boolean[0..1];
  {meta::pure::profiles::doc.doc='The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests'} max_concurrent_shard_requests : Integer[0..1];
  {meta::pure::profiles::doc.doc='The minimum compatible version that all shards involved in search should have for this request to be successful'} min_compatible_shard_node : String[0..1];
  {meta::pure::profiles::doc.doc='Specify the node or shard the operation should be performed on (default: random)'} preference : String[0..1];
  {meta::pure::profiles::doc.doc='A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if theï¿½number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.'} pre_filter_shard_size : Integer[0..1];
  {meta::pure::profiles::doc.doc='Specify if request cache should be used for this request or not, defaults to index level setting'} request_cache : Boolean[0..1];
  {meta::pure::profiles::doc.doc='A comma-separated list of specific routing values'} routing : String[0..1];
  {meta::pure::profiles::doc.doc='Specify how long a consistent view of the index should be maintained for scrolled search'} scroll : meta::external::store::elasticsearch::metamodel::api::v7::types::Time[0..1];
  {meta::pure::profiles::doc.doc='Search operation type'} search_type : meta::external::store::elasticsearch::metamodel::api::v7::types::SearchType[0..1];
  {meta::pure::profiles::doc.doc='Specifies which field to use for suggestions.'} suggest_field : String[0..1];
  {meta::pure::profiles::doc.doc='Specify suggest mode'} suggest_mode : meta::external::store::elasticsearch::metamodel::api::v7::types::SuggestMode[0..1];
  {meta::pure::profiles::doc.doc='How many suggestions to return in response'} suggest_size : Integer[0..1];
  {meta::pure::profiles::doc.doc='The source text for which the suggestions should be returned.'} suggest_text : String[0..1];
  {meta::pure::profiles::doc.doc='Specify whether aggregation and suggester names should be prefixed by their respective types in the response'} typed_keys : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Indicates whether hits.total should be rendered as an integer or an object in the rest search response'} rest_total_hits_as_int : Boolean[0..1];
  {meta::pure::profiles::doc.doc='A list of fields to exclude from the returned _source field'} _source_excludes : String[0..1];
  {meta::pure::profiles::doc.doc='A list of fields to extract and return from the _source field'} _source_includes : String[0..1];
  {meta::pure::profiles::doc.doc='Query in the Lucene query string syntax'} q : String[0..1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::types::SlicedScroll
{
  field : String[0..1];
  id : Integer[1];
  max : Integer[1];
}

Class meta::external::store::elasticsearch::metamodel::api::v7::global::search::Response<TDocument>
{
  body : meta::external::store::elasticsearch::metamodel::api::v7::global::search::ResponseBody<TDocument>[1];
}