// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

Class 
<<typemodifiers.abstract>> 
{ doc.doc = 'Marker class that will serialize as a scalar value from a single property on the implementation' }
meta::external::store::elasticsearch::metamodel::api::specutils::TaggedUnion
{

}

Class 
{ doc.doc = 'Marker class that will serialize as map.  This allows to enforce sigle key on map' }
meta::external::store::elasticsearch::metamodel::api::specutils::Dictionary<KEY, VALUE|m>
{
  map: Pair<KEY, VALUE>[m];
}

Class 
<<typemodifiers.abstract>> 
{ doc.doc='In some places in the specification an object consists of the union of a set of known properties and a set of runtime injected properties. Meaning that object should theoretically extend Dictionary but expose a set of known keys and possibly. The object might already be part of an object graph and have a parent class. This puts it into a bind that needs a client specific solution. We therefore document the requirement to behave like a dictionary for unknown properties with this interface.'} 
meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperties<TKey,TValue>
{
  __otherProperties: Pair<TKey, TValue>[m];
}

Class 
<<typemodifiers.abstract>> 
{ doc.doc='In some places in the specification an object consists of a static set of properties and a single additional property with an arbitrary name but a statically defined type. This is typically used for configurations associated to a single field. Meaning that object should theoretically extend SingleKeyDictionary but expose a set of known keys. And possibly the object might already be part of an object graph and have a parent class. This puts it into a bind that needs a client specific solution. We therefore document the requirement to accept a single unknown property with this interface.'} 
meta::external::store::elasticsearch::metamodel::api::specutils::AdditionalProperty<TKey,TValue>
{
  __otherProperty: Pair<TKey, TValue>[1];
}

Class
<<typemodifiers.abstract>> 
{ doc.doc='Implements a set of common query parameters all API\'s support. Since these can break the request structure these are listed explicitly as a behavior. Its up to individual clients to define support although `error_trace` and `pretty` are recommended as a minimum.'} 
meta::external::store::elasticsearch::metamodel::api::specutils::CommonQueryParameters
{
  {meta::pure::profiles::doc.doc='When set to `true` Elasticsearch will include the full stack trace of errors when they occur.'} error_trace : Boolean[0..1];
  {meta::pure::profiles::doc.doc='Comma-separated list of filters in dot notation which reduce the response returned by Elasticsearch.'} filter_path : String[*];
  {meta::pure::profiles::doc.doc='When set to `true` will return statistics in a format suitable for humans. For example `"exists_time": "1h"` for humans and `"eixsts_time_in_millis": 3600000` for computers. When disabled the human readable values will be omitted. This makes sense for responses being consumed only by machines.'} human : Boolean[0..1];
  {meta::pure::profiles::doc.doc='If set to `true` the returned JSON will be "pretty-formatted". Only use this option for debugging only.'} pretty : Boolean[0..1];
}

Class 
<<typemodifiers.abstract>> 
meta::external::store::elasticsearch::metamodel::api::specutils::CommonCatQueryParameters
[
  toBeImplemented: false
]
{
  // todo
}

Class 
<<typemodifiers.abstract>> 
meta::external::store::elasticsearch::metamodel::api::specutils::OverloadOf
[
  toBeImplemented: false
]
{
  // todo
}

// todo functions to serialize these
// todo attached behaviors?