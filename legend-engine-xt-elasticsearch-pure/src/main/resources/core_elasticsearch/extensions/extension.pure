
import meta::pure::extension::*;
import meta::pure::runtime::*;
import meta::pure::mapping::*;
import meta::pure::store::*;
import meta::pure::executionPlan::*;

import meta::pure::router::routing::*;
import meta::pure::router::clustering::*;

import meta::external::store::elasticsearch::extension::*;
import meta::external::store::elasticsearch::metamodel::*;

function meta::external::store::elasticsearch::extension::elasticSearchExtension() : meta::pure::extension::Extension[1]
{
   ^Extension
   (
      type = 'elasticsearch',
      availableStores = [
        // todo v7 vs v8
        storeContractV7()
      ]
   ) 
}

function meta::external::store::elasticsearch::extension::storeContractV7(): StoreContract[1]
{
   ^StoreContract
   (
     // ** SupportContract **
     
      // Routing
      supports = meta::external::store::elasticsearch::extension::supports_FunctionExpression_1__Boolean_1_,
      supportsNativeJoinAmongElements = false,
      // Routing

      // ExecutionPlan
      supportsStreamFunction = meta::external::store::elasticsearch::extension::supportsStream_FunctionExpression_1__Boolean_1_,
      planExecution = meta::external::store::elasticsearch::extension::planExecution_StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_$0_1$__Runtime_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_,

      // ExecutionPlan

      // Core
      supportsSetImplementation = s: SetImplementation[1] | false,
      supportsStore = store: Store[1] | $store->instanceOf(ElasticSearchStore),
      resolveStoreFromSetImplementation = [],
      // Core

     // ** SupportContract **

     // ** RouterExtension **
      
      // Routing
      shouldStopRouting = [], //Function<Any>[*]
      routeFunctionExpressions = routeFunctionExpressionsPairs(),
      // Routing

      // Execution
      traceQueryInfoBuilder = [],      
      // Execution

     // ** RouterExtension **

     // ** ExecutionPlanExtension **

      // Execution Node - Print
      printPlanNodeToString = [],
      printConnectionToString = [],
      printTypeToString = [],
      // Execution Node - Print

     // ** ExecutionPlanExtension **

     id = 'elasticsearchV7'
   )
}

function meta::external::store::elasticsearch::extension::routeFunctionExpressionsPairs(): Pair<Function<{FunctionExpression[1]->Boolean[1]}>, Function<{FunctionExpression[1], RoutingState[1], Runtime[1], Mapping[1], ExecutionContext[1], Map<VariableExpression, ValueSpecification>[1], Map<String, List<Any>>[1]->RoutingState[1]}>>[1]
{
   pair(
    fe:FunctionExpression[1] | $fe.func == meta::external::store::elasticsearch::tds::indexToTDS_ElasticSearchStore_1__String_1__IndexTDS_1_,
    {fe:FunctionExpression[1], state:RoutingState[1], runtime : Runtime[1], mapping: Mapping[1], executionContext:ExecutionContext[1], vars:Map<VariableExpression, ValueSpecification>[1], inScopeVars:Map<String, List<Any>>[1] |
            let store = $fe->instanceValuesAtParameter(0, $vars, $inScopeVars)->toOne()->cast(@ElasticSearchStore);
            ^$state(value = ^TDSRoutedValueSpecification(genericType = $fe.genericType,
                                                          multiplicity = $fe.multiplicity,
                                                          id = 'Index TDS',
                                                          store = $store,
                                                          runtime = $runtime,
                                                          mapping = $mapping,
                                                          executionContext = $executionContext,
                                                          value = $fe
                                                        ));}
   )
}

function meta::external::store::elasticsearch::extension::supports(f:FunctionExpression[1]):Boolean[1]
{
  false;
}

function meta::external::store::elasticsearch::extension::supportsStream(f:FunctionExpression[1]):Boolean[1]
{
  false;
}

function meta::external::store::elasticsearch::extension::planExecution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
  ^meta::external::store::elasticsearch::executionPlan::nodes::ElasticSearchQueryExecutionNode(
    resultType = ^meta::pure::executionPlan::ResultType(type = Any)
  );
}
