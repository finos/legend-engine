// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::path::*;
import meta::pure::mapping::*;
import meta::pure::router::analytics::*;
import meta::pure::router::clustering::*;
import meta::pure::router::routing::*;
import meta::pure::router::store::metamodel::*;

// TODO: package should be changed to meta::pure::router::store::analytics?

Class meta::pure::router::analytics::AnalyticsExecutionContext extends meta::pure::runtime::ExtendedExecutionContext
{
   useAnalytics      : Boolean[1]; // To use the analytics feature or not
   toFlowSetFunction : LambdaFunction<{PropertyAccess[1]->String[1]}>[1]; // Will give back the set id which must flow over to the other side
}

Class meta::pure::router::analytics::AccessTreeNode
{
   <<equality.Key>> setId          : String[1];
   <<equality.Key>> propertyAccess : PropertyAccess[1];
   nestedQualifier : List<AccessTreeNode>[*];
}

Class meta::pure::router::analytics::AnalyticsState
{
   inFilterFunction   : Boolean[1];
   inProjectFunctions : Boolean[1];
   mapping            : Mapping[1];
   propertyMappings   : PropertyMapping[*];
}

Class meta::pure::router::analytics::PropertyAccessState
{
   <<equality.Key>> inFilterFunction   : Boolean[1];
   <<equality.Key>> inProjectFunctions : Boolean[1];   
}

Class meta::pure::router::analytics::PropertyAccess
{
   <<equality.Key>> property    : AbstractProperty<Any>[1];
   <<equality.Key>> sourceSetId : String[1];
   <<equality.Key>> sourceStore : String[1];
   <<equality.Key>> targetSetId : String[1];
   <<equality.Key>> targetStore : String[1];
   <<equality.Key>> accessState : PropertyAccessState[1];
}

function meta::pure::router::analytics::filterCrossPropertyAccesses(accesses: PropertyAccess[*]):PropertyAccess[*]
{
   $accesses
      ->filter(a | $a.sourceStore != 'AGGREGATION_AWARE')
      ->filter(a | !$a.targetStore->in(['PRIMITIVE_PROPERTY', 'EMBEDDED', 'AGGREGATION_AWARE']))
      ->filter(a | $a.sourceStore != $a.targetStore);    
}


function meta::pure::router::analytics::getAllPropertyAccesses(v:ValueSpecification[1], mapping:Mapping[1], extensions:meta::pure::extension::Extension[*]):PropertyAccess[*]
{
   $v->scanPropertyAccesses(^AnalyticsState(inFilterFunction=false, inProjectFunctions=false, mapping=$mapping), $extensions);
}

function meta::pure::router::analytics::getAllCrossPropertyAccesses(v:ValueSpecification[1], mapping:Mapping[1], extensions:meta::pure::extension::Extension[*]):PropertyAccess[*]
{
   $v->scanPropertyAccesses(^AnalyticsState(inFilterFunction=false, inProjectFunctions=false, mapping=$mapping), $extensions)
      ->filter(a | $a.sourceStore != 'AGGREGATION_AWARE')
      ->filter(a | !$a.targetStore->in(['PRIMITIVE_PROPERTY', 'EMBEDDED', 'AGGREGATION_AWARE']))
      ->filter(a | $a.sourceStore != $a.targetStore);
}

function meta::pure::router::analytics::scanPropertyAccesses(vs:ValueSpecification[1], state:AnalyticsState[1], extensions:meta::pure::extension::Extension[*]):PropertyAccess[*]
{
   $vs->evaluateAndDeactivate()->match([
      
      fe : FunctionExpression[1] |
         let parameters = $fe.parametersValues->evaluateAndDeactivate();
         $fe.func->evaluateAndDeactivate()->match([
            p : Property<Nil,Any|*>[1] |
               $state.propertyMappings->map(pm |  
                  ^PropertyAccess
                  (
                     property    = $pm.property,
                     sourceSetId = if($pm.sourceSetImplementationId == '',|$pm.owner->cast(@InstanceSetImplementation).id->toOne(), |$pm.sourceSetImplementationId),
                     sourceStore = if($pm.sourceSetImplementationId == '',|$pm.owner->cast(@InstanceSetImplementation).id->toOne(), |$pm.sourceSetImplementationId)->getStore($state.mapping, $extensions),
                     targetSetId = $pm.targetSetImplementationId,
                     targetStore = if($pm.targetSetImplementationId == '', | 'PRIMITIVE_PROPERTY', | $pm.targetSetImplementationId->getStore($state.mapping, $extensions)),
                     accessState = ^PropertyAccessState(inFilterFunction=$state.inFilterFunction, inProjectFunctions=$state.inProjectFunctions)
                  )
               )->concatenate($parameters->map(x | $x->scanPropertyAccesses(^$state(propertyMappings=[]), $extensions))),

            qp : QualifiedProperty<Any>[1] |
               $qp.expressionSequence->evaluateAndDeactivate()->map(expr | $expr->scanPropertyAccesses(^$state(propertyMappings = []), $extensions))
                  ->concatenate($parameters->map(x | $x->scanPropertyAccesses(^$state(propertyMappings=[]), $extensions))),

            a : Any[1] |
               if($fe.func->evaluateAndDeactivate() == filter_T_MANY__Function_1__T_MANY_,
                  | $parameters->at(0)->scanPropertyAccesses(^$state(propertyMappings=[]), $extensions)->concatenate($parameters->tail()->map(x | $x->scanPropertyAccesses(^$state(propertyMappings=[], inFilterFunction=!$state.inProjectFunctions), $extensions))),
                  | if($fe.functionName == 'project',
                       | $parameters->at(0)->scanPropertyAccesses(^$state(propertyMappings=[]), $extensions)->concatenate($parameters->tail()->map(x | $x->scanPropertyAccesses(^$state(propertyMappings=[], inProjectFunctions=true), $extensions))),
                       | $parameters->map(x | $x->scanPropertyAccesses(^$state(propertyMappings=[]), $extensions))))   
         ]);,

      e: StoreMappingRoutedValueSpecification[1] | if($e.sets->isNotEmpty() && $e.sets->at(0)->instanceOf(CrossSetImplementation), | [], | $e.value->evaluateAndDeactivate()->scanPropertyAccesses(^$state(propertyMappings=$e.propertyMapping), $extensions)),
      
      e : RoutedValueSpecification[1] | $e.value->evaluateAndDeactivate()->scanPropertyAccesses(^$state(propertyMappings=[]), $extensions),

      iv : InstanceValue[1] |
         $iv.values->evaluateAndDeactivate()->map( v |
            $v->match([
               a: ValueSpecification[1] | $a->scanPropertyAccesses(^$state(propertyMappings=[]), $extensions),
               l: FunctionDefinition<Any>[1] | $l.expressionSequence->evaluateAndDeactivate()->map(e | $e->scanPropertyAccesses(^$state(propertyMappings=[]), $extensions)),
               a: Any[1] | []
            ]);
         ),

      v : ValueSpecification[1] | []
      
   ]) ->removeDuplicates() 
}

function meta::pure::router::analytics::getStore(setId: String[1], mapping:Mapping[1], extensions:meta::pure::extension::Extension[*]):String[1]
{
   $mapping->classMappingById($setId)->toOne()->getStoreFromSet($mapping, $extensions)->elementToPath();
}
