// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::extension::*;
import meta::pure::runtime::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::*;
import  meta::pure::mapping::modelToModel::*;

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> {meta::pure::executionPlan::profiles::serverVersion.start='v1_29_0'} meta::pure::mapping::modelToModel::test::alloy::simple::withSubType::rootLevel::sourceRoot::testSingleSubType():Boolean[1]
{
  let tree = #{
    Target{
      targetZipCode, 
      targetAddress
    }
  }#;

  let query   = {|Target.all()->graphFetch($tree)->serialize($tree)};
  let mapping = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithSingleSubType;
  let runtime = ^Runtime( connections= [
                            ^JsonModelConnection(element = ^ModelStore(),
                                                  class = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location,
                                                  url = 'data:application/json,\n'+ 
                                                          '{ "zipCode": "10000000", "coordinates": "111.1111"}\n' + 
                                                          '{ "zipCode": "20000000", "coordinates": "111.2222" , "street" : "myStreet" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street"}\n'
                                                )
                            ]);
   let result = execute($query, $mapping, $runtime, defaultExtensions()).values;

   assertJsonStringsEqual(
     '[{"targetZipCode":"10000000" , "targetAddress" : "unknown"}  ,'+
     ' {"targetZipCode":"20000000", "targetAddress":  "myStreet"}]',
      $result
   );
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> {meta::pure::executionPlan::profiles::serverVersion.start='v1_29_0'} meta::pure::mapping::modelToModel::test::alloy::simple::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_instanceOf():Boolean[1]
{
  let tree = #{
      Target{
        targetZipCode, 
        targetAddress

      }
  }#;
  let mapping =meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_instanceOf;
  let query   = {|Target.all()->graphFetch($tree)->serialize($tree)};
  let runtime = ^Runtime( connections= [
                            ^JsonModelConnection(element = ^ModelStore(),
                                                  class = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location,
                                                  url = 'data:application/json,\n'+ 
                                                          '{ "zipCode": "10000000", "coordinates": "111.1111"}\n' + 
                                                          '{ "zipCode": "20000000", "coordinates": "222.2222" , "street" : "myStreet" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street"}\n'+
                                                          '{ "zipCode": "20000000", "coordinates": "333.3333" , "road" : "myRoad" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road"}\n'
                                                )
                            ]);
  let result = execute($query, $mapping, $runtime, defaultExtensions()).values;

   assertJsonStringsEqual(
     '[{"targetZipCode":"10000000" , "targetAddress" : "111.1111"}  ,'+
     ' {"targetZipCode":"20000000", "targetAddress":  "myStreet"},' +
     ' {"targetZipCode":"20000000", "targetAddress":  "myRoad"}]',
      $result
   );
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> {meta::pure::executionPlan::profiles::serverVersion.start='v1_29_0'} meta::pure::mapping::modelToModel::test::alloy::simple::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_match():Boolean[1]
{
  let tree = #{
      Target{
        targetZipCode, 
        targetAddress
      }
  }#;
  let mapping = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_match;
  let query   = {|Target.all()->graphFetch($tree)->serialize($tree)};
  let runtime = ^Runtime( connections= [
                            ^JsonModelConnection(element = ^ModelStore(),
                                                  class = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location,
                                                  url = 'data:application/json,\n'+ 
                                                          '{ "zipCode": "10000000", "coordinates": "111.1111"}\n' + 
                                                          '{ "zipCode": "20000000", "coordinates": "222.2222" , "street" : "myStreet" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street"}\n'+
                                                          '{ "zipCode": "20000000", "coordinates": "333.333" , "road" : "myRoad" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road"}\n'
                                                )
                            ]);
  let result = execute($query, $mapping, $runtime, defaultExtensions()).values;

   assertJsonStringsEqual(
     '[{"targetZipCode":"10000000" , "targetAddress" : "111.1111"}  ,'+
     ' {"targetZipCode":"20000000", "targetAddress":  "myStreet"},' +
     ' {"targetZipCode":"20000000", "targetAddress":  "myRoad"}]',
      $result
   );
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> {meta::pure::executionPlan::profiles::serverVersion.start='v1_29_0'} meta::pure::mapping::modelToModel::test::alloy::simple::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_match_functionCall():Boolean[1]
{
  let tree = #{
      Target{
        targetZipCode, 
        targetAddress

      }
  }#;
  let mapping = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_match_functionCall;
  let query   = {|Target.all()->graphFetch($tree)->serialize($tree)};
  let runtime = ^Runtime( connections= [
                            ^JsonModelConnection(element = ^ModelStore(),
                                                  class = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location,
                                                  url = 'data:application/json,\n'+ 
                                                          '{ "zipCode": "10000000", "coordinates": "111.1111"}\n' + 
                                                          '{ "zipCode": "20000000", "coordinates": "222.2222" , "street" : "myStreet" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street"}\n'+
                                                          '{ "zipCode": "20000000", "coordinates": "333.3333" , "road" : "myRoad" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road"}\n'
                                                )
                            ]);
  let result = execute($query, $mapping, $runtime, defaultExtensions()).values;

   assertJsonStringsEqual(
     '[{"targetZipCode":"10000000" , "targetAddress" : "111.1111"}  ,'+
     ' {"targetZipCode":"20000000", "targetAddress":  "myStreet"},' +
     ' {"targetZipCode":"20000000", "targetAddress":  "myRoad"}]',
      $result
   );
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> {meta::pure::executionPlan::profiles::serverVersion.start='v1_29_0'} meta::pure::mapping::modelToModel::test::alloy::simple::withSubType::rootLevel::sourceRoot::testSingleSubType_Checked():Boolean[1]
{
  let tree = #{
    Target{
      targetZipCode, 
      targetAddress
    }
  }#;

  let query   = {|Target.all()->graphFetchChecked($tree)->serialize($tree)};
  let mapping = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithSingleSubType;
  let runtime = ^Runtime( connections= [
                            ^JsonModelConnection(element = ^ModelStore(),
                                                  class = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location,
                                                  url = 'data:application/json,\n'+ 
                                                          '{ "zipCode": "10000000", "coordinates": "111.1111"}\n' + 
                                                          '{ "zipCode": "20000000", "coordinates": "111.2222" , "street" : "myStreet" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street"}\n'
                                                )
                            ]);
   let result = execute($query, $mapping, $runtime, defaultExtensions()).values;

  let expected=    '[\n' + 
                    '    {\n' + 
                    '        "defects": [],\n' + 
                    '        "source": {\n' + 
                    '            "defects": [],\n' + 
                    '            "source": {\n' + 
                    '                "number": 1,\n' + 
                    '                "record": "{\\"zipCode\\":\\"10000000\\",\\"coordinates\\":\\"111.1111\\"}"\n' + 
                    '            },\n' + 
                    '            "value": {\n' + 
                    '                "zipCode": "10000000"\n' + 
                    '            }\n' + 
                    '        },\n' + 
                    '        "value": {\n' + 
                    '            "targetAddress": "unknown",\n' + 
                    '            "targetZipCode": "10000000"\n' + 
                    '        }\n' + 
                    '    },\n' + 
                    '    {\n' + 
                    '        "defects": [],\n' + 
                    '        "source": {\n' + 
                    '            "defects": [],\n' + 
                    '            "source": {\n' + 
                    '                "number": 2,\n' + 
                    '                "record": "{\\"zipCode\\":\\"20000000\\",\\"coordinates\\":\\"111.2222\\",\\"street\\":\\"myStreet\\",\\"@type\\":\\"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street\\"}"\n' + 
                    '            },\n' + 
                    '            "value": {\n' + 
                    '                "zipCode": "20000000"\n' + 
                    '                "street": "myStreet"\n' +                  // fix to add this filed 
                    '            }\n' + 
                    '        },\n' + 
                    '        "value": {\n' + 
                    '            "targetAddress": "myStreet",\n' + 
                    '            "targetZipCode": "20000000"\n' + 
                    '        }\n' + 
                    '    }\n' + 
                    ']\n';
  assertJsonStringsEqual($expected , $result);
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> {meta::pure::executionPlan::profiles::serverVersion.start='v1_29_0'} meta::pure::mapping::modelToModel::test::alloy::simple::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_instanceOf_Checked():Boolean[1]
{
  let tree = #{
      Target{
        targetZipCode, 
        targetAddress

      }
  }#;
  let mapping =meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_instanceOf;
  let query   = {|Target.all()->graphFetchChecked($tree)->serialize($tree)};
  let runtime = ^Runtime( connections= [
                            ^JsonModelConnection(element = ^ModelStore(),
                                                  class = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location,
                                                  url = 'data:application/json,\n'+ 
                                                          '{ "zipCode": "10000000", "coordinates": "111.1111"}\n' + 
                                                          '{ "zipCode": "20000000", "coordinates": "222.2222" , "street" : "myStreet" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street"}\n'+
                                                          '{ "zipCode": "30000000", "coordinates": "333.3333" , "road" : "myRoad" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road"}\n'
                                                )
                            ]);
  let result = execute($query, $mapping, $runtime, defaultExtensions()).values;


  let expected=    '[\n' + 
                    '    {\n' + 
                    '        "defects": [],\n' + 
                    '        "source": {\n' + 
                    '            "defects": [],\n' + 
                    '            "source": {\n' + 
                    '                "number": 1,\n' + 
                    '                "record": "{\\"zipCode\\":\\"10000000\\",\\"coordinates\\":\\"111.1111\\"}"\n' + 
                    '            },\n' + 
                    '            "value": {\n' + 
                    '                "zipCode": "10000000",\n' + 
                    '                "coordinates": "111.1111"\n' + 
                    '            }\n' + 
                    '        },\n' + 
                    '        "value": {\n' + 
                    '            "targetAddress": "111.1111",\n' + 
                    '            "targetZipCode": "10000000"\n' + 
                    '        }\n' + 
                    '    },\n' + 
                    '    {\n' + 
                    '        "defects": [],\n' + 
                    '        "source": {\n' + 
                    '            "defects": [],\n' + 
                    '            "source": {\n' + 
                    '                "number": 2,\n' + 
                    '                "record": "{\\"zipCode\\":\\"20000000\\",\\"coordinates\\":\\"222.2222\\",\\"street\\":\\"myStreet\\",\\"@type\\":\\"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street\\"}"\n' + 
                    '            },\n' + 
                    '            "value": {\n' + 
                    '                "zipCode": "20000000",\n' + 
                    '                "street": "myStreet"\n' +                  // fix to add this filed 
                    '                "coordinates": "222.2222"\n' +
                    '            }\n' + 
                    '        },\n' + 
                    '        "value": {\n' + 
                    '            "targetAddress": "myStreet",\n' + 
                    '            "targetZipCode": "20000000"\n' + 
                    '        }\n' + 
                    '    },\n' + 
                     '    {\n' + 
                    '        "defects": [],\n' + 
                    '        "source": {\n' + 
                    '            "defects": [],\n' + 
                    '            "source": {\n' + 
                    '                "number": 3,\n' + 
                    '                "record": "{\\"zipCode\\":\\"30000000\\",\\"coordinates\\":\\"333.3333\\",\\"road\\":\\"myRoad\\",\\"@type\\":\\"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road\\"}"\n' + 
                    '            },\n' + 
                    '            "value": {\n' + 
                    '                "zipCode": "30000000",\n' + 
                    '                "road": "myRoad"\n' +                  // fix to add this filed 
                    '                "coordinates": "333.3333"\n' +
                    '            }\n' + 
                    '        },\n' + 
                    '        "value": {\n' + 
                    '            "targetAddress": "myRoad",\n' + 
                    '            "targetZipCode": "30000000"\n' + 
                    '        }\n' + 
                    '    }\n' +
                    ']\n';

  assertJsonStringsEqual($expected , $result);
}

// Test cases with no property Access

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> {meta::pure::executionPlan::profiles::serverVersion.start='v1_29_0'} meta::pure::mapping::modelToModel::test::alloy::simple::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_noPropertyAccess_instanceOf():Boolean[1]
{
  let tree = #{
      Target{
        targetZipCode, 
        targetAddress

      }
  }#;
  let mapping =meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_instanceOf_returnStringValue;
  let query   = {|Target.all()->graphFetch($tree)->serialize($tree)};
  let runtime = ^Runtime( connections= [
                            ^JsonModelConnection(element = ^ModelStore(),
                                                  class = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location,
                                                  url = 'data:application/json,\n'+ 
                                                          '{ "zipCode": "10000000", "coordinates": "111.1111"}\n' + 
                                                          '{ "zipCode": "20000000", "coordinates": "222.2222" , "street" : "myStreet" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street"}\n'+
                                                          '{ "zipCode": "30000000", "coordinates": "333.3333" , "road" : "myRoad" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road"}\n'
                                                )
                            ]);
  let result = execute($query, $mapping, $runtime, defaultExtensions()).values;

   assertJsonStringsEqual(
     '[{"targetZipCode":"10000000" , "targetAddress" : "location_valueFromMapping"}  ,'+
     ' {"targetZipCode":"20000000", "targetAddress":  "myStreet"},' +
     ' {"targetZipCode":"30000000", "targetAddress":  "road_valueFromMapping"}]',
      $result
   );
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> {meta::pure::executionPlan::profiles::serverVersion.start='v1_29_0'} meta::pure::mapping::modelToModel::test::alloy::simple::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_noPropertyAccess_instanceOf_returnBooleanValue():Boolean[1]
{
  let tree = #{
      Target2{
        targetZipCode, 
        isLocation,
        isStreet,
        isRoad
      }
  }#;
  let mapping =meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_instanceOf_returnBooleanValue;
  let query   = {|Target2.all()->graphFetch($tree)->serialize($tree)};
  let runtime = ^Runtime( connections= [
                            ^JsonModelConnection(element = ^ModelStore(),
                                                  class = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location,
                                                  url = 'data:application/json,\n'+ 
                                                          '{ "zipCode": "10000000", "coordinates": "111.1111"}\n' + 
                                                          '{ "zipCode": "20000000", "coordinates": "222.2222" , "street" : "myStreet" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street"}\n'+
                                                          '{ "zipCode": "30000000", "coordinates": "333.3333" , "road" : "myRoad" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road"}\n'
                                                )
                            ]);
  let result = execute($query, $mapping, $runtime, defaultExtensions()).values;

   assertJsonStringsEqual(
     '[{"targetZipCode":"10000000" , "isLocation":true, "isRoad":false, "isStreet":false }  ,'+
     ' {"targetZipCode":"20000000",  "isLocation":true, "isRoad":false, "isStreet":true },' +
     ' {"targetZipCode":"30000000",  "isLocation":true, "isRoad":true, "isStreet":false}]',
      $result
   );
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> {meta::pure::executionPlan::profiles::serverVersion.start='v1_29_0'} meta::pure::mapping::modelToModel::test::alloy::simple::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_noPropertyAccess_match():Boolean[1]
{
  let tree = #{
      Target{
        targetZipCode, 
        targetAddress

      }
  }#;
  let mapping = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_match;
  let query   = {|Target.all()->graphFetch($tree)->serialize($tree)};
  let runtime = ^Runtime( connections= [
                            ^JsonModelConnection(element = ^ModelStore(),
                                                  class = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location,
                                                  url = 'data:application/json,\n'+ 
                                                          '{ "zipCode": "10000000", "coordinates": "111.1111"}\n' + 
                                                          '{ "zipCode": "20000000", "coordinates": "222.2222" , "street" : "myStreet" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street"}\n'+
                                                          '{ "zipCode": "30000000", "coordinates": "333.333" , "road" : "myRoad" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road"}\n'
                                                )
                            ]);
  let result = execute($query, $mapping, $runtime, defaultExtensions()).values;

   assertJsonStringsEqual(
     '[{"targetZipCode":"10000000" , "targetAddress" : "location_valueFromMapping"}  ,'+
     ' {"targetZipCode":"20000000", "targetAddress":  "street_valueFromMapping"},' +
     ' {"targetZipCode":"30000000", "targetAddress":  "road_valueFromMapping"}]',
      $result
   );
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> {meta::pure::executionPlan::profiles::serverVersion.start='v1_29_0'} meta::pure::mapping::modelToModel::test::alloy::simple::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_noPropertyAccess_match_functionCall():Boolean[1]
{
  let tree = #{
      Target{
        targetZipCode, 
        targetAddress

      }
  }#;
  let mapping = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_match_functionCall;
  let query   = {|Target.all()->graphFetch($tree)->serialize($tree)};
  let runtime = ^Runtime( connections= [
                            ^JsonModelConnection(element = ^ModelStore(),
                                                  class = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location,
                                                  url = 'data:application/json,\n'+ 
                                                          '{ "zipCode": "10000000", "coordinates": "111.1111"}\n' + 
                                                          '{ "zipCode": "20000000", "coordinates": "222.2222" , "street" : "myStreet" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street"}\n'+
                                                          '{ "zipCode": "30000000", "coordinates": "333.3333" , "road" : "myRoad" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road"}\n'
                                                )
                            ]);
  let result = execute($query, $mapping, $runtime, defaultExtensions()).values;

    assertJsonStringsEqual(
     '[{"targetZipCode":"10000000" , "targetAddress" : "location_valueFromMapping"}  ,'+
     ' {"targetZipCode":"20000000", "targetAddress":  "street_valueFromMapping"},' +
     ' {"targetZipCode":"30000000", "targetAddress":  "road_valueFromMapping"}]',
      $result
   );
}

//checked cases
function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> {meta::pure::executionPlan::profiles::serverVersion.start='v1_29_0'} meta::pure::mapping::modelToModel::test::alloy::simple::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_noPropertyAccess_instanceOf_checked():Boolean[1]
{
  let tree = #{
      Target{
        targetZipCode, 
        targetAddress

      }
  }#;
  let mapping =meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_instanceOf_returnStringValue;
  let query   = {|Target.all()->graphFetchChecked($tree)->serialize($tree)};
  let runtime = ^Runtime( connections= [
                            ^JsonModelConnection(element = ^ModelStore(),
                                                  class = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location,
                                                  url = 'data:application/json,\n'+ 
                                                          '{ "zipCode": "10000000", "coordinates": "111.1111"}\n' + 
                                                          '{ "zipCode": "20000000", "coordinates": "222.2222" , "street" : "myStreet" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street"}\n'+
                                                          '{ "zipCode": "30000000", "coordinates": "333.3333" , "road" : "myRoad" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road"}\n'
                                                )
                            ]);
  let result = execute($query, $mapping, $runtime, defaultExtensions()).values;

  let expected=    '[\n' + 
                    '    {\n' + 
                    '        "defects": [],\n' + 
                    '        "source": {\n' + 
                    '            "defects": [],\n' + 
                    '            "source": {\n' + 
                    '                "number": 1,\n' + 
                    '                "record": "{\\"zipCode\\":\\"10000000\\",\\"coordinates\\":\\"111.1111\\"}"\n' + 
                    '            },\n' + 
                    '            "value": {\n' + 
                    '                "zipCode": "10000000",\n' + 
                    '            }\n' + 
                    '        },\n' + 
                    '        "value": {\n' + 
                    '            "targetAddress": "location_valueFromMapping",\n' + 
                    '            "targetZipCode": "10000000"\n' + 
                    '        }\n' + 
                    '    },\n' + 
                    '    {\n' + 
                    '        "defects": [],\n' + 
                    '        "source": {\n' + 
                    '            "defects": [],\n' + 
                    '            "source": {\n' + 
                    '                "number": 2,\n' + 
                    '                "record": "{\\"zipCode\\":\\"20000000\\",\\"coordinates\\":\\"222.2222\\",\\"street\\":\\"myStreet\\",\\"@type\\":\\"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street\\"}"\n' + 
                    '            },\n' + 
                    '            "value": {\n' + 
                    '                "zipCode": "20000000",\n' + 
                    '                "street": "myStreet"\n' +                  // fix to add this filed 
                    '            }\n' + 
                    '        },\n' + 
                    '        "value": {\n' + 
                    '            "targetAddress": "myStreet",\n' + 
                    '            "targetZipCode": "20000000"\n' + 
                    '        }\n' + 
                    '    },\n' + 
                     '    {\n' + 
                    '        "defects": [],\n' + 
                    '        "source": {\n' + 
                    '            "defects": [],\n' + 
                    '            "source": {\n' + 
                    '                "number": 3,\n' + 
                    '                "record": "{\\"zipCode\\":\\"30000000\\",\\"coordinates\\":\\"333.3333\\",\\"road\\":\\"myRoad\\",\\"@type\\":\\"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road\\"}"\n' + 
                    '            },\n' + 
                    '            "value": {\n' + 
                    '                "zipCode": "30000000",\n' + 
                    '            }\n' + 
                    '        },\n' + 
                    '        "value": {\n' + 
                    '            "targetAddress": "road_valueFromMapping",\n' + 
                    '            "targetZipCode": "30000000"\n' + 
                    '        }\n' + 
                    '    }\n' +
                    ']\n';

  assertJsonStringsEqual($expected , $result);
}


function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> {meta::pure::executionPlan::profiles::serverVersion.start='v1_29_0'} meta::pure::mapping::modelToModel::test::alloy::simple::withSubType::rootLevel::sourceRoot::testMultipleSubTypes_noPropertyAccess_match_functionCall_checked():Boolean[1]
{
  let tree = #{
      Target{
        targetZipCode, 
        targetAddress

      }
  }#;
  let mapping = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::rootLevel::sourceRoot::testMappingWithMultipleSubTypes_noPropertyAccess_match_functionCall;
  let query   = {|Target.all()->graphFetchChecked($tree)->serialize($tree)};
  let runtime = ^Runtime( connections= [
                            ^JsonModelConnection(element = ^ModelStore(),
                                                  class = meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Location,
                                                  url = 'data:application/json,\n'+ 
                                                          '{ "zipCode": "10000000", "coordinates": "111.1111"}\n' + 
                                                          '{ "zipCode": "20000000", "coordinates": "222.2222" , "street" : "myStreet" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street"}\n'+
                                                          '{ "zipCode": "30000000", "coordinates": "333.3333" , "road" : "myRoad" , "@type":"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road"}\n'
                                                )
                            ]);
  let result = execute($query, $mapping, $runtime, defaultExtensions()).values;

  let expected=    '[\n' + 
                  '    {\n' + 
                  '        "defects": [],\n' + 
                  '        "source": {\n' + 
                  '            "defects": [],\n' + 
                  '            "source": {\n' + 
                  '                "number": 1,\n' + 
                  '                "record": "{\\"zipCode\\":\\"10000000\\",\\"coordinates\\":\\"111.1111\\"}"\n' + 
                  '            },\n' + 
                  '            "value": {\n' + 
                  '                "zipCode": "10000000",\n' + 
                  '            }\n' + 
                  '        },\n' + 
                  '        "value": {\n' + 
                  '            "targetAddress": "location_valueFromMapping",\n' + 
                  '            "targetZipCode": "10000000"\n' + 
                  '        }\n' + 
                  '    },\n' + 
                  '    {\n' + 
                  '        "defects": [],\n' + 
                  '        "source": {\n' + 
                  '            "defects": [],\n' + 
                  '            "source": {\n' + 
                  '                "number": 2,\n' + 
                  '                "record": "{\\"zipCode\\":\\"20000000\\",\\"coordinates\\":\\"222.2222\\",\\"street\\":\\"myStreet\\",\\"@type\\":\\"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Street\\"}"\n' + 
                  '            },\n' + 
                  '            "value": {\n' + 
                  '                "zipCode": "20000000",\n' + 
                  '            }\n' + 
                  '        },\n' + 
                  '        "value": {\n' + 
                  '            "targetAddress": "street_valueFromMapping",\n' + 
                  '            "targetZipCode": "20000000"\n' + 
                  '        }\n' + 
                  '    },\n' + 
                    '    {\n' + 
                  '        "defects": [],\n' + 
                  '        "source": {\n' + 
                  '            "defects": [],\n' + 
                  '            "source": {\n' + 
                  '                "number": 3,\n' + 
                  '                "record": "{\\"zipCode\\":\\"30000000\\",\\"coordinates\\":\\"333.3333\\",\\"road\\":\\"myRoad\\",\\"@type\\":\\"meta::pure::graphFetch::tests::sourceTreeCalc::withSubType::Road\\"}"\n' + 
                  '            },\n' + 
                  '            "value": {\n' + 
                  '                "zipCode": "30000000",\n' + 
                  '            }\n' + 
                  '        },\n' + 
                  '        "value": {\n' + 
                  '            "targetAddress": "road_valueFromMapping",\n' + 
                  '            "targetZipCode": "30000000"\n' + 
                  '        }\n' + 
                  '    }\n' +
                  ']\n';

  assertJsonStringsEqual($expected , $result);
}