// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::mapping::modelToModel::test::shared::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::modelToModel::test::*;
import meta::pure::runtime::*;
import meta::pure::mapping::modelToModel::test::shared::src::*;
import meta::pure::mapping::modelToModel::test::shared::dest::*;



Class meta::pure::mapping::modelToModel::test::shared::dest::Firm
{
   legalName : String[1];
   employees : Person[*];
   addresses : Address[*];
   count : Integer[1];
}

Class meta::pure::mapping::modelToModel::test::shared::dest::Person
{
   firstName : String[1];
   lastName : String[1];
   alternateName: NameWithLang[0..1];
   addresses : Address[*];
   firm : Firm[0..1];
   description : String[0..1];
   type : String[0..1];
}

Class meta::pure::mapping::modelToModel::test::shared::dest::NameWithLang
{
  lang: String[1];
  value: String[1];
}


Class meta::pure::mapping::modelToModel::test::shared::dest::PersonWithConstraint
[
   firstNameLength : $this.firstName->length() > 5
]
{
   firstName : String[1];
   lastName : String[1];
   addresses : Address[*];
   firm : Firm[0..1];
}

Class meta::pure::mapping::modelToModel::test::shared::dest::FirmEmployee
{
   firmName : String[1];
   fullName : String[1];
   dateOfBirth : StrictDate[0..1];
   streetAddress: String[0..1];
}

Class meta::pure::mapping::modelToModel::test::shared::dest::Address
{
   street : String[0..1];
   extension : AddressExtension[0..1];
}

Class meta::pure::mapping::modelToModel::test::shared::dest::AddressExtension
{
    stuff : String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::dest::Vehicle
{
   wheelCount : Integer[1];
   engine : Boolean[1];
   roadster : Boolean[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_Vehicle
{
   roadVehicle: meta::pure::mapping::modelToModel::test::shared::src::_RoadVehicle[1];
   licenseNumber: String[0..1];
   registrationNumber: String[0..1];
   isElectric: Boolean[0..1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_RoadVehicle
{
   wheelCount : Integer[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_Car extends _RoadVehicle
{
   engine : Boolean[1];
   series : String[1];
   type : String[*];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_Bicycle extends _RoadVehicle
{
   roadster : Boolean[1];
   series : String[0..1];
   type : String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_Motorcycle extends _RoadVehicle
{
   series : String[0..1];
   type : String[0..1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::VehicleInventory
{
   series : String[0..1];
   type : String[*];
   LDDeriv: String[1];
   isValidRegistration: String[1];
   isElectric: Boolean[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_Firm
{
  name : String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_SimpleFirm
{
  name : String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_Person
{
   fullName : String[1];
   addresses : Address[*];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_SimplePerson
{
   fullName : String[1];
   dateOfBirth : StrictDate[0..1];
   address : Address[0..1];
}

Association  meta::pure::mapping::modelToModel::test::shared::src::_Firm_Person
{
   employees : _Person[*];
   firm : _Firm[1];
}

Association  meta::pure::mapping::modelToModel::test::shared::src::_SimpleFirm_SimplePerson
{
   simpleEmployees : _SimplePerson[*];
   firm : _SimpleFirm[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_S_Person
{
   fullName      : String[1];
   alternateName : _NameWithLang[0..1];
   _type         : String[0..1];
}

Profile meta::pure::mapping::modelToModel::test::shared::src::xmlValueType
{
  stereotypes: [attribute, defaultValue];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_NameWithLang
{
  <<xmlValueType.attribute>> _lang: String[1];
  <<xmlValueType.defaultValue>> value__: String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_S_PersonA extends _S_Person
{
   aName    : String[1];
   vehicle  : _RoadVehicle[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_S_PersonB extends _S_Person
{
   bName    : String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_S_PersonC extends _S_PersonB
{
   cName    : String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_S_Firm
{
  name : String[1];
}

Association  meta::pure::mapping::modelToModel::test::shared::src::_S_Firm__S_Person
{
   employees : _S_Person[*];
   firm : _S_Firm[0..1];
}

Association  meta::pure::mapping::modelToModel::test::shared::src::_S_Person_S_Person_Address_
{
   address : S_Person_Address[0..1];
   person  : _S_Person[0..1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_Person_Address
{
   name : String[1];
   street : String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::S_Person_Address
{
   name : String[1];
   street : String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_Trade
{
   side : Integer[1];
   product: _Product[1];
}

Class meta::pure::mapping::modelToModel::test::shared::dest::Trade
{
   side : Side[1];
   productName: String[1];
   productRegion: String[0..1];
}

Class meta::pure::mapping::modelToModel::test::shared::dest::TradeExtended extends Trade
{
   sideDescription()
   {
      $this.side->typeName() + '[' + $this.side->typePath() + ']'
   }: String[1];
}

Enum meta::pure::mapping::modelToModel::test::shared::dest::Side
{
   Buy, Sell   
}

Class meta::pure::mapping::modelToModel::test::shared::src::_FirmX
{
   name : String[1];
   ceo:_PersonSrc1[0..1];
   pathToEmployeesSet1:_PersonSrc1[*];
   pathToEmployeesSet2:_PersonSrc2[*];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_PersonSrc1
{
   nameFrom1 : String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_PersonSrc2
{
   nameFrom2 : String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::dest::Product
{
   name : String[1];
   subProductName:String[1];
   bondDetailStatus: String[1];
   region: String[0..1];
}

Class meta::pure::mapping::modelToModel::test::shared::dest::Product2Simple
{
   name : String[1];
   region: Region[0..1];
}

Enum meta::pure::mapping::modelToModel::test::shared::dest::Region
{
   NewYork,
   London
}


Class meta::pure::mapping::modelToModel::test::shared::src::_Product extends ProductWithRegion
{
   name : String[1];
   subProductName:String[1];
   bondDetailStatus: String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::_Product2
{
   name : String[1];
   subProductName:String[1];
   bondDetailStatus: String[1];
   region: Region[0..1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::ProductWithRegion
{
   region : String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::dest::ConsumerModel
{
  taxonomy: String[0..1];
  underlyer: String[0..1];
  booleanField: Boolean[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::ContractualTrade
{
  executionTimestamp: DateTime[1];
  product: ContractualProduct[1];
  accountId: Integer[1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> meta::pure::mapping::modelToModel::test::shared::src::ContractualProduct
{
}

Class meta::pure::mapping::modelToModel::test::shared::src::EquitySwap extends ContractualProduct
{
  underlyerRic: String[1];
  terminationDate: StrictDate[1];
  placeholder1: String[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::MetalForward extends ContractualProduct
{
  deliverable: String[1];
  valueDate: StrictDate[1];
}

Class meta::pure::mapping::modelToModel::test::shared::src::FxForward extends ContractualProduct
{
  currencyPair: String[1];
  valueDate: StrictDate[1];
  placeholder2: String[1];
}