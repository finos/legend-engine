// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::milestoning::*;
import meta::pure::milestoning::tests::isEdgePointProperty::*;

function meta::pure::milestoning::isEdgePointProperty(p:AbstractProperty<Any>[1]):Boolean[1]
{
   $p->instanceOf(Property) && !$p.name->isEmpty() && $p.name->toOne()->endsWith('AllVersions') && hasGeneratedMilestoningPropertyStereotype($p)
}



Class <<temporal.businesstemporal>> meta::pure::milestoning::tests::isEdgePointProperty::BusinessTemporalClassA
{
   b : BusinessTemporalClassB[0..1];
   c : NonTemporalClassC[0..1];
}

Class <<temporal.businesstemporal>> meta::pure::milestoning::tests::isEdgePointProperty::BusinessTemporalClassB
{

}

Class meta::pure::milestoning::tests::isEdgePointProperty::NonTemporalClassC
{

}

Class <<temporal.businesstemporal>> meta::pure::milestoning::tests::isEdgePointProperty::BusinessTemporalClassD
{

}

Association meta::pure::milestoning::tests::isEdgePointProperty::DuplicatePropAssociation
{
   propertyB: BusinessTemporalClassB[0..*];
   propertyB: BusinessTemporalClassD[0..1];
}

function <<test.Test>> meta::pure::milestoning::tests::isEdgePointProperty::testEdgePointPropertyFunctions():Boolean[1]
{
  let edgePointProperty = BusinessTemporalClassA.properties->filter(p|$p->isEdgePointProperty())->toOne();

  assertEquals('bAllVersions',$edgePointProperty.name);
  assertEquals('b',$edgePointProperty->originalPropertyNameForEdgePointProperty());
}


function <<test.Test>> meta::pure::milestoning::tests::isEdgePointProperty::testGetMilestonedGeneratedQualifiedPropertiesForEdgePointProperty():Boolean[1]
{
   let edgePointProperty = BusinessTemporalClassA.properties->filter(p|$p->isEdgePointProperty())->toOne();
   let matchingMilestoneGeneratedQps = $edgePointProperty->getMilestonedGeneratedQualifiedPropertiesForEdgePointProperty();
   assertEquals(['b','b'],$matchingMilestoneGeneratedQps.functionName);
}