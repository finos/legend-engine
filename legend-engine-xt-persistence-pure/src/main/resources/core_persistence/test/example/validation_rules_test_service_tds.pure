// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**********
 * tds runtime, service, persistence
 **********/

import meta::legend::service::metamodel::*;

import meta::pure::mapping::*;

import meta::pure::persistence::metamodel::*;
import meta::pure::persistence::metamodel::dataset::*;
import meta::pure::persistence::metamodel::dataset::deduplication::*;
import meta::pure::persistence::metamodel::dataset::emptyhandling::*;
import meta::pure::persistence::metamodel::dataset::partitioning::*;
import meta::pure::persistence::metamodel::notifier::*;
import meta::pure::persistence::metamodel::persister::*;
import meta::pure::persistence::metamodel::persister::deduplication::*;
import meta::pure::persistence::metamodel::persister::ingestmode::delta::*;
import meta::pure::persistence::metamodel::persister::ingestmode::delta::merge::*;
import meta::pure::persistence::metamodel::persister::transactionmilestoning::*;
import meta::pure::persistence::metamodel::persister::sink::*;
import meta::pure::persistence::metamodel::persister::targetshape::*;
import meta::pure::persistence::metamodel::service::*;
import meta::pure::persistence::metamodel::service::output::*;
import meta::pure::persistence::metamodel::trigger::*;
import meta::pure::persistence::test::example::*;

import meta::pure::runtime::*;

import meta::pure::test::assertion::*;

function meta::pure::persistence::test::example::RelationalRuntime(): Runtime[1]
{
  ^EngineRuntime(
    mappings = meta::pure::persistence::test::example::RelationalMapping,
    connections = meta::pure::persistence::test::example::RelationalConnection()
  );
}

function meta::pure::persistence::test::example::TdsService(): Service[1]
{
  ^Service
  (
    pattern = '/',
    owners = ['dummy'],
    documentation = '',
    autoActivateUpdates = true,
    execution = ^PureSingleExecution
    (
      func = | meta::pure::persistence::test::example::FlatInput.all()->project(
        [
          x | $x.booleanIn, x | $x.integerIn, x | $x.floatIn, x | $x.decimalIn, x | $x.strictDateIn, x | $x.dateTimeIn, x | $x.stringIn
        ],
        [
          'Boolean', 'Integer', 'Float', 'Decimal', 'StrictDate', 'DateTime', 'String'
        ]
      ),
      mapping = meta::pure::persistence::test::example::RelationalMapping,
      runtime = meta::pure::persistence::test::example::RelationalRuntime()
    ),
    test = ^SingleExecutionTest(
      data = '',
      asserts = ^TestContainer(assert = x:Result<Any|m>[1] | true))
  );
}

function meta::pure::persistence::test::example::TdsServiceWithFlatPersistence(): Persistence[1]
{
  ^Persistence(
    documentation = 'Tds service into a flat target',
    trigger = ^ManualTrigger(),
    service = meta::pure::persistence::test::example::TdsService(),
    persister = ^BatchPersister(
      ingestMode = ^UnitemporalDelta(
        mergeStrategy = ^NoDeletesMergeStrategy(),
        transactionMilestoning = ^BatchIdTransactionMilestoning(
          batchIdInName = 'IN_Z',
          batchIdOutName = 'OUT_Z'
        )
      ),
      sink = ^RelationalSink(database = meta::pure::persistence::test::example::RelationalDatabase),
      targetShape = ^FlatTarget(
        targetName = 'FlatTable2',
        deduplicationStrategy = ^NoDeduplicationStrategy()
      )
    ),
    notifier = ^Notifier(notifyees = [])
  );
}

function meta::pure::persistence::test::example::TdsServiceWithMultiFlatPersistence(): Persistence[1]
{
  ^Persistence(
    documentation = 'Tds service into a flat target',
    trigger = ^ManualTrigger(),
    service = meta::pure::persistence::test::example::TdsService(),
    persister = ^BatchPersister(
      ingestMode = ^UnitemporalDelta(
        mergeStrategy = ^NoDeletesMergeStrategy(),
        transactionMilestoning = ^BatchIdTransactionMilestoning(
          batchIdInName = 'IN_Z',
          batchIdOutName = 'OUT_Z'
        )
      ),
      sink = ^RelationalSink(database = meta::pure::persistence::test::example::RelationalDatabase),
      targetShape = ^MultiFlatTarget(
        modelClass = meta::pure::persistence::test::example::WrapperOutput,
        transactionScope = TransactionScope.ALL_TARGETS,
        parts = [
          ^MultiFlatTargetPart(
            modelProperty = meta::pure::persistence::test::example::WrapperOutput.properties->filter(p | $p.name == 'flatOutput2')->first()->toOne(),
            targetName = 'FlatTable2',
            deduplicationStrategy = ^NoDeduplicationStrategy()
          ),
          ^MultiFlatTargetPart(
            modelProperty = meta::pure::persistence::test::example::WrapperOutput.properties->filter(p | $p.name == 'flatOutput3')->first()->toOne(),
            targetName = 'FlatTable3',
            deduplicationStrategy = ^NoDeduplicationStrategy()
          )
        ]
      )
    ),
    notifier = ^Notifier(notifyees = [])
  );
}

function meta::pure::persistence::test::example::TdsServiceWithTdsRootServiceOutput(): Persistence[1]
{
  ^Persistence(
    documentation = 'Tds service into a flat target',
    trigger = ^ManualTrigger(),
    service = meta::pure::persistence::test::example::TdsService(),
    serviceOutputTargets = [^ServiceOutputTarget(
      serviceOutput = ^TdsServiceOutput(
        keys = ['integerID'],
        datasetType = ^Snapshot(partitioning = ^NoPartitioning(emptyDatasetHandling = ^NoOp())),
        deduplication = ^NoDeduplication()),
      target = ^TestTarget())],
    notifier = ^Notifier(notifyees = [])
  );
}

function meta::pure::persistence::test::example::TdsServiceWithGraphFetchRootServiceOutput(): Persistence[1]
{
  ^Persistence(
    documentation = 'Tds service into a flat target',
    trigger = ^ManualTrigger(),
    service = meta::pure::persistence::test::example::TdsService(),
    serviceOutputTargets = [^ServiceOutputTarget(
      serviceOutput = ^GraphFetchServiceOutput(
        keys = [#/meta::pure::persistence::test::example::FlatOutput/idOut#],
        datasetType = ^Snapshot(partitioning = ^NoPartitioning(emptyDatasetHandling = ^NoOp())),
        deduplication = ^NoDeduplication()),
      target = ^TestTarget())],
    notifier = ^Notifier(notifyees = [])
  );
}

function meta::pure::persistence::test::example::TdsServiceWithGraphFetchPathServiceOutput(): Persistence[1]
{
  ^Persistence(
    documentation = 'Tds service into a flat target',
    trigger = ^ManualTrigger(),
    service = meta::pure::persistence::test::example::TdsService(),
    serviceOutputTargets = [^ServiceOutputTarget(
      serviceOutput = ^GraphFetchServiceOutput(
        path = [#/meta::pure::persistence::test::example::WrapperOutput/flatOutput1#],
        keys = [#/meta::pure::persistence::test::example::WrapperOutput/flatOutput1/idOut#],
        datasetType = ^Snapshot(partitioning = ^NoPartitioning(emptyDatasetHandling = ^NoOp())),
        deduplication = ^NoDeduplication()),
      target = ^TestTarget())],
    notifier = ^Notifier(notifyees = [])
  );
}
