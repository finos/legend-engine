// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::persistence::metamodel::*;
import meta::pure::persistence::metamodel::persister::*;
import meta::pure::persistence::test::*;
import meta::pure::persistence::validation::*;

/**********
 * flat graph fetch service tests
 **********/

function <<test.Test>> meta::pure::persistence::test::validateTarget_flatM2mService_flatPersistence(): Boolean[1]
{
  let persistence = meta::pure::persistence::test::FlatM2mServiceWithFlatPersistence();
  let result = validateTarget($persistence.persister->cast(@BatchPersister).targetShape);
  assert($result.valid());
}

function <<test.Test>> meta::pure::persistence::test::validateServiceAndTarget_flatM2mService_flatPersistence(): Boolean[1]
{
  let persistence = meta::pure::persistence::test::FlatM2mServiceWithFlatPersistence();
  let result = validateServiceAndTarget($persistence.service, $persistence.persister->cast(@BatchPersister).targetShape);
  assert($result.valid());
}

function <<test.Test>> meta::pure::persistence::test::validateTarget_flatM2mService_multiFlatPersistence(): Boolean[1]
{
  let persistence = meta::pure::persistence::test::FlatM2mServiceWithMultiFlatPersistence();
  let result = validateTarget($persistence.persister->cast(@BatchPersister).targetShape);
  assert($result.valid());
}

function <<test.Test>> meta::pure::persistence::test::validateServiceAndTarget_flatM2mService_multiFlatPersistence(): Boolean[1]
{
  let persistence = meta::pure::persistence::test::FlatM2mServiceWithMultiFlatPersistence();
  let result = validateServiceAndTarget($persistence.service, $persistence.persister->cast(@BatchPersister).targetShape);
  assert(!$result.valid());
}

/**********
 * nested graph fetch service tests
 **********/

function <<test.Test>> meta::pure::persistence::test::validateTarget_nestedM2mService_flatPersistence(): Boolean[1]
{
  let persistence = meta::pure::persistence::test::NestedM2mServiceWithFlatPersistence();
  let result = validateTarget($persistence.persister->cast(@BatchPersister).targetShape);
  assert($result.valid());
}

function <<test.Test>> meta::pure::persistence::test::validateServiceAndTarget_nestedM2mService_flatPersistence(): Boolean[1]
{
  let persistence = meta::pure::persistence::test::NestedM2mServiceWithFlatPersistence();
  let result = validateServiceAndTarget($persistence.service, $persistence.persister->cast(@BatchPersister).targetShape);
  assert(!$result.valid());
}

function <<test.Test>> meta::pure::persistence::test::validateTarget_nestedM2mService_multiFlatPersistence(): Boolean[1]
{
  let persistence = meta::pure::persistence::test::NestedM2mServiceWithMultiFlatPersistence();
  let result = validateTarget($persistence.persister->cast(@BatchPersister).targetShape);
  assert($result.valid());
}

function <<test.Test>> meta::pure::persistence::test::validateServiceAndTarget_nestedM2mService_multiFlatPersistence(): Boolean[1]
{
  let persistence = meta::pure::persistence::test::NestedM2mServiceWithMultiFlatPersistence();
  let result = validateServiceAndTarget($persistence.service, $persistence.persister->cast(@BatchPersister).targetShape);
  assert($result.valid());
}

/**********
 * model classes
 **********/

Class meta::pure::persistence::test::WrapperInput
{
  flatInput1: FlatInput[1];
  flatInput2: FlatInput[1];
}

Class meta::pure::persistence::test::FlatInput
{
  idIn: Integer[1];
  booleanIn: Boolean[1];
  integerIn: Integer[1];
  floatIn: Float[1];
  decimalIn: Decimal[1];
  strictDateIn: StrictDate[1];
  dateTimeIn: DateTime[1];
  stringIn: String[1];
}

Class meta::pure::persistence::test::WrapperOutput
{
  flatOutput1: FlatOutput[1];
  flatOutput2: FlatOutput[1];
}

Class meta::pure::persistence::test::FlatOutput
{
  idOut: Integer[1];
  booleanOut: Boolean[1];
  integerOut: Integer[1];
  floatOut: Float[1];
  decimalOut: Decimal[1];
  strictDateOut: StrictDate[1];
  dateTimeOut: DateTime[1];
  stringOut: String[1];
}

/**********
 * database tables
 **********/

###Relational
Database meta::pure::persistence::test::TestDatabase
(
  Table FlatTable1 (
    id INTEGER PRIMARY KEY,
    boolean_col BIT,
    integer_col INTEGER,
    float_col DOUBLE,
    decimal_col DECIMAL(10,2),
    strict_date_col DATE,
    date_time_col TIMESTAMP,
    string_col VARCHAR(200)
  )

  Table FlatTable2 (
    id INTEGER PRIMARY KEY,
    boolean_col BIT,
    integer_col INTEGER,
    float_col DOUBLE,
    decimal_col DECIMAL(10,2),
    strict_date_col DATE,
    date_time_col TIMESTAMP,
    string_col VARCHAR(200)
  )
)

/**********
 * flat mapping, runtime, service, persistence
 **********/

###Mapping
Mapping meta::pure::persistence::test::FlatM2mMapping
(
  *meta::pure::persistence::test::FlatOutput: Pure
  {
    ~src meta::pure::persistence::test::FlatInput
    idOut: $src.idIn
    booleanOut: $src.booleanIn
    integerOut: $src.integerIn
    floatOut: $src.floatIn
    decimalOut: $src.decimalIn
    strictDateOut: $src.strictDateIn
    dateTimeOut: $src.dateTimeIn
    stringOut: $src.stringIn
  }
)

###Pure
import meta::legend::service::metamodel::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::persistence::metamodel::*;
import meta::pure::persistence::metamodel::notifier::*;
import meta::pure::persistence::metamodel::persister::*;
import meta::pure::persistence::metamodel::persister::deduplication::*;
import meta::pure::persistence::metamodel::persister::ingestmode::delta::*;
import meta::pure::persistence::metamodel::persister::ingestmode::delta::merge::*;
import meta::pure::persistence::metamodel::persister::transactionmilestoning::*;
import meta::pure::persistence::metamodel::persister::sink::*;
import meta::pure::persistence::metamodel::persister::targetshape::*;
import meta::pure::persistence::metamodel::trigger::*;
import meta::pure::runtime::*;
import meta::pure::test::assertion::*;

function meta::pure::persistence::test::FlatM2mRuntime(): Runtime[1]
{
  ^EngineRuntime(
    mappings = meta::pure::persistence::test::FlatM2mMapping,
    connections = ^JsonModelConnection(
      element=^ModelStore(),
      class = meta::pure::persistence::test::FlatInput,
      url = 'executor:default'));
}

function meta::pure::persistence::test::FlatM2mService(): Service[1]
{
  ^Service
  (
    pattern = '/',
    owners = ['dummy'],
    documentation = '',
    autoActivateUpdates = true,
    execution = ^PureSingleExecution
    (
      func = | meta::pure::persistence::test::FlatOutput.all()->graphFetch(
        #{
          meta::pure::persistence::test::FlatOutput
          {
            idOut,
            booleanOut,
            integerOut,
            floatOut,
            decimalOut,
            strictDateOut,
            dateTimeOut,
            stringOut
          }
        }#
      )->serialize(
        #{
          meta::pure::persistence::test::FlatOutput
          {
            idOut,
            booleanOut,
            integerOut,
            floatOut,
            decimalOut,
            strictDateOut,
            dateTimeOut,
            stringOut
          }
        }#
      ),
      mapping = meta::pure::persistence::test::FlatM2mMapping,
      runtime = meta::pure::persistence::test::FlatM2mRuntime()
    ),
    test = ^SingleExecutionTest(
      data = '',
      asserts = ^TestContainer(assert = x:Result<Any|m>[1] | true)),
    tests = ^ServiceTest(id = 'test1', assertions = ^EqualTo(id = 'assertion1', expected = ''))
  );
}

function meta::pure::persistence::test::FlatM2mServiceWithFlatPersistence(): Persistence[1]
{
  ^Persistence(
    documentation = 'Graph fetch m2m service into a flat target',
    trigger = ^ManualTrigger(),
    service = meta::pure::persistence::test::FlatM2mService(),
    persister = ^BatchPersister(
      ingestMode = ^UnitemporalDelta(
        mergeStrategy = ^NoDeletesMergeStrategy(),
        transactionMilestoning = ^BatchIdTransactionMilestoning(
          batchIdInName = 'IN_Z',
          batchIdOutName = 'OUT_Z'
        )
      ),
      sink = ^RelationalSink(database = meta::pure::persistence::test::TestDatabase),
      targetShape = ^FlatTarget(
        targetName = 'FlatTable1',
        deduplicationStrategy = ^NoDeduplicationStrategy()
      )
    ),
    notifier = ^Notifier(notifyees = [])
  );
}

function meta::pure::persistence::test::FlatM2mServiceWithMultiFlatPersistence(): Persistence[1]
{
  ^Persistence(
    documentation = 'Graph fetch m2m service into a multi flat target',
    trigger = ^ManualTrigger(),
    service = meta::pure::persistence::test::FlatM2mService(),
    persister = ^BatchPersister(
      ingestMode = ^UnitemporalDelta(
        mergeStrategy = ^NoDeletesMergeStrategy(),
        transactionMilestoning = ^BatchIdTransactionMilestoning(
          batchIdInName = 'IN_Z',
          batchIdOutName = 'OUT_Z'
        )
      ),
      sink = ^RelationalSink(database = meta::pure::persistence::test::TestDatabase),
      targetShape = ^MultiFlatTarget(
        modelClass = meta::pure::persistence::test::WrapperOutput,
        transactionScope = TransactionScope.ALL_TARGETS,
        parts = [
          ^MultiFlatTargetPart(
            modelProperty = meta::pure::persistence::test::WrapperOutput.properties->filter(p | $p.name == 'flatOutput1')->first()->toOne(),
            targetName = 'FlatTable1',
            deduplicationStrategy = ^NoDeduplicationStrategy()
          ),
          ^MultiFlatTargetPart(
            modelProperty = meta::pure::persistence::test::WrapperOutput.properties->filter(p | $p.name == 'flatOutput2')->first()->toOne(),
            targetName = 'FlatTable2',
            deduplicationStrategy = ^NoDeduplicationStrategy()
          )
        ]
      )
    ),
    notifier = ^Notifier(notifyees = [])
  );
}

/**********
 * nested mapping, runtime, service, persistence
 **********/

###Mapping
Mapping meta::pure::persistence::test::NestedM2mMapping
(
  *meta::pure::persistence::test::WrapperOutput: Pure
  {
    ~src meta::pure::persistence::test::WrapperInput
    flatOutput1: $src.flatInput1
    flatOutput2: $src.flatOutput2
  }

  *meta::pure::persistence::test::FlatOutput: Pure
  {
    ~src meta::pure::persistence::test::FlatInput
    idOut: $src.idIn
    booleanOut: $src.booleanIn
    integerOut: $src.integerIn
    floatOut: $src.floatIn
    decimalOut: $src.decimalIn
    strictDateOut: $src.strictDateIn
    dateTimeOut: $src.dateTimeIn
    stringOut: $src.stringIn
  }
)

###Pure
import meta::legend::service::metamodel::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::persistence::metamodel::*;
import meta::pure::persistence::metamodel::notifier::*;
import meta::pure::persistence::metamodel::persister::*;
import meta::pure::persistence::metamodel::persister::deduplication::*;
import meta::pure::persistence::metamodel::persister::ingestmode::delta::*;
import meta::pure::persistence::metamodel::persister::ingestmode::delta::merge::*;
import meta::pure::persistence::metamodel::persister::transactionmilestoning::*;
import meta::pure::persistence::metamodel::persister::sink::*;
import meta::pure::persistence::metamodel::persister::targetshape::*;
import meta::pure::persistence::metamodel::trigger::*;
import meta::pure::runtime::*;
import meta::pure::test::assertion::*;

function meta::pure::persistence::test::NestedM2mRuntime(): Runtime[1]
{
  ^EngineRuntime(
    mappings = meta::pure::persistence::test::NestedM2mMapping,
    connections = ^JsonModelConnection(
      element=^ModelStore(),
      class = meta::pure::persistence::test::WrapperInput,
      url = 'executor:default'));
}

function meta::pure::persistence::test::NestedM2mService(): Service[1]
{
  ^Service
  (
    pattern = '/',
    owners = ['dummy'],
    documentation = '',
    autoActivateUpdates = true,
    execution = ^PureSingleExecution
    (
      func = | meta::pure::persistence::test::WrapperOutput.all()->graphFetch(
        #{
          meta::pure::persistence::test::WrapperOutput
          {
            flatOutput1
            {
              idOut,
              booleanOut,
              integerOut,
              floatOut,
              decimalOut,
              strictDateOut,
              dateTimeOut,
              stringOut
            },
            flatOutput2
            {
              idOut,
              booleanOut,
              integerOut,
              floatOut,
              decimalOut,
              strictDateOut,
              dateTimeOut,
              stringOut
            }
          }
        }#
      )->serialize(
        #{
          meta::pure::persistence::test::WrapperOutput
          {
            flatOutput1
            {
              idOut,
              booleanOut,
              integerOut,
              floatOut,
              decimalOut,
              strictDateOut,
              dateTimeOut,
              stringOut
            },
            flatOutput2
            {
              idOut,
              booleanOut,
              integerOut,
              floatOut,
              decimalOut,
              strictDateOut,
              dateTimeOut,
              stringOut
            }
          }
        }#
      ),
      mapping = meta::pure::persistence::test::NestedM2mMapping,
      runtime = meta::pure::persistence::test::NestedM2mRuntime()
    ),
    test = ^SingleExecutionTest(
      data = '',
      asserts = ^TestContainer(assert = x:Result<Any|m>[1] | true)),
    tests = ^ServiceTest(id = 'test1', assertions = ^EqualTo(id = 'assertion1', expected = ''))
  );
}

function meta::pure::persistence::test::NestedM2mServiceWithFlatPersistence(): Persistence[1]
{
  ^Persistence(
    documentation = 'Graph fetch m2m service into a flat target',
    trigger = ^ManualTrigger(),
    service = meta::pure::persistence::test::NestedM2mService(),
    persister = ^BatchPersister(
      ingestMode = ^UnitemporalDelta(
        mergeStrategy = ^NoDeletesMergeStrategy(),
        transactionMilestoning = ^BatchIdTransactionMilestoning(
          batchIdInName = 'IN_Z',
          batchIdOutName = 'OUT_Z'
        )
      ),
      sink = ^RelationalSink(database = meta::pure::persistence::test::TestDatabase),
      targetShape = ^FlatTarget(
        targetName = 'FlatTable',
        deduplicationStrategy = ^NoDeduplicationStrategy()
      )
    ),
    notifier = ^Notifier(notifyees = [])
  );
}

function meta::pure::persistence::test::NestedM2mServiceWithMultiFlatPersistence(): Persistence[1]
{
  ^Persistence(
    documentation = 'Graph fetch m2m service into a multi flat target',
    trigger = ^ManualTrigger(),
    service = meta::pure::persistence::test::NestedM2mService(),
    persister = ^BatchPersister(
      ingestMode = ^UnitemporalDelta(
        mergeStrategy = ^NoDeletesMergeStrategy(),
        transactionMilestoning = ^BatchIdTransactionMilestoning(
          batchIdInName = 'IN_Z',
          batchIdOutName = 'OUT_Z'
        )
      ),
      sink = ^RelationalSink(database = meta::pure::persistence::test::TestDatabase),
      targetShape = ^MultiFlatTarget(
        modelClass = meta::pure::persistence::test::WrapperOutput,
        transactionScope = TransactionScope.ALL_TARGETS,
        parts = [
          ^MultiFlatTargetPart(
            modelProperty = meta::pure::persistence::test::WrapperOutput.properties->filter(p | $p.name == 'flatOutput1')->first()->toOne(),
            targetName = 'FlatTable1',
            deduplicationStrategy = ^NoDeduplicationStrategy()
          ),
          ^MultiFlatTargetPart(
            modelProperty = meta::pure::persistence::test::WrapperOutput.properties->filter(p | $p.name == 'flatOutput2')->first()->toOne(),
            targetName = 'FlatTable2',
            deduplicationStrategy = ^NoDeduplicationStrategy()
          )
        ]
      )
    ),
    notifier = ^Notifier(notifyees = [])
  );
}
