{
  "_type": "simple",
  "authDependent": false,
  "kerberos": null,
  "serializer": {
    "name": "pure",
    "version": "vX_X_X"
  },
  "templateFunctions": [],
  "rootExecutionNode": {
    "_type": "platform",
    "resultType": {
      "_type": "dataType",
      "dataType": "String"
    },
    "executionNodes": [
      {
        "_type": "storeMappingGlobalGraphFetchExecutionNode",
        "resultType": {
          "_type": "partialClass",
          "setImplementations": [
            {
              "mapping": "meta::external::store::service::showcase::mapping::ServiceStoreMapping",
              "id": "trade_set",
              "propertyMappings": [
                {
                  "property": "tradeId",
                  "type": "String",
                  "enumMapping": {}
                },
                {
                  "property": "quantity",
                  "type": "Integer",
                  "enumMapping": {}
                }
              ],
              "class": "meta::external::store::service::showcase::domain::Trade"
            }
          ],
          "propertiesWithParameters": [
            {
              "property": "tradeId",
              "parameters": null
            },
            {
              "property": "quantity",
              "parameters": null
            }
          ],
          "class": "meta::external::store::service::showcase::domain::Trade"
        },
        "executionNodes": [],
        "resultSizeRange": {
          "lowerBound": 0,
          "upperBound": null
        },
        "requiredVariableInputs": null,
        "implementation": null,
        "authDependent": false,
        "graphFetchTree": {
          "_type": "rootGraphFetchTree",
          "sourceInformation": null,
          "subTrees": [
            {
              "_type": "propertyGraphFetchTree",
              "sourceInformation": null,
              "subTrees": [],
              "_type": "propertyGraphFetchTree",
              "property": "tradeId",
              "parameters": [],
              "alias": null,
              "subType": null
            },
            {
              "_type": "propertyGraphFetchTree",
              "sourceInformation": null,
              "subTrees": [],
              "_type": "propertyGraphFetchTree",
              "property": "quantity",
              "parameters": [],
              "alias": null,
              "subType": null
            }
          ],
          "_type": "rootGraphFetchTree",
          "class": "meta::external::store::service::showcase::domain::Trade"
        },
        "children": null,
        "localGraphFetchExecutionNode": {
          "_type": "inMemoryRootGraphFetch",
          "resultType": {
            "_type": "partialClass",
            "setImplementations": [
              {
                "mapping": "meta::external::store::service::showcase::mapping::ServiceStoreMapping",
                "id": "trade_set",
                "propertyMappings": [
                  {
                    "property": "tradeId",
                    "type": "String",
                    "enumMapping": {}
                  },
                  {
                    "property": "quantity",
                    "type": "Integer",
                    "enumMapping": {}
                  }
                ],
                "class": "meta::external::store::service::showcase::domain::Trade"
              }
            ],
            "propertiesWithParameters": [
              {
                "property": "tradeId",
                "parameters": null
              },
              {
                "property": "quantity",
                "parameters": null
              }
            ],
            "class": "meta::external::store::service::showcase::domain::Trade"
          },
          "executionNodes": [
            {
              "_type": "storeMappingGlobalGraphFetchExecutionNode",
              "resultType": {
                "_type": "partialClass",
                "setImplementations": [
                  {
                    "mapping": "meta::external::store::service::showcase::mapping::ServiceStoreMapping",
                    "id": "s_trade_set",
                    "propertyMappings": [
                      {
                        "property": "s_tradeId",
                        "type": "String",
                        "enumMapping": {}
                      },
                      {
                        "property": "s_traderDetails",
                        "type": "String",
                        "enumMapping": {}
                      },
                      {
                        "property": "s_tradeDetails",
                        "type": "String",
                        "enumMapping": {}
                      }
                    ],
                    "class": "meta::external::store::service::showcase::domain::S_Trade"
                  }
                ],
                "propertiesWithParameters": [
                  {
                    "property": "s_tradeDetails",
                    "parameters": null
                  },
                  {
                    "property": "s_tradeId",
                    "parameters": null
                  }
                ],
                "class": "meta::external::store::service::showcase::domain::S_Trade"
              },
              "executionNodes": [],
              "resultSizeRange": {
                "lowerBound": 0,
                "upperBound": null
              },
              "requiredVariableInputs": null,
              "implementation": null,
              "authDependent": false,
              "graphFetchTree": {
                "_type": "rootGraphFetchTree",
                "sourceInformation": null,
                "subTrees": [
                  {
                    "_type": "propertyGraphFetchTree",
                    "sourceInformation": null,
                    "subTrees": [],
                    "_type": "propertyGraphFetchTree",
                    "property": "s_tradeDetails",
                    "parameters": [],
                    "alias": null,
                    "subType": null
                  },
                  {
                    "_type": "propertyGraphFetchTree",
                    "sourceInformation": null,
                    "subTrees": [],
                    "_type": "propertyGraphFetchTree",
                    "property": "s_tradeId",
                    "parameters": [],
                    "alias": null,
                    "subType": null
                  }
                ],
                "_type": "rootGraphFetchTree",
                "class": "meta::external::store::service::showcase::domain::S_Trade"
              },
              "children": null,
              "localGraphFetchExecutionNode": {
                "_type": "inMemoryRootGraphFetch",
                "resultType": {
                  "_type": "partialClass",
                  "setImplementations": [
                    {
                      "mapping": "meta::external::store::service::showcase::mapping::ServiceStoreMapping",
                      "id": "s_trade_set",
                      "propertyMappings": [
                        {
                          "property": "s_tradeId",
                          "type": "String",
                          "enumMapping": {}
                        },
                        {
                          "property": "s_traderDetails",
                          "type": "String",
                          "enumMapping": {}
                        },
                        {
                          "property": "s_tradeDetails",
                          "type": "String",
                          "enumMapping": {}
                        }
                      ],
                      "class": "meta::external::store::service::showcase::domain::S_Trade"
                    }
                  ],
                  "propertiesWithParameters": [
                    {
                      "property": "s_tradeDetails",
                      "parameters": null
                    },
                    {
                      "property": "s_tradeId",
                      "parameters": null
                    }
                  ],
                  "class": "meta::external::store::service::showcase::domain::S_Trade"
                },
                "executionNodes": [
                  {
                    "_type": "ExternalFormatInternalizeExecutionNode",
                    "resultType": {
                      "_type": "partialClass",
                      "setImplementations": null,
                      "propertiesWithParameters": [
                        {
                          "property": "s_tradeDetails",
                          "parameters": null
                        },
                        {
                          "property": "s_tradeId",
                          "parameters": null
                        }
                      ],
                      "class": "meta::external::store::service::showcase::domain::S_Trade"
                    },
                    "executionNodes": [
                      {
                        "_type": "RestServiceExecutionNode",
                        "resultType": {
                          "_type": "dataType",
                          "dataType": "String"
                        },
                        "executionNodes": [],
                        "resultSizeRange": null,
                        "requiredVariableInputs": null,
                        "implementation": null,
                        "authDependent": false,
                        "url": "http://127.0.0.1:62973/trades/allTradesService",
                        "method": "GET",
                        "mimeType": "application/json",
                        "params": null,
                        "requestBodyDescription": null,
                        "securitySchemes": null,
                        "authenticationSchemes": null
                      }
                    ],
                    "resultSizeRange": {
                      "lowerBound": 0,
                      "upperBound": null
                    },
                    "requiredVariableInputs": null,
                    "implementation": {
                      "_type": "java",
                      "code": null,
                      "compiledClasses": null,
                      "byteCode": null,
                      "classes": null,
                      "executionClassFullName": "_pure.plan.root.n1.localGraph.n1.localGraph.n1.Execute",
                      "executionMethodName": null
                    },
                    "authDependent": false,
                    "binding": "meta::external::store::service::showcase::store::tradeServiceStoreSchemaBinding",
                    "contentType": "application/json",
                    "enableConstraints": true,
                    "checked": false,
                    "tree": {
                      "_type": "rootGraphFetchTree",
                      "sourceInformation": null,
                      "subTrees": [
                        {
                          "_type": "propertyGraphFetchTree",
                          "sourceInformation": null,
                          "subTrees": [],
                          "_type": "propertyGraphFetchTree",
                          "property": "s_tradeDetails",
                          "parameters": [],
                          "alias": null,
                          "subType": null
                        },
                        {
                          "_type": "propertyGraphFetchTree",
                          "sourceInformation": null,
                          "subTrees": [],
                          "_type": "propertyGraphFetchTree",
                          "property": "s_tradeId",
                          "parameters": [],
                          "alias": null,
                          "subType": null
                        }
                      ],
                      "_type": "rootGraphFetchTree",
                      "class": "meta::external::store::service::showcase::domain::S_Trade"
                    }
                  }
                ],
                "resultSizeRange": null,
                "requiredVariableInputs": null,
                "implementation": {
                  "_type": "java",
                  "code": null,
                  "compiledClasses": null,
                  "byteCode": null,
                  "classes": null,
                  "executionClassFullName": "_pure.plan.root.n1.localGraph.n1.localGraph.Execute",
                  "executionMethodName": null
                },
                "authDependent": false,
                "nodeIndex": 0,
                "parentIndex": null,
                "graphFetchTree": {
                  "_type": "rootGraphFetchTree",
                  "sourceInformation": null,
                  "subTrees": [
                    {
                      "_type": "propertyGraphFetchTree",
                      "sourceInformation": null,
                      "subTrees": [],
                      "_type": "propertyGraphFetchTree",
                      "property": "s_tradeDetails",
                      "parameters": [],
                      "alias": null,
                      "subType": null
                    },
                    {
                      "_type": "propertyGraphFetchTree",
                      "sourceInformation": null,
                      "subTrees": [],
                      "_type": "propertyGraphFetchTree",
                      "property": "s_tradeId",
                      "parameters": [],
                      "alias": null,
                      "subType": null
                    }
                  ],
                  "_type": "rootGraphFetchTree",
                  "class": "meta::external::store::service::showcase::domain::S_Trade"
                },
                "children": null,
                "batchSize": 1,
                "checked": false
              },
              "parentIndex": null,
              "enableConstraints": true,
              "checked": false,
              "localTreeIndices": [
                0,
                1,
                2
              ],
              "dependencyIndices": null,
              "store": "meta::external::store::service::showcase::store::ShowcaseServiceStore",
              "xStorePropertyMapping": null,
              "xStorePropertyFetchDetails": null
            }
          ],
          "resultSizeRange": null,
          "requiredVariableInputs": null,
          "implementation": {
            "_type": "java",
            "code": null,
            "compiledClasses": null,
            "byteCode": null,
            "classes": null,
            "executionClassFullName": "_pure.plan.root.n1.localGraph.Execute",
            "executionMethodName": null
          },
          "authDependent": false,
          "nodeIndex": 0,
          "parentIndex": null,
          "graphFetchTree": {
            "_type": "rootGraphFetchTree",
            "sourceInformation": null,
            "subTrees": [
              {
                "_type": "propertyGraphFetchTree",
                "sourceInformation": null,
                "subTrees": [],
                "_type": "propertyGraphFetchTree",
                "property": "tradeId",
                "parameters": [],
                "alias": null,
                "subType": null
              },
              {
                "_type": "propertyGraphFetchTree",
                "sourceInformation": null,
                "subTrees": [],
                "_type": "propertyGraphFetchTree",
                "property": "quantity",
                "parameters": [],
                "alias": null,
                "subType": null
              }
            ],
            "_type": "rootGraphFetchTree",
            "class": "meta::external::store::service::showcase::domain::Trade"
          },
          "children": null,
          "batchSize": 1,
          "checked": false
        },
        "parentIndex": null,
        "enableConstraints": true,
        "checked": false,
        "localTreeIndices": [
          0,
          1,
          2
        ],
        "dependencyIndices": null,
        "store": "MODEL",
        "xStorePropertyMapping": null,
        "xStorePropertyFetchDetails": null
      }
    ],
    "resultSizeRange": null,
    "requiredVariableInputs": null,
    "implementation": {
      "_type": "java",
      "code": null,
      "compiledClasses": null,
      "byteCode": null,
      "classes": null,
      "executionClassFullName": "_pure.plan.root.Serialize",
      "executionMethodName": null
    },
    "authDependent": false,
    "pure": {
      "_type": "func",
      "sourceInformation": null,
      "function": "serialize",
      "fControl": "serialize_T_MANY__RootGraphFetchTree_1__String_1_",
      "parameters": [
        {
          "_type": "collection",
          "sourceInformation": null,
          "multiplicity": {
            "lowerBound": 0,
            "upperBound": null
          },
          "values": []
        },
        {
          "_type": "classInstance",
          "sourceInformation": null,
          "type": "rootGraphFetchTree",
          "value": {
            "sourceInformation": null,
            "subTrees": [
              {
                "_type": "propertyGraphFetchTree",
                "sourceInformation": null,
                "subTrees": [],
                "_type": "propertyGraphFetchTree",
                "property": "tradeId",
                "parameters": [],
                "alias": null,
                "subType": null
              },
              {
                "_type": "propertyGraphFetchTree",
                "sourceInformation": null,
                "subTrees": [],
                "_type": "propertyGraphFetchTree",
                "property": "quantity",
                "parameters": [],
                "alias": null,
                "subType": null
              }
            ],
            "_type": "rootGraphFetchTree",
            "class": "meta::external::store::service::showcase::domain::Trade"
          }
        }
      ]
    }
  },
  "globalImplementationSupport": {
    "_type": "java",
    "code": null,
    "compiledClasses": null,
    "byteCode": null,
    "classes": [
      {
        "name": "S_Trade",
        "source": "package _pure.app.meta.external.store.service.showcase.domain;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface S_Trade extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    String getS_tradeId();\n    String getS_traderDetails();\n    String getS_tradeDetails();\n    String getAlloyStoreObjectReference$();\n}",
        "byteCode": null,
        "package": "_pure.app.meta.external.store.service.showcase.domain"
      },
      {
        "name": "S_Trade_ServiceStoreMapping_s_trade_set",
        "source": "package _pure.app.meta.external.store.service.showcase.domain;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface S_Trade_ServiceStoreMapping_s_trade_set extends S_Trade, org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    String getAlloyStoreObjectReference$();\n}",
        "byteCode": null,
        "package": "_pure.app.meta.external.store.service.showcase.domain"
      },
      {
        "name": "Trade",
        "source": "package _pure.app.meta.external.store.service.showcase.domain;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Trade extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    String getTradeId();\n    long getQuantity();\n    String getAlloyStoreObjectReference$();\n}",
        "byteCode": null,
        "package": "_pure.app.meta.external.store.service.showcase.domain"
      },
      {
        "name": "Trade_ServiceStoreMapping_trade_set",
        "source": "package _pure.app.meta.external.store.service.showcase.domain;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Trade_ServiceStoreMapping_trade_set extends Trade, org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    String getAlloyStoreObjectReference$();\n}",
        "byteCode": null,
        "package": "_pure.app.meta.external.store.service.showcase.domain"
      },
      {
        "name": "JsonDataRecord",
        "source": "package _pure.app.meta.pure.mapping.modelToModel;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface JsonDataRecord\n{\n    long getNumber();\n    String getRecord();\n}",
        "byteCode": null,
        "package": "_pure.app.meta.pure.mapping.modelToModel"
      },
      {
        "name": "Serialize",
        "source": "package _pure.plan.root;\n\nimport org.finos.legend.engine.plan.dependencies.store.platform.IGraphSerializer;\nimport org.finos.legend.engine.plan.dependencies.store.platform.IPlatformPureExpressionExecutionNodeSerializeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.platform.ISerializationWriter;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\n\npublic class Serialize implements IPlatformPureExpressionExecutionNodeSerializeSpecifics\n{\n    public IGraphSerializer<?> serializer(ISerializationWriter writer,\n                                          IExecutionNodeContext context)\n    {\n        return new Serializer(writer, context);\n    }\n}",
        "byteCode": null,
        "package": "_pure.plan.root"
      },
      {
        "name": "Serializer",
        "source": "package _pure.plan.root;\n\nimport _pure.app.meta.external.store.service.showcase.domain.Trade;\nimport org.finos.legend.engine.plan.dependencies.store.platform.IGraphSerializer;\nimport org.finos.legend.engine.plan.dependencies.store.platform.ISerializationWriter;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\npublic class Serializer implements IGraphSerializer<Trade>\n{\n    private ISerializationWriter writer;\n    private IExecutionNodeContext context;\n\n    Serializer(ISerializationWriter writer, IExecutionNodeContext context)\n    {\n        this.writer = writer;\n        this.context = context;\n    }\n\n    public void serialize(Trade value)\n    {\n        if (value instanceof IReferencedObject)\n        {\n            this.writer\n                .startObject(\"meta::external::store::service::showcase::domain::Trade\",\n                             ((IReferencedObject) value).getAlloyStoreObjectReference$());\n        }\n        else\n        {\n            this.writer.startObject(\"meta::external::store::service::showcase::domain::Trade\");\n        }\n        this.writer.writeStringProperty(\"tradeId\", value.getTradeId());\n        this.writer.writeIntegerProperty(\"quantity\", value.getQuantity());\n        this.writer.endObject();\n    }\n}",
        "byteCode": null,
        "package": "_pure.plan.root"
      },
      {
        "name": "Execute",
        "source": "package _pure.plan.root.n1.localGraph;\n\nimport _pure.app.meta.external.store.service.showcase.domain.S_Trade;\nimport java.util.HashMap;\nimport java.util.List;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryRootGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class Execute implements IInMemoryRootGraphFetchExecutionNodeSpecifics\n{\n    public HashMap<Object, Object> sharedObject = new HashMap();\n\n    public Object transform(Object input)\n    {\n        S_Trade src = (S_Trade) input;\n        GraphFetch_Node0_Trade_ServiceStoreMapping_trade_set_Impl result = new GraphFetch_Node0_Trade_ServiceStoreMapping_trade_set_Impl();\n        result.setSrc$(src);\n        result.setSetId$(\"trade_set\");\n        try\n        {\n            result.setTradeId(src.getS_tradeId());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'tradeId' on Target class 'meta::external::store::service::showcase::domain::Trade [trade_set]' on Mapping 'meta::external::store::service::showcase::mapping::ServiceStoreMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setQuantity(Long.parseLong(Library.at(Library.split(src.getS_tradeDetails(), \":\"), 1L)));\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'quantity' on Target class 'meta::external::store::service::showcase::domain::Trade [trade_set]' on Mapping 'meta::external::store::service::showcase::mapping::ServiceStoreMapping'.\\n\" + e.getMessage());\n        }\n        return new IGraphInstance<GraphFetch_Node0_Trade_ServiceStoreMapping_trade_set_Impl>()\n        {\n            public GraphFetch_Node0_Trade_ServiceStoreMapping_trade_set_Impl getValue()\n            {\n                return result;\n            }\n            public long instanceSize()\n            {\n                return result.getInstanceSize$();\n            }\n        };\n    }\n}",
        "byteCode": null,
        "package": "_pure.plan.root.n1.localGraph"
      },
      {
        "name": "GraphFetch_Node0_Trade_ServiceStoreMapping_trade_set_Impl",
        "source": "package _pure.plan.root.n1.localGraph;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class GraphFetch_Node0_Trade_ServiceStoreMapping_trade_set_Impl implements _pure.app.meta.external.store.service.showcase.domain.Trade_ServiceStoreMapping_trade_set, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.service.showcase.domain.Trade_ServiceStoreMapping_trade_set>, java.io.Serializable\n{\n    private String tradeId;\n    private long quantity;\n    private String setId$;\n    private Object src$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 1276377359L;\n\n    public String getTradeId()\n    {\n        return this.tradeId;\n    }\n\n    public void setTradeId(String tradeId)\n    {\n        this.tradeId = tradeId;\n    }\n\n    public void addTradeId(String object)\n    {\n        if ((Object) this.tradeId != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'tradeId' of multiplicity with bound 1\");\n        }\n        this.tradeId = object;\n    }\n\n    public long getQuantity()\n    {\n        return this.quantity;\n    }\n\n    public void setQuantity(long quantity)\n    {\n        this.quantity = quantity;\n    }\n\n    public void addQuantity(long object)\n    {\n        if ((Object) new Long(this.quantity) != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'quantity' of multiplicity with bound 1\");\n        }\n        this.quantity = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.meta.external.store.service.showcase.domain.Trade_ServiceStoreMapping_trade_set withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.service.showcase.domain.Trade_ServiceStoreMapping_trade_set> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.service.showcase.domain.Trade_ServiceStoreMapping_trade_set> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.service.showcase.domain.Trade_ServiceStoreMapping_trade_set> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.service.showcase.domain.Trade_ServiceStoreMapping_trade_set> toChecked(Object source,\n                                                                                                                                                                                      boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.service.showcase.domain.Trade_ServiceStoreMapping_trade_set>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.service.showcase.domain.Trade_ServiceStoreMapping_trade_set getValue() { return GraphFetch_Node0_Trade_ServiceStoreMapping_trade_set_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n        }\n        return result;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId$)\n    {\n        this.setId$ = setId$;\n    }\n\n    public Object getSrc$()\n    {\n        return this.src$;\n    }\n\n    public void setSrc$(Object src$)\n    {\n        this.src$ = src$;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String alloyStoreObjectReference$)\n    {\n        this.alloyStoreObjectReference$ = alloyStoreObjectReference$;\n    }\n\n    private static long getClassSize$()\n    {\n        return 116L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node0_Trade_ServiceStoreMapping_trade_set_Impl.getClassSize$();\n        if (this.tradeId != null)\n        {\n            size = size + this.tradeId.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        return size;\n    }\n}",
        "byteCode": null,
        "package": "_pure.plan.root.n1.localGraph"
      },
      {
        "name": "Execute",
        "source": "package _pure.plan.root.n1.localGraph.n1.localGraph;\n\nimport _pure.app.meta.external.store.service.showcase.domain.S_Trade;\nimport java.util.HashMap;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryRootGraphFetchExecutionNodeSpecifics;\n\npublic class Execute implements IInMemoryRootGraphFetchExecutionNodeSpecifics\n{\n    public HashMap<Object, Object> sharedObject = new HashMap();\n\n    public Object transform(Object input)\n    {\n        S_Trade src = (S_Trade) input;\n        GraphFetch_Node0_S_Trade_ServiceStoreMapping_s_trade_set_Impl result = new GraphFetch_Node0_S_Trade_ServiceStoreMapping_s_trade_set_Impl();\n        result.setSrc$(src);\n        result.setSetId$(\"s_trade_set\");\n        try\n        {\n            result.setS_tradeDetails(src.getS_tradeDetails());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 's_tradeDetails' on Target class 'meta::external::store::service::showcase::domain::S_Trade [s_trade_set]' on Mapping 'meta::external::store::service::showcase::mapping::ServiceStoreMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setS_tradeId(src.getS_tradeId());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 's_tradeId' on Target class 'meta::external::store::service::showcase::domain::S_Trade [s_trade_set]' on Mapping 'meta::external::store::service::showcase::mapping::ServiceStoreMapping'.\\n\" + e.getMessage());\n        }\n        return new IGraphInstance<GraphFetch_Node0_S_Trade_ServiceStoreMapping_s_trade_set_Impl>()\n        {\n            public GraphFetch_Node0_S_Trade_ServiceStoreMapping_s_trade_set_Impl getValue()\n            {\n                return result;\n            }\n            public long instanceSize()\n            {\n                return result.getInstanceSize$();\n            }\n        };\n    }\n}",
        "byteCode": null,
        "package": "_pure.plan.root.n1.localGraph.n1.localGraph"
      },
      {
        "name": "GraphFetch_Node0_S_Trade_ServiceStoreMapping_s_trade_set_Impl",
        "source": "package _pure.plan.root.n1.localGraph.n1.localGraph;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class GraphFetch_Node0_S_Trade_ServiceStoreMapping_s_trade_set_Impl implements _pure.app.meta.external.store.service.showcase.domain.S_Trade_ServiceStoreMapping_s_trade_set, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.service.showcase.domain.S_Trade_ServiceStoreMapping_s_trade_set>, java.io.Serializable\n{\n    private String s_tradeId;\n    private String s_traderDetails;\n    private String s_tradeDetails;\n    private String setId$;\n    private Object src$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 1177859080L;\n\n    public String getS_tradeId()\n    {\n        return this.s_tradeId;\n    }\n\n    public void setS_tradeId(String s_tradeId)\n    {\n        this.s_tradeId = s_tradeId;\n    }\n\n    public void addS_tradeId(String object)\n    {\n        if ((Object) this.s_tradeId != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 's_tradeId' of multiplicity with bound 1\");\n        }\n        this.s_tradeId = object;\n    }\n\n    public String getS_traderDetails()\n    {\n        return this.s_traderDetails;\n    }\n\n    public void setS_traderDetails(String s_traderDetails)\n    {\n        this.s_traderDetails = s_traderDetails;\n    }\n\n    public void addS_traderDetails(String object)\n    {\n        if ((Object) this.s_traderDetails != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 's_traderDetails' of multiplicity with bound 1\");\n        }\n        this.s_traderDetails = object;\n    }\n\n    public String getS_tradeDetails()\n    {\n        return this.s_tradeDetails;\n    }\n\n    public void setS_tradeDetails(String s_tradeDetails)\n    {\n        this.s_tradeDetails = s_tradeDetails;\n    }\n\n    public void addS_tradeDetails(String object)\n    {\n        if ((Object) this.s_tradeDetails != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 's_tradeDetails' of multiplicity with bound 1\");\n        }\n        this.s_tradeDetails = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.meta.external.store.service.showcase.domain.S_Trade_ServiceStoreMapping_s_trade_set withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.service.showcase.domain.S_Trade_ServiceStoreMapping_s_trade_set> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.service.showcase.domain.S_Trade_ServiceStoreMapping_s_trade_set> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.service.showcase.domain.S_Trade_ServiceStoreMapping_s_trade_set> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.service.showcase.domain.S_Trade_ServiceStoreMapping_s_trade_set> toChecked(Object source,\n                                                                                                                                                                                          boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.service.showcase.domain.S_Trade_ServiceStoreMapping_s_trade_set>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.service.showcase.domain.S_Trade_ServiceStoreMapping_s_trade_set getValue() { return GraphFetch_Node0_S_Trade_ServiceStoreMapping_s_trade_set_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n        }\n        return result;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId$)\n    {\n        this.setId$ = setId$;\n    }\n\n    public Object getSrc$()\n    {\n        return this.src$;\n    }\n\n    public void setSrc$(Object src$)\n    {\n        this.src$ = src$;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String alloyStoreObjectReference$)\n    {\n        this.alloyStoreObjectReference$ = alloyStoreObjectReference$;\n    }\n\n    private static long getClassSize$()\n    {\n        return 156L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node0_S_Trade_ServiceStoreMapping_s_trade_set_Impl.getClassSize$();\n        if (this.s_tradeId != null)\n        {\n            size = size + this.s_tradeId.length();\n        }\n        if (this.s_traderDetails != null)\n        {\n            size = size + this.s_traderDetails.length();\n        }\n        if (this.s_tradeDetails != null)\n        {\n            size = size + this.s_tradeDetails.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        return size;\n    }\n}",
        "byteCode": null,
        "package": "_pure.plan.root.n1.localGraph.n1.localGraph"
      },
      {
        "name": "Execute",
        "source": "package _pure.plan.root.n1.localGraph.n1.localGraph.n1;\n\nimport java.io.InputStream;\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.external.format.json.read.IJsonDeserializeExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReader;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class Execute implements IJsonDeserializeExecutionNodeSpecifics\n{\n    public IStoreStreamReader streamReader(InputStream sourceStream)\n    {\n        return new _pure.plan.root.n1.localGraph.n1.localGraph.n1.JsonDataReader_meta_external_store_service_showcase_domain_S_Trade(sourceStream);\n    }\n}",
        "byteCode": null,
        "package": "_pure.plan.root.n1.localGraph.n1.localGraph.n1"
      },
      {
        "name": "JsonDataReader_meta_external_store_service_showcase_domain_S_Trade",
        "source": "package _pure.plan.root.n1.localGraph.n1.localGraph.n1;\n\nimport _pure.app.meta.external.store.service.showcase.domain.S_Trade;\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.core.filter.FilteringParserDelegate;\nimport com.fasterxml.jackson.core.filter.JsonPointerBasedFilter;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.JsonNodeType;\nimport java.io.*;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.math.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.EnforcementLevel;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RuleType;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class JsonDataReader_meta_external_store_service_showcase_domain_S_Trade implements org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReader\n{\n    private boolean finishedReading = false;\n    private Stack<Object> stack = new Stack<Object>();\n    private JsonParser parser;\n    private ObjectMapper objectMapper;\n    private boolean inArray = false;\n    private long recordCount = 0;\n    private InputStream in;\n\n    JsonDataReader_meta_external_store_service_showcase_domain_S_Trade(InputStream in)\n    {\n        this.in = in;\n    }\n\n    public void initReading()\n    {\n        try\n        {\n            this.parser = new JsonFactory().createParser(this.in);\n            this.objectMapper = new ObjectMapper();\n        }\n        catch (IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private boolean readMethodExists(String name)\n    {\n        Method[] methods = this.getClass().getDeclaredMethods();\n        for (int i = 0; i < methods.length; i++) {\n           if (methods[i].getName().equals(name)) return true;\n        };\n        return false;\n    }\n\n    private Object readMethodInvoke(String name, JsonNode node)\n    {\n        Method m = null;\n        try{\n           m = this.getClass().getMethod(name, JsonNode.class);\n        }\n        catch (NoSuchMethodException e){throw new RuntimeException(e.getMessage());}\n        try{\n           return m.invoke(this, node);\n        }\n        catch (IllegalAccessException e){throw new RuntimeException(e.getMessage());}catch (InvocationTargetException e){throw new RuntimeException(e.getMessage());}\n    }\n\n    public void destroyReading()\n    {\n        if (this.parser.isClosed())\n        {\n           return;\n        }\n        try\n        {\n            this.parser.close();\n        }\n        catch (IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public boolean isFinished()\n    {\n        nextToken();\n        if (!this.finishedReading && getCurrentToken() == JsonToken.START_ARRAY && !inArray)\n        {\n            nextToken();\n            inArray = true;\n        }\n        if (!this.finishedReading && getCurrentToken() == JsonToken.END_ARRAY && inArray)\n        {\n            nextToken();\n            inArray = false;\n            this.finishedReading = true;\n        }\n        this.finishedReading |= getCurrentToken() == null;\n        return this.finishedReading ;\n    }\n\n    public void nextToken()\n    {\n            try\n            {\n                this.parser.nextToken();\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n    }\n\n    public IChecked<S_Trade> read_meta_external_store_service_showcase_domain_S_Trade(JsonNode node)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = new java.util.ArrayList<>();\n\n        if (!node.path(\"@type\").getNodeType().equals(JsonNodeType.MISSING)){\n         String nodeValue = node.path(\"@type\").textValue();\n\n         if (!nodeValue.equals(\"meta::external::store::service::showcase::domain::S_Trade\")) {\n           String methodName = \"read_\" + nodeValue.replace(\"::\", \"_\");\n           if (readMethodExists(methodName)){\n              return (IChecked) readMethodInvoke(methodName, node);\n           }\n        }}\n        java.util.List<String> _s_tradeId = new java.util.ArrayList<>();\n        java.util.List<String> _s_traderDetails = new java.util.ArrayList<>();\n        java.util.List<String> _s_tradeDetails = new java.util.ArrayList<>();\n\n        this.stack.push(new _pure.plan.root.n1.localGraph.n1.localGraph.n1.meta_external_store_service_showcase_domain_S_Trade_Impl());\n\n        if (node.path(\"s_tradeId\").getNodeType() != JsonNodeType.MISSING){\n        _s_tradeId = acceptMany(node.path(\"s_tradeId\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"s_tradeId\"+\": \"+m,\"meta::external::store::service::showcase::domain::S_Trade\")));\n        }\n        if (node.path(\"s_traderDetails\").getNodeType() != JsonNodeType.MISSING){\n        _s_traderDetails = acceptMany(node.path(\"s_traderDetails\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"s_traderDetails\"+\": \"+m,\"meta::external::store::service::showcase::domain::S_Trade\")));\n        }\n        if (node.path(\"s_tradeDetails\").getNodeType() != JsonNodeType.MISSING){\n        _s_tradeDetails = acceptMany(node.path(\"s_tradeDetails\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"s_tradeDetails\"+\": \"+m,\"meta::external::store::service::showcase::domain::S_Trade\")));\n        }\n        if (_s_tradeId.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for s_tradeId: expected [1] found [\" + _s_tradeId.size() + \"]\", \"meta::external::store::service::showcase::domain::S_Trade\"));\n        }\n        if (_s_traderDetails.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for s_traderDetails: expected [1] found [\" + _s_traderDetails.size() + \"]\", \"meta::external::store::service::showcase::domain::S_Trade\"));\n        }\n        if (_s_tradeDetails.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for s_tradeDetails: expected [1] found [\" + _s_tradeDetails.size() + \"]\", \"meta::external::store::service::showcase::domain::S_Trade\"));\n        }\n\n        if (defects.stream().anyMatch(d -> d.getEnforcementLevel() == EnforcementLevel.Critical))\n        {\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.service.showcase.domain.S_Trade>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.service.showcase.domain.S_Trade getValue() { return null; }\n        };\n        }\n        else\n        {\n        ((_pure.plan.root.n1.localGraph.n1.localGraph.n1.meta_external_store_service_showcase_domain_S_Trade_Impl) this.stack.peek()).s_tradeId = _s_tradeId.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.localGraph.n1.meta_external_store_service_showcase_domain_S_Trade_Impl) this.stack.peek()).s_traderDetails = _s_traderDetails.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.localGraph.n1.meta_external_store_service_showcase_domain_S_Trade_Impl) this.stack.peek()).s_tradeDetails = _s_tradeDetails.get(0);\n            _pure.app.meta.external.store.service.showcase.domain.S_Trade value = (_pure.app.meta.external.store.service.showcase.domain.S_Trade) this.stack.pop();\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.service.showcase.domain.S_Trade>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.service.showcase.domain.S_Trade getValue() { return value; }\n        };\n        }\n    }\n\n    private String acceptString(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE String\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.textValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private boolean acceptBoolean(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Boolean\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"BOOLEAN\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.booleanValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private long acceptInteger(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Integer\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"NUMBER\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.longValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private double acceptFloat(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Float\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"NUMBER\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.doubleValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private BigDecimal acceptDecimal(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Decimal\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\"),\n                                     JsonNodeType.valueOf(\"NUMBER\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.getNodeType()\n                       .equals(JsonNodeType.STRING)\n                       ? new BigDecimal(node.textValue())\n                       : node.decimalValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private Number acceptNumber(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Number\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\"),\n                                     JsonNodeType.valueOf(\"NUMBER\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.getNodeType()\n                       .equals(JsonNodeType.STRING)\n                       ? (Number) new BigDecimal(node.textValue())\n                       : node.isDouble() == true\n                             ? node.doubleValue()\n                             : node.longValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private PureDate acceptStrictDate(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE StrictDate\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return org.finos.legend.engine.plan.dependencies.domain.date.PureDate\n            .parsePureDate(node.textValue());\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private PureDate acceptDateTime(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE DateTime\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return org.finos.legend.engine.plan.dependencies.domain.date.PureDate\n            .parsePureDate(node.textValue());\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private PureDate acceptDate(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Date\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return org.finos.legend.engine.plan.dependencies.domain.date.PureDate\n            .parsePureDate(node.textValue());\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private <T> List<T> acceptMany(JsonNode node,\n                                   Function<JsonNode, T> acceptor,\n                                   Consumer<String> defectRecorder)\n    {\n        List<T> result = new ArrayList<T>();\n        if (node.isNull())\n        {\n            return result;\n        }\n        if (node.isArray())\n        {\n            for (JsonNode n: node)\n            {\n                try\n                {\n                    result.add(acceptor.apply(n));\n                }\n                catch (org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException ex)\n                {\n                    defectRecorder.accept(ex.getMessage());\n                }\n            }\n        }\n        else\n        {\n            try\n            {\n                result.add(acceptor.apply(node));\n            }\n            catch (org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException ex)\n            {\n                defectRecorder.accept(ex.getMessage());\n            }\n        }\n        return result;\n    }\n\n    private JsonToken getCurrentToken()\n    {\n        return parser.getCurrentToken();\n    }\n\n    private void check(JsonNodeType expectedNode, JsonNodeType currentNode)\n    {\n        check(expectedNode, currentNode, \"Failed to parse JSON, expected '\" + expectedNode + \"', Found \" + currentNode);\n    }\n\n    private void check(JsonNodeType expectedNode, JsonNodeType currentNode, String errorMessage)\n    {\n        check(Collections.singletonList(expectedNode), currentNode, errorMessage);\n    }\n\n    private void check(List<JsonNodeType> expectedNodes,\n                       JsonNodeType currentNode,\n                       String errorMessage)\n    {\n        if (!expectedNodes.contains(currentNode))\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(errorMessage);\n        }\n    }\n\n    public Collection<IChecked<S_Trade>> readCheckedObjects()\n    {\n        try\n        {\n            this.recordCount++;\n            JsonNode node = this.objectMapper.readValue(this.parser, JsonNode.class);\n            IChecked<S_Trade> object = this.read_meta_external_store_service_showcase_domain_S_Trade(node);\n            long recordNumber = this.recordCount;\n            String json = node.toString();\n            _pure.app.meta.pure.mapping.modelToModel.JsonDataRecord source = new _pure.app.meta.pure.mapping.modelToModel.JsonDataRecord()\n            {\n                public long getNumber()\n                {\n                    return recordNumber;\n                }\n                public String getRecord()\n                {\n                    return json;\n                }\n            };\n            return Collections.singleton(new IChecked<S_Trade>()\n            {\n                public List<IDefect> getDefects()\n                {\n                    return object.getDefects();\n                }\n                public Object getSource()\n                {\n                    return source;\n                }\n                public S_Trade getValue()\n                {\n                    return object.getValue();\n                }\n            });\n        }\n        catch (IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n}",
        "byteCode": null,
        "package": "_pure.plan.root.n1.localGraph.n1.localGraph.n1"
      },
      {
        "name": "meta_external_store_service_showcase_domain_S_Trade_Impl",
        "source": "package _pure.plan.root.n1.localGraph.n1.localGraph.n1;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.EnforcementLevel;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RuleType;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked;\n\nclass meta_external_store_service_showcase_domain_S_Trade_Impl implements _pure.app.meta.external.store.service.showcase.domain.S_Trade, IReferencedObject, Constrained<_pure.app.meta.external.store.service.showcase.domain.S_Trade>\n{\n    String s_tradeId;\n    String s_traderDetails;\n    String s_tradeDetails;\n\n    meta_external_store_service_showcase_domain_S_Trade_Impl()\n    {\n    }\n\n    public String getS_tradeId()\n    {\n        return this.s_tradeId;\n    }\n\n    public String getS_traderDetails()\n    {\n        return this.s_traderDetails;\n    }\n\n    public String getS_tradeDetails()\n    {\n        return this.s_tradeDetails;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return null;\n    }\n\n    public List<IDefect> allConstraints()\n    {\n        return this.allConstraints(new GraphContext());\n    }\n\n    public _pure.app.meta.external.store.service.showcase.domain.S_Trade withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public IChecked<_pure.app.meta.external.store.service.showcase.domain.S_Trade> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public IChecked<_pure.app.meta.external.store.service.showcase.domain.S_Trade> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public IChecked<_pure.app.meta.external.store.service.showcase.domain.S_Trade> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public IChecked<_pure.app.meta.external.store.service.showcase.domain.S_Trade> toChecked(Object source,\n                                                                                             boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.service.showcase.domain.S_Trade>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.service.showcase.domain.S_Trade getValue() { return meta_external_store_service_showcase_domain_S_Trade_Impl.this; }\n        };\n    }\n\n    public List<IDefect> allConstraints(GraphContext context)\n    {\n        List<IDefect> result = new ArrayList<IDefect>();\n        return result;\n    }\n}",
        "byteCode": null,
        "package": "_pure.plan.root.n1.localGraph.n1.localGraph.n1"
      }
    ],
    "executionClassFullName": null,
    "executionMethodName": null
  }
}