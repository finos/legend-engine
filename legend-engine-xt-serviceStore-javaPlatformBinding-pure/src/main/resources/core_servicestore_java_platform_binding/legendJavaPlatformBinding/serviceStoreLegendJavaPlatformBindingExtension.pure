// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::language::java::metamodel::*;
import meta::external::store::service::executionPlan::nodes::*;
import meta::external::store::service::metamodel::mapping::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::platformBinding::*;
import meta::pure::executionPlan::platformBinding::legendJava::*;
import meta::pure::extension::*;
import meta::pure::mapping::*;
import meta::external::store::service::executionPlan::platformBinding::legendJava::*;

function meta::external::store::service::executionPlan::platformBinding::legendJava::serviceStoreLegendJavaPlatformBindingExtension(): LegendJavaPlatformBindingExtension[1]
{
   ^LegendJavaPlatformBindingExtension
   (
      platformId = legendJavaPlatformBindingId(),

      id = 'ServiceStoreLegendJavaPlatformBindingExtension',

      // Node based extensions ------------------------------------------------------

      supportedExecutionNodes = [
         ServiceParametersResolutionExecutionNode,
         LimitExecutionNode
      ],

      updateGenerationContextForNode = {node: ExecutionNode[1], context: GenerationContext[1], path: String[1], extensions: Extension[*], debug: DebugContext[1] |
         $node->match([
            s: LimitExecutionNode[1]  | $s->prepareForLimitExecutionNode($path, $context, $debug),
            n: ExecutionNode[1]       | $context
         ])
      },

      generateLegendJavaCodeForNode = {node: ExecutionNode[1], path: String[1], context: GenerationContext[1], extensions: Extension[*], debug: DebugContext[1] |
         $node->match([
            s: ServiceParametersResolutionExecutionNode[1] | $s->generateImplementationForServiceParametersResolutionNode($path, $context, $debug),
            n: ExecutionNode[1]                            | ^GeneratedCode()
         ])
      },

      // ------------------------------------------------------ Node based extensions




      // Adhoc extensions -----------------------------------------------------------      

      adhocExtensions = [

         ^meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::graphFetch::LegendJavaInMemoryGraphFetchExtension
         (
            filterCodeGenerator = {set: InstanceSetImplementation[1], src: Code[1], withoutFilter: Code[1..*], context: GenerationContext[1], debug:DebugContext[1] |
               [
                  rsi: RootServiceInstanceSetImplementation[1]  | $withoutFilter,
                  esi: EmbeddedServiceStoreSetImplementation[1] | $withoutFilter
               ]
            },

            mappingTransformExtractors = [
               {spm : ServiceStorePropertyMapping[1] | let dummyLambda = {|'ok'};
                                                      let gen = ^GenericType
                                                                  (
                                                                     rawType = LambdaFunction,
                                                                     typeArguments = ^GenericType
                                                                                       (
                                                                                          rawType = ^meta::pure::metamodel::type::FunctionType
                                                                                                   (
                                                                                                      parameters = [],
                                                                                                      returnType = $spm.property->functionReturnType(),
                                                                                                      returnMultiplicity= $spm.property->functionReturnMultiplicity()
                                                                                                   )
                                                                                       )
                                                                  );
                                                      let exp = ^SimpleFunctionExpression(func = $spm.property,
                                                                                          genericType = $spm.property.genericType,
                                                                                          importGroup = system.children->at(0)->cast(@Package).children->at(0)->cast(@ImportGroup),
                                                                                          multiplicity = $spm.property.multiplicity,
                                                                                          parametersValues = ^VariableExpression(genericType=^GenericType(rawType = $spm.property.owner->cast(@meta::pure::metamodel::type::Class<Any>)), multiplicity = PureOne, name = 'src'),
                                                                                          propertyName = ^InstanceValue(genericType = ^GenericType(rawType = String), multiplicity = PureOne, values = $spm.property.name));
                                                      ^$dummyLambda(classifierGenericType = $gen, expressionSequence = $exp);},
               {epm : EmbeddedServiceStoreSetImplementation[1] | let dummyLambda = {|'ok'};
                                                      let gen = ^GenericType
                                                                  (
                                                                     rawType = LambdaFunction,
                                                                     typeArguments = ^GenericType
                                                                                       (
                                                                                          rawType = ^meta::pure::metamodel::type::FunctionType
                                                                                                   (
                                                                                                      parameters = [],
                                                                                                      returnType = $epm.property->functionReturnType(),
                                                                                                      returnMultiplicity= $epm.property->functionReturnMultiplicity()
                                                                                                   )
                                                                                       )
                                                                  );
                                                      let exp = ^SimpleFunctionExpression(func = $epm.property,
                                                                                          genericType = $epm.property.genericType,
                                                                                          importGroup = system.children->at(0)->cast(@Package).children->at(0)->cast(@ImportGroup),
                                                                                          multiplicity = $epm.property.multiplicity,
                                                                                          parametersValues = ^VariableExpression(genericType=^GenericType(rawType = $epm.property.owner->cast(@meta::pure::metamodel::type::Class<Any>)), multiplicity = PureOne, name = 'src'),
                                                                                          propertyName = ^InstanceValue(genericType = ^GenericType(rawType = String), multiplicity = PureOne, values = $epm.property.name));
                                                      ^$dummyLambda(classifierGenericType = $gen, expressionSequence = $exp);}
            ],

            valueTransformerExtractors = [
               spm : ServiceStorePropertyMapping[1]           | [],
               epm : EmbeddedServiceStoreSetImplementation[1] | []
            ]
         )

      ]

      // ----------------------------------------------------------- Adhoc extensions

   )
}

function meta::external::store::service::executionPlan::platformBinding::legendJava::serviceStoreExtensionsWithLegendJavaPlatformBinding(externalFormatDescriptors: meta::external::shared::format::executionPlan::platformBinding::legendJava::ExternalFormatLegendJavaPlatformBindingDescriptor[*]): Extension[*]
{
   meta::external::store::service::extension::serviceStoreExtensions()->concatenate(
      meta::pure::executionPlan::platformBinding::platformBindingExtension([
         meta::pure::executionPlan::platformBinding::legendJava::legendJavaPlatformBinding([
            meta::pure::mapping::modelToModel::executionPlan::platformBinding::legendJava::inMemoryLegendJavaPlatformBindingExtension(),
            meta::external::store::service::executionPlan::platformBinding::legendJava::serviceStoreLegendJavaPlatformBindingExtension(),
            meta::external::shared::format::executionPlan::platformBinding::legendJava::bindingLegendJavaPlatformBindingExtension($externalFormatDescriptors)
         ])
      ]) 
   )
}
