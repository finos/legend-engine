{
  "serializer": {
    "name": "pure",
    "version": "v1_17_0"
  },
  "templateFunctions": [
    "<#function renderCollection collection separator><#return collection?join(separator)></#function>",
    "<#function collectionSize collection> <#return collection?size> </#function>"
  ],
  "rootExecutionNode": {
    "_type": "sequence",
    "resultType": {
      "class": "meta::pure::tests::model::simple::Person",
      "setImplementations": [
        {
          "class": "meta::pure::tests::model::simple::Person",
          "mapping": "meta::relational::tests::simpleRelationalMappingInc",
          "id": "meta_pure_tests_model_simple_Person",
          "propertyMappings": [
            {
              "property": "firstName",
              "type": "String"
            },
            {
              "property": "age",
              "type": "Integer"
            },
            {
              "property": "lastName",
              "type": "String"
            }
          ]
        }
      ],
      "_type": "class"
    },
    "resultSizeRange": {
      "lowerBound": 0
    },
    "executionNodes": [
      {
        "functionParameters": [
          {
            "name": "var",
            "supportsStream": false,
            "multiplicity": {
              "lowerBound": 1,
              "upperBound": 1
            },
            "class": "String",
            "_type": "var"
          }
        ],
        "_type": "function-parameters-validation",
        "resultType": {
          "dataType": "Boolean",
          "_type": "dataType"
        }
      },
      {
        "_type": "relationalClassInstantiation",
        "resultType": {
          "class": "meta::pure::tests::model::simple::Person",
          "setImplementations": [
            {
              "class": "meta::pure::tests::model::simple::Person",
              "mapping": "meta::relational::tests::simpleRelationalMappingInc",
              "id": "meta_pure_tests_model_simple_Person",
              "propertyMappings": [
                {
                  "property": "firstName",
                  "type": "String"
                },
                {
                  "property": "age",
                  "type": "Integer"
                },
                {
                  "property": "lastName",
                  "type": "String"
                }
              ]
            }
          ],
          "_type": "class"
        },
        "resultSizeRange": {
          "lowerBound": 0
        },
        "executionNodes": [
          {
            "sqlQuery": "select \"root\".ID as \"pk_0\", \"root\".FIRSTNAME as \"firstName\", \"root\".AGE as \"age\", \"root\".LASTNAME as \"lastName\" from personTable as \"root\" where \"root\".FIRSTNAME = '${var}'",
            "resultColumns": [
              {
                "label": "\"pk_0\"",
                "dataType": "INTEGER"
              },
              {
                "label": "\"firstName\"",
                "dataType": "VARCHAR(200)"
              },
              {
                "label": "\"age\"",
                "dataType": "INTEGER"
              },
              {
                "label": "\"lastName\"",
                "dataType": "VARCHAR(200)"
              }
            ],
            "connection": {
              "_type": "RelationalDatabaseConnection",
              "type": "H2",
              "authenticationStrategy" : {
                "_type" : "test"
              },
              "datasourceSpecification" : {
                "_type" : "static",
                "databaseName" : "testDB",
                "host":"127.0.0.1",
                "port" : "8989"
              }
            },
            "_type": "sql",
            "resultType": {
              "dataType": "meta::pure::metamodel::type::Any",
              "_type": "dataType"
            }
          }
        ],
        "implementation": {
          "executionClassFullName": "plan.root.n2.Execute",
          "_type": "java"
        }
      }
    ]
  },
  "authDependent": false,
  "globalImplementationSupport": {
    "classes": [
      {
        "package": "com.alloy.app.meta.pure.tests.model.simple",
        "name": "EntityWithAddress",
        "source": "package com.alloy.app.meta.pure.tests.model.simple;\n\nimport com.gs.alloy.execution.platform.PureDate;\nimport java.math.*;\nimport java.util.*;\n\npublic interface EntityWithAddress extends com.gs.alloy.execution.plan.dependencies.exec.stores.IReferencedObject {\n\n    String getAlloyStoreObjectReference$();\n}\n"
      },
      {
        "package": "com.alloy.app.meta.pure.tests.model.simple",
        "name": "EntityWithLocations",
        "source": "package com.alloy.app.meta.pure.tests.model.simple;\n\nimport com.gs.alloy.execution.platform.PureDate;\nimport java.math.*;\nimport java.util.*;\n\npublic interface EntityWithLocations extends com.gs.alloy.execution.plan.dependencies.exec.stores.IReferencedObject {\n\n    String getAlloyStoreObjectReference$();\n}\n"
      },
      {
        "package": "com.alloy.app.meta.pure.tests.model.simple",
        "name": "Person",
        "source": "package com.alloy.app.meta.pure.tests.model.simple;\n\nimport com.gs.alloy.execution.platform.PureDate;\nimport java.math.*;\nimport java.util.*;\n\npublic interface Person extends EntityWithAddress, EntityWithLocations, com.gs.alloy.execution.plan.dependencies.exec.stores.IReferencedObject {\n\n    String getFirstName();\n\n    String getLastName();\n\n    List<String> getOtherNames();\n\n    String getExtraInformation();\n\n    Long getAge();\n\n    String getNickName();\n\n    Boolean getActiveEmployment();\n\n    String getAlloyStoreObjectReference$();\n}\n"
      },
      {
        "package": "plan.root.n2",
        "name": "Execute",
        "source": "package plan.root.n2;\n\nimport plan.root.n2.Helper;\nimport com.gs.alloy.execution.plan.dependencies.exec.stores.relational.classResult.IRelationalClassInstantiationNodeExecutor;\nimport java.sql.ResultSet;\nimport java.util.*;\n\npublic class Execute implements IRelationalClassInstantiationNodeExecutor {\n\n    private Helper helper;\n\n    public Execute() {\n        this.helper = new Helper();\n    }\n\n    public Object getObjectFromResultSet(ResultSet resultSet, String databaseTimeZone, String databaseConnection) {\n        return this.helper.getObjectFromResultSet(resultSet, databaseTimeZone, databaseConnection);\n    }\n}\n"
      },
      {
        "package": "plan.root.n2",
        "name": "Helper",
        "source": "package plan.root.n2;\n\nimport com.gs.alloy.execution.platform.PureDate;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.Types;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\n\npublic class Helper {\n\n    private static final List<Integer> STRING_TYPES = Arrays.asList(Types.CHAR, Types.VARCHAR, Types.LONGVARCHAR, Types.NCHAR, Types.NVARCHAR, Types.LONGNVARCHAR, Types.OTHER, Types.NULL);\n\n    private static final List<Integer> INT_TYPES = Arrays.asList(Types.TINYINT, Types.SMALLINT, Types.INTEGER, Types.BIGINT, Types.NULL);\n\n    private static final List<Integer> FLOAT_TYPES = Arrays.asList(Types.REAL, Types.FLOAT, Types.DOUBLE, Types.DECIMAL, Types.NUMERIC, Types.NULL);\n\n    private static final List<Integer> BOOL_TYPES = Arrays.asList(Types.BIT, Types.BOOLEAN, Types.NULL);\n\n    private static final List<Integer> STRICT_DATE_TYPES = Arrays.asList(Types.DATE, Types.NULL);\n\n    private static final List<Integer> DATE_TIME_TYPES = Arrays.asList(Types.TIMESTAMP, Types.NULL);\n\n    private List<Integer> columnTypes;\n\n    private List<List<Integer>> propertyIndices;\n\n    private List<List<Supplier<Object>>> propertyGetters;\n\n    private Calendar calendar;\n\n    private Supplier<Object> getResultSetPropertyGetterForStringProperty(ResultSet resultSet, int columnIndex, int columnType, String propertyName) {\n        if (STRING_TYPES.contains(columnType))\n        {\n           return () -> {\n                try\n                {\n                    return resultSet.getString(columnIndex);\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        else\n        {\n            throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type String from SQL column of type '\" + columnType + \"'.\");\n        }\n        \n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForIntegerProperty(ResultSet resultSet, int columnIndex, int columnType, String propertyName) {\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Long res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Long.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Integer from SQL column of type '\" + columnType + \"'.\");\n        \n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForFloatProperty(ResultSet resultSet, int columnIndex, int columnType, String propertyName) {\n        if (FLOAT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Double res = null;\n                    double r = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Double.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Double res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Double.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Float from SQL column of type '\" + columnType + \"'.\");\n        \n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDecimalProperty(ResultSet resultSet, int columnIndex, int columnType, String propertyName) {\n        if (FLOAT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    java.math.BigDecimal res = null;\n                    double r = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = java.math.BigDecimal.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    java.math.BigDecimal res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = java.math.BigDecimal.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Decimal from SQL column of type '\" + columnType + \"'.\");\n        \n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForBooleanProperty(ResultSet resultSet, int columnIndex, int columnType, String propertyName) {\n        if (BOOL_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    boolean r = resultSet.getBoolean(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r == 1);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Boolean from SQL column of type '\" + columnType + \"'.\");\n        \n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForStrictDateProperty(ResultSet resultSet, int columnIndex, int columnType, String propertyName) {\n        if (STRICT_DATE_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Date r = resultSet.getDate(columnIndex);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLDate(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException)\n                        {\n                            res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type StrictDate from SQL column of type '\" + columnType + \"'.\");\n        \n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDateTimeProperty(ResultSet resultSet, int columnIndex, int columnType, String propertyName) {\n        if (DATE_TIME_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLTimestamp(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException)\n                        {\n                            res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type DateTime from SQL column of type '\" + columnType + \"'.\");\n        \n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDateProperty(ResultSet resultSet, int columnIndex, int columnType, String propertyName) {\n        if (STRICT_DATE_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Date r = resultSet.getDate(columnIndex);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLDate(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (DATE_TIME_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLTimestamp(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (java.lang.IllegalArgumentException dateTimeParseException1)\n                        {\n                            try\n                            {\n                                res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\n                            }\n                            catch (java.time.format.DateTimeParseException dateTimeParseException2)\n                            {\n                                res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\n                            }\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Date from SQL column of type '\" + columnType + \"'.\");\n        \n    }\n\n    private Object getAlloyNativeValueFromResultSet(ResultSet resultSet, int columnIndex, int columnType) {\n        try\n        {\n            Object result = null;\n            switch (columnType)\n            {\n                case Types.DATE:\n                {\n                    java.sql.Date date = resultSet.getDate(columnIndex);\n                    if (date != null)\n                    {\n                        result = PureDate.fromSQLDate(date);\n                    }\n                    break;\n                }\n                case Types.TIMESTAMP:\n                {\n                    java.sql.Timestamp timestamp = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (timestamp != null)\n                    {\n                        result = PureDate.fromSQLTimestamp(timestamp);\n                    }\n                    break;\n                }\n                case Types.TINYINT:\n                case Types.SMALLINT:\n                case Types.INTEGER:\n                case Types.BIGINT:\n                {\n                    long num = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Long.valueOf(num);\n                    }\n                    break;\n                }\n                case Types.REAL:\n                case Types.FLOAT:\n                case Types.DOUBLE:\n                {\n                    double num = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Double.valueOf(num);\n                    }\n                    break;\n                }\n                case Types.DECIMAL:\n                case Types.NUMERIC:\n                {\n                    result = resultSet.getBigDecimal(columnIndex);\n                    break;\n                }\n                case Types.CHAR:\n                case Types.VARCHAR:\n                case Types.LONGVARCHAR:\n                case Types.NCHAR:\n                case Types.NVARCHAR:\n                case Types.LONGNVARCHAR:\n                case Types.OTHER:\n                {\n                    result = resultSet.getString(columnIndex);\n                    break;\n                }\n                case Types.BIT:\n                case Types.BOOLEAN:\n                {\n                    boolean bool = resultSet.getBoolean(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Boolean.valueOf(bool);\n                    }\n                }\n                case Types.BINARY:\n                case Types.VARBINARY:\n                case Types.LONGVARBINARY:\n                {\n                    byte[] bytes = resultSet.getBytes(columnIndex);\n                    if (bytes != null)\n                    {\n                        result = this.encodeHex(bytes);\n                    }\n                    break;\n                }\n                case Types.NULL:\n                {\n                    // do nothing: value is already assigned to null\n                    break;\n                }\n                default:\n                {\n                    result = resultSet.getObject(columnIndex);\n                }\n            }\n            return result;}\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n        \n    }\n\n    private String encodeHex(byte[] data) {\n        final char[] DIGITS_LOWER = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n        final int l = data.length;\n        final char[] out = new char[l << 1];\n        for (int i = 0, j = 0; i < l; i++)\n        {\n            out[j++] = DIGITS_LOWER[(0xF0 & data[i]) >>> 4];\n            out[j++] = DIGITS_LOWER[0x0F & data[i]];\n        }\n        return new String(out);\n        \n    }\n\n    public Object getObjectFromResultSet(ResultSet resultSet, String databaseTimeZone, String databaseConnection) {\n        if (this.propertyIndices == null)\n        {\n            this.doSetup(resultSet, databaseTimeZone);\n        }\n        final plan.root.n2.Person_meta_pure_tests_model_simple_Person_Impl object = new plan.root.n2.Person_meta_pure_tests_model_simple_Person_Impl();\n        object.setDatabaseConnection$(databaseConnection);\n        object.setSetId$(\"meta_pure_tests_model_simple_Person\");\n        int pkColIndex;\n        \n        pkColIndex = this.propertyIndices.get(0).get(3);\n        Object pk$_0 = this.getAlloyNativeValueFromResultSet(resultSet, pkColIndex, this.columnTypes.get(pkColIndex - 1));\n        object.setPk$_0(pk$_0);\n        \n        int propertyIndex;\n        \n        propertyIndex = this.propertyIndices.get(0).get(0);\n        {\n            String res = (String) this.propertyGetters.get(0).get(0).get();\n            if (res == null)\n            {\n                throw new RuntimeException(\"Error reading in property 'firstName'. Property of multiplicity [1] can not be null, PKs: \" + pk$_0.toString());\n            }\n            object.setFirstName(res);\n        }\n        \n        propertyIndex = this.propertyIndices.get(0).get(1);\n        {\n            Long res = (Long) this.propertyGetters.get(0).get(1).get();\n            object.setAge(res);\n        }\n        \n        propertyIndex = this.propertyIndices.get(0).get(2);\n        {\n            String res = (String) this.propertyGetters.get(0).get(2).get();\n            if (res == null)\n            {\n                throw new RuntimeException(\"Error reading in property 'lastName'. Property of multiplicity [1] can not be null, PKs: \" + pk$_0.toString());\n            }\n            object.setLastName(res);\n        }\n        \n        return object;\n        \n    }\n\n    private void doSetup(ResultSet resultSet, String databaseTimeZone) {\n        try\n        {\n            this.calendar = new GregorianCalendar(TimeZone.getTimeZone(databaseTimeZone));\n            ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n            int columnCount = resultSetMetaData.getColumnCount();\n            this.columnTypes = new ArrayList<>();\n            List<String> columnNames = new ArrayList<>();\n            for (int i = 1; i <= columnCount; i++)\n            {\n                String columnLabel = resultSetMetaData.getColumnLabel(i);\n                columnNames.add(columnLabel.startsWith(\"\\\"\") && columnLabel.endsWith(\"\\\"\") ? columnLabel.substring(1, columnLabel.length() - 1).toUpperCase() : columnLabel.toUpperCase());\n                this.columnTypes.add(resultSetMetaData.getColumnType(i));\n            }\n        \n            this.propertyIndices = new ArrayList<>();\n            List<Integer> index_0 = new ArrayList<>();\n            index_0.add(columnNames.indexOf(\"FIRSTNAME\") + 1);\n            index_0.add(columnNames.indexOf(\"AGE\") + 1);\n            index_0.add(columnNames.indexOf(\"LASTNAME\") + 1);\n            index_0.add(columnNames.indexOf(\"PK_0\") + 1);\n            this.propertyIndices.add(index_0);\n        \n            this.propertyGetters = new ArrayList<>();\n            int propertyIndex;\n            Supplier<Object> propertyGetter = null;\n        \n            List<Supplier<Object>> propertyGetter_0 = new ArrayList<>();\n        \n            propertyIndex = this.propertyIndices.get(0).get(0);\n            propertyGetter = this.getResultSetPropertyGetterForStringProperty(resultSet, propertyIndex, resultSetMetaData.getColumnType(propertyIndex), \"firstName\");\n            propertyGetter_0.add(propertyGetter);\n        \n            propertyIndex = this.propertyIndices.get(0).get(1);\n            propertyGetter = this.getResultSetPropertyGetterForIntegerProperty(resultSet, propertyIndex, resultSetMetaData.getColumnType(propertyIndex), \"age\");\n            propertyGetter_0.add(propertyGetter);\n        \n            propertyIndex = this.propertyIndices.get(0).get(2);\n            propertyGetter = this.getResultSetPropertyGetterForStringProperty(resultSet, propertyIndex, resultSetMetaData.getColumnType(propertyIndex), \"lastName\");\n            propertyGetter_0.add(propertyGetter);\n        \n            this.propertyGetters.add(propertyGetter_0);\n        }\n        catch (RuntimeException e)\n        {\n            throw e;\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n}\n"
      },
      {
        "package": "plan.root.n2",
        "name": "Person_meta_pure_tests_model_simple_Person_BaseImpl",
        "source": "package plan.root.n2;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport com.gs.alloy.execution.platform.PureDate;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class Person_meta_pure_tests_model_simple_Person_BaseImpl implements com.alloy.app.meta.pure.tests.model.simple.Person {\n\n    private String firstName;\n\n    private String lastName;\n\n    private List<String> otherNames;\n\n    private String extraInformation;\n\n    private Long age;\n\n    private String nickName;\n\n    private Boolean activeEmployment;\n\n    private String setId$;\n\n    private String databaseConnection$;\n\n    private static final ObjectMapper objectMapper$ = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL).registerModule(new SimpleModule().addSerializer(PureDate.class, new JsonSerializer<PureDate>() { @Override public void serialize(PureDate value, JsonGenerator gen, SerializerProvider serializers) throws IOException { gen.writeRawValue(\"\\\"\" + value.toString() + \"\\\"\"); } }));\n\n    private String alloyStoreObjectReference$;\n\n    private Object pk$_0;\n\n    @JsonProperty(value=\"firstName\")\n    public String getFirstName() {\n        return this.firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    @JsonProperty(value=\"lastName\")\n    public String getLastName() {\n        return this.lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    @JsonProperty(value=\"otherNames\")\n    public List<String> getOtherNames() {\n        return this.otherNames;\n    }\n\n    public void setOtherNames(List<String> otherNames) {\n        this.otherNames = otherNames;\n    }\n\n    @JsonProperty(value=\"extraInformation\")\n    public String getExtraInformation() {\n        return this.extraInformation;\n    }\n\n    public void setExtraInformation(String extraInformation) {\n        this.extraInformation = extraInformation;\n    }\n\n    @JsonProperty(value=\"age\")\n    public Long getAge() {\n        return this.age;\n    }\n\n    public void setAge(Long age) {\n        this.age = age;\n    }\n\n    @JsonProperty(value=\"nickName\")\n    public String getNickName() {\n        return this.nickName;\n    }\n\n    public void setNickName(String nickName) {\n        this.nickName = nickName;\n    }\n\n    @JsonProperty(value=\"activeEmployment\")\n    public Boolean getActiveEmployment() {\n        return this.activeEmployment;\n    }\n\n    public void setActiveEmployment(Boolean activeEmployment) {\n        this.activeEmployment = activeEmployment;\n    }\n\n    @JsonIgnore\n    public String getSetId$() {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId) {\n        this.setId$ = setId;\n    }\n\n    @JsonIgnore\n    public String getDatabaseConnection$() {\n        return this.databaseConnection$;\n    }\n\n    public void setDatabaseConnection$(String databaseConnection) {\n        this.databaseConnection$ = databaseConnection;\n    }\n\n    @JsonProperty(value=\"alloyStoreObjectReference$\")\n    public String getAlloyStoreObjectReference$() {\n        if (this.alloyStoreObjectReference$ == null)\n        {\n            try\n            {\n                StringBuilder referenceBuilder = new StringBuilder();\n                referenceBuilder.append(\"001:\");\n                referenceBuilder.append(\"010:\");\n        \n                referenceBuilder.append(\"0000000010:\");\n                referenceBuilder.append(\"Relational:\");\n        \n                referenceBuilder.append(\"0000000051:\");\n                referenceBuilder.append(\"meta::relational::tests::simpleRelationalMappingInc:\");\n        \n                referenceBuilder.append(\"0000000035:\");\n                referenceBuilder.append(\"meta_pure_tests_model_simple_Person:\");\n        \n                String setId = this.getSetId$();\n                referenceBuilder.append(String.format(\"%010d\", setId.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(setId);\n                referenceBuilder.append(\":\");\n        \n                String databaseConnectionString = this.getDatabaseConnection$();\n                referenceBuilder.append(String.format(\"%010d\", databaseConnectionString.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(databaseConnectionString);\n                referenceBuilder.append(\":\");\n        \n                Map<String, Object> pkMap = new HashMap<>();\n        \n                pkMap.put(\"pk$_0\", this.getPk$_0());\n                String pkMapString = objectMapper$.writeValueAsString(pkMap);\n                referenceBuilder.append(String.format(\"%010d\", pkMapString.length()));\n                referenceBuilder.append(\":\");\n                referenceBuilder.append(pkMapString);\n        \n                this.alloyStoreObjectReference$ = \"ASOR:\" + org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(referenceBuilder.toString().getBytes());\n            }\n            catch (Exception e)\n            {\n               throw new RuntimeException(e);\n            }}\n        \n        return this.alloyStoreObjectReference$;\n    }\n\n    @JsonIgnore\n    public Object getPk$_0() {\n        return this.pk$_0;\n    }\n\n    public void setPk$_0(Object pk$_0) {\n        this.pk$_0 = pk$_0;\n    }\n}\n"
      },
      {
        "package": "plan.root.n2",
        "name": "Person_meta_pure_tests_model_simple_Person_Impl",
        "source": "package plan.root.n2;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.util.*;\n\npublic class Person_meta_pure_tests_model_simple_Person_Impl extends Person_meta_pure_tests_model_simple_Person_BaseImpl implements com.alloy.app.meta.pure.tests.model.simple.Person {\n\n    public Person_meta_pure_tests_model_simple_Person_Impl() {\n        this.setSetId$(\"meta_pure_tests_model_simple_Person\");\n    }\n\n\n}\n"
      }
    ],
    "_type": "java"
  }
}
