
// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::mongodb::metamodel::mapping::*;
import meta::pure::router::store::metamodel::*;
import meta::pure::router::routing::*;
import meta::external::store::mongodb::metamodel::aggregation::*;
import meta::external::store::mongodb::functions::pureToDatabaseCommand::*;
import meta::external::store::mongodb::runtime::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::router::clustering::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::extension::*;
import meta::pure::runtime::*;
import meta::pure::store::*;
import meta::pure::mapping::*;
import meta::pure::executionPlan::*;
import meta::external::store::mongodb::functions::pureToDatabaseCommand::*;
import meta::external::store::mongodb::graphFetch::executionPlan::*;
import meta::external::store::mongodb::contract::*;
import meta::external::store::mongodb::metamodel::pure::*;
import meta::external::store::mongodb::metamodel::*;
import meta::external::store::mongodb::metamodel::pure::runtime::*;

function meta::external::store::mongodb::contract::mongoDBStoreContract(): StoreContract[1]
{
  ^StoreContract
  (
    id = 'mongoDBStore',
    planExecution =  meta::external::store::mongodb::contract::planExecution_StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_$0_1$__Runtime_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_,
    planGraphFetchExecution = meta::external::store::mongodb::contract::planGraphFetchExecution_StoreMappingLocalGraphFetchExecutionNodeGenerationInput_1__LocalGraphFetchExecutionNode_1_,
    supportsStore = s:Store[1]|$s->instanceOf(meta::external::store::mongodb::metamodel::pure::MongoDatabase),
    supportsNativeJoinAmongElements = false,
    supportsSetImplementation = s:SetImplementation[1]| $s->instanceOf(MongoDBSetImplementation) || $s->instanceOf(EmbeddedMongoDBSetImplementation),
    resolveStoreFromSetImplementation = s:InstanceSetImplementation[1]|$s->match(
                                                                            [
                                                                              m : MongoDBSetImplementation[1] | $m->getStore(),
                                                                              e : EmbeddedMongoDBSetImplementation[1] | $e->resolveRootFromEmbedded()->cast(@MongoDBSetImplementation).getStore();
                                                                            ]
                                                                        ),
    supports = meta::external::store::mongodb::contract::supports_FunctionExpression_1__Boolean_1_,
    extractSourceClassFromSetImplementation = [m: MongoDBSetImplementation[1]  | $m.class, e: EmbeddedMongoDBSetImplementation[1]  | $e.class]
  )
}

function meta::external::store::mongodb::contract::planExecution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]): meta::pure::executionPlan::ExecutionNode[1]
{
    let store = $sq.store->cast(@MongoDatabase);
    let fe = $sq.fe->evaluateAndDeactivate();

    if($fe.func->in([meta::pure::graphFetch::execution::graphFetchFunctions()]),
      |
        // Graph Fetch Flow
        $sq->meta::pure::graphFetch::executionPlan::planGraphFetchExecution($ext, $m->toOne(), $runtime->toOne(), $exeCtx, $extensions, $debug);,
      |
        // Normal Flow
        let connections = $runtime.connections->filter(c | $c->instanceOf(MongoDBConnection));
        let storeRuntime = if($connections->size() <= 1,
                                | $runtime->toOne(),
                                | let oldRuntime = $runtime->toOne();
                                  let dbConn = $oldRuntime->connectionByElement($store)->cast(@MongoDBConnection);
                                  ^$oldRuntime(connections = $dbConn);
                              );

        let databaseCommand = $sq.fe->toDatabaseCommand($m->toOne(), $sq.inScopeVars, $debug, $extensions)->cast(@DatabaseCommand);

        let connection = $runtime->toOne()->connectionByElement($store)->cast(@MongoDBConnection);

        ^MongoDBExecutionNode(
            resultType = ^meta::pure::executionPlan::ResultType(type = Any),
            databaseCommand = $databaseCommand,
            connection = $connection
          );
    );
}

function meta::external::store::mongodb::contract::getStore(r:InstanceSetImplementation[1]):Store[1]
{
  $r->match(
    [
      r:MongoDBSetImplementation[1]|
          $r.mainCollection.owner->toOne()
    ]
  )
}

function meta::external::store::mongodb::contract::supports(f:FunctionExpression[1]):Boolean[1]
{
  !findSupportedFunction($f, getSupportedFunctions())->isEmpty();
}

function meta::external::store::mongodb::contract::planGraphFetchExecution(input: StoreMappingLocalGraphFetchExecutionNodeGenerationInput[1]): LocalGraphFetchExecutionNode[1]
{
  meta::external::store::mongodb::graphFetch::executionPlan::planRootGraphFetchExecutionMongoDb($input.storeQuery, $input.ext, $input.clusteredTree, $input.orderedPaths, $input.mapping, $input.runtime, $input.exeCtx, $input.enableConstraints, $input.checked, $input.extensions, $input.debug)
}