// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::*;
import meta::external::store::mongodb::metamodel::runtime::*;

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::store::mongodb::transformDatabaseConnection(otherConnection: MongoDBConnection[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::store::mongodb::connection::MongoDBConnection[1]
{
   let _type = $otherConnection->class()->toString();
   let element = $otherConnection.element->match([d:meta::pure::store::Store[1]|$d->elementToPath(),s:String[1]|$s]);
   let type = $otherConnection.type->toString();
   $otherConnection->match($extensions.serializerExtension('vX_X_X')->cast(@meta::protocols::pure::vX_X_X::extension::SerializerExtension_vX_X_X).moduleSerializerExtension('mongoDB')->cast(@meta::protocols::pure::vX_X_X::extension::store::mongodb::MongoDBModuleSerializerExtension).transfers_connection_transformDatabaseConnection->map(f | $f->eval($_type, $element, $type))->concatenate([

      dbCon: MongoDBConnection[1]|
         ^meta::protocols::pure::vX_X_X::metamodel::store::mongodb::connection::MongoDBConnection(
                  _type = $_type,
                  element = $element,
                  type = $type)

      ]
    )->toOneMany());
}