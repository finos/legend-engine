// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::format::binding::*;
import meta::external::store::mongodb::metamodel::mapping::*;
import meta::external::store::mongodb::metamodel::aggregation::*;
import meta::external::store::mongodb::metamodel::*;
import meta::external::store::mongodb::metamodel::pure::*;
import meta::pure::mapping::*;

// Parser Model
Class meta::external::store::mongodb::metamodel::mapping::MongoDBMapping
{
  classMappings: meta::external::store::mongodb::metamodel::mapping::MongoDBClassMapping[*];
  name: String[1];
  packageName: String[1];
  database: MongoDatabase[1];
}

Class meta::external::store::mongodb::metamodel::mapping::MongoDBClassMapping
{
    id: String[1];
    class: String[1];
    root: Boolean[1];
    distinct: Boolean[1];
    propertyMappings: MongoDBPropertyMapping[*];
    mainCollection: Collection[1];
}

Class meta::external::store::mongodb::metamodel::pure::EmbeddedMongoDBSetImplementation extends EmbeddedSetImplementation
{
    mainCollection : Collection[1];
    binding: Binding[1];
}

Class meta::external::store::mongodb::metamodel::mapping::MongoDBPropertyMapping extends meta::pure::mapping::PropertyMapping
{
    field: meta::external::store::mongodb::metamodel::mapping::Field[0..1];   // exrpession or a path to a field ;   also need a collection name....
}

Class meta::external::store::mongodb::metamodel::mapping::Field
{
    argumentExpression:  ArgumentExpression[1];   //Can be FieldPathExpression, or regular OperationExpression
    dataType : BsonType[0..1];                    // Datatype of the mapped field/expression
    nullable: Boolean[0..1];
    owner: Collection[0..1];
}

Class meta::external::store::mongodb::metamodel::pure::MongoDBSetImplementation extends InstanceSetImplementation
{
    mainCollection : Collection[1];
    binding: Binding[1];

    getStore() {
      $this.mainCollection.owner->toOne()
    }: MongoDatabase[1];
}




Class meta::external::store::mongodb::metamodel::pure::RootMongoDBSetImplementation extends InstanceSetImplementation
{
}




