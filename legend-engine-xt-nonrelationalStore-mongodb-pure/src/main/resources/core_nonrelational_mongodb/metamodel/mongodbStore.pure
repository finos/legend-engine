// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::mongodb::metamodel::*;
import meta::external::store::mongodb::metamodel::aggregation::*;

Enum meta::external::store::mongodb::metamodel::aggregation::Operator
{
    EQ, GT, GTE, IN, LT, LTE, NE, NIN, AND, NOT, NOR, OR
}

Class meta::external::store::mongodb::metamodel::BaseType
{
  allOf: BaseType[*];
  anyOf: BaseType[*];
  bsonType: BaseType[1];
  enum: String[*];
  not: BaseType[0..1];
  oneOf: BaseType[*];
  type: String[1];
  title: String[0..1];
}


Class meta::external::store::mongodb::metamodel::PropertyType
{
  key: String[1];
  value: BaseType[1];
}

Class meta::external::store::mongodb::metamodel::ArrayType extends BaseType
{
  additionalItemsAllowed: Boolean[1];
  additionalItems: BaseType[0..1];
  items: BaseType[1..*];
  maxItems: Integer[0..1];
  minItems: Integer[0..1];
  uniqueItems: Boolean[1];
}

Class meta::external::store::mongodb::metamodel::ObjectType extends BaseType
{
  properties: PropertyType[1..*];
  required: String[*];  // Refers to properties, should it be ObjectType[*]??
  additionalPropertiesAllowed: Boolean[1];
  additionalProperties: ObjectType[0..1]; 
  dependencies: ObjectType[0..1];
  description: String[0..1];
  maxProperties: Integer[0..1];
  minProperties: Integer[0..1];
  patternProperties: RegExType[0..1];

}

Class meta::external::store::mongodb::metamodel::BsonType extends BaseType
{  
}

Class {doc.doc = 'UTF 8'} meta::external::store::mongodb::metamodel::StringType extends BsonType
{
  pattern: String[0..1];
}

Class meta::external::store::mongodb::metamodel::DoubleType extends BsonType
{
}

Class meta::external::store::mongodb::metamodel::BinaryType extends BsonType
{
  subType: Integer[1]; // https://www.mongodb.com/docs/manual/reference/bson-types/#binary-data
}

Class meta::external::store::mongodb::metamodel::ObjectIdType extends BsonType
{
}

Class meta::external::store::mongodb::metamodel::BoolType extends BsonType
{
}

Class meta::external::store::mongodb::metamodel::DateType extends BsonType
{
}

Class meta::external::store::mongodb::metamodel::NullType extends BsonType
{
}

Class meta::external::store::mongodb::metamodel::RegExType extends BsonType
{  
}

Class meta::external::store::mongodb::metamodel::JavaScriptType extends BsonType
{  
}

Class meta::external::store::mongodb::metamodel::IntType extends BsonType
{
    number: Integer[1];
}

Class meta::external::store::mongodb::metamodel::TimeStampType extends BsonType
{  
}

Class meta::external::store::mongodb::metamodel::LongType extends BsonType
{  
}

Class meta::external::store::mongodb::metamodel::DecimalType extends BsonType
{  
}

Class meta::external::store::mongodb::metamodel::MinKeyType extends BsonType
{  
}

Class meta::external::store::mongodb::metamodel::MaxKeyType extends BsonType
{  
}

Class meta::external::store::mongodb::metamodel::Collection extends ObjectType
{
  owner: MongoDatabase[1];
  name: String[1];
} 

Class meta::external::store::mongodb::metamodel::CollectionView extends ObjectType
{
  owner: MongoDatabase[1];
  name: String[1];
  collation: Collation[0..1];
  source: Collection[1];
  pipeLine: ViewPipeline[1..*];
} 

Class meta::external::store::mongodb::metamodel::MongoDatabase
{
  name: String[1];
  collections: Collection[*];
  views: CollectionView[*];
}

Class meta::external::store::mongodb::metamodel::Collation
{
  locale: String[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::DatabaseCommand
{
    type: String[1];
    collectionName: String[1];
    aggregationPipeline: AggregationPipeline[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::ViewPipeline extends AggregationPipeline
{
}

Class meta::external::store::mongodb::metamodel::aggregation::AggregationPipeline
{
    stages: Stage[*];
}


Class meta::external::store::mongodb::metamodel::aggregation::Stage
{
}


Class {doc.doc = 'Maps to { $match { $expr { <aggregation expression> } } }'}
meta::external::store::mongodb::metamodel::aggregation::MatchStage extends Stage
{
  expression: ArgumentExpression[1];
}

Class {doc.doc = 'Maps to { $project { $fieldName { <specification> } } }'}
meta::external::store::mongodb::metamodel::aggregation::ProjectStage extends Stage
{
  filters: ArgumentExpression[1];
}

Class {doc.doc = 'Same as Project stage, and alias for set stage'}
meta::external::store::mongodb::metamodel::aggregation::AddFieldsStage extends Stage
{
}

Class meta::external::store::mongodb::metamodel::aggregation::LiteralValue extends ArgumentExpression
{
  value: BaseTypeValue[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::AggregateExpression
{
  arguments: ArgumentExpression[*];
}

Class meta::external::store::mongodb::metamodel::aggregation::ArgumentExpression
{
}

Class {doc.doc = 'Operations accessed by $xxx'}
meta::external::store::mongodb::metamodel::aggregation::OperatorExpression extends ArgumentExpression
{
  operator: Operator[1];
  expression: ArgumentExpression[1];
}

Class {doc.doc = 'Comparison Operator Expressions https://www.mongodb.com/docs/manual/reference/operator/query-comparison/'}
meta::external::store::mongodb::metamodel::aggregation::ComparisonOperatorExpression extends ArgumentExpression
{
  expression: LiteralValue[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::EqOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::GTOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::GreaterThanEqualsOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::InOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::LTOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::LTEOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::NEOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::NinOperatorExpression extends ComparisonOperatorExpression
{
}

Class {doc.doc = 'Logical Operator Expressions https://www.mongodb.com/docs/manual/reference/operator/query-logical/'}
meta::external::store::mongodb::metamodel::aggregation::LogicalOperatorExpression extends ArgumentExpression
{
  expressions: ArgumentExpression[*];
}

Class meta::external::store::mongodb::metamodel::aggregation::AndOperatorExpression extends LogicalOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::OrOperatorExpression extends LogicalOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::NotOperatorExpression extends LogicalOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::NorOperatorExpression extends LogicalOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::OrExpression extends ArgumentExpression
{
  expressions: ArgumentExpression[*];
  operator: Operator[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::AndExpression extends ArgumentExpression
{
  expressions: ArgumentExpression[*];
  operator: Operator[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::ArrayExpression extends ArgumentExpression
{
  items: ArgumentExpression[*];
}

Class meta::external::store::mongodb::metamodel::aggregation::FieldPathExpression extends ArgumentExpression
{
  path: String[1];  //maps to $something
}

Class meta::external::store::mongodb::metamodel::aggregation::VariableExpression extends ArgumentExpression
{
  // NOW, CLUSTER_TIME, ROOT, CURRENT, REMOVE, DESCEND, PRUNE, KEEP
  // PREFIX WITH $$
}

Class meta::external::store::mongodb::metamodel::aggregation::LiteralExpression extends ArgumentExpression
{
  value: BaseTypeValue[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::ObjectExpression extends ArgumentExpression
{
  field: String[1];
  argument: ArgumentExpression[1];
}

Class {doc.doc = 'Computed field for Project expressions with format $fieldName'}
meta::external::store::mongodb::metamodel::aggregation::ComputedFieldValue extends ArgumentExpression
{
  computedValue: StringTypeValue[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::Item extends ArgumentExpression
{
  objects: ObjectExpression[*];
}

Class meta::external::store::mongodb::metamodel::aggregation::BaseTypeValue 
{
}

Class meta::external::store::mongodb::metamodel::aggregation::StringTypeValue extends BaseTypeValue
{
  value: String[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::IntTypeValue extends BaseTypeValue
{
  value: Integer[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::BoolTypeValue extends BaseTypeValue
{
  value: Boolean[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::NullTypeValue extends BaseTypeValue
{
}

Class meta::external::store::mongodb::metamodel::aggregation::LongTypeValue extends BaseTypeValue
{
}

Class meta::external::store::mongodb::metamodel::aggregation::DecimalTypeValue extends BaseTypeValue
{
  value: Float[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::ObjectTypeValue extends BaseTypeValue
{
  keyValues: KeyValuePair[*];
}

Class meta::external::store::mongodb::metamodel::aggregation::ArrayTypeValue extends BaseTypeValue
{
  items: BaseTypeValue[*];
}

Class meta::external::store::mongodb::metamodel::aggregation::KeyValuePair
{
  key: String[1];
  value: BaseTypeValue[1];
}


Class meta::external::store::mongodb::metamodel::aggregation::ProjectExpression extends ArgumentExpression
{
  field: FieldPathExpression[1];
  isProjected: Boolean[1];
  conditionExpression: ConditionExpression[0..1]; 
}

Class meta::external::store::mongodb::metamodel::aggregation::ConditionExpression extends ArgumentExpression
{
  predicate: OperatorExpression[1];
  successCase: ArgumentExpression[1];
  failCase: ArgumentExpression[0..1]; 
}







