// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::mongodb::metamodel::aggregation::*;
import meta::external::store::mongodb::functions::pureToDatabaseCommand::*;
import meta::external::store::mongodb::metamodel::pure::runtime::*;
import meta::external::store::mongodb::metamodel::pure::*;
import meta::pure::extension::*;
import meta::pure::runtime::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::mapping::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::external::store::mongodb::metamodel::pure::graphFetch::executionPlan::*;

function meta::external::store::mongodb::graphFetch::executionPlan::planRootGraphFetchExecutionMongoDb(sq: StoreQuery[1], ext: RoutedValueSpecification[0..1], clusteredTree: StoreMappingClusteredGraphFetchTree[1], orderedPaths: String[*], mapping: Mapping[1], runtime: Runtime[1], exeCtx: ExecutionContext[1], enableConstraints: Boolean[1], checked: Boolean[1], extensions: Extension[*], debug: DebugContext[1]): LocalGraphFetchExecutionNode[1]
{
  let fe = $sq.fe->evaluateAndDeactivate();
  let lhsFe = $fe.parametersValues->evaluateAndDeactivate()->at(0)->byPassRouterInfo()->cast(@FunctionExpression);
  let rootTree = $clusteredTree->byPassClusteringInfo()->cast(@RoutedRootGraphFetchTree<Any>);
  let store = $sq.store->cast(@MongoDatabase);

  let databaseCommand = $lhsFe->toDatabaseCommand($mapping, $sq.inScopeVars, $debug, $extensions)->cast(@DatabaseCommand);
  let connection = $runtime->toOne()->connectionByElement($store)->cast(@MongoDBConnection);

  ^RootMongoDBGraphFetchExecutionNode(
    resultType = $rootTree->resultTypeFromGraphFetchTree(),
    nodeIndex = 0,
    graphFetchTree = $rootTree,
    executionNodes = [
      ^MongoDBExecutionNode(
        resultType = ^meta::pure::executionPlan::ResultType(type = Any),
        databaseCommand = $databaseCommand,
        connection = $connection
      )
    ]
  );
}