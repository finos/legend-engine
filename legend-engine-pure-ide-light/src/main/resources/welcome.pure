// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Press F9 to execute the 'go' function...
// Press F10 to run the full test suite

###Mapping
Mapping meta::external::store::document::tests::object::MongoDbMapping
(
)

###Pure 
import meta::pure::runtime::connection::authentication::*;
import meta::external::store::mongodb::metamodel::aggregation::*;
import meta::external::store::mongodb::mapping::*;
import meta::external::shared::format::executionPlan::platformBinding::legendJava::*;
import meta::external::store::mongodb::contract::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::router::store::metamodel::clustering::*;
import meta::external::store::mongodb::functions::pureToDatabaseCommand::*;
import meta::pure::router::utils::*;
import meta::pure::executionPlan::*;
import meta::pure::router::metamodel::clustering::*;
import meta::external::store::mongodb::metamodel::mapping::*;
import meta::pure::graphFetch::execution::*;
import meta::relational::runtime::*;
import meta::json::*;

function poc::tests::createTableAndFillDb(connection : meta::relational::runtime::DatabaseConnection[1]) : Boolean[1]
{
   meta::relational::metamodel::execute::executeInDb('Drop table if exists PersonTable;', $connection);
   meta::relational::metamodel::execute::executeInDb('Create Table PersonTable(id INT, firstName VARCHAR(200), lastName VARCHAR(200), age INT, addressId INT, firmId INT, managerId INT);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (1, \'Peter\', \'Smith\',23, 1,1,2);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (2, \'John\', \'Johnson\',22, 2,1,4);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (3, \'John\', \'Hill\',12, 3,1,2);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (4, \'Anthony\', \'Allen\',22, 4,1,null);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (5, \'Fabrice\', \'Roberts\',34, 5,2,null);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (6, \'Oliver\', \'Hill\',32, 6,3,null);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (7, \'David\', \'Harris\',35, 7,4,null);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (8, \'Daniel\', \'Andersson\',35, 7,4,null);', $connection);
   true;
}

function go(): Any[*]
{
  mongoExec();
  // relationalExec();
  //println('ok')
}


function mongoExec():Any[*]
{
  println('ok1',3);

  let myDb = meta::pure::mapping::modelToModel::test::setup::TestDbStore;

    let myRunTime = meta::pure::mapping::modelToModel::test::setup::testRuntime($myDb);
    let connection = $myRunTime.connectionByElement($myDb)->cast(@TestDatabaseConnection);

    let personTree = #{
      meta::pure::mapping::modelToModel::test::setup::Person {
         fName,
         lName
      }
    }#;

    let firmTree = #{
      meta::pure::mapping::modelToModel::test::setup::Firm {
         legalName,
         nickName
      }
    }#;

    let firstName = ^meta::external::store::mongodb::metamodel::mapping::Field(
          dataType = ^meta::external::store::mongodb::metamodel::StringType(),
          argumentExpression = ^FieldPathExpression(fieldPath='firstName')
    );
    let lastName = ^meta::external::store::mongodb::metamodel::mapping::Field(
          dataType = ^meta::external::store::mongodb::metamodel::StringType(),
          argumentExpression = ^FieldPathExpression(fieldPath='lName')
    );
    let age = ^meta::external::store::mongodb::metamodel::mapping::Field(
          dataType = ^meta::external::store::mongodb::metamodel::IntType(),
          argumentExpression = ^FieldPathExpression(fieldPath='age')
    );

    let domainClass = meta::pure::mapping::modelToModel::test::setup::Person;

    let personPropMappings = [
      ^meta::external::store::mongodb::metamodel::mapping::MongoDBPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'fName')->toOne(),
        sourceSetImplementationId = 'person', targetSetImplementationId = '',
        field = $firstName),
      ^meta::external::store::mongodb::metamodel::mapping::MongoDBPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'lName')->toOne(),
        sourceSetImplementationId = 'person', targetSetImplementationId = '',
        field = $lastName),
        ^meta::external::store::mongodb::metamodel::mapping::MongoDBPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'age')->toOne(),
        sourceSetImplementationId = 'person', targetSetImplementationId = '',
        field = $age)
   ];

   let mongoDatabase = ^meta::external::store::mongodb::metamodel::pure::MongoDatabase(
        name     = 'TestMongoDatabase'
    );

    let fName = ^meta::external::store::mongodb::metamodel::PropertyType(
      key = 'fName',
      value = ^meta::external::store::mongodb::metamodel::StringType()
    );

    let lName = ^meta::external::store::mongodb::metamodel::PropertyType(
      key = 'lName',
      value = ^meta::external::store::mongodb::metamodel::StringType()
    );

    let agge = ^meta::external::store::mongodb::metamodel::PropertyType(
      key = 'age',
      value = ^meta::external::store::mongodb::metamodel::IntType()
    );

    let schema = ^meta::external::store::mongodb::metamodel::Schema(
      properties = [$fName, $lName, $agge],
      required = ['fName', 'lName'],
      additionalPropertiesAllowed = true
    );

    let jsonSchemaExpression = ^meta::external::store::mongodb::metamodel::aggregation::JsonSchemaExpression(
      schemaExpression=$schema
    );

    let validator = ^meta::external::store::mongodb::metamodel::Validator(
      validatorExpression=$jsonSchemaExpression
    );

    let collection = ^meta::external::store::mongodb::metamodel::Collection(
      owner=$mongoDatabase,
      name='person',
      uuid='asdasdf',
      validator=$validator
    );

    //$mongoDatabase->mutateAdd('collections', [$collection]);

  // ->project([p|$p.firstName, p|$p.lastName], ['firstName','lastName']),
     //let personQuery = {|meta::pure::mapping::modelToModel::test::setup::Person.all()->filter(y | $y.fName == 'Theo')};

    //let personQuery = {|meta::pure::mapping::modelToModel::test::setup::Person.all()->filter(y | $y.fName == 'Theo')->filter(y | $y.lName == 'nnnnn')};
    //println($personQuery, 6);

    // let personQuery = {|meta::pure::mapping::modelToModel::test::setup::Person.all()->filter(y | $y.fName == 'Theo')->filter(y | $y.lName != 'Malatestas')->graphFetch($personTree)};

    //println($personQuery, 12);

    //  let personQuery = {|meta::pure::mapping::modelToModel::test::setup::Person.all()->filter(y | $y.fName == 'Jane' && $y.lName != 'Theo')};


     let personQuery = {|meta::pure::mapping::modelToModel::test::setup::Person.all()};

    // let personQuery = {|meta::pure::mapping::modelToModel::test::setup::Person.all()->graphFetch($personTree)};

    //println('$personQuery');
    //println(meta::json::toPrettyJSON($personQuery->deactivate(), 5));

    let firmQuery = {|meta::pure::mapping::modelToModel::test::setup::Firm.all()
      ->graphFetch($firmTree)->serialize($firmTree)};


    let mapping = meta::pure::mapping::modelToModel::test::setup::simpleRelationalMapping;

   let mongoDbClassMapping = ^meta::external::store::mongodb::metamodel::pure::MongoDBSetImplementation(
    class=$domainClass,
    root=true,
    id='person',
    //userDefinedPrimaryKey = false,
    parent = meta::external::store::document::tests::object::MongoDbMapping,
    propertyMappings = $personPropMappings,
    mainCollection = $collection
   );

   let mappingMongo = ^meta::pure::mapping::Mapping(classMappings=[$mongoDbClassMapping], name='mongoDbClassMapping');
   let mongoExtensions = [meta::external::store::mongodb::extension::mongoDBExtensions()];
   let executionContext = ^meta::external::store::mongodb::functions::pureToDatabaseCommand::MongoDBExecutionContext(queryTimeOutInSeconds=5, enableConstraints=false);
   let debugContext = ^meta::pure::tools::DebugContext(
      debug=false,
      space=' '
    );
   let mongoRuntime = ^meta::pure::runtime::Runtime(
      connections = ^meta::external::store::mongodb::metamodel::pure::runtime::MongoDBConnection(
          element=$mongoDatabase,
          type=meta::external::store::mongodb::metamodel::runtime::DatabaseType.MongoDb,
          authenticationSpecification = ^UserPasswordAuthenticationSpecification(username='sa', password=^SystemPropertiesSecret(systemPropertyName='DB_TEST_USER_1_PASSWORD')),
          dataSourceSpecification = ^meta::external::store::mongodb::metamodel::runtime::MongoDBDatasourceSpecification(
              databaseName = 'userDatabase',
              serverURLs=[^meta::external::store::mongodb::metamodel::runtime::MongoDBURL(
                baseUrl = 'localhost',
                port = 55906
              )]
          )
      )
    );
/*
    Class meta::protocols::pure::vX_X_X::metamodel::store::mongodb::connection::MongoDBDatasourceSpecification // extends meta::pure::alloy::connections::alloy::specification::DatasourceSpecification
{
   serverURLs: meta::protocols::pure::vX_X_X::metamodel::store::mongodb::connection::MongoDBURL[1..*];
   databaseName: String[0..1];
   useSSL: Boolean[0..1];
   connectionTimeoutMS: Integer[0..1];
   socketTimeoutMS: Integer[0..1];
   maxIdleTimeMS: Integer[0..1];
   maxLifeTimeMS: Integer[0..1];
   maxPoolSize: Integer[0..1];
   waitQueueMultiple: Integer[0..1];
   waitQueueTimeoutMS: Integer[0..1];
}

Class meta::protocols::pure::vX_X_X::metamodel::store::mongodb::connection::MongoDBURL
{
    baseUrl: String[1];
    port: Integer[1];
}
*/
   //let routed = $f->routeFunction($context, $extensions, $debugContext);
   //let routedFunction = $personQuery->routeFunction($mappingMongo, $runtime, $context, $extensions, $debugContext);

   //println($clusterVS, 2);
   //let query = ^meta::pure::mapping::StoreQuery(store=$clusters->at(0)->cast(@StoreMappingClusteredValueSpecification).store, fe=$fe, inScopeVars=$inScopeVars);

   // let fe = $cluster.val->byPassValueSpecificationWrapper()->cast(@FunctionExpression);

    let result = execute($personQuery, $mappingMongo, $mongoRuntime, meta::external::store::mongodb::extension::mongoDBExtensions()).values;

   // let result = meta::external::store::mongodb::functions::pureToDatabaseCommand::toDatabaseCommand($personQuery.expressionSequence, $mapping, newMap([]), $debugContext, meta::external::store::mongodb::extension::mongoDbExtensions());

    //let result = meta::pure::executionPlan::executionPlan($personQuery, $mappingMongo, $mongoRuntime, $executionContext, meta::external::store::mongodb::extension::mongoDbExtensions()->concatenate(bindingExtensionsWithLegendJavaPlatformBinding([])), $debugContext);

   println('the result is');
   println($result);
   //println($result.rootExecutionNode->cast(@MongoDbClassInstantiationExecutionNode).executionNodes->at(0)->cast(@MongoDbExecutionNode).databaseCommand, 8);
   //println($result.rootExecutionNode->cast(@CurrentExecutionNode).databaseCommand);

   // let result = meta::external::store::mongodb::functions::pureToDatabaseCommand::toDatabaseCommand($fe, $mappingMongo, $inScopeVars,  $debugContext, $executionContext, $mongoExtensions);
// function meta::relational::functions::pureToSqlQuery::toSQLQuery(functionExpression:FunctionExpression[1], mapping:Mapping[1], inScopeVars:Map<String, List<Any>>[1], execCtx: RelationalExecutionContext[0..1], debug:DebugContext[1], extensions:Extension[*]):SQLQuery[1]
   //let result = meta::relational::functions::pureToSqlQuery::toSQLQuery($personQuery, $mapping, $inScopeVars, ^meta::relational::runtime::RelationalExecutionContext(), $debugContext, meta::relational::extension::relationalExtensions());

}

function relationalExec(): Any[*]
{
  println('ok1',3);

  let myDb = meta::pure::mapping::modelToModel::test::setup::TestDbStore;

    let myRunTime = meta::pure::mapping::modelToModel::test::setup::testRuntime($myDb);
    let connection = $myRunTime.connectionByElement($myDb)->cast(@TestDatabaseConnection);
    poc::tests::createTableAndFillDb($connection);

    let personTree = #{
      meta::pure::mapping::modelToModel::test::setup::Person {
         fName
      }
    }#;

    let personQuery = {|meta::pure::mapping::modelToModel::test::setup::Person.all()->filter(y | $y.fName == 'Daniel')->filter(x | $x.lName == 'Andersson')};

    let mapping = meta::pure::mapping::modelToModel::test::setup::simpleRelationalMapping;

    let result = execute($personQuery, $mapping, $myRunTime, meta::relational::extension::relationalExtensions()).values;


    println('result before');
    println($result);
    println('result after');
}