// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::transformation::utils::*;

function meta::external::query::sql::transformation::utils::findDuplicates<T>(list:T[*]):T[*]
{
  findDuplicates($list, x | $x)
}

function meta::external::query::sql::transformation::utils::findDuplicates<T, U>(list:T[*], func:Function<{T[1]->U[1]}>[1]):U[*]
{
  $list->groupBy($func)->keyValues()->filter(kv | $kv.second.values->size() > 1).first;
}

function meta::external::query::sql::transformation::utils::getValue<X, Y>(pairs : Pair<X, Y>[*], key : X[1]) : Y[1]
{
   let r = newMap($pairs)->get($key);
   assert($r->isNotEmpty(), | 'No value found for ' + $key->makeString() + if($pairs->size() < 15 && ($key->instanceOf(String) || $key->instanceOf(Enumeration)), |', expected one of ' + $pairs.first->map(x|$x->makeString())->sort()->joinStrings('[', ',', ']'), |''));
   $r->toOne();
}

function meta::external::query::sql::transformation::utils::getValue<X, Y>(pairs : Pair<X, Y>[*], key : X[1], defaultValue : Y[1]) : Y[1]
{
   let r = newMap($pairs)->get($key);
   if ($r->isEmpty(),
          | $defaultValue,
          | $r->toOne();
       );
}

function meta::external::query::sql::transformation::utils::getValues<X, Y>(pairs : Pair<X, Y>[*], value : X[1]) : Y[*]
{
   $pairs->filter(p|$p.first == $value)->map(p | $p.second)
}

function meta::external::query::sql::transformation::utils::getParameters(f:Function<Any>[1]):VariableExpression[*]
{
   $f.classifierGenericType.typeArguments.rawType->match([
      f:FunctionType[1] | $f.parameters,
      a:Any[*] | []
   ]);
}

function meta::external::query::sql::transformation::utils::trace<V|m>(func:Function<{->V[m]}>[1], name:String[1]):V[m]
{
  meta::pure::functions::tracing::traceSpan($func, 'Legend SQL: ' + $name);
}

function meta::external::query::sql::transformation::utils::debug(a:String[1], debug:DebugContext[1]):Any[0]
{
  debug({|$a}, $debug)
}

function meta::external::query::sql::transformation::utils::debug(f:FunctionDefinition<{->String[1]}>[1], debug:DebugContext[1]):Any[0]
{
  if ($debug.debug, | println($debug.space + $f->eval()), | []);
}