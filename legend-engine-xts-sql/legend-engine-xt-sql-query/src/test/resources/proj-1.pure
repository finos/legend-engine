// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Relational
Database demo::H2DemoDataBase
(
  Table FirmTable
  (
    id INTEGER PRIMARY KEY,
    legal_name VARCHAR(200)
  )
  Table EmployeeTable
  (
    id INTEGER PRIMARY KEY,
    firm_id INTEGER,
    name VARCHAR(200),
    country_id INTEGER,
    type VARCHAR(25),
    start_date DATE
  )
  Table CountryTable
  (
    id INTEGER PRIMARY KEY,
    country_name VARCHAR(200)
  )

  Join FirmEmployee(EmployeeTable.firm_id = FirmTable.id)
  Join EmployeeCountry(EmployeeTable.country_id = CountryTable.id)
)


###Service
Service demo::H2DemoService
{
  pattern: '/testService';
  owners:
  [
    'anonymous1',
    'anonymous2'
  ];
  documentation: '';
  autoActivateUpdates: true;
  execution: Single
  {
    query: |demo::employee.all()->project(
      [
        x|$x.id,
        x|$x.name,
        x|$x.type
      ],
      [
        'Id',
        'Name',
        'Employee Type'
      ]
    );
    mapping: demo::DemoRelationalMapping;
    runtime: demo::H2DemoRuntime;
  }
}

Service demo::H2PersonService
{
  pattern: '/personService';
  owners:
  [
    'anonymous1',
    'anonymous2'
  ];
  documentation: '';
  autoActivateUpdates: true;
  execution: Single
  {
    query: |demo::employee.all()->project(
      [
        x|$x.id,
        x|$x.name,
        x|$x.type
      ],
      [
        'Id',
        'Name',
        'Employee Type'
      ]
    );
    mapping: demo::DemoRelationalMapping;
    runtime: demo::H2DemoRuntime;
  }
}

Service demo::H2PersonServiceParameterized
{
  pattern: '/personServiceForNames';
  owners:
  [
    'anonymous1',
    'anonymous2'
  ];
  documentation: '';
  autoActivateUpdates: true;
  execution: Single
  {
    query: {names:String[*]|demo::employee.all()->filter(p | $names->isEmpty() || $p.name->in($names))->project(
      [
        x|$x.id,
        x|$x.name,
        x|$x.type
      ],
      [
        'Id',
        'Name',
        'Employee Type'
      ]
    )};
    mapping: demo::DemoRelationalMapping;
    runtime: demo::H2DemoRuntime;
  }
}

Service demo::H2PersonServiceDateParameterized
{
  pattern: '/personServiceForStartDate/{date}';
  owners:
  [
    'anonymous1',
    'anonymous2'
  ];
  documentation: '';
  autoActivateUpdates: true;
  execution: Single
  {
    query: {date:Date[1]|demo::employee.all()->filter(p | $p.startDate == $date)->project(
      [
        x|$x.id,
        x|$x.name,
        x|$x.type
      ],
      [
        'Id',
        'Name',
        'Employee Type'
      ]
    )};
    mapping: demo::DemoRelationalMapping;
    runtime: demo::H2DemoRuntime;
  }
}


###Pure
Enum demo::employeeType
{
  Type1,
  Type2
}

Class demo::employee
{
  id: Integer[1];
  name: String[1];
  type: demo::employeeType[1];
  startDate: Date[1];
}


###Mapping
Mapping demo::DemoRelationalMapping
(
  *demo::employee: Relational
  {
    ~primaryKey
    (
      [demo::H2DemoDataBase]EmployeeTable.id
    )
    ~mainTable [demo::H2DemoDataBase]EmployeeTable
    id: [demo::H2DemoDataBase]EmployeeTable.id,
    name: [demo::H2DemoDataBase]EmployeeTable.name,
    type: [demo::H2DemoDataBase]EmployeeTable.type,
    startDate: [demo::H2DemoDataBase]EmployeeTable.start_date
  }
)


###Connection
RelationalDatabaseConnection demo::H2DemoConnection
{
  store: demo::H2DemoDataBase;
  type: H2;
  specification: LocalH2
  {
    testDataSetupSqls: [
      'Drop table if exists EmployeeTable;\nCreate Table EmployeeTable(id INTEGER PRIMARY KEY,firm_id INTEGER,name VARCHAR(200),country_id INTEGER, type VARCHAR(25), start_date DATE);\nInsert into EmployeeTable (id, firm_id, name, country_id, type, start_date) values (101,202, \'Alice\', 303, \'Type1\', \'2023-08-24\');\nInsert into EmployeeTable (id, firm_id, name, country_id, type, start_date) values (102,203, \'Bob\', 304, \'Type2\', \'2022-08-24\');\nInsert into EmployeeTable (id, firm_id, name, country_id, type, start_date) values (103,204, \'Curtis\', 305, \'Type2\', \'2022-07-24\');\nInsert into EmployeeTable (id, firm_id, name, country_id, type, start_date) values (104,205, \'Danielle\', 306, \'Typ1\', \'2022-07-23\');\n'
      ];
  };
  auth: DefaultH2;
}


###Runtime
Runtime demo::H2DemoRuntime
{
  mappings:
  [
    demo::DemoRelationalMapping
  ];
  connections:
  [
    demo::H2DemoDataBase:
    [
      connection_1: demo::H2DemoConnection
    ]
  ];
}
