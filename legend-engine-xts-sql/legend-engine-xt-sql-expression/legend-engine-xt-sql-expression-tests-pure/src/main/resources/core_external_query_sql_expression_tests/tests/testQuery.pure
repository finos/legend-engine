// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::mapping::*;

function <<test.Test>> meta::external::query::sql::expression::tests::testSimpleFilter():Boolean[1]
{
  let res = meta::legend::compile(readFile('/core_external_query_sql_expression_tests/tests/query.legend')->toOne());
  let plan = meta::pure::executionPlan::executionPlan(
    $res->filter(p|$p.name == 'simpleFilter__Any_MANY_')->toOne()->cast(@FunctionDefinition<Any>),
    meta::pure::extension::runtime::getExtensions(),
    noDebug()
  );
  assertEquals('select "mytab_0".name as "name" from myTab as "mytab_0" where "mytab_0".name = \'www\'', $plan.rootExecutionNode->cast(@RelationalTdsInstantiationExecutionNode).executionNodes->cast(@SQLExecutionNode).sqlQuery);
}

function <<test.Test>> meta::external::query::sql::expression::tests::testMixedFilter():Boolean[1]
{
  let res = meta::legend::compile(readFile('/core_external_query_sql_expression_tests/tests/query.legend')->toOne());
  let plan = meta::pure::executionPlan::executionPlan(
    $res->filter(p|$p.name == 'mixedExpression__Any_MANY_')->toOne()->cast(@FunctionDefinition<Any>),
    meta::pure::extension::runtime::getExtensions(),
    noDebug()
  );
  assertEquals('select "mytab_0".name as "name" from myTab as "mytab_0" where "mytab_0".name = \'www2\'', $plan.rootExecutionNode->cast(@RelationalTdsInstantiationExecutionNode).executionNodes->cast(@SQLExecutionNode).sqlQuery);
}

function <<test.Test>> meta::external::query::sql::expression::tests::testMultiLineExpression():Boolean[1]
{
   let res = meta::legend::compile(readFile('/core_external_query_sql_expression_tests/tests/query.legend')->toOne());
   let plan = meta::pure::executionPlan::executionPlan(
    $res->filter(p|$p.name == 'fmultiExpressions__Any_MANY_')->toOne()->cast(@FunctionDefinition<Any>),
    meta::pure::extension::runtime::getExtensions(),
    noDebug()
  );
  assertEquals('with q as (select "mytab_0".name as "name" from myTab as "mytab_0") select "q_0"."name" from q as "q_0" where "q_0"."name" = \'www\'', $plan.rootExecutionNode->cast(@RelationalTdsInstantiationExecutionNode).executionNodes->cast(@SQLExecutionNode).sqlQuery);

}