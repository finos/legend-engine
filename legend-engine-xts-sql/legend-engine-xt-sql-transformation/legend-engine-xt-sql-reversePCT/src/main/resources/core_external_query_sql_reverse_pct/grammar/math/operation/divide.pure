// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// println(meta::external::query::sql::reversePCT::generator::generateGeneratorTests('grammar','math/operation/divide.pure'));

// println(meta::external::query::sql::reversePCT::generator::generateTests(
//            'grammar',
//            'math/operation/divide.pure',
//            [
//              f(meta::pure::functions::math::tests::divide::testComplexDivide_Function_1__Boolean_1_),
//              f(meta::pure::functions::math::tests::divide::testDivideWithNonTerminatingExpansion_Function_1__Boolean_1_),
//              f(meta::pure::functions::math::tests::divide::testSimpleDivide_Function_1__Boolean_1_),
//              f(meta::pure::functions::math::tests::divide::testFloatDivide_Function_1__Boolean_1_),
//              f(meta::pure::functions::math::tests::divide::testDecimalDivide_Function_1__Boolean_1_),
//              f(meta::pure::functions::math::tests::divide::testNegativeDivide_Function_1__Boolean_1_)
//            ]
//           )
// );

import meta::external::query::sql::reversePCT::framework::*;

function meta::external::query::sql::reversePCT::tests::grammar::math::operation::divide::reverses():ReversesForSource[1]
{
  ^ReversesForSource(
    source = '/platform/pure/grammar/functions/math/operation/divide.pure',
    reverses = [
                 revsForTest(
                      'meta::pure::functions::math::tests::divide::testComplexDivide_Function_1__Boolean_1_',
                      [
                        rev('|9 / (18 / 6)',
                            'select ((1.0 * 9) / ((1.0 * 18) / 6))'
                        ),
                        rev('|3 / (4 / 5)',
                            'select ((1.0 * 3) / ((1.0 * 4) / 5))'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::divide::testDivideWithNonTerminatingExpansion_Function_1__Boolean_1_',
                      [
                        rev('|1 / 96',
                            'select ((1.0 * 1) / 96)'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::divide::testSimpleDivide_Function_1__Boolean_1_',
                      [
                        rev('|4 / 2',
                            'select ((1.0 * 4) / 2)'
                        ),
                        rev('|3 / 2',
                            'select ((1.0 * 3) / 2)'
                        ),
                        rev('|4 / 5',
                            'select ((1.0 * 4) / 5)'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::divide::testFloatDivide_Function_1__Boolean_1_',
                      [
                        rev('|1.75 / 0.5',
                            'select ((1.0 * 1.75) / 0.5)'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::divide::testDecimalDivide_Function_1__Boolean_1_',
                      [
                        rev('|1.0D / 2.0',
                            'select ((1.0 * 1) / 2.0)'
                        ),
                        rev('|((-4.0D) / 2.0) / 1',
                            'select ((1.0 * ((1.0 * -4) / 2.0)) / 1)'
                        ),
                        rev('|((-4.0D) / 8) / 1.0',
                            'select ((1.0 * ((1.0 * -4) / 8)) / 1.0)'
                        ),
                        rev('|(16D / 8) / 2.0',
                            'select ((1.0 * ((1.0 * 16) / 8)) / 2.0)'
                        ),
                        revError('|-(divide(3.1415D, 0.1D, 2))',
                            'select -round(((1.0 * 3.1415) / 0.1),2)',
                            'expected: -31.42D\nactual:   -31.42',
                            'Issue with Decimal return type'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::divide::testNegativeDivide_Function_1__Boolean_1_',
                      [
                        rev('|4 / (-2)',
                            'select ((1.0 * 4) / -2)'
                        ),
                        rev('|3 / (-2)',
                            'select ((1.0 * 3) / -2)'
                        )
                      ]
                 )
               ]
  )
}

function meta::external::query::sql::reversePCT::tests::grammar::math::operation::divide::exec():Boolean[1]
{
   meta::pure::functions::math::tests::divide::testComplexDivide(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::math::tests::divide::testDivideWithNonTerminatingExpansion(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::math::tests::divide::testSimpleDivide(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::math::tests::divide::testFloatDivide(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::math::tests::divide::testDecimalDivide(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::math::tests::divide::testNegativeDivide(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
}