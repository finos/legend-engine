// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::reversePCT::framework::*;
function meta::external::query::sql::reversePCT::tests::relation::functions::transformation::join::reverses():ReversesForSource[1]
{
  ^ReversesForSource(
    source = '/core_functions_relation/relation/functions/transformation/join.pure',
    reverses = [
                 revsForTest(
                      'meta::pure::functions::relation::tests::join::testSimpleJoinShared_Function_1__Boolean_1_',
                      [
                        rev('|$tds->meta::pure::functions::relation::join($tds2, meta::pure::functions::relation::JoinKind.INNER, {x: (id:Integer, name:String)[1], y: (id2:Integer, col:String, other:Integer)[1]|$x.id == $y.id2})',
                            'select "table0_0"."id" as "id", "table0_0"."name" as "name", "table0_0"."id2" as "id2", "table0_0"."col" as "col", "table0_0"."other" as "other" from (select "table0_1"."id" as "id", "table0_1"."name" as "name", "table1_0"."id2" as "id2", "table1_0"."col" as "col", "table1_0"."other" as "other" from (select "table0_2".id as "id", "table0_2".name as "name" from csv(\'id,name\n1,George\n2,Pierre\n3,Sachin\n4,David\') as "table0_2") as "table0_1" inner join (select "table1_1".id2 as "id2", "table1_1".col as "col", "table1_1".other as "other" from csv(\'id2,col,other\n1,More George 1,1\n1,More George 2,2\n4,More David,1\') as "table1_1") as "table1_0" on ("table0_1"."id" = "table1_0"."id2")) as "table0_0"'
                        ),
                        rev('|$tds->meta::pure::functions::relation::join($tds2, meta::pure::functions::relation::JoinKind.LEFT, {x: (id:Integer, name:String)[1], y: (id2:Integer, col:String, other:Integer)[1]|$x.id == $y.id2})',
                            'select "table0_0"."id" as "id", "table0_0"."name" as "name", "table0_0"."id2" as "id2", "table0_0"."col" as "col", "table0_0"."other" as "other" from (select "table0_1"."id" as "id", "table0_1"."name" as "name", "table1_0"."id2" as "id2", "table1_0"."col" as "col", "table1_0"."other" as "other" from (select "table0_2".id as "id", "table0_2".name as "name" from csv(\'id,name\n1,George\n2,Pierre\n3,Sachin\n4,David\') as "table0_2") as "table0_1" left outer join (select "table1_1".id2 as "id2", "table1_1".col as "col", "table1_1".other as "other" from csv(\'id2,col,other\n1,More George 1,1\n1,More George 2,2\n4,More David,1\') as "table1_1") as "table1_0" on ("table0_1"."id" = "table1_0"."id2")) as "table0_0"'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::relation::tests::join::testSimpleJoin_MultipleExpressions_Function_1__Boolean_1_',
                      [
                        rev('|let t1 = #TDS{\n'+
                            'id,name\n'+
                            '1,George\n'+
                            '2,Pierre\n'+
                            '3,Sachin\n'+
                            '4,David}#;\n'+
                            ' let t2 = #TDS{\n'+
                            'id2,col,other\n'+
                            '1,MoreGeorge1,1\n'+
                            '1,MoreGeorge2,2\n'+
                            '4,MoreDavid,1}#;\n'+
                            ' $t1->meta::pure::functions::relation::join($t2, meta::pure::functions::relation::JoinKind.INNER, {x: (id:Integer, name:String)[1], y: (id2:Integer, col:String, other:Integer)[1]|$x.id == $y.id2});\n',
                            'WITH t1 AS (select "table1_0".id as "id", "table1_0".name as "name" from csv(\'id,name\n              1,George\n              2,Pierre\n              3,Sachin\n              4,David\') as "table1_0"), ' +
                              't2 AS (select "table1_0".id2 as "id2", "table1_0".col as "col", "table1_0".other as "other" from csv(\'id2,col,other\n              1,More George 1,1\n              1,More George 2,2\n              4,More David,1\') as "table1_0") ' +
                              'select "t1_0"."id" as "id", "t1_0"."name" as "name", "t1_0"."id2" as "id2", "t1_0"."col" as "col", "t1_0"."other" as "other" from (select "t1_1"."id" as "id", "t1_1"."name" as "name", "t2_0"."id2" as "id2", "t2_0"."col" as "col", "t2_0"."other" as "other" from (select "t1_2"."id", "t1_2"."name" from t1 as "t1_2") as "t1_1" inner join (select "t2_1"."id2", "t2_1"."col", "t2_1"."other" from t2 as "t2_1") as "t2_0" on ("t1_1"."id" = "t2_0"."id2")) as "t1_0"'
                        ),
                        rev('|let t1 = #TDS{\n'+
                            'id,name\n'+
                            '1,George\n'+
                            '2,Pierre\n'+
                            '3,Sachin\n'+
                            '4,David}#;\n'+
                            ' let t2 = #TDS{\n'+
                            'id2,col,other\n'+
                            '1,MoreGeorge1,1\n'+
                            '1,MoreGeorge2,2\n'+
                            '4,MoreDavid,1}#;\n'+
                            ' $t1->meta::pure::functions::relation::join($t2, meta::pure::functions::relation::JoinKind.LEFT, {x: (id:Integer, name:String)[1], y: (id2:Integer, col:String, other:Integer)[1]|$x.id == $y.id2});\n'+
                            '',
                            'WITH t1 AS (select "table0_0".id as "id", "table0_0".name as "name" from csv(\'id,name\n              1,George\n              2,Pierre\n              3,Sachin\n              4,David\') as "table0_0"), ' +
                              't2 AS (select "table0_0".id2 as "id2", "table0_0".col as "col", "table0_0".other as "other" from csv(\'id2,col,other\n              1,More George 1,1\n              1,More George 2,2\n              4,More David,1\') as "table0_0") ' +
                              'select "t1_0"."id" as "id", "t1_0"."name" as "name", "t1_0"."id2" as "id2", "t1_0"."col" as "col", "t1_0"."other" as "other" from (select "t1_1"."id" as "id", "t1_1"."name" as "name", "t2_0"."id2" as "id2", "t2_0"."col" as "col", "t2_0"."other" as "other" from (select "t1_2"."id", "t1_2"."name" from t1 as "t1_2") as "t1_1" left outer join (select "t2_1"."id2", "t2_1"."col", "t2_1"."other" from t2 as "t2_1") as "t2_0" on ("t1_1"."id" = "t2_0"."id2")) as "t1_0"'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::relation::tests::join::testJoin_forFailedJoinWhenNoRowsMatchJoinCondition_Function_1__Boolean_1_',
                      [
                        rev('|let t1 = #TDS{\n'+
                            'id,col,other\n'+
                            '1,MoreTest1,1\n'+
                            '2,MoreTest2,2}#;\n'+
                            ' let t2 = #TDS{\n'+
                            'id2,name\n'+
                            '3,Pierre}#;\n'+
                            ' $t1->meta::pure::functions::relation::join($t2, meta::pure::functions::relation::JoinKind.LEFT, {x: (id:Integer, col:String, other:Integer)[1], y: (id2:Integer, name:String)[1]|$x.id == $y.id2});\n'+
                            '',
                            'WITH t1 AS (select "table0_0".id as "id", "table0_0".col as "col", "table0_0".other as "other" from csv(\'id,col,other\n              1,More Test 1,1\n              2,More Test 2,2\') as "table0_0"), ' +
                              't2 AS (select "table0_0".id2 as "id2", "table0_0".name as "name" from csv(\'id2,name\n              3,Pierre\') as "table0_0") ' +
                              'select "t1_0"."id" as "id", "t1_0"."col" as "col", "t1_0"."other" as "other", "t1_0"."id2" as "id2", "t1_0"."name" as "name" from (select "t1_1"."id" as "id", "t1_1"."col" as "col", "t1_1"."other" as "other", "t2_0"."id2" as "id2", "t2_0"."name" as "name" from (select "t1_2"."id", "t1_2"."col", "t1_2"."other" from t1 as "t1_2") as "t1_1" left outer join (select "t2_1"."id2", "t2_1"."name" from t2 as "t2_1") as "t2_0" on ("t1_1"."id" = "t2_0"."id2")) as "t1_0"'
                        )
                      ]
                 )
               ]
  )
}

function meta::external::query::sql::reversePCT::tests::relation::functions::transformation::join::exec():Boolean[1]
{
   meta::pure::functions::relation::tests::join::testSimpleJoinShared(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::relation::tests::join::testSimpleJoin_MultipleExpressions(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::relation::tests::join::testJoin_forFailedJoinWhenNoRowsMatchJoinCondition(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
}