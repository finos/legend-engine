// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::reversePCT::framework::*;

function meta::external::query::sql::reversePCT::tests::relation::functions::transformation::distinct::reverses():ReversesForSource[1]
{
  ^ReversesForSource(
    source = '/core_functions_relation/relation/functions/transformation/distinct.pure',
    reverses = [
                 revsForTest(
                      'meta::pure::functions::relation::tests::distinct::testDistinctSingle_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'val,str\n'+
                            '1,a\n'+
                            '3,ewe\n'+
                            '1,qw\n'+
                            '5,weq\n'+
                            '5,weq}#->meta::pure::functions::relation::distinct(~[val])',
                            'select distinct "table0_0".val as "val" from csv(\'val,str\n1,a\n3,ewe\n1,qw\n5,weq\n5,weq\') as "table0_0"'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::relation::tests::distinct::testDistinctSingle_MultipleExpressions_Function_1__Boolean_1_',
                      [
                        rev('|let t = #TDS{\n'+
                            'val,str\n'+
                            '1,a\n'+
                            '3,ewe\n'+
                            '1,qw\n'+
                            '5,weq\n'+
                            '5,weq}#;\n'+
                            ' $t->meta::pure::functions::relation::distinct(~[val]);\n'+
                            '',
                            'WITH t AS (select "table0_0".val as "val", "table0_0".str as "str" from csv(\'val,str\n1,a\n3,ewe\n1,qw\n5,weq\n5,weq\') as "table0_0") select distinct "t_0"."val" from t as "t_0"'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::relation::tests::distinct::testDistinctMultiple_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'val,str\n'+
                            '1,a\n'+
                            '3,ewe\n'+
                            '1,qw\n'+
                            '5,weq\n'+
                            '5,weq}#->meta::pure::functions::relation::distinct(~[val,str])',
                            'select distinct "table0_0".val as "val", "table0_0".str as "str" from csv(\'val,str\n1,a\n3,ewe\n1,qw\n5,weq\n5,weq\') as "table0_0"'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::relation::tests::distinct::testDistinctMultiple_MultipleExpressions_Function_1__Boolean_1_',
                      [
                        rev('|let t = #TDS{\n'+
                            'val,str\n'+
                            '1,a\n'+
                            '3,ewe\n'+
                            '1,qw\n'+
                            '5,weq\n'+
                            '5,weq}#;\n'+
                            ' $t->meta::pure::functions::relation::distinct(~[val,str]);\n'+
                            '',
                            'WITH t AS (select "table0_0".val as "val", "table0_0".str as "str" from csv(\'val,str\n1,a\n3,ewe\n1,qw\n5,weq\n5,weq\') as "table0_0") select distinct "t_0"."val", "t_0"."str" from t as "t_0"'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::relation::tests::distinct::testDistinctAll_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'val,str\n'+
                            '1,a\n'+
                            '3,ewe\n'+
                            '1,qw\n'+
                            '5,weq\n'+
                            '5,weq}#->meta::pure::functions::relation::distinct()',
                            'select distinct "table0_0".val as "val", "table0_0".str as "str" from csv(\'val,str\n1,a\n3,ewe\n1,qw\n5,weq\n5,weq\') as "table0_0"'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::relation::tests::distinct::testDistinctAll_MultipleExpressions_Function_1__Boolean_1_',
                      [
                        rev('|let t = #TDS{\n'+
                            'val,str\n'+
                            '1,a\n'+
                            '3,ewe\n'+
                            '1,qw\n'+
                            '5,weq\n'+
                            '5,weq}#;\n'+
                            ' $t->meta::pure::functions::relation::distinct();\n'+
                            '',
                            'WITH t AS (select "table0_0".val as "val", "table0_0".str as "str" from csv(\'val,str\n1,a\n3,ewe\n1,qw\n5,weq\n5,weq\') as "table0_0") select distinct "t_0"."val", "t_0"."str" from t as "t_0"'
                        )
                      ]
                 )
               ]
  )
}

function meta::external::query::sql::reversePCT::tests::relation::functions::transformation::distinct::exec():Boolean[1]
{
   meta::pure::functions::relation::tests::distinct::testDistinctSingle(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::relation::tests::distinct::testDistinctSingle_MultipleExpressions(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::relation::tests::distinct::testDistinctMultiple(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::relation::tests::distinct::testDistinctMultiple_MultipleExpressions(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::relation::tests::distinct::testDistinctAll(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::relation::tests::distinct::testDistinctAll_MultipleExpressions(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
}