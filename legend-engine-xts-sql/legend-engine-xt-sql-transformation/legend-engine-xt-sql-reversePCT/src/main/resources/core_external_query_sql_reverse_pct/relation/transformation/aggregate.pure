// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::reversePCT::framework::*;

function meta::external::query::sql::reversePCT::tests::relation::functions::transformation::aggregate::reverses():ReversesForSource[1]
{
  ^ReversesForSource(
    source = '/core_functions_relation/relation/functions/transformation/aggregate.pure',
    reverses = [
                 revsForTest(
                      'meta::pure::functions::relation::tests::aggregate::testSimpleAggregate_AggColSpec_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'id,grp,name\n'+
                            '1,2,A\n'+
                            '2,1,B\n'+
                            '3,3,C}#->meta::pure::functions::relation::aggregate(~idSum:x: (id:Integer, grp:Integer, name:String)[1]|$x.id:y: Integer[*]|$y->plus())',
                            'select sum("table0_0".id) as "idSum" from csv(\'id,grp,name\n1,2,A\n2,1,B\n3,3,C\') as "table0_0"'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::relation::tests::aggregate::testSimpleAggregate_AggColSpecArray_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'id,grp,code\n'+
                            '1,2,A\n'+
                            '2,1,A\n'+
                            '3,3,A}#->meta::pure::functions::relation::aggregate(~[idSum:x: (id:Integer, grp:Integer, code:String)[1]|$x.id:y: Integer[*]|$y->plus(),codes:x: (id:Integer, grp:Integer, code:String)[1]|$x.code:y: String[*]|$y->meta::pure::functions::string::joinStrings(\':\')])',
                            'select sum("table0_0".id) as "idSum", string_agg("table0_0".code, Text\':\') as "codes" from csv(\'id,grp,code\n1,2,A\n2,1,A\n3,3,A\') as "table0_0"'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::relation::tests::aggregate::testSimpleAggregate_WithFilter_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'id,grp,name\n'+
                            '1,2,A\n'+
                            '2,1,B\n'+
                            '3,3,C}#->meta::pure::functions::relation::aggregate(~idSum:x: (id:Integer, grp:Integer, name:String)[1]|$x.id:y: Integer[*]|$y->plus())->meta::pure::functions::relation::filter(r: (idSum:Integer)[1]|$r.idSum == 6)',
                            'select "subselect"."idSum" as "idSum" from (select sum("table0_1".id) as "idSum" from csv(\'id,grp,name\n1,2,A\n2,1,B\n3,3,C\') as "table0_1") as "subselect" where "subselect"."idSum" = 6'
                        )
                      ]
                 )
               ]
  )
}

function meta::external::query::sql::reversePCT::tests::relation::functions::transformation::aggregate::exec():Boolean[1]
{
   meta::pure::functions::relation::tests::aggregate::testSimpleAggregate_AggColSpec(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::relation::tests::aggregate::testSimpleAggregate_AggColSpecArray(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::relation::tests::aggregate::testSimpleAggregate_WithFilter(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
}