// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::reversePCT::framework::*;

function meta::external::query::sql::reversePCT::tests::variant::navigation::get::reverses():ReversesForSource[1]
{
  ^ReversesForSource(
    source = '/platform/pure/variant/navigation/get.pure',
    reverses = [
                 revsForTest(
                      'meta::pure::functions::variant::navigation::tests::get::testGetFromObjectWhenKeyExists_Function_1__Boolean_1_',
                      [
                        revError('|\'{"hello":"world"}\'->meta::pure::functions::variant::convert::fromJson()->meta::pure::functions::variant::navigation::get(\'hello\')->meta::pure::functions::multiplicity::toOne()',
                            'select cast(json_extract_path(cast (Text\'{"hello":"world"}\' as JSON), Text\'hello\') as JSON)',
                            'Error during dynamic reactivation',
                            'investigation required'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::variant::navigation::tests::get::testGetFromObjectWhenKeyDoesNotExists_Function_1__Boolean_1_',
                      [
                        rev('|\'{"hello":"world"}\'->meta::pure::functions::variant::convert::fromJson()->meta::pure::functions::variant::navigation::get(\'nonExisting\')',
                            'select json_extract_path(cast(Text\'{"hello":"world"}\' as JSON), Text\'nonExisting\')'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::variant::navigation::tests::get::testGetFromZeroMultiplicityObject_Function_1__Boolean_1_',
                      [
                        rev('|[]->meta::pure::functions::lang::cast(@meta::pure::metamodel::variant::Variant)->meta::pure::functions::variant::navigation::get(\'hello\')',
                            'select json_extract_path(cast(cast(null as TEXT) as JSON), Text\'hello\')'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::variant::navigation::tests::get::testGetFromArray_Function_1__Boolean_1_',
                      [
                        rev('|\'[1,2,3]\'->meta::pure::functions::variant::convert::fromJson()->meta::pure::functions::variant::navigation::get(1)->meta::pure::functions::multiplicity::toOne()',
                            'select cast(Text\'[1,2,3]\' as JSON)->1'
                        )
                      ]
                 )
               ]
  )
}

function meta::external::query::sql::reversePCT::tests::variant::navigation::get::exec():Boolean[1]
{
   meta::pure::functions::variant::navigation::tests::get::testGetFromObjectWhenKeyExists(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::variant::navigation::tests::get::testGetFromObjectWhenKeyDoesNotExists(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::variant::navigation::tests::get::testGetFromZeroMultiplicityObject(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::variant::navigation::tests::get::testGetFromArray(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
}