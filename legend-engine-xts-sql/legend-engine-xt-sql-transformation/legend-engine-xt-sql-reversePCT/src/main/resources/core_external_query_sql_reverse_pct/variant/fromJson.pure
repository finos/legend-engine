// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::reversePCT::framework::*;

function meta::external::query::sql::reversePCT::tests::variant::convert::fromJson::reverses():ReversesForSource[1]
{
  ^ReversesForSource(
    source = '/platform/pure/variant/convert/fromJson.pure',
    reverses = [
                 revsForTest(
                      'meta::pure::functions::variant::convert::tests::fromJson::testJsonNull_Function_1__Boolean_1_',
                      [
                        rev('|\'null\'->meta::pure::functions::variant::convert::fromJson()',
                            'select cast(Text\'null\' as JSON)'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::variant::convert::tests::fromJson::testJsonArrayOfNull_Function_1__Boolean_1_',
                      [
                        rev('|\'[ null, null , null ]\'->meta::pure::functions::variant::convert::fromJson()',
                            'select cast(Text\'[ null, null , null ]\' as JSON)'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::variant::convert::tests::fromJson::testJsonInteger_Function_1__Boolean_1_',
                      [
                        rev('|\'1\'->meta::pure::functions::variant::convert::fromJson()',
                            'select cast(Text\'1\' as JSON)'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::variant::convert::tests::fromJson::testJsonArrayOfInteger_Function_1__Boolean_1_',
                      [
                        rev('|\'[ 1, 2 , 3 ]\'->meta::pure::functions::variant::convert::fromJson()',
                            'select cast(Text\'[ 1, 2 , 3 ]\' as JSON)'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::variant::convert::tests::fromJson::testJsonFloat_Function_1__Boolean_1_',
                      [
                        rev('|\'1.25\'->meta::pure::functions::variant::convert::fromJson()',
                            'select cast(Text\'1.25\' as JSON)'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::variant::convert::tests::fromJson::testJsonArrayOfFloat_Function_1__Boolean_1_',
                      [
                        rev('|\'[ 1.25 , 2.5 , 3.75 ]\'->meta::pure::functions::variant::convert::fromJson()',
                            'select cast(Text\'[ 1.25 , 2.5 , 3.75 ]\' as JSON)'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::variant::convert::tests::fromJson::testJsonString_Function_1__Boolean_1_',
                      [
                        rev('|\'"Hello"\'->meta::pure::functions::variant::convert::fromJson()',
                            'select cast(Text\'"Hello"\' as JSON)'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::variant::convert::tests::fromJson::testJsonArrayOfString_Function_1__Boolean_1_',
                      [
                        rev('|\'[ "Hello" , "World" ]\'->meta::pure::functions::variant::convert::fromJson()',
                            'select cast(Text\'[ "Hello" , "World" ]\' as JSON)'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::variant::convert::tests::fromJson::testJsonObject_Function_1__Boolean_1_',
                      [
                        rev('|\'{ "Hello" : null }\'->meta::pure::functions::variant::convert::fromJson()',
                            'select cast(Text\'{ "Hello" : null }\' as JSON)'
                        ),
                        rev('|\'{ "Hello" : "World" }\'->meta::pure::functions::variant::convert::fromJson()',
                            'select cast(Text\'{ "Hello" : "World" }\' as JSON)'
                        ),
                        rev('|\'{ "Hello" : [ "World", "!" ] }\'->meta::pure::functions::variant::convert::fromJson()',
                            'select cast(Text\'{ "Hello" : [ "World", "!" ] }\' as JSON)'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::variant::convert::tests::fromJson::testJsonArrayOfObject_Function_1__Boolean_1_',
                      [
                        rev('|\'[ { "Hello" : null }, { "Hello" : "World" } ]\'->meta::pure::functions::variant::convert::fromJson()',
                            'select cast(Text\'[ { "Hello" : null }, { "Hello" : "World" } ]\' as JSON)'
                        )
                      ]
                 )
               ]
  )
}

function meta::external::query::sql::reversePCT::tests::variant::convert::fromJson::exec():Boolean[1]
{
   meta::pure::functions::variant::convert::tests::fromJson::testJsonNull(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::variant::convert::tests::fromJson::testJsonArrayOfNull(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::variant::convert::tests::fromJson::testJsonInteger(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::variant::convert::tests::fromJson::testJsonArrayOfInteger(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::variant::convert::tests::fromJson::testJsonFloat(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::variant::convert::tests::fromJson::testJsonArrayOfFloat(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::variant::convert::tests::fromJson::testJsonString(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::variant::convert::tests::fromJson::testJsonArrayOfString(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::variant::convert::tests::fromJson::testJsonObject(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::variant::convert::tests::fromJson::testJsonArrayOfObject(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
}