// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::reversePCT::framework::*;
function meta::external::query::sql::reversePCT::tests::unclassified::string::ascii::ascii::reverses():ReversesForSource[1]
{
  ^ReversesForSource(
    source = '/core_functions_unclassified/string/ascii/ascii.pure',
    reverses = [
                 revsForTest(
                      'meta::pure::functions::string::tests::ascii::testAsciiUpper_Function_1__Boolean_1_',
                      [
                        rev('|\'A\'->meta::pure::functions::string::ascii()',
                            'select ascii(Text\'A\')'
                        ),
                        rev('|\'Z\'->meta::pure::functions::string::ascii()',
                            'select ascii(Text\'Z\')'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::string::tests::ascii::testAsciiLower_Function_1__Boolean_1_',
                      [
                        rev('|\'a\'->meta::pure::functions::string::ascii()',
                            'select ascii(Text\'a\')'
                        ),
                        rev('|\'z\'->meta::pure::functions::string::ascii()',
                            'select ascii(Text\'z\')'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::string::tests::ascii::testAsciiDigit_Function_1__Boolean_1_',
                      [
                        rev('|\'0\'->meta::pure::functions::string::ascii()',
                            'select ascii(Text\'0\')'
                        ),
                        rev('|\'9\'->meta::pure::functions::string::ascii()',
                            'select ascii(Text\'9\')'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::string::tests::ascii::testAsciiEmptyChar_Function_1__Boolean_1_',
                      [
                        rev('|\'\'->meta::pure::functions::string::ascii()',
                            'select ascii(Text\'\')'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::string::tests::ascii::testAsciiNewline_Function_1__Boolean_1_',
                      [
                        revError('|\'\\n'+
                            '\'->meta::pure::functions::string::ascii()',
                                 '',
                                 'Unexpected token',
                                 'Needs investigating'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::string::tests::ascii::testAsciiWhitespace_Function_1__Boolean_1_',
                      [
                        rev('|\' \'->meta::pure::functions::string::ascii()',
                            'select ascii(Text\' \')'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::string::tests::ascii::testAsciiMultiCharString_Function_1__Boolean_1_',
                      [
                        rev('|\'abc\'->meta::pure::functions::string::ascii()',
                            'select ascii(Text\'abc\')'
                        )
                      ]
                 )
               ]
  )
}

function meta::external::query::sql::reversePCT::tests::unclassified::string::ascii::ascii::exec():Boolean[1]
{
   meta::pure::functions::string::tests::ascii::testAsciiUpper(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::string::tests::ascii::testAsciiLower(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::string::tests::ascii::testAsciiDigit(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::string::tests::ascii::testAsciiEmptyChar(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   //meta::pure::functions::string::tests::ascii::testAsciiNewline(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::string::tests::ascii::testAsciiWhitespace(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::string::tests::ascii::testAsciiMultiCharString(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
}