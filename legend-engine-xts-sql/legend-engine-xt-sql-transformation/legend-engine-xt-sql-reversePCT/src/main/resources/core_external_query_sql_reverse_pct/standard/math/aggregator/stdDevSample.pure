// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::reversePCT::framework::*;

function meta::external::query::sql::reversePCT::tests::standard::math::aggregator::stdDevSample::reverses():ReversesForSource[1]
{
  ^ReversesForSource(
    source = '/core_functions_standard/math/aggregator/stdDevSample.pure',
    reverses = [
                 revsForTest(
                      'meta::pure::functions::math::tests::stdDev::testIntStdDev_Function_1__Boolean_1_',
                      [
                        rev('|[1, 2, 3]->meta::pure::functions::math::stdDevSample()',
                            'select sqrt(var_samp([1,2,3]))'
                        ),
                        rev('|[2, 4, 6]->meta::pure::functions::math::stdDevSample()',
                            'select sqrt(var_samp([2,4,6]))'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::stdDev::testFloatStdDev_Function_1__Boolean_1_',
                      [
                        rev('|[1.0, 2.0, 3.0]->meta::pure::functions::math::stdDevSample()',
                            'select sqrt(var_samp([1.0,2.0,3.0]))'
                        ),
                        rev('|[1.5, 2.5, 3.5]->meta::pure::functions::math::stdDevSample()',
                            'select sqrt(var_samp([1.5,2.5,3.5]))'
                        ),
                        rev('|[3.14, 6.28, 9.42]->meta::pure::functions::math::stdDevSample()',
                            'select sqrt(var_samp([3.14,6.28,9.42]))'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::stdDev::testMixedStdDev_Function_1__Boolean_1_',
                      [
                        rev('|[1.0, 2, 3.0]->meta::pure::functions::math::stdDevSample()',
                            'select sqrt(var_samp([1.0,2,3.0]))'
                        ),
                        rev('|[1, 1.5, 2]->meta::pure::functions::math::stdDevSample()',
                            'select sqrt(var_samp([1,1.5,2]))'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::stdDev::testNegativeNumberStdDev_Function_1__Boolean_1_',
                      [
                        rev('|[-2, -4, -6]->meta::pure::functions::math::stdDevSample()',
                            'select sqrt(var_samp([-2,-4,-6]))'
                        ),
                        rev('|[-5, 0, 5]->meta::pure::functions::math::stdDevSample()',
                            'select sqrt(var_samp([-5,0,5]))'
                        ),
                        rev('|[-5.0, 0.0, 5.0]->meta::pure::functions::math::stdDevSample()',
                            'select sqrt(var_samp([-5.0,0.0,5.0]))'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::stdDev::testSimpleGroupByStandardDeviationSample_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'id,val\n'+
                            '1,1.0\n'+
                            '1,2.0\n'+
                            '1,3\n'+
                            '2,1.5\n'+
                            '2,2.5\n'+
                            '2,3.5\n'+
                            '3,1\n'+
                            '3,1.5\n'+
                            '3,2.0}#->meta::pure::functions::relation::groupBy(~[id], ~[newCol:x: (id:Integer, val:Float)[1]|$x.val:y: Float[*]|$y->meta::pure::functions::math::stdDevSample()])',
                            'select "table0_0".id as "id", stddev_samp("table0_0".val) as "newCol" from csv(\'id,val\n1,1.0\n1,2.0\n1,3\n2,1.5\n2,2.5\n2,3.5\n3,1\n3,1.5\n3,2.0\') as "table0_0" group by "id"'
                        )
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::stdDev::testSimpleWindowStandardDeviationSample_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'id,val\n'+
                            '1,1.0\n'+
                            '1,2.0\n'+
                            '1,3\n'+
                            '2,1.5\n'+
                            '2,2.5\n'+
                            '2,3.5\n'+
                            '3,1\n'+
                            '3,1.5\n'+
                            '3,2.0}#->meta::pure::functions::relation::extend(~id->meta::pure::functions::relation::over(), ~newCol:{p: meta::pure::metamodel::relation::Relation<(id:Integer, val:Float)>[1], w: meta::pure::functions::relation::_Window<(id:Integer, val:Float)>[1], r: (id:Integer, val:Float)[1]|$r.val}:y: Float[*]|$y->meta::pure::functions::math::stdDevSample())',
                            'select "table0_0".id as "id", "table0_0".val as "val", stddev_samp("table0_0".val) OVER (Partition By "table0_0".id) as "newCol" from csv(\'id,val\n1,1.0\n1,2.0\n1,3\n2,1.5\n2,2.5\n2,3.5\n3,1\n3,1.5\n3,2.0\') as "table0_0"'
                        )
                      ]
                 )
               ]
  )
}

function meta::external::query::sql::reversePCT::tests::standard::math::aggregator::stdDevSample::exec():Boolean[1]
{
   meta::pure::functions::math::tests::stdDev::testIntStdDev(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::math::tests::stdDev::testFloatStdDev(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::math::tests::stdDev::testMixedStdDev(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::math::tests::stdDev::testNegativeNumberStdDev(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::math::tests::stdDev::testSimpleGroupByStandardDeviationSample(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
   meta::pure::functions::math::tests::stdDev::testSimpleWindowStandardDeviationSample(meta::external::query::sql::reversePCT::framework::sql_Function_1__X_o_);
}