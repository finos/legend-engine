// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::reversePCT::framework::*;

function meta::external::query::sql::reversePCT::tests::standard::math::aggregator::average::reverses():ReversesForSource[1]
{
  ^ReversesForSource(
    source = '/core_functions_standard/math/aggregator/average.pure',
    reverses = [
                revsForTest(
                      'meta::pure::functions::math::tests::average::testAverage_Integers_Function_1__Boolean_1_',
                      [
                        revError('|1->meta::pure::functions::math::average()',
                                 '',
                                 'Unexpected token',
                                 'should make something like \'SELECT avg(a) from unnest(ARRAY[1, 2]) as a\' work')
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::average::testAverage_Floats_Function_1__Boolean_1_',
                      [
                        revError('|1.0->meta::pure::functions::math::average()',
                                 '',
                                 'Unexpected token',
                                 'should make something like \'SELECT avg(a) from unnest(ARRAY[1, 2]) as a\' work')
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::average::testAverage_Numbers_Function_1__Boolean_1_',
                      [
                        revError('|1D->meta::pure::functions::math::average()',
                                 '',
                                 'Unexpected token',
                                 'should make something like \'SELECT avg(a) from unnest(ARRAY[1, 2]) as a\' work')
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::average::testAverage_Integers_Relation_Aggregate_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'id,grp,name,employeeNumber\n'+
                            '1,2,A,21\n'+
                            '2,1,B,41\n'+
                            '3,3,C,71\n'+
                            '4,4,D,31\n'+
                            '5,2,E,11\n'+
                            '6,1,F,1\n'+
                            '7,3,G,91\n'+
                            '8,1,H,81\n'+
                            '9,5,I,51\n'+
                            '10,0,J,101}#->meta::pure::functions::relation::groupBy(~grp, ~newCol:x: (id:Integer, grp:Integer, name:String, employeeNumber:Integer)[1]|$x.employeeNumber:y: Integer[*]|$y->meta::pure::functions::math::average())',
                            'select grp,avg(employeeNumber) as newCol from csv(\'id,grp,name,employeeNumber\n1,2,A,21\n2,1,B,41\n3,3,C,71\n4,4,D,31\n5,2,E,11\n6,1,F,1\n7,3,G,91\n8,1,H,81\n9,5,I,51\n10,0,J,101\') group by grp')
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::average::testAverage_Floats_Relation_Aggregate_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'id,grp,name,employeeNumber\n'+
                            '1,2,A,21.0\n'+
                            '2,1,B,41.0\n'+
                            '3,3,C,71.0\n'+
                            '4,4,D,31.0\n'+
                            '5,2,E,11.0\n'+
                            '6,1,F,1.0\n'+
                            '7,3,G,91.0\n'+
                            '8,1,H,81.0\n'+
                            '9,5,I,51.0\n'+
                            '10,0,J,101.0}#->meta::pure::functions::relation::groupBy(~grp, ~newCol:x: (id:Integer, grp:Integer, name:String, employeeNumber:Float)[1]|$x.employeeNumber:y: Float[*]|$y->meta::pure::functions::math::average())',
                            'select grp,avg(employeeNumber) as newCol from csv(\'id,grp,name,employeeNumber\n1,2,A,21.0\n2,1,B,41.0\n3,3,C,71.0\n4,4,D,31.0\n5,2,E,11.0\n6,1,F,1.0\n7,3,G,91.0\n8,1,H,81.0\n9,5,I,51.0\n10,0,J,101.0\') group by grp')
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::average::testAverage_Numbers_Relation_Aggregate_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'id,grp,name,employeeNumber\n'+
                            '1,2,A,21d\n'+
                            '2,1,B,41.0d\n'+
                            '3,3,C,71d\n'+
                            '4,4,D,31d\n'+
                            '5,2,E,11d\n'+
                            '6,1,F,1d\n'+
                            '7,3,G,91d\n'+
                            '8,1,H,81d\n'+
                            '9,5,I,51d\n'+
                            '10,0,J,101.0d}#->meta::pure::functions::relation::groupBy(~grp, ~newCol:x: (id:Integer, grp:Integer, name:String, employeeNumber:Float)[1]|$x.employeeNumber->meta::pure::functions::lang::cast(@Number):y: Number[*]|$y->meta::pure::functions::math::average())',
                            'select grp,avg(employeeNumber) as newCol from csv(\'id,grp,name,employeeNumber\n1,2,A,21d\n2,1,B,41.0d\n3,3,C,71d\n4,4,D,31d\n5,2,E,11d\n6,1,F,1d\n7,3,G,91d\n8,1,H,81d\n9,5,I,51d\n10,0,J,101.0d\') group by grp')
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::average::testAverage_Integers_Relation_Window_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'id,grp,name\n'+
                            '1,2,A\n'+
                            '2,1,B\n'+
                            '3,3,C\n'+
                            '4,4,D\n'+
                            '5,2,E\n'+
                            '6,1,F\n'+
                            '7,3,G\n'+
                            '7,1,H\n'+
                            '9,5,I\n'+
                            '10,0,J}#->meta::pure::functions::relation::extend(~grp->meta::pure::functions::relation::over(), ~newCol:{p: meta::pure::metamodel::relation::Relation<(id:Integer, grp:Integer, name:String)>[1], w: meta::pure::functions::relation::_Window<(id:Integer, grp:Integer, name:String)>[1], r: (id:Integer, grp:Integer, name:String)[1]|$r.id}:y: Integer[*]|$y->meta::pure::functions::math::average())',
                            'select id, grp, name, avg(id) over (partition by grp) as newCol from csv(\'id,grp,name\n1,2,A\n2,1,B\n3,3,C\n4,4,D\n5,2,E\n6,1,F\n7,3,G\n7,1,H\n9,5,I\n10,0,J\')')
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::average::testAverage_Floats_Relation_Window_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'id,grp,name\n'+
                            '1.0,2,A\n'+
                            '2.0,1,B\n'+
                            '3.0,3,C\n'+
                            '4.0,4,D\n'+
                            '5.0,2,E\n'+
                            '6.0,1,F\n'+
                            '7.0,3,G\n'+
                            '7.0,1,H\n'+
                            '9.0,5,I\n'+
                            '10.0,0,J}#->meta::pure::functions::relation::extend(~grp->meta::pure::functions::relation::over(), ~newCol:{p: meta::pure::metamodel::relation::Relation<(id:Float, grp:Integer, name:String)>[1], w: meta::pure::functions::relation::_Window<(id:Float, grp:Integer, name:String)>[1], r: (id:Float, grp:Integer, name:String)[1]|$r.id}:y: Float[*]|$y->meta::pure::functions::math::average())',
                            'select id, grp, name, avg(id) over (partition by grp) as newCol from csv(\'id,grp,name\n1.0,2,A\n2.0,1,B\n3.0,3,C\n4.0,4,D\n5.0,2,E\n6.0,1,F\n7.0,3,G\n7.0,1,H\n9.0,5,I\n10.0,0,J\')')
                      ]
                 ),
                 revsForTest(
                      'meta::pure::functions::math::tests::average::testAverage_Numbers_Relation_Window_Function_1__Boolean_1_',
                      [
                        rev('|#TDS{\n'+
                            'id,grp,name\n'+
                            '1.0,2,A\n'+
                            '2.0,1,B\n'+
                            '3.0,3,C\n'+
                            '4.0,4,D\n'+
                            '5.0,2,E\n'+
                            '6.0,1,F\n'+
                            '7.0,3,G\n'+
                            '7.0,1,H\n'+
                            '9.0,5,I\n'+
                            '10.0,0,J}#->meta::pure::functions::relation::extend(~grp->meta::pure::functions::relation::over(), ~newCol:{p: meta::pure::metamodel::relation::Relation<(id:Float, grp:Integer, name:String)>[1], w: meta::pure::functions::relation::_Window<(id:Float, grp:Integer, name:String)>[1], r: (id:Float, grp:Integer, name:String)[1]|$r.id->meta::pure::functions::lang::cast(@Number)}:y: Number[*]|$y->meta::pure::functions::math::average())',
                            'select id, grp, name, avg(id) over (partition by grp) as newCol from csv(\'id,grp,name\n1.0,2,A\n2.0,1,B\n3.0,3,C\n4.0,4,D\n5.0,2,E\n6.0,1,F\n7.0,3,G\n7.0,1,H\n9.0,5,I\n10.0,0,J\')')
                      ]
                 )
                ]
  )
}
