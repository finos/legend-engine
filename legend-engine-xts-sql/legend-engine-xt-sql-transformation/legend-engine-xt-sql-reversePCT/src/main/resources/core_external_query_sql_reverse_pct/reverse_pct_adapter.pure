// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::relation::*;
import meta::pure::test::pct::reversePCT::framework::*;
import meta::external::query::sql::reversePCT::framework::*;
import meta::pure::test::pct::*;

function <<PCT.adapter>> {PCT.adapterName='SQL'} meta::external::query::sql::reversePCT::framework::sql<X|o>(f:Function<{->X[o]}>[1]):X[o]
{
  // Find SQL ---
  let rev = findReverseForFunction($f, reverses(), [meta::relational::grammar::serialization::relationGrammarExtension()]);

  if ($rev.shouldBeSupported,
    | let sqlString = $rev.reverse->toOne();
      let func = meta::external::query::sql::transformation::queryToPure::sqlToPure($sqlString->toOne());

      let returnType = $func->functionReturnType();
      let expectedReturnType = $f->functionReturnType();

      if ($returnType.rawType == Relation && $expectedReturnType.rawType != Relation,
        | 
          let tds = $func->cast(@Function<{->Relation<Any>[1]}>)->eval();
          let columns = $tds->columns();
          let values = $tds->map(x | $columns->map(c | $c->eval($x)));

          let functionType = $f.classifierGenericType.typeArguments->toOne().rawType->cast(@FunctionType)->toOne();
          let newFunc = meta::pure::functions::meta::newLambdaFunction($functionType);
          ^$newFunc(expressionSequence = ^InstanceValue(multiplicity=$f->functionReturnMultiplicity(),genericType=$f->functionReturnType(), values = $values))->cast(@Function<{->X[o]}>)->eval();,
        | $func->cast(@Function<{->X[o]}>)->eval());,

    |fail('Should not be supported');@X->toMultiplicity(@[o]);
  );
}

function meta::external::query::sql::reversePCT::framework::reverses():ReversesForSource[*]
{
    meta::external::query::sql::reversePCT::tests::grammar::reverses()
    ->concatenate(meta::external::query::sql::reversePCT::tests::essential::reverses())
    ->concatenate(meta::external::query::sql::reversePCT::tests::relation::reverses())
    ->concatenate(meta::external::query::sql::reversePCT::tests::standard::reverses())
    ->concatenate(meta::external::query::sql::reversePCT::tests::unclassified::reverses())
    ->concatenate(meta::external::query::sql::reversePCT::tests::variant::reverses())
}
