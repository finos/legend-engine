// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Relational
Database meta::external::query::sql::transformation::queryToPure::tests::dynamic::db
(
  Table tb(n Varchar(200), o INT)
)

###Pure
import meta::pure::metamodel::serialization::grammar::*;
import meta::external::query::sql::transformation::queryToPure::tests::dynamic::*;

function <<test.Test>> meta::external::query::sql::transformation::queryToPure::tests::dynamic::testDynamicCSV():Boolean[1]
{
  assertEquals('|#TDS{\na,b\n1,2\n2,3}#->meta::pure::functions::relation::select(~[a])',
                transform('select a from csv(\'a,b\n1,2\n2,3\')',[]));
  assertEquals('|#>{meta::external::query::sql::transformation::queryToPure::tests::dynamic::db.tb}#->meta::pure::functions::relation::select(~[n])',
                transform('select n from tb(\'meta::external::query::sql::transformation::queryToPure::tests::dynamic::db.tb\')',[]));
  assertEquals('|#>{legend::db.myTb}#->meta::pure::functions::relation::select(~[a])',
                transform('select a from tb(\'legend::db.myTb\')', meta::legend::compile(readFile('/core_external_query_sql/binding/fromPure/tests/dynamic/db.legend')->toOne())));
}

function meta::external::query::sql::transformation::queryToPure::tests::dynamic::transform(sql:String[1], extraPacks:PackageableElement[*]):String[1]
{
  meta::external::query::sql::transformation::queryToPure::sqlToPure($sql, $extraPacks)->cast(@FunctionDefinition<Any>)->printFunctionDefinition(meta::external::query::sql::transformation::queryToPure::dynamicGrammarConfiguration(), ^GContext(space=''))
}
